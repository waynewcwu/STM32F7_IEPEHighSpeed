
STM32F7_IEPEHighSpeed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013f28  08008200  08008200  00008200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000de40  0801c128  0801c128  0001c128  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029f68  08029f68  00030200  2**0
                  CONTENTS
  4 .ARM          00000008  08029f68  08029f68  00029f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029f70  08029f70  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08029f70  08029f70  00029f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08029f74  08029f74  00029f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08029f78  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0006c390  20000200  0802a178  00030200  2**5
                  ALLOC
 10 ._user_heap_stack 00000600  2006c590  0802a178  0003c590  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ae1e  00000000  00000000  0003022e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d09  00000000  00000000  0005b04c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001770  00000000  00000000  00060d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002b4a8  00000000  00000000  000624c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00021dc8  00000000  00000000  0008d970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001029c9  00000000  00000000  000af738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  001b2101  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000014c8  00000000  00000000  001b2158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000072e0  00000000  00000000  001b3620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008200 <__do_global_dtors_aux>:
 8008200:	b510      	push	{r4, lr}
 8008202:	4c05      	ldr	r4, [pc, #20]	; (8008218 <__do_global_dtors_aux+0x18>)
 8008204:	7823      	ldrb	r3, [r4, #0]
 8008206:	b933      	cbnz	r3, 8008216 <__do_global_dtors_aux+0x16>
 8008208:	4b04      	ldr	r3, [pc, #16]	; (800821c <__do_global_dtors_aux+0x1c>)
 800820a:	b113      	cbz	r3, 8008212 <__do_global_dtors_aux+0x12>
 800820c:	4804      	ldr	r0, [pc, #16]	; (8008220 <__do_global_dtors_aux+0x20>)
 800820e:	f3af 8000 	nop.w
 8008212:	2301      	movs	r3, #1
 8008214:	7023      	strb	r3, [r4, #0]
 8008216:	bd10      	pop	{r4, pc}
 8008218:	20000200 	.word	0x20000200
 800821c:	00000000 	.word	0x00000000
 8008220:	0801c110 	.word	0x0801c110

08008224 <frame_dummy>:
 8008224:	b508      	push	{r3, lr}
 8008226:	4b03      	ldr	r3, [pc, #12]	; (8008234 <frame_dummy+0x10>)
 8008228:	b11b      	cbz	r3, 8008232 <frame_dummy+0xe>
 800822a:	4903      	ldr	r1, [pc, #12]	; (8008238 <frame_dummy+0x14>)
 800822c:	4803      	ldr	r0, [pc, #12]	; (800823c <frame_dummy+0x18>)
 800822e:	f3af 8000 	nop.w
 8008232:	bd08      	pop	{r3, pc}
 8008234:	00000000 	.word	0x00000000
 8008238:	20000204 	.word	0x20000204
 800823c:	0801c110 	.word	0x0801c110

08008240 <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 8008240:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 8008242:	2b01      	cmp	r3, #1
	IT       LS
 8008244:	bf98      	it	ls
	BXLS     lr
 8008246:	4770      	bxls	lr
	PUSH     {r4-r9}
 8008248:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 800824c:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 800824e:	089b      	lsrs	r3, r3, #2

08008250 <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 8008250:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 8008254:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8008258:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 800825a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 800825e:	4480      	add	r8, r0
	ADD      r9,r0,r9
 8008260:	4481      	add	r9, r0
	ADD      r2,r0,r2
 8008262:	4402      	add	r2, r0
	ADD      r12,r0,r12
 8008264:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 8008266:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800826a:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 800826e:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8008270:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8008274:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8008278:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800827c:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8008280:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 8008282:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 8008286:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 800828a:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 800828c:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 8008290:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 8008294:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 8008298:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 800829c:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 800829e:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 80082a0:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 80082a2:	d1d5      	bne.n	8008250 <arm_bitreversal_32_0>
	POP      {r4-r9}
 80082a4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 80082a8:	4770      	bx	lr

080082aa <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 80082aa:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 80082ac:	2b01      	cmp	r3, #1
	IT       LS
 80082ae:	bf98      	it	ls
	BXLS     lr
 80082b0:	4770      	bxls	lr
	PUSH     {r4-r9}
 80082b2:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 80082b6:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 80082b8:	089b      	lsrs	r3, r3, #2

080082ba <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 80082ba:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 80082be:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 80082c2:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 80082c4:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 80082c8:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 80082cc:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 80082d0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 80082d4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 80082d8:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 80082dc:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 80082e0:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 80082e2:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 80082e6:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 80082ea:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 80082ee:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 80082f2:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 80082f4:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 80082f6:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 80082f8:	d1df      	bne.n	80082ba <arm_bitreversal_16_0>
	POP      {r4-r9}
 80082fa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 80082fe:	4770      	bx	lr

08008300 <strlen>:
 8008300:	4603      	mov	r3, r0
 8008302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008306:	2a00      	cmp	r2, #0
 8008308:	d1fb      	bne.n	8008302 <strlen+0x2>
 800830a:	1a18      	subs	r0, r3, r0
 800830c:	3801      	subs	r0, #1
 800830e:	4770      	bx	lr

08008310 <memchr>:
 8008310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008314:	2a10      	cmp	r2, #16
 8008316:	db2b      	blt.n	8008370 <memchr+0x60>
 8008318:	f010 0f07 	tst.w	r0, #7
 800831c:	d008      	beq.n	8008330 <memchr+0x20>
 800831e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008322:	3a01      	subs	r2, #1
 8008324:	428b      	cmp	r3, r1
 8008326:	d02d      	beq.n	8008384 <memchr+0x74>
 8008328:	f010 0f07 	tst.w	r0, #7
 800832c:	b342      	cbz	r2, 8008380 <memchr+0x70>
 800832e:	d1f6      	bne.n	800831e <memchr+0xe>
 8008330:	b4f0      	push	{r4, r5, r6, r7}
 8008332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800833a:	f022 0407 	bic.w	r4, r2, #7
 800833e:	f07f 0700 	mvns.w	r7, #0
 8008342:	2300      	movs	r3, #0
 8008344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008348:	3c08      	subs	r4, #8
 800834a:	ea85 0501 	eor.w	r5, r5, r1
 800834e:	ea86 0601 	eor.w	r6, r6, r1
 8008352:	fa85 f547 	uadd8	r5, r5, r7
 8008356:	faa3 f587 	sel	r5, r3, r7
 800835a:	fa86 f647 	uadd8	r6, r6, r7
 800835e:	faa5 f687 	sel	r6, r5, r7
 8008362:	b98e      	cbnz	r6, 8008388 <memchr+0x78>
 8008364:	d1ee      	bne.n	8008344 <memchr+0x34>
 8008366:	bcf0      	pop	{r4, r5, r6, r7}
 8008368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800836c:	f002 0207 	and.w	r2, r2, #7
 8008370:	b132      	cbz	r2, 8008380 <memchr+0x70>
 8008372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008376:	3a01      	subs	r2, #1
 8008378:	ea83 0301 	eor.w	r3, r3, r1
 800837c:	b113      	cbz	r3, 8008384 <memchr+0x74>
 800837e:	d1f8      	bne.n	8008372 <memchr+0x62>
 8008380:	2000      	movs	r0, #0
 8008382:	4770      	bx	lr
 8008384:	3801      	subs	r0, #1
 8008386:	4770      	bx	lr
 8008388:	2d00      	cmp	r5, #0
 800838a:	bf06      	itte	eq
 800838c:	4635      	moveq	r5, r6
 800838e:	3803      	subeq	r0, #3
 8008390:	3807      	subne	r0, #7
 8008392:	f015 0f01 	tst.w	r5, #1
 8008396:	d107      	bne.n	80083a8 <memchr+0x98>
 8008398:	3001      	adds	r0, #1
 800839a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800839e:	bf02      	ittt	eq
 80083a0:	3001      	addeq	r0, #1
 80083a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80083a6:	3001      	addeq	r0, #1
 80083a8:	bcf0      	pop	{r4, r5, r6, r7}
 80083aa:	3801      	subs	r0, #1
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop

080083b0 <__aeabi_drsub>:
 80083b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80083b4:	e002      	b.n	80083bc <__adddf3>
 80083b6:	bf00      	nop

080083b8 <__aeabi_dsub>:
 80083b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080083bc <__adddf3>:
 80083bc:	b530      	push	{r4, r5, lr}
 80083be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80083c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80083c6:	ea94 0f05 	teq	r4, r5
 80083ca:	bf08      	it	eq
 80083cc:	ea90 0f02 	teqeq	r0, r2
 80083d0:	bf1f      	itttt	ne
 80083d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80083d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80083da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80083de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80083e2:	f000 80e2 	beq.w	80085aa <__adddf3+0x1ee>
 80083e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80083ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80083ee:	bfb8      	it	lt
 80083f0:	426d      	neglt	r5, r5
 80083f2:	dd0c      	ble.n	800840e <__adddf3+0x52>
 80083f4:	442c      	add	r4, r5
 80083f6:	ea80 0202 	eor.w	r2, r0, r2
 80083fa:	ea81 0303 	eor.w	r3, r1, r3
 80083fe:	ea82 0000 	eor.w	r0, r2, r0
 8008402:	ea83 0101 	eor.w	r1, r3, r1
 8008406:	ea80 0202 	eor.w	r2, r0, r2
 800840a:	ea81 0303 	eor.w	r3, r1, r3
 800840e:	2d36      	cmp	r5, #54	; 0x36
 8008410:	bf88      	it	hi
 8008412:	bd30      	pophi	{r4, r5, pc}
 8008414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800841c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008424:	d002      	beq.n	800842c <__adddf3+0x70>
 8008426:	4240      	negs	r0, r0
 8008428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800842c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008438:	d002      	beq.n	8008440 <__adddf3+0x84>
 800843a:	4252      	negs	r2, r2
 800843c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008440:	ea94 0f05 	teq	r4, r5
 8008444:	f000 80a7 	beq.w	8008596 <__adddf3+0x1da>
 8008448:	f1a4 0401 	sub.w	r4, r4, #1
 800844c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008450:	db0d      	blt.n	800846e <__adddf3+0xb2>
 8008452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008456:	fa22 f205 	lsr.w	r2, r2, r5
 800845a:	1880      	adds	r0, r0, r2
 800845c:	f141 0100 	adc.w	r1, r1, #0
 8008460:	fa03 f20e 	lsl.w	r2, r3, lr
 8008464:	1880      	adds	r0, r0, r2
 8008466:	fa43 f305 	asr.w	r3, r3, r5
 800846a:	4159      	adcs	r1, r3
 800846c:	e00e      	b.n	800848c <__adddf3+0xd0>
 800846e:	f1a5 0520 	sub.w	r5, r5, #32
 8008472:	f10e 0e20 	add.w	lr, lr, #32
 8008476:	2a01      	cmp	r2, #1
 8008478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800847c:	bf28      	it	cs
 800847e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8008482:	fa43 f305 	asr.w	r3, r3, r5
 8008486:	18c0      	adds	r0, r0, r3
 8008488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800848c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008490:	d507      	bpl.n	80084a2 <__adddf3+0xe6>
 8008492:	f04f 0e00 	mov.w	lr, #0
 8008496:	f1dc 0c00 	rsbs	ip, ip, #0
 800849a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800849e:	eb6e 0101 	sbc.w	r1, lr, r1
 80084a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80084a6:	d31b      	bcc.n	80084e0 <__adddf3+0x124>
 80084a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80084ac:	d30c      	bcc.n	80084c8 <__adddf3+0x10c>
 80084ae:	0849      	lsrs	r1, r1, #1
 80084b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80084b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80084b8:	f104 0401 	add.w	r4, r4, #1
 80084bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80084c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80084c4:	f080 809a 	bcs.w	80085fc <__adddf3+0x240>
 80084c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80084cc:	bf08      	it	eq
 80084ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80084d2:	f150 0000 	adcs.w	r0, r0, #0
 80084d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80084da:	ea41 0105 	orr.w	r1, r1, r5
 80084de:	bd30      	pop	{r4, r5, pc}
 80084e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80084e4:	4140      	adcs	r0, r0
 80084e6:	eb41 0101 	adc.w	r1, r1, r1
 80084ea:	3c01      	subs	r4, #1
 80084ec:	bf28      	it	cs
 80084ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80084f2:	d2e9      	bcs.n	80084c8 <__adddf3+0x10c>
 80084f4:	f091 0f00 	teq	r1, #0
 80084f8:	bf04      	itt	eq
 80084fa:	4601      	moveq	r1, r0
 80084fc:	2000      	moveq	r0, #0
 80084fe:	fab1 f381 	clz	r3, r1
 8008502:	bf08      	it	eq
 8008504:	3320      	addeq	r3, #32
 8008506:	f1a3 030b 	sub.w	r3, r3, #11
 800850a:	f1b3 0220 	subs.w	r2, r3, #32
 800850e:	da0c      	bge.n	800852a <__adddf3+0x16e>
 8008510:	320c      	adds	r2, #12
 8008512:	dd08      	ble.n	8008526 <__adddf3+0x16a>
 8008514:	f102 0c14 	add.w	ip, r2, #20
 8008518:	f1c2 020c 	rsb	r2, r2, #12
 800851c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008520:	fa21 f102 	lsr.w	r1, r1, r2
 8008524:	e00c      	b.n	8008540 <__adddf3+0x184>
 8008526:	f102 0214 	add.w	r2, r2, #20
 800852a:	bfd8      	it	le
 800852c:	f1c2 0c20 	rsble	ip, r2, #32
 8008530:	fa01 f102 	lsl.w	r1, r1, r2
 8008534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008538:	bfdc      	itt	le
 800853a:	ea41 010c 	orrle.w	r1, r1, ip
 800853e:	4090      	lslle	r0, r2
 8008540:	1ae4      	subs	r4, r4, r3
 8008542:	bfa2      	ittt	ge
 8008544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008548:	4329      	orrge	r1, r5
 800854a:	bd30      	popge	{r4, r5, pc}
 800854c:	ea6f 0404 	mvn.w	r4, r4
 8008550:	3c1f      	subs	r4, #31
 8008552:	da1c      	bge.n	800858e <__adddf3+0x1d2>
 8008554:	340c      	adds	r4, #12
 8008556:	dc0e      	bgt.n	8008576 <__adddf3+0x1ba>
 8008558:	f104 0414 	add.w	r4, r4, #20
 800855c:	f1c4 0220 	rsb	r2, r4, #32
 8008560:	fa20 f004 	lsr.w	r0, r0, r4
 8008564:	fa01 f302 	lsl.w	r3, r1, r2
 8008568:	ea40 0003 	orr.w	r0, r0, r3
 800856c:	fa21 f304 	lsr.w	r3, r1, r4
 8008570:	ea45 0103 	orr.w	r1, r5, r3
 8008574:	bd30      	pop	{r4, r5, pc}
 8008576:	f1c4 040c 	rsb	r4, r4, #12
 800857a:	f1c4 0220 	rsb	r2, r4, #32
 800857e:	fa20 f002 	lsr.w	r0, r0, r2
 8008582:	fa01 f304 	lsl.w	r3, r1, r4
 8008586:	ea40 0003 	orr.w	r0, r0, r3
 800858a:	4629      	mov	r1, r5
 800858c:	bd30      	pop	{r4, r5, pc}
 800858e:	fa21 f004 	lsr.w	r0, r1, r4
 8008592:	4629      	mov	r1, r5
 8008594:	bd30      	pop	{r4, r5, pc}
 8008596:	f094 0f00 	teq	r4, #0
 800859a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800859e:	bf06      	itte	eq
 80085a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80085a4:	3401      	addeq	r4, #1
 80085a6:	3d01      	subne	r5, #1
 80085a8:	e74e      	b.n	8008448 <__adddf3+0x8c>
 80085aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80085ae:	bf18      	it	ne
 80085b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80085b4:	d029      	beq.n	800860a <__adddf3+0x24e>
 80085b6:	ea94 0f05 	teq	r4, r5
 80085ba:	bf08      	it	eq
 80085bc:	ea90 0f02 	teqeq	r0, r2
 80085c0:	d005      	beq.n	80085ce <__adddf3+0x212>
 80085c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80085c6:	bf04      	itt	eq
 80085c8:	4619      	moveq	r1, r3
 80085ca:	4610      	moveq	r0, r2
 80085cc:	bd30      	pop	{r4, r5, pc}
 80085ce:	ea91 0f03 	teq	r1, r3
 80085d2:	bf1e      	ittt	ne
 80085d4:	2100      	movne	r1, #0
 80085d6:	2000      	movne	r0, #0
 80085d8:	bd30      	popne	{r4, r5, pc}
 80085da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80085de:	d105      	bne.n	80085ec <__adddf3+0x230>
 80085e0:	0040      	lsls	r0, r0, #1
 80085e2:	4149      	adcs	r1, r1
 80085e4:	bf28      	it	cs
 80085e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80085ea:	bd30      	pop	{r4, r5, pc}
 80085ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80085f0:	bf3c      	itt	cc
 80085f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80085f6:	bd30      	popcc	{r4, r5, pc}
 80085f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80085fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008604:	f04f 0000 	mov.w	r0, #0
 8008608:	bd30      	pop	{r4, r5, pc}
 800860a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800860e:	bf1a      	itte	ne
 8008610:	4619      	movne	r1, r3
 8008612:	4610      	movne	r0, r2
 8008614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008618:	bf1c      	itt	ne
 800861a:	460b      	movne	r3, r1
 800861c:	4602      	movne	r2, r0
 800861e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008622:	bf06      	itte	eq
 8008624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008628:	ea91 0f03 	teqeq	r1, r3
 800862c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008630:	bd30      	pop	{r4, r5, pc}
 8008632:	bf00      	nop

08008634 <__aeabi_ui2d>:
 8008634:	f090 0f00 	teq	r0, #0
 8008638:	bf04      	itt	eq
 800863a:	2100      	moveq	r1, #0
 800863c:	4770      	bxeq	lr
 800863e:	b530      	push	{r4, r5, lr}
 8008640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008648:	f04f 0500 	mov.w	r5, #0
 800864c:	f04f 0100 	mov.w	r1, #0
 8008650:	e750      	b.n	80084f4 <__adddf3+0x138>
 8008652:	bf00      	nop

08008654 <__aeabi_i2d>:
 8008654:	f090 0f00 	teq	r0, #0
 8008658:	bf04      	itt	eq
 800865a:	2100      	moveq	r1, #0
 800865c:	4770      	bxeq	lr
 800865e:	b530      	push	{r4, r5, lr}
 8008660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800866c:	bf48      	it	mi
 800866e:	4240      	negmi	r0, r0
 8008670:	f04f 0100 	mov.w	r1, #0
 8008674:	e73e      	b.n	80084f4 <__adddf3+0x138>
 8008676:	bf00      	nop

08008678 <__aeabi_f2d>:
 8008678:	0042      	lsls	r2, r0, #1
 800867a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800867e:	ea4f 0131 	mov.w	r1, r1, rrx
 8008682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8008686:	bf1f      	itttt	ne
 8008688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800868c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8008694:	4770      	bxne	lr
 8008696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800869a:	bf08      	it	eq
 800869c:	4770      	bxeq	lr
 800869e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80086a2:	bf04      	itt	eq
 80086a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80086a8:	4770      	bxeq	lr
 80086aa:	b530      	push	{r4, r5, lr}
 80086ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80086b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80086b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80086b8:	e71c      	b.n	80084f4 <__adddf3+0x138>
 80086ba:	bf00      	nop

080086bc <__aeabi_ul2d>:
 80086bc:	ea50 0201 	orrs.w	r2, r0, r1
 80086c0:	bf08      	it	eq
 80086c2:	4770      	bxeq	lr
 80086c4:	b530      	push	{r4, r5, lr}
 80086c6:	f04f 0500 	mov.w	r5, #0
 80086ca:	e00a      	b.n	80086e2 <__aeabi_l2d+0x16>

080086cc <__aeabi_l2d>:
 80086cc:	ea50 0201 	orrs.w	r2, r0, r1
 80086d0:	bf08      	it	eq
 80086d2:	4770      	bxeq	lr
 80086d4:	b530      	push	{r4, r5, lr}
 80086d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80086da:	d502      	bpl.n	80086e2 <__aeabi_l2d+0x16>
 80086dc:	4240      	negs	r0, r0
 80086de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80086e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80086e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80086ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80086ee:	f43f aed8 	beq.w	80084a2 <__adddf3+0xe6>
 80086f2:	f04f 0203 	mov.w	r2, #3
 80086f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80086fa:	bf18      	it	ne
 80086fc:	3203      	addne	r2, #3
 80086fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008702:	bf18      	it	ne
 8008704:	3203      	addne	r2, #3
 8008706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800870a:	f1c2 0320 	rsb	r3, r2, #32
 800870e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008712:	fa20 f002 	lsr.w	r0, r0, r2
 8008716:	fa01 fe03 	lsl.w	lr, r1, r3
 800871a:	ea40 000e 	orr.w	r0, r0, lr
 800871e:	fa21 f102 	lsr.w	r1, r1, r2
 8008722:	4414      	add	r4, r2
 8008724:	e6bd      	b.n	80084a2 <__adddf3+0xe6>
 8008726:	bf00      	nop

08008728 <__aeabi_uldivmod>:
 8008728:	b953      	cbnz	r3, 8008740 <__aeabi_uldivmod+0x18>
 800872a:	b94a      	cbnz	r2, 8008740 <__aeabi_uldivmod+0x18>
 800872c:	2900      	cmp	r1, #0
 800872e:	bf08      	it	eq
 8008730:	2800      	cmpeq	r0, #0
 8008732:	bf1c      	itt	ne
 8008734:	f04f 31ff 	movne.w	r1, #4294967295
 8008738:	f04f 30ff 	movne.w	r0, #4294967295
 800873c:	f000 b9a6 	b.w	8008a8c <__aeabi_idiv0>
 8008740:	f1ad 0c08 	sub.w	ip, sp, #8
 8008744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008748:	f000 f83e 	bl	80087c8 <__udivmoddi4>
 800874c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008754:	b004      	add	sp, #16
 8008756:	4770      	bx	lr

08008758 <__aeabi_d2lz>:
 8008758:	b508      	push	{r3, lr}
 800875a:	4602      	mov	r2, r0
 800875c:	460b      	mov	r3, r1
 800875e:	ec43 2b17 	vmov	d7, r2, r3
 8008762:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800876a:	d403      	bmi.n	8008774 <__aeabi_d2lz+0x1c>
 800876c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008770:	f000 b80a 	b.w	8008788 <__aeabi_d2ulz>
 8008774:	eeb1 7b47 	vneg.f64	d7, d7
 8008778:	ec51 0b17 	vmov	r0, r1, d7
 800877c:	f000 f804 	bl	8008788 <__aeabi_d2ulz>
 8008780:	4240      	negs	r0, r0
 8008782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008786:	bd08      	pop	{r3, pc}

08008788 <__aeabi_d2ulz>:
 8008788:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80087b8 <__aeabi_d2ulz+0x30>
 800878c:	ec41 0b17 	vmov	d7, r0, r1
 8008790:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80087c0 <__aeabi_d2ulz+0x38>
 8008794:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008798:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800879c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80087a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80087a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80087a8:	ee16 1a10 	vmov	r1, s12
 80087ac:	ee17 0a90 	vmov	r0, s15
 80087b0:	4770      	bx	lr
 80087b2:	bf00      	nop
 80087b4:	f3af 8000 	nop.w
 80087b8:	00000000 	.word	0x00000000
 80087bc:	3df00000 	.word	0x3df00000
 80087c0:	00000000 	.word	0x00000000
 80087c4:	41f00000 	.word	0x41f00000

080087c8 <__udivmoddi4>:
 80087c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087cc:	9d08      	ldr	r5, [sp, #32]
 80087ce:	4604      	mov	r4, r0
 80087d0:	468c      	mov	ip, r1
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	f040 8083 	bne.w	80088de <__udivmoddi4+0x116>
 80087d8:	428a      	cmp	r2, r1
 80087da:	4617      	mov	r7, r2
 80087dc:	d947      	bls.n	800886e <__udivmoddi4+0xa6>
 80087de:	fab2 f282 	clz	r2, r2
 80087e2:	b142      	cbz	r2, 80087f6 <__udivmoddi4+0x2e>
 80087e4:	f1c2 0020 	rsb	r0, r2, #32
 80087e8:	fa24 f000 	lsr.w	r0, r4, r0
 80087ec:	4091      	lsls	r1, r2
 80087ee:	4097      	lsls	r7, r2
 80087f0:	ea40 0c01 	orr.w	ip, r0, r1
 80087f4:	4094      	lsls	r4, r2
 80087f6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80087fa:	0c23      	lsrs	r3, r4, #16
 80087fc:	fbbc f6f8 	udiv	r6, ip, r8
 8008800:	fa1f fe87 	uxth.w	lr, r7
 8008804:	fb08 c116 	mls	r1, r8, r6, ip
 8008808:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800880c:	fb06 f10e 	mul.w	r1, r6, lr
 8008810:	4299      	cmp	r1, r3
 8008812:	d909      	bls.n	8008828 <__udivmoddi4+0x60>
 8008814:	18fb      	adds	r3, r7, r3
 8008816:	f106 30ff 	add.w	r0, r6, #4294967295
 800881a:	f080 8119 	bcs.w	8008a50 <__udivmoddi4+0x288>
 800881e:	4299      	cmp	r1, r3
 8008820:	f240 8116 	bls.w	8008a50 <__udivmoddi4+0x288>
 8008824:	3e02      	subs	r6, #2
 8008826:	443b      	add	r3, r7
 8008828:	1a5b      	subs	r3, r3, r1
 800882a:	b2a4      	uxth	r4, r4
 800882c:	fbb3 f0f8 	udiv	r0, r3, r8
 8008830:	fb08 3310 	mls	r3, r8, r0, r3
 8008834:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008838:	fb00 fe0e 	mul.w	lr, r0, lr
 800883c:	45a6      	cmp	lr, r4
 800883e:	d909      	bls.n	8008854 <__udivmoddi4+0x8c>
 8008840:	193c      	adds	r4, r7, r4
 8008842:	f100 33ff 	add.w	r3, r0, #4294967295
 8008846:	f080 8105 	bcs.w	8008a54 <__udivmoddi4+0x28c>
 800884a:	45a6      	cmp	lr, r4
 800884c:	f240 8102 	bls.w	8008a54 <__udivmoddi4+0x28c>
 8008850:	3802      	subs	r0, #2
 8008852:	443c      	add	r4, r7
 8008854:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8008858:	eba4 040e 	sub.w	r4, r4, lr
 800885c:	2600      	movs	r6, #0
 800885e:	b11d      	cbz	r5, 8008868 <__udivmoddi4+0xa0>
 8008860:	40d4      	lsrs	r4, r2
 8008862:	2300      	movs	r3, #0
 8008864:	e9c5 4300 	strd	r4, r3, [r5]
 8008868:	4631      	mov	r1, r6
 800886a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800886e:	b902      	cbnz	r2, 8008872 <__udivmoddi4+0xaa>
 8008870:	deff      	udf	#255	; 0xff
 8008872:	fab2 f282 	clz	r2, r2
 8008876:	2a00      	cmp	r2, #0
 8008878:	d150      	bne.n	800891c <__udivmoddi4+0x154>
 800887a:	1bcb      	subs	r3, r1, r7
 800887c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8008880:	fa1f f887 	uxth.w	r8, r7
 8008884:	2601      	movs	r6, #1
 8008886:	fbb3 fcfe 	udiv	ip, r3, lr
 800888a:	0c21      	lsrs	r1, r4, #16
 800888c:	fb0e 331c 	mls	r3, lr, ip, r3
 8008890:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008894:	fb08 f30c 	mul.w	r3, r8, ip
 8008898:	428b      	cmp	r3, r1
 800889a:	d907      	bls.n	80088ac <__udivmoddi4+0xe4>
 800889c:	1879      	adds	r1, r7, r1
 800889e:	f10c 30ff 	add.w	r0, ip, #4294967295
 80088a2:	d202      	bcs.n	80088aa <__udivmoddi4+0xe2>
 80088a4:	428b      	cmp	r3, r1
 80088a6:	f200 80e9 	bhi.w	8008a7c <__udivmoddi4+0x2b4>
 80088aa:	4684      	mov	ip, r0
 80088ac:	1ac9      	subs	r1, r1, r3
 80088ae:	b2a3      	uxth	r3, r4
 80088b0:	fbb1 f0fe 	udiv	r0, r1, lr
 80088b4:	fb0e 1110 	mls	r1, lr, r0, r1
 80088b8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80088bc:	fb08 f800 	mul.w	r8, r8, r0
 80088c0:	45a0      	cmp	r8, r4
 80088c2:	d907      	bls.n	80088d4 <__udivmoddi4+0x10c>
 80088c4:	193c      	adds	r4, r7, r4
 80088c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80088ca:	d202      	bcs.n	80088d2 <__udivmoddi4+0x10a>
 80088cc:	45a0      	cmp	r8, r4
 80088ce:	f200 80d9 	bhi.w	8008a84 <__udivmoddi4+0x2bc>
 80088d2:	4618      	mov	r0, r3
 80088d4:	eba4 0408 	sub.w	r4, r4, r8
 80088d8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80088dc:	e7bf      	b.n	800885e <__udivmoddi4+0x96>
 80088de:	428b      	cmp	r3, r1
 80088e0:	d909      	bls.n	80088f6 <__udivmoddi4+0x12e>
 80088e2:	2d00      	cmp	r5, #0
 80088e4:	f000 80b1 	beq.w	8008a4a <__udivmoddi4+0x282>
 80088e8:	2600      	movs	r6, #0
 80088ea:	e9c5 0100 	strd	r0, r1, [r5]
 80088ee:	4630      	mov	r0, r6
 80088f0:	4631      	mov	r1, r6
 80088f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088f6:	fab3 f683 	clz	r6, r3
 80088fa:	2e00      	cmp	r6, #0
 80088fc:	d14a      	bne.n	8008994 <__udivmoddi4+0x1cc>
 80088fe:	428b      	cmp	r3, r1
 8008900:	d302      	bcc.n	8008908 <__udivmoddi4+0x140>
 8008902:	4282      	cmp	r2, r0
 8008904:	f200 80b8 	bhi.w	8008a78 <__udivmoddi4+0x2b0>
 8008908:	1a84      	subs	r4, r0, r2
 800890a:	eb61 0103 	sbc.w	r1, r1, r3
 800890e:	2001      	movs	r0, #1
 8008910:	468c      	mov	ip, r1
 8008912:	2d00      	cmp	r5, #0
 8008914:	d0a8      	beq.n	8008868 <__udivmoddi4+0xa0>
 8008916:	e9c5 4c00 	strd	r4, ip, [r5]
 800891a:	e7a5      	b.n	8008868 <__udivmoddi4+0xa0>
 800891c:	f1c2 0320 	rsb	r3, r2, #32
 8008920:	fa20 f603 	lsr.w	r6, r0, r3
 8008924:	4097      	lsls	r7, r2
 8008926:	fa01 f002 	lsl.w	r0, r1, r2
 800892a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800892e:	40d9      	lsrs	r1, r3
 8008930:	4330      	orrs	r0, r6
 8008932:	0c03      	lsrs	r3, r0, #16
 8008934:	fbb1 f6fe 	udiv	r6, r1, lr
 8008938:	fa1f f887 	uxth.w	r8, r7
 800893c:	fb0e 1116 	mls	r1, lr, r6, r1
 8008940:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008944:	fb06 f108 	mul.w	r1, r6, r8
 8008948:	4299      	cmp	r1, r3
 800894a:	fa04 f402 	lsl.w	r4, r4, r2
 800894e:	d909      	bls.n	8008964 <__udivmoddi4+0x19c>
 8008950:	18fb      	adds	r3, r7, r3
 8008952:	f106 3cff 	add.w	ip, r6, #4294967295
 8008956:	f080 808d 	bcs.w	8008a74 <__udivmoddi4+0x2ac>
 800895a:	4299      	cmp	r1, r3
 800895c:	f240 808a 	bls.w	8008a74 <__udivmoddi4+0x2ac>
 8008960:	3e02      	subs	r6, #2
 8008962:	443b      	add	r3, r7
 8008964:	1a5b      	subs	r3, r3, r1
 8008966:	b281      	uxth	r1, r0
 8008968:	fbb3 f0fe 	udiv	r0, r3, lr
 800896c:	fb0e 3310 	mls	r3, lr, r0, r3
 8008970:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008974:	fb00 f308 	mul.w	r3, r0, r8
 8008978:	428b      	cmp	r3, r1
 800897a:	d907      	bls.n	800898c <__udivmoddi4+0x1c4>
 800897c:	1879      	adds	r1, r7, r1
 800897e:	f100 3cff 	add.w	ip, r0, #4294967295
 8008982:	d273      	bcs.n	8008a6c <__udivmoddi4+0x2a4>
 8008984:	428b      	cmp	r3, r1
 8008986:	d971      	bls.n	8008a6c <__udivmoddi4+0x2a4>
 8008988:	3802      	subs	r0, #2
 800898a:	4439      	add	r1, r7
 800898c:	1acb      	subs	r3, r1, r3
 800898e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8008992:	e778      	b.n	8008886 <__udivmoddi4+0xbe>
 8008994:	f1c6 0c20 	rsb	ip, r6, #32
 8008998:	fa03 f406 	lsl.w	r4, r3, r6
 800899c:	fa22 f30c 	lsr.w	r3, r2, ip
 80089a0:	431c      	orrs	r4, r3
 80089a2:	fa20 f70c 	lsr.w	r7, r0, ip
 80089a6:	fa01 f306 	lsl.w	r3, r1, r6
 80089aa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80089ae:	fa21 f10c 	lsr.w	r1, r1, ip
 80089b2:	431f      	orrs	r7, r3
 80089b4:	0c3b      	lsrs	r3, r7, #16
 80089b6:	fbb1 f9fe 	udiv	r9, r1, lr
 80089ba:	fa1f f884 	uxth.w	r8, r4
 80089be:	fb0e 1119 	mls	r1, lr, r9, r1
 80089c2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80089c6:	fb09 fa08 	mul.w	sl, r9, r8
 80089ca:	458a      	cmp	sl, r1
 80089cc:	fa02 f206 	lsl.w	r2, r2, r6
 80089d0:	fa00 f306 	lsl.w	r3, r0, r6
 80089d4:	d908      	bls.n	80089e8 <__udivmoddi4+0x220>
 80089d6:	1861      	adds	r1, r4, r1
 80089d8:	f109 30ff 	add.w	r0, r9, #4294967295
 80089dc:	d248      	bcs.n	8008a70 <__udivmoddi4+0x2a8>
 80089de:	458a      	cmp	sl, r1
 80089e0:	d946      	bls.n	8008a70 <__udivmoddi4+0x2a8>
 80089e2:	f1a9 0902 	sub.w	r9, r9, #2
 80089e6:	4421      	add	r1, r4
 80089e8:	eba1 010a 	sub.w	r1, r1, sl
 80089ec:	b2bf      	uxth	r7, r7
 80089ee:	fbb1 f0fe 	udiv	r0, r1, lr
 80089f2:	fb0e 1110 	mls	r1, lr, r0, r1
 80089f6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80089fa:	fb00 f808 	mul.w	r8, r0, r8
 80089fe:	45b8      	cmp	r8, r7
 8008a00:	d907      	bls.n	8008a12 <__udivmoddi4+0x24a>
 8008a02:	19e7      	adds	r7, r4, r7
 8008a04:	f100 31ff 	add.w	r1, r0, #4294967295
 8008a08:	d22e      	bcs.n	8008a68 <__udivmoddi4+0x2a0>
 8008a0a:	45b8      	cmp	r8, r7
 8008a0c:	d92c      	bls.n	8008a68 <__udivmoddi4+0x2a0>
 8008a0e:	3802      	subs	r0, #2
 8008a10:	4427      	add	r7, r4
 8008a12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008a16:	eba7 0708 	sub.w	r7, r7, r8
 8008a1a:	fba0 8902 	umull	r8, r9, r0, r2
 8008a1e:	454f      	cmp	r7, r9
 8008a20:	46c6      	mov	lr, r8
 8008a22:	4649      	mov	r1, r9
 8008a24:	d31a      	bcc.n	8008a5c <__udivmoddi4+0x294>
 8008a26:	d017      	beq.n	8008a58 <__udivmoddi4+0x290>
 8008a28:	b15d      	cbz	r5, 8008a42 <__udivmoddi4+0x27a>
 8008a2a:	ebb3 020e 	subs.w	r2, r3, lr
 8008a2e:	eb67 0701 	sbc.w	r7, r7, r1
 8008a32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8008a36:	40f2      	lsrs	r2, r6
 8008a38:	ea4c 0202 	orr.w	r2, ip, r2
 8008a3c:	40f7      	lsrs	r7, r6
 8008a3e:	e9c5 2700 	strd	r2, r7, [r5]
 8008a42:	2600      	movs	r6, #0
 8008a44:	4631      	mov	r1, r6
 8008a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a4a:	462e      	mov	r6, r5
 8008a4c:	4628      	mov	r0, r5
 8008a4e:	e70b      	b.n	8008868 <__udivmoddi4+0xa0>
 8008a50:	4606      	mov	r6, r0
 8008a52:	e6e9      	b.n	8008828 <__udivmoddi4+0x60>
 8008a54:	4618      	mov	r0, r3
 8008a56:	e6fd      	b.n	8008854 <__udivmoddi4+0x8c>
 8008a58:	4543      	cmp	r3, r8
 8008a5a:	d2e5      	bcs.n	8008a28 <__udivmoddi4+0x260>
 8008a5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8008a60:	eb69 0104 	sbc.w	r1, r9, r4
 8008a64:	3801      	subs	r0, #1
 8008a66:	e7df      	b.n	8008a28 <__udivmoddi4+0x260>
 8008a68:	4608      	mov	r0, r1
 8008a6a:	e7d2      	b.n	8008a12 <__udivmoddi4+0x24a>
 8008a6c:	4660      	mov	r0, ip
 8008a6e:	e78d      	b.n	800898c <__udivmoddi4+0x1c4>
 8008a70:	4681      	mov	r9, r0
 8008a72:	e7b9      	b.n	80089e8 <__udivmoddi4+0x220>
 8008a74:	4666      	mov	r6, ip
 8008a76:	e775      	b.n	8008964 <__udivmoddi4+0x19c>
 8008a78:	4630      	mov	r0, r6
 8008a7a:	e74a      	b.n	8008912 <__udivmoddi4+0x14a>
 8008a7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8008a80:	4439      	add	r1, r7
 8008a82:	e713      	b.n	80088ac <__udivmoddi4+0xe4>
 8008a84:	3802      	subs	r0, #2
 8008a86:	443c      	add	r4, r7
 8008a88:	e724      	b.n	80088d4 <__udivmoddi4+0x10c>
 8008a8a:	bf00      	nop

08008a8c <__aeabi_idiv0>:
 8008a8c:	4770      	bx	lr
 8008a8e:	bf00      	nop

08008a90 <arm_sqrt_f32>:
   * <code>in</code> is negative value and returns zero output for negative values.
   */
  static __INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b082      	sub	sp, #8
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	ed87 0a01 	vstr	s0, [r7, #4]
 8008a9a:	6038      	str	r0, [r7, #0]
    if(in >= 0.0f)
 8008a9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8008aa0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aa8:	db0a      	blt.n	8008ac0 <arm_sqrt_f32+0x30>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8008aaa:	ed97 0a01 	vldr	s0, [r7, #4]
 8008aae:	f013 fa91 	bl	801bfd4 <sqrtf>
 8008ab2:	eef0 7a40 	vmov.f32	s15, s0
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8008abc:	2300      	movs	r3, #0
 8008abe:	e005      	b.n	8008acc <arm_sqrt_f32+0x3c>
    }
    else
    {
      *pOut = 0.0f;
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	f04f 0200 	mov.w	r2, #0
 8008ac6:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8008ac8:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8008acc:	4618      	mov	r0, r3
 8008ace:	3708      	adds	r7, #8
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <arm_cmplx_mag_f32>:

void arm_cmplx_mag_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b088      	sub	sp, #32
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	60f8      	str	r0, [r7, #12]
 8008adc:	60b9      	str	r1, [r7, #8]
 8008ade:	607a      	str	r2, [r7, #4]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  uint32_t blkCnt;                               /* loop counter */

  /*loop Unrolling */
  blkCnt = numSamples >> 2u;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	089b      	lsrs	r3, r3, #2
 8008ae4:	61fb      	str	r3, [r7, #28]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8008ae6:	e072      	b.n	8008bce <arm_cmplx_mag_f32+0xfa>
  {

    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	1d1a      	adds	r2, r3, #4
 8008aec:	60fa      	str	r2, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	1d1a      	adds	r2, r3, #4
 8008af6:	60fa      	str	r2, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	617b      	str	r3, [r7, #20]
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8008afc:	edd7 7a06 	vldr	s15, [r7, #24]
 8008b00:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8008b04:	edd7 7a05 	vldr	s15, [r7, #20]
 8008b08:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008b0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	1d1a      	adds	r2, r3, #4
 8008b14:	60ba      	str	r2, [r7, #8]
 8008b16:	4618      	mov	r0, r3
 8008b18:	eeb0 0a67 	vmov.f32	s0, s15
 8008b1c:	f7ff ffb8 	bl	8008a90 <arm_sqrt_f32>

    realIn = *pSrc++;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	1d1a      	adds	r2, r3, #4
 8008b24:	60fa      	str	r2, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	1d1a      	adds	r2, r3, #4
 8008b2e:	60fa      	str	r2, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8008b34:	edd7 7a06 	vldr	s15, [r7, #24]
 8008b38:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8008b3c:	edd7 7a05 	vldr	s15, [r7, #20]
 8008b40:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008b44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	1d1a      	adds	r2, r3, #4
 8008b4c:	60ba      	str	r2, [r7, #8]
 8008b4e:	4618      	mov	r0, r3
 8008b50:	eeb0 0a67 	vmov.f32	s0, s15
 8008b54:	f7ff ff9c 	bl	8008a90 <arm_sqrt_f32>

    realIn = *pSrc++;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	1d1a      	adds	r2, r3, #4
 8008b5c:	60fa      	str	r2, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	1d1a      	adds	r2, r3, #4
 8008b66:	60fa      	str	r2, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8008b6c:	edd7 7a06 	vldr	s15, [r7, #24]
 8008b70:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8008b74:	edd7 7a05 	vldr	s15, [r7, #20]
 8008b78:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008b7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	1d1a      	adds	r2, r3, #4
 8008b84:	60ba      	str	r2, [r7, #8]
 8008b86:	4618      	mov	r0, r3
 8008b88:	eeb0 0a67 	vmov.f32	s0, s15
 8008b8c:	f7ff ff80 	bl	8008a90 <arm_sqrt_f32>

    realIn = *pSrc++;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	1d1a      	adds	r2, r3, #4
 8008b94:	60fa      	str	r2, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	1d1a      	adds	r2, r3, #4
 8008b9e:	60fa      	str	r2, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8008ba4:	edd7 7a06 	vldr	s15, [r7, #24]
 8008ba8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8008bac:	edd7 7a05 	vldr	s15, [r7, #20]
 8008bb0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008bb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	1d1a      	adds	r2, r3, #4
 8008bbc:	60ba      	str	r2, [r7, #8]
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	eeb0 0a67 	vmov.f32	s0, s15
 8008bc4:	f7ff ff64 	bl	8008a90 <arm_sqrt_f32>


    /* Decrement the loop counter */
    blkCnt--;
 8008bc8:	69fb      	ldr	r3, [r7, #28]
 8008bca:	3b01      	subs	r3, #1
 8008bcc:	61fb      	str	r3, [r7, #28]
  while(blkCnt > 0u)
 8008bce:	69fb      	ldr	r3, [r7, #28]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d189      	bne.n	8008ae8 <arm_cmplx_mag_f32+0x14>
  }

  /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = numSamples % 0x4u;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f003 0303 	and.w	r3, r3, #3
 8008bda:	61fb      	str	r3, [r7, #28]

  while(blkCnt > 0u)
 8008bdc:	e01e      	b.n	8008c1c <arm_cmplx_mag_f32+0x148>
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	1d1a      	adds	r2, r3, #4
 8008be2:	60fa      	str	r2, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	1d1a      	adds	r2, r3, #4
 8008bec:	60fa      	str	r2, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	617b      	str	r3, [r7, #20]
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8008bf2:	edd7 7a06 	vldr	s15, [r7, #24]
 8008bf6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8008bfa:	edd7 7a05 	vldr	s15, [r7, #20]
 8008bfe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008c02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	1d1a      	adds	r2, r3, #4
 8008c0a:	60ba      	str	r2, [r7, #8]
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	eeb0 0a67 	vmov.f32	s0, s15
 8008c12:	f7ff ff3d 	bl	8008a90 <arm_sqrt_f32>

    /* Decrement the loop counter */
    blkCnt--;
 8008c16:	69fb      	ldr	r3, [r7, #28]
 8008c18:	3b01      	subs	r3, #1
 8008c1a:	61fb      	str	r3, [r7, #28]
  while(blkCnt > 0u)
 8008c1c:	69fb      	ldr	r3, [r7, #28]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d1dd      	bne.n	8008bde <arm_cmplx_mag_f32+0x10a>
    numSamples--;
  }

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 8008c22:	bf00      	nop
 8008c24:	bf00      	nop
 8008c26:	3720      	adds	r7, #32
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <arm_max_f32>:
void arm_max_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b08b      	sub	sp, #44	; 0x2c
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	60f8      	str	r0, [r7, #12]
 8008c34:	60b9      	str	r1, [r7, #8]
 8008c36:	607a      	str	r2, [r7, #4]
 8008c38:	603b      	str	r3, [r7, #0]
  /* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t maxVal1, maxVal2, out;               /* Temporary variables to store the output value. */
  uint32_t blkCnt, outIndex, count;              /* loop counter */

  /* Initialise the count value. */
  count = 0u;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	61bb      	str	r3, [r7, #24]
  /* Initialise the index value to zero. */
  outIndex = 0u;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	61fb      	str	r3, [r7, #28]
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	1d1a      	adds	r2, r3, #4
 8008c46:	60fa      	str	r2, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Loop unrolling */
  blkCnt = (blockSize - 1u) >> 2u;
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	3b01      	subs	r3, #1
 8008c50:	089b      	lsrs	r3, r3, #2
 8008c52:	623b      	str	r3, [r7, #32]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  while(blkCnt > 0u)
 8008c54:	e051      	b.n	8008cfa <arm_max_f32+0xce>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	1d1a      	adds	r2, r3, #4
 8008c5a:	60fa      	str	r2, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	617b      	str	r3, [r7, #20]

    maxVal2 = *pSrc++;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	1d1a      	adds	r2, r3, #4
 8008c64:	60fa      	str	r2, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if(out < maxVal1)
 8008c6a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008c6e:	edd7 7a05 	vldr	s15, [r7, #20]
 8008c72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c7a:	d504      	bpl.n	8008c86 <arm_max_f32+0x5a>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 1u;
 8008c80:	69bb      	ldr	r3, [r7, #24]
 8008c82:	3301      	adds	r3, #1
 8008c84:	61fb      	str	r3, [r7, #28]
    }

    maxVal1 = *pSrc++;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	1d1a      	adds	r2, r3, #4
 8008c8a:	60fa      	str	r2, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if(out < maxVal2)
 8008c90:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008c94:	edd7 7a04 	vldr	s15, [r7, #16]
 8008c98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ca0:	d504      	bpl.n	8008cac <arm_max_f32+0x80>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 2u;
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	3302      	adds	r3, #2
 8008caa:	61fb      	str	r3, [r7, #28]
    }

    maxVal2 = *pSrc++;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	1d1a      	adds	r2, r3, #4
 8008cb0:	60fa      	str	r2, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if(out < maxVal1)
 8008cb6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008cba:	edd7 7a05 	vldr	s15, [r7, #20]
 8008cbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cc6:	d504      	bpl.n	8008cd2 <arm_max_f32+0xa6>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 3u;
 8008ccc:	69bb      	ldr	r3, [r7, #24]
 8008cce:	3303      	adds	r3, #3
 8008cd0:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the maximum value */
    if(out < maxVal2)
 8008cd2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008cd6:	edd7 7a04 	vldr	s15, [r7, #16]
 8008cda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ce2:	d504      	bpl.n	8008cee <arm_max_f32+0xc2>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 4u;
 8008ce8:	69bb      	ldr	r3, [r7, #24]
 8008cea:	3304      	adds	r3, #4
 8008cec:	61fb      	str	r3, [r7, #28]
    }

    count += 4u;
 8008cee:	69bb      	ldr	r3, [r7, #24]
 8008cf0:	3304      	adds	r3, #4
 8008cf2:	61bb      	str	r3, [r7, #24]

    /* Decrement the loop counter */
    blkCnt--;
 8008cf4:	6a3b      	ldr	r3, [r7, #32]
 8008cf6:	3b01      	subs	r3, #1
 8008cf8:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 8008cfa:	6a3b      	ldr	r3, [r7, #32]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d1aa      	bne.n	8008c56 <arm_max_f32+0x2a>
  }

  /* if (blockSize - 1u) is not multiple of 4 */
  blkCnt = (blockSize - 1u) % 4u;
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	3b01      	subs	r3, #1
 8008d04:	f003 0303 	and.w	r3, r3, #3
 8008d08:	623b      	str	r3, [r7, #32]

  blkCnt = (blockSize - 1u);

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 8008d0a:	e016      	b.n	8008d3a <arm_max_f32+0x10e>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	1d1a      	adds	r2, r3, #4
 8008d10:	60fa      	str	r2, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if(out < maxVal1)
 8008d16:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008d1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8008d1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d26:	d505      	bpl.n	8008d34 <arm_max_f32+0x108>
    {
      /* Update the maximum value and it's index */
      out = maxVal1;
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = blockSize - blkCnt;
 8008d2c:	68ba      	ldr	r2, [r7, #8]
 8008d2e:	6a3b      	ldr	r3, [r7, #32]
 8008d30:	1ad3      	subs	r3, r2, r3
 8008d32:	61fb      	str	r3, [r7, #28]
    }


    /* Decrement the loop counter */
    blkCnt--;
 8008d34:	6a3b      	ldr	r3, [r7, #32]
 8008d36:	3b01      	subs	r3, #1
 8008d38:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 8008d3a:	6a3b      	ldr	r3, [r7, #32]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d1e5      	bne.n	8008d0c <arm_max_f32+0xe0>

  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d44:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	69fa      	ldr	r2, [r7, #28]
 8008d4a:	601a      	str	r2, [r3, #0]
}
 8008d4c:	bf00      	nop
 8008d4e:	372c      	adds	r7, #44	; 0x2c
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr

08008d58 <arm_mean_f32>:

void arm_mean_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b08b      	sub	sp, #44	; 0x2c
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	60f8      	str	r0, [r7, #12]
 8008d60:	60b9      	str	r1, [r7, #8]
 8008d62:	607a      	str	r2, [r7, #4]
  float32_t sum = 0.0f;                          /* Temporary result storage */
 8008d64:	f04f 0300 	mov.w	r3, #0
 8008d68:	627b      	str	r3, [r7, #36]	; 0x24

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t in1, in2, in3, in4;

  /*loop Unrolling */
  blkCnt = blockSize >> 2u;
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	089b      	lsrs	r3, r3, #2
 8008d6e:	623b      	str	r3, [r7, #32]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8008d70:	e036      	b.n	8008de0 <arm_mean_f32+0x88>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    in1 = *pSrc++;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	1d1a      	adds	r2, r3, #4
 8008d76:	60fa      	str	r2, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	61fb      	str	r3, [r7, #28]
    in2 = *pSrc++;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	1d1a      	adds	r2, r3, #4
 8008d80:	60fa      	str	r2, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	61bb      	str	r3, [r7, #24]
    in3 = *pSrc++;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	1d1a      	adds	r2, r3, #4
 8008d8a:	60fa      	str	r2, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	617b      	str	r3, [r7, #20]
    in4 = *pSrc++;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	1d1a      	adds	r2, r3, #4
 8008d94:	60fa      	str	r2, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	613b      	str	r3, [r7, #16]

    sum += in1;
 8008d9a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008d9e:	edd7 7a07 	vldr	s15, [r7, #28]
 8008da2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008da6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    sum += in2;
 8008daa:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008dae:	edd7 7a06 	vldr	s15, [r7, #24]
 8008db2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008db6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    sum += in3;
 8008dba:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008dbe:	edd7 7a05 	vldr	s15, [r7, #20]
 8008dc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008dc6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    sum += in4;
 8008dca:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008dce:	edd7 7a04 	vldr	s15, [r7, #16]
 8008dd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008dd6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    /* Decrement the loop counter */
    blkCnt--;
 8008dda:	6a3b      	ldr	r3, [r7, #32]
 8008ddc:	3b01      	subs	r3, #1
 8008dde:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 8008de0:	6a3b      	ldr	r3, [r7, #32]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d1c5      	bne.n	8008d72 <arm_mean_f32+0x1a>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	f003 0303 	and.w	r3, r3, #3
 8008dec:	623b      	str	r3, [r7, #32]
  /* Loop over blockSize number of values */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 8008dee:	e00d      	b.n	8008e0c <arm_mean_f32+0xb4>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    sum += *pSrc++;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	1d1a      	adds	r2, r3, #4
 8008df4:	60fa      	str	r2, [r7, #12]
 8008df6:	edd3 7a00 	vldr	s15, [r3]
 8008dfa:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008dfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e02:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    /* Decrement the loop counter */
    blkCnt--;
 8008e06:	6a3b      	ldr	r3, [r7, #32]
 8008e08:	3b01      	subs	r3, #1
 8008e0a:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 8008e0c:	6a3b      	ldr	r3, [r7, #32]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d1ee      	bne.n	8008df0 <arm_mean_f32+0x98>
  }

  /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
  /* Store the result to the destination */
  *pResult = sum / (float32_t) blockSize;
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	ee07 3a90 	vmov	s15, r3
 8008e18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008e1c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8008e20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	edc3 7a00 	vstr	s15, [r3]
}
 8008e2a:	bf00      	nop
 8008e2c:	372c      	adds	r7, #44	; 0x2c
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e34:	4770      	bx	lr

08008e36 <arm_min_f32>:
void arm_min_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
 8008e36:	b480      	push	{r7}
 8008e38:	b08b      	sub	sp, #44	; 0x2c
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	60f8      	str	r0, [r7, #12]
 8008e3e:	60b9      	str	r1, [r7, #8]
 8008e40:	607a      	str	r2, [r7, #4]
 8008e42:	603b      	str	r3, [r7, #0]

  float32_t minVal1, minVal2, out;               /* Temporary variables to store the output value. */
  uint32_t blkCnt, outIndex, count;              /* loop counter */

  /* Initialise the count value. */
  count = 0u;
 8008e44:	2300      	movs	r3, #0
 8008e46:	61bb      	str	r3, [r7, #24]
  /* Initialise the index value to zero. */
  outIndex = 0u;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	61fb      	str	r3, [r7, #28]
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	1d1a      	adds	r2, r3, #4
 8008e50:	60fa      	str	r2, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	627b      	str	r3, [r7, #36]	; 0x24

  /* Loop unrolling */
  blkCnt = (blockSize - 1u) >> 2u;
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	3b01      	subs	r3, #1
 8008e5a:	089b      	lsrs	r3, r3, #2
 8008e5c:	623b      	str	r3, [r7, #32]

  while(blkCnt > 0)
 8008e5e:	e051      	b.n	8008f04 <arm_min_f32+0xce>
  {
    /* Initialize minVal to the next consecutive values one by one */
    minVal1 = *pSrc++;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	1d1a      	adds	r2, r3, #4
 8008e64:	60fa      	str	r2, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	617b      	str	r3, [r7, #20]
    minVal2 = *pSrc++;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	1d1a      	adds	r2, r3, #4
 8008e6e:	60fa      	str	r2, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	613b      	str	r3, [r7, #16]

    /* compare for the minimum value */
    if(out > minVal1)
 8008e74:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008e78:	edd7 7a05 	vldr	s15, [r7, #20]
 8008e7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e84:	dd04      	ble.n	8008e90 <arm_min_f32+0x5a>
    {
      /* Update the minimum value and its index */
      out = minVal1;
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 1u;
 8008e8a:	69bb      	ldr	r3, [r7, #24]
 8008e8c:	3301      	adds	r3, #1
 8008e8e:	61fb      	str	r3, [r7, #28]
    }

    minVal1 = *pSrc++;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	1d1a      	adds	r2, r3, #4
 8008e94:	60fa      	str	r2, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	617b      	str	r3, [r7, #20]

    /* compare for the minimum value */
    if(out > minVal2)
 8008e9a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008e9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8008ea2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eaa:	dd04      	ble.n	8008eb6 <arm_min_f32+0x80>
    {
      /* Update the minimum value and its index */
      out = minVal2;
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 2u;
 8008eb0:	69bb      	ldr	r3, [r7, #24]
 8008eb2:	3302      	adds	r3, #2
 8008eb4:	61fb      	str	r3, [r7, #28]
    }

    minVal2 = *pSrc++;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	1d1a      	adds	r2, r3, #4
 8008eba:	60fa      	str	r2, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	613b      	str	r3, [r7, #16]

    /* compare for the minimum value */
    if(out > minVal1)
 8008ec0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008ec4:	edd7 7a05 	vldr	s15, [r7, #20]
 8008ec8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ed0:	dd04      	ble.n	8008edc <arm_min_f32+0xa6>
    {
      /* Update the minimum value and its index */
      out = minVal1;
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 3u;
 8008ed6:	69bb      	ldr	r3, [r7, #24]
 8008ed8:	3303      	adds	r3, #3
 8008eda:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the minimum value */
    if(out > minVal2)
 8008edc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008ee0:	edd7 7a04 	vldr	s15, [r7, #16]
 8008ee4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eec:	dd04      	ble.n	8008ef8 <arm_min_f32+0xc2>
    {
      /* Update the minimum value and its index */
      out = minVal2;
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 4u;
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	3304      	adds	r3, #4
 8008ef6:	61fb      	str	r3, [r7, #28]
    }

    count += 4u;
 8008ef8:	69bb      	ldr	r3, [r7, #24]
 8008efa:	3304      	adds	r3, #4
 8008efc:	61bb      	str	r3, [r7, #24]

    blkCnt--;
 8008efe:	6a3b      	ldr	r3, [r7, #32]
 8008f00:	3b01      	subs	r3, #1
 8008f02:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0)
 8008f04:	6a3b      	ldr	r3, [r7, #32]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d1aa      	bne.n	8008e60 <arm_min_f32+0x2a>
  }

  /* if (blockSize - 1u ) is not multiple of 4 */
  blkCnt = (blockSize - 1u) % 4u;
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	3b01      	subs	r3, #1
 8008f0e:	f003 0303 	and.w	r3, r3, #3
 8008f12:	623b      	str	r3, [r7, #32]

  blkCnt = (blockSize - 1u);

#endif //      #ifndef ARM_MATH_CM0_FAMILY

  while(blkCnt > 0)
 8008f14:	e016      	b.n	8008f44 <arm_min_f32+0x10e>
  {
    /* Initialize minVal to the next consecutive values one by one */
    minVal1 = *pSrc++;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	1d1a      	adds	r2, r3, #4
 8008f1a:	60fa      	str	r2, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	617b      	str	r3, [r7, #20]

    /* compare for the minimum value */
    if(out > minVal1)
 8008f20:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008f24:	edd7 7a05 	vldr	s15, [r7, #20]
 8008f28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f30:	dd05      	ble.n	8008f3e <arm_min_f32+0x108>
    {
      /* Update the minimum value and it's index */
      out = minVal1;
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = blockSize - blkCnt;
 8008f36:	68ba      	ldr	r2, [r7, #8]
 8008f38:	6a3b      	ldr	r3, [r7, #32]
 8008f3a:	1ad3      	subs	r3, r2, r3
 8008f3c:	61fb      	str	r3, [r7, #28]
    }

    blkCnt--;
 8008f3e:	6a3b      	ldr	r3, [r7, #32]
 8008f40:	3b01      	subs	r3, #1
 8008f42:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0)
 8008f44:	6a3b      	ldr	r3, [r7, #32]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d1e5      	bne.n	8008f16 <arm_min_f32+0xe0>

  }

  /* Store the minimum value and it's index into destination pointers */
  *pResult = out;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f4e:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	69fa      	ldr	r2, [r7, #28]
 8008f54:	601a      	str	r2, [r3, #0]
}
 8008f56:	bf00      	nop
 8008f58:	372c      	adds	r7, #44	; 0x2c
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr

08008f62 <arm_sqrt_f32>:
  {
 8008f62:	b580      	push	{r7, lr}
 8008f64:	b082      	sub	sp, #8
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	ed87 0a01 	vstr	s0, [r7, #4]
 8008f6c:	6038      	str	r0, [r7, #0]
    if(in >= 0.0f)
 8008f6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8008f72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f7a:	db0a      	blt.n	8008f92 <arm_sqrt_f32+0x30>
      *pOut = __builtin_sqrtf(in);
 8008f7c:	ed97 0a01 	vldr	s0, [r7, #4]
 8008f80:	f013 f828 	bl	801bfd4 <sqrtf>
 8008f84:	eef0 7a40 	vmov.f32	s15, s0
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8008f8e:	2300      	movs	r3, #0
 8008f90:	e005      	b.n	8008f9e <arm_sqrt_f32+0x3c>
      *pOut = 0.0f;
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	f04f 0200 	mov.w	r2, #0
 8008f98:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8008f9a:	f04f 33ff 	mov.w	r3, #4294967295
  }
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3708      	adds	r7, #8
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}

08008fa6 <arm_rms_f32>:

void arm_rms_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult)
{
 8008fa6:	b580      	push	{r7, lr}
 8008fa8:	b088      	sub	sp, #32
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	60f8      	str	r0, [r7, #12]
 8008fae:	60b9      	str	r1, [r7, #8]
 8008fb0:	607a      	str	r2, [r7, #4]
  float32_t sum = 0.0f;                          /* Accumulator */
 8008fb2:	f04f 0300 	mov.w	r3, #0
 8008fb6:	61fb      	str	r3, [r7, #28]
#ifndef ARM_MATH_CM0_FAMILY

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  /* loop Unrolling */
  blkCnt = blockSize >> 2u;
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	089b      	lsrs	r3, r3, #2
 8008fbc:	61bb      	str	r3, [r7, #24]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8008fbe:	e03e      	b.n	800903e <arm_rms_f32+0x98>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + A[2] * A[2] + ... + A[blockSize-1] * A[blockSize-1] */
    /* Compute sum of the squares and then store the result in a temporary variable, sum  */
    in = *pSrc++;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	1d1a      	adds	r2, r3, #4
 8008fc4:	60fa      	str	r2, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	617b      	str	r3, [r7, #20]
    sum += in * in;
 8008fca:	edd7 7a05 	vldr	s15, [r7, #20]
 8008fce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008fd2:	ed97 7a07 	vldr	s14, [r7, #28]
 8008fd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008fda:	edc7 7a07 	vstr	s15, [r7, #28]
    in = *pSrc++;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	1d1a      	adds	r2, r3, #4
 8008fe2:	60fa      	str	r2, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	617b      	str	r3, [r7, #20]
    sum += in * in;
 8008fe8:	edd7 7a05 	vldr	s15, [r7, #20]
 8008fec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008ff0:	ed97 7a07 	vldr	s14, [r7, #28]
 8008ff4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ff8:	edc7 7a07 	vstr	s15, [r7, #28]
    in = *pSrc++;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	1d1a      	adds	r2, r3, #4
 8009000:	60fa      	str	r2, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	617b      	str	r3, [r7, #20]
    sum += in * in;
 8009006:	edd7 7a05 	vldr	s15, [r7, #20]
 800900a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800900e:	ed97 7a07 	vldr	s14, [r7, #28]
 8009012:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009016:	edc7 7a07 	vstr	s15, [r7, #28]
    in = *pSrc++;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	1d1a      	adds	r2, r3, #4
 800901e:	60fa      	str	r2, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	617b      	str	r3, [r7, #20]
    sum += in * in;
 8009024:	edd7 7a05 	vldr	s15, [r7, #20]
 8009028:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800902c:	ed97 7a07 	vldr	s14, [r7, #28]
 8009030:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009034:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Decrement the loop counter */
    blkCnt--;
 8009038:	69bb      	ldr	r3, [r7, #24]
 800903a:	3b01      	subs	r3, #1
 800903c:	61bb      	str	r3, [r7, #24]
  while(blkCnt > 0u)
 800903e:	69bb      	ldr	r3, [r7, #24]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d1bd      	bne.n	8008fc0 <arm_rms_f32+0x1a>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	f003 0303 	and.w	r3, r3, #3
 800904a:	61bb      	str	r3, [r7, #24]
  /* Loop over blockSize number of values */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 800904c:	e011      	b.n	8009072 <arm_rms_f32+0xcc>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + A[2] * A[2] + ... + A[blockSize-1] * A[blockSize-1] */
    /* Compute sum of the squares and then store the results in a temporary variable, sum  */
    in = *pSrc++;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	1d1a      	adds	r2, r3, #4
 8009052:	60fa      	str	r2, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	617b      	str	r3, [r7, #20]
    sum += in * in;
 8009058:	edd7 7a05 	vldr	s15, [r7, #20]
 800905c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009060:	ed97 7a07 	vldr	s14, [r7, #28]
 8009064:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009068:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Decrement the loop counter */
    blkCnt--;
 800906c:	69bb      	ldr	r3, [r7, #24]
 800906e:	3b01      	subs	r3, #1
 8009070:	61bb      	str	r3, [r7, #24]
  while(blkCnt > 0u)
 8009072:	69bb      	ldr	r3, [r7, #24]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d1ea      	bne.n	800904e <arm_rms_f32+0xa8>
  }

  /* Compute Rms and store the result in the destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	ee07 3a90 	vmov	s15, r3
 800907e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009082:	ed97 7a07 	vldr	s14, [r7, #28]
 8009086:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	eeb0 0a66 	vmov.f32	s0, s13
 8009090:	f7ff ff67 	bl	8008f62 <arm_sqrt_f32>
}
 8009094:	bf00      	nop
 8009096:	3720      	adds	r7, #32
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <arm_sqrt_f32>:
  {
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	ed87 0a01 	vstr	s0, [r7, #4]
 80090a6:	6038      	str	r0, [r7, #0]
    if(in >= 0.0f)
 80090a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80090ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80090b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090b4:	db0a      	blt.n	80090cc <arm_sqrt_f32+0x30>
      *pOut = __builtin_sqrtf(in);
 80090b6:	ed97 0a01 	vldr	s0, [r7, #4]
 80090ba:	f012 ff8b 	bl	801bfd4 <sqrtf>
 80090be:	eef0 7a40 	vmov.f32	s15, s0
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 80090c8:	2300      	movs	r3, #0
 80090ca:	e005      	b.n	80090d8 <arm_sqrt_f32+0x3c>
      *pOut = 0.0f;
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	f04f 0200 	mov.w	r2, #0
 80090d2:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 80090d4:	f04f 33ff 	mov.w	r3, #4294967295
  }
 80090d8:	4618      	mov	r0, r3
 80090da:	3708      	adds	r7, #8
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}

080090e0 <arm_std_f32>:

void arm_std_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b08c      	sub	sp, #48	; 0x30
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	60f8      	str	r0, [r7, #12]
 80090e8:	60b9      	str	r1, [r7, #8]
 80090ea:	607a      	str	r2, [r7, #4]
  float32_t sum = 0.0f;                          /* Temporary result storage */
 80090ec:	f04f 0300 	mov.w	r3, #0
 80090f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  float32_t sumOfSquares = 0.0f;                 /* Sum of squares */
 80090f2:	f04f 0300 	mov.w	r3, #0
 80090f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t meanOfSquares, mean, squareOfMean;

	if(blockSize == 1)
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d104      	bne.n	8009108 <arm_std_f32+0x28>
	{
		*pResult = 0;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f04f 0200 	mov.w	r2, #0
 8009104:	601a      	str	r2, [r3, #0]
		return;
 8009106:	e0c4      	b.n	8009292 <arm_std_f32+0x1b2>
	}

  /*loop Unrolling */
  blkCnt = blockSize >> 2u;
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	089b      	lsrs	r3, r3, #2
 800910c:	627b      	str	r3, [r7, #36]	; 0x24

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 800910e:	e05e      	b.n	80091ce <arm_std_f32+0xee>
  {
    /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1])  */
    /* Compute Sum of squares of the input samples    
     * and then store the result in a temporary variable, sum. */
    in = *pSrc++;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	1d1a      	adds	r2, r3, #4
 8009114:	60fa      	str	r2, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	617b      	str	r3, [r7, #20]
    sum += in;
 800911a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800911e:	edd7 7a05 	vldr	s15, [r7, #20]
 8009122:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009126:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 800912a:	edd7 7a05 	vldr	s15, [r7, #20]
 800912e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009132:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009136:	ee77 7a27 	vadd.f32	s15, s14, s15
 800913a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    in = *pSrc++;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	1d1a      	adds	r2, r3, #4
 8009142:	60fa      	str	r2, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	617b      	str	r3, [r7, #20]
    sum += in;
 8009148:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800914c:	edd7 7a05 	vldr	s15, [r7, #20]
 8009150:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009154:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 8009158:	edd7 7a05 	vldr	s15, [r7, #20]
 800915c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009160:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009164:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009168:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    in = *pSrc++;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	1d1a      	adds	r2, r3, #4
 8009170:	60fa      	str	r2, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	617b      	str	r3, [r7, #20]
    sum += in;
 8009176:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800917a:	edd7 7a05 	vldr	s15, [r7, #20]
 800917e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009182:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 8009186:	edd7 7a05 	vldr	s15, [r7, #20]
 800918a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800918e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009192:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009196:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    in = *pSrc++;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	1d1a      	adds	r2, r3, #4
 800919e:	60fa      	str	r2, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	617b      	str	r3, [r7, #20]
    sum += in;
 80091a4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80091a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80091ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80091b0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 80091b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80091b8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80091bc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80091c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80091c4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    /* Decrement the loop counter */
    blkCnt--;
 80091c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ca:	3b01      	subs	r3, #1
 80091cc:	627b      	str	r3, [r7, #36]	; 0x24
  while(blkCnt > 0u)
 80091ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d19d      	bne.n	8009110 <arm_std_f32+0x30>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	f003 0303 	and.w	r3, r3, #3
 80091da:	627b      	str	r3, [r7, #36]	; 0x24

  while(blkCnt > 0u)
 80091dc:	e019      	b.n	8009212 <arm_std_f32+0x132>
  {
    /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1]) */
    /* Compute Sum of squares of the input samples    
     * and then store the result in a temporary variable, sum. */
    in = *pSrc++;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	1d1a      	adds	r2, r3, #4
 80091e2:	60fa      	str	r2, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	617b      	str	r3, [r7, #20]
    sum += in;
 80091e8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80091ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80091f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80091f4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 80091f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80091fc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009200:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009204:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009208:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    /* Decrement the loop counter */
    blkCnt--;
 800920c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800920e:	3b01      	subs	r3, #1
 8009210:	627b      	str	r3, [r7, #36]	; 0x24
  while(blkCnt > 0u)
 8009212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009214:	2b00      	cmp	r3, #0
 8009216:	d1e2      	bne.n	80091de <arm_std_f32+0xfe>
  }

  /* Compute Mean of squares of the input samples    
   * and then store the result in a temporary variable, meanOfSquares. */
  meanOfSquares = sumOfSquares / ((float32_t) blockSize - 1.0f);
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	ee07 3a90 	vmov	s15, r3
 800921e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009222:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009226:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800922a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800922e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009232:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Compute mean of all input values */
  mean = sum / (float32_t) blockSize;
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	ee07 3a90 	vmov	s15, r3
 800923c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009240:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8009244:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009248:	edc7 7a07 	vstr	s15, [r7, #28]

  /* Compute square of mean */
  squareOfMean = (mean * mean) * (((float32_t) blockSize) /
 800924c:	edd7 7a07 	vldr	s15, [r7, #28]
 8009250:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	ee07 3a90 	vmov	s15, r3
 800925a:	eeb8 6a67 	vcvt.f32.u32	s12, s15
                                  ((float32_t) blockSize - 1.0f));
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	ee07 3a90 	vmov	s15, r3
 8009264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009268:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800926c:	ee77 6ae6 	vsub.f32	s13, s15, s13
  squareOfMean = (mean * mean) * (((float32_t) blockSize) /
 8009270:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8009274:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009278:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Compute standard deviation and then store the result to the destination */
  arm_sqrt_f32((meanOfSquares - squareOfMean), pResult);
 800927c:	ed97 7a08 	vldr	s14, [r7, #32]
 8009280:	edd7 7a06 	vldr	s15, [r7, #24]
 8009284:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	eeb0 0a67 	vmov.f32	s0, s15
 800928e:	f7ff ff05 	bl	800909c <arm_sqrt_f32>
  /* Compute standard deviation and then store the result to the destination */
  arm_sqrt_f32(var, pResult);

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 8009292:	3730      	adds	r7, #48	; 0x30
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}

08009298 <arm_var_f32>:

void arm_var_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult)
{
 8009298:	b480      	push	{r7}
 800929a:	b08d      	sub	sp, #52	; 0x34
 800929c:	af00      	add	r7, sp, #0
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	60b9      	str	r1, [r7, #8]
 80092a2:	607a      	str	r2, [r7, #4]

  float32_t sum = 0.0f;                          /* Temporary result storage */
 80092a4:	f04f 0300 	mov.w	r3, #0
 80092a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  float32_t sumOfSquares = 0.0f;                 /* Sum of squares */
 80092aa:	f04f 0300 	mov.w	r3, #0
 80092ae:	62bb      	str	r3, [r7, #40]	; 0x28
   
  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t meanOfSquares, mean, squareOfMean;   /* Temporary variables */

	if(blockSize == 1)
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	d104      	bne.n	80092c0 <arm_var_f32+0x28>
	{
		*pResult = 0;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f04f 0200 	mov.w	r2, #0
 80092bc:	601a      	str	r2, [r3, #0]
		return;
 80092be:	e0c2      	b.n	8009446 <arm_var_f32+0x1ae>
	}

  /*loop Unrolling */
  blkCnt = blockSize >> 2u;
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	089b      	lsrs	r3, r3, #2
 80092c4:	627b      	str	r3, [r7, #36]	; 0x24

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 80092c6:	e05e      	b.n	8009386 <arm_var_f32+0xee>
  {
    /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1])  */
    /* Compute Sum of squares of the input samples    
     * and then store the result in a temporary variable, sum. */
    in = *pSrc++;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	1d1a      	adds	r2, r3, #4
 80092cc:	60fa      	str	r2, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	617b      	str	r3, [r7, #20]
    sum += in;
 80092d2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80092d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80092da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092de:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 80092e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80092e6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80092ea:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80092ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092f2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    in = *pSrc++;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	1d1a      	adds	r2, r3, #4
 80092fa:	60fa      	str	r2, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	617b      	str	r3, [r7, #20]
    sum += in;
 8009300:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8009304:	edd7 7a05 	vldr	s15, [r7, #20]
 8009308:	ee77 7a27 	vadd.f32	s15, s14, s15
 800930c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 8009310:	edd7 7a05 	vldr	s15, [r7, #20]
 8009314:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009318:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800931c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009320:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    in = *pSrc++;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	1d1a      	adds	r2, r3, #4
 8009328:	60fa      	str	r2, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	617b      	str	r3, [r7, #20]
    sum += in;
 800932e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8009332:	edd7 7a05 	vldr	s15, [r7, #20]
 8009336:	ee77 7a27 	vadd.f32	s15, s14, s15
 800933a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 800933e:	edd7 7a05 	vldr	s15, [r7, #20]
 8009342:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009346:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800934a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800934e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    in = *pSrc++;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	1d1a      	adds	r2, r3, #4
 8009356:	60fa      	str	r2, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	617b      	str	r3, [r7, #20]
    sum += in;
 800935c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8009360:	edd7 7a05 	vldr	s15, [r7, #20]
 8009364:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009368:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 800936c:	edd7 7a05 	vldr	s15, [r7, #20]
 8009370:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009374:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009378:	ee77 7a27 	vadd.f32	s15, s14, s15
 800937c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    /* Decrement the loop counter */
    blkCnt--;
 8009380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009382:	3b01      	subs	r3, #1
 8009384:	627b      	str	r3, [r7, #36]	; 0x24
  while(blkCnt > 0u)
 8009386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009388:	2b00      	cmp	r3, #0
 800938a:	d19d      	bne.n	80092c8 <arm_var_f32+0x30>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	f003 0303 	and.w	r3, r3, #3
 8009392:	627b      	str	r3, [r7, #36]	; 0x24

  while(blkCnt > 0u)
 8009394:	e019      	b.n	80093ca <arm_var_f32+0x132>
  {
    /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1]) */
    /* Compute Sum of squares of the input samples    
     * and then store the result in a temporary variable, sum. */
    in = *pSrc++;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	1d1a      	adds	r2, r3, #4
 800939a:	60fa      	str	r2, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	617b      	str	r3, [r7, #20]
    sum += in;
 80093a0:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80093a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80093a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80093ac:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 80093b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80093b4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80093b8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80093bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80093c0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    /* Decrement the loop counter */
    blkCnt--;
 80093c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c6:	3b01      	subs	r3, #1
 80093c8:	627b      	str	r3, [r7, #36]	; 0x24
  while(blkCnt > 0u)
 80093ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d1e2      	bne.n	8009396 <arm_var_f32+0xfe>
  }

  /* Compute Mean of squares of the input samples    
   * and then store the result in a temporary variable, meanOfSquares. */
  meanOfSquares = sumOfSquares / ((float32_t) blockSize - 1.0f);
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	ee07 3a90 	vmov	s15, r3
 80093d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80093de:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80093e2:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80093e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093ea:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Compute mean of all input values */
  mean = sum / (float32_t) blockSize;
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	ee07 3a90 	vmov	s15, r3
 80093f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80093f8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80093fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009400:	edc7 7a07 	vstr	s15, [r7, #28]

  /* Compute square of mean */
  squareOfMean = (mean * mean) * (((float32_t) blockSize) /
 8009404:	edd7 7a07 	vldr	s15, [r7, #28]
 8009408:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	ee07 3a90 	vmov	s15, r3
 8009412:	eeb8 6a67 	vcvt.f32.u32	s12, s15
                                  ((float32_t) blockSize - 1.0f));
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	ee07 3a90 	vmov	s15, r3
 800941c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009420:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009424:	ee77 6ae6 	vsub.f32	s13, s15, s13
  squareOfMean = (mean * mean) * (((float32_t) blockSize) /
 8009428:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800942c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009430:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Compute variance and then store the result to the destination */
  *pResult = meanOfSquares - squareOfMean;
 8009434:	ed97 7a08 	vldr	s14, [r7, #32]
 8009438:	edd7 7a06 	vldr	s15, [r7, #24]
 800943c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	edc3 7a00 	vstr	s15, [r3]
  /* Compute the variance */
  *pResult = ((sumOfSquares - squareOfSum) / (float32_t) (blockSize - 1.0f));

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 8009446:	3734      	adds	r7, #52	; 0x34
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <arm_cfft_radix8by2_f32>:
* \endcode
* 
*/

void arm_cfft_radix8by2_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b0a0      	sub	sp, #128	; 0x80
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	881b      	ldrh	r3, [r3, #0]
 800945e:	66bb      	str	r3, [r7, #104]	; 0x68
    float32_t * pCol1, * pCol2, * pMid1, * pMid2;
    float32_t * p2 = p1 + L;
 8009460:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009462:	009b      	lsls	r3, r3, #2
 8009464:	683a      	ldr	r2, [r7, #0]
 8009466:	4413      	add	r3, r2
 8009468:	677b      	str	r3, [r7, #116]	; 0x74
    const float32_t * tw = (float32_t *) S->pTwiddle;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	673b      	str	r3, [r7, #112]	; 0x70
    float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
    float32_t m0, m1, m2, m3;
    uint32_t l;

    pCol1 = p1;
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	667b      	str	r3, [r7, #100]	; 0x64
    pCol2 = p2;
 8009474:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009476:	663b      	str	r3, [r7, #96]	; 0x60

    //    Define new length
    L >>= 1;
 8009478:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800947a:	085b      	lsrs	r3, r3, #1
 800947c:	66bb      	str	r3, [r7, #104]	; 0x68
    //    Initialize mid pointers
    pMid1 = p1 + L;
 800947e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	683a      	ldr	r2, [r7, #0]
 8009484:	4413      	add	r3, r2
 8009486:	67fb      	str	r3, [r7, #124]	; 0x7c
    pMid2 = p2 + L;
 8009488:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800948e:	4413      	add	r3, r2
 8009490:	67bb      	str	r3, [r7, #120]	; 0x78

    // do two dot Fourier transform
    for ( l = L >> 2; l > 0; l-- ) 
 8009492:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009494:	089b      	lsrs	r3, r3, #2
 8009496:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009498:	e1b6      	b.n	8009808 <arm_cfft_radix8by2_f32+0x3b8>
    {
        t1[0] = p1[0];
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	63bb      	str	r3, [r7, #56]	; 0x38
        t1[1] = p1[1];
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	685b      	ldr	r3, [r3, #4]
 80094a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        t1[2] = p1[2];
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	689b      	ldr	r3, [r3, #8]
 80094aa:	643b      	str	r3, [r7, #64]	; 0x40
        t1[3] = p1[3];
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	68db      	ldr	r3, [r3, #12]
 80094b0:	647b      	str	r3, [r7, #68]	; 0x44

        t2[0] = p2[0];
 80094b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	62bb      	str	r3, [r7, #40]	; 0x28
        t2[1] = p2[1];
 80094b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        t2[2] = p2[2];
 80094be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094c0:	689b      	ldr	r3, [r3, #8]
 80094c2:	633b      	str	r3, [r7, #48]	; 0x30
        t2[3] = p2[3];
 80094c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094c6:	68db      	ldr	r3, [r3, #12]
 80094c8:	637b      	str	r3, [r7, #52]	; 0x34

        t3[0] = pMid1[0];
 80094ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	61bb      	str	r3, [r7, #24]
        t3[1] = pMid1[1];
 80094d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	61fb      	str	r3, [r7, #28]
        t3[2] = pMid1[2];
 80094d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80094d8:	689b      	ldr	r3, [r3, #8]
 80094da:	623b      	str	r3, [r7, #32]
        t3[3] = pMid1[3];
 80094dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80094de:	68db      	ldr	r3, [r3, #12]
 80094e0:	627b      	str	r3, [r7, #36]	; 0x24

        t4[0] = pMid2[0];
 80094e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	60bb      	str	r3, [r7, #8]
        t4[1] = pMid2[1];
 80094e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	60fb      	str	r3, [r7, #12]
        t4[2] = pMid2[2];
 80094ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094f0:	689b      	ldr	r3, [r3, #8]
 80094f2:	613b      	str	r3, [r7, #16]
        t4[3] = pMid2[3];
 80094f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094f6:	68db      	ldr	r3, [r3, #12]
 80094f8:	617b      	str	r3, [r7, #20]

        *p1++ = t1[0] + t2[0];
 80094fa:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80094fe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	1d1a      	adds	r2, r3, #4
 8009506:	603a      	str	r2, [r7, #0]
 8009508:	ee77 7a27 	vadd.f32	s15, s14, s15
 800950c:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[1] + t2[1];
 8009510:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8009514:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	1d1a      	adds	r2, r3, #4
 800951c:	603a      	str	r2, [r7, #0]
 800951e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009522:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[2] + t2[2];
 8009526:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800952a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	1d1a      	adds	r2, r3, #4
 8009532:	603a      	str	r2, [r7, #0]
 8009534:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009538:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[3] + t2[3];    // col 1
 800953c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8009540:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	1d1a      	adds	r2, r3, #4
 8009548:	603a      	str	r2, [r7, #0]
 800954a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800954e:	edc3 7a00 	vstr	s15, [r3]

        t2[0] = t1[0] - t2[0];
 8009552:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8009556:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800955a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800955e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        t2[1] = t1[1] - t2[1];
 8009562:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8009566:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800956a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800956e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[2] = t1[2] - t2[2];
 8009572:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009576:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800957a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800957e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        t2[3] = t1[3] - t2[3];    // for col 2
 8009582:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8009586:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800958a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800958e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

        *pMid1++ = t3[0] + t4[0];
 8009592:	ed97 7a06 	vldr	s14, [r7, #24]
 8009596:	edd7 7a02 	vldr	s15, [r7, #8]
 800959a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800959c:	1d1a      	adds	r2, r3, #4
 800959e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80095a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80095a4:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[1] + t4[1];
 80095a8:	ed97 7a07 	vldr	s14, [r7, #28]
 80095ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80095b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80095b2:	1d1a      	adds	r2, r3, #4
 80095b4:	67fa      	str	r2, [r7, #124]	; 0x7c
 80095b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80095ba:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[2] + t4[2];
 80095be:	ed97 7a08 	vldr	s14, [r7, #32]
 80095c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80095c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80095c8:	1d1a      	adds	r2, r3, #4
 80095ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80095cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80095d0:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[3] + t4[3]; // col 1
 80095d4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80095d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80095dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80095de:	1d1a      	adds	r2, r3, #4
 80095e0:	67fa      	str	r2, [r7, #124]	; 0x7c
 80095e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80095e6:	edc3 7a00 	vstr	s15, [r3]

        t4[0] = t4[0] - t3[0];
 80095ea:	ed97 7a02 	vldr	s14, [r7, #8]
 80095ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80095f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80095f6:	edc7 7a02 	vstr	s15, [r7, #8]
        t4[1] = t4[1] - t3[1];
 80095fa:	ed97 7a03 	vldr	s14, [r7, #12]
 80095fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8009602:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009606:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[2] = t4[2] - t3[2];
 800960a:	ed97 7a04 	vldr	s14, [r7, #16]
 800960e:	edd7 7a08 	vldr	s15, [r7, #32]
 8009612:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009616:	edc7 7a04 	vstr	s15, [r7, #16]
        t4[3] = t4[3] - t3[3];    // for col 2
 800961a:	ed97 7a05 	vldr	s14, [r7, #20]
 800961e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009622:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009626:	edc7 7a05 	vstr	s15, [r7, #20]

        twR = *tw++;
 800962a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800962c:	1d1a      	adds	r2, r3, #4
 800962e:	673a      	str	r2, [r7, #112]	; 0x70
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 8009634:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009636:	1d1a      	adds	r2, r3, #4
 8009638:	673a      	str	r2, [r7, #112]	; 0x70
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	65bb      	str	r3, [r7, #88]	; 0x58

        // multiply by twiddle factors
        m0 = t2[0] * twR;
 800963e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009642:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8009646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800964a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[1] * twI;
 800964e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009652:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800965a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[1] * twR;
 800965e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009662:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8009666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800966a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[0] * twI;
 800966e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009672:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800967a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        // R  =  R  *  Tr - I * Ti
        *p2++ = m0 + m1;
 800967e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009680:	1d1a      	adds	r2, r3, #4
 8009682:	677a      	str	r2, [r7, #116]	; 0x74
 8009684:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009688:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800968c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009690:	edc3 7a00 	vstr	s15, [r3]
        // I  =  I  *  Tr + R * Ti
        *p2++ = m2 - m3;
 8009694:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009696:	1d1a      	adds	r2, r3, #4
 8009698:	677a      	str	r2, [r7, #116]	; 0x74
 800969a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800969e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80096a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80096a6:	edc3 7a00 	vstr	s15, [r3]
        
        // use vertical symmetry
        //  0.9988 - 0.0491i <==> -0.0491 - 0.9988i
        m0 = t4[0] * twI;
 80096aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80096ae:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80096b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096b6:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[1] * twR;
 80096ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80096be:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80096c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096c6:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[1] * twI;
 80096ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80096ce:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80096d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096d6:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[0] * twR;
 80096da:	edd7 7a02 	vldr	s15, [r7, #8]
 80096de:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80096e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096e6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *pMid2++ = m0 - m1;
 80096ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096ec:	1d1a      	adds	r2, r3, #4
 80096ee:	67ba      	str	r2, [r7, #120]	; 0x78
 80096f0:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80096f4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80096f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80096fc:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 8009700:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009702:	1d1a      	adds	r2, r3, #4
 8009704:	67ba      	str	r2, [r7, #120]	; 0x78
 8009706:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800970a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800970e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009712:	edc3 7a00 	vstr	s15, [r3]

        twR = *tw++;
 8009716:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009718:	1d1a      	adds	r2, r3, #4
 800971a:	673a      	str	r2, [r7, #112]	; 0x70
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 8009720:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009722:	1d1a      	adds	r2, r3, #4
 8009724:	673a      	str	r2, [r7, #112]	; 0x70
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	65bb      	str	r3, [r7, #88]	; 0x58
        
        m0 = t2[2] * twR;
 800972a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800972e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8009732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009736:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[3] * twI;
 800973a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800973e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009746:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[3] * twR;
 800974a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800974e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8009752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009756:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[2] * twI;
 800975a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800975e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009766:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *p2++ = m0 + m1;
 800976a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800976c:	1d1a      	adds	r2, r3, #4
 800976e:	677a      	str	r2, [r7, #116]	; 0x74
 8009770:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009774:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009778:	ee77 7a27 	vadd.f32	s15, s14, s15
 800977c:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 8009780:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009782:	1d1a      	adds	r2, r3, #4
 8009784:	677a      	str	r2, [r7, #116]	; 0x74
 8009786:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800978a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800978e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009792:	edc3 7a00 	vstr	s15, [r3]
        
        m0 = t4[2] * twI;
 8009796:	edd7 7a04 	vldr	s15, [r7, #16]
 800979a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800979e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097a2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[3] * twR;
 80097a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80097aa:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80097ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097b2:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[3] * twI;
 80097b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80097ba:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80097be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097c2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[2] * twR;
 80097c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80097ca:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80097ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097d2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *pMid2++ = m0 - m1;
 80097d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80097d8:	1d1a      	adds	r2, r3, #4
 80097da:	67ba      	str	r2, [r7, #120]	; 0x78
 80097dc:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80097e0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80097e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80097e8:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 80097ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80097ee:	1d1a      	adds	r2, r3, #4
 80097f0:	67ba      	str	r2, [r7, #120]	; 0x78
 80097f2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80097f6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80097fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80097fe:	edc3 7a00 	vstr	s15, [r3]
    for ( l = L >> 2; l > 0; l-- ) 
 8009802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009804:	3b01      	subs	r3, #1
 8009806:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800980a:	2b00      	cmp	r3, #0
 800980c:	f47f ae45 	bne.w	800949a <arm_cfft_radix8by2_f32+0x4a>
    }

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 2u);
 8009810:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009812:	b299      	uxth	r1, r3
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	685a      	ldr	r2, [r3, #4]
 8009818:	2302      	movs	r3, #2
 800981a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800981c:	f000 fef2 	bl	800a604 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2u);
 8009820:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009822:	b299      	uxth	r1, r3
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	685a      	ldr	r2, [r3, #4]
 8009828:	2302      	movs	r3, #2
 800982a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800982c:	f000 feea 	bl	800a604 <arm_radix8_butterfly_f32>
}
 8009830:	bf00      	nop
 8009832:	3780      	adds	r7, #128	; 0x80
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}

08009838 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b0ac      	sub	sp, #176	; 0xb0
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	881b      	ldrh	r3, [r3, #0]
 8009846:	085b      	lsrs	r3, r3, #1
 8009848:	b29b      	uxth	r3, r3
 800984a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 800984e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	683a      	ldr	r2, [r7, #0]
 8009856:	4413      	add	r3, r2
 8009858:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 800985c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009860:	009b      	lsls	r3, r3, #2
 8009862:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8009866:	4413      	add	r3, r2
 8009868:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 800986c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009870:	009b      	lsls	r3, r3, #2
 8009872:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8009876:	4413      	add	r3, r2
 8009878:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         // points to real values by default
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 8009880:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009884:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 8009886:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800988a:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 800988c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009890:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     // points to imaginary values by default
 8009892:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009896:	3b04      	subs	r3, #4
 8009898:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 800989c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80098a0:	3b04      	subs	r3, #4
 80098a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 80098a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80098aa:	3b04      	subs	r3, #4
 80098ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 80098b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80098b4:	009b      	lsls	r3, r3, #2
 80098b6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80098ba:	4413      	add	r3, r2
 80098bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	685b      	ldr	r3, [r3, #4]
 80098c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80098c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80098cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80098d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80098d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 80098d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80098dc:	085b      	lsrs	r3, r3, #1
 80098de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    // do four dot Fourier transform

    twMod2 = 2;
 80098e2:	2302      	movs	r3, #2
 80098e4:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 80098e6:	2304      	movs	r3, #4
 80098e8:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 80098ea:	2306      	movs	r3, #6
 80098ec:	667b      	str	r3, [r7, #100]	; 0x64

    // TOP
    p1ap3_0 = p1[0] + p3[0];
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	ed93 7a00 	vldr	s14, [r3]
 80098f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80098f8:	edd3 7a00 	vldr	s15, [r3]
 80098fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009900:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	ed93 7a00 	vldr	s14, [r3]
 800990a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800990e:	edd3 7a00 	vldr	s15, [r3]
 8009912:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009916:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	3304      	adds	r3, #4
 800991e:	ed93 7a00 	vldr	s14, [r3]
 8009922:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009926:	3304      	adds	r3, #4
 8009928:	edd3 7a00 	vldr	s15, [r3]
 800992c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009930:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	3304      	adds	r3, #4
 8009938:	ed93 7a00 	vldr	s14, [r3]
 800993c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009940:	3304      	adds	r3, #4
 8009942:	edd3 7a00 	vldr	s15, [r3]
 8009946:	ee77 7a67 	vsub.f32	s15, s14, s15
 800994a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800994e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009952:	3304      	adds	r3, #4
 8009954:	ed93 7a00 	vldr	s14, [r3]
 8009958:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800995c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009960:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009964:	3304      	adds	r3, #4
 8009966:	edd3 7a00 	vldr	s15, [r3]
 800996a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800996e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8009972:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009976:	edd3 7a00 	vldr	s15, [r3]
 800997a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800997e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009982:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009986:	edd3 7a00 	vldr	s15, [r3]
 800998a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800998e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8009992:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009996:	edd3 7a00 	vldr	s15, [r3]
 800999a:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800999e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80099a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80099a6:	edd3 7a00 	vldr	s15, [r3]
 80099aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80099ae:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 80099b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80099b6:	3304      	adds	r3, #4
 80099b8:	edd3 7a00 	vldr	s15, [r3]
 80099bc:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80099c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80099c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80099c8:	3304      	adds	r3, #4
 80099ca:	edd3 7a00 	vldr	s15, [r3]
 80099ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80099d2:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 80099d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80099da:	3304      	adds	r3, #4
 80099dc:	edd3 7a00 	vldr	s15, [r3]
 80099e0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80099e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80099e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80099ec:	3304      	adds	r3, #4
 80099ee:	edd3 7a00 	vldr	s15, [r3]
 80099f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80099f6:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 80099fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80099fe:	ed93 7a00 	vldr	s14, [r3]
 8009a02:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009a06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009a0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009a0e:	edd3 7a00 	vldr	s15, [r3]
 8009a12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009a16:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8009a1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009a1e:	ed93 7a00 	vldr	s14, [r3]
 8009a22:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8009a26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009a2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009a2e:	edd3 7a00 	vldr	s15, [r3]
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	1d1a      	adds	r2, r3, #4
 8009a36:	603a      	str	r2, [r7, #0]
 8009a38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a3c:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8009a40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009a44:	3304      	adds	r3, #4
 8009a46:	ed93 7a00 	vldr	s14, [r3]
 8009a4a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8009a4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009a52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009a56:	3304      	adds	r3, #4
 8009a58:	edd3 7a00 	vldr	s15, [r3]
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	1d1a      	adds	r2, r3, #4
 8009a60:	603a      	str	r2, [r7, #0]
 8009a62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a66:	edc3 7a00 	vstr	s15, [r3]

    // Twiddle factors are ones
    *p2++ = t2[0];
 8009a6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009a6e:	1d1a      	adds	r2, r3, #4
 8009a70:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8009a74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a76:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 8009a78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009a7c:	1d1a      	adds	r2, r3, #4
 8009a7e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8009a82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a84:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 8009a86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a8a:	1d1a      	adds	r2, r3, #4
 8009a8c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009a90:	69fa      	ldr	r2, [r7, #28]
 8009a92:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 8009a94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a98:	1d1a      	adds	r2, r3, #4
 8009a9a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009a9e:	6a3a      	ldr	r2, [r7, #32]
 8009aa0:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 8009aa2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009aa6:	1d1a      	adds	r2, r3, #4
 8009aa8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8009aac:	68fa      	ldr	r2, [r7, #12]
 8009aae:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 8009ab0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009ab4:	1d1a      	adds	r2, r3, #4
 8009ab6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8009aba:	693a      	ldr	r2, [r7, #16]
 8009abc:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 8009abe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009ac6:	4413      	add	r3, r2
 8009ac8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 8009acc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009ace:	009b      	lsls	r3, r3, #2
 8009ad0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009ad4:	4413      	add	r3, r2
 8009ad6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 8009ada:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009adc:	009b      	lsls	r3, r3, #2
 8009ade:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009ae2:	4413      	add	r3, r2
 8009ae4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- ) 
 8009ae8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009aec:	3b02      	subs	r3, #2
 8009aee:	085b      	lsrs	r3, r3, #1
 8009af0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009af4:	e31a      	b.n	800a12c <arm_cfft_radix8by4_f32+0x8f4>
    {
        // TOP
        p1ap3_0 = p1[0] + p3[0];
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	ed93 7a00 	vldr	s14, [r3]
 8009afc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009b00:	edd3 7a00 	vldr	s15, [r3]
 8009b04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b08:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = p1[0] - p3[0];
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	ed93 7a00 	vldr	s14, [r3]
 8009b12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009b16:	edd3 7a00 	vldr	s15, [r3]
 8009b1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b1e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        p1ap3_1 = p1[1] + p3[1];
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	3304      	adds	r3, #4
 8009b26:	ed93 7a00 	vldr	s14, [r3]
 8009b2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009b2e:	3304      	adds	r3, #4
 8009b30:	edd3 7a00 	vldr	s15, [r3]
 8009b34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b38:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = p1[1] - p3[1];
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	3304      	adds	r3, #4
 8009b40:	ed93 7a00 	vldr	s14, [r3]
 8009b44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009b48:	3304      	adds	r3, #4
 8009b4a:	edd3 7a00 	vldr	s15, [r3]
 8009b4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b52:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
 8009b56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b5a:	3304      	adds	r3, #4
 8009b5c:	ed93 7a00 	vldr	s14, [r3]
 8009b60:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009b64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009b68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009b6c:	3304      	adds	r3, #4
 8009b6e:	edd3 7a00 	vldr	s15, [r3]
 8009b72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b76:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[1] = p1sp3_1 - p2[0] + p4[0];
 8009b7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b7e:	edd3 7a00 	vldr	s15, [r3]
 8009b82:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009b86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009b8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009b8e:	edd3 7a00 	vldr	s15, [r3]
 8009b92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b96:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        // col 3
        t3[0] = p1ap3_0 - p2[0] - p4[0];
 8009b9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b9e:	edd3 7a00 	vldr	s15, [r3]
 8009ba2:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8009ba6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009baa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009bae:	edd3 7a00 	vldr	s15, [r3]
 8009bb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009bb6:	edc7 7a07 	vstr	s15, [r7, #28]
        t3[1] = p1ap3_1 - p2[1] - p4[1];
 8009bba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009bbe:	3304      	adds	r3, #4
 8009bc0:	edd3 7a00 	vldr	s15, [r3]
 8009bc4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009bc8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009bcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009bd0:	3304      	adds	r3, #4
 8009bd2:	edd3 7a00 	vldr	s15, [r3]
 8009bd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009bda:	edc7 7a08 	vstr	s15, [r7, #32]
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
 8009bde:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009be2:	3304      	adds	r3, #4
 8009be4:	edd3 7a00 	vldr	s15, [r3]
 8009be8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8009bec:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009bf0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009bf4:	3304      	adds	r3, #4
 8009bf6:	edd3 7a00 	vldr	s15, [r3]
 8009bfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009bfe:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[1] = p1sp3_1 + p2[0] - p4[0];
 8009c02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009c06:	ed93 7a00 	vldr	s14, [r3]
 8009c0a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009c0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009c12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c16:	edd3 7a00 	vldr	s15, [r3]
 8009c1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c1e:	edc7 7a04 	vstr	s15, [r7, #16]
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
 8009c22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009c26:	ed93 7a00 	vldr	s14, [r3]
 8009c2a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8009c2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009c32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c36:	edd3 7a00 	vldr	s15, [r3]
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	1d1a      	adds	r2, r3, #4
 8009c3e:	603a      	str	r2, [r7, #0]
 8009c40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c44:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = p1ap3_1 + p2[1] + p4[1];
 8009c48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009c4c:	3304      	adds	r3, #4
 8009c4e:	ed93 7a00 	vldr	s14, [r3]
 8009c52:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8009c56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009c5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c5e:	3304      	adds	r3, #4
 8009c60:	edd3 7a00 	vldr	s15, [r3]
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	1d1a      	adds	r2, r3, #4
 8009c68:	603a      	str	r2, [r7, #0]
 8009c6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c6e:	edc3 7a00 	vstr	s15, [r3]

        // BOTTOM
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8009c72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009c76:	3b04      	subs	r3, #4
 8009c78:	ed93 7a00 	vldr	s14, [r3]
 8009c7c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009c80:	3b04      	subs	r3, #4
 8009c82:	edd3 7a00 	vldr	s15, [r3]
 8009c86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c8a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 8009c8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009c92:	3b04      	subs	r3, #4
 8009c94:	ed93 7a00 	vldr	s14, [r3]
 8009c98:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009c9c:	3b04      	subs	r3, #4
 8009c9e:	edd3 7a00 	vldr	s15, [r3]
 8009ca2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ca6:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        p1ap3_0 = pEnd1[0] + pEnd3[0];
 8009caa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009cae:	ed93 7a00 	vldr	s14, [r3]
 8009cb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009cb6:	edd3 7a00 	vldr	s15, [r3]
 8009cba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009cbe:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = pEnd1[0] - pEnd3[0];
 8009cc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009cc6:	ed93 7a00 	vldr	s14, [r3]
 8009cca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009cce:	edd3 7a00 	vldr	s15, [r3]
 8009cd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009cd6:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 8009cda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009cde:	ed93 7a00 	vldr	s14, [r3]
 8009ce2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009ce6:	edd3 7a00 	vldr	s15, [r3]
 8009cea:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009cee:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009cf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009cf6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8009cfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009cfe:	ed93 7a00 	vldr	s14, [r3]
 8009d02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009d06:	edd3 7a00 	vldr	s15, [r3]
 8009d0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009d0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009d12:	3b04      	subs	r3, #4
 8009d14:	edd3 7a00 	vldr	s15, [r3]
 8009d18:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009d1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d20:	3b04      	subs	r3, #4
 8009d22:	edd3 7a00 	vldr	s15, [r3]
 8009d26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d2a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8009d2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009d32:	3b04      	subs	r3, #4
 8009d34:	edd3 7a00 	vldr	s15, [r3]
 8009d38:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009d3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009d40:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d44:	3b04      	subs	r3, #4
 8009d46:	edd3 7a00 	vldr	s15, [r3]
 8009d4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d4e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
 8009d52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009d56:	edd3 7a00 	vldr	s15, [r3]
 8009d5a:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8009d5e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009d62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d66:	edd3 7a00 	vldr	s15, [r3]
 8009d6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d6e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
 8009d72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009d76:	ed93 7a00 	vldr	s14, [r3]
 8009d7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d7e:	edd3 7a00 	vldr	s15, [r3]
 8009d82:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009d86:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009d8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d8e:	edc7 7a05 	vstr	s15, [r7, #20]
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8009d92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d96:	3b04      	subs	r3, #4
 8009d98:	ed93 7a00 	vldr	s14, [r3]
 8009d9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009da0:	3b04      	subs	r3, #4
 8009da2:	edd3 7a00 	vldr	s15, [r3]
 8009da6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009daa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009dae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009db2:	edc7 7a06 	vstr	s15, [r7, #24]
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 8009db6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009dba:	ed93 7a00 	vldr	s14, [r3]
 8009dbe:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8009dc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009dc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009dca:	edd3 7a00 	vldr	s15, [r3]
 8009dce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009dd2:	1f1a      	subs	r2, r3, #4
 8009dd4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009dd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ddc:	edc3 7a00 	vstr	s15, [r3]
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8009de0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009de4:	3b04      	subs	r3, #4
 8009de6:	ed93 7a00 	vldr	s14, [r3]
 8009dea:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8009dee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009df2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009df6:	3b04      	subs	r3, #4
 8009df8:	edd3 7a00 	vldr	s15, [r3]
 8009dfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009e00:	1f1a      	subs	r2, r3, #4
 8009e02:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009e06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e0a:	edc3 7a00 	vstr	s15, [r3]

        // COL 2
        // read twiddle factors
        twR = *tw2++;
 8009e0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009e12:	1d1a      	adds	r2, r3, #4
 8009e14:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	653b      	str	r3, [r7, #80]	; 0x50
        twI = *tw2++;
 8009e1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009e20:	1d1a      	adds	r2, r3, #4
 8009e22:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	64fb      	str	r3, [r7, #76]	; 0x4c
        // multiply by twiddle factors
        //  let    Z1 = a + i(b),   Z2 = c + i(d)
        //   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d)
        
        // Top
        m0 = t2[0] * twR;
 8009e2a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009e2e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e36:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[1] * twI;
 8009e3a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009e3e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e46:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[1] * twR;
 8009e4a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009e4e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e56:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[0] * twI;
 8009e5a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009e5e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e66:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p2++ = m0 + m1;
 8009e6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009e6e:	1d1a      	adds	r2, r3, #4
 8009e70:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8009e74:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009e78:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009e7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e80:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 8009e84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009e88:	1d1a      	adds	r2, r3, #4
 8009e8a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8009e8e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009e92:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009e96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e9a:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 2
        // 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i
        // Bottom
        m0 = t2[3] * twI;
 8009e9e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8009ea2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eaa:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[2] * twR;
 8009eae:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009eb2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eba:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[2] * twI;
 8009ebe:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009ec2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eca:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[3] * twR;
 8009ece:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8009ed2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eda:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd2-- = m0 - m1;
 8009ede:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009ee2:	1f1a      	subs	r2, r3, #4
 8009ee4:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009ee8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009eec:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009ef0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ef4:	edc3 7a00 	vstr	s15, [r3]
        *pEnd2-- = m2 + m3;
 8009ef8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009efc:	1f1a      	subs	r2, r3, #4
 8009efe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009f02:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009f06:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009f0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f0e:	edc3 7a00 	vstr	s15, [r3]

        // COL 3
        twR = tw3[0];
 8009f12:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw3[1];
 8009f1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw3 += twMod3;
 8009f22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009f24:	009b      	lsls	r3, r3, #2
 8009f26:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009f2a:	4413      	add	r3, r2
 8009f2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        // Top
        m0 = t3[0] * twR;
 8009f30:	edd7 7a07 	vldr	s15, [r7, #28]
 8009f34:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009f38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f3c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[1] * twI;
 8009f40:	edd7 7a08 	vldr	s15, [r7, #32]
 8009f44:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009f48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f4c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[1] * twR;
 8009f50:	edd7 7a08 	vldr	s15, [r7, #32]
 8009f54:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009f58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f5c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[0] * twI;
 8009f60:	edd7 7a07 	vldr	s15, [r7, #28]
 8009f64:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009f68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f6c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p3++ = m0 + m1;
 8009f70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009f74:	1d1a      	adds	r2, r3, #4
 8009f76:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009f7a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009f7e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009f82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f86:	edc3 7a00 	vstr	s15, [r3]
        *p3++ = m2 - m3;
 8009f8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009f8e:	1d1a      	adds	r2, r3, #4
 8009f90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009f94:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009f98:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009f9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009fa0:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 3
        // 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i
        // Bottom
        m0 = -t3[3] * twR;
 8009fa4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009fa8:	eef1 7a67 	vneg.f32	s15, s15
 8009fac:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009fb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fb4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[2] * twI;
 8009fb8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009fbc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fc4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[2] * twR;
 8009fc8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009fcc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009fd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fd4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[3] * twI;
 8009fd8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009fdc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fe4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd3-- = m0 - m1;
 8009fe8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009fec:	1f1a      	subs	r2, r3, #4
 8009fee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009ff2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009ff6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009ffa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ffe:	edc3 7a00 	vstr	s15, [r3]
        *pEnd3-- = m3 - m2;
 800a002:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a006:	1f1a      	subs	r2, r3, #4
 800a008:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a00c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a010:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800a014:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a018:	edc3 7a00 	vstr	s15, [r3]
        
        // COL 4
        twR = tw4[0];
 800a01c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw4[1];
 800a024:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw4 += twMod4;
 800a02c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a02e:	009b      	lsls	r3, r3, #2
 800a030:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a034:	4413      	add	r3, r2
 800a036:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        // Top
        m0 = t4[0] * twR;
 800a03a:	edd7 7a03 	vldr	s15, [r7, #12]
 800a03e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800a042:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a046:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[1] * twI;
 800a04a:	edd7 7a04 	vldr	s15, [r7, #16]
 800a04e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a052:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a056:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[1] * twR;
 800a05a:	edd7 7a04 	vldr	s15, [r7, #16]
 800a05e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800a062:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a066:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[0] * twI;
 800a06a:	edd7 7a03 	vldr	s15, [r7, #12]
 800a06e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a072:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a076:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p4++ = m0 + m1;
 800a07a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a07e:	1d1a      	adds	r2, r3, #4
 800a080:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800a084:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800a088:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800a08c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a090:	edc3 7a00 	vstr	s15, [r3]
        *p4++ = m2 - m3;
 800a094:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a098:	1d1a      	adds	r2, r3, #4
 800a09a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800a09e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800a0a2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a0a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a0aa:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 4
        // 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i
        // Bottom
        m0 = t4[3] * twI;
 800a0ae:	edd7 7a06 	vldr	s15, [r7, #24]
 800a0b2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a0b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0ba:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[2] * twR;
 800a0be:	edd7 7a05 	vldr	s15, [r7, #20]
 800a0c2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800a0c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0ca:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[2] * twI;
 800a0ce:	edd7 7a05 	vldr	s15, [r7, #20]
 800a0d2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a0d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0da:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[3] * twR;
 800a0de:	edd7 7a06 	vldr	s15, [r7, #24]
 800a0e2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800a0e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0ea:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd4-- = m0 - m1;
 800a0ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a0f2:	1f1a      	subs	r2, r3, #4
 800a0f4:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800a0f8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800a0fc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800a100:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a104:	edc3 7a00 	vstr	s15, [r3]
        *pEnd4-- = m2 + m3;
 800a108:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a10c:	1f1a      	subs	r2, r3, #4
 800a10e:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800a112:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800a116:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a11a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a11e:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- ) 
 800a122:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a126:	3b01      	subs	r3, #1
 800a128:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a12c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a130:	2b00      	cmp	r3, #0
 800a132:	f47f ace0 	bne.w	8009af6 <arm_cfft_radix8by4_f32+0x2be>
    }

    //MIDDLE
    // Twiddle factors are 
    //  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i
    p1ap3_0 = p1[0] + p3[0];
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	ed93 7a00 	vldr	s14, [r3]
 800a13c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a140:	edd3 7a00 	vldr	s15, [r3]
 800a144:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a148:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	ed93 7a00 	vldr	s14, [r3]
 800a152:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a156:	edd3 7a00 	vldr	s15, [r3]
 800a15a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a15e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	3304      	adds	r3, #4
 800a166:	ed93 7a00 	vldr	s14, [r3]
 800a16a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a16e:	3304      	adds	r3, #4
 800a170:	edd3 7a00 	vldr	s15, [r3]
 800a174:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a178:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	3304      	adds	r3, #4
 800a180:	ed93 7a00 	vldr	s14, [r3]
 800a184:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a188:	3304      	adds	r3, #4
 800a18a:	edd3 7a00 	vldr	s15, [r3]
 800a18e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a192:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800a196:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a19a:	3304      	adds	r3, #4
 800a19c:	ed93 7a00 	vldr	s14, [r3]
 800a1a0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800a1a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a1a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a1ac:	3304      	adds	r3, #4
 800a1ae:	edd3 7a00 	vldr	s15, [r3]
 800a1b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a1b6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800a1ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a1be:	edd3 7a00 	vldr	s15, [r3]
 800a1c2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800a1c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a1ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a1ce:	edd3 7a00 	vldr	s15, [r3]
 800a1d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a1d6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 800a1da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a1de:	edd3 7a00 	vldr	s15, [r3]
 800a1e2:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800a1e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a1ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a1ee:	edd3 7a00 	vldr	s15, [r3]
 800a1f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a1f6:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 800a1fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a1fe:	3304      	adds	r3, #4
 800a200:	edd3 7a00 	vldr	s15, [r3]
 800a204:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800a208:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a20c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a210:	3304      	adds	r3, #4
 800a212:	edd3 7a00 	vldr	s15, [r3]
 800a216:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a21a:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 800a21e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a222:	3304      	adds	r3, #4
 800a224:	edd3 7a00 	vldr	s15, [r3]
 800a228:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800a22c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a230:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a234:	3304      	adds	r3, #4
 800a236:	edd3 7a00 	vldr	s15, [r3]
 800a23a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a23e:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 800a242:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a246:	ed93 7a00 	vldr	s14, [r3]
 800a24a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800a24e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a252:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a256:	edd3 7a00 	vldr	s15, [r3]
 800a25a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a25e:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800a262:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a266:	ed93 7a00 	vldr	s14, [r3]
 800a26a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800a26e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a272:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a276:	edd3 7a00 	vldr	s15, [r3]
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	1d1a      	adds	r2, r3, #4
 800a27e:	603a      	str	r2, [r7, #0]
 800a280:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a284:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800a288:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a28c:	3304      	adds	r3, #4
 800a28e:	ed93 7a00 	vldr	s14, [r3]
 800a292:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800a296:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a29a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a29e:	3304      	adds	r3, #4
 800a2a0:	edd3 7a00 	vldr	s15, [r3]
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	1d1a      	adds	r2, r3, #4
 800a2a8:	603a      	str	r2, [r7, #0]
 800a2aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a2ae:	edc3 7a00 	vstr	s15, [r3]

    // COL 2
    twR = tw2[0];
 800a2b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 800a2ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 800a2c2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a2c6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800a2ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2ce:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 800a2d2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a2d6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a2da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2de:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 800a2e2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a2e6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800a2ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2ee:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 800a2f2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a2f6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a2fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2fe:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 800a302:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a306:	1d1a      	adds	r2, r3, #4
 800a308:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800a30c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800a310:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800a314:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a318:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 800a31c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a320:	1d1a      	adds	r2, r3, #4
 800a322:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800a326:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800a32a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a32e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a332:	edc3 7a00 	vstr	s15, [r3]
    // COL 3
    twR = tw3[0];
 800a336:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 800a33e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a342:	685b      	ldr	r3, [r3, #4]
 800a344:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 800a346:	edd7 7a07 	vldr	s15, [r7, #28]
 800a34a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800a34e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a352:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 800a356:	edd7 7a08 	vldr	s15, [r7, #32]
 800a35a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a35e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a362:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 800a366:	edd7 7a08 	vldr	s15, [r7, #32]
 800a36a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800a36e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a372:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 800a376:	edd7 7a07 	vldr	s15, [r7, #28]
 800a37a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a37e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a382:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 800a386:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a38a:	1d1a      	adds	r2, r3, #4
 800a38c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a390:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800a394:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800a398:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a39c:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 800a3a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a3a4:	1d1a      	adds	r2, r3, #4
 800a3a6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a3aa:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800a3ae:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a3b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a3b6:	edc3 7a00 	vstr	s15, [r3]
    // COL 4
    twR = tw4[0];
 800a3ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 800a3c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 800a3ca:	edd7 7a03 	vldr	s15, [r7, #12]
 800a3ce:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800a3d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3d6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 800a3da:	edd7 7a04 	vldr	s15, [r7, #16]
 800a3de:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a3e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3e6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 800a3ea:	edd7 7a04 	vldr	s15, [r7, #16]
 800a3ee:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800a3f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3f6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 800a3fa:	edd7 7a03 	vldr	s15, [r7, #12]
 800a3fe:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a402:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a406:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 800a40a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a40e:	1d1a      	adds	r2, r3, #4
 800a410:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800a414:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800a418:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800a41c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a420:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 800a424:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a428:	1d1a      	adds	r2, r3, #4
 800a42a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800a42e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800a432:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a436:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a43a:	edc3 7a00 	vstr	s15, [r3]

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4u);
 800a43e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a442:	b299      	uxth	r1, r3
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	685a      	ldr	r2, [r3, #4]
 800a448:	2304      	movs	r3, #4
 800a44a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800a44c:	f000 f8da 	bl	800a604 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 4u);
 800a450:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a454:	b299      	uxth	r1, r3
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	685a      	ldr	r2, [r3, #4]
 800a45a:	2304      	movs	r3, #4
 800a45c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800a45e:	f000 f8d1 	bl	800a604 <arm_radix8_butterfly_f32>
    // third col
    arm_radix8_butterfly_f32( pCol3, L, (float32_t *) S->pTwiddle, 4u);
 800a462:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a466:	b299      	uxth	r1, r3
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	685a      	ldr	r2, [r3, #4]
 800a46c:	2304      	movs	r3, #4
 800a46e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800a470:	f000 f8c8 	bl	800a604 <arm_radix8_butterfly_f32>
    // fourth col
    arm_radix8_butterfly_f32( pCol4, L, (float32_t *) S->pTwiddle, 4u);
 800a474:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a478:	b299      	uxth	r1, r3
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	685a      	ldr	r2, [r3, #4]
 800a47e:	2304      	movs	r3, #4
 800a480:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800a482:	f000 f8bf 	bl	800a604 <arm_radix8_butterfly_f32>
}
 800a486:	bf00      	nop
 800a488:	37b0      	adds	r7, #176	; 0xb0
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}

0800a48e <arm_cfft_f32>:
void arm_cfft_f32( 
    const arm_cfft_instance_f32 * S, 
    float32_t * p1,
    uint8_t ifftFlag,
    uint8_t bitReverseFlag)
{
 800a48e:	b580      	push	{r7, lr}
 800a490:	b088      	sub	sp, #32
 800a492:	af00      	add	r7, sp, #0
 800a494:	60f8      	str	r0, [r7, #12]
 800a496:	60b9      	str	r1, [r7, #8]
 800a498:	4611      	mov	r1, r2
 800a49a:	461a      	mov	r2, r3
 800a49c:	460b      	mov	r3, r1
 800a49e:	71fb      	strb	r3, [r7, #7]
 800a4a0:	4613      	mov	r3, r2
 800a4a2:	71bb      	strb	r3, [r7, #6]
    uint32_t  L = S->fftLen, l;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	881b      	ldrh	r3, [r3, #0]
 800a4a8:	617b      	str	r3, [r7, #20]
    float32_t invL, * pSrc;

    if(ifftFlag == 1u)
 800a4aa:	79fb      	ldrb	r3, [r7, #7]
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d117      	bne.n	800a4e0 <arm_cfft_f32+0x52>
    {
        /*  Conjugate input data  */
        pSrc = p1 + 1;
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	3304      	adds	r3, #4
 800a4b4:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	61fb      	str	r3, [r7, #28]
 800a4ba:	e00d      	b.n	800a4d8 <arm_cfft_f32+0x4a>
        {
            *pSrc = -*pSrc;
 800a4bc:	69bb      	ldr	r3, [r7, #24]
 800a4be:	edd3 7a00 	vldr	s15, [r3]
 800a4c2:	eef1 7a67 	vneg.f32	s15, s15
 800a4c6:	69bb      	ldr	r3, [r7, #24]
 800a4c8:	edc3 7a00 	vstr	s15, [r3]
            pSrc += 2;
 800a4cc:	69bb      	ldr	r3, [r7, #24]
 800a4ce:	3308      	adds	r3, #8
 800a4d0:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 800a4d2:	69fb      	ldr	r3, [r7, #28]
 800a4d4:	3301      	adds	r3, #1
 800a4d6:	61fb      	str	r3, [r7, #28]
 800a4d8:	69fa      	ldr	r2, [r7, #28]
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	d3ed      	bcc.n	800a4bc <arm_cfft_f32+0x2e>
        }
    }

    switch (L) 
 800a4e0:	697b      	ldr	r3, [r7, #20]
 800a4e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4e6:	d040      	beq.n	800a56a <arm_cfft_f32+0xdc>
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4ee:	d845      	bhi.n	800a57c <arm_cfft_f32+0xee>
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4f6:	d033      	beq.n	800a560 <arm_cfft_f32+0xd2>
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4fe:	d83d      	bhi.n	800a57c <arm_cfft_f32+0xee>
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a506:	d026      	beq.n	800a556 <arm_cfft_f32+0xc8>
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a50e:	d835      	bhi.n	800a57c <arm_cfft_f32+0xee>
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a516:	d028      	beq.n	800a56a <arm_cfft_f32+0xdc>
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a51e:	d82d      	bhi.n	800a57c <arm_cfft_f32+0xee>
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a526:	d01b      	beq.n	800a560 <arm_cfft_f32+0xd2>
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a52e:	d825      	bhi.n	800a57c <arm_cfft_f32+0xee>
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	2b80      	cmp	r3, #128	; 0x80
 800a534:	d00f      	beq.n	800a556 <arm_cfft_f32+0xc8>
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	2b80      	cmp	r3, #128	; 0x80
 800a53a:	d81f      	bhi.n	800a57c <arm_cfft_f32+0xee>
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	2b40      	cmp	r3, #64	; 0x40
 800a540:	d013      	beq.n	800a56a <arm_cfft_f32+0xdc>
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	2b40      	cmp	r3, #64	; 0x40
 800a546:	d819      	bhi.n	800a57c <arm_cfft_f32+0xee>
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	2b10      	cmp	r3, #16
 800a54c:	d003      	beq.n	800a556 <arm_cfft_f32+0xc8>
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	2b20      	cmp	r3, #32
 800a552:	d005      	beq.n	800a560 <arm_cfft_f32+0xd2>
 800a554:	e012      	b.n	800a57c <arm_cfft_f32+0xee>
    {
    case 16: 
    case 128:
    case 1024:
        arm_cfft_radix8by2_f32  ( (arm_cfft_instance_f32 *) S, p1);
 800a556:	68b9      	ldr	r1, [r7, #8]
 800a558:	68f8      	ldr	r0, [r7, #12]
 800a55a:	f7fe ff79 	bl	8009450 <arm_cfft_radix8by2_f32>
        break;
 800a55e:	e00d      	b.n	800a57c <arm_cfft_f32+0xee>
    case 32:
    case 256:
    case 2048:
        arm_cfft_radix8by4_f32  ( (arm_cfft_instance_f32 *) S, p1);
 800a560:	68b9      	ldr	r1, [r7, #8]
 800a562:	68f8      	ldr	r0, [r7, #12]
 800a564:	f7ff f968 	bl	8009838 <arm_cfft_radix8by4_f32>
        break;
 800a568:	e008      	b.n	800a57c <arm_cfft_f32+0xee>
    case 64:
    case 512:
    case 4096:
        arm_radix8_butterfly_f32( p1, L, (float32_t *) S->pTwiddle, 1);
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	b299      	uxth	r1, r3
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	685a      	ldr	r2, [r3, #4]
 800a572:	2301      	movs	r3, #1
 800a574:	68b8      	ldr	r0, [r7, #8]
 800a576:	f000 f845 	bl	800a604 <arm_radix8_butterfly_f32>
        break;
 800a57a:	bf00      	nop
    }  

    if( bitReverseFlag )
 800a57c:	79bb      	ldrb	r3, [r7, #6]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d007      	beq.n	800a592 <arm_cfft_f32+0x104>
        arm_bitreversal_32((uint32_t*)p1,S->bitRevLength,S->pBitRevTable);
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	8999      	ldrh	r1, [r3, #12]
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	689b      	ldr	r3, [r3, #8]
 800a58a:	461a      	mov	r2, r3
 800a58c:	68b8      	ldr	r0, [r7, #8]
 800a58e:	f7fd fe57 	bl	8008240 <arm_bitreversal_32>

    if(ifftFlag == 1u)
 800a592:	79fb      	ldrb	r3, [r7, #7]
 800a594:	2b01      	cmp	r3, #1
 800a596:	d130      	bne.n	800a5fa <arm_cfft_f32+0x16c>
    {
        invL = 1.0f/(float32_t)L;
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	ee07 3a90 	vmov	s15, r3
 800a59e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a5a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5aa:	edc7 7a04 	vstr	s15, [r7, #16]
        /*  Conjugate and scale output data */
        pSrc = p1;
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	61fb      	str	r3, [r7, #28]
 800a5b6:	e01c      	b.n	800a5f2 <arm_cfft_f32+0x164>
        {
            *pSrc++ *=   invL ;
 800a5b8:	69bb      	ldr	r3, [r7, #24]
 800a5ba:	1d1a      	adds	r2, r3, #4
 800a5bc:	61ba      	str	r2, [r7, #24]
 800a5be:	ed93 7a00 	vldr	s14, [r3]
 800a5c2:	edd7 7a04 	vldr	s15, [r7, #16]
 800a5c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5ca:	edc3 7a00 	vstr	s15, [r3]
            *pSrc  = -(*pSrc) * invL;
 800a5ce:	69bb      	ldr	r3, [r7, #24]
 800a5d0:	edd3 7a00 	vldr	s15, [r3]
 800a5d4:	eeb1 7a67 	vneg.f32	s14, s15
 800a5d8:	edd7 7a04 	vldr	s15, [r7, #16]
 800a5dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5e0:	69bb      	ldr	r3, [r7, #24]
 800a5e2:	edc3 7a00 	vstr	s15, [r3]
            pSrc++;
 800a5e6:	69bb      	ldr	r3, [r7, #24]
 800a5e8:	3304      	adds	r3, #4
 800a5ea:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 800a5ec:	69fb      	ldr	r3, [r7, #28]
 800a5ee:	3301      	adds	r3, #1
 800a5f0:	61fb      	str	r3, [r7, #28]
 800a5f2:	69fa      	ldr	r2, [r7, #28]
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d3de      	bcc.n	800a5b8 <arm_cfft_f32+0x12a>
        }
    }
}
 800a5fa:	bf00      	nop
 800a5fc:	3720      	adds	r7, #32
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}
	...

0800a604 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
float32_t * pSrc,
uint16_t fftLen,
const float32_t * pCoef,
uint16_t twidCoefModifier)
{
 800a604:	b480      	push	{r7}
 800a606:	b0bd      	sub	sp, #244	; 0xf4
 800a608:	af00      	add	r7, sp, #0
 800a60a:	60f8      	str	r0, [r7, #12]
 800a60c:	607a      	str	r2, [r7, #4]
 800a60e:	461a      	mov	r2, r3
 800a610:	460b      	mov	r3, r1
 800a612:	817b      	strh	r3, [r7, #10]
 800a614:	4613      	mov	r3, r2
 800a616:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 800a618:	4b09      	ldr	r3, [pc, #36]	; (800a640 <arm_radix8_butterfly_f32+0x3c>)
 800a61a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 800a61e:	897b      	ldrh	r3, [r7, #10]
 800a620:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
   
   do 
   {
      n1 = n2;
 800a624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a628:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 800a62c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a630:	08db      	lsrs	r3, r3, #3
 800a632:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 800a636:	2300      	movs	r3, #0
 800a638:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a63c:	e002      	b.n	800a644 <arm_radix8_butterfly_f32+0x40>
 800a63e:	bf00      	nop
 800a640:	3f3504f3 	.word	0x3f3504f3
      
      do
      {
         i2 = i1 + n2;
 800a644:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800a648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a64c:	4413      	add	r3, r2
 800a64e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 800a652:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800a656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a65a:	4413      	add	r3, r2
 800a65c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 800a660:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a668:	4413      	add	r3, r2
 800a66a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 800a66e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800a672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a676:	4413      	add	r3, r2
 800a678:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 800a67c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a684:	4413      	add	r3, r2
 800a686:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 800a68a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a68e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a692:	4413      	add	r3, r2
 800a694:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 800a698:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a69c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6a0:	4413      	add	r3, r2
 800a6a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800a6a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a6aa:	00db      	lsls	r3, r3, #3
 800a6ac:	68fa      	ldr	r2, [r7, #12]
 800a6ae:	4413      	add	r3, r2
 800a6b0:	ed93 7a00 	vldr	s14, [r3]
 800a6b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a6b8:	00db      	lsls	r3, r3, #3
 800a6ba:	68fa      	ldr	r2, [r7, #12]
 800a6bc:	4413      	add	r3, r2
 800a6be:	edd3 7a00 	vldr	s15, [r3]
 800a6c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a6c6:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 800a6ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a6ce:	00db      	lsls	r3, r3, #3
 800a6d0:	68fa      	ldr	r2, [r7, #12]
 800a6d2:	4413      	add	r3, r2
 800a6d4:	ed93 7a00 	vldr	s14, [r3]
 800a6d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a6dc:	00db      	lsls	r3, r3, #3
 800a6de:	68fa      	ldr	r2, [r7, #12]
 800a6e0:	4413      	add	r3, r2
 800a6e2:	edd3 7a00 	vldr	s15, [r3]
 800a6e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6ea:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 800a6ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a6f2:	00db      	lsls	r3, r3, #3
 800a6f4:	68fa      	ldr	r2, [r7, #12]
 800a6f6:	4413      	add	r3, r2
 800a6f8:	ed93 7a00 	vldr	s14, [r3]
 800a6fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a700:	00db      	lsls	r3, r3, #3
 800a702:	68fa      	ldr	r2, [r7, #12]
 800a704:	4413      	add	r3, r2
 800a706:	edd3 7a00 	vldr	s15, [r3]
 800a70a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a70e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 800a712:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a716:	00db      	lsls	r3, r3, #3
 800a718:	68fa      	ldr	r2, [r7, #12]
 800a71a:	4413      	add	r3, r2
 800a71c:	ed93 7a00 	vldr	s14, [r3]
 800a720:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a724:	00db      	lsls	r3, r3, #3
 800a726:	68fa      	ldr	r2, [r7, #12]
 800a728:	4413      	add	r3, r2
 800a72a:	edd3 7a00 	vldr	s15, [r3]
 800a72e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a732:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800a736:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a73a:	00db      	lsls	r3, r3, #3
 800a73c:	68fa      	ldr	r2, [r7, #12]
 800a73e:	4413      	add	r3, r2
 800a740:	ed93 7a00 	vldr	s14, [r3]
 800a744:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a748:	00db      	lsls	r3, r3, #3
 800a74a:	68fa      	ldr	r2, [r7, #12]
 800a74c:	4413      	add	r3, r2
 800a74e:	edd3 7a00 	vldr	s15, [r3]
 800a752:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a756:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800a75a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a75e:	00db      	lsls	r3, r3, #3
 800a760:	68fa      	ldr	r2, [r7, #12]
 800a762:	4413      	add	r3, r2
 800a764:	ed93 7a00 	vldr	s14, [r3]
 800a768:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a76c:	00db      	lsls	r3, r3, #3
 800a76e:	68fa      	ldr	r2, [r7, #12]
 800a770:	4413      	add	r3, r2
 800a772:	edd3 7a00 	vldr	s15, [r3]
 800a776:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a77a:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800a77e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a782:	00db      	lsls	r3, r3, #3
 800a784:	68fa      	ldr	r2, [r7, #12]
 800a786:	4413      	add	r3, r2
 800a788:	ed93 7a00 	vldr	s14, [r3]
 800a78c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a790:	00db      	lsls	r3, r3, #3
 800a792:	68fa      	ldr	r2, [r7, #12]
 800a794:	4413      	add	r3, r2
 800a796:	edd3 7a00 	vldr	s15, [r3]
 800a79a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a79e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 800a7a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a7a6:	00db      	lsls	r3, r3, #3
 800a7a8:	68fa      	ldr	r2, [r7, #12]
 800a7aa:	4413      	add	r3, r2
 800a7ac:	ed93 7a00 	vldr	s14, [r3]
 800a7b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a7b4:	00db      	lsls	r3, r3, #3
 800a7b6:	68fa      	ldr	r2, [r7, #12]
 800a7b8:	4413      	add	r3, r2
 800a7ba:	edd3 7a00 	vldr	s15, [r3]
 800a7be:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a7c2:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 800a7c6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a7ca:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800a7ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a7d2:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 800a7d6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a7da:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800a7de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a7e2:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 800a7e6:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800a7ea:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800a7ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a7f2:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 800a7f6:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800a7fa:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800a7fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a802:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;   
 800a806:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a80a:	00db      	lsls	r3, r3, #3
 800a80c:	68fa      	ldr	r2, [r7, #12]
 800a80e:	4413      	add	r3, r2
 800a810:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a814:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800a818:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a81c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 800a820:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a824:	00db      	lsls	r3, r3, #3
 800a826:	68fa      	ldr	r2, [r7, #12]
 800a828:	4413      	add	r3, r2
 800a82a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a82e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800a832:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a836:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800a83a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a83e:	00db      	lsls	r3, r3, #3
 800a840:	3304      	adds	r3, #4
 800a842:	68fa      	ldr	r2, [r7, #12]
 800a844:	4413      	add	r3, r2
 800a846:	ed93 7a00 	vldr	s14, [r3]
 800a84a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a84e:	00db      	lsls	r3, r3, #3
 800a850:	3304      	adds	r3, #4
 800a852:	68fa      	ldr	r2, [r7, #12]
 800a854:	4413      	add	r3, r2
 800a856:	edd3 7a00 	vldr	s15, [r3]
 800a85a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a85e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 800a862:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a866:	00db      	lsls	r3, r3, #3
 800a868:	3304      	adds	r3, #4
 800a86a:	68fa      	ldr	r2, [r7, #12]
 800a86c:	4413      	add	r3, r2
 800a86e:	ed93 7a00 	vldr	s14, [r3]
 800a872:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a876:	00db      	lsls	r3, r3, #3
 800a878:	3304      	adds	r3, #4
 800a87a:	68fa      	ldr	r2, [r7, #12]
 800a87c:	4413      	add	r3, r2
 800a87e:	edd3 7a00 	vldr	s15, [r3]
 800a882:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a886:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800a88a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a88e:	00db      	lsls	r3, r3, #3
 800a890:	3304      	adds	r3, #4
 800a892:	68fa      	ldr	r2, [r7, #12]
 800a894:	4413      	add	r3, r2
 800a896:	ed93 7a00 	vldr	s14, [r3]
 800a89a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a89e:	00db      	lsls	r3, r3, #3
 800a8a0:	3304      	adds	r3, #4
 800a8a2:	68fa      	ldr	r2, [r7, #12]
 800a8a4:	4413      	add	r3, r2
 800a8a6:	edd3 7a00 	vldr	s15, [r3]
 800a8aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a8ae:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 800a8b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a8b6:	00db      	lsls	r3, r3, #3
 800a8b8:	3304      	adds	r3, #4
 800a8ba:	68fa      	ldr	r2, [r7, #12]
 800a8bc:	4413      	add	r3, r2
 800a8be:	ed93 7a00 	vldr	s14, [r3]
 800a8c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a8c6:	00db      	lsls	r3, r3, #3
 800a8c8:	3304      	adds	r3, #4
 800a8ca:	68fa      	ldr	r2, [r7, #12]
 800a8cc:	4413      	add	r3, r2
 800a8ce:	edd3 7a00 	vldr	s15, [r3]
 800a8d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a8d6:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800a8da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a8de:	00db      	lsls	r3, r3, #3
 800a8e0:	3304      	adds	r3, #4
 800a8e2:	68fa      	ldr	r2, [r7, #12]
 800a8e4:	4413      	add	r3, r2
 800a8e6:	ed93 7a00 	vldr	s14, [r3]
 800a8ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a8ee:	00db      	lsls	r3, r3, #3
 800a8f0:	3304      	adds	r3, #4
 800a8f2:	68fa      	ldr	r2, [r7, #12]
 800a8f4:	4413      	add	r3, r2
 800a8f6:	edd3 7a00 	vldr	s15, [r3]
 800a8fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a8fe:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800a902:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a906:	00db      	lsls	r3, r3, #3
 800a908:	3304      	adds	r3, #4
 800a90a:	68fa      	ldr	r2, [r7, #12]
 800a90c:	4413      	add	r3, r2
 800a90e:	ed93 7a00 	vldr	s14, [r3]
 800a912:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a916:	00db      	lsls	r3, r3, #3
 800a918:	3304      	adds	r3, #4
 800a91a:	68fa      	ldr	r2, [r7, #12]
 800a91c:	4413      	add	r3, r2
 800a91e:	edd3 7a00 	vldr	s15, [r3]
 800a922:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a926:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800a92a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a92e:	00db      	lsls	r3, r3, #3
 800a930:	3304      	adds	r3, #4
 800a932:	68fa      	ldr	r2, [r7, #12]
 800a934:	4413      	add	r3, r2
 800a936:	ed93 7a00 	vldr	s14, [r3]
 800a93a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a93e:	00db      	lsls	r3, r3, #3
 800a940:	3304      	adds	r3, #4
 800a942:	68fa      	ldr	r2, [r7, #12]
 800a944:	4413      	add	r3, r2
 800a946:	edd3 7a00 	vldr	s15, [r3]
 800a94a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a94e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800a952:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a956:	00db      	lsls	r3, r3, #3
 800a958:	3304      	adds	r3, #4
 800a95a:	68fa      	ldr	r2, [r7, #12]
 800a95c:	4413      	add	r3, r2
 800a95e:	ed93 7a00 	vldr	s14, [r3]
 800a962:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a966:	00db      	lsls	r3, r3, #3
 800a968:	3304      	adds	r3, #4
 800a96a:	68fa      	ldr	r2, [r7, #12]
 800a96c:	4413      	add	r3, r2
 800a96e:	edd3 7a00 	vldr	s15, [r3]
 800a972:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a976:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 800a97a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a97e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800a982:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a986:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 800a98a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a98e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800a992:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a996:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 800a99a:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800a99e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800a9a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a9a6:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 800a9aa:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800a9ae:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800a9b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a9b6:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 800a9ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a9be:	00db      	lsls	r3, r3, #3
 800a9c0:	3304      	adds	r3, #4
 800a9c2:	68fa      	ldr	r2, [r7, #12]
 800a9c4:	4413      	add	r3, r2
 800a9c6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a9ca:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800a9ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a9d2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 800a9d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a9da:	00db      	lsls	r3, r3, #3
 800a9dc:	3304      	adds	r3, #4
 800a9de:	68fa      	ldr	r2, [r7, #12]
 800a9e0:	4413      	add	r3, r2
 800a9e2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a9e6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800a9ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a9ee:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 800a9f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a9f6:	00db      	lsls	r3, r3, #3
 800a9f8:	68fa      	ldr	r2, [r7, #12]
 800a9fa:	4413      	add	r3, r2
 800a9fc:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800aa00:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800aa04:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa08:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 800aa0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800aa10:	00db      	lsls	r3, r3, #3
 800aa12:	68fa      	ldr	r2, [r7, #12]
 800aa14:	4413      	add	r3, r2
 800aa16:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800aa1a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800aa1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa22:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 800aa26:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800aa2a:	00db      	lsls	r3, r3, #3
 800aa2c:	3304      	adds	r3, #4
 800aa2e:	68fa      	ldr	r2, [r7, #12]
 800aa30:	4413      	add	r3, r2
 800aa32:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800aa36:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800aa3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa3e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 800aa42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800aa46:	00db      	lsls	r3, r3, #3
 800aa48:	3304      	adds	r3, #4
 800aa4a:	68fa      	ldr	r2, [r7, #12]
 800aa4c:	4413      	add	r3, r2
 800aa4e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800aa52:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800aa56:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa5a:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 800aa5e:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800aa62:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800aa66:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa6a:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800aa6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa72:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 800aa76:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800aa7a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800aa7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa82:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800aa86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa8a:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 800aa8e:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800aa92:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800aa96:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa9a:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800aa9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaa2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 800aaa6:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800aaaa:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800aaae:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aab2:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800aab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaba:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 800aabe:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800aac2:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800aac6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aaca:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 800aace:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800aad2:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800aad6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aada:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 800aade:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800aae2:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800aae6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aaea:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 800aaee:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800aaf2:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800aaf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aafa:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 800aafe:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800ab02:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800ab06:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab0a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 800ab0e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800ab12:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800ab16:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab1a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 800ab1e:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800ab22:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800ab26:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab2a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 800ab2e:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800ab32:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800ab36:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab3a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 800ab3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ab42:	00db      	lsls	r3, r3, #3
 800ab44:	68fa      	ldr	r2, [r7, #12]
 800ab46:	4413      	add	r3, r2
 800ab48:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800ab4c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800ab50:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab54:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 800ab58:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ab5c:	00db      	lsls	r3, r3, #3
 800ab5e:	68fa      	ldr	r2, [r7, #12]
 800ab60:	4413      	add	r3, r2
 800ab62:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800ab66:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800ab6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab6e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 800ab72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ab76:	00db      	lsls	r3, r3, #3
 800ab78:	68fa      	ldr	r2, [r7, #12]
 800ab7a:	4413      	add	r3, r2
 800ab7c:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800ab80:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800ab84:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab88:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 800ab8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ab90:	00db      	lsls	r3, r3, #3
 800ab92:	68fa      	ldr	r2, [r7, #12]
 800ab94:	4413      	add	r3, r2
 800ab96:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800ab9a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800ab9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aba2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 800aba6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800abaa:	00db      	lsls	r3, r3, #3
 800abac:	3304      	adds	r3, #4
 800abae:	68fa      	ldr	r2, [r7, #12]
 800abb0:	4413      	add	r3, r2
 800abb2:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800abb6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800abba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800abbe:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 800abc2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800abc6:	00db      	lsls	r3, r3, #3
 800abc8:	3304      	adds	r3, #4
 800abca:	68fa      	ldr	r2, [r7, #12]
 800abcc:	4413      	add	r3, r2
 800abce:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800abd2:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800abd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800abda:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 800abde:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800abe2:	00db      	lsls	r3, r3, #3
 800abe4:	3304      	adds	r3, #4
 800abe6:	68fa      	ldr	r2, [r7, #12]
 800abe8:	4413      	add	r3, r2
 800abea:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800abee:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800abf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800abf6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 800abfa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800abfe:	00db      	lsls	r3, r3, #3
 800ac00:	3304      	adds	r3, #4
 800ac02:	68fa      	ldr	r2, [r7, #12]
 800ac04:	4413      	add	r3, r2
 800ac06:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800ac0a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800ac0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac12:	edc3 7a00 	vstr	s15, [r3]
         
         i1 += n1;
 800ac16:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800ac1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ac1e:	4413      	add	r3, r2
 800ac20:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while(i1 < fftLen);
 800ac24:	897b      	ldrh	r3, [r7, #10]
 800ac26:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800ac2a:	429a      	cmp	r2, r3
 800ac2c:	f4ff ad0a 	bcc.w	800a644 <arm_radix8_butterfly_f32+0x40>
      
      if(n2 < 8)
 800ac30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac34:	2b07      	cmp	r3, #7
 800ac36:	f240 84e3 	bls.w	800b600 <arm_radix8_butterfly_f32+0xffc>
         break;
      
      ia1 = 0;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 800ac40:	2301      	movs	r3, #1
 800ac42:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      
      do
      {      
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 800ac46:	893b      	ldrh	r3, [r7, #8]
 800ac48:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800ac4c:	4413      	add	r3, r2
 800ac4e:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 800ac50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ac52:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 800ac56:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800ac5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ac5c:	4413      	add	r3, r2
 800ac5e:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 800ac60:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ac62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ac64:	4413      	add	r3, r2
 800ac66:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 800ac68:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ac6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ac6c:	4413      	add	r3, r2
 800ac6e:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 800ac70:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ac72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ac74:	4413      	add	r3, r2
 800ac76:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 800ac78:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ac7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ac7c:	4413      	add	r3, r2
 800ac7e:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 800ac80:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ac82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ac84:	4413      	add	r3, r2
 800ac86:	667b      	str	r3, [r7, #100]	; 0x64
                  
         co2 = pCoef[2 * ia1];
 800ac88:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ac8c:	00db      	lsls	r3, r3, #3
 800ac8e:	687a      	ldr	r2, [r7, #4]
 800ac90:	4413      	add	r3, r2
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 800ac96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac98:	00db      	lsls	r3, r3, #3
 800ac9a:	687a      	ldr	r2, [r7, #4]
 800ac9c:	4413      	add	r3, r2
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 800aca2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aca4:	00db      	lsls	r3, r3, #3
 800aca6:	687a      	ldr	r2, [r7, #4]
 800aca8:	4413      	add	r3, r2
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 800acae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800acb0:	00db      	lsls	r3, r3, #3
 800acb2:	687a      	ldr	r2, [r7, #4]
 800acb4:	4413      	add	r3, r2
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 800acba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acbc:	00db      	lsls	r3, r3, #3
 800acbe:	687a      	ldr	r2, [r7, #4]
 800acc0:	4413      	add	r3, r2
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 800acc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800acc8:	00db      	lsls	r3, r3, #3
 800acca:	687a      	ldr	r2, [r7, #4]
 800accc:	4413      	add	r3, r2
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 800acd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800acd4:	00db      	lsls	r3, r3, #3
 800acd6:	687a      	ldr	r2, [r7, #4]
 800acd8:	4413      	add	r3, r2
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 800acde:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ace2:	00db      	lsls	r3, r3, #3
 800ace4:	3304      	adds	r3, #4
 800ace6:	687a      	ldr	r2, [r7, #4]
 800ace8:	4413      	add	r3, r2
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 800acee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800acf0:	00db      	lsls	r3, r3, #3
 800acf2:	3304      	adds	r3, #4
 800acf4:	687a      	ldr	r2, [r7, #4]
 800acf6:	4413      	add	r3, r2
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 800acfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800acfe:	00db      	lsls	r3, r3, #3
 800ad00:	3304      	adds	r3, #4
 800ad02:	687a      	ldr	r2, [r7, #4]
 800ad04:	4413      	add	r3, r2
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 800ad0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ad0c:	00db      	lsls	r3, r3, #3
 800ad0e:	3304      	adds	r3, #4
 800ad10:	687a      	ldr	r2, [r7, #4]
 800ad12:	4413      	add	r3, r2
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 800ad18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad1a:	00db      	lsls	r3, r3, #3
 800ad1c:	3304      	adds	r3, #4
 800ad1e:	687a      	ldr	r2, [r7, #4]
 800ad20:	4413      	add	r3, r2
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 800ad26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ad28:	00db      	lsls	r3, r3, #3
 800ad2a:	3304      	adds	r3, #4
 800ad2c:	687a      	ldr	r2, [r7, #4]
 800ad2e:	4413      	add	r3, r2
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];         
 800ad34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad36:	00db      	lsls	r3, r3, #3
 800ad38:	3304      	adds	r3, #4
 800ad3a:	687a      	ldr	r2, [r7, #4]
 800ad3c:	4413      	add	r3, r2
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	62fb      	str	r3, [r7, #44]	; 0x2c
         
         i1 = j;
 800ad42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         
         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 800ad4a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800ad4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad52:	4413      	add	r3, r2
 800ad54:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 800ad58:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800ad5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad60:	4413      	add	r3, r2
 800ad62:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 800ad66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ad6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad6e:	4413      	add	r3, r2
 800ad70:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 800ad74:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800ad78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad7c:	4413      	add	r3, r2
 800ad7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 800ad82:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ad86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad8a:	4413      	add	r3, r2
 800ad8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 800ad90:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ad94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad98:	4413      	add	r3, r2
 800ad9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 800ad9e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ada2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ada6:	4413      	add	r3, r2
 800ada8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800adac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800adb0:	00db      	lsls	r3, r3, #3
 800adb2:	68fa      	ldr	r2, [r7, #12]
 800adb4:	4413      	add	r3, r2
 800adb6:	ed93 7a00 	vldr	s14, [r3]
 800adba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800adbe:	00db      	lsls	r3, r3, #3
 800adc0:	68fa      	ldr	r2, [r7, #12]
 800adc2:	4413      	add	r3, r2
 800adc4:	edd3 7a00 	vldr	s15, [r3]
 800adc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800adcc:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 800add0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800add4:	00db      	lsls	r3, r3, #3
 800add6:	68fa      	ldr	r2, [r7, #12]
 800add8:	4413      	add	r3, r2
 800adda:	ed93 7a00 	vldr	s14, [r3]
 800adde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ade2:	00db      	lsls	r3, r3, #3
 800ade4:	68fa      	ldr	r2, [r7, #12]
 800ade6:	4413      	add	r3, r2
 800ade8:	edd3 7a00 	vldr	s15, [r3]
 800adec:	ee77 7a67 	vsub.f32	s15, s14, s15
 800adf0:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 800adf4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800adf8:	00db      	lsls	r3, r3, #3
 800adfa:	68fa      	ldr	r2, [r7, #12]
 800adfc:	4413      	add	r3, r2
 800adfe:	ed93 7a00 	vldr	s14, [r3]
 800ae02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ae06:	00db      	lsls	r3, r3, #3
 800ae08:	68fa      	ldr	r2, [r7, #12]
 800ae0a:	4413      	add	r3, r2
 800ae0c:	edd3 7a00 	vldr	s15, [r3]
 800ae10:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae14:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 800ae18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ae1c:	00db      	lsls	r3, r3, #3
 800ae1e:	68fa      	ldr	r2, [r7, #12]
 800ae20:	4413      	add	r3, r2
 800ae22:	ed93 7a00 	vldr	s14, [r3]
 800ae26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ae2a:	00db      	lsls	r3, r3, #3
 800ae2c:	68fa      	ldr	r2, [r7, #12]
 800ae2e:	4413      	add	r3, r2
 800ae30:	edd3 7a00 	vldr	s15, [r3]
 800ae34:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae38:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800ae3c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ae40:	00db      	lsls	r3, r3, #3
 800ae42:	68fa      	ldr	r2, [r7, #12]
 800ae44:	4413      	add	r3, r2
 800ae46:	ed93 7a00 	vldr	s14, [r3]
 800ae4a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ae4e:	00db      	lsls	r3, r3, #3
 800ae50:	68fa      	ldr	r2, [r7, #12]
 800ae52:	4413      	add	r3, r2
 800ae54:	edd3 7a00 	vldr	s15, [r3]
 800ae58:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae5c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800ae60:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ae64:	00db      	lsls	r3, r3, #3
 800ae66:	68fa      	ldr	r2, [r7, #12]
 800ae68:	4413      	add	r3, r2
 800ae6a:	ed93 7a00 	vldr	s14, [r3]
 800ae6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ae72:	00db      	lsls	r3, r3, #3
 800ae74:	68fa      	ldr	r2, [r7, #12]
 800ae76:	4413      	add	r3, r2
 800ae78:	edd3 7a00 	vldr	s15, [r3]
 800ae7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae80:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800ae84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ae88:	00db      	lsls	r3, r3, #3
 800ae8a:	68fa      	ldr	r2, [r7, #12]
 800ae8c:	4413      	add	r3, r2
 800ae8e:	ed93 7a00 	vldr	s14, [r3]
 800ae92:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ae96:	00db      	lsls	r3, r3, #3
 800ae98:	68fa      	ldr	r2, [r7, #12]
 800ae9a:	4413      	add	r3, r2
 800ae9c:	edd3 7a00 	vldr	s15, [r3]
 800aea0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aea4:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 800aea8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800aeac:	00db      	lsls	r3, r3, #3
 800aeae:	68fa      	ldr	r2, [r7, #12]
 800aeb0:	4413      	add	r3, r2
 800aeb2:	ed93 7a00 	vldr	s14, [r3]
 800aeb6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800aeba:	00db      	lsls	r3, r3, #3
 800aebc:	68fa      	ldr	r2, [r7, #12]
 800aebe:	4413      	add	r3, r2
 800aec0:	edd3 7a00 	vldr	s15, [r3]
 800aec4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aec8:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 800aecc:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800aed0:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800aed4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aed8:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 800aedc:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800aee0:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800aee4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aee8:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 800aeec:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800aef0:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800aef4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aef8:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 800aefc:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800af00:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800af04:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af08:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 800af0c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800af10:	00db      	lsls	r3, r3, #3
 800af12:	68fa      	ldr	r2, [r7, #12]
 800af14:	4413      	add	r3, r2
 800af16:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800af1a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800af1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af22:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 800af26:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800af2a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800af2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af32:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800af36:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800af3a:	00db      	lsls	r3, r3, #3
 800af3c:	3304      	adds	r3, #4
 800af3e:	68fa      	ldr	r2, [r7, #12]
 800af40:	4413      	add	r3, r2
 800af42:	ed93 7a00 	vldr	s14, [r3]
 800af46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800af4a:	00db      	lsls	r3, r3, #3
 800af4c:	3304      	adds	r3, #4
 800af4e:	68fa      	ldr	r2, [r7, #12]
 800af50:	4413      	add	r3, r2
 800af52:	edd3 7a00 	vldr	s15, [r3]
 800af56:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af5a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 800af5e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800af62:	00db      	lsls	r3, r3, #3
 800af64:	3304      	adds	r3, #4
 800af66:	68fa      	ldr	r2, [r7, #12]
 800af68:	4413      	add	r3, r2
 800af6a:	ed93 7a00 	vldr	s14, [r3]
 800af6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800af72:	00db      	lsls	r3, r3, #3
 800af74:	3304      	adds	r3, #4
 800af76:	68fa      	ldr	r2, [r7, #12]
 800af78:	4413      	add	r3, r2
 800af7a:	edd3 7a00 	vldr	s15, [r3]
 800af7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af82:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800af86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800af8a:	00db      	lsls	r3, r3, #3
 800af8c:	3304      	adds	r3, #4
 800af8e:	68fa      	ldr	r2, [r7, #12]
 800af90:	4413      	add	r3, r2
 800af92:	ed93 7a00 	vldr	s14, [r3]
 800af96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800af9a:	00db      	lsls	r3, r3, #3
 800af9c:	3304      	adds	r3, #4
 800af9e:	68fa      	ldr	r2, [r7, #12]
 800afa0:	4413      	add	r3, r2
 800afa2:	edd3 7a00 	vldr	s15, [r3]
 800afa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800afaa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 800afae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800afb2:	00db      	lsls	r3, r3, #3
 800afb4:	3304      	adds	r3, #4
 800afb6:	68fa      	ldr	r2, [r7, #12]
 800afb8:	4413      	add	r3, r2
 800afba:	ed93 7a00 	vldr	s14, [r3]
 800afbe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800afc2:	00db      	lsls	r3, r3, #3
 800afc4:	3304      	adds	r3, #4
 800afc6:	68fa      	ldr	r2, [r7, #12]
 800afc8:	4413      	add	r3, r2
 800afca:	edd3 7a00 	vldr	s15, [r3]
 800afce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800afd2:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800afd6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800afda:	00db      	lsls	r3, r3, #3
 800afdc:	3304      	adds	r3, #4
 800afde:	68fa      	ldr	r2, [r7, #12]
 800afe0:	4413      	add	r3, r2
 800afe2:	ed93 7a00 	vldr	s14, [r3]
 800afe6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800afea:	00db      	lsls	r3, r3, #3
 800afec:	3304      	adds	r3, #4
 800afee:	68fa      	ldr	r2, [r7, #12]
 800aff0:	4413      	add	r3, r2
 800aff2:	edd3 7a00 	vldr	s15, [r3]
 800aff6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800affa:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800affe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b002:	00db      	lsls	r3, r3, #3
 800b004:	3304      	adds	r3, #4
 800b006:	68fa      	ldr	r2, [r7, #12]
 800b008:	4413      	add	r3, r2
 800b00a:	ed93 7a00 	vldr	s14, [r3]
 800b00e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b012:	00db      	lsls	r3, r3, #3
 800b014:	3304      	adds	r3, #4
 800b016:	68fa      	ldr	r2, [r7, #12]
 800b018:	4413      	add	r3, r2
 800b01a:	edd3 7a00 	vldr	s15, [r3]
 800b01e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b022:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800b026:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b02a:	00db      	lsls	r3, r3, #3
 800b02c:	3304      	adds	r3, #4
 800b02e:	68fa      	ldr	r2, [r7, #12]
 800b030:	4413      	add	r3, r2
 800b032:	ed93 7a00 	vldr	s14, [r3]
 800b036:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b03a:	00db      	lsls	r3, r3, #3
 800b03c:	3304      	adds	r3, #4
 800b03e:	68fa      	ldr	r2, [r7, #12]
 800b040:	4413      	add	r3, r2
 800b042:	edd3 7a00 	vldr	s15, [r3]
 800b046:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b04a:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800b04e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b052:	00db      	lsls	r3, r3, #3
 800b054:	3304      	adds	r3, #4
 800b056:	68fa      	ldr	r2, [r7, #12]
 800b058:	4413      	add	r3, r2
 800b05a:	ed93 7a00 	vldr	s14, [r3]
 800b05e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b062:	00db      	lsls	r3, r3, #3
 800b064:	3304      	adds	r3, #4
 800b066:	68fa      	ldr	r2, [r7, #12]
 800b068:	4413      	add	r3, r2
 800b06a:	edd3 7a00 	vldr	s15, [r3]
 800b06e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b072:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 800b076:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b07a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800b07e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b082:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 800b086:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b08a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800b08e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b092:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 800b096:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b09a:	edd7 7a08 	vldr	s15, [r7, #32]
 800b09e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b0a2:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 800b0a6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b0aa:	edd7 7a08 	vldr	s15, [r7, #32]
 800b0ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b0b2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 800b0b6:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800b0ba:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800b0be:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b0c2:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 800b0c6:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800b0ca:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800b0ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b0d2:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 800b0d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b0da:	00db      	lsls	r3, r3, #3
 800b0dc:	3304      	adds	r3, #4
 800b0de:	68fa      	ldr	r2, [r7, #12]
 800b0e0:	4413      	add	r3, r2
 800b0e2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b0e6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b0ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b0ee:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 800b0f2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b0f6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b0fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b0fe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 800b102:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800b106:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800b10a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b10e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 800b112:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800b116:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800b11a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b11e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 800b122:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800b126:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800b12a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b12e:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 800b132:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800b136:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b13a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b13e:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 800b142:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800b146:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b14a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b14e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 800b152:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800b156:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800b15a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b15e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 800b162:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b166:	00db      	lsls	r3, r3, #3
 800b168:	68fa      	ldr	r2, [r7, #12]
 800b16a:	4413      	add	r3, r2
 800b16c:	ed97 7a07 	vldr	s14, [r7, #28]
 800b170:	edd7 7a06 	vldr	s15, [r7, #24]
 800b174:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b178:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 800b17c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b180:	00db      	lsls	r3, r3, #3
 800b182:	3304      	adds	r3, #4
 800b184:	68fa      	ldr	r2, [r7, #12]
 800b186:	4413      	add	r3, r2
 800b188:	ed97 7a05 	vldr	s14, [r7, #20]
 800b18c:	edd7 7a04 	vldr	s15, [r7, #16]
 800b190:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b194:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 800b198:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800b19c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800b1a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1a4:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 800b1a8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800b1ac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b1b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1b4:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 800b1b8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800b1bc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b1c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1c4:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 800b1c8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800b1cc:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800b1d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1d4:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 800b1d8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b1dc:	00db      	lsls	r3, r3, #3
 800b1de:	68fa      	ldr	r2, [r7, #12]
 800b1e0:	4413      	add	r3, r2
 800b1e2:	ed97 7a07 	vldr	s14, [r7, #28]
 800b1e6:	edd7 7a06 	vldr	s15, [r7, #24]
 800b1ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b1ee:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 800b1f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b1f6:	00db      	lsls	r3, r3, #3
 800b1f8:	3304      	adds	r3, #4
 800b1fa:	68fa      	ldr	r2, [r7, #12]
 800b1fc:	4413      	add	r3, r2
 800b1fe:	ed97 7a05 	vldr	s14, [r7, #20]
 800b202:	edd7 7a04 	vldr	s15, [r7, #16]
 800b206:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b20a:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 800b20e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800b212:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800b216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b21a:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 800b21e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800b222:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800b226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b22a:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 800b22e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800b232:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800b236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b23a:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 800b23e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800b242:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800b246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b24a:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 800b24e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b252:	00db      	lsls	r3, r3, #3
 800b254:	68fa      	ldr	r2, [r7, #12]
 800b256:	4413      	add	r3, r2
 800b258:	ed97 7a07 	vldr	s14, [r7, #28]
 800b25c:	edd7 7a06 	vldr	s15, [r7, #24]
 800b260:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b264:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 800b268:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b26c:	00db      	lsls	r3, r3, #3
 800b26e:	3304      	adds	r3, #4
 800b270:	68fa      	ldr	r2, [r7, #12]
 800b272:	4413      	add	r3, r2
 800b274:	ed97 7a05 	vldr	s14, [r7, #20]
 800b278:	edd7 7a04 	vldr	s15, [r7, #16]
 800b27c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b280:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 800b284:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800b288:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800b28c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b290:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800b294:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b298:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 800b29c:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800b2a0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800b2a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b2a8:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800b2ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2b0:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 800b2b4:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800b2b8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800b2bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b2c0:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800b2c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2c8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 800b2cc:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800b2d0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800b2d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b2d8:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800b2dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2e0:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 800b2e4:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800b2e8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800b2ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b2f0:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 800b2f4:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800b2f8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800b2fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b300:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 800b304:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800b308:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800b30c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b310:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 800b314:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800b318:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800b31c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b320:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 800b324:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800b328:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b32c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b330:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 800b334:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800b338:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b33c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b340:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 800b344:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800b348:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800b34c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b350:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 800b354:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800b358:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800b35c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b360:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 800b364:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800b368:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800b36c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b370:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 800b374:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800b378:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800b37c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b380:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 800b384:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800b388:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800b38c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b390:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 800b394:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800b398:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800b39c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b3a0:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 800b3a4:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800b3a8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800b3ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b3b0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 800b3b4:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800b3b8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800b3bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b3c0:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 800b3c4:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800b3c8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800b3cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b3d0:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 800b3d4:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800b3d8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800b3dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b3e0:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 800b3e4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800b3e8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800b3ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3f0:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 800b3f4:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800b3f8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b3fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b400:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 800b404:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800b408:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b40c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b410:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 800b414:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800b418:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800b41c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b420:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 800b424:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b428:	00db      	lsls	r3, r3, #3
 800b42a:	68fa      	ldr	r2, [r7, #12]
 800b42c:	4413      	add	r3, r2
 800b42e:	ed97 7a07 	vldr	s14, [r7, #28]
 800b432:	edd7 7a06 	vldr	s15, [r7, #24]
 800b436:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b43a:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 800b43e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b442:	00db      	lsls	r3, r3, #3
 800b444:	3304      	adds	r3, #4
 800b446:	68fa      	ldr	r2, [r7, #12]
 800b448:	4413      	add	r3, r2
 800b44a:	ed97 7a05 	vldr	s14, [r7, #20]
 800b44e:	edd7 7a04 	vldr	s15, [r7, #16]
 800b452:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b456:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 800b45a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800b45e:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800b462:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b466:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 800b46a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b46e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800b472:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b476:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 800b47a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800b47e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800b482:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b486:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 800b48a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b48e:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800b492:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b496:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 800b49a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b49e:	00db      	lsls	r3, r3, #3
 800b4a0:	68fa      	ldr	r2, [r7, #12]
 800b4a2:	4413      	add	r3, r2
 800b4a4:	ed97 7a07 	vldr	s14, [r7, #28]
 800b4a8:	edd7 7a06 	vldr	s15, [r7, #24]
 800b4ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b4b0:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 800b4b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b4b8:	00db      	lsls	r3, r3, #3
 800b4ba:	3304      	adds	r3, #4
 800b4bc:	68fa      	ldr	r2, [r7, #12]
 800b4be:	4413      	add	r3, r2
 800b4c0:	ed97 7a05 	vldr	s14, [r7, #20]
 800b4c4:	edd7 7a04 	vldr	s15, [r7, #16]
 800b4c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b4cc:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 800b4d0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800b4d4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800b4d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4dc:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 800b4e0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b4e4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800b4e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4ec:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 800b4f0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800b4f4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800b4f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4fc:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 800b500:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b504:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800b508:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b50c:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 800b510:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b514:	00db      	lsls	r3, r3, #3
 800b516:	68fa      	ldr	r2, [r7, #12]
 800b518:	4413      	add	r3, r2
 800b51a:	ed97 7a07 	vldr	s14, [r7, #28]
 800b51e:	edd7 7a06 	vldr	s15, [r7, #24]
 800b522:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b526:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 800b52a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b52e:	00db      	lsls	r3, r3, #3
 800b530:	3304      	adds	r3, #4
 800b532:	68fa      	ldr	r2, [r7, #12]
 800b534:	4413      	add	r3, r2
 800b536:	ed97 7a05 	vldr	s14, [r7, #20]
 800b53a:	edd7 7a04 	vldr	s15, [r7, #16]
 800b53e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b542:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 800b546:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800b54a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800b54e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b552:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 800b556:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800b55a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800b55e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b562:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 800b566:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800b56a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800b56e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b572:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 800b576:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800b57a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800b57e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b582:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 800b586:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b58a:	00db      	lsls	r3, r3, #3
 800b58c:	68fa      	ldr	r2, [r7, #12]
 800b58e:	4413      	add	r3, r2
 800b590:	ed97 7a07 	vldr	s14, [r7, #28]
 800b594:	edd7 7a06 	vldr	s15, [r7, #24]
 800b598:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b59c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 800b5a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b5a4:	00db      	lsls	r3, r3, #3
 800b5a6:	3304      	adds	r3, #4
 800b5a8:	68fa      	ldr	r2, [r7, #12]
 800b5aa:	4413      	add	r3, r2
 800b5ac:	ed97 7a05 	vldr	s14, [r7, #20]
 800b5b0:	edd7 7a04 	vldr	s15, [r7, #16]
 800b5b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b5b8:	edc3 7a00 	vstr	s15, [r3]
            
            i1 += n1;
 800b5bc:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800b5c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b5c4:	4413      	add	r3, r2
 800b5c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while(i1 < fftLen);
 800b5ca:	897b      	ldrh	r3, [r7, #10]
 800b5cc:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	f4ff abba 	bcc.w	800ad4a <arm_radix8_butterfly_f32+0x746>
         
         j++;
 800b5d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5da:	3301      	adds	r3, #1
 800b5dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while(j < n2);
 800b5e0:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b5e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5e8:	429a      	cmp	r2, r3
 800b5ea:	f4ff ab2c 	bcc.w	800ac46 <arm_radix8_butterfly_f32+0x642>
      
      twidCoefModifier <<= 3;
 800b5ee:	893b      	ldrh	r3, [r7, #8]
 800b5f0:	00db      	lsls	r3, r3, #3
 800b5f2:	813b      	strh	r3, [r7, #8]
   } while(n2 > 7);   
 800b5f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5f8:	2b07      	cmp	r3, #7
 800b5fa:	f63f a813 	bhi.w	800a624 <arm_radix8_butterfly_f32+0x20>
}
 800b5fe:	e000      	b.n	800b602 <arm_radix8_butterfly_f32+0xffe>
         break;
 800b600:	bf00      	nop
}
 800b602:	bf00      	nop
 800b604:	37f4      	adds	r7, #244	; 0xf4
 800b606:	46bd      	mov	sp, r7
 800b608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60c:	4770      	bx	lr
 800b60e:	bf00      	nop

0800b610 <setDIFFChannel>:
*	parameter:
*	The return value: val
*********************************************************************************************************
*/
void setDIFFChannel(uint8_t positiveCh, uint8_t NegativeCh)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b082      	sub	sp, #8
 800b614:	af00      	add	r7, sp, #0
 800b616:	4603      	mov	r3, r0
 800b618:	460a      	mov	r2, r1
 800b61a:	71fb      	strb	r3, [r7, #7]
 800b61c:	4613      	mov	r3, r2
 800b61e:	71bb      	strb	r3, [r7, #6]
	writeByteToReg(REG_MUX, positiveCh <<4 | NegativeCh); //xxxx1000 - AINp = positiveCh, AINn = NegativeCh
 800b620:	79fb      	ldrb	r3, [r7, #7]
 800b622:	011b      	lsls	r3, r3, #4
 800b624:	b25a      	sxtb	r2, r3
 800b626:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b62a:	4313      	orrs	r3, r2
 800b62c:	b25b      	sxtb	r3, r3
 800b62e:	b2db      	uxtb	r3, r3
 800b630:	4619      	mov	r1, r3
 800b632:	2001      	movs	r0, #1
 800b634:	f000 f832 	bl	800b69c <writeByteToReg>
}
 800b638:	bf00      	nop
 800b63a:	3708      	adds	r7, #8
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}

0800b640 <writeCMD>:
*	The return value: None
*********************************************************************************************************
*/

void writeCMD(uint8_t command)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b084      	sub	sp, #16
 800b644:	af00      	add	r7, sp, #0
 800b646:	4603      	mov	r3, r0
 800b648:	71fb      	strb	r3, [r7, #7]
	uint8_t Txbuffer[1];
	Txbuffer[0] = command;
 800b64a:	79fb      	ldrb	r3, [r7, #7]
 800b64c:	733b      	strb	r3, [r7, #12]
	CS_0();
 800b64e:	2200      	movs	r2, #0
 800b650:	2110      	movs	r1, #16
 800b652:	4809      	ldr	r0, [pc, #36]	; (800b678 <writeCMD+0x38>)
 800b654:	f004 fe1c 	bl	8010290 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, Txbuffer ,1,50);
 800b658:	f107 010c 	add.w	r1, r7, #12
 800b65c:	2332      	movs	r3, #50	; 0x32
 800b65e:	2201      	movs	r2, #1
 800b660:	4806      	ldr	r0, [pc, #24]	; (800b67c <writeCMD+0x3c>)
 800b662:	f006 fd24 	bl	80120ae <HAL_SPI_Transmit>
	CS_1();
 800b666:	2201      	movs	r2, #1
 800b668:	2110      	movs	r1, #16
 800b66a:	4803      	ldr	r0, [pc, #12]	; (800b678 <writeCMD+0x38>)
 800b66c:	f004 fe10 	bl	8010290 <HAL_GPIO_WritePin>
}
 800b670:	bf00      	nop
 800b672:	3710      	adds	r7, #16
 800b674:	46bd      	mov	sp, r7
 800b676:	bd80      	pop	{r7, pc}
 800b678:	40020000 	.word	0x40020000
 800b67c:	20068448 	.word	0x20068448

0800b680 <setDataRate>:
*	parameter: pga
*	The return value: None
*********************************************************************************************************
*/
void setDataRate(uint8_t drate)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b082      	sub	sp, #8
 800b684:	af00      	add	r7, sp, #0
 800b686:	4603      	mov	r3, r0
 800b688:	71fb      	strb	r3, [r7, #7]
	writeByteToReg(REG_DRATE,drate);
 800b68a:	79fb      	ldrb	r3, [r7, #7]
 800b68c:	4619      	mov	r1, r3
 800b68e:	2003      	movs	r0, #3
 800b690:	f000 f804 	bl	800b69c <writeByteToReg>
}
 800b694:	bf00      	nop
 800b696:	3708      	adds	r7, #8
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}

0800b69c <writeByteToReg>:
*	parameter: register ID
*	The return value:
*********************************************************************************************************
*/
void writeByteToReg(uint8_t registerID, uint8_t value)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b084      	sub	sp, #16
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	460a      	mov	r2, r1
 800b6a6:	71fb      	strb	r3, [r7, #7]
 800b6a8:	4613      	mov	r3, r2
 800b6aa:	71bb      	strb	r3, [r7, #6]
	uint8_t Txbuffer[3];
	Txbuffer[0] = CMD_WREG | registerID;
 800b6ac:	79fb      	ldrb	r3, [r7, #7]
 800b6ae:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800b6b2:	b2db      	uxtb	r3, r3
 800b6b4:	733b      	strb	r3, [r7, #12]
	Txbuffer[1] = 0x00;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	737b      	strb	r3, [r7, #13]
	Txbuffer[2] = value;
 800b6ba:	79bb      	ldrb	r3, [r7, #6]
 800b6bc:	73bb      	strb	r3, [r7, #14]
	CS_0();
 800b6be:	2200      	movs	r2, #0
 800b6c0:	2110      	movs	r1, #16
 800b6c2:	4809      	ldr	r0, [pc, #36]	; (800b6e8 <writeByteToReg+0x4c>)
 800b6c4:	f004 fde4 	bl	8010290 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, Txbuffer ,3,100);
 800b6c8:	f107 010c 	add.w	r1, r7, #12
 800b6cc:	2364      	movs	r3, #100	; 0x64
 800b6ce:	2203      	movs	r2, #3
 800b6d0:	4806      	ldr	r0, [pc, #24]	; (800b6ec <writeByteToReg+0x50>)
 800b6d2:	f006 fcec 	bl	80120ae <HAL_SPI_Transmit>
	/*
	send8bit(CMD_WREG | registerID);		//1syt byte: address of the first register to write
	send8bit(0x00);							//2nd byte: number of byte to write = 1.
	send8bit(value);						//3rd byte: value to write to register
	*/
	CS_1();
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	2110      	movs	r1, #16
 800b6da:	4803      	ldr	r0, [pc, #12]	; (800b6e8 <writeByteToReg+0x4c>)
 800b6dc:	f004 fdd8 	bl	8010290 <HAL_GPIO_WritePin>

}
 800b6e0:	bf00      	nop
 800b6e2:	3710      	adds	r7, #16
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}
 800b6e8:	40020000 	.word	0x40020000
 800b6ec:	20068448 	.word	0x20068448

0800b6f0 <setPGA>:
*	parameter: pga
*	The return value: None
*********************************************************************************************************
*/
void setPGA(uint8_t pga)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b082      	sub	sp, #8
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	71fb      	strb	r3, [r7, #7]
	writeByteToReg(REG_ADCON,pga);
 800b6fa:	79fb      	ldrb	r3, [r7, #7]
 800b6fc:	4619      	mov	r1, r3
 800b6fe:	2002      	movs	r0, #2
 800b700:	f7ff ffcc 	bl	800b69c <writeByteToReg>
}
 800b704:	bf00      	nop
 800b706:	3708      	adds	r7, #8
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}

0800b70c <waitDRDY>:
*	parameter: data
*	The return value: None
*********************************************************************************************************
*/
void waitDRDY(void)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b082      	sub	sp, #8
 800b710:	af00      	add	r7, sp, #0
	uint32_t i;
		for (i = 0; i < 40000000; i++){
 800b712:	2300      	movs	r3, #0
 800b714:	607b      	str	r3, [r7, #4]
 800b716:	e009      	b.n	800b72c <waitDRDY+0x20>
			if (DRDY_IS_LOW()){
 800b718:	2108      	movs	r1, #8
 800b71a:	4809      	ldr	r0, [pc, #36]	; (800b740 <waitDRDY+0x34>)
 800b71c:	f004 fda0 	bl	8010260 <HAL_GPIO_ReadPin>
 800b720:	4603      	mov	r3, r0
 800b722:	2b00      	cmp	r3, #0
 800b724:	d007      	beq.n	800b736 <waitDRDY+0x2a>
		for (i = 0; i < 40000000; i++){
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	3301      	adds	r3, #1
 800b72a:	607b      	str	r3, [r7, #4]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	4a05      	ldr	r2, [pc, #20]	; (800b744 <waitDRDY+0x38>)
 800b730:	4293      	cmp	r3, r2
 800b732:	d3f1      	bcc.n	800b718 <waitDRDY+0xc>
				break;
			}
		}
}
 800b734:	e000      	b.n	800b738 <waitDRDY+0x2c>
				break;
 800b736:	bf00      	nop
}
 800b738:	bf00      	nop
 800b73a:	3708      	adds	r7, #8
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}
 800b740:	40020000 	.word	0x40020000
 800b744:	02625a00 	.word	0x02625a00

0800b748 <readChipID>:
*	parameter:
*	The return value: val
*********************************************************************************************************
*/
uint8_t readChipID(void)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b082      	sub	sp, #8
 800b74c:	af00      	add	r7, sp, #0
	waitDRDY();
 800b74e:	f7ff ffdd 	bl	800b70c <waitDRDY>
	volatile uint8_t id = readByteFromReg(REG_STATUS);
 800b752:	2000      	movs	r0, #0
 800b754:	f000 f820 	bl	800b798 <readByteFromReg>
 800b758:	4603      	mov	r3, r0
 800b75a:	71fb      	strb	r3, [r7, #7]
	return (id >> 4);
 800b75c:	79fb      	ldrb	r3, [r7, #7]
 800b75e:	b2db      	uxtb	r3, r3
 800b760:	091b      	lsrs	r3, r3, #4
 800b762:	b2db      	uxtb	r3, r3
}
 800b764:	4618      	mov	r0, r3
 800b766:	3708      	adds	r7, #8
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}

0800b76c <receive8bit>:
*	parameter: data
*	The return value: NULL
*********************************************************************************************************
*/
uint8_t receive8bit(void)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b084      	sub	sp, #16
 800b770:	af02      	add	r7, sp, #8
	HAL_SPI_Transmit(&hspi1, TXbuffer ,1,50);
	HAL_SPI_Receive(&hspi1, RXbuffer ,1,50);

	return RXbuffer[0];
	*/
	uint8_t send_data = 0xff;
 800b772:	23ff      	movs	r3, #255	; 0xff
 800b774:	71fb      	strb	r3, [r7, #7]
	uint8_t read = 0;
 800b776:	2300      	movs	r3, #0
 800b778:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_TransmitReceive(&hspi1,&send_data,&read,1,50);
 800b77a:	1dba      	adds	r2, r7, #6
 800b77c:	1df9      	adds	r1, r7, #7
 800b77e:	2332      	movs	r3, #50	; 0x32
 800b780:	9300      	str	r3, [sp, #0]
 800b782:	2301      	movs	r3, #1
 800b784:	4803      	ldr	r0, [pc, #12]	; (800b794 <receive8bit+0x28>)
 800b786:	f006 fe00 	bl	801238a <HAL_SPI_TransmitReceive>
	return read;
 800b78a:	79bb      	ldrb	r3, [r7, #6]



}
 800b78c:	4618      	mov	r0, r3
 800b78e:	3708      	adds	r7, #8
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}
 800b794:	20068448 	.word	0x20068448

0800b798 <readByteFromReg>:
*	parameter: register ID
*	The return value:
*********************************************************************************************************
*/
uint8_t readByteFromReg(uint8_t registerID)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b084      	sub	sp, #16
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	4603      	mov	r3, r0
 800b7a0:	71fb      	strb	r3, [r7, #7]
	uint8_t TXbuffer[2];
	TXbuffer[0] = CMD_RREG | registerID;
 800b7a2:	79fb      	ldrb	r3, [r7, #7]
 800b7a4:	f043 0310 	orr.w	r3, r3, #16
 800b7a8:	b2db      	uxtb	r3, r3
 800b7aa:	733b      	strb	r3, [r7, #12]
	TXbuffer[1] = 0x00;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	737b      	strb	r3, [r7, #13]
	CS_0();
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	2110      	movs	r1, #16
 800b7b4:	480d      	ldr	r0, [pc, #52]	; (800b7ec <readByteFromReg+0x54>)
 800b7b6:	f004 fd6b 	bl	8010290 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TXbuffer ,2,50);
 800b7ba:	f107 010c 	add.w	r1, r7, #12
 800b7be:	2332      	movs	r3, #50	; 0x32
 800b7c0:	2202      	movs	r2, #2
 800b7c2:	480b      	ldr	r0, [pc, #44]	; (800b7f0 <readByteFromReg+0x58>)
 800b7c4:	f006 fc73 	bl	80120ae <HAL_SPI_Transmit>
	delay_us(10);
 800b7c8:	200a      	movs	r0, #10
 800b7ca:	f000 fe15 	bl	800c3f8 <delay_us>
	uint8_t read = receive8bit();
 800b7ce:	f7ff ffcd 	bl	800b76c <receive8bit>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	73fb      	strb	r3, [r7, #15]
	CS_1();
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	2110      	movs	r1, #16
 800b7da:	4804      	ldr	r0, [pc, #16]	; (800b7ec <readByteFromReg+0x54>)
 800b7dc:	f004 fd58 	bl	8010290 <HAL_GPIO_WritePin>

	return read;
 800b7e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3710      	adds	r7, #16
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}
 800b7ea:	bf00      	nop
 800b7ec:	40020000 	.word	0x40020000
 800b7f0:	20068448 	.word	0x20068448

0800b7f4 <setBuffer>:
*	parameter: bool val
*	The return value: val
*********************************************************************************************************
*/
void setBuffer(void)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b082      	sub	sp, #8
 800b7f8:	af00      	add	r7, sp, #0
	uint8_t val = 1;
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	71fb      	strb	r3, [r7, #7]
	uint8_t Txbuffer[2];
	Txbuffer[0] = CMD_WREG | REG_STATUS;
 800b7fe:	2350      	movs	r3, #80	; 0x50
 800b800:	713b      	strb	r3, [r7, #4]
	Txbuffer[1] = (0 <<3) | (1 << 2) | (val << 1);
 800b802:	79fb      	ldrb	r3, [r7, #7]
 800b804:	005b      	lsls	r3, r3, #1
 800b806:	b25b      	sxtb	r3, r3
 800b808:	f043 0304 	orr.w	r3, r3, #4
 800b80c:	b25b      	sxtb	r3, r3
 800b80e:	b2db      	uxtb	r3, r3
 800b810:	717b      	strb	r3, [r7, #5]

	CS_0();
 800b812:	2200      	movs	r2, #0
 800b814:	2110      	movs	r1, #16
 800b816:	4809      	ldr	r0, [pc, #36]	; (800b83c <setBuffer+0x48>)
 800b818:	f004 fd3a 	bl	8010290 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, Txbuffer ,2,50);
 800b81c:	1d39      	adds	r1, r7, #4
 800b81e:	2332      	movs	r3, #50	; 0x32
 800b820:	2202      	movs	r2, #2
 800b822:	4807      	ldr	r0, [pc, #28]	; (800b840 <setBuffer+0x4c>)
 800b824:	f006 fc43 	bl	80120ae <HAL_SPI_Transmit>
	//send8bit(CMD_WREG | REG_STATUS);
	//send8bit((0 <<3) | (1 << 2) | (val << 1));
	CS_1();
 800b828:	2201      	movs	r2, #1
 800b82a:	2110      	movs	r1, #16
 800b82c:	4803      	ldr	r0, [pc, #12]	; (800b83c <setBuffer+0x48>)
 800b82e:	f004 fd2f 	bl	8010290 <HAL_GPIO_WritePin>
}
 800b832:	bf00      	nop
 800b834:	3708      	adds	r7, #8
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}
 800b83a:	bf00      	nop
 800b83c:	40020000 	.word	0x40020000
 800b840:	20068448 	.word	0x20068448

0800b844 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800b844:	b480      	push	{r7}
 800b846:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800b848:	f3bf 8f4f 	dsb	sy
}
 800b84c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800b84e:	4b06      	ldr	r3, [pc, #24]	; (800b868 <__NVIC_SystemReset+0x24>)
 800b850:	68db      	ldr	r3, [r3, #12]
 800b852:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800b856:	4904      	ldr	r1, [pc, #16]	; (800b868 <__NVIC_SystemReset+0x24>)
 800b858:	4b04      	ldr	r3, [pc, #16]	; (800b86c <__NVIC_SystemReset+0x28>)
 800b85a:	4313      	orrs	r3, r2
 800b85c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800b85e:	f3bf 8f4f 	dsb	sy
}
 800b862:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800b864:	bf00      	nop
 800b866:	e7fd      	b.n	800b864 <__NVIC_SystemReset+0x20>
 800b868:	e000ed00 	.word	0xe000ed00
 800b86c:	05fa0004 	.word	0x05fa0004

0800b870 <BLE_USART>:

/* Private variables ---------------------------------------------------------*/


void BLE_USART(UART_HandleTypeDef *huart, Sv *sendpData )
{
 800b870:	b580      	push	{r7, lr}
 800b872:	ed2d 8b0c 	vpush	{d8-d13}
 800b876:	b09e      	sub	sp, #120	; 0x78
 800b878:	af1c      	add	r7, sp, #112	; 0x70
 800b87a:	6078      	str	r0, [r7, #4]
 800b87c:	6039      	str	r1, [r7, #0]

	if( USARTBLE.IAPflag == 1)
 800b87e:	4b69      	ldr	r3, [pc, #420]	; (800ba24 <BLE_USART+0x1b4>)
 800b880:	785b      	ldrb	r3, [r3, #1]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d008      	beq.n	800b898 <BLE_USART+0x28>
	{
		USARTBLE.sendflag =0;
 800b886:	4b67      	ldr	r3, [pc, #412]	; (800ba24 <BLE_USART+0x1b4>)
 800b888:	2200      	movs	r2, #0
 800b88a:	701a      	strb	r2, [r3, #0]
		TM_DelayMillis(1000);
 800b88c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b890:	f000 fe0a 	bl	800c4a8 <TM_DelayMillis>
		NVIC_SystemReset();
 800b894:	f7ff ffd6 	bl	800b844 <__NVIC_SystemReset>

	}
	if(USARTBLE.sendflag ==1)
 800b898:	4b62      	ldr	r3, [pc, #392]	; (800ba24 <BLE_USART+0x1b4>)
 800b89a:	781b      	ldrb	r3, [r3, #0]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	f000 80bb 	beq.w	800ba18 <BLE_USART+0x1a8>
	{

		//2021/0201/George
		//TODO : BLE transmission parameter number3 from var to min and
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,sendpData->Statistic_SpeedOvall*1000,
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800b8a8:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800ba28 <BLE_USART+0x1b8>
 800b8ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b8b0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800b8ba:	ed9f 6a5b 	vldr	s12, [pc, #364]	; 800ba28 <BLE_USART+0x1b8>
 800b8be:	ee66 6a86 	vmul.f32	s13, s13, s12
 800b8c2:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
					sendpData->Statistic_Displacementp2p*1000,sendpData->Statistic_max*1000,sendpData->Statistic_p2p*1000,
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	edd3 5a0d 	vldr	s11, [r3, #52]	; 0x34
 800b8cc:	ed9f 5a56 	vldr	s10, [pc, #344]	; 800ba28 <BLE_USART+0x1b8>
 800b8d0:	ee65 5a85 	vmul.f32	s11, s11, s10
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,sendpData->Statistic_SpeedOvall*1000,
 800b8d4:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
					sendpData->Statistic_Displacementp2p*1000,sendpData->Statistic_max*1000,sendpData->Statistic_p2p*1000,
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	edd3 4a00 	vldr	s9, [r3]
 800b8de:	ed9f 4a52 	vldr	s8, [pc, #328]	; 800ba28 <BLE_USART+0x1b8>
 800b8e2:	ee64 4a84 	vmul.f32	s9, s9, s8
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,sendpData->Statistic_SpeedOvall*1000,
 800b8e6:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
					sendpData->Statistic_Displacementp2p*1000,sendpData->Statistic_max*1000,sendpData->Statistic_p2p*1000,
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	edd3 3a06 	vldr	s7, [r3, #24]
 800b8f0:	ed9f 3a4d 	vldr	s6, [pc, #308]	; 800ba28 <BLE_USART+0x1b8>
 800b8f4:	ee63 3a83 	vmul.f32	s7, s7, s6
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,sendpData->Statistic_SpeedOvall*1000,
 800b8f8:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
					sendpData->Statistic_var*1000,sendpData->Statistic_mean*1000,sendpData->Statistic_crestFactor*1000,
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	edd3 2a02 	vldr	s5, [r3, #8]
 800b902:	ed9f 2a49 	vldr	s4, [pc, #292]	; 800ba28 <BLE_USART+0x1b8>
 800b906:	ee62 2a82 	vmul.f32	s5, s5, s4
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,sendpData->Statistic_SpeedOvall*1000,
 800b90a:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
					sendpData->Statistic_var*1000,sendpData->Statistic_mean*1000,sendpData->Statistic_crestFactor*1000,
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	edd3 1a04 	vldr	s3, [r3, #16]
 800b914:	ed9f 1a44 	vldr	s2, [pc, #272]	; 800ba28 <BLE_USART+0x1b8>
 800b918:	ee61 1a81 	vmul.f32	s3, s3, s2
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,sendpData->Statistic_SpeedOvall*1000,
 800b91c:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
					sendpData->Statistic_var*1000,sendpData->Statistic_mean*1000,sendpData->Statistic_crestFactor*1000,
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	edd3 0a07 	vldr	s1, [r3, #28]
 800b926:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800ba28 <BLE_USART+0x1b8>
 800b92a:	ee60 0a80 	vmul.f32	s1, s1, s0
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,sendpData->Statistic_SpeedOvall*1000,
 800b92e:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
					sendpData->Statistic_kurtosis*1000, sendpData->Statistic_skewness*1000,
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	ed93 8a08 	vldr	s16, [r3, #32]
 800b938:	eddf 8a3b 	vldr	s17, [pc, #236]	; 800ba28 <BLE_USART+0x1b8>
 800b93c:	ee28 8a28 	vmul.f32	s16, s16, s17
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,sendpData->Statistic_SpeedOvall*1000,
 800b940:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
					sendpData->Statistic_kurtosis*1000, sendpData->Statistic_skewness*1000,
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	ed93 9a09 	vldr	s18, [r3, #36]	; 0x24
 800b94a:	eddf 9a37 	vldr	s19, [pc, #220]	; 800ba28 <BLE_USART+0x1b8>
 800b94e:	ee29 9a29 	vmul.f32	s18, s18, s19
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,sendpData->Statistic_SpeedOvall*1000,
 800b952:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
					statistic_value.Statistic_FreqPeak[0]*1000,statistic_value.Statistic_FreqPeak[1]*1000,statistic_value.Statistic_FreqPeak[2]*1000,
 800b956:	4b35      	ldr	r3, [pc, #212]	; (800ba2c <BLE_USART+0x1bc>)
 800b958:	ed93 aa0e 	vldr	s20, [r3, #56]	; 0x38
 800b95c:	eddf aa32 	vldr	s21, [pc, #200]	; 800ba28 <BLE_USART+0x1b8>
 800b960:	ee2a aa2a 	vmul.f32	s20, s20, s21
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,sendpData->Statistic_SpeedOvall*1000,
 800b964:	eeb7 aaca 	vcvt.f64.f32	d10, s20
					statistic_value.Statistic_FreqPeak[0]*1000,statistic_value.Statistic_FreqPeak[1]*1000,statistic_value.Statistic_FreqPeak[2]*1000,
 800b968:	4b30      	ldr	r3, [pc, #192]	; (800ba2c <BLE_USART+0x1bc>)
 800b96a:	ed93 ba0f 	vldr	s22, [r3, #60]	; 0x3c
 800b96e:	eddf ba2e 	vldr	s23, [pc, #184]	; 800ba28 <BLE_USART+0x1b8>
 800b972:	ee2b ba2b 	vmul.f32	s22, s22, s23
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,sendpData->Statistic_SpeedOvall*1000,
 800b976:	eeb7 bacb 	vcvt.f64.f32	d11, s22
					statistic_value.Statistic_FreqPeak[0]*1000,statistic_value.Statistic_FreqPeak[1]*1000,statistic_value.Statistic_FreqPeak[2]*1000,
 800b97a:	4b2c      	ldr	r3, [pc, #176]	; (800ba2c <BLE_USART+0x1bc>)
 800b97c:	ed93 ca10 	vldr	s24, [r3, #64]	; 0x40
 800b980:	eddf ca29 	vldr	s25, [pc, #164]	; 800ba28 <BLE_USART+0x1b8>
 800b984:	ee2c ca2c 	vmul.f32	s24, s24, s25
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,sendpData->Statistic_SpeedOvall*1000,
 800b988:	eeb7 cacc 	vcvt.f64.f32	d12, s24
					//statistic_value.Statistic_VeloccityFreqPeak[0]*1000,statistic_value.Statistic_VeloccityFreqPeak[1]*1000,statistic_value.Statistic_VeloccityFreqPeak[2]*1000);
					statistic_value.Statistic_CosSimilarity*100);
 800b98c:	4b27      	ldr	r3, [pc, #156]	; (800ba2c <BLE_USART+0x1bc>)
 800b98e:	ed93 da36 	vldr	s26, [r3, #216]	; 0xd8
 800b992:	eddf da27 	vldr	s27, [pc, #156]	; 800ba30 <BLE_USART+0x1c0>
 800b996:	ee2d da2d 	vmul.f32	s26, s26, s27
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,sendpData->Statistic_SpeedOvall*1000,
 800b99a:	eeb7 dacd 	vcvt.f64.f32	d13, s26
 800b99e:	ed8d db1a 	vstr	d13, [sp, #104]	; 0x68
 800b9a2:	ed8d cb18 	vstr	d12, [sp, #96]	; 0x60
 800b9a6:	ed8d bb16 	vstr	d11, [sp, #88]	; 0x58
 800b9aa:	ed8d ab14 	vstr	d10, [sp, #80]	; 0x50
 800b9ae:	ed8d 9b12 	vstr	d9, [sp, #72]	; 0x48
 800b9b2:	ed8d 8b10 	vstr	d8, [sp, #64]	; 0x40
 800b9b6:	ed8d 0b0e 	vstr	d0, [sp, #56]	; 0x38
 800b9ba:	ed8d 1b0c 	vstr	d1, [sp, #48]	; 0x30
 800b9be:	ed8d 2b0a 	vstr	d2, [sp, #40]	; 0x28
 800b9c2:	ed8d 3b08 	vstr	d3, [sp, #32]
 800b9c6:	ed8d 4b06 	vstr	d4, [sp, #24]
 800b9ca:	ed8d 5b04 	vstr	d5, [sp, #16]
 800b9ce:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b9d2:	ed8d 7b00 	vstr	d7, [sp]
 800b9d6:	4a17      	ldr	r2, [pc, #92]	; (800ba34 <BLE_USART+0x1c4>)
 800b9d8:	2180      	movs	r1, #128	; 0x80
 800b9da:	4817      	ldr	r0, [pc, #92]	; (800ba38 <BLE_USART+0x1c8>)
 800b9dc:	f003 fa1c 	bl	800ee18 <snprintf_>
		//snprintf_(USARTBLE.buffer, 6 , "%.4f", statistic_value.Statistic_CosSimilarity );



		USARTBLE.bufferSize = min_(APP_BUFFER_SIZE, strlen(USARTBLE.buffer));
 800b9e0:	4815      	ldr	r0, [pc, #84]	; (800ba38 <BLE_USART+0x1c8>)
 800b9e2:	f7fc fc8d 	bl	8008300 <strlen>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	2b80      	cmp	r3, #128	; 0x80
 800b9ea:	d804      	bhi.n	800b9f6 <BLE_USART+0x186>
 800b9ec:	4812      	ldr	r0, [pc, #72]	; (800ba38 <BLE_USART+0x1c8>)
 800b9ee:	f7fc fc87 	bl	8008300 <strlen>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	e000      	b.n	800b9f8 <BLE_USART+0x188>
 800b9f6:	2380      	movs	r3, #128	; 0x80
 800b9f8:	4a0a      	ldr	r2, [pc, #40]	; (800ba24 <BLE_USART+0x1b4>)
 800b9fa:	f8c2 3224 	str.w	r3, [r2, #548]	; 0x224

		if(HAL_UART_Transmit_DMA(huart, USARTBLE.buffer, USARTBLE.bufferSize)==HAL_OK)
 800b9fe:	4b09      	ldr	r3, [pc, #36]	; (800ba24 <BLE_USART+0x1b4>)
 800ba00:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800ba04:	b29b      	uxth	r3, r3
 800ba06:	461a      	mov	r2, r3
 800ba08:	490b      	ldr	r1, [pc, #44]	; (800ba38 <BLE_USART+0x1c8>)
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f007 fc08 	bl	8013220 <HAL_UART_Transmit_DMA>
 800ba10:	4603      	mov	r3, r0
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d100      	bne.n	800ba18 <BLE_USART+0x1a8>
		{
			__NOP();
 800ba16:	bf00      	nop
		}

	}
}
 800ba18:	bf00      	nop
 800ba1a:	3708      	adds	r7, #8
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	ecbd 8b0c 	vpop	{d8-d13}
 800ba22:	bd80      	pop	{r7, pc}
 800ba24:	20060180 	.word	0x20060180
 800ba28:	447a0000 	.word	0x447a0000
 800ba2c:	20059d84 	.word	0x20059d84
 800ba30:	42c80000 	.word	0x42c80000
 800ba34:	0801c128 	.word	0x0801c128
 800ba38:	20060220 	.word	0x20060220

0800ba3c <checkBLECommandFromBLEGateway>:

_Bool checkBLECommandFromBLEGateway(char * BLEcommand,char * index, int len)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b086      	sub	sp, #24
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	60f8      	str	r0, [r7, #12]
 800ba44:	60b9      	str	r1, [r7, #8]
 800ba46:	607a      	str	r2, [r7, #4]
	if(strlen(BLEcommand) > 0)
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	781b      	ldrb	r3, [r3, #0]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d011      	beq.n	800ba74 <checkBLECommandFromBLEGateway+0x38>
	{
		   //Test 比對 function
	   char * pch;
	   /* 找尋 simple 字串 */
	   pch = strstr (BLEcommand,index);
 800ba50:	68b9      	ldr	r1, [r7, #8]
 800ba52:	68f8      	ldr	r0, [r7, #12]
 800ba54:	f00c faba 	bl	8017fcc <strstr>
 800ba58:	6178      	str	r0, [r7, #20]
	   if(strncmp(pch, index, len) == 0) {
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	461a      	mov	r2, r3
 800ba5e:	68b9      	ldr	r1, [r7, #8]
 800ba60:	6978      	ldr	r0, [r7, #20]
 800ba62:	f00c faa1 	bl	8017fa8 <strncmp>
 800ba66:	4603      	mov	r3, r0
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d101      	bne.n	800ba70 <checkBLECommandFromBLEGateway+0x34>
		   return true;
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	e002      	b.n	800ba76 <checkBLECommandFromBLEGateway+0x3a>
	   }
	   else
	   {
		   return false;
 800ba70:	2300      	movs	r3, #0
 800ba72:	e000      	b.n	800ba76 <checkBLECommandFromBLEGateway+0x3a>

	}
	else
	{

		return false;
 800ba74:	2300      	movs	r3, #0
	}

}
 800ba76:	4618      	mov	r0, r3
 800ba78:	3718      	adds	r7, #24
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}

0800ba7e <CalcluateMean>:
 *
 * Calculate Skewness & kurtosis
 *
 * */
float CalcluateMean(float *x, int n)
{
 800ba7e:	b480      	push	{r7}
 800ba80:	b085      	sub	sp, #20
 800ba82:	af00      	add	r7, sp, #0
 800ba84:	6078      	str	r0, [r7, #4]
 800ba86:	6039      	str	r1, [r7, #0]
	float sum = 0;
 800ba88:	f04f 0300 	mov.w	r3, #0
 800ba8c:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < n; i++)
 800ba8e:	2300      	movs	r3, #0
 800ba90:	60bb      	str	r3, [r7, #8]
 800ba92:	e00e      	b.n	800bab2 <CalcluateMean+0x34>
		sum += x[i];
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	009b      	lsls	r3, r3, #2
 800ba98:	687a      	ldr	r2, [r7, #4]
 800ba9a:	4413      	add	r3, r2
 800ba9c:	edd3 7a00 	vldr	s15, [r3]
 800baa0:	ed97 7a03 	vldr	s14, [r7, #12]
 800baa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800baa8:	edc7 7a03 	vstr	s15, [r7, #12]
	for (int i = 0; i < n; i++)
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	3301      	adds	r3, #1
 800bab0:	60bb      	str	r3, [r7, #8]
 800bab2:	68ba      	ldr	r2, [r7, #8]
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	429a      	cmp	r2, r3
 800bab8:	dbec      	blt.n	800ba94 <CalcluateMean+0x16>

	return sum / n;
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	ee07 3a90 	vmov	s15, r3
 800bac0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bac4:	ed97 7a03 	vldr	s14, [r7, #12]
 800bac8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800bacc:	eef0 7a66 	vmov.f32	s15, s13
}
 800bad0:	eeb0 0a67 	vmov.f32	s0, s15
 800bad4:	3714      	adds	r7, #20
 800bad6:	46bd      	mov	sp, r7
 800bad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800badc:	4770      	bx	lr

0800bade <CalcluateMoment>:

float CalcluateMoment(float *x, int n, int m)
{
 800bade:	b580      	push	{r7, lr}
 800bae0:	b088      	sub	sp, #32
 800bae2:	af00      	add	r7, sp, #0
 800bae4:	60f8      	str	r0, [r7, #12]
 800bae6:	60b9      	str	r1, [r7, #8]
 800bae8:	607a      	str	r2, [r7, #4]
	float mean = CalcluateMean(x, n), sum = 0;
 800baea:	68b9      	ldr	r1, [r7, #8]
 800baec:	68f8      	ldr	r0, [r7, #12]
 800baee:	f7ff ffc6 	bl	800ba7e <CalcluateMean>
 800baf2:	ed87 0a05 	vstr	s0, [r7, #20]
 800baf6:	f04f 0300 	mov.w	r3, #0
 800bafa:	61fb      	str	r3, [r7, #28]

	for (int i = 0; i < n; i++)
 800bafc:	2300      	movs	r3, #0
 800bafe:	61bb      	str	r3, [r7, #24]
 800bb00:	e025      	b.n	800bb4e <CalcluateMoment+0x70>
		sum += pow(x[i] - mean, m);
 800bb02:	69bb      	ldr	r3, [r7, #24]
 800bb04:	009b      	lsls	r3, r3, #2
 800bb06:	68fa      	ldr	r2, [r7, #12]
 800bb08:	4413      	add	r3, r2
 800bb0a:	ed93 7a00 	vldr	s14, [r3]
 800bb0e:	edd7 7a05 	vldr	s15, [r7, #20]
 800bb12:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bb16:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	ee06 3a90 	vmov	s13, r3
 800bb20:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800bb24:	eeb0 1b46 	vmov.f64	d1, d6
 800bb28:	eeb0 0b47 	vmov.f64	d0, d7
 800bb2c:	f00f ff64 	bl	801b9f8 <pow>
 800bb30:	eeb0 6b40 	vmov.f64	d6, d0
 800bb34:	edd7 7a07 	vldr	s15, [r7, #28]
 800bb38:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bb3c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800bb40:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800bb44:	edc7 7a07 	vstr	s15, [r7, #28]
	for (int i = 0; i < n; i++)
 800bb48:	69bb      	ldr	r3, [r7, #24]
 800bb4a:	3301      	adds	r3, #1
 800bb4c:	61bb      	str	r3, [r7, #24]
 800bb4e:	69ba      	ldr	r2, [r7, #24]
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	429a      	cmp	r2, r3
 800bb54:	dbd5      	blt.n	800bb02 <CalcluateMoment+0x24>

	return sum / n;
 800bb56:	68bb      	ldr	r3, [r7, #8]
 800bb58:	ee07 3a90 	vmov	s15, r3
 800bb5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb60:	ed97 7a07 	vldr	s14, [r7, #28]
 800bb64:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800bb68:	eef0 7a66 	vmov.f32	s15, s13
}
 800bb6c:	eeb0 0a67 	vmov.f32	s0, s15
 800bb70:	3720      	adds	r7, #32
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}

0800bb76 <CalcluateVariance>:

float CalcluateVariance(float *x, int n)
{
 800bb76:	b580      	push	{r7, lr}
 800bb78:	b086      	sub	sp, #24
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	6078      	str	r0, [r7, #4]
 800bb7e:	6039      	str	r1, [r7, #0]
	float mean = CalcluateMean(x, n), sumSq = 0;
 800bb80:	6839      	ldr	r1, [r7, #0]
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f7ff ff7b 	bl	800ba7e <CalcluateMean>
 800bb88:	ed87 0a03 	vstr	s0, [r7, #12]
 800bb8c:	f04f 0300 	mov.w	r3, #0
 800bb90:	617b      	str	r3, [r7, #20]

	for (int i = 0; i < n; i++)
 800bb92:	2300      	movs	r3, #0
 800bb94:	613b      	str	r3, [r7, #16]
 800bb96:	e018      	b.n	800bbca <CalcluateVariance+0x54>
	{
		float delta = x[i] - mean;
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	009b      	lsls	r3, r3, #2
 800bb9c:	687a      	ldr	r2, [r7, #4]
 800bb9e:	4413      	add	r3, r2
 800bba0:	ed93 7a00 	vldr	s14, [r3]
 800bba4:	edd7 7a03 	vldr	s15, [r7, #12]
 800bba8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bbac:	edc7 7a02 	vstr	s15, [r7, #8]

		sumSq += delta * delta;
 800bbb0:	edd7 7a02 	vldr	s15, [r7, #8]
 800bbb4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800bbb8:	ed97 7a05 	vldr	s14, [r7, #20]
 800bbbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bbc0:	edc7 7a05 	vstr	s15, [r7, #20]
	for (int i = 0; i < n; i++)
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	3301      	adds	r3, #1
 800bbc8:	613b      	str	r3, [r7, #16]
 800bbca:	693a      	ldr	r2, [r7, #16]
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	429a      	cmp	r2, r3
 800bbd0:	dbe2      	blt.n	800bb98 <CalcluateVariance+0x22>
	}

	return sumSq / (n - 1);
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	3b01      	subs	r3, #1
 800bbd6:	ee07 3a90 	vmov	s15, r3
 800bbda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bbde:	ed97 7a05 	vldr	s14, [r7, #20]
 800bbe2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800bbe6:	eef0 7a66 	vmov.f32	s15, s13
}
 800bbea:	eeb0 0a67 	vmov.f32	s0, s15
 800bbee:	3718      	adds	r7, #24
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}

0800bbf4 <CalcluateStandardDeviation>:
float CalcluateStandardDeviation(float *x, int n)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b082      	sub	sp, #8
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	6039      	str	r1, [r7, #0]
	return sqrt(CalcluateVariance(x, n));
 800bbfe:	6839      	ldr	r1, [r7, #0]
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	f7ff ffb8 	bl	800bb76 <CalcluateVariance>
 800bc06:	eef0 7a40 	vmov.f32	s15, s0
 800bc0a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bc0e:	eeb0 0b47 	vmov.f64	d0, d7
 800bc12:	f010 f9b5 	bl	801bf80 <sqrt>
 800bc16:	eeb0 7b40 	vmov.f64	d7, d0
 800bc1a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 800bc1e:	eeb0 0a67 	vmov.f32	s0, s15
 800bc22:	3708      	adds	r7, #8
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}

0800bc28 <Calculate_skewness>:

float Calculate_skewness(float *x, int n)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	ed2d 8b02 	vpush	{d8}
 800bc2e:	b086      	sub	sp, #24
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
 800bc34:	6039      	str	r1, [r7, #0]
	// NIST definition of adjusted Fisher-Pearson
	// coefficient of skewness
	float m3 = CalcluateMoment(x, n, 3);
 800bc36:	2203      	movs	r2, #3
 800bc38:	6839      	ldr	r1, [r7, #0]
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f7ff ff4f 	bl	800bade <CalcluateMoment>
 800bc40:	ed87 0a05 	vstr	s0, [r7, #20]
	float sx = CalcluateStandardDeviation(x, n);
 800bc44:	6839      	ldr	r1, [r7, #0]
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f7ff ffd4 	bl	800bbf4 <CalcluateStandardDeviation>
 800bc4c:	ed87 0a04 	vstr	s0, [r7, #16]
	int n1 = n - 1;
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	3b01      	subs	r3, #1
 800bc54:	60fb      	str	r3, [r7, #12]
	float Skewness = (sqrt(n * n1) / n1) * m3 / pow(sx, 3);
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	68fa      	ldr	r2, [r7, #12]
 800bc5a:	fb02 f303 	mul.w	r3, r2, r3
 800bc5e:	ee07 3a90 	vmov	s15, r3
 800bc62:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bc66:	eeb0 0b47 	vmov.f64	d0, d7
 800bc6a:	f010 f989 	bl	801bf80 <sqrt>
 800bc6e:	eeb0 5b40 	vmov.f64	d5, d0
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	ee07 3a90 	vmov	s15, r3
 800bc78:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bc7c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800bc80:	edd7 7a05 	vldr	s15, [r7, #20]
 800bc84:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bc88:	ee26 8b07 	vmul.f64	d8, d6, d7
 800bc8c:	edd7 7a04 	vldr	s15, [r7, #16]
 800bc90:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bc94:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 800bc98:	eeb0 0b47 	vmov.f64	d0, d7
 800bc9c:	f00f feac 	bl	801b9f8 <pow>
 800bca0:	eeb0 6b40 	vmov.f64	d6, d0
 800bca4:	ee88 7b06 	vdiv.f64	d7, d8, d6
 800bca8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800bcac:	edc7 7a02 	vstr	s15, [r7, #8]

	return Skewness;
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	ee07 3a90 	vmov	s15, r3
}
 800bcb6:	eeb0 0a67 	vmov.f32	s0, s15
 800bcba:	3718      	adds	r7, #24
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	ecbd 8b02 	vpop	{d8}
 800bcc2:	bd80      	pop	{r7, pc}

0800bcc4 <Calculate_kurtosis>:
float Calculate_kurtosis(float *x, int n)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b086      	sub	sp, #24
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
 800bccc:	6039      	str	r1, [r7, #0]
	float m2 = CalcluateMoment(x, n, 2);
 800bcce:	2202      	movs	r2, #2
 800bcd0:	6839      	ldr	r1, [r7, #0]
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f7ff ff03 	bl	800bade <CalcluateMoment>
 800bcd8:	ed87 0a05 	vstr	s0, [r7, #20]
	float m4 = CalcluateMoment(x, n, 4);
 800bcdc:	2204      	movs	r2, #4
 800bcde:	6839      	ldr	r1, [r7, #0]
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f7ff fefc 	bl	800bade <CalcluateMoment>
 800bce6:	ed87 0a04 	vstr	s0, [r7, #16]


	float Kurtosis = m4 / (m2 * m2) - 3.0;
 800bcea:	edd7 7a05 	vldr	s15, [r7, #20]
 800bcee:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800bcf2:	edd7 6a04 	vldr	s13, [r7, #16]
 800bcf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bcfa:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800bcfe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bd02:	edc7 7a03 	vstr	s15, [r7, #12]
    return Kurtosis;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	ee07 3a90 	vmov	s15, r3
}
 800bd0c:	eeb0 0a67 	vmov.f32	s0, s15
 800bd10:	3718      	adds	r7, #24
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd80      	pop	{r7, pc}
	...

0800bd18 <Calculate_FreqBandRMS>:

void Calculate_FreqBandRMS(float *x,  FreqMaxMin * FreqMaxMin , int8_t freq_index)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b090      	sub	sp, #64	; 0x40
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	60f8      	str	r0, [r7, #12]
 800bd20:	60b9      	str	r1, [r7, #8]
 800bd22:	4613      	mov	r3, r2
 800bd24:	71fb      	strb	r3, [r7, #7]

	if(FreqMaxMin->Max != 0)
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	f000 80f9 	beq.w	800bf22 <Calculate_FreqBandRMS+0x20a>
	{
		float * velocityBuffer;
		velocityBuffer = pvPortMalloc(4096 * sizeof(float));
 800bd30:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800bd34:	f00b f8a6 	bl	8016e84 <pvPortMalloc>
 800bd38:	62f8      	str	r0, [r7, #44]	; 0x2c

		int dataRate = 15000;
 800bd3a:	f643 2398 	movw	r3, #15000	; 0x3a98
 800bd3e:	62bb      	str	r3, [r7, #40]	; 0x28
		float frequencyResolution = dataRate/(float)fftSize;
 800bd40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd42:	ee07 3a90 	vmov	s15, r3
 800bd46:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800bd4a:	4b7d      	ldr	r3, [pc, #500]	; (800bf40 <Calculate_FreqBandRMS+0x228>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	ee07 3a90 	vmov	s15, r3
 800bd52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bd56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd5a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		float accelerationRMS = 0;
 800bd5e:	f04f 0300 	mov.w	r3, #0
 800bd62:	623b      	str	r3, [r7, #32]

		float parseRangeMax = FreqMaxMin->Max / frequencyResolution;
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	ee07 3a90 	vmov	s15, r3
 800bd6c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800bd70:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800bd74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd78:	edc7 7a07 	vstr	s15, [r7, #28]
		float parseRangeMin = FreqMaxMin->Min / frequencyResolution;
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	685b      	ldr	r3, [r3, #4]
 800bd80:	ee07 3a90 	vmov	s15, r3
 800bd84:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800bd88:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800bd8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd90:	edc7 7a06 	vstr	s15, [r7, #24]
		float ParsevalFftPower = 0;
 800bd94:	f04f 0300 	mov.w	r3, #0
 800bd98:	63fb      	str	r3, [r7, #60]	; 0x3c
		float velocityPower = 0;
 800bd9a:	f04f 0300 	mov.w	r3, #0
 800bd9e:	63bb      	str	r3, [r7, #56]	; 0x38
		float velocityRMS = 0;
 800bda0:	f04f 0300 	mov.w	r3, #0
 800bda4:	617b      	str	r3, [r7, #20]

		for(int i = (int)parseRangeMin; i<(int)parseRangeMax; i++)
 800bda6:	edd7 7a06 	vldr	s15, [r7, #24]
 800bdaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bdae:	ee17 3a90 	vmov	r3, s15
 800bdb2:	637b      	str	r3, [r7, #52]	; 0x34
 800bdb4:	e016      	b.n	800bde4 <Calculate_FreqBandRMS+0xcc>
		{
			ParsevalFftPower += x[i] * x[i];
 800bdb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdb8:	009b      	lsls	r3, r3, #2
 800bdba:	68fa      	ldr	r2, [r7, #12]
 800bdbc:	4413      	add	r3, r2
 800bdbe:	ed93 7a00 	vldr	s14, [r3]
 800bdc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdc4:	009b      	lsls	r3, r3, #2
 800bdc6:	68fa      	ldr	r2, [r7, #12]
 800bdc8:	4413      	add	r3, r2
 800bdca:	edd3 7a00 	vldr	s15, [r3]
 800bdce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdd2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800bdd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bdda:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		for(int i = (int)parseRangeMin; i<(int)parseRangeMax; i++)
 800bdde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bde0:	3301      	adds	r3, #1
 800bde2:	637b      	str	r3, [r7, #52]	; 0x34
 800bde4:	edd7 7a07 	vldr	s15, [r7, #28]
 800bde8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bdec:	ee17 2a90 	vmov	r2, s15
 800bdf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	dbdf      	blt.n	800bdb6 <Calculate_FreqBandRMS+0x9e>
		}

		//2021/03/09/George/Velocity target RMS
		for(int i = (int)parseRangeMin; i<(int)parseRangeMax; i++)
 800bdf6:	edd7 7a06 	vldr	s15, [r7, #24]
 800bdfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bdfe:	ee17 3a90 	vmov	r3, s15
 800be02:	633b      	str	r3, [r7, #48]	; 0x30
 800be04:	e049      	b.n	800be9a <Calculate_FreqBandRMS+0x182>
		{

			if(i ==0)
 800be06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d10a      	bne.n	800be22 <Calculate_FreqBandRMS+0x10a>
			{
				velocityBuffer[i] = x[i];
 800be0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be0e:	009b      	lsls	r3, r3, #2
 800be10:	68fa      	ldr	r2, [r7, #12]
 800be12:	441a      	add	r2, r3
 800be14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be16:	009b      	lsls	r3, r3, #2
 800be18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800be1a:	440b      	add	r3, r1
 800be1c:	6812      	ldr	r2, [r2, #0]
 800be1e:	601a      	str	r2, [r3, #0]
 800be20:	e024      	b.n	800be6c <Calculate_FreqBandRMS+0x154>
			}
			else
			{
				velocityBuffer[i] = (x[i] * 9807) / (2 * 3.1415926 * frequencyResolution * i);
 800be22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be24:	009b      	lsls	r3, r3, #2
 800be26:	68fa      	ldr	r2, [r7, #12]
 800be28:	4413      	add	r3, r2
 800be2a:	edd3 7a00 	vldr	s15, [r3]
 800be2e:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800bf44 <Calculate_FreqBandRMS+0x22c>
 800be32:	ee67 7a87 	vmul.f32	s15, s15, s14
 800be36:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800be3a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800be3e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800be42:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800bf30 <Calculate_FreqBandRMS+0x218>
 800be46:	ee27 6b06 	vmul.f64	d6, d7, d6
 800be4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be4c:	ee07 3a90 	vmov	s15, r3
 800be50:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800be54:	ee26 6b07 	vmul.f64	d6, d6, d7
 800be58:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800be5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be5e:	009b      	lsls	r3, r3, #2
 800be60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be62:	4413      	add	r3, r2
 800be64:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800be68:	edc3 7a00 	vstr	s15, [r3]

			}
			velocityPower += velocityBuffer[i] * velocityBuffer[i];
 800be6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be6e:	009b      	lsls	r3, r3, #2
 800be70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be72:	4413      	add	r3, r2
 800be74:	ed93 7a00 	vldr	s14, [r3]
 800be78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be7a:	009b      	lsls	r3, r3, #2
 800be7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be7e:	4413      	add	r3, r2
 800be80:	edd3 7a00 	vldr	s15, [r3]
 800be84:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be88:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800be8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800be90:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		for(int i = (int)parseRangeMin; i<(int)parseRangeMax; i++)
 800be94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be96:	3301      	adds	r3, #1
 800be98:	633b      	str	r3, [r7, #48]	; 0x30
 800be9a:	edd7 7a07 	vldr	s15, [r7, #28]
 800be9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bea2:	ee17 2a90 	vmov	r2, s15
 800bea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea8:	4293      	cmp	r3, r2
 800beaa:	dbac      	blt.n	800be06 <Calculate_FreqBandRMS+0xee>
		}

		accelerationRMS = sqrt(ParsevalFftPower * 2)/4096;
 800beac:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800beb0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800beb4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800beb8:	eeb0 0b47 	vmov.f64	d0, d7
 800bebc:	f010 f860 	bl	801bf80 <sqrt>
 800bec0:	eeb0 6b40 	vmov.f64	d6, d0
 800bec4:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 800bf38 <Calculate_FreqBandRMS+0x220>
 800bec8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800becc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800bed0:	edc7 7a08 	vstr	s15, [r7, #32]

		//2021/0309/George/ Velocity RMS ans
		velocityRMS = sqrt(velocityPower * 2)/4096;
 800bed4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800bed8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bedc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bee0:	eeb0 0b47 	vmov.f64	d0, d7
 800bee4:	f010 f84c 	bl	801bf80 <sqrt>
 800bee8:	eeb0 6b40 	vmov.f64	d6, d0
 800beec:	ed9f 5b12 	vldr	d5, [pc, #72]	; 800bf38 <Calculate_FreqBandRMS+0x220>
 800bef0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bef4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800bef8:	edc7 7a05 	vstr	s15, [r7, #20]

		statistic_value.Statistic_FreqPeak[freq_index] = accelerationRMS;
 800befc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf00:	4a11      	ldr	r2, [pc, #68]	; (800bf48 <Calculate_FreqBandRMS+0x230>)
 800bf02:	330e      	adds	r3, #14
 800bf04:	009b      	lsls	r3, r3, #2
 800bf06:	4413      	add	r3, r2
 800bf08:	6a3a      	ldr	r2, [r7, #32]
 800bf0a:	601a      	str	r2, [r3, #0]
		statistic_value.Statistic_VeloccityFreqPeak[freq_index] = velocityRMS;
 800bf0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf10:	4a0d      	ldr	r2, [pc, #52]	; (800bf48 <Calculate_FreqBandRMS+0x230>)
 800bf12:	3322      	adds	r3, #34	; 0x22
 800bf14:	009b      	lsls	r3, r3, #2
 800bf16:	4413      	add	r3, r2
 800bf18:	697a      	ldr	r2, [r7, #20]
 800bf1a:	601a      	str	r2, [r3, #0]

		vPortFree(velocityBuffer);
 800bf1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf1e:	f00b f87b 	bl	8017018 <vPortFree>
	}
}
 800bf22:	bf00      	nop
 800bf24:	3740      	adds	r7, #64	; 0x40
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}
 800bf2a:	bf00      	nop
 800bf2c:	f3af 8000 	nop.w
 800bf30:	4d12d84a 	.word	0x4d12d84a
 800bf34:	401921fb 	.word	0x401921fb
 800bf38:	00000000 	.word	0x00000000
 800bf3c:	40b00000 	.word	0x40b00000
 800bf40:	2000000c 	.word	0x2000000c
 800bf44:	46193c00 	.word	0x46193c00
 800bf48:	20059d84 	.word	0x20059d84
 800bf4c:	00000000 	.word	0x00000000

0800bf50 <Calculate_FreqOverAll>:

void Calculate_FreqOverAll(float *x, int n)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b090      	sub	sp, #64	; 0x40
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	6039      	str	r1, [r7, #0]
	//2021/0209/George
	//Acceleration sin(2πft) integral is Velocity cos(2πft)/2πft
	//Velocity cos(2πft)/2πft integral is cos(2πft)/(2πft)^2
	float ParsevalFftPower = 0;
 800bf5a:	f04f 0300 	mov.w	r3, #0
 800bf5e:	63fb      	str	r3, [r7, #60]	; 0x3c
	float AccelerationRMS = 0;
 800bf60:	f04f 0300 	mov.w	r3, #0
 800bf64:	62bb      	str	r3, [r7, #40]	; 0x28
	float velocityPower = 0;
 800bf66:	f04f 0300 	mov.w	r3, #0
 800bf6a:	63bb      	str	r3, [r7, #56]	; 0x38
	float displacementPower = 0;
 800bf6c:	f04f 0300 	mov.w	r3, #0
 800bf70:	637b      	str	r3, [r7, #52]	; 0x34
	float displacementP2p = 0;
 800bf72:	f04f 0300 	mov.w	r3, #0
 800bf76:	613b      	str	r3, [r7, #16]
	uint32_t displacement_index = 0;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	60fb      	str	r3, [r7, #12]

	for(int i = 0; i<n/2; i++)
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	633b      	str	r3, [r7, #48]	; 0x30
 800bf80:	e016      	b.n	800bfb0 <Calculate_FreqOverAll+0x60>
	{
		ParsevalFftPower += x[i] * x[i];
 800bf82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf84:	009b      	lsls	r3, r3, #2
 800bf86:	687a      	ldr	r2, [r7, #4]
 800bf88:	4413      	add	r3, r2
 800bf8a:	ed93 7a00 	vldr	s14, [r3]
 800bf8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf90:	009b      	lsls	r3, r3, #2
 800bf92:	687a      	ldr	r2, [r7, #4]
 800bf94:	4413      	add	r3, r2
 800bf96:	edd3 7a00 	vldr	s15, [r3]
 800bf9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf9e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800bfa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bfa6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	for(int i = 0; i<n/2; i++)
 800bfaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfac:	3301      	adds	r3, #1
 800bfae:	633b      	str	r3, [r7, #48]	; 0x30
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	da00      	bge.n	800bfb8 <Calculate_FreqOverAll+0x68>
 800bfb6:	3301      	adds	r3, #1
 800bfb8:	105b      	asrs	r3, r3, #1
 800bfba:	461a      	mov	r2, r3
 800bfbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	dbdf      	blt.n	800bf82 <Calculate_FreqOverAll+0x32>
	}

	int fftSize = 4096;
 800bfc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bfc6:	627b      	str	r3, [r7, #36]	; 0x24
	/*
	 * 2021/0203/George
	 * Compute Speed Ovall
	 * TODO: Improve compute fftSize to fftSize/2
	 * */
	float32_t sampleCount = 4096;
 800bfc8:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 800bfcc:	623b      	str	r3, [r7, #32]
	float32_t samplingRate = 15000;
 800bfce:	4b94      	ldr	r3, [pc, #592]	; (800c220 <Calculate_FreqOverAll+0x2d0>)
 800bfd0:	61fb      	str	r3, [r7, #28]
	float32_t frequencyScale = samplingRate/sampleCount;
 800bfd2:	edd7 6a07 	vldr	s13, [r7, #28]
 800bfd6:	ed97 7a08 	vldr	s14, [r7, #32]
 800bfda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bfde:	edc7 7a06 	vstr	s15, [r7, #24]
	float SpeedparsevalFftPower = 0;
 800bfe2:	f04f 0300 	mov.w	r3, #0
 800bfe6:	617b      	str	r3, [r7, #20]

	//2021/0203/George
	//Calculate Velocity power
	for(uint16_t i = 0; i < fftSize / 2; i++)
 800bfe8:	2300      	movs	r3, #0
 800bfea:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800bfec:	e051      	b.n	800c092 <Calculate_FreqOverAll+0x142>
	{
			if(i < fftSize/2)
 800bfee:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	da00      	bge.n	800bff8 <Calculate_FreqOverAll+0xa8>
 800bff6:	3301      	adds	r3, #1
 800bff8:	105b      	asrs	r3, r3, #1
 800bffa:	429a      	cmp	r2, r3
 800bffc:	da46      	bge.n	800c08c <Calculate_FreqOverAll+0x13c>
			{
				if(i ==0)
 800bffe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c000:	2b00      	cmp	r3, #0
 800c002:	d10a      	bne.n	800c01a <Calculate_FreqOverAll+0xca>
				{
					x[i] = x[i];
 800c004:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c006:	009b      	lsls	r3, r3, #2
 800c008:	687a      	ldr	r2, [r7, #4]
 800c00a:	441a      	add	r2, r3
 800c00c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c00e:	009b      	lsls	r3, r3, #2
 800c010:	6879      	ldr	r1, [r7, #4]
 800c012:	440b      	add	r3, r1
 800c014:	6812      	ldr	r2, [r2, #0]
 800c016:	601a      	str	r2, [r3, #0]
 800c018:	e024      	b.n	800c064 <Calculate_FreqOverAll+0x114>
				}
				else
				{
					x[i] = (x[i] * 9807) / (2 * 3.1415926 * frequencyScale * i);
 800c01a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c01c:	009b      	lsls	r3, r3, #2
 800c01e:	687a      	ldr	r2, [r7, #4]
 800c020:	4413      	add	r3, r2
 800c022:	edd3 7a00 	vldr	s15, [r3]
 800c026:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 800c224 <Calculate_FreqOverAll+0x2d4>
 800c02a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c02e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800c032:	edd7 7a06 	vldr	s15, [r7, #24]
 800c036:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c03a:	ed9f 6b75 	vldr	d6, [pc, #468]	; 800c210 <Calculate_FreqOverAll+0x2c0>
 800c03e:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c042:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c044:	ee07 3a90 	vmov	s15, r3
 800c048:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c04c:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c050:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800c054:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c056:	009b      	lsls	r3, r3, #2
 800c058:	687a      	ldr	r2, [r7, #4]
 800c05a:	4413      	add	r3, r2
 800c05c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800c060:	edc3 7a00 	vstr	s15, [r3]

				}
				velocityPower += x[i] * x[i];
 800c064:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c066:	009b      	lsls	r3, r3, #2
 800c068:	687a      	ldr	r2, [r7, #4]
 800c06a:	4413      	add	r3, r2
 800c06c:	ed93 7a00 	vldr	s14, [r3]
 800c070:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c072:	009b      	lsls	r3, r3, #2
 800c074:	687a      	ldr	r2, [r7, #4]
 800c076:	4413      	add	r3, r2
 800c078:	edd3 7a00 	vldr	s15, [r3]
 800c07c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c080:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800c084:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c088:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	for(uint16_t i = 0; i < fftSize / 2; i++)
 800c08c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c08e:	3301      	adds	r3, #1
 800c090:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c092:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c096:	2b00      	cmp	r3, #0
 800c098:	da00      	bge.n	800c09c <Calculate_FreqOverAll+0x14c>
 800c09a:	3301      	adds	r3, #1
 800c09c:	105b      	asrs	r3, r3, #1
 800c09e:	429a      	cmp	r2, r3
 800c0a0:	dba5      	blt.n	800bfee <Calculate_FreqOverAll+0x9e>

	}

	//2021/0203/George
	//Calculate displacement power
	for(uint16_t i = 0; i < fftSize / 2; i++)
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800c0a6:	e04d      	b.n	800c144 <Calculate_FreqOverAll+0x1f4>
	{
			if(i < fftSize/2)
 800c0a8:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800c0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	da00      	bge.n	800c0b2 <Calculate_FreqOverAll+0x162>
 800c0b0:	3301      	adds	r3, #1
 800c0b2:	105b      	asrs	r3, r3, #1
 800c0b4:	429a      	cmp	r2, r3
 800c0b6:	da42      	bge.n	800c13e <Calculate_FreqOverAll+0x1ee>
			{
				if(i ==0)
 800c0b8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d10a      	bne.n	800c0d4 <Calculate_FreqOverAll+0x184>
				{
					x[i] = x[i];
 800c0be:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c0c0:	009b      	lsls	r3, r3, #2
 800c0c2:	687a      	ldr	r2, [r7, #4]
 800c0c4:	441a      	add	r2, r3
 800c0c6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c0c8:	009b      	lsls	r3, r3, #2
 800c0ca:	6879      	ldr	r1, [r7, #4]
 800c0cc:	440b      	add	r3, r1
 800c0ce:	6812      	ldr	r2, [r2, #0]
 800c0d0:	601a      	str	r2, [r3, #0]
 800c0d2:	e020      	b.n	800c116 <Calculate_FreqOverAll+0x1c6>
				}
				else
				{
					x[i] = (x[i]) / (2 * 3.1415926 * frequencyScale * i);
 800c0d4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c0d6:	009b      	lsls	r3, r3, #2
 800c0d8:	687a      	ldr	r2, [r7, #4]
 800c0da:	4413      	add	r3, r2
 800c0dc:	edd3 7a00 	vldr	s15, [r3]
 800c0e0:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800c0e4:	edd7 7a06 	vldr	s15, [r7, #24]
 800c0e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c0ec:	ed9f 6b48 	vldr	d6, [pc, #288]	; 800c210 <Calculate_FreqOverAll+0x2c0>
 800c0f0:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c0f4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c0f6:	ee07 3a90 	vmov	s15, r3
 800c0fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c0fe:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c102:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800c106:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c108:	009b      	lsls	r3, r3, #2
 800c10a:	687a      	ldr	r2, [r7, #4]
 800c10c:	4413      	add	r3, r2
 800c10e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800c112:	edc3 7a00 	vstr	s15, [r3]

				}
				displacementPower += x[i] * x[i];
 800c116:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c118:	009b      	lsls	r3, r3, #2
 800c11a:	687a      	ldr	r2, [r7, #4]
 800c11c:	4413      	add	r3, r2
 800c11e:	ed93 7a00 	vldr	s14, [r3]
 800c122:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c124:	009b      	lsls	r3, r3, #2
 800c126:	687a      	ldr	r2, [r7, #4]
 800c128:	4413      	add	r3, r2
 800c12a:	edd3 7a00 	vldr	s15, [r3]
 800c12e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c132:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c136:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c13a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	for(uint16_t i = 0; i < fftSize / 2; i++)
 800c13e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c140:	3301      	adds	r3, #1
 800c142:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800c144:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800c146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c148:	2b00      	cmp	r3, #0
 800c14a:	da00      	bge.n	800c14e <Calculate_FreqOverAll+0x1fe>
 800c14c:	3301      	adds	r3, #1
 800c14e:	105b      	asrs	r3, r3, #1
 800c150:	429a      	cmp	r2, r3
 800c152:	dba9      	blt.n	800c0a8 <Calculate_FreqOverAll+0x158>

	}

	//2021/0203/George2
	//TODO:calculate
	arm_max_f32(x, 2048, &displacementP2p, &displacement_index);
 800c154:	f107 030c 	add.w	r3, r7, #12
 800c158:	f107 0210 	add.w	r2, r7, #16
 800c15c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f7fc fd63 	bl	8008c2c <arm_max_f32>


	//2021/0203/George
	//TODO: improve formula from sqrt(ParsevalFftPower)/n to sqrt(2 * ParsevalFftPower)/n;
	AccelerationRMS = sqrt(2 * ParsevalFftPower)/n;
 800c166:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800c16a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c16e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c172:	eeb0 0b47 	vmov.f64	d0, d7
 800c176:	f00f ff03 	bl	801bf80 <sqrt>
 800c17a:	eeb0 5b40 	vmov.f64	d5, d0
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	ee07 3a90 	vmov	s15, r3
 800c184:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800c188:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800c18c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800c190:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	//2021/0203/George
	//TODO: improve formula from sqrt(velocityPower)/n to sqrt(2 * velocityPower)/n;
	statistic_value.Statistic_FreqOvall = AccelerationRMS;
 800c194:	4a24      	ldr	r2, [pc, #144]	; (800c228 <Calculate_FreqOverAll+0x2d8>)
 800c196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c198:	6293      	str	r3, [r2, #40]	; 0x28
	statistic_value.Statistic_SpeedOvall = sqrt(2 * velocityPower)/n; // unit : mm/s
 800c19a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800c19e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c1a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c1a6:	eeb0 0b47 	vmov.f64	d0, d7
 800c1aa:	f00f fee9 	bl	801bf80 <sqrt>
 800c1ae:	eeb0 5b40 	vmov.f64	d5, d0
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	ee07 3a90 	vmov	s15, r3
 800c1b8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800c1bc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800c1c0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800c1c4:	4b18      	ldr	r3, [pc, #96]	; (800c228 <Calculate_FreqOverAll+0x2d8>)
 800c1c6:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	statistic_value.Statistic_DisplacementOvall = 1000 * sqrt(2 * displacementPower)/n; // unit : um
 800c1ca:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c1ce:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c1d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c1d6:	eeb0 0b47 	vmov.f64	d0, d7
 800c1da:	f00f fed1 	bl	801bf80 <sqrt>
 800c1de:	eeb0 7b40 	vmov.f64	d7, d0
 800c1e2:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 800c218 <Calculate_FreqOverAll+0x2c8>
 800c1e6:	ee27 5b06 	vmul.f64	d5, d7, d6
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	ee07 3a90 	vmov	s15, r3
 800c1f0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800c1f4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800c1f8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800c1fc:	4b0a      	ldr	r3, [pc, #40]	; (800c228 <Calculate_FreqOverAll+0x2d8>)
 800c1fe:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	return AccelerationRMS;
 800c202:	bf00      	nop
}
 800c204:	3740      	adds	r7, #64	; 0x40
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}
 800c20a:	bf00      	nop
 800c20c:	f3af 8000 	nop.w
 800c210:	4d12d84a 	.word	0x4d12d84a
 800c214:	401921fb 	.word	0x401921fb
 800c218:	00000000 	.word	0x00000000
 800c21c:	408f4000 	.word	0x408f4000
 800c220:	466a6000 	.word	0x466a6000
 800c224:	46193c00 	.word	0x46193c00
 800c228:	20059d84 	.word	0x20059d84

0800c22c <Calculate_CosineSimilarity>:

//Wayne-- 20220301
//void Calculate_CosineSimilarity(void)
float Calculate_CosineSimilarity(float *Signal1, float *Signal2, uint16_t datasize)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	ed2d 8b02 	vpush	{d8}
 800c232:	b08a      	sub	sp, #40	; 0x28
 800c234:	af00      	add	r7, sp, #0
 800c236:	60f8      	str	r0, [r7, #12]
 800c238:	60b9      	str	r1, [r7, #8]
 800c23a:	4613      	mov	r3, r2
 800c23c:	80fb      	strh	r3, [r7, #6]

	//float Signal1[20]={1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9};
	//float Signal2[20]={1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.8};

    float data1sumsqrt = 0;
 800c23e:	f04f 0300 	mov.w	r3, #0
 800c242:	627b      	str	r3, [r7, #36]	; 0x24
    float data2sumsqrt = 0;
 800c244:	f04f 0300 	mov.w	r3, #0
 800c248:	623b      	str	r3, [r7, #32]
    float datasum = 0;
 800c24a:	f04f 0300 	mov.w	r3, #0
 800c24e:	61fb      	str	r3, [r7, #28]
    float datasumsqrt = 0;
 800c250:	f04f 0300 	mov.w	r3, #0
 800c254:	617b      	str	r3, [r7, #20]
    float ans = 0;
 800c256:	f04f 0300 	mov.w	r3, #0
 800c25a:	613b      	str	r3, [r7, #16]
    //float Array Size
	//datasize=sizeof(Signal1)/sizeof(float);
    for( uint16_t i = 0; i <  datasize; i++)
 800c25c:	2300      	movs	r3, #0
 800c25e:	837b      	strh	r3, [r7, #26]
 800c260:	e03e      	b.n	800c2e0 <Calculate_CosineSimilarity+0xb4>
    {
        datasum += Signal1[i] * Signal2[i];
 800c262:	8b7b      	ldrh	r3, [r7, #26]
 800c264:	009b      	lsls	r3, r3, #2
 800c266:	68fa      	ldr	r2, [r7, #12]
 800c268:	4413      	add	r3, r2
 800c26a:	ed93 7a00 	vldr	s14, [r3]
 800c26e:	8b7b      	ldrh	r3, [r7, #26]
 800c270:	009b      	lsls	r3, r3, #2
 800c272:	68ba      	ldr	r2, [r7, #8]
 800c274:	4413      	add	r3, r2
 800c276:	edd3 7a00 	vldr	s15, [r3]
 800c27a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c27e:	ed97 7a07 	vldr	s14, [r7, #28]
 800c282:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c286:	edc7 7a07 	vstr	s15, [r7, #28]
        data1sumsqrt += (Signal1[i] * Signal1[i]);
 800c28a:	8b7b      	ldrh	r3, [r7, #26]
 800c28c:	009b      	lsls	r3, r3, #2
 800c28e:	68fa      	ldr	r2, [r7, #12]
 800c290:	4413      	add	r3, r2
 800c292:	ed93 7a00 	vldr	s14, [r3]
 800c296:	8b7b      	ldrh	r3, [r7, #26]
 800c298:	009b      	lsls	r3, r3, #2
 800c29a:	68fa      	ldr	r2, [r7, #12]
 800c29c:	4413      	add	r3, r2
 800c29e:	edd3 7a00 	vldr	s15, [r3]
 800c2a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2a6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800c2aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c2ae:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        data2sumsqrt += (Signal2[i] * Signal2[i]);
 800c2b2:	8b7b      	ldrh	r3, [r7, #26]
 800c2b4:	009b      	lsls	r3, r3, #2
 800c2b6:	68ba      	ldr	r2, [r7, #8]
 800c2b8:	4413      	add	r3, r2
 800c2ba:	ed93 7a00 	vldr	s14, [r3]
 800c2be:	8b7b      	ldrh	r3, [r7, #26]
 800c2c0:	009b      	lsls	r3, r3, #2
 800c2c2:	68ba      	ldr	r2, [r7, #8]
 800c2c4:	4413      	add	r3, r2
 800c2c6:	edd3 7a00 	vldr	s15, [r3]
 800c2ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2ce:	ed97 7a08 	vldr	s14, [r7, #32]
 800c2d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c2d6:	edc7 7a08 	vstr	s15, [r7, #32]
    for( uint16_t i = 0; i <  datasize; i++)
 800c2da:	8b7b      	ldrh	r3, [r7, #26]
 800c2dc:	3301      	adds	r3, #1
 800c2de:	837b      	strh	r3, [r7, #26]
 800c2e0:	8b7a      	ldrh	r2, [r7, #26]
 800c2e2:	88fb      	ldrh	r3, [r7, #6]
 800c2e4:	429a      	cmp	r2, r3
 800c2e6:	d3bc      	bcc.n	800c262 <Calculate_CosineSimilarity+0x36>
	}


    datasumsqrt = sqrt(data1sumsqrt) * sqrt(data2sumsqrt);
 800c2e8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c2ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c2f0:	eeb0 0b47 	vmov.f64	d0, d7
 800c2f4:	f00f fe44 	bl	801bf80 <sqrt>
 800c2f8:	eeb0 8b40 	vmov.f64	d8, d0
 800c2fc:	edd7 7a08 	vldr	s15, [r7, #32]
 800c300:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c304:	eeb0 0b47 	vmov.f64	d0, d7
 800c308:	f00f fe3a 	bl	801bf80 <sqrt>
 800c30c:	eeb0 7b40 	vmov.f64	d7, d0
 800c310:	ee28 7b07 	vmul.f64	d7, d8, d7
 800c314:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800c318:	edc7 7a05 	vstr	s15, [r7, #20]

    ans = datasum / datasumsqrt;
 800c31c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c320:	ed97 7a05 	vldr	s14, [r7, #20]
 800c324:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c328:	edc7 7a04 	vstr	s15, [r7, #16]

    return ans;
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	ee07 3a90 	vmov	s15, r3
}
 800c332:	eeb0 0a67 	vmov.f32	s0, s15
 800c336:	3728      	adds	r7, #40	; 0x28
 800c338:	46bd      	mov	sp, r7
 800c33a:	ecbd 8b02 	vpop	{d8}
 800c33e:	bd80      	pop	{r7, pc}

0800c340 <delay_init>:
static uint16_t fac_ms=0;//ms延時倍乘數
//初始化延遲函式
//SYSTICK的時鐘固定為HCLK時鐘的1/8
//SYSCLK:系統時鐘
void delay_init(uint8_t SYSCLK)
{
 800c340:	b480      	push	{r7}
 800c342:	b083      	sub	sp, #12
 800c344:	af00      	add	r7, sp, #0
 800c346:	4603      	mov	r3, r0
 800c348:	71fb      	strb	r3, [r7, #7]
	SysTick->CTRL&=0xfffffffb;//bit2清空,選擇外部時鐘  HCLK/8
 800c34a:	4b0e      	ldr	r3, [pc, #56]	; (800c384 <delay_init+0x44>)
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	4a0d      	ldr	r2, [pc, #52]	; (800c384 <delay_init+0x44>)
 800c350:	f023 0304 	bic.w	r3, r3, #4
 800c354:	6013      	str	r3, [r2, #0]
	fac_us=SYSCLK/8;
 800c356:	79fb      	ldrb	r3, [r7, #7]
 800c358:	08db      	lsrs	r3, r3, #3
 800c35a:	b2da      	uxtb	r2, r3
 800c35c:	4b0a      	ldr	r3, [pc, #40]	; (800c388 <delay_init+0x48>)
 800c35e:	701a      	strb	r2, [r3, #0]
	fac_ms=(uint16_t)fac_us*1000;
 800c360:	4b09      	ldr	r3, [pc, #36]	; (800c388 <delay_init+0x48>)
 800c362:	781b      	ldrb	r3, [r3, #0]
 800c364:	b29b      	uxth	r3, r3
 800c366:	461a      	mov	r2, r3
 800c368:	0152      	lsls	r2, r2, #5
 800c36a:	1ad2      	subs	r2, r2, r3
 800c36c:	0092      	lsls	r2, r2, #2
 800c36e:	4413      	add	r3, r2
 800c370:	00db      	lsls	r3, r3, #3
 800c372:	b29a      	uxth	r2, r3
 800c374:	4b05      	ldr	r3, [pc, #20]	; (800c38c <delay_init+0x4c>)
 800c376:	801a      	strh	r2, [r3, #0]
}
 800c378:	bf00      	nop
 800c37a:	370c      	adds	r7, #12
 800c37c:	46bd      	mov	sp, r7
 800c37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c382:	4770      	bx	lr
 800c384:	e000e010 	.word	0xe000e010
 800c388:	2000021c 	.word	0x2000021c
 800c38c:	2000021e 	.word	0x2000021e

0800c390 <delay_ms>:

void delay_ms(uint16_t nms)
{
 800c390:	b480      	push	{r7}
 800c392:	b085      	sub	sp, #20
 800c394:	af00      	add	r7, sp, #0
 800c396:	4603      	mov	r3, r0
 800c398:	80fb      	strh	r3, [r7, #6]
	uint32_t temp;
	SysTick->LOAD=(uint32_t)nms*fac_ms;//時間載入(SysTick->LOAD為24bit)
 800c39a:	88fb      	ldrh	r3, [r7, #6]
 800c39c:	4a14      	ldr	r2, [pc, #80]	; (800c3f0 <delay_ms+0x60>)
 800c39e:	8812      	ldrh	r2, [r2, #0]
 800c3a0:	4611      	mov	r1, r2
 800c3a2:	4a14      	ldr	r2, [pc, #80]	; (800c3f4 <delay_ms+0x64>)
 800c3a4:	fb01 f303 	mul.w	r3, r1, r3
 800c3a8:	6053      	str	r3, [r2, #4]
	SysTick->VAL =0x00;           //清空計數器
 800c3aa:	4b12      	ldr	r3, [pc, #72]	; (800c3f4 <delay_ms+0x64>)
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	609a      	str	r2, [r3, #8]
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk;          //開始倒數
 800c3b0:	4b10      	ldr	r3, [pc, #64]	; (800c3f4 <delay_ms+0x64>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	4a0f      	ldr	r2, [pc, #60]	; (800c3f4 <delay_ms+0x64>)
 800c3b6:	f043 0301 	orr.w	r3, r3, #1
 800c3ba:	6013      	str	r3, [r2, #0]
	do
	{
		temp=SysTick->CTRL;
 800c3bc:	4b0d      	ldr	r3, [pc, #52]	; (800c3f4 <delay_ms+0x64>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	60fb      	str	r3, [r7, #12]
	}
	while(temp&0x01&&!(temp&(1<<16)));//等待時間到達
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	f003 0301 	and.w	r3, r3, #1
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d004      	beq.n	800c3d6 <delay_ms+0x46>
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d0f2      	beq.n	800c3bc <delay_ms+0x2c>
	SysTick->CTRL=0x00;       //關閉計數器
 800c3d6:	4b07      	ldr	r3, [pc, #28]	; (800c3f4 <delay_ms+0x64>)
 800c3d8:	2200      	movs	r2, #0
 800c3da:	601a      	str	r2, [r3, #0]
	SysTick->VAL =0X00;       //清空計數器
 800c3dc:	4b05      	ldr	r3, [pc, #20]	; (800c3f4 <delay_ms+0x64>)
 800c3de:	2200      	movs	r2, #0
 800c3e0:	609a      	str	r2, [r3, #8]
}
 800c3e2:	bf00      	nop
 800c3e4:	3714      	adds	r7, #20
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ec:	4770      	bx	lr
 800c3ee:	bf00      	nop
 800c3f0:	2000021e 	.word	0x2000021e
 800c3f4:	e000e010 	.word	0xe000e010

0800c3f8 <delay_us>:


//延時nus
//nus為要延時的us數.
void delay_us(uint32_t nus)
{
 800c3f8:	b480      	push	{r7}
 800c3fa:	b085      	sub	sp, #20
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	SysTick->LOAD=nus*fac_us; //時間載入
 800c400:	4b14      	ldr	r3, [pc, #80]	; (800c454 <delay_us+0x5c>)
 800c402:	781b      	ldrb	r3, [r3, #0]
 800c404:	4619      	mov	r1, r3
 800c406:	4a14      	ldr	r2, [pc, #80]	; (800c458 <delay_us+0x60>)
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	fb03 f301 	mul.w	r3, r3, r1
 800c40e:	6053      	str	r3, [r2, #4]
	SysTick->VAL=0x00;        //清空計數器
 800c410:	4b11      	ldr	r3, [pc, #68]	; (800c458 <delay_us+0x60>)
 800c412:	2200      	movs	r2, #0
 800c414:	609a      	str	r2, [r3, #8]
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk;      //開始倒數
 800c416:	4b10      	ldr	r3, [pc, #64]	; (800c458 <delay_us+0x60>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	4a0f      	ldr	r2, [pc, #60]	; (800c458 <delay_us+0x60>)
 800c41c:	f043 0301 	orr.w	r3, r3, #1
 800c420:	6013      	str	r3, [r2, #0]
	do
	{
		temp=SysTick->CTRL;
 800c422:	4b0d      	ldr	r3, [pc, #52]	; (800c458 <delay_us+0x60>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	60fb      	str	r3, [r7, #12]
	}
	while(temp&0x01&&!(temp&(1<<16)));//等待時間到達
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	f003 0301 	and.w	r3, r3, #1
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d004      	beq.n	800c43c <delay_us+0x44>
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d0f2      	beq.n	800c422 <delay_us+0x2a>
	SysTick->CTRL=0x00;       //關閉計數器
 800c43c:	4b06      	ldr	r3, [pc, #24]	; (800c458 <delay_us+0x60>)
 800c43e:	2200      	movs	r2, #0
 800c440:	601a      	str	r2, [r3, #0]
	SysTick->VAL =0X00;       //清空計數器
 800c442:	4b05      	ldr	r3, [pc, #20]	; (800c458 <delay_us+0x60>)
 800c444:	2200      	movs	r2, #0
 800c446:	609a      	str	r2, [r3, #8]
}
 800c448:	bf00      	nop
 800c44a:	3714      	adds	r7, #20
 800c44c:	46bd      	mov	sp, r7
 800c44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c452:	4770      	bx	lr
 800c454:	2000021c 	.word	0x2000021c
 800c458:	e000e010 	.word	0xe000e010

0800c45c <TM_Delay_Init>:

uint32_t multiplier;

void TM_Delay_Init(void) {
 800c45c:	b480      	push	{r7}
 800c45e:	af00      	add	r7, sp, #0
	/* While loop takes 4 cycles */
	/* For 1 us delay, we need to divide with 4M */
	multiplier = 122000000 / 4000000;
 800c460:	4b03      	ldr	r3, [pc, #12]	; (800c470 <TM_Delay_Init+0x14>)
 800c462:	221e      	movs	r2, #30
 800c464:	601a      	str	r2, [r3, #0]
}
 800c466:	bf00      	nop
 800c468:	46bd      	mov	sp, r7
 800c46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46e:	4770      	bx	lr
 800c470:	20059e94 	.word	0x20059e94

0800c474 <TM_DelayMicros>:

void TM_DelayMicros(uint32_t micros) {
 800c474:	b480      	push	{r7}
 800c476:	b083      	sub	sp, #12
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
	/* Multiply micros with multipler */
	/* Substract 10 */
	micros = micros * multiplier - 10;
 800c47c:	4b09      	ldr	r3, [pc, #36]	; (800c4a4 <TM_DelayMicros+0x30>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	687a      	ldr	r2, [r7, #4]
 800c482:	fb02 f303 	mul.w	r3, r2, r3
 800c486:	3b0a      	subs	r3, #10
 800c488:	607b      	str	r3, [r7, #4]
	/* 4 cycles for one loop */
	while (micros--);
 800c48a:	bf00      	nop
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	1e5a      	subs	r2, r3, #1
 800c490:	607a      	str	r2, [r7, #4]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d1fa      	bne.n	800c48c <TM_DelayMicros+0x18>
}
 800c496:	bf00      	nop
 800c498:	bf00      	nop
 800c49a:	370c      	adds	r7, #12
 800c49c:	46bd      	mov	sp, r7
 800c49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a2:	4770      	bx	lr
 800c4a4:	20059e94 	.word	0x20059e94

0800c4a8 <TM_DelayMillis>:

void TM_DelayMillis(uint32_t millis) {
 800c4a8:	b480      	push	{r7}
 800c4aa:	b083      	sub	sp, #12
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
	/* Multiply millis with multipler */
	/* Substract 10 */
	millis = 1000 * millis * multiplier - 10;
 800c4b0:	4b0b      	ldr	r3, [pc, #44]	; (800c4e0 <TM_DelayMillis+0x38>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	687a      	ldr	r2, [r7, #4]
 800c4b6:	fb02 f303 	mul.w	r3, r2, r3
 800c4ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c4be:	fb02 f303 	mul.w	r3, r2, r3
 800c4c2:	3b0a      	subs	r3, #10
 800c4c4:	607b      	str	r3, [r7, #4]
	/* 4 cycles for one loop */
	while (millis--);
 800c4c6:	bf00      	nop
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	1e5a      	subs	r2, r3, #1
 800c4cc:	607a      	str	r2, [r7, #4]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d1fa      	bne.n	800c4c8 <TM_DelayMillis+0x20>
}
 800c4d2:	bf00      	nop
 800c4d4:	bf00      	nop
 800c4d6:	370c      	adds	r7, #12
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4de:	4770      	bx	lr
 800c4e0:	20059e94 	.word	0x20059e94

0800c4e4 <SampleWave_Init>:
#include "main.h"
 float SampleWaveFET[2048];
 //float SampleWaveFET2[2048];

void SampleWave_Init(void)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 800c4ea:	b082      	sub	sp, #8
 800c4ec:	af00      	add	r7, sp, #0
	uint16_t samplesize;

	float SampleWavedata[]=
 800c4ee:	4b23      	ldr	r3, [pc, #140]	; (800c57c <SampleWave_Init+0x98>)
 800c4f0:	f242 0208 	movw	r2, #8200	; 0x2008
 800c4f4:	443a      	add	r2, r7
 800c4f6:	4413      	add	r3, r2
 800c4f8:	4a21      	ldr	r2, [pc, #132]	; (800c580 <SampleWave_Init+0x9c>)
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	4611      	mov	r1, r2
 800c4fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c502:	461a      	mov	r2, r3
 800c504:	f00a fece 	bl	80172a4 <memcpy>
		0.003728, 0.002692, 0.003466, 0.003264, 0.005057, 0.002263, 0.001583, 0.004547,
		0.000999, 0.006412, 0.002367, 0.000825, 0.002050, 0.005127, 0.004042, 0.003072,
	};
*/

	samplesize=sizeof(SampleWavedata)/sizeof(float);
 800c508:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c50c:	f242 0204 	movw	r2, #8196	; 0x2004
 800c510:	443a      	add	r2, r7
 800c512:	8013      	strh	r3, [r2, #0]
	for( uint16_t i = 0; i <  samplesize; i++)
 800c514:	2300      	movs	r3, #0
 800c516:	f242 0206 	movw	r2, #8198	; 0x2006
 800c51a:	443a      	add	r2, r7
 800c51c:	8013      	strh	r3, [r2, #0]
 800c51e:	e01c      	b.n	800c55a <SampleWave_Init+0x76>
	{
		SampleWaveFET[i] = SampleWavedata[i];
 800c520:	f242 0306 	movw	r3, #8198	; 0x2006
 800c524:	443b      	add	r3, r7
 800c526:	881a      	ldrh	r2, [r3, #0]
 800c528:	f242 0306 	movw	r3, #8198	; 0x2006
 800c52c:	443b      	add	r3, r7
 800c52e:	8819      	ldrh	r1, [r3, #0]
 800c530:	4b12      	ldr	r3, [pc, #72]	; (800c57c <SampleWave_Init+0x98>)
 800c532:	f242 0008 	movw	r0, #8200	; 0x2008
 800c536:	4438      	add	r0, r7
 800c538:	4403      	add	r3, r0
 800c53a:	0092      	lsls	r2, r2, #2
 800c53c:	4413      	add	r3, r2
 800c53e:	681a      	ldr	r2, [r3, #0]
 800c540:	4810      	ldr	r0, [pc, #64]	; (800c584 <SampleWave_Init+0xa0>)
 800c542:	008b      	lsls	r3, r1, #2
 800c544:	4403      	add	r3, r0
 800c546:	601a      	str	r2, [r3, #0]
	for( uint16_t i = 0; i <  samplesize; i++)
 800c548:	f242 0306 	movw	r3, #8198	; 0x2006
 800c54c:	443b      	add	r3, r7
 800c54e:	881b      	ldrh	r3, [r3, #0]
 800c550:	3301      	adds	r3, #1
 800c552:	f242 0206 	movw	r2, #8198	; 0x2006
 800c556:	443a      	add	r2, r7
 800c558:	8013      	strh	r3, [r2, #0]
 800c55a:	f242 0306 	movw	r3, #8198	; 0x2006
 800c55e:	443b      	add	r3, r7
 800c560:	881a      	ldrh	r2, [r3, #0]
 800c562:	f242 0304 	movw	r3, #8196	; 0x2004
 800c566:	443b      	add	r3, r7
 800c568:	881b      	ldrh	r3, [r3, #0]
 800c56a:	429a      	cmp	r2, r3
 800c56c:	d3d8      	bcc.n	800c520 <SampleWave_Init+0x3c>
		//SampleWaveFET2[i] = SampleWavedata2[i];
	}

}
 800c56e:	bf00      	nop
 800c570:	bf00      	nop
 800c572:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 800c576:	3708      	adds	r7, #8
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}
 800c57c:	ffffdffc 	.word	0xffffdffc
 800c580:	0801c170 	.word	0x0801c170
 800c584:	20059e98 	.word	0x20059e98

0800c588 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800c588:	b480      	push	{r7}
 800c58a:	b085      	sub	sp, #20
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	60f8      	str	r0, [r7, #12]
 800c590:	60b9      	str	r1, [r7, #8]
 800c592:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	4a07      	ldr	r2, [pc, #28]	; (800c5b4 <vApplicationGetIdleTaskMemory+0x2c>)
 800c598:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	4a06      	ldr	r2, [pc, #24]	; (800c5b8 <vApplicationGetIdleTaskMemory+0x30>)
 800c59e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2280      	movs	r2, #128	; 0x80
 800c5a4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800c5a6:	bf00      	nop
 800c5a8:	3714      	adds	r7, #20
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b0:	4770      	bx	lr
 800c5b2:	bf00      	nop
 800c5b4:	20000220 	.word	0x20000220
 800c5b8:	20000274 	.word	0x20000274

0800c5bc <readIICEEPROM_2402C>:
 * TODO: IIC Function
 *
 *
 * */
void readIICEEPROM_2402C(void)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b084      	sub	sp, #16
 800c5c0:	af04      	add	r7, sp, #16
	  HAL_I2C_Mem_Read(&hi2c2, ADDR_24LCxx_Read, 0, I2C_MEMADD_SIZE_16BIT,ReadBufferEEPROM,BufferSize, 1000);
 800c5c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c5c6:	9302      	str	r3, [sp, #8]
 800c5c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c5cc:	9301      	str	r3, [sp, #4]
 800c5ce:	4b05      	ldr	r3, [pc, #20]	; (800c5e4 <readIICEEPROM_2402C+0x28>)
 800c5d0:	9300      	str	r3, [sp, #0]
 800c5d2:	2302      	movs	r3, #2
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	21a1      	movs	r1, #161	; 0xa1
 800c5d8:	4803      	ldr	r0, [pc, #12]	; (800c5e8 <readIICEEPROM_2402C+0x2c>)
 800c5da:	f003 ff35 	bl	8010448 <HAL_I2C_Mem_Read>
}
 800c5de:	bf00      	nop
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}
 800c5e4:	2005c004 	.word	0x2005c004
 800c5e8:	2005bfb8 	.word	0x2005bfb8

0800c5ec <initialBootloaderParameter>:


//2021/0201/George
//TODO: InitialParameter
void initialBootloaderParameter()
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	af00      	add	r7, sp, #0
	USARTBLE.RxCount=0;
 800c5f0:	4b05      	ldr	r3, [pc, #20]	; (800c608 <initialBootloaderParameter+0x1c>)
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	605a      	str	r2, [r3, #4]
	HAL_UART_Receive_IT(&huart6, (uint8_t *)aRxBuffer, 1);
 800c5f6:	2201      	movs	r2, #1
 800c5f8:	4904      	ldr	r1, [pc, #16]	; (800c60c <initialBootloaderParameter+0x20>)
 800c5fa:	4805      	ldr	r0, [pc, #20]	; (800c610 <initialBootloaderParameter+0x24>)
 800c5fc:	f006 fdc2 	bl	8013184 <HAL_UART_Receive_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 800c600:	b662      	cpsie	i
}
 800c602:	bf00      	nop
	__enable_irq();
}
 800c604:	bf00      	nop
 800c606:	bd80      	pop	{r7, pc}
 800c608:	20060180 	.word	0x20060180
 800c60c:	20068444 	.word	0x20068444
 800c610:	200683c0 	.word	0x200683c0

0800c614 <initialADS1256DataBuffer>:

//2021/0201/George
//TODO : Initialize ADS1256 data buffer size
void initialADS1256DataBuffer()
{
 800c614:	b480      	push	{r7}
 800c616:	af00      	add	r7, sp, #0

	  dataLength = sizeof(dataRecive)/sizeof(float);
 800c618:	4b07      	ldr	r3, [pc, #28]	; (800c638 <initialADS1256DataBuffer+0x24>)
 800c61a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c61e:	601a      	str	r2, [r3, #0]
	  ADS1256.data_index = 0;
 800c620:	4b06      	ldr	r3, [pc, #24]	; (800c63c <initialADS1256DataBuffer+0x28>)
 800c622:	2200      	movs	r2, #0
 800c624:	601a      	str	r2, [r3, #0]
	  ADS1256.data_length = dataLength;
 800c626:	4b04      	ldr	r3, [pc, #16]	; (800c638 <initialADS1256DataBuffer+0x24>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	4a04      	ldr	r2, [pc, #16]	; (800c63c <initialADS1256DataBuffer+0x28>)
 800c62c:	6053      	str	r3, [r2, #4]
}
 800c62e:	bf00      	nop
 800c630:	46bd      	mov	sp, r7
 800c632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c636:	4770      	bx	lr
 800c638:	20000494 	.word	0x20000494
 800c63c:	20055d28 	.word	0x20055d28

0800c640 <InitialSetFreqStatisticBand>:

//2021/0202/George
//TODO: Set freq band
void InitialSetFreqStatisticBand()
{
 800c640:	b480      	push	{r7}
 800c642:	af00      	add	r7, sp, #0
	//2021/0204/George
	//TODO:Total 3 setting frequency broadband parameter
	freqSettingValueList.range1.Max = 1000;
 800c644:	4b0d      	ldr	r3, [pc, #52]	; (800c67c <InitialSetFreqStatisticBand+0x3c>)
 800c646:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c64a:	601a      	str	r2, [r3, #0]
	freqSettingValueList.range1.Min = 10;
 800c64c:	4b0b      	ldr	r3, [pc, #44]	; (800c67c <InitialSetFreqStatisticBand+0x3c>)
 800c64e:	220a      	movs	r2, #10
 800c650:	605a      	str	r2, [r3, #4]
	freqSettingValueList.range2.Max = 1000;
 800c652:	4b0a      	ldr	r3, [pc, #40]	; (800c67c <InitialSetFreqStatisticBand+0x3c>)
 800c654:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c658:	609a      	str	r2, [r3, #8]
	freqSettingValueList.range2.Min = 10;
 800c65a:	4b08      	ldr	r3, [pc, #32]	; (800c67c <InitialSetFreqStatisticBand+0x3c>)
 800c65c:	220a      	movs	r2, #10
 800c65e:	60da      	str	r2, [r3, #12]
	freqSettingValueList.range3.Max = 5000;
 800c660:	4b06      	ldr	r3, [pc, #24]	; (800c67c <InitialSetFreqStatisticBand+0x3c>)
 800c662:	f241 3288 	movw	r2, #5000	; 0x1388
 800c666:	611a      	str	r2, [r3, #16]
	freqSettingValueList.range3.Min = 1000;
 800c668:	4b04      	ldr	r3, [pc, #16]	; (800c67c <InitialSetFreqStatisticBand+0x3c>)
 800c66a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c66e:	615a      	str	r2, [r3, #20]
}
 800c670:	bf00      	nop
 800c672:	46bd      	mov	sp, r7
 800c674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c678:	4770      	bx	lr
 800c67a:	bf00      	nop
 800c67c:	20059d6c 	.word	0x20059d6c

0800c680 <InitialDelayFunction>:

//2021/0202/George
//TODO: Initialize delay systick
void InitialDelayFunction()
{
 800c680:	b580      	push	{r7, lr}
 800c682:	af00      	add	r7, sp, #0
	   delay_init(216);
 800c684:	20d8      	movs	r0, #216	; 0xd8
 800c686:	f7ff fe5b 	bl	800c340 <delay_init>
	   TM_Delay_Init();
 800c68a:	f7ff fee7 	bl	800c45c <TM_Delay_Init>
}
 800c68e:	bf00      	nop
 800c690:	bd80      	pop	{r7, pc}
	...

0800c694 <InitialADS1256Register>:

//2021/0202/George
//TODO: Initialize ADS1256 parameter
void InitialADS1256Register()
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b082      	sub	sp, #8
 800c698:	af00      	add	r7, sp, #0
	//TODO: Reset ADS1256
	   writeCMD(CMD_RESET);
 800c69a:	20fe      	movs	r0, #254	; 0xfe
 800c69c:	f7fe ffd0 	bl	800b640 <writeCMD>
	   delay_ms(10);
 800c6a0:	200a      	movs	r0, #10
 800c6a2:	f7ff fe75 	bl	800c390 <delay_ms>
	   TM_DelayMicros(1);
 800c6a6:	2001      	movs	r0, #1
 800c6a8:	f7ff fee4 	bl	800c474 <TM_DelayMicros>

	   //TODO: Initialize ADS1256 parameter (Buffer, PGA, Sampling rate)
	   setBuffer();
 800c6ac:	f7ff f8a2 	bl	800b7f4 <setBuffer>
	   setPGA(PGA_GAIN1);
 800c6b0:	2000      	movs	r0, #0
 800c6b2:	f7ff f81d 	bl	800b6f0 <setPGA>
	   setDataRate(DRATE_15000);
 800c6b6:	20e0      	movs	r0, #224	; 0xe0
 800c6b8:	f7fe ffe2 	bl	800b680 <setDataRate>

	   //TODO: Read chip id
	   id = readChipID();
 800c6bc:	f7ff f844 	bl	800b748 <readChipID>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	461a      	mov	r2, r3
 800c6c4:	4b1d      	ldr	r3, [pc, #116]	; (800c73c <InitialADS1256Register+0xa8>)
 800c6c6:	701a      	strb	r2, [r3, #0]

	   delay_ms(500);// wait for initialization
 800c6c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c6cc:	f7ff fe60 	bl	800c390 <delay_ms>

	   uint8_t  posChannels [4] = {AIN0, AIN2, AIN4, AIN6};
 800c6d0:	4b1b      	ldr	r3, [pc, #108]	; (800c740 <InitialADS1256Register+0xac>)
 800c6d2:	607b      	str	r3, [r7, #4]
	   uint8_t  negChannels [4] = {AIN1, AIN3, AIN5, AIN7};
 800c6d4:	4b1b      	ldr	r3, [pc, #108]	; (800c744 <InitialADS1256Register+0xb0>)
 800c6d6:	603b      	str	r3, [r7, #0]

	   //TODO: Set differential analog input channel.
	   setDIFFChannel(posChannels[0], negChannels[0]);
 800c6d8:	793b      	ldrb	r3, [r7, #4]
 800c6da:	783a      	ldrb	r2, [r7, #0]
 800c6dc:	4611      	mov	r1, r2
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f7fe ff96 	bl	800b610 <setDIFFChannel>
	   delay_us(15);
 800c6e4:	200f      	movs	r0, #15
 800c6e6:	f7ff fe87 	bl	800c3f8 <delay_us>
	   writeCMD(CMD_SYNC);    // SYNC command
 800c6ea:	20fc      	movs	r0, #252	; 0xfc
 800c6ec:	f7fe ffa8 	bl	800b640 <writeCMD>
	   delay_us(10);
 800c6f0:	200a      	movs	r0, #10
 800c6f2:	f7ff fe81 	bl	800c3f8 <delay_us>
	   writeCMD(CMD_WAKEUP);  // WAKEUP command
 800c6f6:	2000      	movs	r0, #0
 800c6f8:	f7fe ffa2 	bl	800b640 <writeCMD>
	   delay_us(15); // min delay: t11 = 4 * 1 / 7,68 Mhz = 0,52 micro sec
 800c6fc:	200f      	movs	r0, #15
 800c6fe:	f7ff fe7b 	bl	800c3f8 <delay_us>



	   //TODO: Set continuous mode.

		waitDRDY();
 800c702:	f7ff f803 	bl	800b70c <waitDRDY>
		CS_0();
 800c706:	2200      	movs	r2, #0
 800c708:	2110      	movs	r1, #16
 800c70a:	480f      	ldr	r0, [pc, #60]	; (800c748 <InitialADS1256Register+0xb4>)
 800c70c:	f003 fdc0 	bl	8010290 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, RDATACcmdbuffer ,1,50);
 800c710:	2332      	movs	r3, #50	; 0x32
 800c712:	2201      	movs	r2, #1
 800c714:	490d      	ldr	r1, [pc, #52]	; (800c74c <InitialADS1256Register+0xb8>)
 800c716:	480e      	ldr	r0, [pc, #56]	; (800c750 <InitialADS1256Register+0xbc>)
 800c718:	f005 fcc9 	bl	80120ae <HAL_SPI_Transmit>
		delay_ms(25); // min delay: t6 = 50 * 1/7.68 MHz = 6.5 microseconds
 800c71c:	2019      	movs	r0, #25
 800c71e:	f7ff fe37 	bl	800c390 <delay_ms>
		ADS1256.data_startFlag = 1;
 800c722:	4a0c      	ldr	r2, [pc, #48]	; (800c754 <InitialADS1256Register+0xc0>)
 800c724:	f244 0308 	movw	r3, #16392	; 0x4008
 800c728:	4413      	add	r3, r2
 800c72a:	2201      	movs	r2, #1
 800c72c:	701a      	strb	r2, [r3, #0]
		delay_us(1);
 800c72e:	2001      	movs	r0, #1
 800c730:	f7ff fe62 	bl	800c3f8 <delay_us>

}
 800c734:	bf00      	nop
 800c736:	3708      	adds	r7, #8
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}
 800c73c:	20000474 	.word	0x20000474
 800c740:	06040200 	.word	0x06040200
 800c744:	07050301 	.word	0x07050301
 800c748:	40020000 	.word	0x40020000
 800c74c:	20000004 	.word	0x20000004
 800c750:	20068448 	.word	0x20068448
 800c754:	20055d28 	.word	0x20055d28

0800c758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800c758:	b5b0      	push	{r4, r5, r7, lr}
 800c75a:	b096      	sub	sp, #88	; 0x58
 800c75c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800c75e:	f002 fe5a 	bl	800f416 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800c762:	f000 f881 	bl	800c868 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800c766:	f000 fa0f 	bl	800cb88 <MX_GPIO_Init>
  MX_DMA_Init();
 800c76a:	f000 f9df 	bl	800cb2c <MX_DMA_Init>
  MX_SPI1_Init();
 800c76e:	f000 f96f 	bl	800ca50 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 800c772:	f000 f9ab 	bl	800cacc <MX_USART6_UART_Init>
  MX_I2C2_Init();
 800c776:	f000 f90d 	bl	800c994 <MX_I2C2_Init>
  MX_IWDG_Init();
 800c77a:	f000 f94b 	bl	800ca14 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  //2021/0319/George/HTi
  //TODO:PB6 for IEPE output
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800c77e:	2201      	movs	r2, #1
 800c780:	2140      	movs	r1, #64	; 0x40
 800c782:	4830      	ldr	r0, [pc, #192]	; (800c844 <main+0xec>)
 800c784:	f003 fd84 	bl	8010290 <HAL_GPIO_WritePin>

  //2021/0201/George
  //TODO: InitialParameter
  initialBootloaderParameter();
 800c788:	f7ff ff30 	bl	800c5ec <initialBootloaderParameter>
  initialADS1256DataBuffer();
 800c78c:	f7ff ff42 	bl	800c614 <initialADS1256DataBuffer>

   //2021/0201/George
   //TODO: Initialize Frequency range to collection to feature
   InitialSetFreqStatisticBand();
 800c790:	f7ff ff56 	bl	800c640 <InitialSetFreqStatisticBand>

   //2021/0202/George
   //TODO: Initialize delay systick
   InitialDelayFunction();
 800c794:	f7ff ff74 	bl	800c680 <InitialDelayFunction>

   //2021/0202/George
   //TODO: Testing EEProm
   readIICEEPROM_2402C();
 800c798:	f7ff ff10 	bl	800c5bc <readIICEEPROM_2402C>

   //2021/0202/George
   //TODO: Initialize ADS1256 parameter
   InitialADS1256Register();
 800c79c:	f7ff ff7a 	bl	800c694 <InitialADS1256Register>

   /*TODO: Initialize SampleWave
   20220301--by Wayne*/
   SampleWave_Init();
 800c7a0:	f7ff fea0 	bl	800c4e4 <SampleWave_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of adcBinarySem */
  osSemaphoreDef(adcBinarySem);
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	653b      	str	r3, [r7, #80]	; 0x50
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	657b      	str	r3, [r7, #84]	; 0x54
  adcBinarySemHandle = osSemaphoreCreate(osSemaphore(adcBinarySem), 1);
 800c7ac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c7b0:	2101      	movs	r1, #1
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f008 f8db 	bl	801496e <osSemaphoreCreate>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	4a23      	ldr	r2, [pc, #140]	; (800c848 <main+0xf0>)
 800c7bc:	6013      	str	r3, [r2, #0]

  /* definition and creation of I2cBinarySem */
  osSemaphoreDef(I2cBinarySem);
 800c7be:	2300      	movs	r3, #0
 800c7c0:	64bb      	str	r3, [r7, #72]	; 0x48
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  I2cBinarySemHandle = osSemaphoreCreate(osSemaphore(I2cBinarySem), 1);
 800c7c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c7ca:	2101      	movs	r1, #1
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	f008 f8ce 	bl	801496e <osSemaphoreCreate>
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	4a1d      	ldr	r2, [pc, #116]	; (800c84c <main+0xf4>)
 800c7d6:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of adcQueue */
  osMessageQDef(adcQueue, 16, long);
 800c7d8:	4b1d      	ldr	r3, [pc, #116]	; (800c850 <main+0xf8>)
 800c7da:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800c7de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c7e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  adcQueueHandle = osMessageCreate(osMessageQ(adcQueue), NULL);
 800c7e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c7e8:	2100      	movs	r1, #0
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	f008 f8f1 	bl	80149d2 <osMessageCreate>
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	4a18      	ldr	r2, [pc, #96]	; (800c854 <main+0xfc>)
 800c7f4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ADC_Task */
  osThreadDef(ADC_Task, ADC_Thread, osPriorityRealtime, 0, 200);
 800c7f6:	4b18      	ldr	r3, [pc, #96]	; (800c858 <main+0x100>)
 800c7f8:	f107 041c 	add.w	r4, r7, #28
 800c7fc:	461d      	mov	r5, r3
 800c7fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c800:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c802:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c806:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ADC_TaskHandle = osThreadCreate(osThread(ADC_Task), NULL);
 800c80a:	f107 031c 	add.w	r3, r7, #28
 800c80e:	2100      	movs	r1, #0
 800c810:	4618      	mov	r0, r3
 800c812:	f008 f860 	bl	80148d6 <osThreadCreate>
 800c816:	4603      	mov	r3, r0
 800c818:	4a10      	ldr	r2, [pc, #64]	; (800c85c <main+0x104>)
 800c81a:	6013      	str	r3, [r2, #0]

  /* definition and creation of FFT_Task */
  osThreadDef(FFT_Task, FFT_Thread, osPriorityHigh, 0, 8192);
 800c81c:	4b10      	ldr	r3, [pc, #64]	; (800c860 <main+0x108>)
 800c81e:	463c      	mov	r4, r7
 800c820:	461d      	mov	r5, r3
 800c822:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c824:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c826:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c82a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  FFT_TaskHandle = osThreadCreate(osThread(FFT_Task), NULL);
 800c82e:	463b      	mov	r3, r7
 800c830:	2100      	movs	r1, #0
 800c832:	4618      	mov	r0, r3
 800c834:	f008 f84f 	bl	80148d6 <osThreadCreate>
 800c838:	4603      	mov	r3, r0
 800c83a:	4a0a      	ldr	r2, [pc, #40]	; (800c864 <main+0x10c>)
 800c83c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800c83e:	f008 f843 	bl	80148c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800c842:	e7fe      	b.n	800c842 <main+0xea>
 800c844:	40020400 	.word	0x40020400
 800c848:	2005c10c 	.word	0x2005c10c
 800c84c:	2006c574 	.word	0x2006c574
 800c850:	0801e188 	.word	0x0801e188
 800c854:	20060174 	.word	0x20060174
 800c858:	0801e198 	.word	0x0801e198
 800c85c:	2005c110 	.word	0x2005c110
 800c860:	0801e1b4 	.word	0x0801e1b4
 800c864:	2005c104 	.word	0x2005c104

0800c868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b0b8      	sub	sp, #224	; 0xe0
 800c86c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c86e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800c872:	2234      	movs	r2, #52	; 0x34
 800c874:	2100      	movs	r1, #0
 800c876:	4618      	mov	r0, r3
 800c878:	f00a fd22 	bl	80172c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c87c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800c880:	2200      	movs	r2, #0
 800c882:	601a      	str	r2, [r3, #0]
 800c884:	605a      	str	r2, [r3, #4]
 800c886:	609a      	str	r2, [r3, #8]
 800c888:	60da      	str	r2, [r3, #12]
 800c88a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c88c:	f107 0308 	add.w	r3, r7, #8
 800c890:	2290      	movs	r2, #144	; 0x90
 800c892:	2100      	movs	r1, #0
 800c894:	4618      	mov	r0, r3
 800c896:	f00a fd13 	bl	80172c0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800c89a:	4b3c      	ldr	r3, [pc, #240]	; (800c98c <SystemClock_Config+0x124>)
 800c89c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c89e:	4a3b      	ldr	r2, [pc, #236]	; (800c98c <SystemClock_Config+0x124>)
 800c8a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c8a4:	6413      	str	r3, [r2, #64]	; 0x40
 800c8a6:	4b39      	ldr	r3, [pc, #228]	; (800c98c <SystemClock_Config+0x124>)
 800c8a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c8ae:	607b      	str	r3, [r7, #4]
 800c8b0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c8b2:	4b37      	ldr	r3, [pc, #220]	; (800c990 <SystemClock_Config+0x128>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	4a36      	ldr	r2, [pc, #216]	; (800c990 <SystemClock_Config+0x128>)
 800c8b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c8bc:	6013      	str	r3, [r2, #0]
 800c8be:	4b34      	ldr	r3, [pc, #208]	; (800c990 <SystemClock_Config+0x128>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c8c6:	603b      	str	r3, [r7, #0]
 800c8c8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800c8ca:	230a      	movs	r3, #10
 800c8cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800c8d6:	2310      	movs	r3, #16
 800c8d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800c8dc:	2301      	movs	r3, #1
 800c8de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c8e2:	2302      	movs	r3, #2
 800c8e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 800c8ee:	2308      	movs	r3, #8
 800c8f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 800c8f4:	23d8      	movs	r3, #216	; 0xd8
 800c8f6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800c8fa:	2302      	movs	r3, #2
 800c8fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800c900:	2302      	movs	r3, #2
 800c902:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c906:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800c90a:	4618      	mov	r0, r3
 800c90c:	f004 fa4e 	bl	8010dac <HAL_RCC_OscConfig>
 800c910:	4603      	mov	r3, r0
 800c912:	2b00      	cmp	r3, #0
 800c914:	d001      	beq.n	800c91a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800c916:	f000 feeb 	bl	800d6f0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800c91a:	f004 f9f7 	bl	8010d0c <HAL_PWREx_EnableOverDrive>
 800c91e:	4603      	mov	r3, r0
 800c920:	2b00      	cmp	r3, #0
 800c922:	d001      	beq.n	800c928 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800c924:	f000 fee4 	bl	800d6f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c928:	230f      	movs	r3, #15
 800c92a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c92e:	2302      	movs	r3, #2
 800c930:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c934:	2300      	movs	r3, #0
 800c936:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800c93a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800c93e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800c942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c946:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800c94a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800c94e:	2107      	movs	r1, #7
 800c950:	4618      	mov	r0, r3
 800c952:	f004 fcd9 	bl	8011308 <HAL_RCC_ClockConfig>
 800c956:	4603      	mov	r3, r0
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d001      	beq.n	800c960 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 800c95c:	f000 fec8 	bl	800d6f0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_I2C2;
 800c960:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 800c964:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800c966:	2300      	movs	r3, #0
 800c968:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800c96a:	2300      	movs	r3, #0
 800c96c:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c96e:	f107 0308 	add.w	r3, r7, #8
 800c972:	4618      	mov	r0, r3
 800c974:	f004 fec8 	bl	8011708 <HAL_RCCEx_PeriphCLKConfig>
 800c978:	4603      	mov	r3, r0
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d001      	beq.n	800c982 <SystemClock_Config+0x11a>
  {
    Error_Handler();
 800c97e:	f000 feb7 	bl	800d6f0 <Error_Handler>
  }
}
 800c982:	bf00      	nop
 800c984:	37e0      	adds	r7, #224	; 0xe0
 800c986:	46bd      	mov	sp, r7
 800c988:	bd80      	pop	{r7, pc}
 800c98a:	bf00      	nop
 800c98c:	40023800 	.word	0x40023800
 800c990:	40007000 	.word	0x40007000

0800c994 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800c998:	4b1b      	ldr	r3, [pc, #108]	; (800ca08 <MX_I2C2_Init+0x74>)
 800c99a:	4a1c      	ldr	r2, [pc, #112]	; (800ca0c <MX_I2C2_Init+0x78>)
 800c99c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 800c99e:	4b1a      	ldr	r3, [pc, #104]	; (800ca08 <MX_I2C2_Init+0x74>)
 800c9a0:	4a1b      	ldr	r2, [pc, #108]	; (800ca10 <MX_I2C2_Init+0x7c>)
 800c9a2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 8;
 800c9a4:	4b18      	ldr	r3, [pc, #96]	; (800ca08 <MX_I2C2_Init+0x74>)
 800c9a6:	2208      	movs	r2, #8
 800c9a8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800c9aa:	4b17      	ldr	r3, [pc, #92]	; (800ca08 <MX_I2C2_Init+0x74>)
 800c9ac:	2201      	movs	r2, #1
 800c9ae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800c9b0:	4b15      	ldr	r3, [pc, #84]	; (800ca08 <MX_I2C2_Init+0x74>)
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800c9b6:	4b14      	ldr	r3, [pc, #80]	; (800ca08 <MX_I2C2_Init+0x74>)
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800c9bc:	4b12      	ldr	r3, [pc, #72]	; (800ca08 <MX_I2C2_Init+0x74>)
 800c9be:	2200      	movs	r2, #0
 800c9c0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 800c9c2:	4b11      	ldr	r3, [pc, #68]	; (800ca08 <MX_I2C2_Init+0x74>)
 800c9c4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c9c8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800c9ca:	4b0f      	ldr	r3, [pc, #60]	; (800ca08 <MX_I2C2_Init+0x74>)
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800c9d0:	480d      	ldr	r0, [pc, #52]	; (800ca08 <MX_I2C2_Init+0x74>)
 800c9d2:	f003 fca9 	bl	8010328 <HAL_I2C_Init>
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d001      	beq.n	800c9e0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800c9dc:	f000 fe88 	bl	800d6f0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800c9e0:	2100      	movs	r1, #0
 800c9e2:	4809      	ldr	r0, [pc, #36]	; (800ca08 <MX_I2C2_Init+0x74>)
 800c9e4:	f004 f89c 	bl	8010b20 <HAL_I2CEx_ConfigAnalogFilter>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d001      	beq.n	800c9f2 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800c9ee:	f000 fe7f 	bl	800d6f0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800c9f2:	2100      	movs	r1, #0
 800c9f4:	4804      	ldr	r0, [pc, #16]	; (800ca08 <MX_I2C2_Init+0x74>)
 800c9f6:	f004 f8de 	bl	8010bb6 <HAL_I2CEx_ConfigDigitalFilter>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d001      	beq.n	800ca04 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 800ca00:	f000 fe76 	bl	800d6f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800ca04:	bf00      	nop
 800ca06:	bd80      	pop	{r7, pc}
 800ca08:	2005bfb8 	.word	0x2005bfb8
 800ca0c:	40005800 	.word	0x40005800
 800ca10:	20404768 	.word	0x20404768

0800ca14 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800ca18:	4b0b      	ldr	r3, [pc, #44]	; (800ca48 <MX_IWDG_Init+0x34>)
 800ca1a:	4a0c      	ldr	r2, [pc, #48]	; (800ca4c <MX_IWDG_Init+0x38>)
 800ca1c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_128;
 800ca1e:	4b0a      	ldr	r3, [pc, #40]	; (800ca48 <MX_IWDG_Init+0x34>)
 800ca20:	2205      	movs	r2, #5
 800ca22:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 800ca24:	4b08      	ldr	r3, [pc, #32]	; (800ca48 <MX_IWDG_Init+0x34>)
 800ca26:	f640 72ff 	movw	r2, #4095	; 0xfff
 800ca2a:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 3096;
 800ca2c:	4b06      	ldr	r3, [pc, #24]	; (800ca48 <MX_IWDG_Init+0x34>)
 800ca2e:	f640 4218 	movw	r2, #3096	; 0xc18
 800ca32:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800ca34:	4804      	ldr	r0, [pc, #16]	; (800ca48 <MX_IWDG_Init+0x34>)
 800ca36:	f004 f90a 	bl	8010c4e <HAL_IWDG_Init>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d001      	beq.n	800ca44 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 800ca40:	f000 fe56 	bl	800d6f0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800ca44:	bf00      	nop
 800ca46:	bd80      	pop	{r7, pc}
 800ca48:	2005bfa8 	.word	0x2005bfa8
 800ca4c:	40003000 	.word	0x40003000

0800ca50 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800ca54:	4b1b      	ldr	r3, [pc, #108]	; (800cac4 <MX_SPI1_Init+0x74>)
 800ca56:	4a1c      	ldr	r2, [pc, #112]	; (800cac8 <MX_SPI1_Init+0x78>)
 800ca58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800ca5a:	4b1a      	ldr	r3, [pc, #104]	; (800cac4 <MX_SPI1_Init+0x74>)
 800ca5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 800ca60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800ca62:	4b18      	ldr	r3, [pc, #96]	; (800cac4 <MX_SPI1_Init+0x74>)
 800ca64:	2200      	movs	r2, #0
 800ca66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800ca68:	4b16      	ldr	r3, [pc, #88]	; (800cac4 <MX_SPI1_Init+0x74>)
 800ca6a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800ca6e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800ca70:	4b14      	ldr	r3, [pc, #80]	; (800cac4 <MX_SPI1_Init+0x74>)
 800ca72:	2200      	movs	r2, #0
 800ca74:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800ca76:	4b13      	ldr	r3, [pc, #76]	; (800cac4 <MX_SPI1_Init+0x74>)
 800ca78:	2201      	movs	r2, #1
 800ca7a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800ca7c:	4b11      	ldr	r3, [pc, #68]	; (800cac4 <MX_SPI1_Init+0x74>)
 800ca7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ca82:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800ca84:	4b0f      	ldr	r3, [pc, #60]	; (800cac4 <MX_SPI1_Init+0x74>)
 800ca86:	2228      	movs	r2, #40	; 0x28
 800ca88:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800ca8a:	4b0e      	ldr	r3, [pc, #56]	; (800cac4 <MX_SPI1_Init+0x74>)
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800ca90:	4b0c      	ldr	r3, [pc, #48]	; (800cac4 <MX_SPI1_Init+0x74>)
 800ca92:	2200      	movs	r2, #0
 800ca94:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ca96:	4b0b      	ldr	r3, [pc, #44]	; (800cac4 <MX_SPI1_Init+0x74>)
 800ca98:	2200      	movs	r2, #0
 800ca9a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800ca9c:	4b09      	ldr	r3, [pc, #36]	; (800cac4 <MX_SPI1_Init+0x74>)
 800ca9e:	2207      	movs	r2, #7
 800caa0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800caa2:	4b08      	ldr	r3, [pc, #32]	; (800cac4 <MX_SPI1_Init+0x74>)
 800caa4:	2200      	movs	r2, #0
 800caa6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800caa8:	4b06      	ldr	r3, [pc, #24]	; (800cac4 <MX_SPI1_Init+0x74>)
 800caaa:	2200      	movs	r2, #0
 800caac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800caae:	4805      	ldr	r0, [pc, #20]	; (800cac4 <MX_SPI1_Init+0x74>)
 800cab0:	f005 fa52 	bl	8011f58 <HAL_SPI_Init>
 800cab4:	4603      	mov	r3, r0
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d001      	beq.n	800cabe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800caba:	f000 fe19 	bl	800d6f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800cabe:	bf00      	nop
 800cac0:	bd80      	pop	{r7, pc}
 800cac2:	bf00      	nop
 800cac4:	20068448 	.word	0x20068448
 800cac8:	40013000 	.word	0x40013000

0800cacc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800cad0:	4b14      	ldr	r3, [pc, #80]	; (800cb24 <MX_USART6_UART_Init+0x58>)
 800cad2:	4a15      	ldr	r2, [pc, #84]	; (800cb28 <MX_USART6_UART_Init+0x5c>)
 800cad4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800cad6:	4b13      	ldr	r3, [pc, #76]	; (800cb24 <MX_USART6_UART_Init+0x58>)
 800cad8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800cadc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800cade:	4b11      	ldr	r3, [pc, #68]	; (800cb24 <MX_USART6_UART_Init+0x58>)
 800cae0:	2200      	movs	r2, #0
 800cae2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800cae4:	4b0f      	ldr	r3, [pc, #60]	; (800cb24 <MX_USART6_UART_Init+0x58>)
 800cae6:	2200      	movs	r2, #0
 800cae8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800caea:	4b0e      	ldr	r3, [pc, #56]	; (800cb24 <MX_USART6_UART_Init+0x58>)
 800caec:	2200      	movs	r2, #0
 800caee:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800caf0:	4b0c      	ldr	r3, [pc, #48]	; (800cb24 <MX_USART6_UART_Init+0x58>)
 800caf2:	220c      	movs	r2, #12
 800caf4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800caf6:	4b0b      	ldr	r3, [pc, #44]	; (800cb24 <MX_USART6_UART_Init+0x58>)
 800caf8:	2200      	movs	r2, #0
 800cafa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800cafc:	4b09      	ldr	r3, [pc, #36]	; (800cb24 <MX_USART6_UART_Init+0x58>)
 800cafe:	2200      	movs	r2, #0
 800cb00:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800cb02:	4b08      	ldr	r3, [pc, #32]	; (800cb24 <MX_USART6_UART_Init+0x58>)
 800cb04:	2200      	movs	r2, #0
 800cb06:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800cb08:	4b06      	ldr	r3, [pc, #24]	; (800cb24 <MX_USART6_UART_Init+0x58>)
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800cb0e:	4805      	ldr	r0, [pc, #20]	; (800cb24 <MX_USART6_UART_Init+0x58>)
 800cb10:	f006 faea 	bl	80130e8 <HAL_UART_Init>
 800cb14:	4603      	mov	r3, r0
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d001      	beq.n	800cb1e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800cb1a:	f000 fde9 	bl	800d6f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800cb1e:	bf00      	nop
 800cb20:	bd80      	pop	{r7, pc}
 800cb22:	bf00      	nop
 800cb24:	200683c0 	.word	0x200683c0
 800cb28:	40011400 	.word	0x40011400

0800cb2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b082      	sub	sp, #8
 800cb30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800cb32:	4b14      	ldr	r3, [pc, #80]	; (800cb84 <MX_DMA_Init+0x58>)
 800cb34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb36:	4a13      	ldr	r2, [pc, #76]	; (800cb84 <MX_DMA_Init+0x58>)
 800cb38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cb3c:	6313      	str	r3, [r2, #48]	; 0x30
 800cb3e:	4b11      	ldr	r3, [pc, #68]	; (800cb84 <MX_DMA_Init+0x58>)
 800cb40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cb46:	607b      	str	r3, [r7, #4]
 800cb48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	2105      	movs	r1, #5
 800cb4e:	2038      	movs	r0, #56	; 0x38
 800cb50:	f002 fd99 	bl	800f686 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800cb54:	2038      	movs	r0, #56	; 0x38
 800cb56:	f002 fdb2 	bl	800f6be <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	2105      	movs	r1, #5
 800cb5e:	203b      	movs	r0, #59	; 0x3b
 800cb60:	f002 fd91 	bl	800f686 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800cb64:	203b      	movs	r0, #59	; 0x3b
 800cb66:	f002 fdaa 	bl	800f6be <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	2105      	movs	r1, #5
 800cb6e:	2045      	movs	r0, #69	; 0x45
 800cb70:	f002 fd89 	bl	800f686 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800cb74:	2045      	movs	r0, #69	; 0x45
 800cb76:	f002 fda2 	bl	800f6be <HAL_NVIC_EnableIRQ>

}
 800cb7a:	bf00      	nop
 800cb7c:	3708      	adds	r7, #8
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}
 800cb82:	bf00      	nop
 800cb84:	40023800 	.word	0x40023800

0800cb88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b08a      	sub	sp, #40	; 0x28
 800cb8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cb8e:	f107 0314 	add.w	r3, r7, #20
 800cb92:	2200      	movs	r2, #0
 800cb94:	601a      	str	r2, [r3, #0]
 800cb96:	605a      	str	r2, [r3, #4]
 800cb98:	609a      	str	r2, [r3, #8]
 800cb9a:	60da      	str	r2, [r3, #12]
 800cb9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800cb9e:	4b42      	ldr	r3, [pc, #264]	; (800cca8 <MX_GPIO_Init+0x120>)
 800cba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cba2:	4a41      	ldr	r2, [pc, #260]	; (800cca8 <MX_GPIO_Init+0x120>)
 800cba4:	f043 0301 	orr.w	r3, r3, #1
 800cba8:	6313      	str	r3, [r2, #48]	; 0x30
 800cbaa:	4b3f      	ldr	r3, [pc, #252]	; (800cca8 <MX_GPIO_Init+0x120>)
 800cbac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbae:	f003 0301 	and.w	r3, r3, #1
 800cbb2:	613b      	str	r3, [r7, #16]
 800cbb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800cbb6:	4b3c      	ldr	r3, [pc, #240]	; (800cca8 <MX_GPIO_Init+0x120>)
 800cbb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbba:	4a3b      	ldr	r2, [pc, #236]	; (800cca8 <MX_GPIO_Init+0x120>)
 800cbbc:	f043 0302 	orr.w	r3, r3, #2
 800cbc0:	6313      	str	r3, [r2, #48]	; 0x30
 800cbc2:	4b39      	ldr	r3, [pc, #228]	; (800cca8 <MX_GPIO_Init+0x120>)
 800cbc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbc6:	f003 0302 	and.w	r3, r3, #2
 800cbca:	60fb      	str	r3, [r7, #12]
 800cbcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800cbce:	4b36      	ldr	r3, [pc, #216]	; (800cca8 <MX_GPIO_Init+0x120>)
 800cbd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbd2:	4a35      	ldr	r2, [pc, #212]	; (800cca8 <MX_GPIO_Init+0x120>)
 800cbd4:	f043 0308 	orr.w	r3, r3, #8
 800cbd8:	6313      	str	r3, [r2, #48]	; 0x30
 800cbda:	4b33      	ldr	r3, [pc, #204]	; (800cca8 <MX_GPIO_Init+0x120>)
 800cbdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbde:	f003 0308 	and.w	r3, r3, #8
 800cbe2:	60bb      	str	r3, [r7, #8]
 800cbe4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800cbe6:	4b30      	ldr	r3, [pc, #192]	; (800cca8 <MX_GPIO_Init+0x120>)
 800cbe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbea:	4a2f      	ldr	r2, [pc, #188]	; (800cca8 <MX_GPIO_Init+0x120>)
 800cbec:	f043 0304 	orr.w	r3, r3, #4
 800cbf0:	6313      	str	r3, [r2, #48]	; 0x30
 800cbf2:	4b2d      	ldr	r3, [pc, #180]	; (800cca8 <MX_GPIO_Init+0x120>)
 800cbf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbf6:	f003 0304 	and.w	r3, r3, #4
 800cbfa:	607b      	str	r3, [r7, #4]
 800cbfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800cbfe:	2200      	movs	r2, #0
 800cc00:	2110      	movs	r1, #16
 800cc02:	482a      	ldr	r0, [pc, #168]	; (800ccac <MX_GPIO_Init+0x124>)
 800cc04:	f003 fb44 	bl	8010290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 800cc08:	2200      	movs	r2, #0
 800cc0a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800cc0e:	4828      	ldr	r0, [pc, #160]	; (800ccb0 <MX_GPIO_Init+0x128>)
 800cc10:	f003 fb3e 	bl	8010290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800cc14:	2200      	movs	r2, #0
 800cc16:	2140      	movs	r1, #64	; 0x40
 800cc18:	4826      	ldr	r0, [pc, #152]	; (800ccb4 <MX_GPIO_Init+0x12c>)
 800cc1a:	f003 fb39 	bl	8010290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800cc1e:	2308      	movs	r3, #8
 800cc20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800cc22:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800cc26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cc2c:	f107 0314 	add.w	r3, r7, #20
 800cc30:	4619      	mov	r1, r3
 800cc32:	481e      	ldr	r0, [pc, #120]	; (800ccac <MX_GPIO_Init+0x124>)
 800cc34:	f003 f968 	bl	800ff08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800cc38:	2310      	movs	r3, #16
 800cc3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cc3c:	2301      	movs	r3, #1
 800cc3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cc40:	2301      	movs	r3, #1
 800cc42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cc44:	2303      	movs	r3, #3
 800cc46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cc48:	f107 0314 	add.w	r3, r7, #20
 800cc4c:	4619      	mov	r1, r3
 800cc4e:	4817      	ldr	r0, [pc, #92]	; (800ccac <MX_GPIO_Init+0x124>)
 800cc50:	f003 f95a 	bl	800ff08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800cc54:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800cc58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cc5a:	2301      	movs	r3, #1
 800cc5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc5e:	2300      	movs	r3, #0
 800cc60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cc62:	2300      	movs	r3, #0
 800cc64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800cc66:	f107 0314 	add.w	r3, r7, #20
 800cc6a:	4619      	mov	r1, r3
 800cc6c:	4810      	ldr	r0, [pc, #64]	; (800ccb0 <MX_GPIO_Init+0x128>)
 800cc6e:	f003 f94b 	bl	800ff08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800cc72:	2340      	movs	r3, #64	; 0x40
 800cc74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cc76:	2301      	movs	r3, #1
 800cc78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cc7e:	2300      	movs	r3, #0
 800cc80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cc82:	f107 0314 	add.w	r3, r7, #20
 800cc86:	4619      	mov	r1, r3
 800cc88:	480a      	ldr	r0, [pc, #40]	; (800ccb4 <MX_GPIO_Init+0x12c>)
 800cc8a:	f003 f93d 	bl	800ff08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800cc8e:	2200      	movs	r2, #0
 800cc90:	2105      	movs	r1, #5
 800cc92:	2009      	movs	r0, #9
 800cc94:	f002 fcf7 	bl	800f686 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800cc98:	2009      	movs	r0, #9
 800cc9a:	f002 fd10 	bl	800f6be <HAL_NVIC_EnableIRQ>

}
 800cc9e:	bf00      	nop
 800cca0:	3728      	adds	r7, #40	; 0x28
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}
 800cca6:	bf00      	nop
 800cca8:	40023800 	.word	0x40023800
 800ccac:	40020000 	.word	0x40020000
 800ccb0:	40020c00 	.word	0x40020c00
 800ccb4:	40020400 	.word	0x40020400

0800ccb8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b084      	sub	sp, #16
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_3 && id == 3 && ADS1256.data_startFlag == 1 && I2cC.i2cRecive == 0 && stattisComputingStatus == statisticComputingNORMAL)
 800ccc2:	88fb      	ldrh	r3, [r7, #6]
 800ccc4:	2b08      	cmp	r3, #8
 800ccc6:	f040 8084 	bne.w	800cdd2 <HAL_GPIO_EXTI_Callback+0x11a>
 800ccca:	4b44      	ldr	r3, [pc, #272]	; (800cddc <HAL_GPIO_EXTI_Callback+0x124>)
 800cccc:	781b      	ldrb	r3, [r3, #0]
 800ccce:	2b03      	cmp	r3, #3
 800ccd0:	d17f      	bne.n	800cdd2 <HAL_GPIO_EXTI_Callback+0x11a>
 800ccd2:	4a43      	ldr	r2, [pc, #268]	; (800cde0 <HAL_GPIO_EXTI_Callback+0x128>)
 800ccd4:	f244 0308 	movw	r3, #16392	; 0x4008
 800ccd8:	4413      	add	r3, r2
 800ccda:	781b      	ldrb	r3, [r3, #0]
 800ccdc:	2b01      	cmp	r3, #1
 800ccde:	d178      	bne.n	800cdd2 <HAL_GPIO_EXTI_Callback+0x11a>
 800cce0:	4b40      	ldr	r3, [pc, #256]	; (800cde4 <HAL_GPIO_EXTI_Callback+0x12c>)
 800cce2:	781b      	ldrb	r3, [r3, #0]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d174      	bne.n	800cdd2 <HAL_GPIO_EXTI_Callback+0x11a>
 800cce8:	4b3f      	ldr	r3, [pc, #252]	; (800cde8 <HAL_GPIO_EXTI_Callback+0x130>)
 800ccea:	781b      	ldrb	r3, [r3, #0]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d170      	bne.n	800cdd2 <HAL_GPIO_EXTI_Callback+0x11a>
	{

		//2021/0201/George code from ADC Task.
		//TODO:SPI handshake from ADS1256 24 bit, 8bit(High), 8bit(Medium), 8bit(Low)
		HAL_SPI_TransmitReceive_DMA(&hspi1,RDATACsend_data,Databuffer,3);
 800ccf0:	2303      	movs	r3, #3
 800ccf2:	4a3e      	ldr	r2, [pc, #248]	; (800cdec <HAL_GPIO_EXTI_Callback+0x134>)
 800ccf4:	493e      	ldr	r1, [pc, #248]	; (800cdf0 <HAL_GPIO_EXTI_Callback+0x138>)
 800ccf6:	483f      	ldr	r0, [pc, #252]	; (800cdf4 <HAL_GPIO_EXTI_Callback+0x13c>)
 800ccf8:	f005 fd5a 	bl	80127b0 <HAL_SPI_TransmitReceive_DMA>

		// construct 24 bit value
		read  = ((int32_t)Databuffer[0] << 16) & 0x00FF0000; //8bit(High)
 800ccfc:	4b3b      	ldr	r3, [pc, #236]	; (800cdec <HAL_GPIO_EXTI_Callback+0x134>)
 800ccfe:	781b      	ldrb	r3, [r3, #0]
 800cd00:	041b      	lsls	r3, r3, #16
 800cd02:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cd06:	4a3c      	ldr	r2, [pc, #240]	; (800cdf8 <HAL_GPIO_EXTI_Callback+0x140>)
 800cd08:	6013      	str	r3, [r2, #0]
		read |= ((int32_t)Databuffer[1] << 8); //8bit(Medium)
 800cd0a:	4b38      	ldr	r3, [pc, #224]	; (800cdec <HAL_GPIO_EXTI_Callback+0x134>)
 800cd0c:	785b      	ldrb	r3, [r3, #1]
 800cd0e:	021a      	lsls	r2, r3, #8
 800cd10:	4b39      	ldr	r3, [pc, #228]	; (800cdf8 <HAL_GPIO_EXTI_Callback+0x140>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	4313      	orrs	r3, r2
 800cd16:	4a38      	ldr	r2, [pc, #224]	; (800cdf8 <HAL_GPIO_EXTI_Callback+0x140>)
 800cd18:	6013      	str	r3, [r2, #0]
		read |= Databuffer[2]; //8bit(Low)
 800cd1a:	4b34      	ldr	r3, [pc, #208]	; (800cdec <HAL_GPIO_EXTI_Callback+0x134>)
 800cd1c:	789b      	ldrb	r3, [r3, #2]
 800cd1e:	461a      	mov	r2, r3
 800cd20:	4b35      	ldr	r3, [pc, #212]	; (800cdf8 <HAL_GPIO_EXTI_Callback+0x140>)
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	4313      	orrs	r3, r2
 800cd26:	4a34      	ldr	r2, [pc, #208]	; (800cdf8 <HAL_GPIO_EXTI_Callback+0x140>)
 800cd28:	6013      	str	r3, [r2, #0]
		if (read & 0x800000){ //Determine negative value.
 800cd2a:	4b33      	ldr	r3, [pc, #204]	; (800cdf8 <HAL_GPIO_EXTI_Callback+0x140>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d006      	beq.n	800cd44 <HAL_GPIO_EXTI_Callback+0x8c>
			read |= 0xFF000000;
 800cd36:	4b30      	ldr	r3, [pc, #192]	; (800cdf8 <HAL_GPIO_EXTI_Callback+0x140>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cd3e:	461a      	mov	r2, r3
 800cd40:	4b2d      	ldr	r3, [pc, #180]	; (800cdf8 <HAL_GPIO_EXTI_Callback+0x140>)
 800cd42:	601a      	str	r2, [r3, #0]
		}

		data = read;
 800cd44:	4b2c      	ldr	r3, [pc, #176]	; (800cdf8 <HAL_GPIO_EXTI_Callback+0x140>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	ee07 3a90 	vmov	s15, r3
 800cd4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cd50:	4b2a      	ldr	r3, [pc, #168]	; (800cdfc <HAL_GPIO_EXTI_Callback+0x144>)
 800cd52:	edc3 7a00 	vstr	s15, [r3]
		//2021/0309/George for SMG device
		data = data / 1677721;
 800cd56:	4b29      	ldr	r3, [pc, #164]	; (800cdfc <HAL_GPIO_EXTI_Callback+0x144>)
 800cd58:	ed93 7a00 	vldr	s14, [r3]
 800cd5c:	eddf 6a28 	vldr	s13, [pc, #160]	; 800ce00 <HAL_GPIO_EXTI_Callback+0x148>
 800cd60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cd64:	4b25      	ldr	r3, [pc, #148]	; (800cdfc <HAL_GPIO_EXTI_Callback+0x144>)
 800cd66:	edc3 7a00 	vstr	s15, [r3]

		//2021/0811/George for HTi device
		//data = data / (1678043 * 0.496);
		ADS1256.data_buffer[ADS1256.data_index] = data; //plus 2 for FFT using
 800cd6a:	4b1d      	ldr	r3, [pc, #116]	; (800cde0 <HAL_GPIO_EXTI_Callback+0x128>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	4a23      	ldr	r2, [pc, #140]	; (800cdfc <HAL_GPIO_EXTI_Callback+0x144>)
 800cd70:	6812      	ldr	r2, [r2, #0]
 800cd72:	491b      	ldr	r1, [pc, #108]	; (800cde0 <HAL_GPIO_EXTI_Callback+0x128>)
 800cd74:	3302      	adds	r3, #2
 800cd76:	009b      	lsls	r3, r3, #2
 800cd78:	440b      	add	r3, r1
 800cd7a:	601a      	str	r2, [r3, #0]
		ADS1256.data_index++;
 800cd7c:	4b18      	ldr	r3, [pc, #96]	; (800cde0 <HAL_GPIO_EXTI_Callback+0x128>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	3301      	adds	r3, #1
 800cd82:	4a17      	ldr	r2, [pc, #92]	; (800cde0 <HAL_GPIO_EXTI_Callback+0x128>)
 800cd84:	6013      	str	r3, [r2, #0]

		if(ADS1256.data_index == ADS1256.data_length) //divide 2 for FFT real data equal 4096
 800cd86:	4b16      	ldr	r3, [pc, #88]	; (800cde0 <HAL_GPIO_EXTI_Callback+0x128>)
 800cd88:	681a      	ldr	r2, [r3, #0]
 800cd8a:	4b15      	ldr	r3, [pc, #84]	; (800cde0 <HAL_GPIO_EXTI_Callback+0x128>)
 800cd8c:	685b      	ldr	r3, [r3, #4]
 800cd8e:	429a      	cmp	r2, r3
 800cd90:	d11f      	bne.n	800cdd2 <HAL_GPIO_EXTI_Callback+0x11a>
		{
		/* The xHigherPriorityTaskWoken parameter must be initialized to pdFALSE because it will get set to pdTRUE inside the interrupt-safe API function if a context switch is required. */
			BaseType_t xHigherPriorityTaskWoken;
			xHigherPriorityTaskWoken = pdFALSE;
 800cd92:	2300      	movs	r3, #0
 800cd94:	60fb      	str	r3, [r7, #12]
			xSemaphoreGiveFromISR(adcBinarySemHandle,&xHigherPriorityTaskWoken); //Wakeup High Priority Task
 800cd96:	4b1b      	ldr	r3, [pc, #108]	; (800ce04 <HAL_GPIO_EXTI_Callback+0x14c>)
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	f107 020c 	add.w	r2, r7, #12
 800cd9e:	4611      	mov	r1, r2
 800cda0:	4618      	mov	r0, r3
 800cda2:	f008 f947 	bl	8015034 <xQueueGiveFromISR>

				if(xHigherPriorityTaskWoken == pdTRUE)
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	2b01      	cmp	r3, #1
 800cdaa:	d10a      	bne.n	800cdc2 <HAL_GPIO_EXTI_Callback+0x10a>
				{
					portEND_SWITCHING_ISR( xHigherPriorityTaskWoken ); //Switch high priority task from ISR
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d007      	beq.n	800cdc2 <HAL_GPIO_EXTI_Callback+0x10a>
 800cdb2:	4b15      	ldr	r3, [pc, #84]	; (800ce08 <HAL_GPIO_EXTI_Callback+0x150>)
 800cdb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdb8:	601a      	str	r2, [r3, #0]
 800cdba:	f3bf 8f4f 	dsb	sy
 800cdbe:	f3bf 8f6f 	isb	sy
				}

			ADS1256.data_index = 0;
 800cdc2:	4b07      	ldr	r3, [pc, #28]	; (800cde0 <HAL_GPIO_EXTI_Callback+0x128>)
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800cdc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800cdcc:	480f      	ldr	r0, [pc, #60]	; (800ce0c <HAL_GPIO_EXTI_Callback+0x154>)
 800cdce:	f003 fa78 	bl	80102c2 <HAL_GPIO_TogglePin>
		}

	}
}
 800cdd2:	bf00      	nop
 800cdd4:	3710      	adds	r7, #16
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}
 800cdda:	bf00      	nop
 800cddc:	20000474 	.word	0x20000474
 800cde0:	20055d28 	.word	0x20055d28
 800cde4:	200684ac 	.word	0x200684ac
 800cde8:	2000049c 	.word	0x2000049c
 800cdec:	20000480 	.word	0x20000480
 800cdf0:	20000000 	.word	0x20000000
 800cdf4:	20068448 	.word	0x20068448
 800cdf8:	20000478 	.word	0x20000478
 800cdfc:	20060178 	.word	0x20060178
 800ce00:	49ccccc8 	.word	0x49ccccc8
 800ce04:	2005c10c 	.word	0x2005c10c
 800ce08:	e000ed04 	.word	0xe000ed04
 800ce0c:	40020c00 	.word	0x40020c00

0800ce10 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b084      	sub	sp, #16
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file
   */
  USARTBLE.iapbuffer[USARTBLE.RxCount++]= aRxBuffer[0];
 800ce18:	4b27      	ldr	r3, [pc, #156]	; (800ceb8 <HAL_UART_RxCpltCallback+0xa8>)
 800ce1a:	685b      	ldr	r3, [r3, #4]
 800ce1c:	1c5a      	adds	r2, r3, #1
 800ce1e:	4926      	ldr	r1, [pc, #152]	; (800ceb8 <HAL_UART_RxCpltCallback+0xa8>)
 800ce20:	604a      	str	r2, [r1, #4]
 800ce22:	4a26      	ldr	r2, [pc, #152]	; (800cebc <HAL_UART_RxCpltCallback+0xac>)
 800ce24:	7811      	ldrb	r1, [r2, #0]
 800ce26:	4a24      	ldr	r2, [pc, #144]	; (800ceb8 <HAL_UART_RxCpltCallback+0xa8>)
 800ce28:	4413      	add	r3, r2
 800ce2a:	460a      	mov	r2, r1
 800ce2c:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
  if(aRxBuffer[0]==0x0A)//when receive 0x0a("\n" Line feeds string),it is a effective command, Send a receive flag.
 800ce30:	4b22      	ldr	r3, [pc, #136]	; (800cebc <HAL_UART_RxCpltCallback+0xac>)
 800ce32:	781b      	ldrb	r3, [r3, #0]
 800ce34:	2b0a      	cmp	r3, #10
 800ce36:	d120      	bne.n	800ce7a <HAL_UART_RxCpltCallback+0x6a>
  	{
	  USARTBLE.RxCount=0;
 800ce38:	4b1f      	ldr	r3, [pc, #124]	; (800ceb8 <HAL_UART_RxCpltCallback+0xa8>)
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	605a      	str	r2, [r3, #4]
	  _Bool command = checkBLECommandFromBLEGateway(USARTBLE.iapbuffer ,"request",7);
 800ce3e:	2207      	movs	r2, #7
 800ce40:	491f      	ldr	r1, [pc, #124]	; (800cec0 <HAL_UART_RxCpltCallback+0xb0>)
 800ce42:	4820      	ldr	r0, [pc, #128]	; (800cec4 <HAL_UART_RxCpltCallback+0xb4>)
 800ce44:	f7fe fdfa 	bl	800ba3c <checkBLECommandFromBLEGateway>
 800ce48:	4603      	mov	r3, r0
 800ce4a:	73fb      	strb	r3, [r7, #15]
	  if(command)
 800ce4c:	7bfb      	ldrb	r3, [r7, #15]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d00a      	beq.n	800ce68 <HAL_UART_RxCpltCallback+0x58>
	  {
		  USARTBLE.IAPflag =1;
 800ce52:	4b19      	ldr	r3, [pc, #100]	; (800ceb8 <HAL_UART_RxCpltCallback+0xa8>)
 800ce54:	2201      	movs	r2, #1
 800ce56:	705a      	strb	r2, [r3, #1]
		  USARTBLE.sendflag = 0;
 800ce58:	4b17      	ldr	r3, [pc, #92]	; (800ceb8 <HAL_UART_RxCpltCallback+0xa8>)
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	701a      	strb	r2, [r3, #0]
		  BLE_USART(huart, &statistic_value);
 800ce5e:	491a      	ldr	r1, [pc, #104]	; (800cec8 <HAL_UART_RxCpltCallback+0xb8>)
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f7fe fd05 	bl	800b870 <BLE_USART>
 800ce66:	e008      	b.n	800ce7a <HAL_UART_RxCpltCallback+0x6a>
	  }
	  else
	  {
		  memset( USARTBLE.iapbuffer, 0, strlen(USARTBLE.iapbuffer) );
 800ce68:	4816      	ldr	r0, [pc, #88]	; (800cec4 <HAL_UART_RxCpltCallback+0xb4>)
 800ce6a:	f7fb fa49 	bl	8008300 <strlen>
 800ce6e:	4603      	mov	r3, r0
 800ce70:	461a      	mov	r2, r3
 800ce72:	2100      	movs	r1, #0
 800ce74:	4813      	ldr	r0, [pc, #76]	; (800cec4 <HAL_UART_RxCpltCallback+0xb4>)
 800ce76:	f00a fa23 	bl	80172c0 <memset>
	  }

  	}
  	if(USARTBLE.RxCount>=15)//no  "\n" Line feeds string full over to 24 byte, clear data
 800ce7a:	4b0f      	ldr	r3, [pc, #60]	; (800ceb8 <HAL_UART_RxCpltCallback+0xa8>)
 800ce7c:	685b      	ldr	r3, [r3, #4]
 800ce7e:	2b0e      	cmp	r3, #14
 800ce80:	dd0b      	ble.n	800ce9a <HAL_UART_RxCpltCallback+0x8a>
  	{
  		USARTBLE.RxCount=0;
 800ce82:	4b0d      	ldr	r3, [pc, #52]	; (800ceb8 <HAL_UART_RxCpltCallback+0xa8>)
 800ce84:	2200      	movs	r2, #0
 800ce86:	605a      	str	r2, [r3, #4]
  		memset( USARTBLE.iapbuffer, 0, strlen(USARTBLE.iapbuffer) ); //clear Receive data
 800ce88:	480e      	ldr	r0, [pc, #56]	; (800cec4 <HAL_UART_RxCpltCallback+0xb4>)
 800ce8a:	f7fb fa39 	bl	8008300 <strlen>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	461a      	mov	r2, r3
 800ce92:	2100      	movs	r1, #0
 800ce94:	480b      	ldr	r0, [pc, #44]	; (800cec4 <HAL_UART_RxCpltCallback+0xb4>)
 800ce96:	f00a fa13 	bl	80172c0 <memset>
  	}

  while(HAL_UART_Receive_IT(huart, (uint8_t *)aRxBuffer, 1)==HAL_OK);
 800ce9a:	bf00      	nop
 800ce9c:	2201      	movs	r2, #1
 800ce9e:	4907      	ldr	r1, [pc, #28]	; (800cebc <HAL_UART_RxCpltCallback+0xac>)
 800cea0:	6878      	ldr	r0, [r7, #4]
 800cea2:	f006 f96f 	bl	8013184 <HAL_UART_Receive_IT>
 800cea6:	4603      	mov	r3, r0
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d0f7      	beq.n	800ce9c <HAL_UART_RxCpltCallback+0x8c>
}
 800ceac:	bf00      	nop
 800ceae:	bf00      	nop
 800ceb0:	3710      	adds	r7, #16
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd80      	pop	{r7, pc}
 800ceb6:	bf00      	nop
 800ceb8:	20060180 	.word	0x20060180
 800cebc:	20068444 	.word	0x20068444
 800cec0:	0801e1d0 	.word	0x0801e1d0
 800cec4:	20060320 	.word	0x20060320
 800cec8:	20059d84 	.word	0x20059d84

0800cecc <ADC_Thread>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_ADC_Thread */
void ADC_Thread(void const * argument)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b084      	sub	sp, #16
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  const TickType_t xMaxExpectedBlockTime = pdMS_TO_TICKS( 500 );
 800ced4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800ced8:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
		 if( xSemaphoreTake( adcBinarySemHandle, xMaxExpectedBlockTime ) == pdPASS && I2cC.i2cRecive == 0){
 800ceda:	4b13      	ldr	r3, [pc, #76]	; (800cf28 <ADC_Thread+0x5c>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	68f9      	ldr	r1, [r7, #12]
 800cee0:	4618      	mov	r0, r3
 800cee2:	f008 fa23 	bl	801532c <xQueueSemaphoreTake>
 800cee6:	4603      	mov	r3, r0
 800cee8:	2b01      	cmp	r3, #1
 800ceea:	d1f6      	bne.n	800ceda <ADC_Thread+0xe>
 800ceec:	4b0f      	ldr	r3, [pc, #60]	; (800cf2c <ADC_Thread+0x60>)
 800ceee:	781b      	ldrb	r3, [r3, #0]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d1f2      	bne.n	800ceda <ADC_Thread+0xe>

			/*TODO: send data buffer to FFT data buffer*/
			BaseType_t xStatus;
			xStatus = xQueueSendToBack(adcQueueHandle, &xdatatoSend , 0);
 800cef4:	4b0e      	ldr	r3, [pc, #56]	; (800cf30 <ADC_Thread+0x64>)
 800cef6:	6818      	ldr	r0, [r3, #0]
 800cef8:	2300      	movs	r3, #0
 800cefa:	2200      	movs	r2, #0
 800cefc:	490d      	ldr	r1, [pc, #52]	; (800cf34 <ADC_Thread+0x68>)
 800cefe:	f007 ff93 	bl	8014e28 <xQueueGenericSend>
 800cf02:	60b8      	str	r0, [r7, #8]
			queueCount = uxQueueMessagesWaiting(adcQueueHandle);
 800cf04:	4b0a      	ldr	r3, [pc, #40]	; (800cf30 <ADC_Thread+0x64>)
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f008 fb23 	bl	8015554 <uxQueueMessagesWaiting>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	4a09      	ldr	r2, [pc, #36]	; (800cf38 <ADC_Thread+0x6c>)
 800cf12:	6013      	str	r3, [r2, #0]

			//TODO: wakeup FFT Task
			if(xStatus == pdPASS)
 800cf14:	68bb      	ldr	r3, [r7, #8]
 800cf16:	2b01      	cmp	r3, #1
 800cf18:	d1df      	bne.n	800ceda <ADC_Thread+0xe>
			{
				vTaskResume(FFT_TaskHandle);
 800cf1a:	4b08      	ldr	r3, [pc, #32]	; (800cf3c <ADC_Thread+0x70>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f008 fec4 	bl	8015cac <vTaskResume>
		 if( xSemaphoreTake( adcBinarySemHandle, xMaxExpectedBlockTime ) == pdPASS && I2cC.i2cRecive == 0){
 800cf24:	e7d9      	b.n	800ceda <ADC_Thread+0xe>
 800cf26:	bf00      	nop
 800cf28:	2005c10c 	.word	0x2005c10c
 800cf2c:	200684ac 	.word	0x200684ac
 800cf30:	20060174 	.word	0x20060174
 800cf34:	20000014 	.word	0x20000014
 800cf38:	2005bfa4 	.word	0x2005bfa4
 800cf3c:	2005c104 	.word	0x2005c104

0800cf40 <FFT_Thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FFT_Thread */
void FFT_Thread(void const * argument)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b08e      	sub	sp, #56	; 0x38
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FFT_Thread */
  /* Infinite loop */
  for(;;)
  {
	  BaseType_t xStatus;
	 	  queueCount = uxQueueMessagesWaiting(adcQueueHandle);
 800cf48:	4b42      	ldr	r3, [pc, #264]	; (800d054 <FFT_Thread+0x114>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	f008 fb01 	bl	8015554 <uxQueueMessagesWaiting>
 800cf52:	4603      	mov	r3, r0
 800cf54:	4a40      	ldr	r2, [pc, #256]	; (800d058 <FFT_Thread+0x118>)
 800cf56:	6013      	str	r3, [r2, #0]
	 	  if(queueCount!=0){
 800cf58:	4b3f      	ldr	r3, [pc, #252]	; (800d058 <FFT_Thread+0x118>)
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	f000 83b7 	beq.w	800d6d0 <FFT_Thread+0x790>
	 			  xStatus = xQueueReceive(adcQueueHandle, &dataRecive, 100);
 800cf62:	4b3c      	ldr	r3, [pc, #240]	; (800d054 <FFT_Thread+0x114>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	2264      	movs	r2, #100	; 0x64
 800cf68:	493c      	ldr	r1, [pc, #240]	; (800d05c <FFT_Thread+0x11c>)
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f008 f8f8 	bl	8015160 <xQueueReceive>
 800cf70:	62f8      	str	r0, [r7, #44]	; 0x2c
	 			  queueCount = uxQueueMessagesWaiting(adcQueueHandle);
 800cf72:	4b38      	ldr	r3, [pc, #224]	; (800d054 <FFT_Thread+0x114>)
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	4618      	mov	r0, r3
 800cf78:	f008 faec 	bl	8015554 <uxQueueMessagesWaiting>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	4a36      	ldr	r2, [pc, #216]	; (800d058 <FFT_Thread+0x118>)
 800cf80:	6013      	str	r3, [r2, #0]

	 			HAL_IWDG_Refresh(&hiwdg);
 800cf82:	4837      	ldr	r0, [pc, #220]	; (800d060 <FFT_Thread+0x120>)
 800cf84:	f003 feb2 	bl	8010cec <HAL_IWDG_Refresh>

	 			float32_t * rawdataBuffer;
	 			rawdataBuffer = pvPortMalloc(4096 * sizeof(float32_t));
 800cf88:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800cf8c:	f009 ff7a 	bl	8016e84 <pvPortMalloc>
 800cf90:	62b8      	str	r0, [r7, #40]	; 0x28

	 			//TODO : disable collect data flag
	 			stattisComputingStatus = statisticComputingBUSY;
 800cf92:	4b34      	ldr	r3, [pc, #208]	; (800d064 <FFT_Thread+0x124>)
 800cf94:	2201      	movs	r2, #1
 800cf96:	701a      	strb	r2, [r3, #0]

	 			for(uint32_t i = 0; i<dataLength; i++)
 800cf98:	2300      	movs	r3, #0
 800cf9a:	637b      	str	r3, [r7, #52]	; 0x34
 800cf9c:	e022      	b.n	800cfe4 <FFT_Thread+0xa4>
	 			{
	 				//recivedata5 = *(dataRecive[0]+i);
	 				rawdataBuffer[i]=*(dataRecive[0]+i);
 800cf9e:	4b2f      	ldr	r3, [pc, #188]	; (800d05c <FFT_Thread+0x11c>)
 800cfa0:	681a      	ldr	r2, [r3, #0]
 800cfa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfa4:	009b      	lsls	r3, r3, #2
 800cfa6:	441a      	add	r2, r3
 800cfa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfaa:	009b      	lsls	r3, r3, #2
 800cfac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cfae:	440b      	add	r3, r1
 800cfb0:	6812      	ldr	r2, [r2, #0]
 800cfb2:	601a      	str	r2, [r3, #0]
	 				FFTdata[i*2] = *(dataRecive[0]+i);
 800cfb4:	4b29      	ldr	r3, [pc, #164]	; (800d05c <FFT_Thread+0x11c>)
 800cfb6:	681a      	ldr	r2, [r3, #0]
 800cfb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfba:	009b      	lsls	r3, r3, #2
 800cfbc:	441a      	add	r2, r3
 800cfbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfc0:	005b      	lsls	r3, r3, #1
 800cfc2:	6812      	ldr	r2, [r2, #0]
 800cfc4:	4928      	ldr	r1, [pc, #160]	; (800d068 <FFT_Thread+0x128>)
 800cfc6:	009b      	lsls	r3, r3, #2
 800cfc8:	440b      	add	r3, r1
 800cfca:	601a      	str	r2, [r3, #0]
	 				FFTdata[i*2+1] = 0; // data format like
 800cfcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfce:	005b      	lsls	r3, r3, #1
 800cfd0:	3301      	adds	r3, #1
 800cfd2:	4a25      	ldr	r2, [pc, #148]	; (800d068 <FFT_Thread+0x128>)
 800cfd4:	009b      	lsls	r3, r3, #2
 800cfd6:	4413      	add	r3, r2
 800cfd8:	f04f 0200 	mov.w	r2, #0
 800cfdc:	601a      	str	r2, [r3, #0]
	 			for(uint32_t i = 0; i<dataLength; i++)
 800cfde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfe0:	3301      	adds	r3, #1
 800cfe2:	637b      	str	r3, [r7, #52]	; 0x34
 800cfe4:	4b21      	ldr	r3, [pc, #132]	; (800d06c <FFT_Thread+0x12c>)
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cfea:	429a      	cmp	r2, r3
 800cfec:	d3d7      	bcc.n	800cf9e <FFT_Thread+0x5e>
	 			}

	 			if(xStatus == pdPASS)
 800cfee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cff0:	2b01      	cmp	r3, #1
 800cff2:	d1a9      	bne.n	800cf48 <FFT_Thread+0x8>
	 			{

	 				/*TODO: Process the data through the CFFT/CIFFT module */
	 				arm_cfft_f32(&arm_cfft_sR_f32_len4096, FFTdata, ifftFlag, doBitReverse);
 800cff4:	4b1e      	ldr	r3, [pc, #120]	; (800d070 <FFT_Thread+0x130>)
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	b2da      	uxtb	r2, r3
 800cffa:	4b1e      	ldr	r3, [pc, #120]	; (800d074 <FFT_Thread+0x134>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	b2db      	uxtb	r3, r3
 800d000:	4919      	ldr	r1, [pc, #100]	; (800d068 <FFT_Thread+0x128>)
 800d002:	481d      	ldr	r0, [pc, #116]	; (800d078 <FFT_Thread+0x138>)
 800d004:	f7fd fa43 	bl	800a48e <arm_cfft_f32>

	 				/*TODO: Process the data through the Complex Magnitude Module for
	 				calculating the magnitude at each bin */
	 				arm_cmplx_mag_f32(FFTdata, FFTRawData, fftSize);
 800d008:	4b1c      	ldr	r3, [pc, #112]	; (800d07c <FFT_Thread+0x13c>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	461a      	mov	r2, r3
 800d00e:	491c      	ldr	r1, [pc, #112]	; (800d080 <FFT_Thread+0x140>)
 800d010:	4815      	ldr	r0, [pc, #84]	; (800d068 <FFT_Thread+0x128>)
 800d012:	f7fb fd5f 	bl	8008ad4 <arm_cmplx_mag_f32>

	 				/*TODO:calculating the Calculate_CosineSimilarity with sample wave
	 				 20220301--by Wayne*/

	 				uint16_t datalength = 2048;//CosineSimilarity datalength
 800d016:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d01a:	84fb      	strh	r3, [r7, #38]	; 0x26
	 				statistic_value.Statistic_CosSimilarity = Calculate_CosineSimilarity(&SampleWaveFET, &FFTRawData, datalength);
 800d01c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d01e:	461a      	mov	r2, r3
 800d020:	4917      	ldr	r1, [pc, #92]	; (800d080 <FFT_Thread+0x140>)
 800d022:	4818      	ldr	r0, [pc, #96]	; (800d084 <FFT_Thread+0x144>)
 800d024:	f7ff f902 	bl	800c22c <Calculate_CosineSimilarity>
 800d028:	eef0 7a40 	vmov.f32	s15, s0
 800d02c:	4b16      	ldr	r3, [pc, #88]	; (800d088 <FFT_Thread+0x148>)
 800d02e:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
	 				//statistic_value.Statistic_CosSimilarity = Calculate_CosineSimilarity(&SampleWaveFET, &SampleWaveFET, datalength);
	 				__NOP();
 800d032:	bf00      	nop
	 				/*TODO: Calculates maxValue and returns corresponding BIN value */
	 				arm_max_f32(FFTRawData, 2048, &FFTmaxValue, &FFTMaxValueIndex);
 800d034:	4b15      	ldr	r3, [pc, #84]	; (800d08c <FFT_Thread+0x14c>)
 800d036:	4a16      	ldr	r2, [pc, #88]	; (800d090 <FFT_Thread+0x150>)
 800d038:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d03c:	4810      	ldr	r0, [pc, #64]	; (800d080 <FFT_Thread+0x140>)
 800d03e:	f7fb fdf5 	bl	8008c2c <arm_max_f32>
	 				 *
	 				 * */

	 				//2021/0218/George
	 				//TODO: Calculate displacement the max value condition is small than 20Hz
	 				FFTMaxValueIndex = ( FFTMaxValueIndex == 0 ) ? FFTMaxValueIndex+1 : FFTMaxValueIndex;
 800d042:	4b12      	ldr	r3, [pc, #72]	; (800d08c <FFT_Thread+0x14c>)
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d124      	bne.n	800d094 <FFT_Thread+0x154>
 800d04a:	4b10      	ldr	r3, [pc, #64]	; (800d08c <FFT_Thread+0x14c>)
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	3301      	adds	r3, #1
 800d050:	e022      	b.n	800d098 <FFT_Thread+0x158>
 800d052:	bf00      	nop
 800d054:	20060174 	.word	0x20060174
 800d058:	2005bfa4 	.word	0x2005bfa4
 800d05c:	20068510 	.word	0x20068510
 800d060:	2005bfa8 	.word	0x2005bfa8
 800d064:	2000049c 	.word	0x2000049c
 800d068:	200603c0 	.word	0x200603c0
 800d06c:	20000494 	.word	0x20000494
 800d070:	20000484 	.word	0x20000484
 800d074:	20000010 	.word	0x20000010
 800d078:	08028178 	.word	0x08028178
 800d07c:	2000000c 	.word	0x2000000c
 800d080:	2005c114 	.word	0x2005c114
 800d084:	20059e98 	.word	0x20059e98
 800d088:	20059d84 	.word	0x20059d84
 800d08c:	20000488 	.word	0x20000488
 800d090:	2005c108 	.word	0x2005c108
 800d094:	4b9e      	ldr	r3, [pc, #632]	; (800d310 <FFT_Thread+0x3d0>)
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	4a9d      	ldr	r2, [pc, #628]	; (800d310 <FFT_Thread+0x3d0>)
 800d09a:	6013      	str	r3, [r2, #0]

	 				//2021/0222/George
	 				//TODO: frequency equal samplingRate / datalength
	 				float frequencyResolution = (float)samplingRate/(float)fftSize;
 800d09c:	4b9d      	ldr	r3, [pc, #628]	; (800d314 <FFT_Thread+0x3d4>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	ee07 3a90 	vmov	s15, r3
 800d0a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0a8:	4b9b      	ldr	r3, [pc, #620]	; (800d318 <FFT_Thread+0x3d8>)
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	ee07 3a90 	vmov	s15, r3
 800d0b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d0b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0b8:	edc7 7a08 	vstr	s15, [r7, #32]
	 				float integral = 2 * 3.1415926 * FFTMaxValueIndex * frequencyResolution;
 800d0bc:	4b94      	ldr	r3, [pc, #592]	; (800d310 <FFT_Thread+0x3d0>)
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	ee07 3a90 	vmov	s15, r3
 800d0c4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d0c8:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 800d308 <FFT_Thread+0x3c8>
 800d0cc:	ee27 6b06 	vmul.f64	d6, d7, d6
 800d0d0:	edd7 7a08 	vldr	s15, [r7, #32]
 800d0d4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d0d8:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d0dc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800d0e0:	edc7 7a07 	vstr	s15, [r7, #28]

	 				//TODO: max acceleration value (peak) is frequency domain *2/datalength
	 				float AccelerationFFTmaxValue = FFTmaxValue * 2 / dataLength;
 800d0e4:	4b8d      	ldr	r3, [pc, #564]	; (800d31c <FFT_Thread+0x3dc>)
 800d0e6:	edd3 7a00 	vldr	s15, [r3]
 800d0ea:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800d0ee:	4b8c      	ldr	r3, [pc, #560]	; (800d320 <FFT_Thread+0x3e0>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	ee07 3a90 	vmov	s15, r3
 800d0f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d0fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0fe:	edc7 7a06 	vstr	s15, [r7, #24]

	 				//TODO: turn acceleration to velocity (peak), should acceleration * g / (2 * pi * f) unit is mm/s
	 				float VelocityFFTmaxValue = AccelerationFFTmaxValue * 9807 /(2 * 3.1415926 * FFTMaxValueIndex * frequencyResolution);
 800d102:	edd7 7a06 	vldr	s15, [r7, #24]
 800d106:	ed9f 7a87 	vldr	s14, [pc, #540]	; 800d324 <FFT_Thread+0x3e4>
 800d10a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d10e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800d112:	4b7f      	ldr	r3, [pc, #508]	; (800d310 <FFT_Thread+0x3d0>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	ee07 3a90 	vmov	s15, r3
 800d11a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d11e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 800d308 <FFT_Thread+0x3c8>
 800d122:	ee27 6b06 	vmul.f64	d6, d7, d6
 800d126:	edd7 7a08 	vldr	s15, [r7, #32]
 800d12a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d12e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d132:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800d136:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800d13a:	edc7 7a05 	vstr	s15, [r7, #20]

	 				//TODO: turn velocity to displacement (peak), should / (2 * pi *f) unit mm
	 				float DisplacementFFTmaxValue = VelocityFFTmaxValue /(2 * 3.1415926 * FFTMaxValueIndex * frequencyResolution);
 800d13e:	edd7 7a05 	vldr	s15, [r7, #20]
 800d142:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800d146:	4b72      	ldr	r3, [pc, #456]	; (800d310 <FFT_Thread+0x3d0>)
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	ee07 3a90 	vmov	s15, r3
 800d14e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d152:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 800d308 <FFT_Thread+0x3c8>
 800d156:	ee27 6b06 	vmul.f64	d6, d7, d6
 800d15a:	edd7 7a08 	vldr	s15, [r7, #32]
 800d15e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d162:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d166:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800d16a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800d16e:	edc7 7a04 	vstr	s15, [r7, #16]

	 				//TODO: turn displacement peak to (peak to peak)
	 				float DisplacementP2pFFTmaxValue = DisplacementFFTmaxValue * 2;
 800d172:	edd7 7a04 	vldr	s15, [r7, #16]
 800d176:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d17a:	edc7 7a03 	vstr	s15, [r7, #12]
	 				//FFTmaxValue = FFTmaxValue*2 / dataLength;



	 				/*TODO: Remove DC component*/
	 				FFTRawData[1] = 0;
 800d17e:	4b6a      	ldr	r3, [pc, #424]	; (800d328 <FFT_Thread+0x3e8>)
 800d180:	f04f 0200 	mov.w	r2, #0
 800d184:	605a      	str	r2, [r3, #4]
	 				FFTRawData[2] = 0;
 800d186:	4b68      	ldr	r3, [pc, #416]	; (800d328 <FFT_Thread+0x3e8>)
 800d188:	f04f 0200 	mov.w	r2, #0
 800d18c:	609a      	str	r2, [r3, #8]
	 				FFTRawData[3] = 0;
 800d18e:	4b66      	ldr	r3, [pc, #408]	; (800d328 <FFT_Thread+0x3e8>)
 800d190:	f04f 0200 	mov.w	r2, #0
 800d194:	60da      	str	r2, [r3, #12]
	 				FFTRawData[4] = 0;
 800d196:	4b64      	ldr	r3, [pc, #400]	; (800d328 <FFT_Thread+0x3e8>)
 800d198:	f04f 0200 	mov.w	r2, #0
 800d19c:	611a      	str	r2, [r3, #16]
	 				FFTRawData[5] = 0;
 800d19e:	4b62      	ldr	r3, [pc, #392]	; (800d328 <FFT_Thread+0x3e8>)
 800d1a0:	f04f 0200 	mov.w	r2, #0
 800d1a4:	615a      	str	r2, [r3, #20]
	 				FFTRawData[6] = 0;
 800d1a6:	4b60      	ldr	r3, [pc, #384]	; (800d328 <FFT_Thread+0x3e8>)
 800d1a8:	f04f 0200 	mov.w	r2, #0
 800d1ac:	619a      	str	r2, [r3, #24]
	 				FFTRawData[7] = 0;
 800d1ae:	4b5e      	ldr	r3, [pc, #376]	; (800d328 <FFT_Thread+0x3e8>)
 800d1b0:	f04f 0200 	mov.w	r2, #0
 800d1b4:	61da      	str	r2, [r3, #28]
	 				FFTRawData[8] = 0;
 800d1b6:	4b5c      	ldr	r3, [pc, #368]	; (800d328 <FFT_Thread+0x3e8>)
 800d1b8:	f04f 0200 	mov.w	r2, #0
 800d1bc:	621a      	str	r2, [r3, #32]
	 				/*     |                                                                   |
	 				 *     |                  |                             |                  |
	 				 *     |        |         |                             |         |        |
	 				 *  FFT[10] FFT[1000] FFT[1500] FFT[2047] FFT[2048] FFT[2596] FFT[3096] FFT[4086]
	 				 * */
	 				FFTRawData[4088] = 0;
 800d1be:	4a5a      	ldr	r2, [pc, #360]	; (800d328 <FFT_Thread+0x3e8>)
 800d1c0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800d1c4:	4413      	add	r3, r2
 800d1c6:	f04f 0200 	mov.w	r2, #0
 800d1ca:	601a      	str	r2, [r3, #0]
	 				FFTRawData[4089] = 0;
 800d1cc:	4a56      	ldr	r2, [pc, #344]	; (800d328 <FFT_Thread+0x3e8>)
 800d1ce:	f643 73e4 	movw	r3, #16356	; 0x3fe4
 800d1d2:	4413      	add	r3, r2
 800d1d4:	f04f 0200 	mov.w	r2, #0
 800d1d8:	601a      	str	r2, [r3, #0]
	 				FFTRawData[4090] = 0;
 800d1da:	4a53      	ldr	r2, [pc, #332]	; (800d328 <FFT_Thread+0x3e8>)
 800d1dc:	f643 73e8 	movw	r3, #16360	; 0x3fe8
 800d1e0:	4413      	add	r3, r2
 800d1e2:	f04f 0200 	mov.w	r2, #0
 800d1e6:	601a      	str	r2, [r3, #0]
	 				FFTRawData[4091] = 0;
 800d1e8:	4a4f      	ldr	r2, [pc, #316]	; (800d328 <FFT_Thread+0x3e8>)
 800d1ea:	f643 73ec 	movw	r3, #16364	; 0x3fec
 800d1ee:	4413      	add	r3, r2
 800d1f0:	f04f 0200 	mov.w	r2, #0
 800d1f4:	601a      	str	r2, [r3, #0]
	 				FFTRawData[4092] = 0;
 800d1f6:	4a4c      	ldr	r2, [pc, #304]	; (800d328 <FFT_Thread+0x3e8>)
 800d1f8:	f643 73f0 	movw	r3, #16368	; 0x3ff0
 800d1fc:	4413      	add	r3, r2
 800d1fe:	f04f 0200 	mov.w	r2, #0
 800d202:	601a      	str	r2, [r3, #0]
	 				FFTRawData[4093] = 0;
 800d204:	4a48      	ldr	r2, [pc, #288]	; (800d328 <FFT_Thread+0x3e8>)
 800d206:	f643 73f4 	movw	r3, #16372	; 0x3ff4
 800d20a:	4413      	add	r3, r2
 800d20c:	f04f 0200 	mov.w	r2, #0
 800d210:	601a      	str	r2, [r3, #0]
	 				FFTRawData[4094] = 0;
 800d212:	4a45      	ldr	r2, [pc, #276]	; (800d328 <FFT_Thread+0x3e8>)
 800d214:	f643 73f8 	movw	r3, #16376	; 0x3ff8
 800d218:	4413      	add	r3, r2
 800d21a:	f04f 0200 	mov.w	r2, #0
 800d21e:	601a      	str	r2, [r3, #0]
	 				FFTRawData[4095] = 0;
 800d220:	4a41      	ldr	r2, [pc, #260]	; (800d328 <FFT_Thread+0x3e8>)
 800d222:	f643 73fc 	movw	r3, #16380	; 0x3ffc
 800d226:	4413      	add	r3, r2
 800d228:	f04f 0200 	mov.w	r2, #0
 800d22c:	601a      	str	r2, [r3, #0]


					//2021/0319/George
	 				/*TODO: Calculate time-domain math function*/
	 				arm_max_f32(rawdataBuffer, dataLength, &statistic_value.Statistic_max, &maxtestIndex);
 800d22e:	4b3c      	ldr	r3, [pc, #240]	; (800d320 <FFT_Thread+0x3e0>)
 800d230:	6819      	ldr	r1, [r3, #0]
 800d232:	4b3e      	ldr	r3, [pc, #248]	; (800d32c <FFT_Thread+0x3ec>)
 800d234:	4a3e      	ldr	r2, [pc, #248]	; (800d330 <FFT_Thread+0x3f0>)
 800d236:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d238:	f7fb fcf8 	bl	8008c2c <arm_max_f32>
	 				arm_min_f32(rawdataBuffer, dataLength, &statistic_value.Statistic_min, &mintestIndex);
 800d23c:	4b38      	ldr	r3, [pc, #224]	; (800d320 <FFT_Thread+0x3e0>)
 800d23e:	6819      	ldr	r1, [r3, #0]
 800d240:	4b3c      	ldr	r3, [pc, #240]	; (800d334 <FFT_Thread+0x3f4>)
 800d242:	4a3d      	ldr	r2, [pc, #244]	; (800d338 <FFT_Thread+0x3f8>)
 800d244:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d246:	f7fb fdf6 	bl	8008e36 <arm_min_f32>
	 				arm_var_f32(rawdataBuffer, dataLength, &statistic_value.Statistic_var);
 800d24a:	4b35      	ldr	r3, [pc, #212]	; (800d320 <FFT_Thread+0x3e0>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	4a3b      	ldr	r2, [pc, #236]	; (800d33c <FFT_Thread+0x3fc>)
 800d250:	4619      	mov	r1, r3
 800d252:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d254:	f7fc f820 	bl	8009298 <arm_var_f32>
	 				arm_rms_f32(rawdataBuffer, dataLength, &statistic_value.Statistic_rms);
 800d258:	4b31      	ldr	r3, [pc, #196]	; (800d320 <FFT_Thread+0x3e0>)
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	4a38      	ldr	r2, [pc, #224]	; (800d340 <FFT_Thread+0x400>)
 800d25e:	4619      	mov	r1, r3
 800d260:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d262:	f7fb fea0 	bl	8008fa6 <arm_rms_f32>
	 				arm_mean_f32(rawdataBuffer, dataLength, &statistic_value.Statistic_mean);
 800d266:	4b2e      	ldr	r3, [pc, #184]	; (800d320 <FFT_Thread+0x3e0>)
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	4a36      	ldr	r2, [pc, #216]	; (800d344 <FFT_Thread+0x404>)
 800d26c:	4619      	mov	r1, r3
 800d26e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d270:	f7fb fd72 	bl	8008d58 <arm_mean_f32>
	 				arm_std_f32(rawdataBuffer, dataLength, &statistic_value.Statistic_std);
 800d274:	4b2a      	ldr	r3, [pc, #168]	; (800d320 <FFT_Thread+0x3e0>)
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	4a33      	ldr	r2, [pc, #204]	; (800d348 <FFT_Thread+0x408>)
 800d27a:	4619      	mov	r1, r3
 800d27c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d27e:	f7fb ff2f 	bl	80090e0 <arm_std_f32>
	 				statistic_value.Statistic_crestFactor = statistic_value.Statistic_max/statistic_value.Statistic_rms;
 800d282:	4b2b      	ldr	r3, [pc, #172]	; (800d330 <FFT_Thread+0x3f0>)
 800d284:	edd3 6a00 	vldr	s13, [r3]
 800d288:	4b29      	ldr	r3, [pc, #164]	; (800d330 <FFT_Thread+0x3f0>)
 800d28a:	ed93 7a03 	vldr	s14, [r3, #12]
 800d28e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d292:	4b27      	ldr	r3, [pc, #156]	; (800d330 <FFT_Thread+0x3f0>)
 800d294:	edc3 7a07 	vstr	s15, [r3, #28]
	 				statistic_value.Statistic_p2p = statistic_value.Statistic_max - statistic_value.Statistic_min;
 800d298:	4b25      	ldr	r3, [pc, #148]	; (800d330 <FFT_Thread+0x3f0>)
 800d29a:	ed93 7a00 	vldr	s14, [r3]
 800d29e:	4b24      	ldr	r3, [pc, #144]	; (800d330 <FFT_Thread+0x3f0>)
 800d2a0:	edd3 7a01 	vldr	s15, [r3, #4]
 800d2a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2a8:	4b21      	ldr	r3, [pc, #132]	; (800d330 <FFT_Thread+0x3f0>)
 800d2aa:	edc3 7a06 	vstr	s15, [r3, #24]

	 				//2021/03/22/George
	 				//TODO: calculate Statistic_Displacementp2p using time-domain p2p
	 				//formula : speedp2p = p2p / (2*pi*f), displacement = displacementp2p = speedp2p / (2*pi*f)
	 				statistic_value.Statistic_Displacementp2p = statistic_value.Statistic_p2p*9807 / (integral * integral);
 800d2ae:	4b20      	ldr	r3, [pc, #128]	; (800d330 <FFT_Thread+0x3f0>)
 800d2b0:	edd3 7a06 	vldr	s15, [r3, #24]
 800d2b4:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800d324 <FFT_Thread+0x3e4>
 800d2b8:	ee67 6a87 	vmul.f32	s13, s15, s14
 800d2bc:	edd7 7a07 	vldr	s15, [r7, #28]
 800d2c0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800d2c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d2c8:	4b19      	ldr	r3, [pc, #100]	; (800d330 <FFT_Thread+0x3f0>)
 800d2ca:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	 				//2021/02/01/George start compute
	 				/*TODO: Calculate skewness and kurtosis will cause delay*/
	 				statistic_value.Statistic_kurtosis = Calculate_kurtosis(rawdataBuffer, dataLength);
 800d2ce:	4b14      	ldr	r3, [pc, #80]	; (800d320 <FFT_Thread+0x3e0>)
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	4619      	mov	r1, r3
 800d2d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2d6:	f7fe fcf5 	bl	800bcc4 <Calculate_kurtosis>
 800d2da:	eef0 7a40 	vmov.f32	s15, s0
 800d2de:	4b14      	ldr	r3, [pc, #80]	; (800d330 <FFT_Thread+0x3f0>)
 800d2e0:	edc3 7a08 	vstr	s15, [r3, #32]
	 				statistic_value.Statistic_skewness = Calculate_skewness(rawdataBuffer, dataLength);
 800d2e4:	4b0e      	ldr	r3, [pc, #56]	; (800d320 <FFT_Thread+0x3e0>)
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	4619      	mov	r1, r3
 800d2ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2ec:	f7fe fc9c 	bl	800bc28 <Calculate_skewness>
 800d2f0:	eef0 7a40 	vmov.f32	s15, s0
 800d2f4:	4b0e      	ldr	r3, [pc, #56]	; (800d330 <FFT_Thread+0x3f0>)
 800d2f6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	 				//2021/0319/George
	 				//TODO:free rawdataBuffer memory
	 				vPortFree(rawdataBuffer);
 800d2fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2fc:	f009 fe8c 	bl	8017018 <vPortFree>

					//2021/0319/George
	 				/*TODO: Calculate frequency-domain math function*/

	 				/* focus broad band functionality */
					for(int i =0; i<sizeof(FreqSettingValueList)/sizeof(FreqMaxMin); i++)
 800d300:	2300      	movs	r3, #0
 800d302:	633b      	str	r3, [r7, #48]	; 0x30
 800d304:	e033      	b.n	800d36e <FFT_Thread+0x42e>
 800d306:	bf00      	nop
 800d308:	4d12d84a 	.word	0x4d12d84a
 800d30c:	401921fb 	.word	0x401921fb
 800d310:	20000488 	.word	0x20000488
 800d314:	20000008 	.word	0x20000008
 800d318:	2000000c 	.word	0x2000000c
 800d31c:	2005c108 	.word	0x2005c108
 800d320:	20000494 	.word	0x20000494
 800d324:	46193c00 	.word	0x46193c00
 800d328:	2005c114 	.word	0x2005c114
 800d32c:	2000048c 	.word	0x2000048c
 800d330:	20059d84 	.word	0x20059d84
 800d334:	20000490 	.word	0x20000490
 800d338:	20059d88 	.word	0x20059d88
 800d33c:	20059d8c 	.word	0x20059d8c
 800d340:	20059d90 	.word	0x20059d90
 800d344:	20059d94 	.word	0x20059d94
 800d348:	20059d98 	.word	0x20059d98
					{
						settingValue = (&freqSettingValueList.range1+i);
 800d34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d34e:	00db      	lsls	r3, r3, #3
 800d350:	4abd      	ldr	r2, [pc, #756]	; (800d648 <FFT_Thread+0x708>)
 800d352:	4413      	add	r3, r2
 800d354:	4abd      	ldr	r2, [pc, #756]	; (800d64c <FFT_Thread+0x70c>)
 800d356:	6013      	str	r3, [r2, #0]
						Calculate_FreqBandRMS(FFTRawData, settingValue, i);
 800d358:	4bbc      	ldr	r3, [pc, #752]	; (800d64c <FFT_Thread+0x70c>)
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d35e:	b252      	sxtb	r2, r2
 800d360:	4619      	mov	r1, r3
 800d362:	48bb      	ldr	r0, [pc, #748]	; (800d650 <FFT_Thread+0x710>)
 800d364:	f7fe fcd8 	bl	800bd18 <Calculate_FreqBandRMS>
					for(int i =0; i<sizeof(FreqSettingValueList)/sizeof(FreqMaxMin); i++)
 800d368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d36a:	3301      	adds	r3, #1
 800d36c:	633b      	str	r3, [r7, #48]	; 0x30
 800d36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d370:	2b02      	cmp	r3, #2
 800d372:	d9eb      	bls.n	800d34c <FFT_Thread+0x40c>
					}
					/* focus broad band functionality */

					//2021/0319/George
	 				/*TODO: Calculate acceleration, velocity, displacement RMS*/
	 				Calculate_FreqOverAll(FFTRawData, dataLength);
 800d374:	4bb7      	ldr	r3, [pc, #732]	; (800d654 <FFT_Thread+0x714>)
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	4619      	mov	r1, r3
 800d37a:	48b5      	ldr	r0, [pc, #724]	; (800d650 <FFT_Thread+0x710>)
 800d37c:	f7fe fde8 	bl	800bf50 <Calculate_FreqOverAll>



	 				/*TODO: to calculate 3 times moving average*/
	 				averageTimes++;
 800d380:	4bb5      	ldr	r3, [pc, #724]	; (800d658 <FFT_Thread+0x718>)
 800d382:	781b      	ldrb	r3, [r3, #0]
 800d384:	3301      	adds	r3, #1
 800d386:	b2da      	uxtb	r2, r3
 800d388:	4bb3      	ldr	r3, [pc, #716]	; (800d658 <FFT_Thread+0x718>)
 800d38a:	701a      	strb	r2, [r3, #0]

	 				//2021/0203/George
	 				//TODO:new parameter p2p
	 				if(averageTimes == 1)
 800d38c:	4bb2      	ldr	r3, [pc, #712]	; (800d658 <FFT_Thread+0x718>)
 800d38e:	781b      	ldrb	r3, [r3, #0]
 800d390:	2b01      	cmp	r3, #1
 800d392:	d13b      	bne.n	800d40c <FFT_Thread+0x4cc>
	 				{
	 					statistic_value.Statistic_max_Temp = statistic_value.Statistic_max;
 800d394:	4bb1      	ldr	r3, [pc, #708]	; (800d65c <FFT_Thread+0x71c>)
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	4ab0      	ldr	r2, [pc, #704]	; (800d65c <FFT_Thread+0x71c>)
 800d39a:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
	 					statistic_value.Statistic_min_Temp = statistic_value.Statistic_min;
 800d39e:	4baf      	ldr	r3, [pc, #700]	; (800d65c <FFT_Thread+0x71c>)
 800d3a0:	685b      	ldr	r3, [r3, #4]
 800d3a2:	4aae      	ldr	r2, [pc, #696]	; (800d65c <FFT_Thread+0x71c>)
 800d3a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	 					statistic_value.Statistic_p2p_Temp = statistic_value.Statistic_p2p;
 800d3a8:	4bac      	ldr	r3, [pc, #688]	; (800d65c <FFT_Thread+0x71c>)
 800d3aa:	699b      	ldr	r3, [r3, #24]
 800d3ac:	4aab      	ldr	r2, [pc, #684]	; (800d65c <FFT_Thread+0x71c>)
 800d3ae:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
	 					statistic_value.Statistic_var_Temp = statistic_value.Statistic_var;
 800d3b2:	4baa      	ldr	r3, [pc, #680]	; (800d65c <FFT_Thread+0x71c>)
 800d3b4:	689b      	ldr	r3, [r3, #8]
 800d3b6:	4aa9      	ldr	r2, [pc, #676]	; (800d65c <FFT_Thread+0x71c>)
 800d3b8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	 					statistic_value.Statistic_rms_Temp = statistic_value.Statistic_rms;
 800d3bc:	4ba7      	ldr	r3, [pc, #668]	; (800d65c <FFT_Thread+0x71c>)
 800d3be:	68db      	ldr	r3, [r3, #12]
 800d3c0:	4aa6      	ldr	r2, [pc, #664]	; (800d65c <FFT_Thread+0x71c>)
 800d3c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
	 					statistic_value.Statistic_mean_Temp = statistic_value.Statistic_mean;
 800d3c6:	4ba5      	ldr	r3, [pc, #660]	; (800d65c <FFT_Thread+0x71c>)
 800d3c8:	691b      	ldr	r3, [r3, #16]
 800d3ca:	4aa4      	ldr	r2, [pc, #656]	; (800d65c <FFT_Thread+0x71c>)
 800d3cc:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
	 					statistic_value.Statistic_std_Temp = statistic_value.Statistic_std;
 800d3d0:	4ba2      	ldr	r3, [pc, #648]	; (800d65c <FFT_Thread+0x71c>)
 800d3d2:	695b      	ldr	r3, [r3, #20]
 800d3d4:	4aa1      	ldr	r2, [pc, #644]	; (800d65c <FFT_Thread+0x71c>)
 800d3d6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
	 					statistic_value.Statistic_FreqOvall_Temp = statistic_value.Statistic_FreqOvall;
 800d3da:	4ba0      	ldr	r3, [pc, #640]	; (800d65c <FFT_Thread+0x71c>)
 800d3dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3de:	4a9f      	ldr	r2, [pc, #636]	; (800d65c <FFT_Thread+0x71c>)
 800d3e0:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
	 					statistic_value.Statistic_crestFactor_Temp = statistic_value.Statistic_crestFactor;
 800d3e4:	4b9d      	ldr	r3, [pc, #628]	; (800d65c <FFT_Thread+0x71c>)
 800d3e6:	69db      	ldr	r3, [r3, #28]
 800d3e8:	4a9c      	ldr	r2, [pc, #624]	; (800d65c <FFT_Thread+0x71c>)
 800d3ea:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
	 					statistic_value.Statistic_SpeedOvall_Temp = statistic_value.Statistic_SpeedOvall;
 800d3ee:	4b9b      	ldr	r3, [pc, #620]	; (800d65c <FFT_Thread+0x71c>)
 800d3f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3f2:	4a9a      	ldr	r2, [pc, #616]	; (800d65c <FFT_Thread+0x71c>)
 800d3f4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
	 					statistic_value.Statistic_kurtosis_Temp = statistic_value.Statistic_kurtosis;
 800d3f8:	4b98      	ldr	r3, [pc, #608]	; (800d65c <FFT_Thread+0x71c>)
 800d3fa:	6a1b      	ldr	r3, [r3, #32]
 800d3fc:	4a97      	ldr	r2, [pc, #604]	; (800d65c <FFT_Thread+0x71c>)
 800d3fe:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
	 					statistic_value.Statistic_skewness_Temp = statistic_value.Statistic_skewness;
 800d402:	4b96      	ldr	r3, [pc, #600]	; (800d65c <FFT_Thread+0x71c>)
 800d404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d406:	4a95      	ldr	r2, [pc, #596]	; (800d65c <FFT_Thread+0x71c>)
 800d408:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	 				}
	 				if(averageTimes == 2)
 800d40c:	4b92      	ldr	r3, [pc, #584]	; (800d658 <FFT_Thread+0x718>)
 800d40e:	781b      	ldrb	r3, [r3, #0]
 800d410:	2b02      	cmp	r3, #2
 800d412:	f040 8084 	bne.w	800d51e <FFT_Thread+0x5de>
	 				{
	 					statistic_value.Statistic_max_Temp += statistic_value.Statistic_max;
 800d416:	4b91      	ldr	r3, [pc, #580]	; (800d65c <FFT_Thread+0x71c>)
 800d418:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 800d41c:	4b8f      	ldr	r3, [pc, #572]	; (800d65c <FFT_Thread+0x71c>)
 800d41e:	edd3 7a00 	vldr	s15, [r3]
 800d422:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d426:	4b8d      	ldr	r3, [pc, #564]	; (800d65c <FFT_Thread+0x71c>)
 800d428:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
	 					statistic_value.Statistic_min_Temp += statistic_value.Statistic_min;
 800d42c:	4b8b      	ldr	r3, [pc, #556]	; (800d65c <FFT_Thread+0x71c>)
 800d42e:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 800d432:	4b8a      	ldr	r3, [pc, #552]	; (800d65c <FFT_Thread+0x71c>)
 800d434:	edd3 7a01 	vldr	s15, [r3, #4]
 800d438:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d43c:	4b87      	ldr	r3, [pc, #540]	; (800d65c <FFT_Thread+0x71c>)
 800d43e:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
	 					statistic_value.Statistic_p2p_Temp += statistic_value.Statistic_p2p;
 800d442:	4b86      	ldr	r3, [pc, #536]	; (800d65c <FFT_Thread+0x71c>)
 800d444:	ed93 7a3d 	vldr	s14, [r3, #244]	; 0xf4
 800d448:	4b84      	ldr	r3, [pc, #528]	; (800d65c <FFT_Thread+0x71c>)
 800d44a:	edd3 7a06 	vldr	s15, [r3, #24]
 800d44e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d452:	4b82      	ldr	r3, [pc, #520]	; (800d65c <FFT_Thread+0x71c>)
 800d454:	edc3 7a3d 	vstr	s15, [r3, #244]	; 0xf4
	 					statistic_value.Statistic_var_Temp += statistic_value.Statistic_var;
 800d458:	4b80      	ldr	r3, [pc, #512]	; (800d65c <FFT_Thread+0x71c>)
 800d45a:	ed93 7a39 	vldr	s14, [r3, #228]	; 0xe4
 800d45e:	4b7f      	ldr	r3, [pc, #508]	; (800d65c <FFT_Thread+0x71c>)
 800d460:	edd3 7a02 	vldr	s15, [r3, #8]
 800d464:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d468:	4b7c      	ldr	r3, [pc, #496]	; (800d65c <FFT_Thread+0x71c>)
 800d46a:	edc3 7a39 	vstr	s15, [r3, #228]	; 0xe4
	 					statistic_value.Statistic_rms_Temp += statistic_value.Statistic_rms;
 800d46e:	4b7b      	ldr	r3, [pc, #492]	; (800d65c <FFT_Thread+0x71c>)
 800d470:	ed93 7a3a 	vldr	s14, [r3, #232]	; 0xe8
 800d474:	4b79      	ldr	r3, [pc, #484]	; (800d65c <FFT_Thread+0x71c>)
 800d476:	edd3 7a03 	vldr	s15, [r3, #12]
 800d47a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d47e:	4b77      	ldr	r3, [pc, #476]	; (800d65c <FFT_Thread+0x71c>)
 800d480:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
	 					statistic_value.Statistic_mean_Temp += statistic_value.Statistic_mean;
 800d484:	4b75      	ldr	r3, [pc, #468]	; (800d65c <FFT_Thread+0x71c>)
 800d486:	ed93 7a3b 	vldr	s14, [r3, #236]	; 0xec
 800d48a:	4b74      	ldr	r3, [pc, #464]	; (800d65c <FFT_Thread+0x71c>)
 800d48c:	edd3 7a04 	vldr	s15, [r3, #16]
 800d490:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d494:	4b71      	ldr	r3, [pc, #452]	; (800d65c <FFT_Thread+0x71c>)
 800d496:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
	 					statistic_value.Statistic_std_Temp += statistic_value.Statistic_std;
 800d49a:	4b70      	ldr	r3, [pc, #448]	; (800d65c <FFT_Thread+0x71c>)
 800d49c:	ed93 7a3c 	vldr	s14, [r3, #240]	; 0xf0
 800d4a0:	4b6e      	ldr	r3, [pc, #440]	; (800d65c <FFT_Thread+0x71c>)
 800d4a2:	edd3 7a05 	vldr	s15, [r3, #20]
 800d4a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d4aa:	4b6c      	ldr	r3, [pc, #432]	; (800d65c <FFT_Thread+0x71c>)
 800d4ac:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
	 					statistic_value.Statistic_FreqOvall_Temp += statistic_value.Statistic_FreqOvall;
 800d4b0:	4b6a      	ldr	r3, [pc, #424]	; (800d65c <FFT_Thread+0x71c>)
 800d4b2:	ed93 7a41 	vldr	s14, [r3, #260]	; 0x104
 800d4b6:	4b69      	ldr	r3, [pc, #420]	; (800d65c <FFT_Thread+0x71c>)
 800d4b8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800d4bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d4c0:	4b66      	ldr	r3, [pc, #408]	; (800d65c <FFT_Thread+0x71c>)
 800d4c2:	edc3 7a41 	vstr	s15, [r3, #260]	; 0x104
	 					statistic_value.Statistic_crestFactor_Temp += statistic_value.Statistic_crestFactor;
 800d4c6:	4b65      	ldr	r3, [pc, #404]	; (800d65c <FFT_Thread+0x71c>)
 800d4c8:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 800d4cc:	4b63      	ldr	r3, [pc, #396]	; (800d65c <FFT_Thread+0x71c>)
 800d4ce:	edd3 7a07 	vldr	s15, [r3, #28]
 800d4d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d4d6:	4b61      	ldr	r3, [pc, #388]	; (800d65c <FFT_Thread+0x71c>)
 800d4d8:	edc3 7a3e 	vstr	s15, [r3, #248]	; 0xf8
	 					statistic_value.Statistic_SpeedOvall_Temp += statistic_value.Statistic_SpeedOvall;
 800d4dc:	4b5f      	ldr	r3, [pc, #380]	; (800d65c <FFT_Thread+0x71c>)
 800d4de:	ed93 7a42 	vldr	s14, [r3, #264]	; 0x108
 800d4e2:	4b5e      	ldr	r3, [pc, #376]	; (800d65c <FFT_Thread+0x71c>)
 800d4e4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800d4e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d4ec:	4b5b      	ldr	r3, [pc, #364]	; (800d65c <FFT_Thread+0x71c>)
 800d4ee:	edc3 7a42 	vstr	s15, [r3, #264]	; 0x108
	 					statistic_value.Statistic_kurtosis_Temp += statistic_value.Statistic_kurtosis;
 800d4f2:	4b5a      	ldr	r3, [pc, #360]	; (800d65c <FFT_Thread+0x71c>)
 800d4f4:	ed93 7a3f 	vldr	s14, [r3, #252]	; 0xfc
 800d4f8:	4b58      	ldr	r3, [pc, #352]	; (800d65c <FFT_Thread+0x71c>)
 800d4fa:	edd3 7a08 	vldr	s15, [r3, #32]
 800d4fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d502:	4b56      	ldr	r3, [pc, #344]	; (800d65c <FFT_Thread+0x71c>)
 800d504:	edc3 7a3f 	vstr	s15, [r3, #252]	; 0xfc
	 					statistic_value.Statistic_skewness_Temp += statistic_value.Statistic_skewness;
 800d508:	4b54      	ldr	r3, [pc, #336]	; (800d65c <FFT_Thread+0x71c>)
 800d50a:	ed93 7a40 	vldr	s14, [r3, #256]	; 0x100
 800d50e:	4b53      	ldr	r3, [pc, #332]	; (800d65c <FFT_Thread+0x71c>)
 800d510:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d514:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d518:	4b50      	ldr	r3, [pc, #320]	; (800d65c <FFT_Thread+0x71c>)
 800d51a:	edc3 7a40 	vstr	s15, [r3, #256]	; 0x100
	 				}
	 				if(averageTimes == 3)
 800d51e:	4b4e      	ldr	r3, [pc, #312]	; (800d658 <FFT_Thread+0x718>)
 800d520:	781b      	ldrb	r3, [r3, #0]
 800d522:	2b03      	cmp	r3, #3
 800d524:	f040 80cb 	bne.w	800d6be <FFT_Thread+0x77e>
	 				{
	 					statistic_value.Statistic_max = (statistic_value.Statistic_max_Temp +
 800d528:	4b4c      	ldr	r3, [pc, #304]	; (800d65c <FFT_Thread+0x71c>)
 800d52a:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
	 							statistic_value.Statistic_max) / 3;
 800d52e:	4b4b      	ldr	r3, [pc, #300]	; (800d65c <FFT_Thread+0x71c>)
 800d530:	edd3 7a00 	vldr	s15, [r3]
	 					statistic_value.Statistic_max = (statistic_value.Statistic_max_Temp +
 800d534:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_max) / 3;
 800d538:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800d53c:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_max = (statistic_value.Statistic_max_Temp +
 800d540:	4b46      	ldr	r3, [pc, #280]	; (800d65c <FFT_Thread+0x71c>)
 800d542:	edc3 7a00 	vstr	s15, [r3]
	 					statistic_value.Statistic_min = (statistic_value.Statistic_min_Temp +
 800d546:	4b45      	ldr	r3, [pc, #276]	; (800d65c <FFT_Thread+0x71c>)
 800d548:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
	 							statistic_value.Statistic_min) / 3;
 800d54c:	4b43      	ldr	r3, [pc, #268]	; (800d65c <FFT_Thread+0x71c>)
 800d54e:	edd3 7a01 	vldr	s15, [r3, #4]
	 					statistic_value.Statistic_min = (statistic_value.Statistic_min_Temp +
 800d552:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_min) / 3;
 800d556:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800d55a:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_min = (statistic_value.Statistic_min_Temp +
 800d55e:	4b3f      	ldr	r3, [pc, #252]	; (800d65c <FFT_Thread+0x71c>)
 800d560:	edc3 7a01 	vstr	s15, [r3, #4]
	 					statistic_value.Statistic_p2p = (statistic_value.Statistic_p2p_Temp +
 800d564:	4b3d      	ldr	r3, [pc, #244]	; (800d65c <FFT_Thread+0x71c>)
 800d566:	ed93 7a3d 	vldr	s14, [r3, #244]	; 0xf4
								statistic_value.Statistic_p2p) / 3;
 800d56a:	4b3c      	ldr	r3, [pc, #240]	; (800d65c <FFT_Thread+0x71c>)
 800d56c:	edd3 7a06 	vldr	s15, [r3, #24]
	 					statistic_value.Statistic_p2p = (statistic_value.Statistic_p2p_Temp +
 800d570:	ee37 7a27 	vadd.f32	s14, s14, s15
								statistic_value.Statistic_p2p) / 3;
 800d574:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800d578:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_p2p = (statistic_value.Statistic_p2p_Temp +
 800d57c:	4b37      	ldr	r3, [pc, #220]	; (800d65c <FFT_Thread+0x71c>)
 800d57e:	edc3 7a06 	vstr	s15, [r3, #24]
	 					statistic_value.Statistic_var = (statistic_value.Statistic_var_Temp +
 800d582:	4b36      	ldr	r3, [pc, #216]	; (800d65c <FFT_Thread+0x71c>)
 800d584:	ed93 7a39 	vldr	s14, [r3, #228]	; 0xe4
	 							statistic_value.Statistic_var) / 3;
 800d588:	4b34      	ldr	r3, [pc, #208]	; (800d65c <FFT_Thread+0x71c>)
 800d58a:	edd3 7a02 	vldr	s15, [r3, #8]
	 					statistic_value.Statistic_var = (statistic_value.Statistic_var_Temp +
 800d58e:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_var) / 3;
 800d592:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800d596:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_var = (statistic_value.Statistic_var_Temp +
 800d59a:	4b30      	ldr	r3, [pc, #192]	; (800d65c <FFT_Thread+0x71c>)
 800d59c:	edc3 7a02 	vstr	s15, [r3, #8]
	 					statistic_value.Statistic_rms = (statistic_value.Statistic_rms_Temp +
 800d5a0:	4b2e      	ldr	r3, [pc, #184]	; (800d65c <FFT_Thread+0x71c>)
 800d5a2:	ed93 7a3a 	vldr	s14, [r3, #232]	; 0xe8
	 							statistic_value.Statistic_rms) / 3;
 800d5a6:	4b2d      	ldr	r3, [pc, #180]	; (800d65c <FFT_Thread+0x71c>)
 800d5a8:	edd3 7a03 	vldr	s15, [r3, #12]
	 					statistic_value.Statistic_rms = (statistic_value.Statistic_rms_Temp +
 800d5ac:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_rms) / 3;
 800d5b0:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800d5b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_rms = (statistic_value.Statistic_rms_Temp +
 800d5b8:	4b28      	ldr	r3, [pc, #160]	; (800d65c <FFT_Thread+0x71c>)
 800d5ba:	edc3 7a03 	vstr	s15, [r3, #12]
	 					statistic_value.Statistic_mean = (statistic_value.Statistic_mean_Temp +
 800d5be:	4b27      	ldr	r3, [pc, #156]	; (800d65c <FFT_Thread+0x71c>)
 800d5c0:	ed93 7a3b 	vldr	s14, [r3, #236]	; 0xec
	 							statistic_value.Statistic_mean) / 3;
 800d5c4:	4b25      	ldr	r3, [pc, #148]	; (800d65c <FFT_Thread+0x71c>)
 800d5c6:	edd3 7a04 	vldr	s15, [r3, #16]
	 					statistic_value.Statistic_mean = (statistic_value.Statistic_mean_Temp +
 800d5ca:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_mean) / 3;
 800d5ce:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800d5d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_mean = (statistic_value.Statistic_mean_Temp +
 800d5d6:	4b21      	ldr	r3, [pc, #132]	; (800d65c <FFT_Thread+0x71c>)
 800d5d8:	edc3 7a04 	vstr	s15, [r3, #16]
	 					statistic_value.Statistic_std = (statistic_value.Statistic_std_Temp +
 800d5dc:	4b1f      	ldr	r3, [pc, #124]	; (800d65c <FFT_Thread+0x71c>)
 800d5de:	ed93 7a3c 	vldr	s14, [r3, #240]	; 0xf0
	 							statistic_value.Statistic_std) / 3;
 800d5e2:	4b1e      	ldr	r3, [pc, #120]	; (800d65c <FFT_Thread+0x71c>)
 800d5e4:	edd3 7a05 	vldr	s15, [r3, #20]
	 					statistic_value.Statistic_std = (statistic_value.Statistic_std_Temp +
 800d5e8:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_std) / 3;
 800d5ec:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800d5f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_std = (statistic_value.Statistic_std_Temp +
 800d5f4:	4b19      	ldr	r3, [pc, #100]	; (800d65c <FFT_Thread+0x71c>)
 800d5f6:	edc3 7a05 	vstr	s15, [r3, #20]
	 					statistic_value.Statistic_FreqOvall = (statistic_value.Statistic_FreqOvall_Temp +
 800d5fa:	4b18      	ldr	r3, [pc, #96]	; (800d65c <FFT_Thread+0x71c>)
 800d5fc:	ed93 7a41 	vldr	s14, [r3, #260]	; 0x104
	 							statistic_value.Statistic_FreqOvall) / 3;
 800d600:	4b16      	ldr	r3, [pc, #88]	; (800d65c <FFT_Thread+0x71c>)
 800d602:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
	 					statistic_value.Statistic_FreqOvall = (statistic_value.Statistic_FreqOvall_Temp +
 800d606:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_FreqOvall) / 3;
 800d60a:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800d60e:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_FreqOvall = (statistic_value.Statistic_FreqOvall_Temp +
 800d612:	4b12      	ldr	r3, [pc, #72]	; (800d65c <FFT_Thread+0x71c>)
 800d614:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	 					statistic_value.Statistic_crestFactor = (statistic_value.Statistic_crestFactor_Temp +
 800d618:	4b10      	ldr	r3, [pc, #64]	; (800d65c <FFT_Thread+0x71c>)
 800d61a:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
	 							statistic_value.Statistic_crestFactor) / 3;
 800d61e:	4b0f      	ldr	r3, [pc, #60]	; (800d65c <FFT_Thread+0x71c>)
 800d620:	edd3 7a07 	vldr	s15, [r3, #28]
	 					statistic_value.Statistic_crestFactor = (statistic_value.Statistic_crestFactor_Temp +
 800d624:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_crestFactor) / 3;
 800d628:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800d62c:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_crestFactor = (statistic_value.Statistic_crestFactor_Temp +
 800d630:	4b0a      	ldr	r3, [pc, #40]	; (800d65c <FFT_Thread+0x71c>)
 800d632:	edc3 7a07 	vstr	s15, [r3, #28]
	 					statistic_value.Statistic_SpeedOvall = (statistic_value.Statistic_SpeedOvall_Temp +
 800d636:	4b09      	ldr	r3, [pc, #36]	; (800d65c <FFT_Thread+0x71c>)
 800d638:	ed93 7a42 	vldr	s14, [r3, #264]	; 0x108
	 							statistic_value.Statistic_SpeedOvall) / 3;
 800d63c:	4b07      	ldr	r3, [pc, #28]	; (800d65c <FFT_Thread+0x71c>)
 800d63e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
	 					statistic_value.Statistic_SpeedOvall = (statistic_value.Statistic_SpeedOvall_Temp +
 800d642:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d646:	e00b      	b.n	800d660 <FFT_Thread+0x720>
 800d648:	20059d6c 	.word	0x20059d6c
 800d64c:	20000498 	.word	0x20000498
 800d650:	2005c114 	.word	0x2005c114
 800d654:	20000494 	.word	0x20000494
 800d658:	2000047c 	.word	0x2000047c
 800d65c:	20059d84 	.word	0x20059d84
	 							statistic_value.Statistic_SpeedOvall) / 3;
 800d660:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800d664:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_SpeedOvall = (statistic_value.Statistic_SpeedOvall_Temp +
 800d668:	4b1b      	ldr	r3, [pc, #108]	; (800d6d8 <FFT_Thread+0x798>)
 800d66a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	 					statistic_value.Statistic_kurtosis = (statistic_value.Statistic_kurtosis_Temp +
 800d66e:	4b1a      	ldr	r3, [pc, #104]	; (800d6d8 <FFT_Thread+0x798>)
 800d670:	ed93 7a3f 	vldr	s14, [r3, #252]	; 0xfc
	 							statistic_value.Statistic_kurtosis) / 3;
 800d674:	4b18      	ldr	r3, [pc, #96]	; (800d6d8 <FFT_Thread+0x798>)
 800d676:	edd3 7a08 	vldr	s15, [r3, #32]
	 					statistic_value.Statistic_kurtosis = (statistic_value.Statistic_kurtosis_Temp +
 800d67a:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_kurtosis) / 3;
 800d67e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800d682:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_kurtosis = (statistic_value.Statistic_kurtosis_Temp +
 800d686:	4b14      	ldr	r3, [pc, #80]	; (800d6d8 <FFT_Thread+0x798>)
 800d688:	edc3 7a08 	vstr	s15, [r3, #32]
	 					statistic_value.Statistic_skewness = (statistic_value.Statistic_skewness_Temp +
 800d68c:	4b12      	ldr	r3, [pc, #72]	; (800d6d8 <FFT_Thread+0x798>)
 800d68e:	ed93 7a40 	vldr	s14, [r3, #256]	; 0x100
	 							statistic_value.Statistic_skewness) / 3;
 800d692:	4b11      	ldr	r3, [pc, #68]	; (800d6d8 <FFT_Thread+0x798>)
 800d694:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
	 					statistic_value.Statistic_skewness = (statistic_value.Statistic_skewness_Temp +
 800d698:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_skewness) / 3;
 800d69c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800d6a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_skewness = (statistic_value.Statistic_skewness_Temp +
 800d6a4:	4b0c      	ldr	r3, [pc, #48]	; (800d6d8 <FFT_Thread+0x798>)
 800d6a6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24


	 					USARTBLE.sendflag = 1;
 800d6aa:	4b0c      	ldr	r3, [pc, #48]	; (800d6dc <FFT_Thread+0x79c>)
 800d6ac:	2201      	movs	r2, #1
 800d6ae:	701a      	strb	r2, [r3, #0]
	 					averageTimes = 0;
 800d6b0:	4b0b      	ldr	r3, [pc, #44]	; (800d6e0 <FFT_Thread+0x7a0>)
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	701a      	strb	r2, [r3, #0]

	 					/*TODO: BLE send data*/
	 					BLE_USART(&huart6, &statistic_value);
 800d6b6:	4908      	ldr	r1, [pc, #32]	; (800d6d8 <FFT_Thread+0x798>)
 800d6b8:	480a      	ldr	r0, [pc, #40]	; (800d6e4 <FFT_Thread+0x7a4>)
 800d6ba:	f7fe f8d9 	bl	800b870 <BLE_USART>
	 					//TODO : Initial statistic value to zero
	 					//Initial_AllStatisticValue();

	 				}

	 				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800d6be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d6c2:	4809      	ldr	r0, [pc, #36]	; (800d6e8 <FFT_Thread+0x7a8>)
 800d6c4:	f002 fdfd 	bl	80102c2 <HAL_GPIO_TogglePin>

	 				//TODO : enable collect data flag
	 				stattisComputingStatus = statisticComputingNORMAL;
 800d6c8:	4b08      	ldr	r3, [pc, #32]	; (800d6ec <FFT_Thread+0x7ac>)
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	701a      	strb	r2, [r3, #0]
 800d6ce:	e43b      	b.n	800cf48 <FFT_Thread+0x8>
	 			}
	 */
	 	  }

	 	  else{
	 		 vTaskSuspend(NULL);
 800d6d0:	2000      	movs	r0, #0
 800d6d2:	f008 fa23 	bl	8015b1c <vTaskSuspend>
  {
 800d6d6:	e437      	b.n	800cf48 <FFT_Thread+0x8>
 800d6d8:	20059d84 	.word	0x20059d84
 800d6dc:	20060180 	.word	0x20060180
 800d6e0:	2000047c 	.word	0x2000047c
 800d6e4:	200683c0 	.word	0x200683c0
 800d6e8:	40020c00 	.word	0x40020c00
 800d6ec:	2000049c 	.word	0x2000049c

0800d6f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d6f0:	b480      	push	{r7}
 800d6f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800d6f4:	bf00      	nop
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fc:	4770      	bx	lr

0800d6fe <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 800d6fe:	b480      	push	{r7}
 800d700:	b085      	sub	sp, #20
 800d702:	af00      	add	r7, sp, #0
 800d704:	60b9      	str	r1, [r7, #8]
 800d706:	607a      	str	r2, [r7, #4]
 800d708:	603b      	str	r3, [r7, #0]
 800d70a:	4603      	mov	r3, r0
 800d70c:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 800d70e:	687a      	ldr	r2, [r7, #4]
 800d710:	683b      	ldr	r3, [r7, #0]
 800d712:	429a      	cmp	r2, r3
 800d714:	d204      	bcs.n	800d720 <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 800d716:	68ba      	ldr	r2, [r7, #8]
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	4413      	add	r3, r2
 800d71c:	7bfa      	ldrb	r2, [r7, #15]
 800d71e:	701a      	strb	r2, [r3, #0]
  }
}
 800d720:	bf00      	nop
 800d722:	3714      	adds	r7, #20
 800d724:	46bd      	mov	sp, r7
 800d726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72a:	4770      	bx	lr

0800d72c <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 800d72c:	b480      	push	{r7}
 800d72e:	b085      	sub	sp, #20
 800d730:	af00      	add	r7, sp, #0
 800d732:	60b9      	str	r1, [r7, #8]
 800d734:	607a      	str	r2, [r7, #4]
 800d736:	603b      	str	r3, [r7, #0]
 800d738:	4603      	mov	r3, r0
 800d73a:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 800d73c:	bf00      	nop
 800d73e:	3714      	adds	r7, #20
 800d740:	46bd      	mov	sp, r7
 800d742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d746:	4770      	bx	lr

0800d748 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 800d748:	b480      	push	{r7}
 800d74a:	b085      	sub	sp, #20
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
 800d750:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	60fb      	str	r3, [r7, #12]
 800d756:	e002      	b.n	800d75e <_strnlen_s+0x16>
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	3301      	adds	r3, #1
 800d75c:	60fb      	str	r3, [r7, #12]
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	781b      	ldrb	r3, [r3, #0]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d004      	beq.n	800d770 <_strnlen_s+0x28>
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	1e5a      	subs	r2, r3, #1
 800d76a:	603a      	str	r2, [r7, #0]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d1f3      	bne.n	800d758 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 800d770:	68fa      	ldr	r2, [r7, #12]
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	1ad3      	subs	r3, r2, r3
}
 800d776:	4618      	mov	r0, r3
 800d778:	3714      	adds	r7, #20
 800d77a:	46bd      	mov	sp, r7
 800d77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d780:	4770      	bx	lr

0800d782 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 800d782:	b480      	push	{r7}
 800d784:	b083      	sub	sp, #12
 800d786:	af00      	add	r7, sp, #0
 800d788:	4603      	mov	r3, r0
 800d78a:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 800d78c:	79fb      	ldrb	r3, [r7, #7]
 800d78e:	2b2f      	cmp	r3, #47	; 0x2f
 800d790:	d904      	bls.n	800d79c <_is_digit+0x1a>
 800d792:	79fb      	ldrb	r3, [r7, #7]
 800d794:	2b39      	cmp	r3, #57	; 0x39
 800d796:	d801      	bhi.n	800d79c <_is_digit+0x1a>
 800d798:	2301      	movs	r3, #1
 800d79a:	e000      	b.n	800d79e <_is_digit+0x1c>
 800d79c:	2300      	movs	r3, #0
 800d79e:	f003 0301 	and.w	r3, r3, #1
 800d7a2:	b2db      	uxtb	r3, r3
}
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	370c      	adds	r7, #12
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ae:	4770      	bx	lr

0800d7b0 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b084      	sub	sp, #16
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800d7bc:	e00e      	b.n	800d7dc <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800d7be:	68fa      	ldr	r2, [r7, #12]
 800d7c0:	4613      	mov	r3, r2
 800d7c2:	009b      	lsls	r3, r3, #2
 800d7c4:	4413      	add	r3, r2
 800d7c6:	005b      	lsls	r3, r3, #1
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	1c59      	adds	r1, r3, #1
 800d7d0:	687a      	ldr	r2, [r7, #4]
 800d7d2:	6011      	str	r1, [r2, #0]
 800d7d4:	781b      	ldrb	r3, [r3, #0]
 800d7d6:	4403      	add	r3, r0
 800d7d8:	3b30      	subs	r3, #48	; 0x30
 800d7da:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	781b      	ldrb	r3, [r3, #0]
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	f7ff ffcd 	bl	800d782 <_is_digit>
 800d7e8:	4603      	mov	r3, r0
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d1e7      	bne.n	800d7be <_atoi+0xe>
  }
  return i;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
}
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	3710      	adds	r7, #16
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	bd80      	pop	{r7, pc}

0800d7f8 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800d7f8:	b590      	push	{r4, r7, lr}
 800d7fa:	b087      	sub	sp, #28
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	60f8      	str	r0, [r7, #12]
 800d800:	60b9      	str	r1, [r7, #8]
 800d802:	607a      	str	r2, [r7, #4]
 800d804:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800d80a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d80c:	f003 0302 	and.w	r3, r3, #2
 800d810:	2b00      	cmp	r3, #0
 800d812:	d125      	bne.n	800d860 <_out_rev+0x68>
 800d814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d816:	f003 0301 	and.w	r3, r3, #1
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d120      	bne.n	800d860 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 800d81e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d820:	617b      	str	r3, [r7, #20]
 800d822:	e00a      	b.n	800d83a <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 800d824:	687a      	ldr	r2, [r7, #4]
 800d826:	1c53      	adds	r3, r2, #1
 800d828:	607b      	str	r3, [r7, #4]
 800d82a:	68fc      	ldr	r4, [r7, #12]
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	68b9      	ldr	r1, [r7, #8]
 800d830:	2020      	movs	r0, #32
 800d832:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 800d834:	697b      	ldr	r3, [r7, #20]
 800d836:	3301      	adds	r3, #1
 800d838:	617b      	str	r3, [r7, #20]
 800d83a:	697a      	ldr	r2, [r7, #20]
 800d83c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d83e:	429a      	cmp	r2, r3
 800d840:	d3f0      	bcc.n	800d824 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 800d842:	e00d      	b.n	800d860 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 800d844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d846:	3b01      	subs	r3, #1
 800d848:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d84a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d84c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d84e:	4413      	add	r3, r2
 800d850:	7818      	ldrb	r0, [r3, #0]
 800d852:	687a      	ldr	r2, [r7, #4]
 800d854:	1c53      	adds	r3, r2, #1
 800d856:	607b      	str	r3, [r7, #4]
 800d858:	68fc      	ldr	r4, [r7, #12]
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	68b9      	ldr	r1, [r7, #8]
 800d85e:	47a0      	blx	r4
  while (len) {
 800d860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d862:	2b00      	cmp	r3, #0
 800d864:	d1ee      	bne.n	800d844 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 800d866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d868:	f003 0302 	and.w	r3, r3, #2
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d00e      	beq.n	800d88e <_out_rev+0x96>
    while (idx - start_idx < width) {
 800d870:	e007      	b.n	800d882 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 800d872:	687a      	ldr	r2, [r7, #4]
 800d874:	1c53      	adds	r3, r2, #1
 800d876:	607b      	str	r3, [r7, #4]
 800d878:	68fc      	ldr	r4, [r7, #12]
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	68b9      	ldr	r1, [r7, #8]
 800d87e:	2020      	movs	r0, #32
 800d880:	47a0      	blx	r4
    while (idx - start_idx < width) {
 800d882:	687a      	ldr	r2, [r7, #4]
 800d884:	693b      	ldr	r3, [r7, #16]
 800d886:	1ad3      	subs	r3, r2, r3
 800d888:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d88a:	429a      	cmp	r2, r3
 800d88c:	d8f1      	bhi.n	800d872 <_out_rev+0x7a>
    }
  }

  return idx;
 800d88e:	687b      	ldr	r3, [r7, #4]
}
 800d890:	4618      	mov	r0, r3
 800d892:	371c      	adds	r7, #28
 800d894:	46bd      	mov	sp, r7
 800d896:	bd90      	pop	{r4, r7, pc}

0800d898 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b088      	sub	sp, #32
 800d89c:	af04      	add	r7, sp, #16
 800d89e:	60f8      	str	r0, [r7, #12]
 800d8a0:	60b9      	str	r1, [r7, #8]
 800d8a2:	607a      	str	r2, [r7, #4]
 800d8a4:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 800d8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8a8:	f003 0302 	and.w	r3, r3, #2
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d136      	bne.n	800d91e <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800d8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d018      	beq.n	800d8e8 <_ntoa_format+0x50>
 800d8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8b8:	f003 0301 	and.w	r3, r3, #1
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d013      	beq.n	800d8e8 <_ntoa_format+0x50>
 800d8c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d104      	bne.n	800d8d2 <_ntoa_format+0x3a>
 800d8c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ca:	f003 030c 	and.w	r3, r3, #12
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d00a      	beq.n	800d8e8 <_ntoa_format+0x50>
      width--;
 800d8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8d4:	3b01      	subs	r3, #1
 800d8d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800d8d8:	e006      	b.n	800d8e8 <_ntoa_format+0x50>
      buf[len++] = '0';
 800d8da:	69fb      	ldr	r3, [r7, #28]
 800d8dc:	1c5a      	adds	r2, r3, #1
 800d8de:	61fa      	str	r2, [r7, #28]
 800d8e0:	69ba      	ldr	r2, [r7, #24]
 800d8e2:	4413      	add	r3, r2
 800d8e4:	2230      	movs	r2, #48	; 0x30
 800d8e6:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800d8e8:	69fa      	ldr	r2, [r7, #28]
 800d8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ec:	429a      	cmp	r2, r3
 800d8ee:	d20a      	bcs.n	800d906 <_ntoa_format+0x6e>
 800d8f0:	69fb      	ldr	r3, [r7, #28]
 800d8f2:	2b1f      	cmp	r3, #31
 800d8f4:	d9f1      	bls.n	800d8da <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800d8f6:	e006      	b.n	800d906 <_ntoa_format+0x6e>
      buf[len++] = '0';
 800d8f8:	69fb      	ldr	r3, [r7, #28]
 800d8fa:	1c5a      	adds	r2, r3, #1
 800d8fc:	61fa      	str	r2, [r7, #28]
 800d8fe:	69ba      	ldr	r2, [r7, #24]
 800d900:	4413      	add	r3, r2
 800d902:	2230      	movs	r2, #48	; 0x30
 800d904:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800d906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d908:	f003 0301 	and.w	r3, r3, #1
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d006      	beq.n	800d91e <_ntoa_format+0x86>
 800d910:	69fa      	ldr	r2, [r7, #28]
 800d912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d914:	429a      	cmp	r2, r3
 800d916:	d202      	bcs.n	800d91e <_ntoa_format+0x86>
 800d918:	69fb      	ldr	r3, [r7, #28]
 800d91a:	2b1f      	cmp	r3, #31
 800d91c:	d9ec      	bls.n	800d8f8 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 800d91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d920:	f003 0310 	and.w	r3, r3, #16
 800d924:	2b00      	cmp	r3, #0
 800d926:	d058      	beq.n	800d9da <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800d928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d92a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d116      	bne.n	800d960 <_ntoa_format+0xc8>
 800d932:	69fb      	ldr	r3, [r7, #28]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d013      	beq.n	800d960 <_ntoa_format+0xc8>
 800d938:	69fa      	ldr	r2, [r7, #28]
 800d93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d93c:	429a      	cmp	r2, r3
 800d93e:	d003      	beq.n	800d948 <_ntoa_format+0xb0>
 800d940:	69fa      	ldr	r2, [r7, #28]
 800d942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d944:	429a      	cmp	r2, r3
 800d946:	d10b      	bne.n	800d960 <_ntoa_format+0xc8>
      len--;
 800d948:	69fb      	ldr	r3, [r7, #28]
 800d94a:	3b01      	subs	r3, #1
 800d94c:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 800d94e:	69fb      	ldr	r3, [r7, #28]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d005      	beq.n	800d960 <_ntoa_format+0xc8>
 800d954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d956:	2b10      	cmp	r3, #16
 800d958:	d102      	bne.n	800d960 <_ntoa_format+0xc8>
        len--;
 800d95a:	69fb      	ldr	r3, [r7, #28]
 800d95c:	3b01      	subs	r3, #1
 800d95e:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800d960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d962:	2b10      	cmp	r3, #16
 800d964:	d10f      	bne.n	800d986 <_ntoa_format+0xee>
 800d966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d968:	f003 0320 	and.w	r3, r3, #32
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d10a      	bne.n	800d986 <_ntoa_format+0xee>
 800d970:	69fb      	ldr	r3, [r7, #28]
 800d972:	2b1f      	cmp	r3, #31
 800d974:	d807      	bhi.n	800d986 <_ntoa_format+0xee>
      buf[len++] = 'x';
 800d976:	69fb      	ldr	r3, [r7, #28]
 800d978:	1c5a      	adds	r2, r3, #1
 800d97a:	61fa      	str	r2, [r7, #28]
 800d97c:	69ba      	ldr	r2, [r7, #24]
 800d97e:	4413      	add	r3, r2
 800d980:	2278      	movs	r2, #120	; 0x78
 800d982:	701a      	strb	r2, [r3, #0]
 800d984:	e01f      	b.n	800d9c6 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800d986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d988:	2b10      	cmp	r3, #16
 800d98a:	d10f      	bne.n	800d9ac <_ntoa_format+0x114>
 800d98c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d98e:	f003 0320 	and.w	r3, r3, #32
 800d992:	2b00      	cmp	r3, #0
 800d994:	d00a      	beq.n	800d9ac <_ntoa_format+0x114>
 800d996:	69fb      	ldr	r3, [r7, #28]
 800d998:	2b1f      	cmp	r3, #31
 800d99a:	d807      	bhi.n	800d9ac <_ntoa_format+0x114>
      buf[len++] = 'X';
 800d99c:	69fb      	ldr	r3, [r7, #28]
 800d99e:	1c5a      	adds	r2, r3, #1
 800d9a0:	61fa      	str	r2, [r7, #28]
 800d9a2:	69ba      	ldr	r2, [r7, #24]
 800d9a4:	4413      	add	r3, r2
 800d9a6:	2258      	movs	r2, #88	; 0x58
 800d9a8:	701a      	strb	r2, [r3, #0]
 800d9aa:	e00c      	b.n	800d9c6 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800d9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ae:	2b02      	cmp	r3, #2
 800d9b0:	d109      	bne.n	800d9c6 <_ntoa_format+0x12e>
 800d9b2:	69fb      	ldr	r3, [r7, #28]
 800d9b4:	2b1f      	cmp	r3, #31
 800d9b6:	d806      	bhi.n	800d9c6 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 800d9b8:	69fb      	ldr	r3, [r7, #28]
 800d9ba:	1c5a      	adds	r2, r3, #1
 800d9bc:	61fa      	str	r2, [r7, #28]
 800d9be:	69ba      	ldr	r2, [r7, #24]
 800d9c0:	4413      	add	r3, r2
 800d9c2:	2262      	movs	r2, #98	; 0x62
 800d9c4:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800d9c6:	69fb      	ldr	r3, [r7, #28]
 800d9c8:	2b1f      	cmp	r3, #31
 800d9ca:	d806      	bhi.n	800d9da <_ntoa_format+0x142>
      buf[len++] = '0';
 800d9cc:	69fb      	ldr	r3, [r7, #28]
 800d9ce:	1c5a      	adds	r2, r3, #1
 800d9d0:	61fa      	str	r2, [r7, #28]
 800d9d2:	69ba      	ldr	r2, [r7, #24]
 800d9d4:	4413      	add	r3, r2
 800d9d6:	2230      	movs	r2, #48	; 0x30
 800d9d8:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800d9da:	69fb      	ldr	r3, [r7, #28]
 800d9dc:	2b1f      	cmp	r3, #31
 800d9de:	d824      	bhi.n	800da2a <_ntoa_format+0x192>
    if (negative) {
 800d9e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d007      	beq.n	800d9f8 <_ntoa_format+0x160>
      buf[len++] = '-';
 800d9e8:	69fb      	ldr	r3, [r7, #28]
 800d9ea:	1c5a      	adds	r2, r3, #1
 800d9ec:	61fa      	str	r2, [r7, #28]
 800d9ee:	69ba      	ldr	r2, [r7, #24]
 800d9f0:	4413      	add	r3, r2
 800d9f2:	222d      	movs	r2, #45	; 0x2d
 800d9f4:	701a      	strb	r2, [r3, #0]
 800d9f6:	e018      	b.n	800da2a <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 800d9f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9fa:	f003 0304 	and.w	r3, r3, #4
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d007      	beq.n	800da12 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800da02:	69fb      	ldr	r3, [r7, #28]
 800da04:	1c5a      	adds	r2, r3, #1
 800da06:	61fa      	str	r2, [r7, #28]
 800da08:	69ba      	ldr	r2, [r7, #24]
 800da0a:	4413      	add	r3, r2
 800da0c:	222b      	movs	r2, #43	; 0x2b
 800da0e:	701a      	strb	r2, [r3, #0]
 800da10:	e00b      	b.n	800da2a <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 800da12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da14:	f003 0308 	and.w	r3, r3, #8
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d006      	beq.n	800da2a <_ntoa_format+0x192>
      buf[len++] = ' ';
 800da1c:	69fb      	ldr	r3, [r7, #28]
 800da1e:	1c5a      	adds	r2, r3, #1
 800da20:	61fa      	str	r2, [r7, #28]
 800da22:	69ba      	ldr	r2, [r7, #24]
 800da24:	4413      	add	r3, r2
 800da26:	2220      	movs	r2, #32
 800da28:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800da2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da2c:	9303      	str	r3, [sp, #12]
 800da2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da30:	9302      	str	r3, [sp, #8]
 800da32:	69fb      	ldr	r3, [r7, #28]
 800da34:	9301      	str	r3, [sp, #4]
 800da36:	69bb      	ldr	r3, [r7, #24]
 800da38:	9300      	str	r3, [sp, #0]
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	687a      	ldr	r2, [r7, #4]
 800da3e:	68b9      	ldr	r1, [r7, #8]
 800da40:	68f8      	ldr	r0, [r7, #12]
 800da42:	f7ff fed9 	bl	800d7f8 <_out_rev>
 800da46:	4603      	mov	r3, r0
}
 800da48:	4618      	mov	r0, r3
 800da4a:	3710      	adds	r7, #16
 800da4c:	46bd      	mov	sp, r7
 800da4e:	bd80      	pop	{r7, pc}

0800da50 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b096      	sub	sp, #88	; 0x58
 800da54:	af08      	add	r7, sp, #32
 800da56:	60f8      	str	r0, [r7, #12]
 800da58:	60b9      	str	r1, [r7, #8]
 800da5a:	607a      	str	r2, [r7, #4]
 800da5c:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800da5e:	2300      	movs	r3, #0
 800da60:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800da62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da64:	2b00      	cmp	r3, #0
 800da66:	d103      	bne.n	800da70 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 800da68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da6a:	f023 0310 	bic.w	r3, r3, #16
 800da6e:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800da70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800da76:	2b00      	cmp	r3, #0
 800da78:	d002      	beq.n	800da80 <_ntoa_long+0x30>
 800da7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d033      	beq.n	800dae8 <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 800da80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800da84:	fbb3 f2f2 	udiv	r2, r3, r2
 800da88:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800da8a:	fb01 f202 	mul.w	r2, r1, r2
 800da8e:	1a9b      	subs	r3, r3, r2
 800da90:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800da94:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800da98:	2b09      	cmp	r3, #9
 800da9a:	d804      	bhi.n	800daa6 <_ntoa_long+0x56>
 800da9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800daa0:	3330      	adds	r3, #48	; 0x30
 800daa2:	b2da      	uxtb	r2, r3
 800daa4:	e00d      	b.n	800dac2 <_ntoa_long+0x72>
 800daa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800daa8:	f003 0320 	and.w	r3, r3, #32
 800daac:	2b00      	cmp	r3, #0
 800daae:	d001      	beq.n	800dab4 <_ntoa_long+0x64>
 800dab0:	2241      	movs	r2, #65	; 0x41
 800dab2:	e000      	b.n	800dab6 <_ntoa_long+0x66>
 800dab4:	2261      	movs	r2, #97	; 0x61
 800dab6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800daba:	4413      	add	r3, r2
 800dabc:	b2db      	uxtb	r3, r3
 800dabe:	3b0a      	subs	r3, #10
 800dac0:	b2da      	uxtb	r2, r3
 800dac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dac4:	1c59      	adds	r1, r3, #1
 800dac6:	6379      	str	r1, [r7, #52]	; 0x34
 800dac8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800dacc:	440b      	add	r3, r1
 800dace:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800dad2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dad4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dad6:	fbb2 f3f3 	udiv	r3, r2, r3
 800dada:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800dadc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d002      	beq.n	800dae8 <_ntoa_long+0x98>
 800dae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dae4:	2b1f      	cmp	r3, #31
 800dae6:	d9cb      	bls.n	800da80 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800dae8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800daea:	9306      	str	r3, [sp, #24]
 800daec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800daee:	9305      	str	r3, [sp, #20]
 800daf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800daf2:	9304      	str	r3, [sp, #16]
 800daf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800daf6:	9303      	str	r3, [sp, #12]
 800daf8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800dafc:	9302      	str	r3, [sp, #8]
 800dafe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db00:	9301      	str	r3, [sp, #4]
 800db02:	f107 0310 	add.w	r3, r7, #16
 800db06:	9300      	str	r3, [sp, #0]
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	687a      	ldr	r2, [r7, #4]
 800db0c:	68b9      	ldr	r1, [r7, #8]
 800db0e:	68f8      	ldr	r0, [r7, #12]
 800db10:	f7ff fec2 	bl	800d898 <_ntoa_format>
 800db14:	4603      	mov	r3, r0
}
 800db16:	4618      	mov	r0, r3
 800db18:	3738      	adds	r7, #56	; 0x38
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}

0800db1e <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800db1e:	b580      	push	{r7, lr}
 800db20:	b096      	sub	sp, #88	; 0x58
 800db22:	af08      	add	r7, sp, #32
 800db24:	60f8      	str	r0, [r7, #12]
 800db26:	60b9      	str	r1, [r7, #8]
 800db28:	607a      	str	r2, [r7, #4]
 800db2a:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800db2c:	2300      	movs	r3, #0
 800db2e:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800db30:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800db34:	4313      	orrs	r3, r2
 800db36:	d103      	bne.n	800db40 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 800db38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800db3a:	f023 0310 	bic.w	r3, r3, #16
 800db3e:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800db40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800db42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800db46:	2b00      	cmp	r3, #0
 800db48:	d003      	beq.n	800db52 <_ntoa_long_long+0x34>
 800db4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800db4e:	4313      	orrs	r3, r2
 800db50:	d038      	beq.n	800dbc4 <_ntoa_long_long+0xa6>
    do {
      const char digit = (char)(value % base);
 800db52:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800db56:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800db5a:	f7fa fde5 	bl	8008728 <__aeabi_uldivmod>
 800db5e:	4613      	mov	r3, r2
 800db60:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800db64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800db68:	2b09      	cmp	r3, #9
 800db6a:	d804      	bhi.n	800db76 <_ntoa_long_long+0x58>
 800db6c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800db70:	3330      	adds	r3, #48	; 0x30
 800db72:	b2da      	uxtb	r2, r3
 800db74:	e00d      	b.n	800db92 <_ntoa_long_long+0x74>
 800db76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800db78:	f003 0320 	and.w	r3, r3, #32
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d001      	beq.n	800db84 <_ntoa_long_long+0x66>
 800db80:	2241      	movs	r2, #65	; 0x41
 800db82:	e000      	b.n	800db86 <_ntoa_long_long+0x68>
 800db84:	2261      	movs	r2, #97	; 0x61
 800db86:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800db8a:	4413      	add	r3, r2
 800db8c:	b2db      	uxtb	r3, r3
 800db8e:	3b0a      	subs	r3, #10
 800db90:	b2da      	uxtb	r2, r3
 800db92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db94:	1c59      	adds	r1, r3, #1
 800db96:	6379      	str	r1, [r7, #52]	; 0x34
 800db98:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800db9c:	440b      	add	r3, r1
 800db9e:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800dba2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800dba6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800dbaa:	f7fa fdbd 	bl	8008728 <__aeabi_uldivmod>
 800dbae:	4602      	mov	r2, r0
 800dbb0:	460b      	mov	r3, r1
 800dbb2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800dbb6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800dbba:	4313      	orrs	r3, r2
 800dbbc:	d002      	beq.n	800dbc4 <_ntoa_long_long+0xa6>
 800dbbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbc0:	2b1f      	cmp	r3, #31
 800dbc2:	d9c6      	bls.n	800db52 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800dbc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbc6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dbc8:	9206      	str	r2, [sp, #24]
 800dbca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dbcc:	9205      	str	r2, [sp, #20]
 800dbce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dbd0:	9204      	str	r2, [sp, #16]
 800dbd2:	9303      	str	r3, [sp, #12]
 800dbd4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800dbd8:	9302      	str	r3, [sp, #8]
 800dbda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbdc:	9301      	str	r3, [sp, #4]
 800dbde:	f107 0310 	add.w	r3, r7, #16
 800dbe2:	9300      	str	r3, [sp, #0]
 800dbe4:	683b      	ldr	r3, [r7, #0]
 800dbe6:	687a      	ldr	r2, [r7, #4]
 800dbe8:	68b9      	ldr	r1, [r7, #8]
 800dbea:	68f8      	ldr	r0, [r7, #12]
 800dbec:	f7ff fe54 	bl	800d898 <_ntoa_format>
 800dbf0:	4603      	mov	r3, r0
}
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	3738      	adds	r7, #56	; 0x38
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}
 800dbfa:	0000      	movs	r0, r0
 800dbfc:	0000      	movs	r0, r0
	...

0800dc00 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b09c      	sub	sp, #112	; 0x70
 800dc04:	af04      	add	r7, sp, #16
 800dc06:	6178      	str	r0, [r7, #20]
 800dc08:	6139      	str	r1, [r7, #16]
 800dc0a:	60fa      	str	r2, [r7, #12]
 800dc0c:	60bb      	str	r3, [r7, #8]
 800dc0e:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 800dc12:	2300      	movs	r3, #0
 800dc14:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 800dc16:	f04f 0200 	mov.w	r2, #0
 800dc1a:	f04f 0300 	mov.w	r3, #0
 800dc1e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 800dc22:	ed97 6b00 	vldr	d6, [r7]
 800dc26:	ed97 7b00 	vldr	d7, [r7]
 800dc2a:	eeb4 6b47 	vcmp.f64	d6, d7
 800dc2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc32:	d00f      	beq.n	800dc54 <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 800dc34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dc36:	9303      	str	r3, [sp, #12]
 800dc38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc3a:	9302      	str	r3, [sp, #8]
 800dc3c:	2303      	movs	r3, #3
 800dc3e:	9301      	str	r3, [sp, #4]
 800dc40:	4bb7      	ldr	r3, [pc, #732]	; (800df20 <_ftoa+0x320>)
 800dc42:	9300      	str	r3, [sp, #0]
 800dc44:	68bb      	ldr	r3, [r7, #8]
 800dc46:	68fa      	ldr	r2, [r7, #12]
 800dc48:	6939      	ldr	r1, [r7, #16]
 800dc4a:	6978      	ldr	r0, [r7, #20]
 800dc4c:	f7ff fdd4 	bl	800d7f8 <_out_rev>
 800dc50:	4603      	mov	r3, r0
 800dc52:	e21e      	b.n	800e092 <_ftoa+0x492>
  if (value < -DBL_MAX)
 800dc54:	ed97 7b00 	vldr	d7, [r7]
 800dc58:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 800def8 <_ftoa+0x2f8>
 800dc5c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800dc60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc64:	d50f      	bpl.n	800dc86 <_ftoa+0x86>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 800dc66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dc68:	9303      	str	r3, [sp, #12]
 800dc6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc6c:	9302      	str	r3, [sp, #8]
 800dc6e:	2304      	movs	r3, #4
 800dc70:	9301      	str	r3, [sp, #4]
 800dc72:	4bac      	ldr	r3, [pc, #688]	; (800df24 <_ftoa+0x324>)
 800dc74:	9300      	str	r3, [sp, #0]
 800dc76:	68bb      	ldr	r3, [r7, #8]
 800dc78:	68fa      	ldr	r2, [r7, #12]
 800dc7a:	6939      	ldr	r1, [r7, #16]
 800dc7c:	6978      	ldr	r0, [r7, #20]
 800dc7e:	f7ff fdbb 	bl	800d7f8 <_out_rev>
 800dc82:	4603      	mov	r3, r0
 800dc84:	e205      	b.n	800e092 <_ftoa+0x492>
  if (value > DBL_MAX)
 800dc86:	ed97 7b00 	vldr	d7, [r7]
 800dc8a:	ed9f 6b9d 	vldr	d6, [pc, #628]	; 800df00 <_ftoa+0x300>
 800dc8e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800dc92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc96:	dd1d      	ble.n	800dcd4 <_ftoa+0xd4>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 800dc98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dc9a:	f003 0304 	and.w	r3, r3, #4
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d001      	beq.n	800dca6 <_ftoa+0xa6>
 800dca2:	4ba1      	ldr	r3, [pc, #644]	; (800df28 <_ftoa+0x328>)
 800dca4:	e000      	b.n	800dca8 <_ftoa+0xa8>
 800dca6:	4ba1      	ldr	r3, [pc, #644]	; (800df2c <_ftoa+0x32c>)
 800dca8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800dcaa:	f002 0204 	and.w	r2, r2, #4
 800dcae:	2a00      	cmp	r2, #0
 800dcb0:	d001      	beq.n	800dcb6 <_ftoa+0xb6>
 800dcb2:	2204      	movs	r2, #4
 800dcb4:	e000      	b.n	800dcb8 <_ftoa+0xb8>
 800dcb6:	2203      	movs	r2, #3
 800dcb8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800dcba:	9103      	str	r1, [sp, #12]
 800dcbc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800dcbe:	9102      	str	r1, [sp, #8]
 800dcc0:	9201      	str	r2, [sp, #4]
 800dcc2:	9300      	str	r3, [sp, #0]
 800dcc4:	68bb      	ldr	r3, [r7, #8]
 800dcc6:	68fa      	ldr	r2, [r7, #12]
 800dcc8:	6939      	ldr	r1, [r7, #16]
 800dcca:	6978      	ldr	r0, [r7, #20]
 800dccc:	f7ff fd94 	bl	800d7f8 <_out_rev>
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	e1de      	b.n	800e092 <_ftoa+0x492>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800dcd4:	ed97 7b00 	vldr	d7, [r7]
 800dcd8:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 800df08 <_ftoa+0x308>
 800dcdc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800dce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dce4:	dc08      	bgt.n	800dcf8 <_ftoa+0xf8>
 800dce6:	ed97 7b00 	vldr	d7, [r7]
 800dcea:	ed9f 6b89 	vldr	d6, [pc, #548]	; 800df10 <_ftoa+0x310>
 800dcee:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800dcf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcf6:	d50f      	bpl.n	800dd18 <_ftoa+0x118>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800dcf8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dcfa:	9302      	str	r3, [sp, #8]
 800dcfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dcfe:	9301      	str	r3, [sp, #4]
 800dd00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dd02:	9300      	str	r3, [sp, #0]
 800dd04:	ed97 0b00 	vldr	d0, [r7]
 800dd08:	68bb      	ldr	r3, [r7, #8]
 800dd0a:	68fa      	ldr	r2, [r7, #12]
 800dd0c:	6939      	ldr	r1, [r7, #16]
 800dd0e:	6978      	ldr	r0, [r7, #20]
 800dd10:	f000 f9c6 	bl	800e0a0 <_etoa>
 800dd14:	4603      	mov	r3, r0
 800dd16:	e1bc      	b.n	800e092 <_ftoa+0x492>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 800dd18:	2300      	movs	r3, #0
 800dd1a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 800dd1e:	ed97 7b00 	vldr	d7, [r7]
 800dd22:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800dd26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd2a:	d50a      	bpl.n	800dd42 <_ftoa+0x142>
    negative = true;
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 800dd32:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800df18 <_ftoa+0x318>
 800dd36:	ed97 7b00 	vldr	d7, [r7]
 800dd3a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800dd3e:	ed87 7b00 	vstr	d7, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 800dd42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dd44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d10e      	bne.n	800dd6a <_ftoa+0x16a>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800dd4c:	2306      	movs	r3, #6
 800dd4e:	66bb      	str	r3, [r7, #104]	; 0x68
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800dd50:	e00b      	b.n	800dd6a <_ftoa+0x16a>
    buf[len++] = '0';
 800dd52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd54:	1c5a      	adds	r2, r3, #1
 800dd56:	65fa      	str	r2, [r7, #92]	; 0x5c
 800dd58:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800dd5c:	4413      	add	r3, r2
 800dd5e:	2230      	movs	r2, #48	; 0x30
 800dd60:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 800dd64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dd66:	3b01      	subs	r3, #1
 800dd68:	66bb      	str	r3, [r7, #104]	; 0x68
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800dd6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd6c:	2b1f      	cmp	r3, #31
 800dd6e:	d802      	bhi.n	800dd76 <_ftoa+0x176>
 800dd70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dd72:	2b09      	cmp	r3, #9
 800dd74:	d8ed      	bhi.n	800dd52 <_ftoa+0x152>
  }

  int whole = (int)value;
 800dd76:	ed97 7b00 	vldr	d7, [r7]
 800dd7a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800dd7e:	ee17 3a90 	vmov	r3, s15
 800dd82:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 800dd84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd86:	ee07 3a90 	vmov	s15, r3
 800dd8a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800dd8e:	ed97 6b00 	vldr	d6, [r7]
 800dd92:	ee36 6b47 	vsub.f64	d6, d6, d7
 800dd96:	4a66      	ldr	r2, [pc, #408]	; (800df30 <_ftoa+0x330>)
 800dd98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dd9a:	00db      	lsls	r3, r3, #3
 800dd9c:	4413      	add	r3, r2
 800dd9e:	ed93 7b00 	vldr	d7, [r3]
 800dda2:	ee26 7b07 	vmul.f64	d7, d6, d7
 800dda6:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 800ddaa:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800ddae:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800ddb2:	ee17 3a90 	vmov	r3, s15
 800ddb6:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 800ddb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ddba:	ee07 3a90 	vmov	s15, r3
 800ddbe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ddc2:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 800ddc6:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ddca:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40

  if (diff > 0.5) {
 800ddce:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800ddd2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800ddd6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ddda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddde:	dd18      	ble.n	800de12 <_ftoa+0x212>
    ++frac;
 800dde0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dde2:	3301      	adds	r3, #1
 800dde4:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 800dde6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dde8:	ee07 3a90 	vmov	s15, r3
 800ddec:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800ddf0:	4a4f      	ldr	r2, [pc, #316]	; (800df30 <_ftoa+0x330>)
 800ddf2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ddf4:	00db      	lsls	r3, r3, #3
 800ddf6:	4413      	add	r3, r2
 800ddf8:	ed93 7b00 	vldr	d7, [r3]
 800ddfc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800de00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de04:	db19      	blt.n	800de3a <_ftoa+0x23a>
      frac = 0;
 800de06:	2300      	movs	r3, #0
 800de08:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 800de0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de0c:	3301      	adds	r3, #1
 800de0e:	657b      	str	r3, [r7, #84]	; 0x54
 800de10:	e013      	b.n	800de3a <_ftoa+0x23a>
    }
  }
  else if (diff < 0.5) {
 800de12:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800de16:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800de1a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800de1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de22:	d40a      	bmi.n	800de3a <_ftoa+0x23a>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 800de24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de26:	2b00      	cmp	r3, #0
 800de28:	d004      	beq.n	800de34 <_ftoa+0x234>
 800de2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de2c:	f003 0301 	and.w	r3, r3, #1
 800de30:	2b00      	cmp	r3, #0
 800de32:	d002      	beq.n	800de3a <_ftoa+0x23a>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 800de34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de36:	3301      	adds	r3, #1
 800de38:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 800de3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d12e      	bne.n	800de9e <_ftoa+0x29e>
    diff = value - (double)whole;
 800de40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de42:	ee07 3a90 	vmov	s15, r3
 800de46:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800de4a:	ed97 6b00 	vldr	d6, [r7]
 800de4e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800de52:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 800de56:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800de5a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800de5e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800de62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de66:	bf4c      	ite	mi
 800de68:	2301      	movmi	r3, #1
 800de6a:	2300      	movpl	r3, #0
 800de6c:	b2db      	uxtb	r3, r3
 800de6e:	f083 0301 	eor.w	r3, r3, #1
 800de72:	b2db      	uxtb	r3, r3
 800de74:	2b00      	cmp	r3, #0
 800de76:	d108      	bne.n	800de8a <_ftoa+0x28a>
 800de78:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800de7c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800de80:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800de84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de88:	dd73      	ble.n	800df72 <_ftoa+0x372>
 800de8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de8c:	f003 0301 	and.w	r3, r3, #1
 800de90:	2b00      	cmp	r3, #0
 800de92:	f000 8091 	beq.w	800dfb8 <_ftoa+0x3b8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 800de96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de98:	3301      	adds	r3, #1
 800de9a:	657b      	str	r3, [r7, #84]	; 0x54
 800de9c:	e08c      	b.n	800dfb8 <_ftoa+0x3b8>
    }
  }
  else {
    unsigned int count = prec;
 800de9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dea0:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800dea2:	e020      	b.n	800dee6 <_ftoa+0x2e6>
      --count;
 800dea4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dea6:	3b01      	subs	r3, #1
 800dea8:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 800deaa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800deac:	4b21      	ldr	r3, [pc, #132]	; (800df34 <_ftoa+0x334>)
 800deae:	fba3 2301 	umull	r2, r3, r3, r1
 800deb2:	08da      	lsrs	r2, r3, #3
 800deb4:	4613      	mov	r3, r2
 800deb6:	009b      	lsls	r3, r3, #2
 800deb8:	4413      	add	r3, r2
 800deba:	005b      	lsls	r3, r3, #1
 800debc:	1aca      	subs	r2, r1, r3
 800debe:	b2d2      	uxtb	r2, r2
 800dec0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dec2:	1c59      	adds	r1, r3, #1
 800dec4:	65f9      	str	r1, [r7, #92]	; 0x5c
 800dec6:	3230      	adds	r2, #48	; 0x30
 800dec8:	b2d2      	uxtb	r2, r2
 800deca:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800dece:	440b      	add	r3, r1
 800ded0:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 800ded4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ded6:	4a17      	ldr	r2, [pc, #92]	; (800df34 <_ftoa+0x334>)
 800ded8:	fba2 2303 	umull	r2, r3, r2, r3
 800dedc:	08db      	lsrs	r3, r3, #3
 800dede:	653b      	str	r3, [r7, #80]	; 0x50
 800dee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d003      	beq.n	800deee <_ftoa+0x2ee>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800dee6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dee8:	2b1f      	cmp	r3, #31
 800deea:	d9db      	bls.n	800dea4 <_ftoa+0x2a4>
 800deec:	e02d      	b.n	800df4a <_ftoa+0x34a>
        break;
 800deee:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800def0:	e02b      	b.n	800df4a <_ftoa+0x34a>
 800def2:	bf00      	nop
 800def4:	f3af 8000 	nop.w
 800def8:	ffffffff 	.word	0xffffffff
 800defc:	ffefffff 	.word	0xffefffff
 800df00:	ffffffff 	.word	0xffffffff
 800df04:	7fefffff 	.word	0x7fefffff
 800df08:	00000000 	.word	0x00000000
 800df0c:	41cdcd65 	.word	0x41cdcd65
 800df10:	00000000 	.word	0x00000000
 800df14:	c1cdcd65 	.word	0xc1cdcd65
	...
 800df20:	0801e1d8 	.word	0x0801e1d8
 800df24:	0801e1dc 	.word	0x0801e1dc
 800df28:	0801e1e4 	.word	0x0801e1e4
 800df2c:	0801e1ec 	.word	0x0801e1ec
 800df30:	08028188 	.word	0x08028188
 800df34:	cccccccd 	.word	0xcccccccd
      buf[len++] = '0';
 800df38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df3a:	1c5a      	adds	r2, r3, #1
 800df3c:	65fa      	str	r2, [r7, #92]	; 0x5c
 800df3e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800df42:	4413      	add	r3, r2
 800df44:	2230      	movs	r2, #48	; 0x30
 800df46:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800df4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df4c:	2b1f      	cmp	r3, #31
 800df4e:	d804      	bhi.n	800df5a <_ftoa+0x35a>
 800df50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df52:	1e5a      	subs	r2, r3, #1
 800df54:	64fa      	str	r2, [r7, #76]	; 0x4c
 800df56:	2b00      	cmp	r3, #0
 800df58:	d1ee      	bne.n	800df38 <_ftoa+0x338>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800df5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df5c:	2b1f      	cmp	r3, #31
 800df5e:	d82b      	bhi.n	800dfb8 <_ftoa+0x3b8>
      // add decimal
      buf[len++] = '.';
 800df60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df62:	1c5a      	adds	r2, r3, #1
 800df64:	65fa      	str	r2, [r7, #92]	; 0x5c
 800df66:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800df6a:	4413      	add	r3, r2
 800df6c:	222e      	movs	r2, #46	; 0x2e
 800df6e:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800df72:	e021      	b.n	800dfb8 <_ftoa+0x3b8>
    buf[len++] = (char)(48 + (whole % 10));
 800df74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800df76:	4b49      	ldr	r3, [pc, #292]	; (800e09c <_ftoa+0x49c>)
 800df78:	fb83 1302 	smull	r1, r3, r3, r2
 800df7c:	1099      	asrs	r1, r3, #2
 800df7e:	17d3      	asrs	r3, r2, #31
 800df80:	1ac9      	subs	r1, r1, r3
 800df82:	460b      	mov	r3, r1
 800df84:	009b      	lsls	r3, r3, #2
 800df86:	440b      	add	r3, r1
 800df88:	005b      	lsls	r3, r3, #1
 800df8a:	1ad1      	subs	r1, r2, r3
 800df8c:	b2ca      	uxtb	r2, r1
 800df8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df90:	1c59      	adds	r1, r3, #1
 800df92:	65f9      	str	r1, [r7, #92]	; 0x5c
 800df94:	3230      	adds	r2, #48	; 0x30
 800df96:	b2d2      	uxtb	r2, r2
 800df98:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800df9c:	440b      	add	r3, r1
 800df9e:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800dfa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfa4:	4a3d      	ldr	r2, [pc, #244]	; (800e09c <_ftoa+0x49c>)
 800dfa6:	fb82 1203 	smull	r1, r2, r2, r3
 800dfaa:	1092      	asrs	r2, r2, #2
 800dfac:	17db      	asrs	r3, r3, #31
 800dfae:	1ad3      	subs	r3, r2, r3
 800dfb0:	657b      	str	r3, [r7, #84]	; 0x54
 800dfb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d003      	beq.n	800dfc0 <_ftoa+0x3c0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800dfb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dfba:	2b1f      	cmp	r3, #31
 800dfbc:	d9da      	bls.n	800df74 <_ftoa+0x374>
 800dfbe:	e000      	b.n	800dfc2 <_ftoa+0x3c2>
      break;
 800dfc0:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800dfc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dfc4:	f003 0302 	and.w	r3, r3, #2
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d124      	bne.n	800e016 <_ftoa+0x416>
 800dfcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dfce:	f003 0301 	and.w	r3, r3, #1
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d01f      	beq.n	800e016 <_ftoa+0x416>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800dfd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d015      	beq.n	800e008 <_ftoa+0x408>
 800dfdc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d104      	bne.n	800dfee <_ftoa+0x3ee>
 800dfe4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dfe6:	f003 030c 	and.w	r3, r3, #12
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d00c      	beq.n	800e008 <_ftoa+0x408>
      width--;
 800dfee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dff0:	3b01      	subs	r3, #1
 800dff2:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800dff4:	e008      	b.n	800e008 <_ftoa+0x408>
      buf[len++] = '0';
 800dff6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dff8:	1c5a      	adds	r2, r3, #1
 800dffa:	65fa      	str	r2, [r7, #92]	; 0x5c
 800dffc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800e000:	4413      	add	r3, r2
 800e002:	2230      	movs	r2, #48	; 0x30
 800e004:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800e008:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e00a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e00c:	429a      	cmp	r2, r3
 800e00e:	d202      	bcs.n	800e016 <_ftoa+0x416>
 800e010:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e012:	2b1f      	cmp	r3, #31
 800e014:	d9ef      	bls.n	800dff6 <_ftoa+0x3f6>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800e016:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e018:	2b1f      	cmp	r3, #31
 800e01a:	d82a      	bhi.n	800e072 <_ftoa+0x472>
    if (negative) {
 800e01c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800e020:	2b00      	cmp	r3, #0
 800e022:	d009      	beq.n	800e038 <_ftoa+0x438>
      buf[len++] = '-';
 800e024:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e026:	1c5a      	adds	r2, r3, #1
 800e028:	65fa      	str	r2, [r7, #92]	; 0x5c
 800e02a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800e02e:	4413      	add	r3, r2
 800e030:	222d      	movs	r2, #45	; 0x2d
 800e032:	f803 2c48 	strb.w	r2, [r3, #-72]
 800e036:	e01c      	b.n	800e072 <_ftoa+0x472>
    }
    else if (flags & FLAGS_PLUS) {
 800e038:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e03a:	f003 0304 	and.w	r3, r3, #4
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d009      	beq.n	800e056 <_ftoa+0x456>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800e042:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e044:	1c5a      	adds	r2, r3, #1
 800e046:	65fa      	str	r2, [r7, #92]	; 0x5c
 800e048:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800e04c:	4413      	add	r3, r2
 800e04e:	222b      	movs	r2, #43	; 0x2b
 800e050:	f803 2c48 	strb.w	r2, [r3, #-72]
 800e054:	e00d      	b.n	800e072 <_ftoa+0x472>
    }
    else if (flags & FLAGS_SPACE) {
 800e056:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e058:	f003 0308 	and.w	r3, r3, #8
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d008      	beq.n	800e072 <_ftoa+0x472>
      buf[len++] = ' ';
 800e060:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e062:	1c5a      	adds	r2, r3, #1
 800e064:	65fa      	str	r2, [r7, #92]	; 0x5c
 800e066:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800e06a:	4413      	add	r3, r2
 800e06c:	2220      	movs	r2, #32
 800e06e:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800e072:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e074:	9303      	str	r3, [sp, #12]
 800e076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e078:	9302      	str	r3, [sp, #8]
 800e07a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e07c:	9301      	str	r3, [sp, #4]
 800e07e:	f107 0318 	add.w	r3, r7, #24
 800e082:	9300      	str	r3, [sp, #0]
 800e084:	68bb      	ldr	r3, [r7, #8]
 800e086:	68fa      	ldr	r2, [r7, #12]
 800e088:	6939      	ldr	r1, [r7, #16]
 800e08a:	6978      	ldr	r0, [r7, #20]
 800e08c:	f7ff fbb4 	bl	800d7f8 <_out_rev>
 800e090:	4603      	mov	r3, r0
}
 800e092:	4618      	mov	r0, r3
 800e094:	3760      	adds	r7, #96	; 0x60
 800e096:	46bd      	mov	sp, r7
 800e098:	bd80      	pop	{r7, pc}
 800e09a:	bf00      	nop
 800e09c:	66666667 	.word	0x66666667

0800e0a0 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800e0a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800e0a4:	b09a      	sub	sp, #104	; 0x68
 800e0a6:	af06      	add	r7, sp, #24
 800e0a8:	6178      	str	r0, [r7, #20]
 800e0aa:	6139      	str	r1, [r7, #16]
 800e0ac:	60fa      	str	r2, [r7, #12]
 800e0ae:	60bb      	str	r3, [r7, #8]
 800e0b0:	ed87 0b00 	vstr	d0, [r7]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 800e0b4:	ed97 6b00 	vldr	d6, [r7]
 800e0b8:	ed97 7b00 	vldr	d7, [r7]
 800e0bc:	eeb4 6b47 	vcmp.f64	d6, d7
 800e0c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0c4:	d111      	bne.n	800e0ea <_etoa+0x4a>
 800e0c6:	ed97 7b00 	vldr	d7, [r7]
 800e0ca:	ed9f 6bc5 	vldr	d6, [pc, #788]	; 800e3e0 <_etoa+0x340>
 800e0ce:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e0d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0d6:	dc08      	bgt.n	800e0ea <_etoa+0x4a>
 800e0d8:	ed97 7b00 	vldr	d7, [r7]
 800e0dc:	ed9f 6bc2 	vldr	d6, [pc, #776]	; 800e3e8 <_etoa+0x348>
 800e0e0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e0e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0e8:	d50f      	bpl.n	800e10a <_etoa+0x6a>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800e0ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e0ec:	9302      	str	r3, [sp, #8]
 800e0ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0f0:	9301      	str	r3, [sp, #4]
 800e0f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e0f4:	9300      	str	r3, [sp, #0]
 800e0f6:	ed97 0b00 	vldr	d0, [r7]
 800e0fa:	68bb      	ldr	r3, [r7, #8]
 800e0fc:	68fa      	ldr	r2, [r7, #12]
 800e0fe:	6939      	ldr	r1, [r7, #16]
 800e100:	6978      	ldr	r0, [r7, #20]
 800e102:	f7ff fd7d 	bl	800dc00 <_ftoa>
 800e106:	4603      	mov	r3, r0
 800e108:	e1cd      	b.n	800e4a6 <_etoa+0x406>
  }

  // determine the sign
  const bool negative = value < 0;
 800e10a:	ed97 7b00 	vldr	d7, [r7]
 800e10e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800e112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e116:	bf4c      	ite	mi
 800e118:	2301      	movmi	r3, #1
 800e11a:	2300      	movpl	r3, #0
 800e11c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  if (negative) {
 800e120:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e124:	2b00      	cmp	r3, #0
 800e126:	d005      	beq.n	800e134 <_etoa+0x94>
    value = -value;
 800e128:	ed97 7b00 	vldr	d7, [r7]
 800e12c:	eeb1 7b47 	vneg.f64	d7, d7
 800e130:	ed87 7b00 	vstr	d7, [r7]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 800e134:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e136:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d101      	bne.n	800e142 <_etoa+0xa2>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800e13e:	2306      	movs	r3, #6
 800e140:	66bb      	str	r3, [r7, #104]	; 0x68
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 800e142:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e146:	e9c7 2306 	strd	r2, r3, [r7, #24]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 800e14a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800e14e:	f04f 0200 	mov.w	r2, #0
 800e152:	f04f 0300 	mov.w	r3, #0
 800e156:	0d0a      	lsrs	r2, r1, #20
 800e158:	2300      	movs	r3, #0
 800e15a:	4613      	mov	r3, r2
 800e15c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e160:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e164:	63fb      	str	r3, [r7, #60]	; 0x3c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 800e166:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e16a:	f04f 30ff 	mov.w	r0, #4294967295
 800e16e:	49b0      	ldr	r1, [pc, #704]	; (800e430 <_etoa+0x390>)
 800e170:	ea02 0400 	and.w	r4, r2, r0
 800e174:	ea03 0501 	and.w	r5, r3, r1
 800e178:	f04f 0200 	mov.w	r2, #0
 800e17c:	4bad      	ldr	r3, [pc, #692]	; (800e434 <_etoa+0x394>)
 800e17e:	ea44 0802 	orr.w	r8, r4, r2
 800e182:	ea45 0903 	orr.w	r9, r5, r3
 800e186:	e9c7 8906 	strd	r8, r9, [r7, #24]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800e18a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e18c:	ee07 3a90 	vmov	s15, r3
 800e190:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e194:	ed9f 6b96 	vldr	d6, [pc, #600]	; 800e3f0 <_etoa+0x350>
 800e198:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e19c:	ed9f 6b96 	vldr	d6, [pc, #600]	; 800e3f8 <_etoa+0x358>
 800e1a0:	ee37 6b06 	vadd.f64	d6, d7, d6
 800e1a4:	ed97 7b06 	vldr	d7, [r7, #24]
 800e1a8:	eeb7 5b08 	vmov.f64	d5, #120	; 0x3fc00000  1.5
 800e1ac:	ee37 7b45 	vsub.f64	d7, d7, d5
 800e1b0:	ed9f 5b93 	vldr	d5, [pc, #588]	; 800e400 <_etoa+0x360>
 800e1b4:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e1b8:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e1bc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800e1c0:	ee17 3a90 	vmov	r3, s15
 800e1c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 800e1c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1c8:	ee07 3a90 	vmov	s15, r3
 800e1cc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e1d0:	ed9f 6b8d 	vldr	d6, [pc, #564]	; 800e408 <_etoa+0x368>
 800e1d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e1d8:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800e1dc:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e1e0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800e1e4:	ee17 3a90 	vmov	r3, s15
 800e1e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 800e1ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1ec:	ee07 3a90 	vmov	s15, r3
 800e1f0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e1f4:	ed9f 6b86 	vldr	d6, [pc, #536]	; 800e410 <_etoa+0x370>
 800e1f8:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e1fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1fe:	ee07 3a90 	vmov	s15, r3
 800e202:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e206:	ed9f 5b84 	vldr	d5, [pc, #528]	; 800e418 <_etoa+0x378>
 800e20a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e20e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e212:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
  const double z2 = z * z;
 800e216:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800e21a:	ee27 7b07 	vmul.f64	d7, d7, d7
 800e21e:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 800e222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e224:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800e228:	4618      	mov	r0, r3
 800e22a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800e22e:	f04f 0200 	mov.w	r2, #0
 800e232:	f04f 0300 	mov.w	r3, #0
 800e236:	0503      	lsls	r3, r0, #20
 800e238:	2200      	movs	r2, #0
 800e23a:	e9c7 2306 	strd	r2, r3, [r7, #24]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 800e23e:	ed97 6b06 	vldr	d6, [r7, #24]
 800e242:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800e246:	ee37 4b07 	vadd.f64	d4, d7, d7
 800e24a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e24e:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800e252:	ee35 5b47 	vsub.f64	d5, d5, d7
 800e256:	ed97 3b0a 	vldr	d3, [r7, #40]	; 0x28
 800e25a:	eeb2 2b0c 	vmov.f64	d2, #44	; 0x41600000  14.0
 800e25e:	ee83 7b02 	vdiv.f64	d7, d3, d2
 800e262:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e266:	ee37 3b03 	vadd.f64	d3, d7, d3
 800e26a:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800e26e:	ee82 7b03 	vdiv.f64	d7, d2, d3
 800e272:	eeb1 3b08 	vmov.f64	d3, #24	; 0x40c00000  6.0
 800e276:	ee37 3b03 	vadd.f64	d3, d7, d3
 800e27a:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800e27e:	ee82 7b03 	vdiv.f64	d7, d2, d3
 800e282:	ee35 5b07 	vadd.f64	d5, d5, d7
 800e286:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800e28a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800e28e:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e292:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e296:	ed87 7b06 	vstr	d7, [r7, #24]
  // correct for rounding errors
  if (value < conv.F) {
 800e29a:	ed97 7b06 	vldr	d7, [r7, #24]
 800e29e:	ed97 6b00 	vldr	d6, [r7]
 800e2a2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e2a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2aa:	d50a      	bpl.n	800e2c2 <_etoa+0x222>
    expval--;
 800e2ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2ae:	3b01      	subs	r3, #1
 800e2b0:	64fb      	str	r3, [r7, #76]	; 0x4c
    conv.F /= 10;
 800e2b2:	ed97 6b06 	vldr	d6, [r7, #24]
 800e2b6:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 800e2ba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e2be:	ed87 7b06 	vstr	d7, [r7, #24]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 800e2c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2c4:	2b63      	cmp	r3, #99	; 0x63
 800e2c6:	dc05      	bgt.n	800e2d4 <_etoa+0x234>
 800e2c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2ca:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800e2ce:	db01      	blt.n	800e2d4 <_etoa+0x234>
 800e2d0:	2304      	movs	r3, #4
 800e2d2:	e000      	b.n	800e2d6 <_etoa+0x236>
 800e2d4:	2305      	movs	r3, #5
 800e2d6:	64bb      	str	r3, [r7, #72]	; 0x48

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 800e2d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e2da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d031      	beq.n	800e346 <_etoa+0x2a6>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 800e2e2:	ed97 7b00 	vldr	d7, [r7]
 800e2e6:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800e420 <_etoa+0x380>
 800e2ea:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e2ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2f2:	db1d      	blt.n	800e330 <_etoa+0x290>
 800e2f4:	ed97 7b00 	vldr	d7, [r7]
 800e2f8:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 800e428 <_etoa+0x388>
 800e2fc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e304:	d514      	bpl.n	800e330 <_etoa+0x290>
      if ((int)prec > expval) {
 800e306:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e308:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e30a:	429a      	cmp	r2, r3
 800e30c:	da05      	bge.n	800e31a <_etoa+0x27a>
        prec = (unsigned)((int)prec - expval - 1);
 800e30e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e312:	1ad3      	subs	r3, r2, r3
 800e314:	3b01      	subs	r3, #1
 800e316:	66bb      	str	r3, [r7, #104]	; 0x68
 800e318:	e001      	b.n	800e31e <_etoa+0x27e>
      }
      else {
        prec = 0;
 800e31a:	2300      	movs	r3, #0
 800e31c:	66bb      	str	r3, [r7, #104]	; 0x68
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 800e31e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e320:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e324:	673b      	str	r3, [r7, #112]	; 0x70
      // no characters in exponent
      minwidth = 0U;
 800e326:	2300      	movs	r3, #0
 800e328:	64bb      	str	r3, [r7, #72]	; 0x48
      expval   = 0;
 800e32a:	2300      	movs	r3, #0
 800e32c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e32e:	e00a      	b.n	800e346 <_etoa+0x2a6>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 800e330:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e332:	2b00      	cmp	r3, #0
 800e334:	d007      	beq.n	800e346 <_etoa+0x2a6>
 800e336:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d002      	beq.n	800e346 <_etoa+0x2a6>
        --prec;
 800e340:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e342:	3b01      	subs	r3, #1
 800e344:	66bb      	str	r3, [r7, #104]	; 0x68
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 800e346:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e348:	647b      	str	r3, [r7, #68]	; 0x44
  if (width > minwidth) {
 800e34a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e34c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e34e:	429a      	cmp	r2, r3
 800e350:	d904      	bls.n	800e35c <_etoa+0x2bc>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 800e352:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e354:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e356:	1ad3      	subs	r3, r2, r3
 800e358:	647b      	str	r3, [r7, #68]	; 0x44
 800e35a:	e001      	b.n	800e360 <_etoa+0x2c0>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800e35c:	2300      	movs	r3, #0
 800e35e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 800e360:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e362:	f003 0302 	and.w	r3, r3, #2
 800e366:	2b00      	cmp	r3, #0
 800e368:	d004      	beq.n	800e374 <_etoa+0x2d4>
 800e36a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d001      	beq.n	800e374 <_etoa+0x2d4>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 800e370:	2300      	movs	r3, #0
 800e372:	647b      	str	r3, [r7, #68]	; 0x44
  }

  // rescale the float value
  if (expval) {
 800e374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e376:	2b00      	cmp	r3, #0
 800e378:	d007      	beq.n	800e38a <_etoa+0x2ea>
    value /= conv.F;
 800e37a:	ed97 6b06 	vldr	d6, [r7, #24]
 800e37e:	ed97 5b00 	vldr	d5, [r7]
 800e382:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800e386:	ed87 7b00 	vstr	d7, [r7]
  }

  // output the floating part
  const size_t start_idx = idx;
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	627b      	str	r3, [r7, #36]	; 0x24
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 800e38e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e392:	2b00      	cmp	r3, #0
 800e394:	d004      	beq.n	800e3a0 <_etoa+0x300>
 800e396:	ed97 7b00 	vldr	d7, [r7]
 800e39a:	eeb1 7b47 	vneg.f64	d7, d7
 800e39e:	e001      	b.n	800e3a4 <_etoa+0x304>
 800e3a0:	ed97 7b00 	vldr	d7, [r7]
 800e3a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e3a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e3aa:	9302      	str	r3, [sp, #8]
 800e3ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e3ae:	9301      	str	r3, [sp, #4]
 800e3b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e3b2:	9300      	str	r3, [sp, #0]
 800e3b4:	eeb0 0b47 	vmov.f64	d0, d7
 800e3b8:	68bb      	ldr	r3, [r7, #8]
 800e3ba:	68fa      	ldr	r2, [r7, #12]
 800e3bc:	6939      	ldr	r1, [r7, #16]
 800e3be:	6978      	ldr	r0, [r7, #20]
 800e3c0:	f7ff fc1e 	bl	800dc00 <_ftoa>
 800e3c4:	60f8      	str	r0, [r7, #12]

  // output the exponent part
  if (minwidth) {
 800e3c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d06b      	beq.n	800e4a4 <_etoa+0x404>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 800e3cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e3ce:	f003 0320 	and.w	r3, r3, #32
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d030      	beq.n	800e438 <_etoa+0x398>
 800e3d6:	2045      	movs	r0, #69	; 0x45
 800e3d8:	e02f      	b.n	800e43a <_etoa+0x39a>
 800e3da:	bf00      	nop
 800e3dc:	f3af 8000 	nop.w
 800e3e0:	ffffffff 	.word	0xffffffff
 800e3e4:	7fefffff 	.word	0x7fefffff
 800e3e8:	ffffffff 	.word	0xffffffff
 800e3ec:	ffefffff 	.word	0xffefffff
 800e3f0:	509f79fb 	.word	0x509f79fb
 800e3f4:	3fd34413 	.word	0x3fd34413
 800e3f8:	8b60c8b3 	.word	0x8b60c8b3
 800e3fc:	3fc68a28 	.word	0x3fc68a28
 800e400:	636f4361 	.word	0x636f4361
 800e404:	3fd287a7 	.word	0x3fd287a7
 800e408:	0979a371 	.word	0x0979a371
 800e40c:	400a934f 	.word	0x400a934f
 800e410:	bbb55516 	.word	0xbbb55516
 800e414:	40026bb1 	.word	0x40026bb1
 800e418:	fefa39ef 	.word	0xfefa39ef
 800e41c:	3fe62e42 	.word	0x3fe62e42
 800e420:	eb1c432d 	.word	0xeb1c432d
 800e424:	3f1a36e2 	.word	0x3f1a36e2
 800e428:	00000000 	.word	0x00000000
 800e42c:	412e8480 	.word	0x412e8480
 800e430:	000fffff 	.word	0x000fffff
 800e434:	3ff00000 	.word	0x3ff00000
 800e438:	2065      	movs	r0, #101	; 0x65
 800e43a:	68fa      	ldr	r2, [r7, #12]
 800e43c:	1c53      	adds	r3, r2, #1
 800e43e:	60fb      	str	r3, [r7, #12]
 800e440:	697c      	ldr	r4, [r7, #20]
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	6939      	ldr	r1, [r7, #16]
 800e446:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 800e448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	bfb8      	it	lt
 800e44e:	425b      	neglt	r3, r3
 800e450:	4618      	mov	r0, r3
 800e452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e454:	0fdb      	lsrs	r3, r3, #31
 800e456:	b2db      	uxtb	r3, r3
 800e458:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e45a:	3a01      	subs	r2, #1
 800e45c:	2105      	movs	r1, #5
 800e45e:	9105      	str	r1, [sp, #20]
 800e460:	9204      	str	r2, [sp, #16]
 800e462:	2200      	movs	r2, #0
 800e464:	9203      	str	r2, [sp, #12]
 800e466:	220a      	movs	r2, #10
 800e468:	9202      	str	r2, [sp, #8]
 800e46a:	9301      	str	r3, [sp, #4]
 800e46c:	9000      	str	r0, [sp, #0]
 800e46e:	68bb      	ldr	r3, [r7, #8]
 800e470:	68fa      	ldr	r2, [r7, #12]
 800e472:	6939      	ldr	r1, [r7, #16]
 800e474:	6978      	ldr	r0, [r7, #20]
 800e476:	f7ff faeb 	bl	800da50 <_ntoa_long>
 800e47a:	60f8      	str	r0, [r7, #12]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 800e47c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e47e:	f003 0302 	and.w	r3, r3, #2
 800e482:	2b00      	cmp	r3, #0
 800e484:	d00e      	beq.n	800e4a4 <_etoa+0x404>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 800e486:	e007      	b.n	800e498 <_etoa+0x3f8>
 800e488:	68fa      	ldr	r2, [r7, #12]
 800e48a:	1c53      	adds	r3, r2, #1
 800e48c:	60fb      	str	r3, [r7, #12]
 800e48e:	697c      	ldr	r4, [r7, #20]
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	6939      	ldr	r1, [r7, #16]
 800e494:	2020      	movs	r0, #32
 800e496:	47a0      	blx	r4
 800e498:	68fa      	ldr	r2, [r7, #12]
 800e49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e49c:	1ad3      	subs	r3, r2, r3
 800e49e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e4a0:	429a      	cmp	r2, r3
 800e4a2:	d8f1      	bhi.n	800e488 <_etoa+0x3e8>
    }
  }
  return idx;
 800e4a4:	68fb      	ldr	r3, [r7, #12]
}
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	3750      	adds	r7, #80	; 0x50
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800e4b0 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 800e4b0:	b5b0      	push	{r4, r5, r7, lr}
 800e4b2:	b0a0      	sub	sp, #128	; 0x80
 800e4b4:	af0a      	add	r7, sp, #40	; 0x28
 800e4b6:	60f8      	str	r0, [r7, #12]
 800e4b8:	60b9      	str	r1, [r7, #8]
 800e4ba:	607a      	str	r2, [r7, #4]
 800e4bc:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 800e4be:	2300      	movs	r3, #0
 800e4c0:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 800e4c2:	68bb      	ldr	r3, [r7, #8]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	f040 8490 	bne.w	800edea <_vsnprintf+0x93a>
    // use null output function
    out = _out_null;
 800e4ca:	4ba0      	ldr	r3, [pc, #640]	; (800e74c <_vsnprintf+0x29c>)
 800e4cc:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 800e4ce:	f000 bc8c 	b.w	800edea <_vsnprintf+0x93a>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 800e4d2:	683b      	ldr	r3, [r7, #0]
 800e4d4:	781b      	ldrb	r3, [r3, #0]
 800e4d6:	2b25      	cmp	r3, #37	; 0x25
 800e4d8:	d00d      	beq.n	800e4f6 <_vsnprintf+0x46>
      // no
      out(*format, buffer, idx++, maxlen);
 800e4da:	683b      	ldr	r3, [r7, #0]
 800e4dc:	7818      	ldrb	r0, [r3, #0]
 800e4de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e4e0:	1c53      	adds	r3, r2, #1
 800e4e2:	647b      	str	r3, [r7, #68]	; 0x44
 800e4e4:	68fc      	ldr	r4, [r7, #12]
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	68b9      	ldr	r1, [r7, #8]
 800e4ea:	47a0      	blx	r4
      format++;
 800e4ec:	683b      	ldr	r3, [r7, #0]
 800e4ee:	3301      	adds	r3, #1
 800e4f0:	603b      	str	r3, [r7, #0]
      continue;
 800e4f2:	f000 bc7a 	b.w	800edea <_vsnprintf+0x93a>
    }
    else {
      // yes, evaluate it
      format++;
 800e4f6:	683b      	ldr	r3, [r7, #0]
 800e4f8:	3301      	adds	r3, #1
 800e4fa:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 800e500:	683b      	ldr	r3, [r7, #0]
 800e502:	781b      	ldrb	r3, [r3, #0]
 800e504:	3b20      	subs	r3, #32
 800e506:	2b10      	cmp	r3, #16
 800e508:	d856      	bhi.n	800e5b8 <_vsnprintf+0x108>
 800e50a:	a201      	add	r2, pc, #4	; (adr r2, 800e510 <_vsnprintf+0x60>)
 800e50c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e510:	0800e591 	.word	0x0800e591
 800e514:	0800e5b9 	.word	0x0800e5b9
 800e518:	0800e5b9 	.word	0x0800e5b9
 800e51c:	0800e5a5 	.word	0x0800e5a5
 800e520:	0800e5b9 	.word	0x0800e5b9
 800e524:	0800e5b9 	.word	0x0800e5b9
 800e528:	0800e5b9 	.word	0x0800e5b9
 800e52c:	0800e5b9 	.word	0x0800e5b9
 800e530:	0800e5b9 	.word	0x0800e5b9
 800e534:	0800e5b9 	.word	0x0800e5b9
 800e538:	0800e5b9 	.word	0x0800e5b9
 800e53c:	0800e57d 	.word	0x0800e57d
 800e540:	0800e5b9 	.word	0x0800e5b9
 800e544:	0800e569 	.word	0x0800e569
 800e548:	0800e5b9 	.word	0x0800e5b9
 800e54c:	0800e5b9 	.word	0x0800e5b9
 800e550:	0800e555 	.word	0x0800e555
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800e554:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e556:	f043 0301 	orr.w	r3, r3, #1
 800e55a:	657b      	str	r3, [r7, #84]	; 0x54
 800e55c:	683b      	ldr	r3, [r7, #0]
 800e55e:	3301      	adds	r3, #1
 800e560:	603b      	str	r3, [r7, #0]
 800e562:	2301      	movs	r3, #1
 800e564:	64bb      	str	r3, [r7, #72]	; 0x48
 800e566:	e02a      	b.n	800e5be <_vsnprintf+0x10e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 800e568:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e56a:	f043 0302 	orr.w	r3, r3, #2
 800e56e:	657b      	str	r3, [r7, #84]	; 0x54
 800e570:	683b      	ldr	r3, [r7, #0]
 800e572:	3301      	adds	r3, #1
 800e574:	603b      	str	r3, [r7, #0]
 800e576:	2301      	movs	r3, #1
 800e578:	64bb      	str	r3, [r7, #72]	; 0x48
 800e57a:	e020      	b.n	800e5be <_vsnprintf+0x10e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 800e57c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e57e:	f043 0304 	orr.w	r3, r3, #4
 800e582:	657b      	str	r3, [r7, #84]	; 0x54
 800e584:	683b      	ldr	r3, [r7, #0]
 800e586:	3301      	adds	r3, #1
 800e588:	603b      	str	r3, [r7, #0]
 800e58a:	2301      	movs	r3, #1
 800e58c:	64bb      	str	r3, [r7, #72]	; 0x48
 800e58e:	e016      	b.n	800e5be <_vsnprintf+0x10e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 800e590:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e592:	f043 0308 	orr.w	r3, r3, #8
 800e596:	657b      	str	r3, [r7, #84]	; 0x54
 800e598:	683b      	ldr	r3, [r7, #0]
 800e59a:	3301      	adds	r3, #1
 800e59c:	603b      	str	r3, [r7, #0]
 800e59e:	2301      	movs	r3, #1
 800e5a0:	64bb      	str	r3, [r7, #72]	; 0x48
 800e5a2:	e00c      	b.n	800e5be <_vsnprintf+0x10e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 800e5a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5a6:	f043 0310 	orr.w	r3, r3, #16
 800e5aa:	657b      	str	r3, [r7, #84]	; 0x54
 800e5ac:	683b      	ldr	r3, [r7, #0]
 800e5ae:	3301      	adds	r3, #1
 800e5b0:	603b      	str	r3, [r7, #0]
 800e5b2:	2301      	movs	r3, #1
 800e5b4:	64bb      	str	r3, [r7, #72]	; 0x48
 800e5b6:	e002      	b.n	800e5be <_vsnprintf+0x10e>
        default :                                   n = 0U; break;
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	64bb      	str	r3, [r7, #72]	; 0x48
 800e5bc:	bf00      	nop
      }
    } while (n);
 800e5be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d19d      	bne.n	800e500 <_vsnprintf+0x50>

    // evaluate width field
    width = 0U;
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 800e5c8:	683b      	ldr	r3, [r7, #0]
 800e5ca:	781b      	ldrb	r3, [r3, #0]
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	f7ff f8d8 	bl	800d782 <_is_digit>
 800e5d2:	4603      	mov	r3, r0
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d005      	beq.n	800e5e4 <_vsnprintf+0x134>
      width = _atoi(&format);
 800e5d8:	463b      	mov	r3, r7
 800e5da:	4618      	mov	r0, r3
 800e5dc:	f7ff f8e8 	bl	800d7b0 <_atoi>
 800e5e0:	6538      	str	r0, [r7, #80]	; 0x50
 800e5e2:	e018      	b.n	800e616 <_vsnprintf+0x166>
    }
    else if (*format == '*') {
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	781b      	ldrb	r3, [r3, #0]
 800e5e8:	2b2a      	cmp	r3, #42	; 0x2a
 800e5ea:	d114      	bne.n	800e616 <_vsnprintf+0x166>
      const int w = va_arg(va, int);
 800e5ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e5ee:	1d1a      	adds	r2, r3, #4
 800e5f0:	66ba      	str	r2, [r7, #104]	; 0x68
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 800e5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	da07      	bge.n	800e60c <_vsnprintf+0x15c>
        flags |= FLAGS_LEFT;    // reverse padding
 800e5fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5fe:	f043 0302 	orr.w	r3, r3, #2
 800e602:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 800e604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e606:	425b      	negs	r3, r3
 800e608:	653b      	str	r3, [r7, #80]	; 0x50
 800e60a:	e001      	b.n	800e610 <_vsnprintf+0x160>
      }
      else {
        width = (unsigned int)w;
 800e60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e60e:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 800e610:	683b      	ldr	r3, [r7, #0]
 800e612:	3301      	adds	r3, #1
 800e614:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 800e616:	2300      	movs	r3, #0
 800e618:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 800e61a:	683b      	ldr	r3, [r7, #0]
 800e61c:	781b      	ldrb	r3, [r3, #0]
 800e61e:	2b2e      	cmp	r3, #46	; 0x2e
 800e620:	d124      	bne.n	800e66c <_vsnprintf+0x1bc>
      flags |= FLAGS_PRECISION;
 800e622:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e624:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e628:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 800e62a:	683b      	ldr	r3, [r7, #0]
 800e62c:	3301      	adds	r3, #1
 800e62e:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 800e630:	683b      	ldr	r3, [r7, #0]
 800e632:	781b      	ldrb	r3, [r3, #0]
 800e634:	4618      	mov	r0, r3
 800e636:	f7ff f8a4 	bl	800d782 <_is_digit>
 800e63a:	4603      	mov	r3, r0
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d005      	beq.n	800e64c <_vsnprintf+0x19c>
        precision = _atoi(&format);
 800e640:	463b      	mov	r3, r7
 800e642:	4618      	mov	r0, r3
 800e644:	f7ff f8b4 	bl	800d7b0 <_atoi>
 800e648:	64f8      	str	r0, [r7, #76]	; 0x4c
 800e64a:	e00f      	b.n	800e66c <_vsnprintf+0x1bc>
      }
      else if (*format == '*') {
 800e64c:	683b      	ldr	r3, [r7, #0]
 800e64e:	781b      	ldrb	r3, [r3, #0]
 800e650:	2b2a      	cmp	r3, #42	; 0x2a
 800e652:	d10b      	bne.n	800e66c <_vsnprintf+0x1bc>
        const int prec = (int)va_arg(va, int);
 800e654:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e656:	1d1a      	adds	r2, r3, #4
 800e658:	66ba      	str	r2, [r7, #104]	; 0x68
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 800e65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e660:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e664:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 800e666:	683b      	ldr	r3, [r7, #0]
 800e668:	3301      	adds	r3, #1
 800e66a:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 800e66c:	683b      	ldr	r3, [r7, #0]
 800e66e:	781b      	ldrb	r3, [r3, #0]
 800e670:	3b68      	subs	r3, #104	; 0x68
 800e672:	2b12      	cmp	r3, #18
 800e674:	d866      	bhi.n	800e744 <_vsnprintf+0x294>
 800e676:	a201      	add	r2, pc, #4	; (adr r2, 800e67c <_vsnprintf+0x1cc>)
 800e678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e67c:	0800e6ef 	.word	0x0800e6ef
 800e680:	0800e745 	.word	0x0800e745
 800e684:	0800e725 	.word	0x0800e725
 800e688:	0800e745 	.word	0x0800e745
 800e68c:	0800e6c9 	.word	0x0800e6c9
 800e690:	0800e745 	.word	0x0800e745
 800e694:	0800e745 	.word	0x0800e745
 800e698:	0800e745 	.word	0x0800e745
 800e69c:	0800e745 	.word	0x0800e745
 800e6a0:	0800e745 	.word	0x0800e745
 800e6a4:	0800e745 	.word	0x0800e745
 800e6a8:	0800e745 	.word	0x0800e745
 800e6ac:	0800e715 	.word	0x0800e715
 800e6b0:	0800e745 	.word	0x0800e745
 800e6b4:	0800e745 	.word	0x0800e745
 800e6b8:	0800e745 	.word	0x0800e745
 800e6bc:	0800e745 	.word	0x0800e745
 800e6c0:	0800e745 	.word	0x0800e745
 800e6c4:	0800e735 	.word	0x0800e735
      case 'l' :
        flags |= FLAGS_LONG;
 800e6c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e6ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e6ce:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800e6d0:	683b      	ldr	r3, [r7, #0]
 800e6d2:	3301      	adds	r3, #1
 800e6d4:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 800e6d6:	683b      	ldr	r3, [r7, #0]
 800e6d8:	781b      	ldrb	r3, [r3, #0]
 800e6da:	2b6c      	cmp	r3, #108	; 0x6c
 800e6dc:	d134      	bne.n	800e748 <_vsnprintf+0x298>
          flags |= FLAGS_LONG_LONG;
 800e6de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e6e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e6e4:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800e6e6:	683b      	ldr	r3, [r7, #0]
 800e6e8:	3301      	adds	r3, #1
 800e6ea:	603b      	str	r3, [r7, #0]
        }
        break;
 800e6ec:	e02c      	b.n	800e748 <_vsnprintf+0x298>
      case 'h' :
        flags |= FLAGS_SHORT;
 800e6ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e6f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e6f4:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800e6f6:	683b      	ldr	r3, [r7, #0]
 800e6f8:	3301      	adds	r3, #1
 800e6fa:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 800e6fc:	683b      	ldr	r3, [r7, #0]
 800e6fe:	781b      	ldrb	r3, [r3, #0]
 800e700:	2b68      	cmp	r3, #104	; 0x68
 800e702:	d125      	bne.n	800e750 <_vsnprintf+0x2a0>
          flags |= FLAGS_CHAR;
 800e704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e706:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e70a:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800e70c:	683b      	ldr	r3, [r7, #0]
 800e70e:	3301      	adds	r3, #1
 800e710:	603b      	str	r3, [r7, #0]
        }
        break;
 800e712:	e01d      	b.n	800e750 <_vsnprintf+0x2a0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800e714:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e716:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e71a:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800e71c:	683b      	ldr	r3, [r7, #0]
 800e71e:	3301      	adds	r3, #1
 800e720:	603b      	str	r3, [r7, #0]
        break;
 800e722:	e016      	b.n	800e752 <_vsnprintf+0x2a2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800e724:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e726:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e72a:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800e72c:	683b      	ldr	r3, [r7, #0]
 800e72e:	3301      	adds	r3, #1
 800e730:	603b      	str	r3, [r7, #0]
        break;
 800e732:	e00e      	b.n	800e752 <_vsnprintf+0x2a2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800e734:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e73a:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800e73c:	683b      	ldr	r3, [r7, #0]
 800e73e:	3301      	adds	r3, #1
 800e740:	603b      	str	r3, [r7, #0]
        break;
 800e742:	e006      	b.n	800e752 <_vsnprintf+0x2a2>
      default :
        break;
 800e744:	bf00      	nop
 800e746:	e004      	b.n	800e752 <_vsnprintf+0x2a2>
        break;
 800e748:	bf00      	nop
 800e74a:	e002      	b.n	800e752 <_vsnprintf+0x2a2>
 800e74c:	0800d72d 	.word	0x0800d72d
        break;
 800e750:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 800e752:	683b      	ldr	r3, [r7, #0]
 800e754:	781b      	ldrb	r3, [r3, #0]
 800e756:	3b25      	subs	r3, #37	; 0x25
 800e758:	2b53      	cmp	r3, #83	; 0x53
 800e75a:	f200 8339 	bhi.w	800edd0 <_vsnprintf+0x920>
 800e75e:	a201      	add	r2, pc, #4	; (adr r2, 800e764 <_vsnprintf+0x2b4>)
 800e760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e764:	0800edb9 	.word	0x0800edb9
 800e768:	0800edd1 	.word	0x0800edd1
 800e76c:	0800edd1 	.word	0x0800edd1
 800e770:	0800edd1 	.word	0x0800edd1
 800e774:	0800edd1 	.word	0x0800edd1
 800e778:	0800edd1 	.word	0x0800edd1
 800e77c:	0800edd1 	.word	0x0800edd1
 800e780:	0800edd1 	.word	0x0800edd1
 800e784:	0800edd1 	.word	0x0800edd1
 800e788:	0800edd1 	.word	0x0800edd1
 800e78c:	0800edd1 	.word	0x0800edd1
 800e790:	0800edd1 	.word	0x0800edd1
 800e794:	0800edd1 	.word	0x0800edd1
 800e798:	0800edd1 	.word	0x0800edd1
 800e79c:	0800edd1 	.word	0x0800edd1
 800e7a0:	0800edd1 	.word	0x0800edd1
 800e7a4:	0800edd1 	.word	0x0800edd1
 800e7a8:	0800edd1 	.word	0x0800edd1
 800e7ac:	0800edd1 	.word	0x0800edd1
 800e7b0:	0800edd1 	.word	0x0800edd1
 800e7b4:	0800edd1 	.word	0x0800edd1
 800e7b8:	0800edd1 	.word	0x0800edd1
 800e7bc:	0800edd1 	.word	0x0800edd1
 800e7c0:	0800edd1 	.word	0x0800edd1
 800e7c4:	0800edd1 	.word	0x0800edd1
 800e7c8:	0800edd1 	.word	0x0800edd1
 800e7cc:	0800edd1 	.word	0x0800edd1
 800e7d0:	0800edd1 	.word	0x0800edd1
 800e7d4:	0800edd1 	.word	0x0800edd1
 800e7d8:	0800edd1 	.word	0x0800edd1
 800e7dc:	0800edd1 	.word	0x0800edd1
 800e7e0:	0800edd1 	.word	0x0800edd1
 800e7e4:	0800eb8b 	.word	0x0800eb8b
 800e7e8:	0800eb43 	.word	0x0800eb43
 800e7ec:	0800eb8b 	.word	0x0800eb8b
 800e7f0:	0800edd1 	.word	0x0800edd1
 800e7f4:	0800edd1 	.word	0x0800edd1
 800e7f8:	0800edd1 	.word	0x0800edd1
 800e7fc:	0800edd1 	.word	0x0800edd1
 800e800:	0800edd1 	.word	0x0800edd1
 800e804:	0800edd1 	.word	0x0800edd1
 800e808:	0800edd1 	.word	0x0800edd1
 800e80c:	0800edd1 	.word	0x0800edd1
 800e810:	0800edd1 	.word	0x0800edd1
 800e814:	0800edd1 	.word	0x0800edd1
 800e818:	0800edd1 	.word	0x0800edd1
 800e81c:	0800edd1 	.word	0x0800edd1
 800e820:	0800edd1 	.word	0x0800edd1
 800e824:	0800edd1 	.word	0x0800edd1
 800e828:	0800edd1 	.word	0x0800edd1
 800e82c:	0800edd1 	.word	0x0800edd1
 800e830:	0800e8b5 	.word	0x0800e8b5
 800e834:	0800edd1 	.word	0x0800edd1
 800e838:	0800edd1 	.word	0x0800edd1
 800e83c:	0800edd1 	.word	0x0800edd1
 800e840:	0800edd1 	.word	0x0800edd1
 800e844:	0800edd1 	.word	0x0800edd1
 800e848:	0800edd1 	.word	0x0800edd1
 800e84c:	0800edd1 	.word	0x0800edd1
 800e850:	0800edd1 	.word	0x0800edd1
 800e854:	0800edd1 	.word	0x0800edd1
 800e858:	0800e8b5 	.word	0x0800e8b5
 800e85c:	0800ebf3 	.word	0x0800ebf3
 800e860:	0800e8b5 	.word	0x0800e8b5
 800e864:	0800eb8b 	.word	0x0800eb8b
 800e868:	0800eb43 	.word	0x0800eb43
 800e86c:	0800eb8b 	.word	0x0800eb8b
 800e870:	0800edd1 	.word	0x0800edd1
 800e874:	0800e8b5 	.word	0x0800e8b5
 800e878:	0800edd1 	.word	0x0800edd1
 800e87c:	0800edd1 	.word	0x0800edd1
 800e880:	0800edd1 	.word	0x0800edd1
 800e884:	0800edd1 	.word	0x0800edd1
 800e888:	0800edd1 	.word	0x0800edd1
 800e88c:	0800e8b5 	.word	0x0800e8b5
 800e890:	0800ed2b 	.word	0x0800ed2b
 800e894:	0800edd1 	.word	0x0800edd1
 800e898:	0800edd1 	.word	0x0800edd1
 800e89c:	0800ec67 	.word	0x0800ec67
 800e8a0:	0800edd1 	.word	0x0800edd1
 800e8a4:	0800e8b5 	.word	0x0800e8b5
 800e8a8:	0800edd1 	.word	0x0800edd1
 800e8ac:	0800edd1 	.word	0x0800edd1
 800e8b0:	0800e8b5 	.word	0x0800e8b5
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 800e8b4:	683b      	ldr	r3, [r7, #0]
 800e8b6:	781b      	ldrb	r3, [r3, #0]
 800e8b8:	2b78      	cmp	r3, #120	; 0x78
 800e8ba:	d003      	beq.n	800e8c4 <_vsnprintf+0x414>
 800e8bc:	683b      	ldr	r3, [r7, #0]
 800e8be:	781b      	ldrb	r3, [r3, #0]
 800e8c0:	2b58      	cmp	r3, #88	; 0x58
 800e8c2:	d102      	bne.n	800e8ca <_vsnprintf+0x41a>
          base = 16U;
 800e8c4:	2310      	movs	r3, #16
 800e8c6:	643b      	str	r3, [r7, #64]	; 0x40
 800e8c8:	e013      	b.n	800e8f2 <_vsnprintf+0x442>
        }
        else if (*format == 'o') {
 800e8ca:	683b      	ldr	r3, [r7, #0]
 800e8cc:	781b      	ldrb	r3, [r3, #0]
 800e8ce:	2b6f      	cmp	r3, #111	; 0x6f
 800e8d0:	d102      	bne.n	800e8d8 <_vsnprintf+0x428>
          base =  8U;
 800e8d2:	2308      	movs	r3, #8
 800e8d4:	643b      	str	r3, [r7, #64]	; 0x40
 800e8d6:	e00c      	b.n	800e8f2 <_vsnprintf+0x442>
        }
        else if (*format == 'b') {
 800e8d8:	683b      	ldr	r3, [r7, #0]
 800e8da:	781b      	ldrb	r3, [r3, #0]
 800e8dc:	2b62      	cmp	r3, #98	; 0x62
 800e8de:	d102      	bne.n	800e8e6 <_vsnprintf+0x436>
          base =  2U;
 800e8e0:	2302      	movs	r3, #2
 800e8e2:	643b      	str	r3, [r7, #64]	; 0x40
 800e8e4:	e005      	b.n	800e8f2 <_vsnprintf+0x442>
        }
        else {
          base = 10U;
 800e8e6:	230a      	movs	r3, #10
 800e8e8:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800e8ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e8ec:	f023 0310 	bic.w	r3, r3, #16
 800e8f0:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 800e8f2:	683b      	ldr	r3, [r7, #0]
 800e8f4:	781b      	ldrb	r3, [r3, #0]
 800e8f6:	2b58      	cmp	r3, #88	; 0x58
 800e8f8:	d103      	bne.n	800e902 <_vsnprintf+0x452>
          flags |= FLAGS_UPPERCASE;
 800e8fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e8fc:	f043 0320 	orr.w	r3, r3, #32
 800e900:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	781b      	ldrb	r3, [r3, #0]
 800e906:	2b69      	cmp	r3, #105	; 0x69
 800e908:	d007      	beq.n	800e91a <_vsnprintf+0x46a>
 800e90a:	683b      	ldr	r3, [r7, #0]
 800e90c:	781b      	ldrb	r3, [r3, #0]
 800e90e:	2b64      	cmp	r3, #100	; 0x64
 800e910:	d003      	beq.n	800e91a <_vsnprintf+0x46a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800e912:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e914:	f023 030c 	bic.w	r3, r3, #12
 800e918:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 800e91a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e91c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e920:	2b00      	cmp	r3, #0
 800e922:	d003      	beq.n	800e92c <_vsnprintf+0x47c>
          flags &= ~FLAGS_ZEROPAD;
 800e924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e926:	f023 0301 	bic.w	r3, r3, #1
 800e92a:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 800e92c:	683b      	ldr	r3, [r7, #0]
 800e92e:	781b      	ldrb	r3, [r3, #0]
 800e930:	2b69      	cmp	r3, #105	; 0x69
 800e932:	d004      	beq.n	800e93e <_vsnprintf+0x48e>
 800e934:	683b      	ldr	r3, [r7, #0]
 800e936:	781b      	ldrb	r3, [r3, #0]
 800e938:	2b64      	cmp	r3, #100	; 0x64
 800e93a:	f040 808e 	bne.w	800ea5a <_vsnprintf+0x5aa>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 800e93e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e940:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e944:	2b00      	cmp	r3, #0
 800e946:	d02f      	beq.n	800e9a8 <_vsnprintf+0x4f8>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 800e948:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e94a:	3307      	adds	r3, #7
 800e94c:	f023 0307 	bic.w	r3, r3, #7
 800e950:	f103 0208 	add.w	r2, r3, #8
 800e954:	66ba      	str	r2, [r7, #104]	; 0x68
 800e956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e95a:	e9c7 2304 	strd	r2, r3, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800e95e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e962:	2a00      	cmp	r2, #0
 800e964:	f173 0100 	sbcs.w	r1, r3, #0
 800e968:	da02      	bge.n	800e970 <_vsnprintf+0x4c0>
 800e96a:	4252      	negs	r2, r2
 800e96c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800e970:	4610      	mov	r0, r2
 800e972:	4619      	mov	r1, r3
 800e974:	697b      	ldr	r3, [r7, #20]
 800e976:	0fdb      	lsrs	r3, r3, #31
 800e978:	b2dc      	uxtb	r4, r3
 800e97a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e97c:	461a      	mov	r2, r3
 800e97e:	f04f 0300 	mov.w	r3, #0
 800e982:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 800e984:	9508      	str	r5, [sp, #32]
 800e986:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 800e988:	9507      	str	r5, [sp, #28]
 800e98a:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 800e98c:	9506      	str	r5, [sp, #24]
 800e98e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e992:	9402      	str	r4, [sp, #8]
 800e994:	e9cd 0100 	strd	r0, r1, [sp]
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e99c:	68b9      	ldr	r1, [r7, #8]
 800e99e:	68f8      	ldr	r0, [r7, #12]
 800e9a0:	f7ff f8bd 	bl	800db1e <_ntoa_long_long>
 800e9a4:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800e9a6:	e0c8      	b.n	800eb3a <_vsnprintf+0x68a>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800e9a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e9aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d01e      	beq.n	800e9f0 <_vsnprintf+0x540>
            const long value = va_arg(va, long);
 800e9b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e9b4:	1d1a      	adds	r2, r3, #4
 800e9b6:	66ba      	str	r2, [r7, #104]	; 0x68
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800e9bc:	69fb      	ldr	r3, [r7, #28]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	bfb8      	it	lt
 800e9c2:	425b      	neglt	r3, r3
 800e9c4:	4619      	mov	r1, r3
 800e9c6:	69fb      	ldr	r3, [r7, #28]
 800e9c8:	0fdb      	lsrs	r3, r3, #31
 800e9ca:	b2db      	uxtb	r3, r3
 800e9cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e9ce:	9205      	str	r2, [sp, #20]
 800e9d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e9d2:	9204      	str	r2, [sp, #16]
 800e9d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e9d6:	9203      	str	r2, [sp, #12]
 800e9d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e9da:	9202      	str	r2, [sp, #8]
 800e9dc:	9301      	str	r3, [sp, #4]
 800e9de:	9100      	str	r1, [sp, #0]
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e9e4:	68b9      	ldr	r1, [r7, #8]
 800e9e6:	68f8      	ldr	r0, [r7, #12]
 800e9e8:	f7ff f832 	bl	800da50 <_ntoa_long>
 800e9ec:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800e9ee:	e0a4      	b.n	800eb3a <_vsnprintf+0x68a>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800e9f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e9f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d005      	beq.n	800ea06 <_vsnprintf+0x556>
 800e9fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e9fc:	1d1a      	adds	r2, r3, #4
 800e9fe:	66ba      	str	r2, [r7, #104]	; 0x68
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	b2db      	uxtb	r3, r3
 800ea04:	e00e      	b.n	800ea24 <_vsnprintf+0x574>
 800ea06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d005      	beq.n	800ea1c <_vsnprintf+0x56c>
 800ea10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ea12:	1d1a      	adds	r2, r3, #4
 800ea14:	66ba      	str	r2, [r7, #104]	; 0x68
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	b21b      	sxth	r3, r3
 800ea1a:	e003      	b.n	800ea24 <_vsnprintf+0x574>
 800ea1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ea1e:	1d1a      	adds	r2, r3, #4
 800ea20:	66ba      	str	r2, [r7, #104]	; 0x68
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800ea26:	6a3b      	ldr	r3, [r7, #32]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	bfb8      	it	lt
 800ea2c:	425b      	neglt	r3, r3
 800ea2e:	4619      	mov	r1, r3
 800ea30:	6a3b      	ldr	r3, [r7, #32]
 800ea32:	0fdb      	lsrs	r3, r3, #31
 800ea34:	b2db      	uxtb	r3, r3
 800ea36:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ea38:	9205      	str	r2, [sp, #20]
 800ea3a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ea3c:	9204      	str	r2, [sp, #16]
 800ea3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ea40:	9203      	str	r2, [sp, #12]
 800ea42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ea44:	9202      	str	r2, [sp, #8]
 800ea46:	9301      	str	r3, [sp, #4]
 800ea48:	9100      	str	r1, [sp, #0]
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ea4e:	68b9      	ldr	r1, [r7, #8]
 800ea50:	68f8      	ldr	r0, [r7, #12]
 800ea52:	f7fe fffd 	bl	800da50 <_ntoa_long>
 800ea56:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800ea58:	e06f      	b.n	800eb3a <_vsnprintf+0x68a>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 800ea5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d020      	beq.n	800eaa6 <_vsnprintf+0x5f6>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 800ea64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ea66:	3307      	adds	r3, #7
 800ea68:	f023 0307 	bic.w	r3, r3, #7
 800ea6c:	f103 0208 	add.w	r2, r3, #8
 800ea70:	66ba      	str	r2, [r7, #104]	; 0x68
 800ea72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ea78:	4608      	mov	r0, r1
 800ea7a:	f04f 0100 	mov.w	r1, #0
 800ea7e:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 800ea80:	9408      	str	r4, [sp, #32]
 800ea82:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 800ea84:	9407      	str	r4, [sp, #28]
 800ea86:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 800ea88:	9406      	str	r4, [sp, #24]
 800ea8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ea8e:	2100      	movs	r1, #0
 800ea90:	9102      	str	r1, [sp, #8]
 800ea92:	e9cd 2300 	strd	r2, r3, [sp]
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ea9a:	68b9      	ldr	r1, [r7, #8]
 800ea9c:	68f8      	ldr	r0, [r7, #12]
 800ea9e:	f7ff f83e 	bl	800db1e <_ntoa_long_long>
 800eaa2:	6478      	str	r0, [r7, #68]	; 0x44
 800eaa4:	e049      	b.n	800eb3a <_vsnprintf+0x68a>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800eaa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eaa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d016      	beq.n	800eade <_vsnprintf+0x62e>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 800eab0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800eab2:	1d1a      	adds	r2, r3, #4
 800eab4:	66ba      	str	r2, [r7, #104]	; 0x68
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800eaba:	9205      	str	r2, [sp, #20]
 800eabc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eabe:	9204      	str	r2, [sp, #16]
 800eac0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800eac2:	9203      	str	r2, [sp, #12]
 800eac4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eac6:	9202      	str	r2, [sp, #8]
 800eac8:	2200      	movs	r2, #0
 800eaca:	9201      	str	r2, [sp, #4]
 800eacc:	9300      	str	r3, [sp, #0]
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ead2:	68b9      	ldr	r1, [r7, #8]
 800ead4:	68f8      	ldr	r0, [r7, #12]
 800ead6:	f7fe ffbb 	bl	800da50 <_ntoa_long>
 800eada:	6478      	str	r0, [r7, #68]	; 0x44
 800eadc:	e02d      	b.n	800eb3a <_vsnprintf+0x68a>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800eade:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d005      	beq.n	800eaf4 <_vsnprintf+0x644>
 800eae8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800eaea:	1d1a      	adds	r2, r3, #4
 800eaec:	66ba      	str	r2, [r7, #104]	; 0x68
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	b2db      	uxtb	r3, r3
 800eaf2:	e00e      	b.n	800eb12 <_vsnprintf+0x662>
 800eaf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eaf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d005      	beq.n	800eb0a <_vsnprintf+0x65a>
 800eafe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800eb00:	1d1a      	adds	r2, r3, #4
 800eb02:	66ba      	str	r2, [r7, #104]	; 0x68
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	b29b      	uxth	r3, r3
 800eb08:	e003      	b.n	800eb12 <_vsnprintf+0x662>
 800eb0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800eb0c:	1d1a      	adds	r2, r3, #4
 800eb0e:	66ba      	str	r2, [r7, #104]	; 0x68
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800eb14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb16:	9305      	str	r3, [sp, #20]
 800eb18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb1a:	9304      	str	r3, [sp, #16]
 800eb1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb1e:	9303      	str	r3, [sp, #12]
 800eb20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb22:	9302      	str	r3, [sp, #8]
 800eb24:	2300      	movs	r3, #0
 800eb26:	9301      	str	r3, [sp, #4]
 800eb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb2a:	9300      	str	r3, [sp, #0]
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eb30:	68b9      	ldr	r1, [r7, #8]
 800eb32:	68f8      	ldr	r0, [r7, #12]
 800eb34:	f7fe ff8c 	bl	800da50 <_ntoa_long>
 800eb38:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 800eb3a:	683b      	ldr	r3, [r7, #0]
 800eb3c:	3301      	adds	r3, #1
 800eb3e:	603b      	str	r3, [r7, #0]
        break;
 800eb40:	e153      	b.n	800edea <_vsnprintf+0x93a>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 800eb42:	683b      	ldr	r3, [r7, #0]
 800eb44:	781b      	ldrb	r3, [r3, #0]
 800eb46:	2b46      	cmp	r3, #70	; 0x46
 800eb48:	d103      	bne.n	800eb52 <_vsnprintf+0x6a2>
 800eb4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb4c:	f043 0320 	orr.w	r3, r3, #32
 800eb50:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800eb52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800eb54:	3307      	adds	r3, #7
 800eb56:	f023 0307 	bic.w	r3, r3, #7
 800eb5a:	f103 0208 	add.w	r2, r3, #8
 800eb5e:	66ba      	str	r2, [r7, #104]	; 0x68
 800eb60:	ed93 7b00 	vldr	d7, [r3]
 800eb64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb66:	9302      	str	r3, [sp, #8]
 800eb68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb6a:	9301      	str	r3, [sp, #4]
 800eb6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb6e:	9300      	str	r3, [sp, #0]
 800eb70:	eeb0 0b47 	vmov.f64	d0, d7
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eb78:	68b9      	ldr	r1, [r7, #8]
 800eb7a:	68f8      	ldr	r0, [r7, #12]
 800eb7c:	f7ff f840 	bl	800dc00 <_ftoa>
 800eb80:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	3301      	adds	r3, #1
 800eb86:	603b      	str	r3, [r7, #0]
        break;
 800eb88:	e12f      	b.n	800edea <_vsnprintf+0x93a>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	781b      	ldrb	r3, [r3, #0]
 800eb8e:	2b67      	cmp	r3, #103	; 0x67
 800eb90:	d003      	beq.n	800eb9a <_vsnprintf+0x6ea>
 800eb92:	683b      	ldr	r3, [r7, #0]
 800eb94:	781b      	ldrb	r3, [r3, #0]
 800eb96:	2b47      	cmp	r3, #71	; 0x47
 800eb98:	d103      	bne.n	800eba2 <_vsnprintf+0x6f2>
 800eb9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800eba0:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 800eba2:	683b      	ldr	r3, [r7, #0]
 800eba4:	781b      	ldrb	r3, [r3, #0]
 800eba6:	2b45      	cmp	r3, #69	; 0x45
 800eba8:	d003      	beq.n	800ebb2 <_vsnprintf+0x702>
 800ebaa:	683b      	ldr	r3, [r7, #0]
 800ebac:	781b      	ldrb	r3, [r3, #0]
 800ebae:	2b47      	cmp	r3, #71	; 0x47
 800ebb0:	d103      	bne.n	800ebba <_vsnprintf+0x70a>
 800ebb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ebb4:	f043 0320 	orr.w	r3, r3, #32
 800ebb8:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800ebba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ebbc:	3307      	adds	r3, #7
 800ebbe:	f023 0307 	bic.w	r3, r3, #7
 800ebc2:	f103 0208 	add.w	r2, r3, #8
 800ebc6:	66ba      	str	r2, [r7, #104]	; 0x68
 800ebc8:	ed93 7b00 	vldr	d7, [r3]
 800ebcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ebce:	9302      	str	r3, [sp, #8]
 800ebd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ebd2:	9301      	str	r3, [sp, #4]
 800ebd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebd6:	9300      	str	r3, [sp, #0]
 800ebd8:	eeb0 0b47 	vmov.f64	d0, d7
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ebe0:	68b9      	ldr	r1, [r7, #8]
 800ebe2:	68f8      	ldr	r0, [r7, #12]
 800ebe4:	f7ff fa5c 	bl	800e0a0 <_etoa>
 800ebe8:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 800ebea:	683b      	ldr	r3, [r7, #0]
 800ebec:	3301      	adds	r3, #1
 800ebee:	603b      	str	r3, [r7, #0]
        break;
 800ebf0:	e0fb      	b.n	800edea <_vsnprintf+0x93a>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 800ebf2:	2301      	movs	r3, #1
 800ebf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 800ebf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ebf8:	f003 0302 	and.w	r3, r3, #2
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d10e      	bne.n	800ec1e <_vsnprintf+0x76e>
          while (l++ < width) {
 800ec00:	e007      	b.n	800ec12 <_vsnprintf+0x762>
            out(' ', buffer, idx++, maxlen);
 800ec02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ec04:	1c53      	adds	r3, r2, #1
 800ec06:	647b      	str	r3, [r7, #68]	; 0x44
 800ec08:	68fc      	ldr	r4, [r7, #12]
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	68b9      	ldr	r1, [r7, #8]
 800ec0e:	2020      	movs	r0, #32
 800ec10:	47a0      	blx	r4
          while (l++ < width) {
 800ec12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec14:	1c5a      	adds	r2, r3, #1
 800ec16:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ec18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ec1a:	429a      	cmp	r2, r3
 800ec1c:	d8f1      	bhi.n	800ec02 <_vsnprintf+0x752>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 800ec1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ec20:	1d1a      	adds	r2, r3, #4
 800ec22:	66ba      	str	r2, [r7, #104]	; 0x68
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	b2d8      	uxtb	r0, r3
 800ec28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ec2a:	1c53      	adds	r3, r2, #1
 800ec2c:	647b      	str	r3, [r7, #68]	; 0x44
 800ec2e:	68fc      	ldr	r4, [r7, #12]
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	68b9      	ldr	r1, [r7, #8]
 800ec34:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 800ec36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec38:	f003 0302 	and.w	r3, r3, #2
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d00e      	beq.n	800ec5e <_vsnprintf+0x7ae>
          while (l++ < width) {
 800ec40:	e007      	b.n	800ec52 <_vsnprintf+0x7a2>
            out(' ', buffer, idx++, maxlen);
 800ec42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ec44:	1c53      	adds	r3, r2, #1
 800ec46:	647b      	str	r3, [r7, #68]	; 0x44
 800ec48:	68fc      	ldr	r4, [r7, #12]
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	68b9      	ldr	r1, [r7, #8]
 800ec4e:	2020      	movs	r0, #32
 800ec50:	47a0      	blx	r4
          while (l++ < width) {
 800ec52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec54:	1c5a      	adds	r2, r3, #1
 800ec56:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ec58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ec5a:	429a      	cmp	r2, r3
 800ec5c:	d8f1      	bhi.n	800ec42 <_vsnprintf+0x792>
          }
        }
        format++;
 800ec5e:	683b      	ldr	r3, [r7, #0]
 800ec60:	3301      	adds	r3, #1
 800ec62:	603b      	str	r3, [r7, #0]
        break;
 800ec64:	e0c1      	b.n	800edea <_vsnprintf+0x93a>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 800ec66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ec68:	1d1a      	adds	r2, r3, #4
 800ec6a:	66ba      	str	r2, [r7, #104]	; 0x68
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 800ec70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d001      	beq.n	800ec7a <_vsnprintf+0x7ca>
 800ec76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec78:	e001      	b.n	800ec7e <_vsnprintf+0x7ce>
 800ec7a:	f04f 33ff 	mov.w	r3, #4294967295
 800ec7e:	4619      	mov	r1, r3
 800ec80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ec82:	f7fe fd61 	bl	800d748 <_strnlen_s>
 800ec86:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 800ec88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d005      	beq.n	800ec9e <_vsnprintf+0x7ee>
          l = (l < precision ? l : precision);
 800ec92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ec94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec96:	4293      	cmp	r3, r2
 800ec98:	bf28      	it	cs
 800ec9a:	4613      	movcs	r3, r2
 800ec9c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 800ec9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eca0:	f003 0302 	and.w	r3, r3, #2
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d11a      	bne.n	800ecde <_vsnprintf+0x82e>
          while (l++ < width) {
 800eca8:	e007      	b.n	800ecba <_vsnprintf+0x80a>
            out(' ', buffer, idx++, maxlen);
 800ecaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ecac:	1c53      	adds	r3, r2, #1
 800ecae:	647b      	str	r3, [r7, #68]	; 0x44
 800ecb0:	68fc      	ldr	r4, [r7, #12]
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	68b9      	ldr	r1, [r7, #8]
 800ecb6:	2020      	movs	r0, #32
 800ecb8:	47a0      	blx	r4
          while (l++ < width) {
 800ecba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecbc:	1c5a      	adds	r2, r3, #1
 800ecbe:	637a      	str	r2, [r7, #52]	; 0x34
 800ecc0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ecc2:	429a      	cmp	r2, r3
 800ecc4:	d8f1      	bhi.n	800ecaa <_vsnprintf+0x7fa>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800ecc6:	e00a      	b.n	800ecde <_vsnprintf+0x82e>
          out(*(p++), buffer, idx++, maxlen);
 800ecc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecca:	1c5a      	adds	r2, r3, #1
 800eccc:	63ba      	str	r2, [r7, #56]	; 0x38
 800ecce:	7818      	ldrb	r0, [r3, #0]
 800ecd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ecd2:	1c53      	adds	r3, r2, #1
 800ecd4:	647b      	str	r3, [r7, #68]	; 0x44
 800ecd6:	68fc      	ldr	r4, [r7, #12]
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	68b9      	ldr	r1, [r7, #8]
 800ecdc:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800ecde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ece0:	781b      	ldrb	r3, [r3, #0]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d009      	beq.n	800ecfa <_vsnprintf+0x84a>
 800ece6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ece8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d0eb      	beq.n	800ecc8 <_vsnprintf+0x818>
 800ecf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ecf2:	1e5a      	subs	r2, r3, #1
 800ecf4:	64fa      	str	r2, [r7, #76]	; 0x4c
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d1e6      	bne.n	800ecc8 <_vsnprintf+0x818>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 800ecfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ecfc:	f003 0302 	and.w	r3, r3, #2
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d00e      	beq.n	800ed22 <_vsnprintf+0x872>
          while (l++ < width) {
 800ed04:	e007      	b.n	800ed16 <_vsnprintf+0x866>
            out(' ', buffer, idx++, maxlen);
 800ed06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ed08:	1c53      	adds	r3, r2, #1
 800ed0a:	647b      	str	r3, [r7, #68]	; 0x44
 800ed0c:	68fc      	ldr	r4, [r7, #12]
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	68b9      	ldr	r1, [r7, #8]
 800ed12:	2020      	movs	r0, #32
 800ed14:	47a0      	blx	r4
          while (l++ < width) {
 800ed16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed18:	1c5a      	adds	r2, r3, #1
 800ed1a:	637a      	str	r2, [r7, #52]	; 0x34
 800ed1c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ed1e:	429a      	cmp	r2, r3
 800ed20:	d8f1      	bhi.n	800ed06 <_vsnprintf+0x856>
          }
        }
        format++;
 800ed22:	683b      	ldr	r3, [r7, #0]
 800ed24:	3301      	adds	r3, #1
 800ed26:	603b      	str	r3, [r7, #0]
        break;
 800ed28:	e05f      	b.n	800edea <_vsnprintf+0x93a>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 800ed2a:	2308      	movs	r3, #8
 800ed2c:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 800ed2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed30:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 800ed34:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 800ed36:	2300      	movs	r3, #0
 800ed38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
 800ed3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d01e      	beq.n	800ed82 <_vsnprintf+0x8d2>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 800ed44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ed46:	1d1a      	adds	r2, r3, #4
 800ed48:	66ba      	str	r2, [r7, #104]	; 0x68
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	461a      	mov	r2, r3
 800ed4e:	f04f 0300 	mov.w	r3, #0
 800ed52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ed54:	9108      	str	r1, [sp, #32]
 800ed56:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ed58:	9107      	str	r1, [sp, #28]
 800ed5a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ed5c:	9106      	str	r1, [sp, #24]
 800ed5e:	f04f 0010 	mov.w	r0, #16
 800ed62:	f04f 0100 	mov.w	r1, #0
 800ed66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ed6a:	2100      	movs	r1, #0
 800ed6c:	9102      	str	r1, [sp, #8]
 800ed6e:	e9cd 2300 	strd	r2, r3, [sp]
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ed76:	68b9      	ldr	r1, [r7, #8]
 800ed78:	68f8      	ldr	r0, [r7, #12]
 800ed7a:	f7fe fed0 	bl	800db1e <_ntoa_long_long>
 800ed7e:	6478      	str	r0, [r7, #68]	; 0x44
 800ed80:	e016      	b.n	800edb0 <_vsnprintf+0x900>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800ed82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ed84:	1d1a      	adds	r2, r3, #4
 800ed86:	66ba      	str	r2, [r7, #104]	; 0x68
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	461a      	mov	r2, r3
 800ed8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed8e:	9305      	str	r3, [sp, #20]
 800ed90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed92:	9304      	str	r3, [sp, #16]
 800ed94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed96:	9303      	str	r3, [sp, #12]
 800ed98:	2310      	movs	r3, #16
 800ed9a:	9302      	str	r3, [sp, #8]
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	9301      	str	r3, [sp, #4]
 800eda0:	9200      	str	r2, [sp, #0]
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eda6:	68b9      	ldr	r1, [r7, #8]
 800eda8:	68f8      	ldr	r0, [r7, #12]
 800edaa:	f7fe fe51 	bl	800da50 <_ntoa_long>
 800edae:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 800edb0:	683b      	ldr	r3, [r7, #0]
 800edb2:	3301      	adds	r3, #1
 800edb4:	603b      	str	r3, [r7, #0]
        break;
 800edb6:	e018      	b.n	800edea <_vsnprintf+0x93a>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 800edb8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800edba:	1c53      	adds	r3, r2, #1
 800edbc:	647b      	str	r3, [r7, #68]	; 0x44
 800edbe:	68fc      	ldr	r4, [r7, #12]
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	68b9      	ldr	r1, [r7, #8]
 800edc4:	2025      	movs	r0, #37	; 0x25
 800edc6:	47a0      	blx	r4
        format++;
 800edc8:	683b      	ldr	r3, [r7, #0]
 800edca:	3301      	adds	r3, #1
 800edcc:	603b      	str	r3, [r7, #0]
        break;
 800edce:	e00c      	b.n	800edea <_vsnprintf+0x93a>

      default :
        out(*format, buffer, idx++, maxlen);
 800edd0:	683b      	ldr	r3, [r7, #0]
 800edd2:	7818      	ldrb	r0, [r3, #0]
 800edd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800edd6:	1c53      	adds	r3, r2, #1
 800edd8:	647b      	str	r3, [r7, #68]	; 0x44
 800edda:	68fc      	ldr	r4, [r7, #12]
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	68b9      	ldr	r1, [r7, #8]
 800ede0:	47a0      	blx	r4
        format++;
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	3301      	adds	r3, #1
 800ede6:	603b      	str	r3, [r7, #0]
        break;
 800ede8:	bf00      	nop
  while (*format)
 800edea:	683b      	ldr	r3, [r7, #0]
 800edec:	781b      	ldrb	r3, [r3, #0]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	f47f ab6f 	bne.w	800e4d2 <_vsnprintf+0x22>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800edf4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	429a      	cmp	r2, r3
 800edfa:	d302      	bcc.n	800ee02 <_vsnprintf+0x952>
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	1e5a      	subs	r2, r3, #1
 800ee00:	e000      	b.n	800ee04 <_vsnprintf+0x954>
 800ee02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ee04:	68fc      	ldr	r4, [r7, #12]
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	68b9      	ldr	r1, [r7, #8]
 800ee0a:	2000      	movs	r0, #0
 800ee0c:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 800ee0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800ee10:	4618      	mov	r0, r3
 800ee12:	3758      	adds	r7, #88	; 0x58
 800ee14:	46bd      	mov	sp, r7
 800ee16:	bdb0      	pop	{r4, r5, r7, pc}

0800ee18 <snprintf_>:
  return ret;
}


int snprintf_(char* buffer, size_t count, const char* format, ...)
{
 800ee18:	b40c      	push	{r2, r3}
 800ee1a:	b580      	push	{r7, lr}
 800ee1c:	b086      	sub	sp, #24
 800ee1e:	af02      	add	r7, sp, #8
 800ee20:	6078      	str	r0, [r7, #4]
 800ee22:	6039      	str	r1, [r7, #0]
  va_list va;
  va_start(va, format);
 800ee24:	f107 031c 	add.w	r3, r7, #28
 800ee28:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
 800ee2a:	68bb      	ldr	r3, [r7, #8]
 800ee2c:	9300      	str	r3, [sp, #0]
 800ee2e:	69bb      	ldr	r3, [r7, #24]
 800ee30:	683a      	ldr	r2, [r7, #0]
 800ee32:	6879      	ldr	r1, [r7, #4]
 800ee34:	4805      	ldr	r0, [pc, #20]	; (800ee4c <snprintf_+0x34>)
 800ee36:	f7ff fb3b 	bl	800e4b0 <_vsnprintf>
 800ee3a:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 800ee3c:	68fb      	ldr	r3, [r7, #12]
}
 800ee3e:	4618      	mov	r0, r3
 800ee40:	3710      	adds	r7, #16
 800ee42:	46bd      	mov	sp, r7
 800ee44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ee48:	b002      	add	sp, #8
 800ee4a:	4770      	bx	lr
 800ee4c:	0800d6ff 	.word	0x0800d6ff

0800ee50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b082      	sub	sp, #8
 800ee54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800ee56:	4b11      	ldr	r3, [pc, #68]	; (800ee9c <HAL_MspInit+0x4c>)
 800ee58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee5a:	4a10      	ldr	r2, [pc, #64]	; (800ee9c <HAL_MspInit+0x4c>)
 800ee5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ee60:	6413      	str	r3, [r2, #64]	; 0x40
 800ee62:	4b0e      	ldr	r3, [pc, #56]	; (800ee9c <HAL_MspInit+0x4c>)
 800ee64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ee6a:	607b      	str	r3, [r7, #4]
 800ee6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ee6e:	4b0b      	ldr	r3, [pc, #44]	; (800ee9c <HAL_MspInit+0x4c>)
 800ee70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee72:	4a0a      	ldr	r2, [pc, #40]	; (800ee9c <HAL_MspInit+0x4c>)
 800ee74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ee78:	6453      	str	r3, [r2, #68]	; 0x44
 800ee7a:	4b08      	ldr	r3, [pc, #32]	; (800ee9c <HAL_MspInit+0x4c>)
 800ee7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ee82:	603b      	str	r3, [r7, #0]
 800ee84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800ee86:	2200      	movs	r2, #0
 800ee88:	210f      	movs	r1, #15
 800ee8a:	f06f 0001 	mvn.w	r0, #1
 800ee8e:	f000 fbfa 	bl	800f686 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ee92:	bf00      	nop
 800ee94:	3708      	adds	r7, #8
 800ee96:	46bd      	mov	sp, r7
 800ee98:	bd80      	pop	{r7, pc}
 800ee9a:	bf00      	nop
 800ee9c:	40023800 	.word	0x40023800

0800eea0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b08a      	sub	sp, #40	; 0x28
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eea8:	f107 0314 	add.w	r3, r7, #20
 800eeac:	2200      	movs	r2, #0
 800eeae:	601a      	str	r2, [r3, #0]
 800eeb0:	605a      	str	r2, [r3, #4]
 800eeb2:	609a      	str	r2, [r3, #8]
 800eeb4:	60da      	str	r2, [r3, #12]
 800eeb6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	4a17      	ldr	r2, [pc, #92]	; (800ef1c <HAL_I2C_MspInit+0x7c>)
 800eebe:	4293      	cmp	r3, r2
 800eec0:	d128      	bne.n	800ef14 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800eec2:	4b17      	ldr	r3, [pc, #92]	; (800ef20 <HAL_I2C_MspInit+0x80>)
 800eec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eec6:	4a16      	ldr	r2, [pc, #88]	; (800ef20 <HAL_I2C_MspInit+0x80>)
 800eec8:	f043 0302 	orr.w	r3, r3, #2
 800eecc:	6313      	str	r3, [r2, #48]	; 0x30
 800eece:	4b14      	ldr	r3, [pc, #80]	; (800ef20 <HAL_I2C_MspInit+0x80>)
 800eed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eed2:	f003 0302 	and.w	r3, r3, #2
 800eed6:	613b      	str	r3, [r7, #16]
 800eed8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800eeda:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800eede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800eee0:	2312      	movs	r3, #18
 800eee2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800eee4:	2301      	movs	r3, #1
 800eee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800eee8:	2303      	movs	r3, #3
 800eeea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800eeec:	2304      	movs	r3, #4
 800eeee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800eef0:	f107 0314 	add.w	r3, r7, #20
 800eef4:	4619      	mov	r1, r3
 800eef6:	480b      	ldr	r0, [pc, #44]	; (800ef24 <HAL_I2C_MspInit+0x84>)
 800eef8:	f001 f806 	bl	800ff08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800eefc:	4b08      	ldr	r3, [pc, #32]	; (800ef20 <HAL_I2C_MspInit+0x80>)
 800eefe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef00:	4a07      	ldr	r2, [pc, #28]	; (800ef20 <HAL_I2C_MspInit+0x80>)
 800ef02:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ef06:	6413      	str	r3, [r2, #64]	; 0x40
 800ef08:	4b05      	ldr	r3, [pc, #20]	; (800ef20 <HAL_I2C_MspInit+0x80>)
 800ef0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ef10:	60fb      	str	r3, [r7, #12]
 800ef12:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800ef14:	bf00      	nop
 800ef16:	3728      	adds	r7, #40	; 0x28
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	bd80      	pop	{r7, pc}
 800ef1c:	40005800 	.word	0x40005800
 800ef20:	40023800 	.word	0x40023800
 800ef24:	40020400 	.word	0x40020400

0800ef28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b08a      	sub	sp, #40	; 0x28
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ef30:	f107 0314 	add.w	r3, r7, #20
 800ef34:	2200      	movs	r2, #0
 800ef36:	601a      	str	r2, [r3, #0]
 800ef38:	605a      	str	r2, [r3, #4]
 800ef3a:	609a      	str	r2, [r3, #8]
 800ef3c:	60da      	str	r2, [r3, #12]
 800ef3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	4a45      	ldr	r2, [pc, #276]	; (800f05c <HAL_SPI_MspInit+0x134>)
 800ef46:	4293      	cmp	r3, r2
 800ef48:	f040 8084 	bne.w	800f054 <HAL_SPI_MspInit+0x12c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800ef4c:	4b44      	ldr	r3, [pc, #272]	; (800f060 <HAL_SPI_MspInit+0x138>)
 800ef4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef50:	4a43      	ldr	r2, [pc, #268]	; (800f060 <HAL_SPI_MspInit+0x138>)
 800ef52:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ef56:	6453      	str	r3, [r2, #68]	; 0x44
 800ef58:	4b41      	ldr	r3, [pc, #260]	; (800f060 <HAL_SPI_MspInit+0x138>)
 800ef5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ef60:	613b      	str	r3, [r7, #16]
 800ef62:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ef64:	4b3e      	ldr	r3, [pc, #248]	; (800f060 <HAL_SPI_MspInit+0x138>)
 800ef66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef68:	4a3d      	ldr	r2, [pc, #244]	; (800f060 <HAL_SPI_MspInit+0x138>)
 800ef6a:	f043 0301 	orr.w	r3, r3, #1
 800ef6e:	6313      	str	r3, [r2, #48]	; 0x30
 800ef70:	4b3b      	ldr	r3, [pc, #236]	; (800f060 <HAL_SPI_MspInit+0x138>)
 800ef72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef74:	f003 0301 	and.w	r3, r3, #1
 800ef78:	60fb      	str	r3, [r7, #12]
 800ef7a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800ef7c:	23e0      	movs	r3, #224	; 0xe0
 800ef7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ef80:	2302      	movs	r3, #2
 800ef82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ef84:	2300      	movs	r3, #0
 800ef86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ef88:	2303      	movs	r3, #3
 800ef8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800ef8c:	2305      	movs	r3, #5
 800ef8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ef90:	f107 0314 	add.w	r3, r7, #20
 800ef94:	4619      	mov	r1, r3
 800ef96:	4833      	ldr	r0, [pc, #204]	; (800f064 <HAL_SPI_MspInit+0x13c>)
 800ef98:	f000 ffb6 	bl	800ff08 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 800ef9c:	4b32      	ldr	r3, [pc, #200]	; (800f068 <HAL_SPI_MspInit+0x140>)
 800ef9e:	4a33      	ldr	r2, [pc, #204]	; (800f06c <HAL_SPI_MspInit+0x144>)
 800efa0:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800efa2:	4b31      	ldr	r3, [pc, #196]	; (800f068 <HAL_SPI_MspInit+0x140>)
 800efa4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800efa8:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800efaa:	4b2f      	ldr	r3, [pc, #188]	; (800f068 <HAL_SPI_MspInit+0x140>)
 800efac:	2200      	movs	r2, #0
 800efae:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800efb0:	4b2d      	ldr	r3, [pc, #180]	; (800f068 <HAL_SPI_MspInit+0x140>)
 800efb2:	2200      	movs	r2, #0
 800efb4:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800efb6:	4b2c      	ldr	r3, [pc, #176]	; (800f068 <HAL_SPI_MspInit+0x140>)
 800efb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800efbc:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800efbe:	4b2a      	ldr	r3, [pc, #168]	; (800f068 <HAL_SPI_MspInit+0x140>)
 800efc0:	2200      	movs	r2, #0
 800efc2:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800efc4:	4b28      	ldr	r3, [pc, #160]	; (800f068 <HAL_SPI_MspInit+0x140>)
 800efc6:	2200      	movs	r2, #0
 800efc8:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800efca:	4b27      	ldr	r3, [pc, #156]	; (800f068 <HAL_SPI_MspInit+0x140>)
 800efcc:	2200      	movs	r2, #0
 800efce:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800efd0:	4b25      	ldr	r3, [pc, #148]	; (800f068 <HAL_SPI_MspInit+0x140>)
 800efd2:	2200      	movs	r2, #0
 800efd4:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800efd6:	4b24      	ldr	r3, [pc, #144]	; (800f068 <HAL_SPI_MspInit+0x140>)
 800efd8:	2200      	movs	r2, #0
 800efda:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800efdc:	4822      	ldr	r0, [pc, #136]	; (800f068 <HAL_SPI_MspInit+0x140>)
 800efde:	f000 fb89 	bl	800f6f4 <HAL_DMA_Init>
 800efe2:	4603      	mov	r3, r0
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d001      	beq.n	800efec <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 800efe8:	f7fe fb82 	bl	800d6f0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	4a1e      	ldr	r2, [pc, #120]	; (800f068 <HAL_SPI_MspInit+0x140>)
 800eff0:	659a      	str	r2, [r3, #88]	; 0x58
 800eff2:	4a1d      	ldr	r2, [pc, #116]	; (800f068 <HAL_SPI_MspInit+0x140>)
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800eff8:	4b1d      	ldr	r3, [pc, #116]	; (800f070 <HAL_SPI_MspInit+0x148>)
 800effa:	4a1e      	ldr	r2, [pc, #120]	; (800f074 <HAL_SPI_MspInit+0x14c>)
 800effc:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800effe:	4b1c      	ldr	r3, [pc, #112]	; (800f070 <HAL_SPI_MspInit+0x148>)
 800f000:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800f004:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800f006:	4b1a      	ldr	r3, [pc, #104]	; (800f070 <HAL_SPI_MspInit+0x148>)
 800f008:	2240      	movs	r2, #64	; 0x40
 800f00a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800f00c:	4b18      	ldr	r3, [pc, #96]	; (800f070 <HAL_SPI_MspInit+0x148>)
 800f00e:	2200      	movs	r2, #0
 800f010:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800f012:	4b17      	ldr	r3, [pc, #92]	; (800f070 <HAL_SPI_MspInit+0x148>)
 800f014:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f018:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800f01a:	4b15      	ldr	r3, [pc, #84]	; (800f070 <HAL_SPI_MspInit+0x148>)
 800f01c:	2200      	movs	r2, #0
 800f01e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800f020:	4b13      	ldr	r3, [pc, #76]	; (800f070 <HAL_SPI_MspInit+0x148>)
 800f022:	2200      	movs	r2, #0
 800f024:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800f026:	4b12      	ldr	r3, [pc, #72]	; (800f070 <HAL_SPI_MspInit+0x148>)
 800f028:	2200      	movs	r2, #0
 800f02a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800f02c:	4b10      	ldr	r3, [pc, #64]	; (800f070 <HAL_SPI_MspInit+0x148>)
 800f02e:	2200      	movs	r2, #0
 800f030:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800f032:	4b0f      	ldr	r3, [pc, #60]	; (800f070 <HAL_SPI_MspInit+0x148>)
 800f034:	2200      	movs	r2, #0
 800f036:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800f038:	480d      	ldr	r0, [pc, #52]	; (800f070 <HAL_SPI_MspInit+0x148>)
 800f03a:	f000 fb5b 	bl	800f6f4 <HAL_DMA_Init>
 800f03e:	4603      	mov	r3, r0
 800f040:	2b00      	cmp	r3, #0
 800f042:	d001      	beq.n	800f048 <HAL_SPI_MspInit+0x120>
    {
      Error_Handler();
 800f044:	f7fe fb54 	bl	800d6f0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	4a09      	ldr	r2, [pc, #36]	; (800f070 <HAL_SPI_MspInit+0x148>)
 800f04c:	655a      	str	r2, [r3, #84]	; 0x54
 800f04e:	4a08      	ldr	r2, [pc, #32]	; (800f070 <HAL_SPI_MspInit+0x148>)
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800f054:	bf00      	nop
 800f056:	3728      	adds	r7, #40	; 0x28
 800f058:	46bd      	mov	sp, r7
 800f05a:	bd80      	pop	{r7, pc}
 800f05c:	40013000 	.word	0x40013000
 800f060:	40023800 	.word	0x40023800
 800f064:	40020000 	.word	0x40020000
 800f068:	200684b0 	.word	0x200684b0
 800f06c:	40026410 	.word	0x40026410
 800f070:	2006c510 	.word	0x2006c510
 800f074:	40026458 	.word	0x40026458

0800f078 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800f078:	b580      	push	{r7, lr}
 800f07a:	b08a      	sub	sp, #40	; 0x28
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f080:	f107 0314 	add.w	r3, r7, #20
 800f084:	2200      	movs	r2, #0
 800f086:	601a      	str	r2, [r3, #0]
 800f088:	605a      	str	r2, [r3, #4]
 800f08a:	609a      	str	r2, [r3, #8]
 800f08c:	60da      	str	r2, [r3, #12]
 800f08e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	4a32      	ldr	r2, [pc, #200]	; (800f160 <HAL_UART_MspInit+0xe8>)
 800f096:	4293      	cmp	r3, r2
 800f098:	d15d      	bne.n	800f156 <HAL_UART_MspInit+0xde>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800f09a:	4b32      	ldr	r3, [pc, #200]	; (800f164 <HAL_UART_MspInit+0xec>)
 800f09c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f09e:	4a31      	ldr	r2, [pc, #196]	; (800f164 <HAL_UART_MspInit+0xec>)
 800f0a0:	f043 0320 	orr.w	r3, r3, #32
 800f0a4:	6453      	str	r3, [r2, #68]	; 0x44
 800f0a6:	4b2f      	ldr	r3, [pc, #188]	; (800f164 <HAL_UART_MspInit+0xec>)
 800f0a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0aa:	f003 0320 	and.w	r3, r3, #32
 800f0ae:	613b      	str	r3, [r7, #16]
 800f0b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f0b2:	4b2c      	ldr	r3, [pc, #176]	; (800f164 <HAL_UART_MspInit+0xec>)
 800f0b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0b6:	4a2b      	ldr	r2, [pc, #172]	; (800f164 <HAL_UART_MspInit+0xec>)
 800f0b8:	f043 0304 	orr.w	r3, r3, #4
 800f0bc:	6313      	str	r3, [r2, #48]	; 0x30
 800f0be:	4b29      	ldr	r3, [pc, #164]	; (800f164 <HAL_UART_MspInit+0xec>)
 800f0c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0c2:	f003 0304 	and.w	r3, r3, #4
 800f0c6:	60fb      	str	r3, [r7, #12]
 800f0c8:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800f0ca:	23c0      	movs	r3, #192	; 0xc0
 800f0cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f0ce:	2302      	movs	r3, #2
 800f0d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f0d6:	2303      	movs	r3, #3
 800f0d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800f0da:	2308      	movs	r3, #8
 800f0dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f0de:	f107 0314 	add.w	r3, r7, #20
 800f0e2:	4619      	mov	r1, r3
 800f0e4:	4820      	ldr	r0, [pc, #128]	; (800f168 <HAL_UART_MspInit+0xf0>)
 800f0e6:	f000 ff0f 	bl	800ff08 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
 800f0ea:	4b20      	ldr	r3, [pc, #128]	; (800f16c <HAL_UART_MspInit+0xf4>)
 800f0ec:	4a20      	ldr	r2, [pc, #128]	; (800f170 <HAL_UART_MspInit+0xf8>)
 800f0ee:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800f0f0:	4b1e      	ldr	r3, [pc, #120]	; (800f16c <HAL_UART_MspInit+0xf4>)
 800f0f2:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800f0f6:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800f0f8:	4b1c      	ldr	r3, [pc, #112]	; (800f16c <HAL_UART_MspInit+0xf4>)
 800f0fa:	2240      	movs	r2, #64	; 0x40
 800f0fc:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800f0fe:	4b1b      	ldr	r3, [pc, #108]	; (800f16c <HAL_UART_MspInit+0xf4>)
 800f100:	2200      	movs	r2, #0
 800f102:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800f104:	4b19      	ldr	r3, [pc, #100]	; (800f16c <HAL_UART_MspInit+0xf4>)
 800f106:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f10a:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800f10c:	4b17      	ldr	r3, [pc, #92]	; (800f16c <HAL_UART_MspInit+0xf4>)
 800f10e:	2200      	movs	r2, #0
 800f110:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800f112:	4b16      	ldr	r3, [pc, #88]	; (800f16c <HAL_UART_MspInit+0xf4>)
 800f114:	2200      	movs	r2, #0
 800f116:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800f118:	4b14      	ldr	r3, [pc, #80]	; (800f16c <HAL_UART_MspInit+0xf4>)
 800f11a:	2200      	movs	r2, #0
 800f11c:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 800f11e:	4b13      	ldr	r3, [pc, #76]	; (800f16c <HAL_UART_MspInit+0xf4>)
 800f120:	2200      	movs	r2, #0
 800f122:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800f124:	4b11      	ldr	r3, [pc, #68]	; (800f16c <HAL_UART_MspInit+0xf4>)
 800f126:	2200      	movs	r2, #0
 800f128:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 800f12a:	4810      	ldr	r0, [pc, #64]	; (800f16c <HAL_UART_MspInit+0xf4>)
 800f12c:	f000 fae2 	bl	800f6f4 <HAL_DMA_Init>
 800f130:	4603      	mov	r3, r0
 800f132:	2b00      	cmp	r3, #0
 800f134:	d001      	beq.n	800f13a <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 800f136:	f7fe fadb 	bl	800d6f0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	4a0b      	ldr	r2, [pc, #44]	; (800f16c <HAL_UART_MspInit+0xf4>)
 800f13e:	66da      	str	r2, [r3, #108]	; 0x6c
 800f140:	4a0a      	ldr	r2, [pc, #40]	; (800f16c <HAL_UART_MspInit+0xf4>)
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 3, 0);
 800f146:	2200      	movs	r2, #0
 800f148:	2103      	movs	r1, #3
 800f14a:	2047      	movs	r0, #71	; 0x47
 800f14c:	f000 fa9b 	bl	800f686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800f150:	2047      	movs	r0, #71	; 0x47
 800f152:	f000 fab4 	bl	800f6be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800f156:	bf00      	nop
 800f158:	3728      	adds	r7, #40	; 0x28
 800f15a:	46bd      	mov	sp, r7
 800f15c:	bd80      	pop	{r7, pc}
 800f15e:	bf00      	nop
 800f160:	40011400 	.word	0x40011400
 800f164:	40023800 	.word	0x40023800
 800f168:	40020800 	.word	0x40020800
 800f16c:	20060114 	.word	0x20060114
 800f170:	400264a0 	.word	0x400264a0

0800f174 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800f174:	b480      	push	{r7}
 800f176:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800f178:	bf00      	nop
 800f17a:	46bd      	mov	sp, r7
 800f17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f180:	4770      	bx	lr

0800f182 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800f182:	b480      	push	{r7}
 800f184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800f186:	e7fe      	b.n	800f186 <HardFault_Handler+0x4>

0800f188 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800f188:	b480      	push	{r7}
 800f18a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800f18c:	e7fe      	b.n	800f18c <MemManage_Handler+0x4>

0800f18e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800f18e:	b480      	push	{r7}
 800f190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800f192:	e7fe      	b.n	800f192 <BusFault_Handler+0x4>

0800f194 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800f194:	b480      	push	{r7}
 800f196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800f198:	e7fe      	b.n	800f198 <UsageFault_Handler+0x4>

0800f19a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800f19a:	b480      	push	{r7}
 800f19c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800f19e:	bf00      	nop
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a6:	4770      	bx	lr

0800f1a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800f1ac:	f000 f970 	bl	800f490 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800f1b0:	f007 f9ee 	bl	8016590 <xTaskGetSchedulerState>
 800f1b4:	4603      	mov	r3, r0
 800f1b6:	2b01      	cmp	r3, #1
 800f1b8:	d001      	beq.n	800f1be <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800f1ba:	f007 fdcd 	bl	8016d58 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800f1be:	bf00      	nop
 800f1c0:	bd80      	pop	{r7, pc}

0800f1c2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800f1c2:	b580      	push	{r7, lr}
 800f1c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800f1c6:	2008      	movs	r0, #8
 800f1c8:	f001 f896 	bl	80102f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800f1cc:	bf00      	nop
 800f1ce:	bd80      	pop	{r7, pc}

0800f1d0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800f1d0:	b580      	push	{r7, lr}
 800f1d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800f1d4:	4802      	ldr	r0, [pc, #8]	; (800f1e0 <DMA2_Stream0_IRQHandler+0x10>)
 800f1d6:	f000 fc2d 	bl	800fa34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800f1da:	bf00      	nop
 800f1dc:	bd80      	pop	{r7, pc}
 800f1de:	bf00      	nop
 800f1e0:	200684b0 	.word	0x200684b0

0800f1e4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800f1e8:	4802      	ldr	r0, [pc, #8]	; (800f1f4 <DMA2_Stream3_IRQHandler+0x10>)
 800f1ea:	f000 fc23 	bl	800fa34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800f1ee:	bf00      	nop
 800f1f0:	bd80      	pop	{r7, pc}
 800f1f2:	bf00      	nop
 800f1f4:	2006c510 	.word	0x2006c510

0800f1f8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800f1fc:	4802      	ldr	r0, [pc, #8]	; (800f208 <DMA2_Stream6_IRQHandler+0x10>)
 800f1fe:	f000 fc19 	bl	800fa34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800f202:	bf00      	nop
 800f204:	bd80      	pop	{r7, pc}
 800f206:	bf00      	nop
 800f208:	20060114 	.word	0x20060114

0800f20c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800f210:	4802      	ldr	r0, [pc, #8]	; (800f21c <USART6_IRQHandler+0x10>)
 800f212:	f004 f895 	bl	8013340 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800f216:	bf00      	nop
 800f218:	bd80      	pop	{r7, pc}
 800f21a:	bf00      	nop
 800f21c:	200683c0 	.word	0x200683c0

0800f220 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800f220:	b480      	push	{r7}
 800f222:	af00      	add	r7, sp, #0
	return 1;
 800f224:	2301      	movs	r3, #1
}
 800f226:	4618      	mov	r0, r3
 800f228:	46bd      	mov	sp, r7
 800f22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22e:	4770      	bx	lr

0800f230 <_kill>:

int _kill(int pid, int sig)
{
 800f230:	b580      	push	{r7, lr}
 800f232:	b082      	sub	sp, #8
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
 800f238:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800f23a:	f008 f809 	bl	8017250 <__errno>
 800f23e:	4603      	mov	r3, r0
 800f240:	2216      	movs	r2, #22
 800f242:	601a      	str	r2, [r3, #0]
	return -1;
 800f244:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f248:	4618      	mov	r0, r3
 800f24a:	3708      	adds	r7, #8
 800f24c:	46bd      	mov	sp, r7
 800f24e:	bd80      	pop	{r7, pc}

0800f250 <_exit>:

void _exit (int status)
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b082      	sub	sp, #8
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800f258:	f04f 31ff 	mov.w	r1, #4294967295
 800f25c:	6878      	ldr	r0, [r7, #4]
 800f25e:	f7ff ffe7 	bl	800f230 <_kill>
	while (1) {}		/* Make sure we hang here */
 800f262:	e7fe      	b.n	800f262 <_exit+0x12>

0800f264 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800f264:	b580      	push	{r7, lr}
 800f266:	b086      	sub	sp, #24
 800f268:	af00      	add	r7, sp, #0
 800f26a:	60f8      	str	r0, [r7, #12]
 800f26c:	60b9      	str	r1, [r7, #8]
 800f26e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f270:	2300      	movs	r3, #0
 800f272:	617b      	str	r3, [r7, #20]
 800f274:	e00a      	b.n	800f28c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800f276:	f3af 8000 	nop.w
 800f27a:	4601      	mov	r1, r0
 800f27c:	68bb      	ldr	r3, [r7, #8]
 800f27e:	1c5a      	adds	r2, r3, #1
 800f280:	60ba      	str	r2, [r7, #8]
 800f282:	b2ca      	uxtb	r2, r1
 800f284:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f286:	697b      	ldr	r3, [r7, #20]
 800f288:	3301      	adds	r3, #1
 800f28a:	617b      	str	r3, [r7, #20]
 800f28c:	697a      	ldr	r2, [r7, #20]
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	429a      	cmp	r2, r3
 800f292:	dbf0      	blt.n	800f276 <_read+0x12>
	}

return len;
 800f294:	687b      	ldr	r3, [r7, #4]
}
 800f296:	4618      	mov	r0, r3
 800f298:	3718      	adds	r7, #24
 800f29a:	46bd      	mov	sp, r7
 800f29c:	bd80      	pop	{r7, pc}

0800f29e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800f29e:	b580      	push	{r7, lr}
 800f2a0:	b086      	sub	sp, #24
 800f2a2:	af00      	add	r7, sp, #0
 800f2a4:	60f8      	str	r0, [r7, #12]
 800f2a6:	60b9      	str	r1, [r7, #8]
 800f2a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	617b      	str	r3, [r7, #20]
 800f2ae:	e009      	b.n	800f2c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800f2b0:	68bb      	ldr	r3, [r7, #8]
 800f2b2:	1c5a      	adds	r2, r3, #1
 800f2b4:	60ba      	str	r2, [r7, #8]
 800f2b6:	781b      	ldrb	r3, [r3, #0]
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f2be:	697b      	ldr	r3, [r7, #20]
 800f2c0:	3301      	adds	r3, #1
 800f2c2:	617b      	str	r3, [r7, #20]
 800f2c4:	697a      	ldr	r2, [r7, #20]
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	429a      	cmp	r2, r3
 800f2ca:	dbf1      	blt.n	800f2b0 <_write+0x12>
	}
	return len;
 800f2cc:	687b      	ldr	r3, [r7, #4]
}
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	3718      	adds	r7, #24
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	bd80      	pop	{r7, pc}

0800f2d6 <_close>:

int _close(int file)
{
 800f2d6:	b480      	push	{r7}
 800f2d8:	b083      	sub	sp, #12
 800f2da:	af00      	add	r7, sp, #0
 800f2dc:	6078      	str	r0, [r7, #4]
	return -1;
 800f2de:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	370c      	adds	r7, #12
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ec:	4770      	bx	lr

0800f2ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 800f2ee:	b480      	push	{r7}
 800f2f0:	b083      	sub	sp, #12
 800f2f2:	af00      	add	r7, sp, #0
 800f2f4:	6078      	str	r0, [r7, #4]
 800f2f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800f2f8:	683b      	ldr	r3, [r7, #0]
 800f2fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f2fe:	605a      	str	r2, [r3, #4]
	return 0;
 800f300:	2300      	movs	r3, #0
}
 800f302:	4618      	mov	r0, r3
 800f304:	370c      	adds	r7, #12
 800f306:	46bd      	mov	sp, r7
 800f308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30c:	4770      	bx	lr

0800f30e <_isatty>:

int _isatty(int file)
{
 800f30e:	b480      	push	{r7}
 800f310:	b083      	sub	sp, #12
 800f312:	af00      	add	r7, sp, #0
 800f314:	6078      	str	r0, [r7, #4]
	return 1;
 800f316:	2301      	movs	r3, #1
}
 800f318:	4618      	mov	r0, r3
 800f31a:	370c      	adds	r7, #12
 800f31c:	46bd      	mov	sp, r7
 800f31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f322:	4770      	bx	lr

0800f324 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800f324:	b480      	push	{r7}
 800f326:	b085      	sub	sp, #20
 800f328:	af00      	add	r7, sp, #0
 800f32a:	60f8      	str	r0, [r7, #12]
 800f32c:	60b9      	str	r1, [r7, #8]
 800f32e:	607a      	str	r2, [r7, #4]
	return 0;
 800f330:	2300      	movs	r3, #0
}
 800f332:	4618      	mov	r0, r3
 800f334:	3714      	adds	r7, #20
 800f336:	46bd      	mov	sp, r7
 800f338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33c:	4770      	bx	lr
	...

0800f340 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800f340:	b580      	push	{r7, lr}
 800f342:	b084      	sub	sp, #16
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800f348:	4b11      	ldr	r3, [pc, #68]	; (800f390 <_sbrk+0x50>)
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d102      	bne.n	800f356 <_sbrk+0x16>
		heap_end = &end;
 800f350:	4b0f      	ldr	r3, [pc, #60]	; (800f390 <_sbrk+0x50>)
 800f352:	4a10      	ldr	r2, [pc, #64]	; (800f394 <_sbrk+0x54>)
 800f354:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800f356:	4b0e      	ldr	r3, [pc, #56]	; (800f390 <_sbrk+0x50>)
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800f35c:	4b0c      	ldr	r3, [pc, #48]	; (800f390 <_sbrk+0x50>)
 800f35e:	681a      	ldr	r2, [r3, #0]
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	4413      	add	r3, r2
 800f364:	466a      	mov	r2, sp
 800f366:	4293      	cmp	r3, r2
 800f368:	d907      	bls.n	800f37a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800f36a:	f007 ff71 	bl	8017250 <__errno>
 800f36e:	4603      	mov	r3, r0
 800f370:	220c      	movs	r2, #12
 800f372:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800f374:	f04f 33ff 	mov.w	r3, #4294967295
 800f378:	e006      	b.n	800f388 <_sbrk+0x48>
	}

	heap_end += incr;
 800f37a:	4b05      	ldr	r3, [pc, #20]	; (800f390 <_sbrk+0x50>)
 800f37c:	681a      	ldr	r2, [r3, #0]
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	4413      	add	r3, r2
 800f382:	4a03      	ldr	r2, [pc, #12]	; (800f390 <_sbrk+0x50>)
 800f384:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800f386:	68fb      	ldr	r3, [r7, #12]
}
 800f388:	4618      	mov	r0, r3
 800f38a:	3710      	adds	r7, #16
 800f38c:	46bd      	mov	sp, r7
 800f38e:	bd80      	pop	{r7, pc}
 800f390:	200004a0 	.word	0x200004a0
 800f394:	2006c590 	.word	0x2006c590

0800f398 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800f398:	b480      	push	{r7}
 800f39a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800f39c:	4b07      	ldr	r3, [pc, #28]	; (800f3bc <SystemInit+0x24>)
 800f39e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f3a2:	4a06      	ldr	r2, [pc, #24]	; (800f3bc <SystemInit+0x24>)
 800f3a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f3a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | 0x8000; /* Vector Table Relocation in Internal FLASH */
 800f3ac:	4b03      	ldr	r3, [pc, #12]	; (800f3bc <SystemInit+0x24>)
 800f3ae:	4a04      	ldr	r2, [pc, #16]	; (800f3c0 <SystemInit+0x28>)
 800f3b0:	609a      	str	r2, [r3, #8]
#endif
}
 800f3b2:	bf00      	nop
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ba:	4770      	bx	lr
 800f3bc:	e000ed00 	.word	0xe000ed00
 800f3c0:	08008000 	.word	0x08008000

0800f3c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800f3c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800f3fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800f3c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800f3ca:	e003      	b.n	800f3d4 <LoopCopyDataInit>

0800f3cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800f3cc:	4b0c      	ldr	r3, [pc, #48]	; (800f400 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800f3ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800f3d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800f3d2:	3104      	adds	r1, #4

0800f3d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800f3d4:	480b      	ldr	r0, [pc, #44]	; (800f404 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800f3d6:	4b0c      	ldr	r3, [pc, #48]	; (800f408 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800f3d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800f3da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800f3dc:	d3f6      	bcc.n	800f3cc <CopyDataInit>
  ldr  r2, =_sbss
 800f3de:	4a0b      	ldr	r2, [pc, #44]	; (800f40c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800f3e0:	e002      	b.n	800f3e8 <LoopFillZerobss>

0800f3e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800f3e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800f3e4:	f842 3b04 	str.w	r3, [r2], #4

0800f3e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800f3e8:	4b09      	ldr	r3, [pc, #36]	; (800f410 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800f3ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800f3ec:	d3f9      	bcc.n	800f3e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800f3ee:	f7ff ffd3 	bl	800f398 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800f3f2:	f007 ff33 	bl	801725c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800f3f6:	f7fd f9af 	bl	800c758 <main>
  bx  lr    
 800f3fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800f3fc:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800f400:	08029f78 	.word	0x08029f78
  ldr  r0, =_sdata
 800f404:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800f408:	20000200 	.word	0x20000200
  ldr  r2, =_sbss
 800f40c:	20000200 	.word	0x20000200
  ldr  r3, = _ebss
 800f410:	2006c590 	.word	0x2006c590

0800f414 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800f414:	e7fe      	b.n	800f414 <ADC_IRQHandler>

0800f416 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800f416:	b580      	push	{r7, lr}
 800f418:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800f41a:	2003      	movs	r0, #3
 800f41c:	f000 f928 	bl	800f670 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800f420:	200f      	movs	r0, #15
 800f422:	f000 f805 	bl	800f430 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800f426:	f7ff fd13 	bl	800ee50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800f42a:	2300      	movs	r3, #0
}
 800f42c:	4618      	mov	r0, r3
 800f42e:	bd80      	pop	{r7, pc}

0800f430 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b082      	sub	sp, #8
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800f438:	4b12      	ldr	r3, [pc, #72]	; (800f484 <HAL_InitTick+0x54>)
 800f43a:	681a      	ldr	r2, [r3, #0]
 800f43c:	4b12      	ldr	r3, [pc, #72]	; (800f488 <HAL_InitTick+0x58>)
 800f43e:	781b      	ldrb	r3, [r3, #0]
 800f440:	4619      	mov	r1, r3
 800f442:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f446:	fbb3 f3f1 	udiv	r3, r3, r1
 800f44a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f44e:	4618      	mov	r0, r3
 800f450:	f000 f943 	bl	800f6da <HAL_SYSTICK_Config>
 800f454:	4603      	mov	r3, r0
 800f456:	2b00      	cmp	r3, #0
 800f458:	d001      	beq.n	800f45e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800f45a:	2301      	movs	r3, #1
 800f45c:	e00e      	b.n	800f47c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	2b0f      	cmp	r3, #15
 800f462:	d80a      	bhi.n	800f47a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800f464:	2200      	movs	r2, #0
 800f466:	6879      	ldr	r1, [r7, #4]
 800f468:	f04f 30ff 	mov.w	r0, #4294967295
 800f46c:	f000 f90b 	bl	800f686 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800f470:	4a06      	ldr	r2, [pc, #24]	; (800f48c <HAL_InitTick+0x5c>)
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800f476:	2300      	movs	r3, #0
 800f478:	e000      	b.n	800f47c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800f47a:	2301      	movs	r3, #1
}
 800f47c:	4618      	mov	r0, r3
 800f47e:	3708      	adds	r7, #8
 800f480:	46bd      	mov	sp, r7
 800f482:	bd80      	pop	{r7, pc}
 800f484:	20000018 	.word	0x20000018
 800f488:	20000020 	.word	0x20000020
 800f48c:	2000001c 	.word	0x2000001c

0800f490 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800f490:	b480      	push	{r7}
 800f492:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800f494:	4b06      	ldr	r3, [pc, #24]	; (800f4b0 <HAL_IncTick+0x20>)
 800f496:	781b      	ldrb	r3, [r3, #0]
 800f498:	461a      	mov	r2, r3
 800f49a:	4b06      	ldr	r3, [pc, #24]	; (800f4b4 <HAL_IncTick+0x24>)
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	4413      	add	r3, r2
 800f4a0:	4a04      	ldr	r2, [pc, #16]	; (800f4b4 <HAL_IncTick+0x24>)
 800f4a2:	6013      	str	r3, [r2, #0]
}
 800f4a4:	bf00      	nop
 800f4a6:	46bd      	mov	sp, r7
 800f4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ac:	4770      	bx	lr
 800f4ae:	bf00      	nop
 800f4b0:	20000020 	.word	0x20000020
 800f4b4:	2006c57c 	.word	0x2006c57c

0800f4b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800f4b8:	b480      	push	{r7}
 800f4ba:	af00      	add	r7, sp, #0
  return uwTick;
 800f4bc:	4b03      	ldr	r3, [pc, #12]	; (800f4cc <HAL_GetTick+0x14>)
 800f4be:	681b      	ldr	r3, [r3, #0]
}
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c8:	4770      	bx	lr
 800f4ca:	bf00      	nop
 800f4cc:	2006c57c 	.word	0x2006c57c

0800f4d0 <__NVIC_SetPriorityGrouping>:
{
 800f4d0:	b480      	push	{r7}
 800f4d2:	b085      	sub	sp, #20
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	f003 0307 	and.w	r3, r3, #7
 800f4de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800f4e0:	4b0b      	ldr	r3, [pc, #44]	; (800f510 <__NVIC_SetPriorityGrouping+0x40>)
 800f4e2:	68db      	ldr	r3, [r3, #12]
 800f4e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800f4e6:	68ba      	ldr	r2, [r7, #8]
 800f4e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800f4ec:	4013      	ands	r3, r2
 800f4ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800f4f4:	68bb      	ldr	r3, [r7, #8]
 800f4f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800f4f8:	4b06      	ldr	r3, [pc, #24]	; (800f514 <__NVIC_SetPriorityGrouping+0x44>)
 800f4fa:	4313      	orrs	r3, r2
 800f4fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800f4fe:	4a04      	ldr	r2, [pc, #16]	; (800f510 <__NVIC_SetPriorityGrouping+0x40>)
 800f500:	68bb      	ldr	r3, [r7, #8]
 800f502:	60d3      	str	r3, [r2, #12]
}
 800f504:	bf00      	nop
 800f506:	3714      	adds	r7, #20
 800f508:	46bd      	mov	sp, r7
 800f50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f50e:	4770      	bx	lr
 800f510:	e000ed00 	.word	0xe000ed00
 800f514:	05fa0000 	.word	0x05fa0000

0800f518 <__NVIC_GetPriorityGrouping>:
{
 800f518:	b480      	push	{r7}
 800f51a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800f51c:	4b04      	ldr	r3, [pc, #16]	; (800f530 <__NVIC_GetPriorityGrouping+0x18>)
 800f51e:	68db      	ldr	r3, [r3, #12]
 800f520:	0a1b      	lsrs	r3, r3, #8
 800f522:	f003 0307 	and.w	r3, r3, #7
}
 800f526:	4618      	mov	r0, r3
 800f528:	46bd      	mov	sp, r7
 800f52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52e:	4770      	bx	lr
 800f530:	e000ed00 	.word	0xe000ed00

0800f534 <__NVIC_EnableIRQ>:
{
 800f534:	b480      	push	{r7}
 800f536:	b083      	sub	sp, #12
 800f538:	af00      	add	r7, sp, #0
 800f53a:	4603      	mov	r3, r0
 800f53c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f53e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f542:	2b00      	cmp	r3, #0
 800f544:	db0b      	blt.n	800f55e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f546:	79fb      	ldrb	r3, [r7, #7]
 800f548:	f003 021f 	and.w	r2, r3, #31
 800f54c:	4907      	ldr	r1, [pc, #28]	; (800f56c <__NVIC_EnableIRQ+0x38>)
 800f54e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f552:	095b      	lsrs	r3, r3, #5
 800f554:	2001      	movs	r0, #1
 800f556:	fa00 f202 	lsl.w	r2, r0, r2
 800f55a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800f55e:	bf00      	nop
 800f560:	370c      	adds	r7, #12
 800f562:	46bd      	mov	sp, r7
 800f564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f568:	4770      	bx	lr
 800f56a:	bf00      	nop
 800f56c:	e000e100 	.word	0xe000e100

0800f570 <__NVIC_SetPriority>:
{
 800f570:	b480      	push	{r7}
 800f572:	b083      	sub	sp, #12
 800f574:	af00      	add	r7, sp, #0
 800f576:	4603      	mov	r3, r0
 800f578:	6039      	str	r1, [r7, #0]
 800f57a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f57c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f580:	2b00      	cmp	r3, #0
 800f582:	db0a      	blt.n	800f59a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f584:	683b      	ldr	r3, [r7, #0]
 800f586:	b2da      	uxtb	r2, r3
 800f588:	490c      	ldr	r1, [pc, #48]	; (800f5bc <__NVIC_SetPriority+0x4c>)
 800f58a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f58e:	0112      	lsls	r2, r2, #4
 800f590:	b2d2      	uxtb	r2, r2
 800f592:	440b      	add	r3, r1
 800f594:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800f598:	e00a      	b.n	800f5b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f59a:	683b      	ldr	r3, [r7, #0]
 800f59c:	b2da      	uxtb	r2, r3
 800f59e:	4908      	ldr	r1, [pc, #32]	; (800f5c0 <__NVIC_SetPriority+0x50>)
 800f5a0:	79fb      	ldrb	r3, [r7, #7]
 800f5a2:	f003 030f 	and.w	r3, r3, #15
 800f5a6:	3b04      	subs	r3, #4
 800f5a8:	0112      	lsls	r2, r2, #4
 800f5aa:	b2d2      	uxtb	r2, r2
 800f5ac:	440b      	add	r3, r1
 800f5ae:	761a      	strb	r2, [r3, #24]
}
 800f5b0:	bf00      	nop
 800f5b2:	370c      	adds	r7, #12
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ba:	4770      	bx	lr
 800f5bc:	e000e100 	.word	0xe000e100
 800f5c0:	e000ed00 	.word	0xe000ed00

0800f5c4 <NVIC_EncodePriority>:
{
 800f5c4:	b480      	push	{r7}
 800f5c6:	b089      	sub	sp, #36	; 0x24
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	60f8      	str	r0, [r7, #12]
 800f5cc:	60b9      	str	r1, [r7, #8]
 800f5ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	f003 0307 	and.w	r3, r3, #7
 800f5d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800f5d8:	69fb      	ldr	r3, [r7, #28]
 800f5da:	f1c3 0307 	rsb	r3, r3, #7
 800f5de:	2b04      	cmp	r3, #4
 800f5e0:	bf28      	it	cs
 800f5e2:	2304      	movcs	r3, #4
 800f5e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800f5e6:	69fb      	ldr	r3, [r7, #28]
 800f5e8:	3304      	adds	r3, #4
 800f5ea:	2b06      	cmp	r3, #6
 800f5ec:	d902      	bls.n	800f5f4 <NVIC_EncodePriority+0x30>
 800f5ee:	69fb      	ldr	r3, [r7, #28]
 800f5f0:	3b03      	subs	r3, #3
 800f5f2:	e000      	b.n	800f5f6 <NVIC_EncodePriority+0x32>
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f5f8:	f04f 32ff 	mov.w	r2, #4294967295
 800f5fc:	69bb      	ldr	r3, [r7, #24]
 800f5fe:	fa02 f303 	lsl.w	r3, r2, r3
 800f602:	43da      	mvns	r2, r3
 800f604:	68bb      	ldr	r3, [r7, #8]
 800f606:	401a      	ands	r2, r3
 800f608:	697b      	ldr	r3, [r7, #20]
 800f60a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800f60c:	f04f 31ff 	mov.w	r1, #4294967295
 800f610:	697b      	ldr	r3, [r7, #20]
 800f612:	fa01 f303 	lsl.w	r3, r1, r3
 800f616:	43d9      	mvns	r1, r3
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f61c:	4313      	orrs	r3, r2
}
 800f61e:	4618      	mov	r0, r3
 800f620:	3724      	adds	r7, #36	; 0x24
 800f622:	46bd      	mov	sp, r7
 800f624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f628:	4770      	bx	lr
	...

0800f62c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b082      	sub	sp, #8
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	3b01      	subs	r3, #1
 800f638:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f63c:	d301      	bcc.n	800f642 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800f63e:	2301      	movs	r3, #1
 800f640:	e00f      	b.n	800f662 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f642:	4a0a      	ldr	r2, [pc, #40]	; (800f66c <SysTick_Config+0x40>)
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	3b01      	subs	r3, #1
 800f648:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800f64a:	210f      	movs	r1, #15
 800f64c:	f04f 30ff 	mov.w	r0, #4294967295
 800f650:	f7ff ff8e 	bl	800f570 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f654:	4b05      	ldr	r3, [pc, #20]	; (800f66c <SysTick_Config+0x40>)
 800f656:	2200      	movs	r2, #0
 800f658:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800f65a:	4b04      	ldr	r3, [pc, #16]	; (800f66c <SysTick_Config+0x40>)
 800f65c:	2207      	movs	r2, #7
 800f65e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800f660:	2300      	movs	r3, #0
}
 800f662:	4618      	mov	r0, r3
 800f664:	3708      	adds	r7, #8
 800f666:	46bd      	mov	sp, r7
 800f668:	bd80      	pop	{r7, pc}
 800f66a:	bf00      	nop
 800f66c:	e000e010 	.word	0xe000e010

0800f670 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800f670:	b580      	push	{r7, lr}
 800f672:	b082      	sub	sp, #8
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800f678:	6878      	ldr	r0, [r7, #4]
 800f67a:	f7ff ff29 	bl	800f4d0 <__NVIC_SetPriorityGrouping>
}
 800f67e:	bf00      	nop
 800f680:	3708      	adds	r7, #8
 800f682:	46bd      	mov	sp, r7
 800f684:	bd80      	pop	{r7, pc}

0800f686 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800f686:	b580      	push	{r7, lr}
 800f688:	b086      	sub	sp, #24
 800f68a:	af00      	add	r7, sp, #0
 800f68c:	4603      	mov	r3, r0
 800f68e:	60b9      	str	r1, [r7, #8]
 800f690:	607a      	str	r2, [r7, #4]
 800f692:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800f694:	2300      	movs	r3, #0
 800f696:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800f698:	f7ff ff3e 	bl	800f518 <__NVIC_GetPriorityGrouping>
 800f69c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800f69e:	687a      	ldr	r2, [r7, #4]
 800f6a0:	68b9      	ldr	r1, [r7, #8]
 800f6a2:	6978      	ldr	r0, [r7, #20]
 800f6a4:	f7ff ff8e 	bl	800f5c4 <NVIC_EncodePriority>
 800f6a8:	4602      	mov	r2, r0
 800f6aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f6ae:	4611      	mov	r1, r2
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	f7ff ff5d 	bl	800f570 <__NVIC_SetPriority>
}
 800f6b6:	bf00      	nop
 800f6b8:	3718      	adds	r7, #24
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	bd80      	pop	{r7, pc}

0800f6be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f6be:	b580      	push	{r7, lr}
 800f6c0:	b082      	sub	sp, #8
 800f6c2:	af00      	add	r7, sp, #0
 800f6c4:	4603      	mov	r3, r0
 800f6c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800f6c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	f7ff ff31 	bl	800f534 <__NVIC_EnableIRQ>
}
 800f6d2:	bf00      	nop
 800f6d4:	3708      	adds	r7, #8
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	bd80      	pop	{r7, pc}

0800f6da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800f6da:	b580      	push	{r7, lr}
 800f6dc:	b082      	sub	sp, #8
 800f6de:	af00      	add	r7, sp, #0
 800f6e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800f6e2:	6878      	ldr	r0, [r7, #4]
 800f6e4:	f7ff ffa2 	bl	800f62c <SysTick_Config>
 800f6e8:	4603      	mov	r3, r0
}
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	3708      	adds	r7, #8
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	bd80      	pop	{r7, pc}
	...

0800f6f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	b086      	sub	sp, #24
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800f700:	f7ff feda 	bl	800f4b8 <HAL_GetTick>
 800f704:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d101      	bne.n	800f710 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800f70c:	2301      	movs	r3, #1
 800f70e:	e099      	b.n	800f844 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	2202      	movs	r2, #2
 800f714:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	2200      	movs	r2, #0
 800f71c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	681a      	ldr	r2, [r3, #0]
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	f022 0201 	bic.w	r2, r2, #1
 800f72e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f730:	e00f      	b.n	800f752 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800f732:	f7ff fec1 	bl	800f4b8 <HAL_GetTick>
 800f736:	4602      	mov	r2, r0
 800f738:	693b      	ldr	r3, [r7, #16]
 800f73a:	1ad3      	subs	r3, r2, r3
 800f73c:	2b05      	cmp	r3, #5
 800f73e:	d908      	bls.n	800f752 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	2220      	movs	r2, #32
 800f744:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	2203      	movs	r2, #3
 800f74a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800f74e:	2303      	movs	r3, #3
 800f750:	e078      	b.n	800f844 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	f003 0301 	and.w	r3, r3, #1
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d1e8      	bne.n	800f732 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800f768:	697a      	ldr	r2, [r7, #20]
 800f76a:	4b38      	ldr	r3, [pc, #224]	; (800f84c <HAL_DMA_Init+0x158>)
 800f76c:	4013      	ands	r3, r2
 800f76e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	685a      	ldr	r2, [r3, #4]
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	689b      	ldr	r3, [r3, #8]
 800f778:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f77e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	691b      	ldr	r3, [r3, #16]
 800f784:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f78a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	699b      	ldr	r3, [r3, #24]
 800f790:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f796:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	6a1b      	ldr	r3, [r3, #32]
 800f79c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f79e:	697a      	ldr	r2, [r7, #20]
 800f7a0:	4313      	orrs	r3, r2
 800f7a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7a8:	2b04      	cmp	r3, #4
 800f7aa:	d107      	bne.n	800f7bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7b4:	4313      	orrs	r3, r2
 800f7b6:	697a      	ldr	r2, [r7, #20]
 800f7b8:	4313      	orrs	r3, r2
 800f7ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	697a      	ldr	r2, [r7, #20]
 800f7c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	695b      	ldr	r3, [r3, #20]
 800f7ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800f7cc:	697b      	ldr	r3, [r7, #20]
 800f7ce:	f023 0307 	bic.w	r3, r3, #7
 800f7d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7d8:	697a      	ldr	r2, [r7, #20]
 800f7da:	4313      	orrs	r3, r2
 800f7dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7e2:	2b04      	cmp	r3, #4
 800f7e4:	d117      	bne.n	800f816 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7ea:	697a      	ldr	r2, [r7, #20]
 800f7ec:	4313      	orrs	r3, r2
 800f7ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d00e      	beq.n	800f816 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800f7f8:	6878      	ldr	r0, [r7, #4]
 800f7fa:	f000 fb09 	bl	800fe10 <DMA_CheckFifoParam>
 800f7fe:	4603      	mov	r3, r0
 800f800:	2b00      	cmp	r3, #0
 800f802:	d008      	beq.n	800f816 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	2240      	movs	r2, #64	; 0x40
 800f808:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	2201      	movs	r2, #1
 800f80e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800f812:	2301      	movs	r3, #1
 800f814:	e016      	b.n	800f844 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	697a      	ldr	r2, [r7, #20]
 800f81c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800f81e:	6878      	ldr	r0, [r7, #4]
 800f820:	f000 fac0 	bl	800fda4 <DMA_CalcBaseAndBitshift>
 800f824:	4603      	mov	r3, r0
 800f826:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f82c:	223f      	movs	r2, #63	; 0x3f
 800f82e:	409a      	lsls	r2, r3
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	2200      	movs	r2, #0
 800f838:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	2201      	movs	r2, #1
 800f83e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800f842:	2300      	movs	r3, #0
}
 800f844:	4618      	mov	r0, r3
 800f846:	3718      	adds	r7, #24
 800f848:	46bd      	mov	sp, r7
 800f84a:	bd80      	pop	{r7, pc}
 800f84c:	e010803f 	.word	0xe010803f

0800f850 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f850:	b580      	push	{r7, lr}
 800f852:	b086      	sub	sp, #24
 800f854:	af00      	add	r7, sp, #0
 800f856:	60f8      	str	r0, [r7, #12]
 800f858:	60b9      	str	r1, [r7, #8]
 800f85a:	607a      	str	r2, [r7, #4]
 800f85c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f85e:	2300      	movs	r3, #0
 800f860:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f866:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f86e:	2b01      	cmp	r3, #1
 800f870:	d101      	bne.n	800f876 <HAL_DMA_Start_IT+0x26>
 800f872:	2302      	movs	r3, #2
 800f874:	e048      	b.n	800f908 <HAL_DMA_Start_IT+0xb8>
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	2201      	movs	r2, #1
 800f87a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f884:	b2db      	uxtb	r3, r3
 800f886:	2b01      	cmp	r3, #1
 800f888:	d137      	bne.n	800f8fa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	2202      	movs	r2, #2
 800f88e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	2200      	movs	r2, #0
 800f896:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800f898:	683b      	ldr	r3, [r7, #0]
 800f89a:	687a      	ldr	r2, [r7, #4]
 800f89c:	68b9      	ldr	r1, [r7, #8]
 800f89e:	68f8      	ldr	r0, [r7, #12]
 800f8a0:	f000 fa52 	bl	800fd48 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f8a8:	223f      	movs	r2, #63	; 0x3f
 800f8aa:	409a      	lsls	r2, r3
 800f8ac:	693b      	ldr	r3, [r7, #16]
 800f8ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	681a      	ldr	r2, [r3, #0]
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	f042 0216 	orr.w	r2, r2, #22
 800f8be:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	695a      	ldr	r2, [r3, #20]
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f8ce:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d007      	beq.n	800f8e8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	681a      	ldr	r2, [r3, #0]
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	f042 0208 	orr.w	r2, r2, #8
 800f8e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	681a      	ldr	r2, [r3, #0]
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	f042 0201 	orr.w	r2, r2, #1
 800f8f6:	601a      	str	r2, [r3, #0]
 800f8f8:	e005      	b.n	800f906 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	2200      	movs	r2, #0
 800f8fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800f902:	2302      	movs	r3, #2
 800f904:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800f906:	7dfb      	ldrb	r3, [r7, #23]
}
 800f908:	4618      	mov	r0, r3
 800f90a:	3718      	adds	r7, #24
 800f90c:	46bd      	mov	sp, r7
 800f90e:	bd80      	pop	{r7, pc}

0800f910 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800f910:	b580      	push	{r7, lr}
 800f912:	b084      	sub	sp, #16
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f91c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800f91e:	f7ff fdcb 	bl	800f4b8 <HAL_GetTick>
 800f922:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f92a:	b2db      	uxtb	r3, r3
 800f92c:	2b02      	cmp	r3, #2
 800f92e:	d008      	beq.n	800f942 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	2280      	movs	r2, #128	; 0x80
 800f934:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	2200      	movs	r2, #0
 800f93a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800f93e:	2301      	movs	r3, #1
 800f940:	e052      	b.n	800f9e8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	681a      	ldr	r2, [r3, #0]
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	f022 0216 	bic.w	r2, r2, #22
 800f950:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	695a      	ldr	r2, [r3, #20]
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f960:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f966:	2b00      	cmp	r3, #0
 800f968:	d103      	bne.n	800f972 <HAL_DMA_Abort+0x62>
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d007      	beq.n	800f982 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	681a      	ldr	r2, [r3, #0]
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	f022 0208 	bic.w	r2, r2, #8
 800f980:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	681a      	ldr	r2, [r3, #0]
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	f022 0201 	bic.w	r2, r2, #1
 800f990:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f992:	e013      	b.n	800f9bc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800f994:	f7ff fd90 	bl	800f4b8 <HAL_GetTick>
 800f998:	4602      	mov	r2, r0
 800f99a:	68bb      	ldr	r3, [r7, #8]
 800f99c:	1ad3      	subs	r3, r2, r3
 800f99e:	2b05      	cmp	r3, #5
 800f9a0:	d90c      	bls.n	800f9bc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	2220      	movs	r2, #32
 800f9a6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	2203      	movs	r2, #3
 800f9ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800f9b8:	2303      	movs	r3, #3
 800f9ba:	e015      	b.n	800f9e8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	f003 0301 	and.w	r3, r3, #1
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d1e4      	bne.n	800f994 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f9ce:	223f      	movs	r2, #63	; 0x3f
 800f9d0:	409a      	lsls	r2, r3
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	2201      	movs	r2, #1
 800f9da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800f9e6:	2300      	movs	r3, #0
}
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	3710      	adds	r7, #16
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	bd80      	pop	{r7, pc}

0800f9f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800f9f0:	b480      	push	{r7}
 800f9f2:	b083      	sub	sp, #12
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f9fe:	b2db      	uxtb	r3, r3
 800fa00:	2b02      	cmp	r3, #2
 800fa02:	d004      	beq.n	800fa0e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	2280      	movs	r2, #128	; 0x80
 800fa08:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800fa0a:	2301      	movs	r3, #1
 800fa0c:	e00c      	b.n	800fa28 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	2205      	movs	r2, #5
 800fa12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	681a      	ldr	r2, [r3, #0]
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	f022 0201 	bic.w	r2, r2, #1
 800fa24:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800fa26:	2300      	movs	r3, #0
}
 800fa28:	4618      	mov	r0, r3
 800fa2a:	370c      	adds	r7, #12
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa32:	4770      	bx	lr

0800fa34 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b086      	sub	sp, #24
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800fa40:	4b92      	ldr	r3, [pc, #584]	; (800fc8c <HAL_DMA_IRQHandler+0x258>)
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	4a92      	ldr	r2, [pc, #584]	; (800fc90 <HAL_DMA_IRQHandler+0x25c>)
 800fa46:	fba2 2303 	umull	r2, r3, r2, r3
 800fa4a:	0a9b      	lsrs	r3, r3, #10
 800fa4c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa52:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800fa54:	693b      	ldr	r3, [r7, #16]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fa5e:	2208      	movs	r2, #8
 800fa60:	409a      	lsls	r2, r3
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	4013      	ands	r3, r2
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d01a      	beq.n	800faa0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	f003 0304 	and.w	r3, r3, #4
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d013      	beq.n	800faa0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	681a      	ldr	r2, [r3, #0]
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	f022 0204 	bic.w	r2, r2, #4
 800fa86:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fa8c:	2208      	movs	r2, #8
 800fa8e:	409a      	lsls	r2, r3
 800fa90:	693b      	ldr	r3, [r7, #16]
 800fa92:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa98:	f043 0201 	orr.w	r2, r3, #1
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800faa4:	2201      	movs	r2, #1
 800faa6:	409a      	lsls	r2, r3
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	4013      	ands	r3, r2
 800faac:	2b00      	cmp	r3, #0
 800faae:	d012      	beq.n	800fad6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	695b      	ldr	r3, [r3, #20]
 800fab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d00b      	beq.n	800fad6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fac2:	2201      	movs	r2, #1
 800fac4:	409a      	lsls	r2, r3
 800fac6:	693b      	ldr	r3, [r7, #16]
 800fac8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800face:	f043 0202 	orr.w	r2, r3, #2
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fada:	2204      	movs	r2, #4
 800fadc:	409a      	lsls	r2, r3
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	4013      	ands	r3, r2
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d012      	beq.n	800fb0c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	f003 0302 	and.w	r3, r3, #2
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d00b      	beq.n	800fb0c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800faf8:	2204      	movs	r2, #4
 800fafa:	409a      	lsls	r2, r3
 800fafc:	693b      	ldr	r3, [r7, #16]
 800fafe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb04:	f043 0204 	orr.w	r2, r3, #4
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fb10:	2210      	movs	r2, #16
 800fb12:	409a      	lsls	r2, r3
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	4013      	ands	r3, r2
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d043      	beq.n	800fba4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	f003 0308 	and.w	r3, r3, #8
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d03c      	beq.n	800fba4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fb2e:	2210      	movs	r2, #16
 800fb30:	409a      	lsls	r2, r3
 800fb32:	693b      	ldr	r3, [r7, #16]
 800fb34:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d018      	beq.n	800fb76 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d108      	bne.n	800fb64 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d024      	beq.n	800fba4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb5e:	6878      	ldr	r0, [r7, #4]
 800fb60:	4798      	blx	r3
 800fb62:	e01f      	b.n	800fba4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d01b      	beq.n	800fba4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fb70:	6878      	ldr	r0, [r7, #4]
 800fb72:	4798      	blx	r3
 800fb74:	e016      	b.n	800fba4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d107      	bne.n	800fb94 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	681a      	ldr	r2, [r3, #0]
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	f022 0208 	bic.w	r2, r2, #8
 800fb92:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d003      	beq.n	800fba4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fba0:	6878      	ldr	r0, [r7, #4]
 800fba2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fba8:	2220      	movs	r2, #32
 800fbaa:	409a      	lsls	r2, r3
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	4013      	ands	r3, r2
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	f000 808e 	beq.w	800fcd2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	f003 0310 	and.w	r3, r3, #16
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	f000 8086 	beq.w	800fcd2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fbca:	2220      	movs	r2, #32
 800fbcc:	409a      	lsls	r2, r3
 800fbce:	693b      	ldr	r3, [r7, #16]
 800fbd0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800fbd8:	b2db      	uxtb	r3, r3
 800fbda:	2b05      	cmp	r3, #5
 800fbdc:	d136      	bne.n	800fc4c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	681a      	ldr	r2, [r3, #0]
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	f022 0216 	bic.w	r2, r2, #22
 800fbec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	695a      	ldr	r2, [r3, #20]
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fbfc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d103      	bne.n	800fc0e <HAL_DMA_IRQHandler+0x1da>
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d007      	beq.n	800fc1e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	681a      	ldr	r2, [r3, #0]
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	f022 0208 	bic.w	r2, r2, #8
 800fc1c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fc22:	223f      	movs	r2, #63	; 0x3f
 800fc24:	409a      	lsls	r2, r3
 800fc26:	693b      	ldr	r3, [r7, #16]
 800fc28:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	2201      	movs	r2, #1
 800fc2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	2200      	movs	r2, #0
 800fc36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d07d      	beq.n	800fd3e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc46:	6878      	ldr	r0, [r7, #4]
 800fc48:	4798      	blx	r3
        }
        return;
 800fc4a:	e078      	b.n	800fd3e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d01c      	beq.n	800fc94 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d108      	bne.n	800fc7a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d030      	beq.n	800fcd2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc74:	6878      	ldr	r0, [r7, #4]
 800fc76:	4798      	blx	r3
 800fc78:	e02b      	b.n	800fcd2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d027      	beq.n	800fcd2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc86:	6878      	ldr	r0, [r7, #4]
 800fc88:	4798      	blx	r3
 800fc8a:	e022      	b.n	800fcd2 <HAL_DMA_IRQHandler+0x29e>
 800fc8c:	20000018 	.word	0x20000018
 800fc90:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d10f      	bne.n	800fcc2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	681a      	ldr	r2, [r3, #0]
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	f022 0210 	bic.w	r2, r2, #16
 800fcb0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	2201      	movs	r2, #1
 800fcb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	2200      	movs	r2, #0
 800fcbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d003      	beq.n	800fcd2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fcce:	6878      	ldr	r0, [r7, #4]
 800fcd0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d032      	beq.n	800fd40 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fcde:	f003 0301 	and.w	r3, r3, #1
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d022      	beq.n	800fd2c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	2205      	movs	r2, #5
 800fcea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	681a      	ldr	r2, [r3, #0]
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	f022 0201 	bic.w	r2, r2, #1
 800fcfc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800fcfe:	68bb      	ldr	r3, [r7, #8]
 800fd00:	3301      	adds	r3, #1
 800fd02:	60bb      	str	r3, [r7, #8]
 800fd04:	697a      	ldr	r2, [r7, #20]
 800fd06:	429a      	cmp	r2, r3
 800fd08:	d307      	bcc.n	800fd1a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	f003 0301 	and.w	r3, r3, #1
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d1f2      	bne.n	800fcfe <HAL_DMA_IRQHandler+0x2ca>
 800fd18:	e000      	b.n	800fd1c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800fd1a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	2201      	movs	r2, #1
 800fd20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	2200      	movs	r2, #0
 800fd28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d005      	beq.n	800fd40 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fd38:	6878      	ldr	r0, [r7, #4]
 800fd3a:	4798      	blx	r3
 800fd3c:	e000      	b.n	800fd40 <HAL_DMA_IRQHandler+0x30c>
        return;
 800fd3e:	bf00      	nop
    }
  }
}
 800fd40:	3718      	adds	r7, #24
 800fd42:	46bd      	mov	sp, r7
 800fd44:	bd80      	pop	{r7, pc}
 800fd46:	bf00      	nop

0800fd48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800fd48:	b480      	push	{r7}
 800fd4a:	b085      	sub	sp, #20
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	60f8      	str	r0, [r7, #12]
 800fd50:	60b9      	str	r1, [r7, #8]
 800fd52:	607a      	str	r2, [r7, #4]
 800fd54:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	681a      	ldr	r2, [r3, #0]
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800fd64:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	683a      	ldr	r2, [r7, #0]
 800fd6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	689b      	ldr	r3, [r3, #8]
 800fd72:	2b40      	cmp	r3, #64	; 0x40
 800fd74:	d108      	bne.n	800fd88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	687a      	ldr	r2, [r7, #4]
 800fd7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	68ba      	ldr	r2, [r7, #8]
 800fd84:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800fd86:	e007      	b.n	800fd98 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	68ba      	ldr	r2, [r7, #8]
 800fd8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	687a      	ldr	r2, [r7, #4]
 800fd96:	60da      	str	r2, [r3, #12]
}
 800fd98:	bf00      	nop
 800fd9a:	3714      	adds	r7, #20
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda2:	4770      	bx	lr

0800fda4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800fda4:	b480      	push	{r7}
 800fda6:	b085      	sub	sp, #20
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	b2db      	uxtb	r3, r3
 800fdb2:	3b10      	subs	r3, #16
 800fdb4:	4a13      	ldr	r2, [pc, #76]	; (800fe04 <DMA_CalcBaseAndBitshift+0x60>)
 800fdb6:	fba2 2303 	umull	r2, r3, r2, r3
 800fdba:	091b      	lsrs	r3, r3, #4
 800fdbc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800fdbe:	4a12      	ldr	r2, [pc, #72]	; (800fe08 <DMA_CalcBaseAndBitshift+0x64>)
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	4413      	add	r3, r2
 800fdc4:	781b      	ldrb	r3, [r3, #0]
 800fdc6:	461a      	mov	r2, r3
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	2b03      	cmp	r3, #3
 800fdd0:	d908      	bls.n	800fde4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	461a      	mov	r2, r3
 800fdd8:	4b0c      	ldr	r3, [pc, #48]	; (800fe0c <DMA_CalcBaseAndBitshift+0x68>)
 800fdda:	4013      	ands	r3, r2
 800fddc:	1d1a      	adds	r2, r3, #4
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	659a      	str	r2, [r3, #88]	; 0x58
 800fde2:	e006      	b.n	800fdf2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	461a      	mov	r2, r3
 800fdea:	4b08      	ldr	r3, [pc, #32]	; (800fe0c <DMA_CalcBaseAndBitshift+0x68>)
 800fdec:	4013      	ands	r3, r2
 800fdee:	687a      	ldr	r2, [r7, #4]
 800fdf0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	3714      	adds	r7, #20
 800fdfa:	46bd      	mov	sp, r7
 800fdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe00:	4770      	bx	lr
 800fe02:	bf00      	nop
 800fe04:	aaaaaaab 	.word	0xaaaaaaab
 800fe08:	080281f0 	.word	0x080281f0
 800fe0c:	fffffc00 	.word	0xfffffc00

0800fe10 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800fe10:	b480      	push	{r7}
 800fe12:	b085      	sub	sp, #20
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fe18:	2300      	movs	r3, #0
 800fe1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe20:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	699b      	ldr	r3, [r3, #24]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d11f      	bne.n	800fe6a <DMA_CheckFifoParam+0x5a>
 800fe2a:	68bb      	ldr	r3, [r7, #8]
 800fe2c:	2b03      	cmp	r3, #3
 800fe2e:	d856      	bhi.n	800fede <DMA_CheckFifoParam+0xce>
 800fe30:	a201      	add	r2, pc, #4	; (adr r2, 800fe38 <DMA_CheckFifoParam+0x28>)
 800fe32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe36:	bf00      	nop
 800fe38:	0800fe49 	.word	0x0800fe49
 800fe3c:	0800fe5b 	.word	0x0800fe5b
 800fe40:	0800fe49 	.word	0x0800fe49
 800fe44:	0800fedf 	.word	0x0800fedf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d046      	beq.n	800fee2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800fe54:	2301      	movs	r3, #1
 800fe56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fe58:	e043      	b.n	800fee2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe5e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800fe62:	d140      	bne.n	800fee6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800fe64:	2301      	movs	r3, #1
 800fe66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fe68:	e03d      	b.n	800fee6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	699b      	ldr	r3, [r3, #24]
 800fe6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fe72:	d121      	bne.n	800feb8 <DMA_CheckFifoParam+0xa8>
 800fe74:	68bb      	ldr	r3, [r7, #8]
 800fe76:	2b03      	cmp	r3, #3
 800fe78:	d837      	bhi.n	800feea <DMA_CheckFifoParam+0xda>
 800fe7a:	a201      	add	r2, pc, #4	; (adr r2, 800fe80 <DMA_CheckFifoParam+0x70>)
 800fe7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe80:	0800fe91 	.word	0x0800fe91
 800fe84:	0800fe97 	.word	0x0800fe97
 800fe88:	0800fe91 	.word	0x0800fe91
 800fe8c:	0800fea9 	.word	0x0800fea9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800fe90:	2301      	movs	r3, #1
 800fe92:	73fb      	strb	r3, [r7, #15]
      break;
 800fe94:	e030      	b.n	800fef8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d025      	beq.n	800feee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800fea2:	2301      	movs	r3, #1
 800fea4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fea6:	e022      	b.n	800feee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800feac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800feb0:	d11f      	bne.n	800fef2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800feb2:	2301      	movs	r3, #1
 800feb4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800feb6:	e01c      	b.n	800fef2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800feb8:	68bb      	ldr	r3, [r7, #8]
 800feba:	2b02      	cmp	r3, #2
 800febc:	d903      	bls.n	800fec6 <DMA_CheckFifoParam+0xb6>
 800febe:	68bb      	ldr	r3, [r7, #8]
 800fec0:	2b03      	cmp	r3, #3
 800fec2:	d003      	beq.n	800fecc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800fec4:	e018      	b.n	800fef8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800fec6:	2301      	movs	r3, #1
 800fec8:	73fb      	strb	r3, [r7, #15]
      break;
 800feca:	e015      	b.n	800fef8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fed0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d00e      	beq.n	800fef6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800fed8:	2301      	movs	r3, #1
 800feda:	73fb      	strb	r3, [r7, #15]
      break;
 800fedc:	e00b      	b.n	800fef6 <DMA_CheckFifoParam+0xe6>
      break;
 800fede:	bf00      	nop
 800fee0:	e00a      	b.n	800fef8 <DMA_CheckFifoParam+0xe8>
      break;
 800fee2:	bf00      	nop
 800fee4:	e008      	b.n	800fef8 <DMA_CheckFifoParam+0xe8>
      break;
 800fee6:	bf00      	nop
 800fee8:	e006      	b.n	800fef8 <DMA_CheckFifoParam+0xe8>
      break;
 800feea:	bf00      	nop
 800feec:	e004      	b.n	800fef8 <DMA_CheckFifoParam+0xe8>
      break;
 800feee:	bf00      	nop
 800fef0:	e002      	b.n	800fef8 <DMA_CheckFifoParam+0xe8>
      break;   
 800fef2:	bf00      	nop
 800fef4:	e000      	b.n	800fef8 <DMA_CheckFifoParam+0xe8>
      break;
 800fef6:	bf00      	nop
    }
  } 
  
  return status; 
 800fef8:	7bfb      	ldrb	r3, [r7, #15]
}
 800fefa:	4618      	mov	r0, r3
 800fefc:	3714      	adds	r7, #20
 800fefe:	46bd      	mov	sp, r7
 800ff00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff04:	4770      	bx	lr
 800ff06:	bf00      	nop

0800ff08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ff08:	b480      	push	{r7}
 800ff0a:	b089      	sub	sp, #36	; 0x24
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
 800ff10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800ff12:	2300      	movs	r3, #0
 800ff14:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800ff16:	2300      	movs	r3, #0
 800ff18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800ff1e:	2300      	movs	r3, #0
 800ff20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800ff22:	2300      	movs	r3, #0
 800ff24:	61fb      	str	r3, [r7, #28]
 800ff26:	e175      	b.n	8010214 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800ff28:	2201      	movs	r2, #1
 800ff2a:	69fb      	ldr	r3, [r7, #28]
 800ff2c:	fa02 f303 	lsl.w	r3, r2, r3
 800ff30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800ff32:	683b      	ldr	r3, [r7, #0]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	697a      	ldr	r2, [r7, #20]
 800ff38:	4013      	ands	r3, r2
 800ff3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800ff3c:	693a      	ldr	r2, [r7, #16]
 800ff3e:	697b      	ldr	r3, [r7, #20]
 800ff40:	429a      	cmp	r2, r3
 800ff42:	f040 8164 	bne.w	801020e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ff46:	683b      	ldr	r3, [r7, #0]
 800ff48:	685b      	ldr	r3, [r3, #4]
 800ff4a:	f003 0303 	and.w	r3, r3, #3
 800ff4e:	2b01      	cmp	r3, #1
 800ff50:	d005      	beq.n	800ff5e <HAL_GPIO_Init+0x56>
 800ff52:	683b      	ldr	r3, [r7, #0]
 800ff54:	685b      	ldr	r3, [r3, #4]
 800ff56:	f003 0303 	and.w	r3, r3, #3
 800ff5a:	2b02      	cmp	r3, #2
 800ff5c:	d130      	bne.n	800ffc0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	689b      	ldr	r3, [r3, #8]
 800ff62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800ff64:	69fb      	ldr	r3, [r7, #28]
 800ff66:	005b      	lsls	r3, r3, #1
 800ff68:	2203      	movs	r2, #3
 800ff6a:	fa02 f303 	lsl.w	r3, r2, r3
 800ff6e:	43db      	mvns	r3, r3
 800ff70:	69ba      	ldr	r2, [r7, #24]
 800ff72:	4013      	ands	r3, r2
 800ff74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800ff76:	683b      	ldr	r3, [r7, #0]
 800ff78:	68da      	ldr	r2, [r3, #12]
 800ff7a:	69fb      	ldr	r3, [r7, #28]
 800ff7c:	005b      	lsls	r3, r3, #1
 800ff7e:	fa02 f303 	lsl.w	r3, r2, r3
 800ff82:	69ba      	ldr	r2, [r7, #24]
 800ff84:	4313      	orrs	r3, r2
 800ff86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	69ba      	ldr	r2, [r7, #24]
 800ff8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	685b      	ldr	r3, [r3, #4]
 800ff92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ff94:	2201      	movs	r2, #1
 800ff96:	69fb      	ldr	r3, [r7, #28]
 800ff98:	fa02 f303 	lsl.w	r3, r2, r3
 800ff9c:	43db      	mvns	r3, r3
 800ff9e:	69ba      	ldr	r2, [r7, #24]
 800ffa0:	4013      	ands	r3, r2
 800ffa2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ffa4:	683b      	ldr	r3, [r7, #0]
 800ffa6:	685b      	ldr	r3, [r3, #4]
 800ffa8:	091b      	lsrs	r3, r3, #4
 800ffaa:	f003 0201 	and.w	r2, r3, #1
 800ffae:	69fb      	ldr	r3, [r7, #28]
 800ffb0:	fa02 f303 	lsl.w	r3, r2, r3
 800ffb4:	69ba      	ldr	r2, [r7, #24]
 800ffb6:	4313      	orrs	r3, r2
 800ffb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	69ba      	ldr	r2, [r7, #24]
 800ffbe:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ffc0:	683b      	ldr	r3, [r7, #0]
 800ffc2:	685b      	ldr	r3, [r3, #4]
 800ffc4:	f003 0303 	and.w	r3, r3, #3
 800ffc8:	2b03      	cmp	r3, #3
 800ffca:	d017      	beq.n	800fffc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	68db      	ldr	r3, [r3, #12]
 800ffd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800ffd2:	69fb      	ldr	r3, [r7, #28]
 800ffd4:	005b      	lsls	r3, r3, #1
 800ffd6:	2203      	movs	r2, #3
 800ffd8:	fa02 f303 	lsl.w	r3, r2, r3
 800ffdc:	43db      	mvns	r3, r3
 800ffde:	69ba      	ldr	r2, [r7, #24]
 800ffe0:	4013      	ands	r3, r2
 800ffe2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800ffe4:	683b      	ldr	r3, [r7, #0]
 800ffe6:	689a      	ldr	r2, [r3, #8]
 800ffe8:	69fb      	ldr	r3, [r7, #28]
 800ffea:	005b      	lsls	r3, r3, #1
 800ffec:	fa02 f303 	lsl.w	r3, r2, r3
 800fff0:	69ba      	ldr	r2, [r7, #24]
 800fff2:	4313      	orrs	r3, r2
 800fff4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	69ba      	ldr	r2, [r7, #24]
 800fffa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800fffc:	683b      	ldr	r3, [r7, #0]
 800fffe:	685b      	ldr	r3, [r3, #4]
 8010000:	f003 0303 	and.w	r3, r3, #3
 8010004:	2b02      	cmp	r3, #2
 8010006:	d123      	bne.n	8010050 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8010008:	69fb      	ldr	r3, [r7, #28]
 801000a:	08da      	lsrs	r2, r3, #3
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	3208      	adds	r2, #8
 8010010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010014:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8010016:	69fb      	ldr	r3, [r7, #28]
 8010018:	f003 0307 	and.w	r3, r3, #7
 801001c:	009b      	lsls	r3, r3, #2
 801001e:	220f      	movs	r2, #15
 8010020:	fa02 f303 	lsl.w	r3, r2, r3
 8010024:	43db      	mvns	r3, r3
 8010026:	69ba      	ldr	r2, [r7, #24]
 8010028:	4013      	ands	r3, r2
 801002a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 801002c:	683b      	ldr	r3, [r7, #0]
 801002e:	691a      	ldr	r2, [r3, #16]
 8010030:	69fb      	ldr	r3, [r7, #28]
 8010032:	f003 0307 	and.w	r3, r3, #7
 8010036:	009b      	lsls	r3, r3, #2
 8010038:	fa02 f303 	lsl.w	r3, r2, r3
 801003c:	69ba      	ldr	r2, [r7, #24]
 801003e:	4313      	orrs	r3, r2
 8010040:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8010042:	69fb      	ldr	r3, [r7, #28]
 8010044:	08da      	lsrs	r2, r3, #3
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	3208      	adds	r2, #8
 801004a:	69b9      	ldr	r1, [r7, #24]
 801004c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8010056:	69fb      	ldr	r3, [r7, #28]
 8010058:	005b      	lsls	r3, r3, #1
 801005a:	2203      	movs	r2, #3
 801005c:	fa02 f303 	lsl.w	r3, r2, r3
 8010060:	43db      	mvns	r3, r3
 8010062:	69ba      	ldr	r2, [r7, #24]
 8010064:	4013      	ands	r3, r2
 8010066:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8010068:	683b      	ldr	r3, [r7, #0]
 801006a:	685b      	ldr	r3, [r3, #4]
 801006c:	f003 0203 	and.w	r2, r3, #3
 8010070:	69fb      	ldr	r3, [r7, #28]
 8010072:	005b      	lsls	r3, r3, #1
 8010074:	fa02 f303 	lsl.w	r3, r2, r3
 8010078:	69ba      	ldr	r2, [r7, #24]
 801007a:	4313      	orrs	r3, r2
 801007c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	69ba      	ldr	r2, [r7, #24]
 8010082:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8010084:	683b      	ldr	r3, [r7, #0]
 8010086:	685b      	ldr	r3, [r3, #4]
 8010088:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801008c:	2b00      	cmp	r3, #0
 801008e:	f000 80be 	beq.w	801020e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010092:	4b66      	ldr	r3, [pc, #408]	; (801022c <HAL_GPIO_Init+0x324>)
 8010094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010096:	4a65      	ldr	r2, [pc, #404]	; (801022c <HAL_GPIO_Init+0x324>)
 8010098:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801009c:	6453      	str	r3, [r2, #68]	; 0x44
 801009e:	4b63      	ldr	r3, [pc, #396]	; (801022c <HAL_GPIO_Init+0x324>)
 80100a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80100a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80100a6:	60fb      	str	r3, [r7, #12]
 80100a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80100aa:	4a61      	ldr	r2, [pc, #388]	; (8010230 <HAL_GPIO_Init+0x328>)
 80100ac:	69fb      	ldr	r3, [r7, #28]
 80100ae:	089b      	lsrs	r3, r3, #2
 80100b0:	3302      	adds	r3, #2
 80100b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80100b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80100b8:	69fb      	ldr	r3, [r7, #28]
 80100ba:	f003 0303 	and.w	r3, r3, #3
 80100be:	009b      	lsls	r3, r3, #2
 80100c0:	220f      	movs	r2, #15
 80100c2:	fa02 f303 	lsl.w	r3, r2, r3
 80100c6:	43db      	mvns	r3, r3
 80100c8:	69ba      	ldr	r2, [r7, #24]
 80100ca:	4013      	ands	r3, r2
 80100cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	4a58      	ldr	r2, [pc, #352]	; (8010234 <HAL_GPIO_Init+0x32c>)
 80100d2:	4293      	cmp	r3, r2
 80100d4:	d037      	beq.n	8010146 <HAL_GPIO_Init+0x23e>
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	4a57      	ldr	r2, [pc, #348]	; (8010238 <HAL_GPIO_Init+0x330>)
 80100da:	4293      	cmp	r3, r2
 80100dc:	d031      	beq.n	8010142 <HAL_GPIO_Init+0x23a>
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	4a56      	ldr	r2, [pc, #344]	; (801023c <HAL_GPIO_Init+0x334>)
 80100e2:	4293      	cmp	r3, r2
 80100e4:	d02b      	beq.n	801013e <HAL_GPIO_Init+0x236>
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	4a55      	ldr	r2, [pc, #340]	; (8010240 <HAL_GPIO_Init+0x338>)
 80100ea:	4293      	cmp	r3, r2
 80100ec:	d025      	beq.n	801013a <HAL_GPIO_Init+0x232>
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	4a54      	ldr	r2, [pc, #336]	; (8010244 <HAL_GPIO_Init+0x33c>)
 80100f2:	4293      	cmp	r3, r2
 80100f4:	d01f      	beq.n	8010136 <HAL_GPIO_Init+0x22e>
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	4a53      	ldr	r2, [pc, #332]	; (8010248 <HAL_GPIO_Init+0x340>)
 80100fa:	4293      	cmp	r3, r2
 80100fc:	d019      	beq.n	8010132 <HAL_GPIO_Init+0x22a>
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	4a52      	ldr	r2, [pc, #328]	; (801024c <HAL_GPIO_Init+0x344>)
 8010102:	4293      	cmp	r3, r2
 8010104:	d013      	beq.n	801012e <HAL_GPIO_Init+0x226>
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	4a51      	ldr	r2, [pc, #324]	; (8010250 <HAL_GPIO_Init+0x348>)
 801010a:	4293      	cmp	r3, r2
 801010c:	d00d      	beq.n	801012a <HAL_GPIO_Init+0x222>
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	4a50      	ldr	r2, [pc, #320]	; (8010254 <HAL_GPIO_Init+0x34c>)
 8010112:	4293      	cmp	r3, r2
 8010114:	d007      	beq.n	8010126 <HAL_GPIO_Init+0x21e>
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	4a4f      	ldr	r2, [pc, #316]	; (8010258 <HAL_GPIO_Init+0x350>)
 801011a:	4293      	cmp	r3, r2
 801011c:	d101      	bne.n	8010122 <HAL_GPIO_Init+0x21a>
 801011e:	2309      	movs	r3, #9
 8010120:	e012      	b.n	8010148 <HAL_GPIO_Init+0x240>
 8010122:	230a      	movs	r3, #10
 8010124:	e010      	b.n	8010148 <HAL_GPIO_Init+0x240>
 8010126:	2308      	movs	r3, #8
 8010128:	e00e      	b.n	8010148 <HAL_GPIO_Init+0x240>
 801012a:	2307      	movs	r3, #7
 801012c:	e00c      	b.n	8010148 <HAL_GPIO_Init+0x240>
 801012e:	2306      	movs	r3, #6
 8010130:	e00a      	b.n	8010148 <HAL_GPIO_Init+0x240>
 8010132:	2305      	movs	r3, #5
 8010134:	e008      	b.n	8010148 <HAL_GPIO_Init+0x240>
 8010136:	2304      	movs	r3, #4
 8010138:	e006      	b.n	8010148 <HAL_GPIO_Init+0x240>
 801013a:	2303      	movs	r3, #3
 801013c:	e004      	b.n	8010148 <HAL_GPIO_Init+0x240>
 801013e:	2302      	movs	r3, #2
 8010140:	e002      	b.n	8010148 <HAL_GPIO_Init+0x240>
 8010142:	2301      	movs	r3, #1
 8010144:	e000      	b.n	8010148 <HAL_GPIO_Init+0x240>
 8010146:	2300      	movs	r3, #0
 8010148:	69fa      	ldr	r2, [r7, #28]
 801014a:	f002 0203 	and.w	r2, r2, #3
 801014e:	0092      	lsls	r2, r2, #2
 8010150:	4093      	lsls	r3, r2
 8010152:	69ba      	ldr	r2, [r7, #24]
 8010154:	4313      	orrs	r3, r2
 8010156:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8010158:	4935      	ldr	r1, [pc, #212]	; (8010230 <HAL_GPIO_Init+0x328>)
 801015a:	69fb      	ldr	r3, [r7, #28]
 801015c:	089b      	lsrs	r3, r3, #2
 801015e:	3302      	adds	r3, #2
 8010160:	69ba      	ldr	r2, [r7, #24]
 8010162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8010166:	4b3d      	ldr	r3, [pc, #244]	; (801025c <HAL_GPIO_Init+0x354>)
 8010168:	689b      	ldr	r3, [r3, #8]
 801016a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801016c:	693b      	ldr	r3, [r7, #16]
 801016e:	43db      	mvns	r3, r3
 8010170:	69ba      	ldr	r2, [r7, #24]
 8010172:	4013      	ands	r3, r2
 8010174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8010176:	683b      	ldr	r3, [r7, #0]
 8010178:	685b      	ldr	r3, [r3, #4]
 801017a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801017e:	2b00      	cmp	r3, #0
 8010180:	d003      	beq.n	801018a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8010182:	69ba      	ldr	r2, [r7, #24]
 8010184:	693b      	ldr	r3, [r7, #16]
 8010186:	4313      	orrs	r3, r2
 8010188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801018a:	4a34      	ldr	r2, [pc, #208]	; (801025c <HAL_GPIO_Init+0x354>)
 801018c:	69bb      	ldr	r3, [r7, #24]
 801018e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8010190:	4b32      	ldr	r3, [pc, #200]	; (801025c <HAL_GPIO_Init+0x354>)
 8010192:	68db      	ldr	r3, [r3, #12]
 8010194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010196:	693b      	ldr	r3, [r7, #16]
 8010198:	43db      	mvns	r3, r3
 801019a:	69ba      	ldr	r2, [r7, #24]
 801019c:	4013      	ands	r3, r2
 801019e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80101a0:	683b      	ldr	r3, [r7, #0]
 80101a2:	685b      	ldr	r3, [r3, #4]
 80101a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d003      	beq.n	80101b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80101ac:	69ba      	ldr	r2, [r7, #24]
 80101ae:	693b      	ldr	r3, [r7, #16]
 80101b0:	4313      	orrs	r3, r2
 80101b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80101b4:	4a29      	ldr	r2, [pc, #164]	; (801025c <HAL_GPIO_Init+0x354>)
 80101b6:	69bb      	ldr	r3, [r7, #24]
 80101b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80101ba:	4b28      	ldr	r3, [pc, #160]	; (801025c <HAL_GPIO_Init+0x354>)
 80101bc:	685b      	ldr	r3, [r3, #4]
 80101be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80101c0:	693b      	ldr	r3, [r7, #16]
 80101c2:	43db      	mvns	r3, r3
 80101c4:	69ba      	ldr	r2, [r7, #24]
 80101c6:	4013      	ands	r3, r2
 80101c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80101ca:	683b      	ldr	r3, [r7, #0]
 80101cc:	685b      	ldr	r3, [r3, #4]
 80101ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d003      	beq.n	80101de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80101d6:	69ba      	ldr	r2, [r7, #24]
 80101d8:	693b      	ldr	r3, [r7, #16]
 80101da:	4313      	orrs	r3, r2
 80101dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80101de:	4a1f      	ldr	r2, [pc, #124]	; (801025c <HAL_GPIO_Init+0x354>)
 80101e0:	69bb      	ldr	r3, [r7, #24]
 80101e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80101e4:	4b1d      	ldr	r3, [pc, #116]	; (801025c <HAL_GPIO_Init+0x354>)
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80101ea:	693b      	ldr	r3, [r7, #16]
 80101ec:	43db      	mvns	r3, r3
 80101ee:	69ba      	ldr	r2, [r7, #24]
 80101f0:	4013      	ands	r3, r2
 80101f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80101f4:	683b      	ldr	r3, [r7, #0]
 80101f6:	685b      	ldr	r3, [r3, #4]
 80101f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d003      	beq.n	8010208 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8010200:	69ba      	ldr	r2, [r7, #24]
 8010202:	693b      	ldr	r3, [r7, #16]
 8010204:	4313      	orrs	r3, r2
 8010206:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8010208:	4a14      	ldr	r2, [pc, #80]	; (801025c <HAL_GPIO_Init+0x354>)
 801020a:	69bb      	ldr	r3, [r7, #24]
 801020c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 801020e:	69fb      	ldr	r3, [r7, #28]
 8010210:	3301      	adds	r3, #1
 8010212:	61fb      	str	r3, [r7, #28]
 8010214:	69fb      	ldr	r3, [r7, #28]
 8010216:	2b0f      	cmp	r3, #15
 8010218:	f67f ae86 	bls.w	800ff28 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 801021c:	bf00      	nop
 801021e:	bf00      	nop
 8010220:	3724      	adds	r7, #36	; 0x24
 8010222:	46bd      	mov	sp, r7
 8010224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010228:	4770      	bx	lr
 801022a:	bf00      	nop
 801022c:	40023800 	.word	0x40023800
 8010230:	40013800 	.word	0x40013800
 8010234:	40020000 	.word	0x40020000
 8010238:	40020400 	.word	0x40020400
 801023c:	40020800 	.word	0x40020800
 8010240:	40020c00 	.word	0x40020c00
 8010244:	40021000 	.word	0x40021000
 8010248:	40021400 	.word	0x40021400
 801024c:	40021800 	.word	0x40021800
 8010250:	40021c00 	.word	0x40021c00
 8010254:	40022000 	.word	0x40022000
 8010258:	40022400 	.word	0x40022400
 801025c:	40013c00 	.word	0x40013c00

08010260 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8010260:	b480      	push	{r7}
 8010262:	b085      	sub	sp, #20
 8010264:	af00      	add	r7, sp, #0
 8010266:	6078      	str	r0, [r7, #4]
 8010268:	460b      	mov	r3, r1
 801026a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	691a      	ldr	r2, [r3, #16]
 8010270:	887b      	ldrh	r3, [r7, #2]
 8010272:	4013      	ands	r3, r2
 8010274:	2b00      	cmp	r3, #0
 8010276:	d002      	beq.n	801027e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8010278:	2301      	movs	r3, #1
 801027a:	73fb      	strb	r3, [r7, #15]
 801027c:	e001      	b.n	8010282 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801027e:	2300      	movs	r3, #0
 8010280:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8010282:	7bfb      	ldrb	r3, [r7, #15]
}
 8010284:	4618      	mov	r0, r3
 8010286:	3714      	adds	r7, #20
 8010288:	46bd      	mov	sp, r7
 801028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028e:	4770      	bx	lr

08010290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8010290:	b480      	push	{r7}
 8010292:	b083      	sub	sp, #12
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]
 8010298:	460b      	mov	r3, r1
 801029a:	807b      	strh	r3, [r7, #2]
 801029c:	4613      	mov	r3, r2
 801029e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80102a0:	787b      	ldrb	r3, [r7, #1]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d003      	beq.n	80102ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80102a6:	887a      	ldrh	r2, [r7, #2]
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80102ac:	e003      	b.n	80102b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80102ae:	887b      	ldrh	r3, [r7, #2]
 80102b0:	041a      	lsls	r2, r3, #16
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	619a      	str	r2, [r3, #24]
}
 80102b6:	bf00      	nop
 80102b8:	370c      	adds	r7, #12
 80102ba:	46bd      	mov	sp, r7
 80102bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c0:	4770      	bx	lr

080102c2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80102c2:	b480      	push	{r7}
 80102c4:	b085      	sub	sp, #20
 80102c6:	af00      	add	r7, sp, #0
 80102c8:	6078      	str	r0, [r7, #4]
 80102ca:	460b      	mov	r3, r1
 80102cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	695b      	ldr	r3, [r3, #20]
 80102d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80102d4:	887a      	ldrh	r2, [r7, #2]
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	4013      	ands	r3, r2
 80102da:	041a      	lsls	r2, r3, #16
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	43d9      	mvns	r1, r3
 80102e0:	887b      	ldrh	r3, [r7, #2]
 80102e2:	400b      	ands	r3, r1
 80102e4:	431a      	orrs	r2, r3
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	619a      	str	r2, [r3, #24]
}
 80102ea:	bf00      	nop
 80102ec:	3714      	adds	r7, #20
 80102ee:	46bd      	mov	sp, r7
 80102f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f4:	4770      	bx	lr
	...

080102f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b082      	sub	sp, #8
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	4603      	mov	r3, r0
 8010300:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8010302:	4b08      	ldr	r3, [pc, #32]	; (8010324 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8010304:	695a      	ldr	r2, [r3, #20]
 8010306:	88fb      	ldrh	r3, [r7, #6]
 8010308:	4013      	ands	r3, r2
 801030a:	2b00      	cmp	r3, #0
 801030c:	d006      	beq.n	801031c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801030e:	4a05      	ldr	r2, [pc, #20]	; (8010324 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8010310:	88fb      	ldrh	r3, [r7, #6]
 8010312:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8010314:	88fb      	ldrh	r3, [r7, #6]
 8010316:	4618      	mov	r0, r3
 8010318:	f7fc fcce 	bl	800ccb8 <HAL_GPIO_EXTI_Callback>
  }
}
 801031c:	bf00      	nop
 801031e:	3708      	adds	r7, #8
 8010320:	46bd      	mov	sp, r7
 8010322:	bd80      	pop	{r7, pc}
 8010324:	40013c00 	.word	0x40013c00

08010328 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8010328:	b580      	push	{r7, lr}
 801032a:	b082      	sub	sp, #8
 801032c:	af00      	add	r7, sp, #0
 801032e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d101      	bne.n	801033a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8010336:	2301      	movs	r3, #1
 8010338:	e07f      	b.n	801043a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010340:	b2db      	uxtb	r3, r3
 8010342:	2b00      	cmp	r3, #0
 8010344:	d106      	bne.n	8010354 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	2200      	movs	r2, #0
 801034a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 801034e:	6878      	ldr	r0, [r7, #4]
 8010350:	f7fe fda6 	bl	800eea0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	2224      	movs	r2, #36	; 0x24
 8010358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	681a      	ldr	r2, [r3, #0]
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	f022 0201 	bic.w	r2, r2, #1
 801036a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	685a      	ldr	r2, [r3, #4]
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8010378:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	689a      	ldr	r2, [r3, #8]
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8010388:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	68db      	ldr	r3, [r3, #12]
 801038e:	2b01      	cmp	r3, #1
 8010390:	d107      	bne.n	80103a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	689a      	ldr	r2, [r3, #8]
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801039e:	609a      	str	r2, [r3, #8]
 80103a0:	e006      	b.n	80103b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	689a      	ldr	r2, [r3, #8]
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80103ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	68db      	ldr	r3, [r3, #12]
 80103b4:	2b02      	cmp	r3, #2
 80103b6:	d104      	bne.n	80103c2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80103c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	6859      	ldr	r1, [r3, #4]
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	681a      	ldr	r2, [r3, #0]
 80103cc:	4b1d      	ldr	r3, [pc, #116]	; (8010444 <HAL_I2C_Init+0x11c>)
 80103ce:	430b      	orrs	r3, r1
 80103d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	68da      	ldr	r2, [r3, #12]
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80103e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	691a      	ldr	r2, [r3, #16]
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	695b      	ldr	r3, [r3, #20]
 80103ea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	699b      	ldr	r3, [r3, #24]
 80103f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	430a      	orrs	r2, r1
 80103fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	69d9      	ldr	r1, [r3, #28]
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	6a1a      	ldr	r2, [r3, #32]
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	430a      	orrs	r2, r1
 801040a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	681a      	ldr	r2, [r3, #0]
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	f042 0201 	orr.w	r2, r2, #1
 801041a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	2200      	movs	r2, #0
 8010420:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	2220      	movs	r2, #32
 8010426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	2200      	movs	r2, #0
 801042e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	2200      	movs	r2, #0
 8010434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8010438:	2300      	movs	r3, #0
}
 801043a:	4618      	mov	r0, r3
 801043c:	3708      	adds	r7, #8
 801043e:	46bd      	mov	sp, r7
 8010440:	bd80      	pop	{r7, pc}
 8010442:	bf00      	nop
 8010444:	02008000 	.word	0x02008000

08010448 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b088      	sub	sp, #32
 801044c:	af02      	add	r7, sp, #8
 801044e:	60f8      	str	r0, [r7, #12]
 8010450:	4608      	mov	r0, r1
 8010452:	4611      	mov	r1, r2
 8010454:	461a      	mov	r2, r3
 8010456:	4603      	mov	r3, r0
 8010458:	817b      	strh	r3, [r7, #10]
 801045a:	460b      	mov	r3, r1
 801045c:	813b      	strh	r3, [r7, #8]
 801045e:	4613      	mov	r3, r2
 8010460:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010468:	b2db      	uxtb	r3, r3
 801046a:	2b20      	cmp	r3, #32
 801046c:	f040 80fd 	bne.w	801066a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8010470:	6a3b      	ldr	r3, [r7, #32]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d002      	beq.n	801047c <HAL_I2C_Mem_Read+0x34>
 8010476:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010478:	2b00      	cmp	r3, #0
 801047a:	d105      	bne.n	8010488 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010482:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8010484:	2301      	movs	r3, #1
 8010486:	e0f1      	b.n	801066c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801048e:	2b01      	cmp	r3, #1
 8010490:	d101      	bne.n	8010496 <HAL_I2C_Mem_Read+0x4e>
 8010492:	2302      	movs	r3, #2
 8010494:	e0ea      	b.n	801066c <HAL_I2C_Mem_Read+0x224>
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	2201      	movs	r2, #1
 801049a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801049e:	f7ff f80b 	bl	800f4b8 <HAL_GetTick>
 80104a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80104a4:	697b      	ldr	r3, [r7, #20]
 80104a6:	9300      	str	r3, [sp, #0]
 80104a8:	2319      	movs	r3, #25
 80104aa:	2201      	movs	r2, #1
 80104ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80104b0:	68f8      	ldr	r0, [r7, #12]
 80104b2:	f000 f95b 	bl	801076c <I2C_WaitOnFlagUntilTimeout>
 80104b6:	4603      	mov	r3, r0
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d001      	beq.n	80104c0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80104bc:	2301      	movs	r3, #1
 80104be:	e0d5      	b.n	801066c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	2222      	movs	r2, #34	; 0x22
 80104c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	2240      	movs	r2, #64	; 0x40
 80104cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	2200      	movs	r2, #0
 80104d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	6a3a      	ldr	r2, [r7, #32]
 80104da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80104e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	2200      	movs	r2, #0
 80104e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80104e8:	88f8      	ldrh	r0, [r7, #6]
 80104ea:	893a      	ldrh	r2, [r7, #8]
 80104ec:	8979      	ldrh	r1, [r7, #10]
 80104ee:	697b      	ldr	r3, [r7, #20]
 80104f0:	9301      	str	r3, [sp, #4]
 80104f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104f4:	9300      	str	r3, [sp, #0]
 80104f6:	4603      	mov	r3, r0
 80104f8:	68f8      	ldr	r0, [r7, #12]
 80104fa:	f000 f8bf 	bl	801067c <I2C_RequestMemoryRead>
 80104fe:	4603      	mov	r3, r0
 8010500:	2b00      	cmp	r3, #0
 8010502:	d005      	beq.n	8010510 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	2200      	movs	r2, #0
 8010508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 801050c:	2301      	movs	r3, #1
 801050e:	e0ad      	b.n	801066c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010514:	b29b      	uxth	r3, r3
 8010516:	2bff      	cmp	r3, #255	; 0xff
 8010518:	d90e      	bls.n	8010538 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	22ff      	movs	r2, #255	; 0xff
 801051e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010524:	b2da      	uxtb	r2, r3
 8010526:	8979      	ldrh	r1, [r7, #10]
 8010528:	4b52      	ldr	r3, [pc, #328]	; (8010674 <HAL_I2C_Mem_Read+0x22c>)
 801052a:	9300      	str	r3, [sp, #0]
 801052c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8010530:	68f8      	ldr	r0, [r7, #12]
 8010532:	f000 fac3 	bl	8010abc <I2C_TransferConfig>
 8010536:	e00f      	b.n	8010558 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801053c:	b29a      	uxth	r2, r3
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010546:	b2da      	uxtb	r2, r3
 8010548:	8979      	ldrh	r1, [r7, #10]
 801054a:	4b4a      	ldr	r3, [pc, #296]	; (8010674 <HAL_I2C_Mem_Read+0x22c>)
 801054c:	9300      	str	r3, [sp, #0]
 801054e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010552:	68f8      	ldr	r0, [r7, #12]
 8010554:	f000 fab2 	bl	8010abc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8010558:	697b      	ldr	r3, [r7, #20]
 801055a:	9300      	str	r3, [sp, #0]
 801055c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801055e:	2200      	movs	r2, #0
 8010560:	2104      	movs	r1, #4
 8010562:	68f8      	ldr	r0, [r7, #12]
 8010564:	f000 f902 	bl	801076c <I2C_WaitOnFlagUntilTimeout>
 8010568:	4603      	mov	r3, r0
 801056a:	2b00      	cmp	r3, #0
 801056c:	d001      	beq.n	8010572 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 801056e:	2301      	movs	r3, #1
 8010570:	e07c      	b.n	801066c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801057c:	b2d2      	uxtb	r2, r2
 801057e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010584:	1c5a      	adds	r2, r3, #1
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801058e:	3b01      	subs	r3, #1
 8010590:	b29a      	uxth	r2, r3
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801059a:	b29b      	uxth	r3, r3
 801059c:	3b01      	subs	r3, #1
 801059e:	b29a      	uxth	r2, r3
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80105a8:	b29b      	uxth	r3, r3
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d034      	beq.n	8010618 <HAL_I2C_Mem_Read+0x1d0>
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d130      	bne.n	8010618 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80105b6:	697b      	ldr	r3, [r7, #20]
 80105b8:	9300      	str	r3, [sp, #0]
 80105ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105bc:	2200      	movs	r2, #0
 80105be:	2180      	movs	r1, #128	; 0x80
 80105c0:	68f8      	ldr	r0, [r7, #12]
 80105c2:	f000 f8d3 	bl	801076c <I2C_WaitOnFlagUntilTimeout>
 80105c6:	4603      	mov	r3, r0
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d001      	beq.n	80105d0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80105cc:	2301      	movs	r3, #1
 80105ce:	e04d      	b.n	801066c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80105d4:	b29b      	uxth	r3, r3
 80105d6:	2bff      	cmp	r3, #255	; 0xff
 80105d8:	d90e      	bls.n	80105f8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	22ff      	movs	r2, #255	; 0xff
 80105de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80105e4:	b2da      	uxtb	r2, r3
 80105e6:	8979      	ldrh	r1, [r7, #10]
 80105e8:	2300      	movs	r3, #0
 80105ea:	9300      	str	r3, [sp, #0]
 80105ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80105f0:	68f8      	ldr	r0, [r7, #12]
 80105f2:	f000 fa63 	bl	8010abc <I2C_TransferConfig>
 80105f6:	e00f      	b.n	8010618 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80105fc:	b29a      	uxth	r2, r3
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010606:	b2da      	uxtb	r2, r3
 8010608:	8979      	ldrh	r1, [r7, #10]
 801060a:	2300      	movs	r3, #0
 801060c:	9300      	str	r3, [sp, #0]
 801060e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010612:	68f8      	ldr	r0, [r7, #12]
 8010614:	f000 fa52 	bl	8010abc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801061c:	b29b      	uxth	r3, r3
 801061e:	2b00      	cmp	r3, #0
 8010620:	d19a      	bne.n	8010558 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010622:	697a      	ldr	r2, [r7, #20]
 8010624:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010626:	68f8      	ldr	r0, [r7, #12]
 8010628:	f000 f920 	bl	801086c <I2C_WaitOnSTOPFlagUntilTimeout>
 801062c:	4603      	mov	r3, r0
 801062e:	2b00      	cmp	r3, #0
 8010630:	d001      	beq.n	8010636 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8010632:	2301      	movs	r3, #1
 8010634:	e01a      	b.n	801066c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	2220      	movs	r2, #32
 801063c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	6859      	ldr	r1, [r3, #4]
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	681a      	ldr	r2, [r3, #0]
 8010648:	4b0b      	ldr	r3, [pc, #44]	; (8010678 <HAL_I2C_Mem_Read+0x230>)
 801064a:	400b      	ands	r3, r1
 801064c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	2220      	movs	r2, #32
 8010652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	2200      	movs	r2, #0
 801065a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	2200      	movs	r2, #0
 8010662:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8010666:	2300      	movs	r3, #0
 8010668:	e000      	b.n	801066c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 801066a:	2302      	movs	r3, #2
  }
}
 801066c:	4618      	mov	r0, r3
 801066e:	3718      	adds	r7, #24
 8010670:	46bd      	mov	sp, r7
 8010672:	bd80      	pop	{r7, pc}
 8010674:	80002400 	.word	0x80002400
 8010678:	fe00e800 	.word	0xfe00e800

0801067c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 801067c:	b580      	push	{r7, lr}
 801067e:	b086      	sub	sp, #24
 8010680:	af02      	add	r7, sp, #8
 8010682:	60f8      	str	r0, [r7, #12]
 8010684:	4608      	mov	r0, r1
 8010686:	4611      	mov	r1, r2
 8010688:	461a      	mov	r2, r3
 801068a:	4603      	mov	r3, r0
 801068c:	817b      	strh	r3, [r7, #10]
 801068e:	460b      	mov	r3, r1
 8010690:	813b      	strh	r3, [r7, #8]
 8010692:	4613      	mov	r3, r2
 8010694:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8010696:	88fb      	ldrh	r3, [r7, #6]
 8010698:	b2da      	uxtb	r2, r3
 801069a:	8979      	ldrh	r1, [r7, #10]
 801069c:	4b20      	ldr	r3, [pc, #128]	; (8010720 <I2C_RequestMemoryRead+0xa4>)
 801069e:	9300      	str	r3, [sp, #0]
 80106a0:	2300      	movs	r3, #0
 80106a2:	68f8      	ldr	r0, [r7, #12]
 80106a4:	f000 fa0a 	bl	8010abc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80106a8:	69fa      	ldr	r2, [r7, #28]
 80106aa:	69b9      	ldr	r1, [r7, #24]
 80106ac:	68f8      	ldr	r0, [r7, #12]
 80106ae:	f000 f89d 	bl	80107ec <I2C_WaitOnTXISFlagUntilTimeout>
 80106b2:	4603      	mov	r3, r0
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d001      	beq.n	80106bc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80106b8:	2301      	movs	r3, #1
 80106ba:	e02c      	b.n	8010716 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80106bc:	88fb      	ldrh	r3, [r7, #6]
 80106be:	2b01      	cmp	r3, #1
 80106c0:	d105      	bne.n	80106ce <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80106c2:	893b      	ldrh	r3, [r7, #8]
 80106c4:	b2da      	uxtb	r2, r3
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	629a      	str	r2, [r3, #40]	; 0x28
 80106cc:	e015      	b.n	80106fa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80106ce:	893b      	ldrh	r3, [r7, #8]
 80106d0:	0a1b      	lsrs	r3, r3, #8
 80106d2:	b29b      	uxth	r3, r3
 80106d4:	b2da      	uxtb	r2, r3
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80106dc:	69fa      	ldr	r2, [r7, #28]
 80106de:	69b9      	ldr	r1, [r7, #24]
 80106e0:	68f8      	ldr	r0, [r7, #12]
 80106e2:	f000 f883 	bl	80107ec <I2C_WaitOnTXISFlagUntilTimeout>
 80106e6:	4603      	mov	r3, r0
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d001      	beq.n	80106f0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80106ec:	2301      	movs	r3, #1
 80106ee:	e012      	b.n	8010716 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80106f0:	893b      	ldrh	r3, [r7, #8]
 80106f2:	b2da      	uxtb	r2, r3
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80106fa:	69fb      	ldr	r3, [r7, #28]
 80106fc:	9300      	str	r3, [sp, #0]
 80106fe:	69bb      	ldr	r3, [r7, #24]
 8010700:	2200      	movs	r2, #0
 8010702:	2140      	movs	r1, #64	; 0x40
 8010704:	68f8      	ldr	r0, [r7, #12]
 8010706:	f000 f831 	bl	801076c <I2C_WaitOnFlagUntilTimeout>
 801070a:	4603      	mov	r3, r0
 801070c:	2b00      	cmp	r3, #0
 801070e:	d001      	beq.n	8010714 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8010710:	2301      	movs	r3, #1
 8010712:	e000      	b.n	8010716 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8010714:	2300      	movs	r3, #0
}
 8010716:	4618      	mov	r0, r3
 8010718:	3710      	adds	r7, #16
 801071a:	46bd      	mov	sp, r7
 801071c:	bd80      	pop	{r7, pc}
 801071e:	bf00      	nop
 8010720:	80002000 	.word	0x80002000

08010724 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8010724:	b480      	push	{r7}
 8010726:	b083      	sub	sp, #12
 8010728:	af00      	add	r7, sp, #0
 801072a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	699b      	ldr	r3, [r3, #24]
 8010732:	f003 0302 	and.w	r3, r3, #2
 8010736:	2b02      	cmp	r3, #2
 8010738:	d103      	bne.n	8010742 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	2200      	movs	r2, #0
 8010740:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	699b      	ldr	r3, [r3, #24]
 8010748:	f003 0301 	and.w	r3, r3, #1
 801074c:	2b01      	cmp	r3, #1
 801074e:	d007      	beq.n	8010760 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	699a      	ldr	r2, [r3, #24]
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	f042 0201 	orr.w	r2, r2, #1
 801075e:	619a      	str	r2, [r3, #24]
  }
}
 8010760:	bf00      	nop
 8010762:	370c      	adds	r7, #12
 8010764:	46bd      	mov	sp, r7
 8010766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801076a:	4770      	bx	lr

0801076c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 801076c:	b580      	push	{r7, lr}
 801076e:	b084      	sub	sp, #16
 8010770:	af00      	add	r7, sp, #0
 8010772:	60f8      	str	r0, [r7, #12]
 8010774:	60b9      	str	r1, [r7, #8]
 8010776:	603b      	str	r3, [r7, #0]
 8010778:	4613      	mov	r3, r2
 801077a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801077c:	e022      	b.n	80107c4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801077e:	683b      	ldr	r3, [r7, #0]
 8010780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010784:	d01e      	beq.n	80107c4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010786:	f7fe fe97 	bl	800f4b8 <HAL_GetTick>
 801078a:	4602      	mov	r2, r0
 801078c:	69bb      	ldr	r3, [r7, #24]
 801078e:	1ad3      	subs	r3, r2, r3
 8010790:	683a      	ldr	r2, [r7, #0]
 8010792:	429a      	cmp	r2, r3
 8010794:	d302      	bcc.n	801079c <I2C_WaitOnFlagUntilTimeout+0x30>
 8010796:	683b      	ldr	r3, [r7, #0]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d113      	bne.n	80107c4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80107a0:	f043 0220 	orr.w	r2, r3, #32
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	2220      	movs	r2, #32
 80107ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	2200      	movs	r2, #0
 80107b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	2200      	movs	r2, #0
 80107bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80107c0:	2301      	movs	r3, #1
 80107c2:	e00f      	b.n	80107e4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	699a      	ldr	r2, [r3, #24]
 80107ca:	68bb      	ldr	r3, [r7, #8]
 80107cc:	4013      	ands	r3, r2
 80107ce:	68ba      	ldr	r2, [r7, #8]
 80107d0:	429a      	cmp	r2, r3
 80107d2:	bf0c      	ite	eq
 80107d4:	2301      	moveq	r3, #1
 80107d6:	2300      	movne	r3, #0
 80107d8:	b2db      	uxtb	r3, r3
 80107da:	461a      	mov	r2, r3
 80107dc:	79fb      	ldrb	r3, [r7, #7]
 80107de:	429a      	cmp	r2, r3
 80107e0:	d0cd      	beq.n	801077e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80107e2:	2300      	movs	r3, #0
}
 80107e4:	4618      	mov	r0, r3
 80107e6:	3710      	adds	r7, #16
 80107e8:	46bd      	mov	sp, r7
 80107ea:	bd80      	pop	{r7, pc}

080107ec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80107ec:	b580      	push	{r7, lr}
 80107ee:	b084      	sub	sp, #16
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	60f8      	str	r0, [r7, #12]
 80107f4:	60b9      	str	r1, [r7, #8]
 80107f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80107f8:	e02c      	b.n	8010854 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80107fa:	687a      	ldr	r2, [r7, #4]
 80107fc:	68b9      	ldr	r1, [r7, #8]
 80107fe:	68f8      	ldr	r0, [r7, #12]
 8010800:	f000 f870 	bl	80108e4 <I2C_IsErrorOccurred>
 8010804:	4603      	mov	r3, r0
 8010806:	2b00      	cmp	r3, #0
 8010808:	d001      	beq.n	801080e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801080a:	2301      	movs	r3, #1
 801080c:	e02a      	b.n	8010864 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801080e:	68bb      	ldr	r3, [r7, #8]
 8010810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010814:	d01e      	beq.n	8010854 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010816:	f7fe fe4f 	bl	800f4b8 <HAL_GetTick>
 801081a:	4602      	mov	r2, r0
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	1ad3      	subs	r3, r2, r3
 8010820:	68ba      	ldr	r2, [r7, #8]
 8010822:	429a      	cmp	r2, r3
 8010824:	d302      	bcc.n	801082c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8010826:	68bb      	ldr	r3, [r7, #8]
 8010828:	2b00      	cmp	r3, #0
 801082a:	d113      	bne.n	8010854 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010830:	f043 0220 	orr.w	r2, r3, #32
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	2220      	movs	r2, #32
 801083c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	2200      	movs	r2, #0
 8010844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	2200      	movs	r2, #0
 801084c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8010850:	2301      	movs	r3, #1
 8010852:	e007      	b.n	8010864 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	699b      	ldr	r3, [r3, #24]
 801085a:	f003 0302 	and.w	r3, r3, #2
 801085e:	2b02      	cmp	r3, #2
 8010860:	d1cb      	bne.n	80107fa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8010862:	2300      	movs	r3, #0
}
 8010864:	4618      	mov	r0, r3
 8010866:	3710      	adds	r7, #16
 8010868:	46bd      	mov	sp, r7
 801086a:	bd80      	pop	{r7, pc}

0801086c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801086c:	b580      	push	{r7, lr}
 801086e:	b084      	sub	sp, #16
 8010870:	af00      	add	r7, sp, #0
 8010872:	60f8      	str	r0, [r7, #12]
 8010874:	60b9      	str	r1, [r7, #8]
 8010876:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010878:	e028      	b.n	80108cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801087a:	687a      	ldr	r2, [r7, #4]
 801087c:	68b9      	ldr	r1, [r7, #8]
 801087e:	68f8      	ldr	r0, [r7, #12]
 8010880:	f000 f830 	bl	80108e4 <I2C_IsErrorOccurred>
 8010884:	4603      	mov	r3, r0
 8010886:	2b00      	cmp	r3, #0
 8010888:	d001      	beq.n	801088e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801088a:	2301      	movs	r3, #1
 801088c:	e026      	b.n	80108dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801088e:	f7fe fe13 	bl	800f4b8 <HAL_GetTick>
 8010892:	4602      	mov	r2, r0
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	1ad3      	subs	r3, r2, r3
 8010898:	68ba      	ldr	r2, [r7, #8]
 801089a:	429a      	cmp	r2, r3
 801089c:	d302      	bcc.n	80108a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 801089e:	68bb      	ldr	r3, [r7, #8]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d113      	bne.n	80108cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80108a8:	f043 0220 	orr.w	r2, r3, #32
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	2220      	movs	r2, #32
 80108b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	2200      	movs	r2, #0
 80108bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	2200      	movs	r2, #0
 80108c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80108c8:	2301      	movs	r3, #1
 80108ca:	e007      	b.n	80108dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	699b      	ldr	r3, [r3, #24]
 80108d2:	f003 0320 	and.w	r3, r3, #32
 80108d6:	2b20      	cmp	r3, #32
 80108d8:	d1cf      	bne.n	801087a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80108da:	2300      	movs	r3, #0
}
 80108dc:	4618      	mov	r0, r3
 80108de:	3710      	adds	r7, #16
 80108e0:	46bd      	mov	sp, r7
 80108e2:	bd80      	pop	{r7, pc}

080108e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80108e4:	b580      	push	{r7, lr}
 80108e6:	b08a      	sub	sp, #40	; 0x28
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	60f8      	str	r0, [r7, #12]
 80108ec:	60b9      	str	r1, [r7, #8]
 80108ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80108f0:	2300      	movs	r3, #0
 80108f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	699b      	ldr	r3, [r3, #24]
 80108fc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80108fe:	2300      	movs	r3, #0
 8010900:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8010906:	69bb      	ldr	r3, [r7, #24]
 8010908:	f003 0310 	and.w	r3, r3, #16
 801090c:	2b00      	cmp	r3, #0
 801090e:	d075      	beq.n	80109fc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	2210      	movs	r2, #16
 8010916:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8010918:	e056      	b.n	80109c8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 801091a:	68bb      	ldr	r3, [r7, #8]
 801091c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010920:	d052      	beq.n	80109c8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8010922:	f7fe fdc9 	bl	800f4b8 <HAL_GetTick>
 8010926:	4602      	mov	r2, r0
 8010928:	69fb      	ldr	r3, [r7, #28]
 801092a:	1ad3      	subs	r3, r2, r3
 801092c:	68ba      	ldr	r2, [r7, #8]
 801092e:	429a      	cmp	r2, r3
 8010930:	d302      	bcc.n	8010938 <I2C_IsErrorOccurred+0x54>
 8010932:	68bb      	ldr	r3, [r7, #8]
 8010934:	2b00      	cmp	r3, #0
 8010936:	d147      	bne.n	80109c8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	685b      	ldr	r3, [r3, #4]
 801093e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010942:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801094a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	699b      	ldr	r3, [r3, #24]
 8010952:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010956:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801095a:	d12e      	bne.n	80109ba <I2C_IsErrorOccurred+0xd6>
 801095c:	697b      	ldr	r3, [r7, #20]
 801095e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010962:	d02a      	beq.n	80109ba <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8010964:	7cfb      	ldrb	r3, [r7, #19]
 8010966:	2b20      	cmp	r3, #32
 8010968:	d027      	beq.n	80109ba <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	685a      	ldr	r2, [r3, #4]
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010978:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 801097a:	f7fe fd9d 	bl	800f4b8 <HAL_GetTick>
 801097e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010980:	e01b      	b.n	80109ba <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8010982:	f7fe fd99 	bl	800f4b8 <HAL_GetTick>
 8010986:	4602      	mov	r2, r0
 8010988:	69fb      	ldr	r3, [r7, #28]
 801098a:	1ad3      	subs	r3, r2, r3
 801098c:	2b19      	cmp	r3, #25
 801098e:	d914      	bls.n	80109ba <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010994:	f043 0220 	orr.w	r2, r3, #32
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	2220      	movs	r2, #32
 80109a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	2200      	movs	r2, #0
 80109a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	2200      	movs	r2, #0
 80109b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80109b4:	2301      	movs	r3, #1
 80109b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	699b      	ldr	r3, [r3, #24]
 80109c0:	f003 0320 	and.w	r3, r3, #32
 80109c4:	2b20      	cmp	r3, #32
 80109c6:	d1dc      	bne.n	8010982 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	699b      	ldr	r3, [r3, #24]
 80109ce:	f003 0320 	and.w	r3, r3, #32
 80109d2:	2b20      	cmp	r3, #32
 80109d4:	d003      	beq.n	80109de <I2C_IsErrorOccurred+0xfa>
 80109d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d09d      	beq.n	801091a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80109de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d103      	bne.n	80109ee <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	2220      	movs	r2, #32
 80109ec:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80109ee:	6a3b      	ldr	r3, [r7, #32]
 80109f0:	f043 0304 	orr.w	r3, r3, #4
 80109f4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80109f6:	2301      	movs	r3, #1
 80109f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	699b      	ldr	r3, [r3, #24]
 8010a02:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8010a04:	69bb      	ldr	r3, [r7, #24]
 8010a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d00b      	beq.n	8010a26 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8010a0e:	6a3b      	ldr	r3, [r7, #32]
 8010a10:	f043 0301 	orr.w	r3, r3, #1
 8010a14:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010a1e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010a20:	2301      	movs	r3, #1
 8010a22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8010a26:	69bb      	ldr	r3, [r7, #24]
 8010a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d00b      	beq.n	8010a48 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8010a30:	6a3b      	ldr	r3, [r7, #32]
 8010a32:	f043 0308 	orr.w	r3, r3, #8
 8010a36:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010a40:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010a42:	2301      	movs	r3, #1
 8010a44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8010a48:	69bb      	ldr	r3, [r7, #24]
 8010a4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d00b      	beq.n	8010a6a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8010a52:	6a3b      	ldr	r3, [r7, #32]
 8010a54:	f043 0302 	orr.w	r3, r3, #2
 8010a58:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010a62:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010a64:	2301      	movs	r3, #1
 8010a66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8010a6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d01c      	beq.n	8010aac <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010a72:	68f8      	ldr	r0, [r7, #12]
 8010a74:	f7ff fe56 	bl	8010724 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	6859      	ldr	r1, [r3, #4]
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	681a      	ldr	r2, [r3, #0]
 8010a82:	4b0d      	ldr	r3, [pc, #52]	; (8010ab8 <I2C_IsErrorOccurred+0x1d4>)
 8010a84:	400b      	ands	r3, r1
 8010a86:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010a8c:	6a3b      	ldr	r3, [r7, #32]
 8010a8e:	431a      	orrs	r2, r3
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	2220      	movs	r2, #32
 8010a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	2200      	movs	r2, #0
 8010aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	2200      	movs	r2, #0
 8010aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8010aac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	3728      	adds	r7, #40	; 0x28
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	bd80      	pop	{r7, pc}
 8010ab8:	fe00e800 	.word	0xfe00e800

08010abc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8010abc:	b480      	push	{r7}
 8010abe:	b087      	sub	sp, #28
 8010ac0:	af00      	add	r7, sp, #0
 8010ac2:	60f8      	str	r0, [r7, #12]
 8010ac4:	607b      	str	r3, [r7, #4]
 8010ac6:	460b      	mov	r3, r1
 8010ac8:	817b      	strh	r3, [r7, #10]
 8010aca:	4613      	mov	r3, r2
 8010acc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010ace:	897b      	ldrh	r3, [r7, #10]
 8010ad0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8010ad4:	7a7b      	ldrb	r3, [r7, #9]
 8010ad6:	041b      	lsls	r3, r3, #16
 8010ad8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010adc:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010ae2:	6a3b      	ldr	r3, [r7, #32]
 8010ae4:	4313      	orrs	r3, r2
 8010ae6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010aea:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	685a      	ldr	r2, [r3, #4]
 8010af2:	6a3b      	ldr	r3, [r7, #32]
 8010af4:	0d5b      	lsrs	r3, r3, #21
 8010af6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8010afa:	4b08      	ldr	r3, [pc, #32]	; (8010b1c <I2C_TransferConfig+0x60>)
 8010afc:	430b      	orrs	r3, r1
 8010afe:	43db      	mvns	r3, r3
 8010b00:	ea02 0103 	and.w	r1, r2, r3
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	697a      	ldr	r2, [r7, #20]
 8010b0a:	430a      	orrs	r2, r1
 8010b0c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8010b0e:	bf00      	nop
 8010b10:	371c      	adds	r7, #28
 8010b12:	46bd      	mov	sp, r7
 8010b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b18:	4770      	bx	lr
 8010b1a:	bf00      	nop
 8010b1c:	03ff63ff 	.word	0x03ff63ff

08010b20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8010b20:	b480      	push	{r7}
 8010b22:	b083      	sub	sp, #12
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	6078      	str	r0, [r7, #4]
 8010b28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010b30:	b2db      	uxtb	r3, r3
 8010b32:	2b20      	cmp	r3, #32
 8010b34:	d138      	bne.n	8010ba8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010b3c:	2b01      	cmp	r3, #1
 8010b3e:	d101      	bne.n	8010b44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8010b40:	2302      	movs	r3, #2
 8010b42:	e032      	b.n	8010baa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	2201      	movs	r2, #1
 8010b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	2224      	movs	r2, #36	; 0x24
 8010b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	681a      	ldr	r2, [r3, #0]
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	f022 0201 	bic.w	r2, r2, #1
 8010b62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	681a      	ldr	r2, [r3, #0]
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8010b72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	6819      	ldr	r1, [r3, #0]
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	683a      	ldr	r2, [r7, #0]
 8010b80:	430a      	orrs	r2, r1
 8010b82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	681a      	ldr	r2, [r3, #0]
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	f042 0201 	orr.w	r2, r2, #1
 8010b92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	2220      	movs	r2, #32
 8010b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	2200      	movs	r2, #0
 8010ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	e000      	b.n	8010baa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8010ba8:	2302      	movs	r3, #2
  }
}
 8010baa:	4618      	mov	r0, r3
 8010bac:	370c      	adds	r7, #12
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb4:	4770      	bx	lr

08010bb6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8010bb6:	b480      	push	{r7}
 8010bb8:	b085      	sub	sp, #20
 8010bba:	af00      	add	r7, sp, #0
 8010bbc:	6078      	str	r0, [r7, #4]
 8010bbe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010bc6:	b2db      	uxtb	r3, r3
 8010bc8:	2b20      	cmp	r3, #32
 8010bca:	d139      	bne.n	8010c40 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010bd2:	2b01      	cmp	r3, #1
 8010bd4:	d101      	bne.n	8010bda <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8010bd6:	2302      	movs	r3, #2
 8010bd8:	e033      	b.n	8010c42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	2201      	movs	r2, #1
 8010bde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	2224      	movs	r2, #36	; 0x24
 8010be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	681a      	ldr	r2, [r3, #0]
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	f022 0201 	bic.w	r2, r2, #1
 8010bf8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8010c08:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8010c0a:	683b      	ldr	r3, [r7, #0]
 8010c0c:	021b      	lsls	r3, r3, #8
 8010c0e:	68fa      	ldr	r2, [r7, #12]
 8010c10:	4313      	orrs	r3, r2
 8010c12:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	68fa      	ldr	r2, [r7, #12]
 8010c1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	681a      	ldr	r2, [r3, #0]
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	f042 0201 	orr.w	r2, r2, #1
 8010c2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	2220      	movs	r2, #32
 8010c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	2200      	movs	r2, #0
 8010c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	e000      	b.n	8010c42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8010c40:	2302      	movs	r3, #2
  }
}
 8010c42:	4618      	mov	r0, r3
 8010c44:	3714      	adds	r7, #20
 8010c46:	46bd      	mov	sp, r7
 8010c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c4c:	4770      	bx	lr

08010c4e <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8010c4e:	b580      	push	{r7, lr}
 8010c50:	b084      	sub	sp, #16
 8010c52:	af00      	add	r7, sp, #0
 8010c54:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d101      	bne.n	8010c60 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8010c5c:	2301      	movs	r3, #1
 8010c5e:	e041      	b.n	8010ce4 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8010c68:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	f245 5255 	movw	r2, #21845	; 0x5555
 8010c72:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	687a      	ldr	r2, [r7, #4]
 8010c7a:	6852      	ldr	r2, [r2, #4]
 8010c7c:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	687a      	ldr	r2, [r7, #4]
 8010c84:	6892      	ldr	r2, [r2, #8]
 8010c86:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8010c88:	f7fe fc16 	bl	800f4b8 <HAL_GetTick>
 8010c8c:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8010c8e:	e00f      	b.n	8010cb0 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8010c90:	f7fe fc12 	bl	800f4b8 <HAL_GetTick>
 8010c94:	4602      	mov	r2, r0
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	1ad3      	subs	r3, r2, r3
 8010c9a:	2b31      	cmp	r3, #49	; 0x31
 8010c9c:	d908      	bls.n	8010cb0 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	68db      	ldr	r3, [r3, #12]
 8010ca4:	f003 0307 	and.w	r3, r3, #7
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d001      	beq.n	8010cb0 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8010cac:	2303      	movs	r3, #3
 8010cae:	e019      	b.n	8010ce4 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	68db      	ldr	r3, [r3, #12]
 8010cb6:	f003 0307 	and.w	r3, r3, #7
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d1e8      	bne.n	8010c90 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	691a      	ldr	r2, [r3, #16]
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	68db      	ldr	r3, [r3, #12]
 8010cc8:	429a      	cmp	r2, r3
 8010cca:	d005      	beq.n	8010cd8 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	687a      	ldr	r2, [r7, #4]
 8010cd2:	68d2      	ldr	r2, [r2, #12]
 8010cd4:	611a      	str	r2, [r3, #16]
 8010cd6:	e004      	b.n	8010ce2 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8010ce0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010ce2:	2300      	movs	r3, #0
}
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	3710      	adds	r7, #16
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	bd80      	pop	{r7, pc}

08010cec <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8010cec:	b480      	push	{r7}
 8010cee:	b083      	sub	sp, #12
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8010cfc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8010cfe:	2300      	movs	r3, #0
}
 8010d00:	4618      	mov	r0, r3
 8010d02:	370c      	adds	r7, #12
 8010d04:	46bd      	mov	sp, r7
 8010d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d0a:	4770      	bx	lr

08010d0c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b082      	sub	sp, #8
 8010d10:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8010d12:	2300      	movs	r3, #0
 8010d14:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8010d16:	4b23      	ldr	r3, [pc, #140]	; (8010da4 <HAL_PWREx_EnableOverDrive+0x98>)
 8010d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d1a:	4a22      	ldr	r2, [pc, #136]	; (8010da4 <HAL_PWREx_EnableOverDrive+0x98>)
 8010d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010d20:	6413      	str	r3, [r2, #64]	; 0x40
 8010d22:	4b20      	ldr	r3, [pc, #128]	; (8010da4 <HAL_PWREx_EnableOverDrive+0x98>)
 8010d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010d2a:	603b      	str	r3, [r7, #0]
 8010d2c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8010d2e:	4b1e      	ldr	r3, [pc, #120]	; (8010da8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	4a1d      	ldr	r2, [pc, #116]	; (8010da8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8010d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010d38:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8010d3a:	f7fe fbbd 	bl	800f4b8 <HAL_GetTick>
 8010d3e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8010d40:	e009      	b.n	8010d56 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8010d42:	f7fe fbb9 	bl	800f4b8 <HAL_GetTick>
 8010d46:	4602      	mov	r2, r0
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	1ad3      	subs	r3, r2, r3
 8010d4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010d50:	d901      	bls.n	8010d56 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8010d52:	2303      	movs	r3, #3
 8010d54:	e022      	b.n	8010d9c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8010d56:	4b14      	ldr	r3, [pc, #80]	; (8010da8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8010d58:	685b      	ldr	r3, [r3, #4]
 8010d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010d5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010d62:	d1ee      	bne.n	8010d42 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8010d64:	4b10      	ldr	r3, [pc, #64]	; (8010da8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	4a0f      	ldr	r2, [pc, #60]	; (8010da8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8010d6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010d6e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8010d70:	f7fe fba2 	bl	800f4b8 <HAL_GetTick>
 8010d74:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8010d76:	e009      	b.n	8010d8c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8010d78:	f7fe fb9e 	bl	800f4b8 <HAL_GetTick>
 8010d7c:	4602      	mov	r2, r0
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	1ad3      	subs	r3, r2, r3
 8010d82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010d86:	d901      	bls.n	8010d8c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8010d88:	2303      	movs	r3, #3
 8010d8a:	e007      	b.n	8010d9c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8010d8c:	4b06      	ldr	r3, [pc, #24]	; (8010da8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8010d8e:	685b      	ldr	r3, [r3, #4]
 8010d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010d94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010d98:	d1ee      	bne.n	8010d78 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8010d9a:	2300      	movs	r3, #0
}
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	3708      	adds	r7, #8
 8010da0:	46bd      	mov	sp, r7
 8010da2:	bd80      	pop	{r7, pc}
 8010da4:	40023800 	.word	0x40023800
 8010da8:	40007000 	.word	0x40007000

08010dac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010dac:	b580      	push	{r7, lr}
 8010dae:	b086      	sub	sp, #24
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8010db4:	2300      	movs	r3, #0
 8010db6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d101      	bne.n	8010dc2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8010dbe:	2301      	movs	r3, #1
 8010dc0:	e29b      	b.n	80112fa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	f003 0301 	and.w	r3, r3, #1
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	f000 8087 	beq.w	8010ede <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8010dd0:	4b96      	ldr	r3, [pc, #600]	; (801102c <HAL_RCC_OscConfig+0x280>)
 8010dd2:	689b      	ldr	r3, [r3, #8]
 8010dd4:	f003 030c 	and.w	r3, r3, #12
 8010dd8:	2b04      	cmp	r3, #4
 8010dda:	d00c      	beq.n	8010df6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8010ddc:	4b93      	ldr	r3, [pc, #588]	; (801102c <HAL_RCC_OscConfig+0x280>)
 8010dde:	689b      	ldr	r3, [r3, #8]
 8010de0:	f003 030c 	and.w	r3, r3, #12
 8010de4:	2b08      	cmp	r3, #8
 8010de6:	d112      	bne.n	8010e0e <HAL_RCC_OscConfig+0x62>
 8010de8:	4b90      	ldr	r3, [pc, #576]	; (801102c <HAL_RCC_OscConfig+0x280>)
 8010dea:	685b      	ldr	r3, [r3, #4]
 8010dec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010df0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010df4:	d10b      	bne.n	8010e0e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010df6:	4b8d      	ldr	r3, [pc, #564]	; (801102c <HAL_RCC_OscConfig+0x280>)
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d06c      	beq.n	8010edc <HAL_RCC_OscConfig+0x130>
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	685b      	ldr	r3, [r3, #4]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d168      	bne.n	8010edc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8010e0a:	2301      	movs	r3, #1
 8010e0c:	e275      	b.n	80112fa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	685b      	ldr	r3, [r3, #4]
 8010e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010e16:	d106      	bne.n	8010e26 <HAL_RCC_OscConfig+0x7a>
 8010e18:	4b84      	ldr	r3, [pc, #528]	; (801102c <HAL_RCC_OscConfig+0x280>)
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	4a83      	ldr	r2, [pc, #524]	; (801102c <HAL_RCC_OscConfig+0x280>)
 8010e1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010e22:	6013      	str	r3, [r2, #0]
 8010e24:	e02e      	b.n	8010e84 <HAL_RCC_OscConfig+0xd8>
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	685b      	ldr	r3, [r3, #4]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d10c      	bne.n	8010e48 <HAL_RCC_OscConfig+0x9c>
 8010e2e:	4b7f      	ldr	r3, [pc, #508]	; (801102c <HAL_RCC_OscConfig+0x280>)
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	4a7e      	ldr	r2, [pc, #504]	; (801102c <HAL_RCC_OscConfig+0x280>)
 8010e34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010e38:	6013      	str	r3, [r2, #0]
 8010e3a:	4b7c      	ldr	r3, [pc, #496]	; (801102c <HAL_RCC_OscConfig+0x280>)
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	4a7b      	ldr	r2, [pc, #492]	; (801102c <HAL_RCC_OscConfig+0x280>)
 8010e40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010e44:	6013      	str	r3, [r2, #0]
 8010e46:	e01d      	b.n	8010e84 <HAL_RCC_OscConfig+0xd8>
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	685b      	ldr	r3, [r3, #4]
 8010e4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010e50:	d10c      	bne.n	8010e6c <HAL_RCC_OscConfig+0xc0>
 8010e52:	4b76      	ldr	r3, [pc, #472]	; (801102c <HAL_RCC_OscConfig+0x280>)
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	4a75      	ldr	r2, [pc, #468]	; (801102c <HAL_RCC_OscConfig+0x280>)
 8010e58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010e5c:	6013      	str	r3, [r2, #0]
 8010e5e:	4b73      	ldr	r3, [pc, #460]	; (801102c <HAL_RCC_OscConfig+0x280>)
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	4a72      	ldr	r2, [pc, #456]	; (801102c <HAL_RCC_OscConfig+0x280>)
 8010e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010e68:	6013      	str	r3, [r2, #0]
 8010e6a:	e00b      	b.n	8010e84 <HAL_RCC_OscConfig+0xd8>
 8010e6c:	4b6f      	ldr	r3, [pc, #444]	; (801102c <HAL_RCC_OscConfig+0x280>)
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	4a6e      	ldr	r2, [pc, #440]	; (801102c <HAL_RCC_OscConfig+0x280>)
 8010e72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010e76:	6013      	str	r3, [r2, #0]
 8010e78:	4b6c      	ldr	r3, [pc, #432]	; (801102c <HAL_RCC_OscConfig+0x280>)
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	4a6b      	ldr	r2, [pc, #428]	; (801102c <HAL_RCC_OscConfig+0x280>)
 8010e7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010e82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	685b      	ldr	r3, [r3, #4]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d013      	beq.n	8010eb4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010e8c:	f7fe fb14 	bl	800f4b8 <HAL_GetTick>
 8010e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010e92:	e008      	b.n	8010ea6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010e94:	f7fe fb10 	bl	800f4b8 <HAL_GetTick>
 8010e98:	4602      	mov	r2, r0
 8010e9a:	693b      	ldr	r3, [r7, #16]
 8010e9c:	1ad3      	subs	r3, r2, r3
 8010e9e:	2b64      	cmp	r3, #100	; 0x64
 8010ea0:	d901      	bls.n	8010ea6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8010ea2:	2303      	movs	r3, #3
 8010ea4:	e229      	b.n	80112fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010ea6:	4b61      	ldr	r3, [pc, #388]	; (801102c <HAL_RCC_OscConfig+0x280>)
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d0f0      	beq.n	8010e94 <HAL_RCC_OscConfig+0xe8>
 8010eb2:	e014      	b.n	8010ede <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010eb4:	f7fe fb00 	bl	800f4b8 <HAL_GetTick>
 8010eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010eba:	e008      	b.n	8010ece <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010ebc:	f7fe fafc 	bl	800f4b8 <HAL_GetTick>
 8010ec0:	4602      	mov	r2, r0
 8010ec2:	693b      	ldr	r3, [r7, #16]
 8010ec4:	1ad3      	subs	r3, r2, r3
 8010ec6:	2b64      	cmp	r3, #100	; 0x64
 8010ec8:	d901      	bls.n	8010ece <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8010eca:	2303      	movs	r3, #3
 8010ecc:	e215      	b.n	80112fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010ece:	4b57      	ldr	r3, [pc, #348]	; (801102c <HAL_RCC_OscConfig+0x280>)
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d1f0      	bne.n	8010ebc <HAL_RCC_OscConfig+0x110>
 8010eda:	e000      	b.n	8010ede <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010edc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	f003 0302 	and.w	r3, r3, #2
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d069      	beq.n	8010fbe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8010eea:	4b50      	ldr	r3, [pc, #320]	; (801102c <HAL_RCC_OscConfig+0x280>)
 8010eec:	689b      	ldr	r3, [r3, #8]
 8010eee:	f003 030c 	and.w	r3, r3, #12
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d00b      	beq.n	8010f0e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8010ef6:	4b4d      	ldr	r3, [pc, #308]	; (801102c <HAL_RCC_OscConfig+0x280>)
 8010ef8:	689b      	ldr	r3, [r3, #8]
 8010efa:	f003 030c 	and.w	r3, r3, #12
 8010efe:	2b08      	cmp	r3, #8
 8010f00:	d11c      	bne.n	8010f3c <HAL_RCC_OscConfig+0x190>
 8010f02:	4b4a      	ldr	r3, [pc, #296]	; (801102c <HAL_RCC_OscConfig+0x280>)
 8010f04:	685b      	ldr	r3, [r3, #4]
 8010f06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d116      	bne.n	8010f3c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010f0e:	4b47      	ldr	r3, [pc, #284]	; (801102c <HAL_RCC_OscConfig+0x280>)
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	f003 0302 	and.w	r3, r3, #2
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d005      	beq.n	8010f26 <HAL_RCC_OscConfig+0x17a>
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	68db      	ldr	r3, [r3, #12]
 8010f1e:	2b01      	cmp	r3, #1
 8010f20:	d001      	beq.n	8010f26 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8010f22:	2301      	movs	r3, #1
 8010f24:	e1e9      	b.n	80112fa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010f26:	4b41      	ldr	r3, [pc, #260]	; (801102c <HAL_RCC_OscConfig+0x280>)
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	691b      	ldr	r3, [r3, #16]
 8010f32:	00db      	lsls	r3, r3, #3
 8010f34:	493d      	ldr	r1, [pc, #244]	; (801102c <HAL_RCC_OscConfig+0x280>)
 8010f36:	4313      	orrs	r3, r2
 8010f38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010f3a:	e040      	b.n	8010fbe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	68db      	ldr	r3, [r3, #12]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d023      	beq.n	8010f8c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8010f44:	4b39      	ldr	r3, [pc, #228]	; (801102c <HAL_RCC_OscConfig+0x280>)
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	4a38      	ldr	r2, [pc, #224]	; (801102c <HAL_RCC_OscConfig+0x280>)
 8010f4a:	f043 0301 	orr.w	r3, r3, #1
 8010f4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010f50:	f7fe fab2 	bl	800f4b8 <HAL_GetTick>
 8010f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010f56:	e008      	b.n	8010f6a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010f58:	f7fe faae 	bl	800f4b8 <HAL_GetTick>
 8010f5c:	4602      	mov	r2, r0
 8010f5e:	693b      	ldr	r3, [r7, #16]
 8010f60:	1ad3      	subs	r3, r2, r3
 8010f62:	2b02      	cmp	r3, #2
 8010f64:	d901      	bls.n	8010f6a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8010f66:	2303      	movs	r3, #3
 8010f68:	e1c7      	b.n	80112fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010f6a:	4b30      	ldr	r3, [pc, #192]	; (801102c <HAL_RCC_OscConfig+0x280>)
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	f003 0302 	and.w	r3, r3, #2
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d0f0      	beq.n	8010f58 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010f76:	4b2d      	ldr	r3, [pc, #180]	; (801102c <HAL_RCC_OscConfig+0x280>)
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	691b      	ldr	r3, [r3, #16]
 8010f82:	00db      	lsls	r3, r3, #3
 8010f84:	4929      	ldr	r1, [pc, #164]	; (801102c <HAL_RCC_OscConfig+0x280>)
 8010f86:	4313      	orrs	r3, r2
 8010f88:	600b      	str	r3, [r1, #0]
 8010f8a:	e018      	b.n	8010fbe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8010f8c:	4b27      	ldr	r3, [pc, #156]	; (801102c <HAL_RCC_OscConfig+0x280>)
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	4a26      	ldr	r2, [pc, #152]	; (801102c <HAL_RCC_OscConfig+0x280>)
 8010f92:	f023 0301 	bic.w	r3, r3, #1
 8010f96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010f98:	f7fe fa8e 	bl	800f4b8 <HAL_GetTick>
 8010f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8010f9e:	e008      	b.n	8010fb2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010fa0:	f7fe fa8a 	bl	800f4b8 <HAL_GetTick>
 8010fa4:	4602      	mov	r2, r0
 8010fa6:	693b      	ldr	r3, [r7, #16]
 8010fa8:	1ad3      	subs	r3, r2, r3
 8010faa:	2b02      	cmp	r3, #2
 8010fac:	d901      	bls.n	8010fb2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8010fae:	2303      	movs	r3, #3
 8010fb0:	e1a3      	b.n	80112fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8010fb2:	4b1e      	ldr	r3, [pc, #120]	; (801102c <HAL_RCC_OscConfig+0x280>)
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	f003 0302 	and.w	r3, r3, #2
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d1f0      	bne.n	8010fa0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	f003 0308 	and.w	r3, r3, #8
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d038      	beq.n	801103c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	695b      	ldr	r3, [r3, #20]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d019      	beq.n	8011006 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8010fd2:	4b16      	ldr	r3, [pc, #88]	; (801102c <HAL_RCC_OscConfig+0x280>)
 8010fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010fd6:	4a15      	ldr	r2, [pc, #84]	; (801102c <HAL_RCC_OscConfig+0x280>)
 8010fd8:	f043 0301 	orr.w	r3, r3, #1
 8010fdc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010fde:	f7fe fa6b 	bl	800f4b8 <HAL_GetTick>
 8010fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010fe4:	e008      	b.n	8010ff8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010fe6:	f7fe fa67 	bl	800f4b8 <HAL_GetTick>
 8010fea:	4602      	mov	r2, r0
 8010fec:	693b      	ldr	r3, [r7, #16]
 8010fee:	1ad3      	subs	r3, r2, r3
 8010ff0:	2b02      	cmp	r3, #2
 8010ff2:	d901      	bls.n	8010ff8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8010ff4:	2303      	movs	r3, #3
 8010ff6:	e180      	b.n	80112fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010ff8:	4b0c      	ldr	r3, [pc, #48]	; (801102c <HAL_RCC_OscConfig+0x280>)
 8010ffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010ffc:	f003 0302 	and.w	r3, r3, #2
 8011000:	2b00      	cmp	r3, #0
 8011002:	d0f0      	beq.n	8010fe6 <HAL_RCC_OscConfig+0x23a>
 8011004:	e01a      	b.n	801103c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8011006:	4b09      	ldr	r3, [pc, #36]	; (801102c <HAL_RCC_OscConfig+0x280>)
 8011008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801100a:	4a08      	ldr	r2, [pc, #32]	; (801102c <HAL_RCC_OscConfig+0x280>)
 801100c:	f023 0301 	bic.w	r3, r3, #1
 8011010:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011012:	f7fe fa51 	bl	800f4b8 <HAL_GetTick>
 8011016:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011018:	e00a      	b.n	8011030 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801101a:	f7fe fa4d 	bl	800f4b8 <HAL_GetTick>
 801101e:	4602      	mov	r2, r0
 8011020:	693b      	ldr	r3, [r7, #16]
 8011022:	1ad3      	subs	r3, r2, r3
 8011024:	2b02      	cmp	r3, #2
 8011026:	d903      	bls.n	8011030 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8011028:	2303      	movs	r3, #3
 801102a:	e166      	b.n	80112fa <HAL_RCC_OscConfig+0x54e>
 801102c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011030:	4b92      	ldr	r3, [pc, #584]	; (801127c <HAL_RCC_OscConfig+0x4d0>)
 8011032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011034:	f003 0302 	and.w	r3, r3, #2
 8011038:	2b00      	cmp	r3, #0
 801103a:	d1ee      	bne.n	801101a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	f003 0304 	and.w	r3, r3, #4
 8011044:	2b00      	cmp	r3, #0
 8011046:	f000 80a4 	beq.w	8011192 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 801104a:	4b8c      	ldr	r3, [pc, #560]	; (801127c <HAL_RCC_OscConfig+0x4d0>)
 801104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801104e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011052:	2b00      	cmp	r3, #0
 8011054:	d10d      	bne.n	8011072 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8011056:	4b89      	ldr	r3, [pc, #548]	; (801127c <HAL_RCC_OscConfig+0x4d0>)
 8011058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801105a:	4a88      	ldr	r2, [pc, #544]	; (801127c <HAL_RCC_OscConfig+0x4d0>)
 801105c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011060:	6413      	str	r3, [r2, #64]	; 0x40
 8011062:	4b86      	ldr	r3, [pc, #536]	; (801127c <HAL_RCC_OscConfig+0x4d0>)
 8011064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801106a:	60bb      	str	r3, [r7, #8]
 801106c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801106e:	2301      	movs	r3, #1
 8011070:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8011072:	4b83      	ldr	r3, [pc, #524]	; (8011280 <HAL_RCC_OscConfig+0x4d4>)
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801107a:	2b00      	cmp	r3, #0
 801107c:	d118      	bne.n	80110b0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 801107e:	4b80      	ldr	r3, [pc, #512]	; (8011280 <HAL_RCC_OscConfig+0x4d4>)
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	4a7f      	ldr	r2, [pc, #508]	; (8011280 <HAL_RCC_OscConfig+0x4d4>)
 8011084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011088:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801108a:	f7fe fa15 	bl	800f4b8 <HAL_GetTick>
 801108e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8011090:	e008      	b.n	80110a4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011092:	f7fe fa11 	bl	800f4b8 <HAL_GetTick>
 8011096:	4602      	mov	r2, r0
 8011098:	693b      	ldr	r3, [r7, #16]
 801109a:	1ad3      	subs	r3, r2, r3
 801109c:	2b64      	cmp	r3, #100	; 0x64
 801109e:	d901      	bls.n	80110a4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80110a0:	2303      	movs	r3, #3
 80110a2:	e12a      	b.n	80112fa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80110a4:	4b76      	ldr	r3, [pc, #472]	; (8011280 <HAL_RCC_OscConfig+0x4d4>)
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d0f0      	beq.n	8011092 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	689b      	ldr	r3, [r3, #8]
 80110b4:	2b01      	cmp	r3, #1
 80110b6:	d106      	bne.n	80110c6 <HAL_RCC_OscConfig+0x31a>
 80110b8:	4b70      	ldr	r3, [pc, #448]	; (801127c <HAL_RCC_OscConfig+0x4d0>)
 80110ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80110bc:	4a6f      	ldr	r2, [pc, #444]	; (801127c <HAL_RCC_OscConfig+0x4d0>)
 80110be:	f043 0301 	orr.w	r3, r3, #1
 80110c2:	6713      	str	r3, [r2, #112]	; 0x70
 80110c4:	e02d      	b.n	8011122 <HAL_RCC_OscConfig+0x376>
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	689b      	ldr	r3, [r3, #8]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d10c      	bne.n	80110e8 <HAL_RCC_OscConfig+0x33c>
 80110ce:	4b6b      	ldr	r3, [pc, #428]	; (801127c <HAL_RCC_OscConfig+0x4d0>)
 80110d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80110d2:	4a6a      	ldr	r2, [pc, #424]	; (801127c <HAL_RCC_OscConfig+0x4d0>)
 80110d4:	f023 0301 	bic.w	r3, r3, #1
 80110d8:	6713      	str	r3, [r2, #112]	; 0x70
 80110da:	4b68      	ldr	r3, [pc, #416]	; (801127c <HAL_RCC_OscConfig+0x4d0>)
 80110dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80110de:	4a67      	ldr	r2, [pc, #412]	; (801127c <HAL_RCC_OscConfig+0x4d0>)
 80110e0:	f023 0304 	bic.w	r3, r3, #4
 80110e4:	6713      	str	r3, [r2, #112]	; 0x70
 80110e6:	e01c      	b.n	8011122 <HAL_RCC_OscConfig+0x376>
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	689b      	ldr	r3, [r3, #8]
 80110ec:	2b05      	cmp	r3, #5
 80110ee:	d10c      	bne.n	801110a <HAL_RCC_OscConfig+0x35e>
 80110f0:	4b62      	ldr	r3, [pc, #392]	; (801127c <HAL_RCC_OscConfig+0x4d0>)
 80110f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80110f4:	4a61      	ldr	r2, [pc, #388]	; (801127c <HAL_RCC_OscConfig+0x4d0>)
 80110f6:	f043 0304 	orr.w	r3, r3, #4
 80110fa:	6713      	str	r3, [r2, #112]	; 0x70
 80110fc:	4b5f      	ldr	r3, [pc, #380]	; (801127c <HAL_RCC_OscConfig+0x4d0>)
 80110fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011100:	4a5e      	ldr	r2, [pc, #376]	; (801127c <HAL_RCC_OscConfig+0x4d0>)
 8011102:	f043 0301 	orr.w	r3, r3, #1
 8011106:	6713      	str	r3, [r2, #112]	; 0x70
 8011108:	e00b      	b.n	8011122 <HAL_RCC_OscConfig+0x376>
 801110a:	4b5c      	ldr	r3, [pc, #368]	; (801127c <HAL_RCC_OscConfig+0x4d0>)
 801110c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801110e:	4a5b      	ldr	r2, [pc, #364]	; (801127c <HAL_RCC_OscConfig+0x4d0>)
 8011110:	f023 0301 	bic.w	r3, r3, #1
 8011114:	6713      	str	r3, [r2, #112]	; 0x70
 8011116:	4b59      	ldr	r3, [pc, #356]	; (801127c <HAL_RCC_OscConfig+0x4d0>)
 8011118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801111a:	4a58      	ldr	r2, [pc, #352]	; (801127c <HAL_RCC_OscConfig+0x4d0>)
 801111c:	f023 0304 	bic.w	r3, r3, #4
 8011120:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	689b      	ldr	r3, [r3, #8]
 8011126:	2b00      	cmp	r3, #0
 8011128:	d015      	beq.n	8011156 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801112a:	f7fe f9c5 	bl	800f4b8 <HAL_GetTick>
 801112e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011130:	e00a      	b.n	8011148 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011132:	f7fe f9c1 	bl	800f4b8 <HAL_GetTick>
 8011136:	4602      	mov	r2, r0
 8011138:	693b      	ldr	r3, [r7, #16]
 801113a:	1ad3      	subs	r3, r2, r3
 801113c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011140:	4293      	cmp	r3, r2
 8011142:	d901      	bls.n	8011148 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8011144:	2303      	movs	r3, #3
 8011146:	e0d8      	b.n	80112fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011148:	4b4c      	ldr	r3, [pc, #304]	; (801127c <HAL_RCC_OscConfig+0x4d0>)
 801114a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801114c:	f003 0302 	and.w	r3, r3, #2
 8011150:	2b00      	cmp	r3, #0
 8011152:	d0ee      	beq.n	8011132 <HAL_RCC_OscConfig+0x386>
 8011154:	e014      	b.n	8011180 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011156:	f7fe f9af 	bl	800f4b8 <HAL_GetTick>
 801115a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801115c:	e00a      	b.n	8011174 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801115e:	f7fe f9ab 	bl	800f4b8 <HAL_GetTick>
 8011162:	4602      	mov	r2, r0
 8011164:	693b      	ldr	r3, [r7, #16]
 8011166:	1ad3      	subs	r3, r2, r3
 8011168:	f241 3288 	movw	r2, #5000	; 0x1388
 801116c:	4293      	cmp	r3, r2
 801116e:	d901      	bls.n	8011174 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8011170:	2303      	movs	r3, #3
 8011172:	e0c2      	b.n	80112fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011174:	4b41      	ldr	r3, [pc, #260]	; (801127c <HAL_RCC_OscConfig+0x4d0>)
 8011176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011178:	f003 0302 	and.w	r3, r3, #2
 801117c:	2b00      	cmp	r3, #0
 801117e:	d1ee      	bne.n	801115e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8011180:	7dfb      	ldrb	r3, [r7, #23]
 8011182:	2b01      	cmp	r3, #1
 8011184:	d105      	bne.n	8011192 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011186:	4b3d      	ldr	r3, [pc, #244]	; (801127c <HAL_RCC_OscConfig+0x4d0>)
 8011188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801118a:	4a3c      	ldr	r2, [pc, #240]	; (801127c <HAL_RCC_OscConfig+0x4d0>)
 801118c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011190:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	699b      	ldr	r3, [r3, #24]
 8011196:	2b00      	cmp	r3, #0
 8011198:	f000 80ae 	beq.w	80112f8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801119c:	4b37      	ldr	r3, [pc, #220]	; (801127c <HAL_RCC_OscConfig+0x4d0>)
 801119e:	689b      	ldr	r3, [r3, #8]
 80111a0:	f003 030c 	and.w	r3, r3, #12
 80111a4:	2b08      	cmp	r3, #8
 80111a6:	d06d      	beq.n	8011284 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	699b      	ldr	r3, [r3, #24]
 80111ac:	2b02      	cmp	r3, #2
 80111ae:	d14b      	bne.n	8011248 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80111b0:	4b32      	ldr	r3, [pc, #200]	; (801127c <HAL_RCC_OscConfig+0x4d0>)
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	4a31      	ldr	r2, [pc, #196]	; (801127c <HAL_RCC_OscConfig+0x4d0>)
 80111b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80111ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80111bc:	f7fe f97c 	bl	800f4b8 <HAL_GetTick>
 80111c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80111c2:	e008      	b.n	80111d6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80111c4:	f7fe f978 	bl	800f4b8 <HAL_GetTick>
 80111c8:	4602      	mov	r2, r0
 80111ca:	693b      	ldr	r3, [r7, #16]
 80111cc:	1ad3      	subs	r3, r2, r3
 80111ce:	2b02      	cmp	r3, #2
 80111d0:	d901      	bls.n	80111d6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80111d2:	2303      	movs	r3, #3
 80111d4:	e091      	b.n	80112fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80111d6:	4b29      	ldr	r3, [pc, #164]	; (801127c <HAL_RCC_OscConfig+0x4d0>)
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d1f0      	bne.n	80111c4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	69da      	ldr	r2, [r3, #28]
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	6a1b      	ldr	r3, [r3, #32]
 80111ea:	431a      	orrs	r2, r3
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111f0:	019b      	lsls	r3, r3, #6
 80111f2:	431a      	orrs	r2, r3
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111f8:	085b      	lsrs	r3, r3, #1
 80111fa:	3b01      	subs	r3, #1
 80111fc:	041b      	lsls	r3, r3, #16
 80111fe:	431a      	orrs	r2, r3
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011204:	061b      	lsls	r3, r3, #24
 8011206:	431a      	orrs	r2, r3
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801120c:	071b      	lsls	r3, r3, #28
 801120e:	491b      	ldr	r1, [pc, #108]	; (801127c <HAL_RCC_OscConfig+0x4d0>)
 8011210:	4313      	orrs	r3, r2
 8011212:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8011214:	4b19      	ldr	r3, [pc, #100]	; (801127c <HAL_RCC_OscConfig+0x4d0>)
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	4a18      	ldr	r2, [pc, #96]	; (801127c <HAL_RCC_OscConfig+0x4d0>)
 801121a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801121e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011220:	f7fe f94a 	bl	800f4b8 <HAL_GetTick>
 8011224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011226:	e008      	b.n	801123a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011228:	f7fe f946 	bl	800f4b8 <HAL_GetTick>
 801122c:	4602      	mov	r2, r0
 801122e:	693b      	ldr	r3, [r7, #16]
 8011230:	1ad3      	subs	r3, r2, r3
 8011232:	2b02      	cmp	r3, #2
 8011234:	d901      	bls.n	801123a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8011236:	2303      	movs	r3, #3
 8011238:	e05f      	b.n	80112fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801123a:	4b10      	ldr	r3, [pc, #64]	; (801127c <HAL_RCC_OscConfig+0x4d0>)
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011242:	2b00      	cmp	r3, #0
 8011244:	d0f0      	beq.n	8011228 <HAL_RCC_OscConfig+0x47c>
 8011246:	e057      	b.n	80112f8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011248:	4b0c      	ldr	r3, [pc, #48]	; (801127c <HAL_RCC_OscConfig+0x4d0>)
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	4a0b      	ldr	r2, [pc, #44]	; (801127c <HAL_RCC_OscConfig+0x4d0>)
 801124e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8011252:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011254:	f7fe f930 	bl	800f4b8 <HAL_GetTick>
 8011258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801125a:	e008      	b.n	801126e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801125c:	f7fe f92c 	bl	800f4b8 <HAL_GetTick>
 8011260:	4602      	mov	r2, r0
 8011262:	693b      	ldr	r3, [r7, #16]
 8011264:	1ad3      	subs	r3, r2, r3
 8011266:	2b02      	cmp	r3, #2
 8011268:	d901      	bls.n	801126e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 801126a:	2303      	movs	r3, #3
 801126c:	e045      	b.n	80112fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801126e:	4b03      	ldr	r3, [pc, #12]	; (801127c <HAL_RCC_OscConfig+0x4d0>)
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011276:	2b00      	cmp	r3, #0
 8011278:	d1f0      	bne.n	801125c <HAL_RCC_OscConfig+0x4b0>
 801127a:	e03d      	b.n	80112f8 <HAL_RCC_OscConfig+0x54c>
 801127c:	40023800 	.word	0x40023800
 8011280:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8011284:	4b1f      	ldr	r3, [pc, #124]	; (8011304 <HAL_RCC_OscConfig+0x558>)
 8011286:	685b      	ldr	r3, [r3, #4]
 8011288:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	699b      	ldr	r3, [r3, #24]
 801128e:	2b01      	cmp	r3, #1
 8011290:	d030      	beq.n	80112f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801129c:	429a      	cmp	r2, r3
 801129e:	d129      	bne.n	80112f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80112aa:	429a      	cmp	r2, r3
 80112ac:	d122      	bne.n	80112f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80112ae:	68fa      	ldr	r2, [r7, #12]
 80112b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80112b4:	4013      	ands	r3, r2
 80112b6:	687a      	ldr	r2, [r7, #4]
 80112b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80112ba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80112bc:	4293      	cmp	r3, r2
 80112be:	d119      	bne.n	80112f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112ca:	085b      	lsrs	r3, r3, #1
 80112cc:	3b01      	subs	r3, #1
 80112ce:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80112d0:	429a      	cmp	r2, r3
 80112d2:	d10f      	bne.n	80112f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112de:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80112e0:	429a      	cmp	r2, r3
 80112e2:	d107      	bne.n	80112f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112ee:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80112f0:	429a      	cmp	r2, r3
 80112f2:	d001      	beq.n	80112f8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80112f4:	2301      	movs	r3, #1
 80112f6:	e000      	b.n	80112fa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80112f8:	2300      	movs	r3, #0
}
 80112fa:	4618      	mov	r0, r3
 80112fc:	3718      	adds	r7, #24
 80112fe:	46bd      	mov	sp, r7
 8011300:	bd80      	pop	{r7, pc}
 8011302:	bf00      	nop
 8011304:	40023800 	.word	0x40023800

08011308 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011308:	b580      	push	{r7, lr}
 801130a:	b084      	sub	sp, #16
 801130c:	af00      	add	r7, sp, #0
 801130e:	6078      	str	r0, [r7, #4]
 8011310:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8011312:	2300      	movs	r3, #0
 8011314:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	2b00      	cmp	r3, #0
 801131a:	d101      	bne.n	8011320 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 801131c:	2301      	movs	r3, #1
 801131e:	e0d0      	b.n	80114c2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8011320:	4b6a      	ldr	r3, [pc, #424]	; (80114cc <HAL_RCC_ClockConfig+0x1c4>)
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	f003 030f 	and.w	r3, r3, #15
 8011328:	683a      	ldr	r2, [r7, #0]
 801132a:	429a      	cmp	r2, r3
 801132c:	d910      	bls.n	8011350 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801132e:	4b67      	ldr	r3, [pc, #412]	; (80114cc <HAL_RCC_ClockConfig+0x1c4>)
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	f023 020f 	bic.w	r2, r3, #15
 8011336:	4965      	ldr	r1, [pc, #404]	; (80114cc <HAL_RCC_ClockConfig+0x1c4>)
 8011338:	683b      	ldr	r3, [r7, #0]
 801133a:	4313      	orrs	r3, r2
 801133c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801133e:	4b63      	ldr	r3, [pc, #396]	; (80114cc <HAL_RCC_ClockConfig+0x1c4>)
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	f003 030f 	and.w	r3, r3, #15
 8011346:	683a      	ldr	r2, [r7, #0]
 8011348:	429a      	cmp	r2, r3
 801134a:	d001      	beq.n	8011350 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 801134c:	2301      	movs	r3, #1
 801134e:	e0b8      	b.n	80114c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	f003 0302 	and.w	r3, r3, #2
 8011358:	2b00      	cmp	r3, #0
 801135a:	d020      	beq.n	801139e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	f003 0304 	and.w	r3, r3, #4
 8011364:	2b00      	cmp	r3, #0
 8011366:	d005      	beq.n	8011374 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8011368:	4b59      	ldr	r3, [pc, #356]	; (80114d0 <HAL_RCC_ClockConfig+0x1c8>)
 801136a:	689b      	ldr	r3, [r3, #8]
 801136c:	4a58      	ldr	r2, [pc, #352]	; (80114d0 <HAL_RCC_ClockConfig+0x1c8>)
 801136e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8011372:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	f003 0308 	and.w	r3, r3, #8
 801137c:	2b00      	cmp	r3, #0
 801137e:	d005      	beq.n	801138c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8011380:	4b53      	ldr	r3, [pc, #332]	; (80114d0 <HAL_RCC_ClockConfig+0x1c8>)
 8011382:	689b      	ldr	r3, [r3, #8]
 8011384:	4a52      	ldr	r2, [pc, #328]	; (80114d0 <HAL_RCC_ClockConfig+0x1c8>)
 8011386:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801138a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801138c:	4b50      	ldr	r3, [pc, #320]	; (80114d0 <HAL_RCC_ClockConfig+0x1c8>)
 801138e:	689b      	ldr	r3, [r3, #8]
 8011390:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	689b      	ldr	r3, [r3, #8]
 8011398:	494d      	ldr	r1, [pc, #308]	; (80114d0 <HAL_RCC_ClockConfig+0x1c8>)
 801139a:	4313      	orrs	r3, r2
 801139c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	f003 0301 	and.w	r3, r3, #1
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d040      	beq.n	801142c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	685b      	ldr	r3, [r3, #4]
 80113ae:	2b01      	cmp	r3, #1
 80113b0:	d107      	bne.n	80113c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80113b2:	4b47      	ldr	r3, [pc, #284]	; (80114d0 <HAL_RCC_ClockConfig+0x1c8>)
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d115      	bne.n	80113ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80113be:	2301      	movs	r3, #1
 80113c0:	e07f      	b.n	80114c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	685b      	ldr	r3, [r3, #4]
 80113c6:	2b02      	cmp	r3, #2
 80113c8:	d107      	bne.n	80113da <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80113ca:	4b41      	ldr	r3, [pc, #260]	; (80114d0 <HAL_RCC_ClockConfig+0x1c8>)
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d109      	bne.n	80113ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80113d6:	2301      	movs	r3, #1
 80113d8:	e073      	b.n	80114c2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80113da:	4b3d      	ldr	r3, [pc, #244]	; (80114d0 <HAL_RCC_ClockConfig+0x1c8>)
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	f003 0302 	and.w	r3, r3, #2
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d101      	bne.n	80113ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80113e6:	2301      	movs	r3, #1
 80113e8:	e06b      	b.n	80114c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80113ea:	4b39      	ldr	r3, [pc, #228]	; (80114d0 <HAL_RCC_ClockConfig+0x1c8>)
 80113ec:	689b      	ldr	r3, [r3, #8]
 80113ee:	f023 0203 	bic.w	r2, r3, #3
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	685b      	ldr	r3, [r3, #4]
 80113f6:	4936      	ldr	r1, [pc, #216]	; (80114d0 <HAL_RCC_ClockConfig+0x1c8>)
 80113f8:	4313      	orrs	r3, r2
 80113fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80113fc:	f7fe f85c 	bl	800f4b8 <HAL_GetTick>
 8011400:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011402:	e00a      	b.n	801141a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011404:	f7fe f858 	bl	800f4b8 <HAL_GetTick>
 8011408:	4602      	mov	r2, r0
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	1ad3      	subs	r3, r2, r3
 801140e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011412:	4293      	cmp	r3, r2
 8011414:	d901      	bls.n	801141a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8011416:	2303      	movs	r3, #3
 8011418:	e053      	b.n	80114c2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801141a:	4b2d      	ldr	r3, [pc, #180]	; (80114d0 <HAL_RCC_ClockConfig+0x1c8>)
 801141c:	689b      	ldr	r3, [r3, #8]
 801141e:	f003 020c 	and.w	r2, r3, #12
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	685b      	ldr	r3, [r3, #4]
 8011426:	009b      	lsls	r3, r3, #2
 8011428:	429a      	cmp	r2, r3
 801142a:	d1eb      	bne.n	8011404 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801142c:	4b27      	ldr	r3, [pc, #156]	; (80114cc <HAL_RCC_ClockConfig+0x1c4>)
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	f003 030f 	and.w	r3, r3, #15
 8011434:	683a      	ldr	r2, [r7, #0]
 8011436:	429a      	cmp	r2, r3
 8011438:	d210      	bcs.n	801145c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801143a:	4b24      	ldr	r3, [pc, #144]	; (80114cc <HAL_RCC_ClockConfig+0x1c4>)
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	f023 020f 	bic.w	r2, r3, #15
 8011442:	4922      	ldr	r1, [pc, #136]	; (80114cc <HAL_RCC_ClockConfig+0x1c4>)
 8011444:	683b      	ldr	r3, [r7, #0]
 8011446:	4313      	orrs	r3, r2
 8011448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801144a:	4b20      	ldr	r3, [pc, #128]	; (80114cc <HAL_RCC_ClockConfig+0x1c4>)
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	f003 030f 	and.w	r3, r3, #15
 8011452:	683a      	ldr	r2, [r7, #0]
 8011454:	429a      	cmp	r2, r3
 8011456:	d001      	beq.n	801145c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8011458:	2301      	movs	r3, #1
 801145a:	e032      	b.n	80114c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	f003 0304 	and.w	r3, r3, #4
 8011464:	2b00      	cmp	r3, #0
 8011466:	d008      	beq.n	801147a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8011468:	4b19      	ldr	r3, [pc, #100]	; (80114d0 <HAL_RCC_ClockConfig+0x1c8>)
 801146a:	689b      	ldr	r3, [r3, #8]
 801146c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	68db      	ldr	r3, [r3, #12]
 8011474:	4916      	ldr	r1, [pc, #88]	; (80114d0 <HAL_RCC_ClockConfig+0x1c8>)
 8011476:	4313      	orrs	r3, r2
 8011478:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	f003 0308 	and.w	r3, r3, #8
 8011482:	2b00      	cmp	r3, #0
 8011484:	d009      	beq.n	801149a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8011486:	4b12      	ldr	r3, [pc, #72]	; (80114d0 <HAL_RCC_ClockConfig+0x1c8>)
 8011488:	689b      	ldr	r3, [r3, #8]
 801148a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	691b      	ldr	r3, [r3, #16]
 8011492:	00db      	lsls	r3, r3, #3
 8011494:	490e      	ldr	r1, [pc, #56]	; (80114d0 <HAL_RCC_ClockConfig+0x1c8>)
 8011496:	4313      	orrs	r3, r2
 8011498:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 801149a:	f000 f821 	bl	80114e0 <HAL_RCC_GetSysClockFreq>
 801149e:	4602      	mov	r2, r0
 80114a0:	4b0b      	ldr	r3, [pc, #44]	; (80114d0 <HAL_RCC_ClockConfig+0x1c8>)
 80114a2:	689b      	ldr	r3, [r3, #8]
 80114a4:	091b      	lsrs	r3, r3, #4
 80114a6:	f003 030f 	and.w	r3, r3, #15
 80114aa:	490a      	ldr	r1, [pc, #40]	; (80114d4 <HAL_RCC_ClockConfig+0x1cc>)
 80114ac:	5ccb      	ldrb	r3, [r1, r3]
 80114ae:	fa22 f303 	lsr.w	r3, r2, r3
 80114b2:	4a09      	ldr	r2, [pc, #36]	; (80114d8 <HAL_RCC_ClockConfig+0x1d0>)
 80114b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80114b6:	4b09      	ldr	r3, [pc, #36]	; (80114dc <HAL_RCC_ClockConfig+0x1d4>)
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	4618      	mov	r0, r3
 80114bc:	f7fd ffb8 	bl	800f430 <HAL_InitTick>

  return HAL_OK;
 80114c0:	2300      	movs	r3, #0
}
 80114c2:	4618      	mov	r0, r3
 80114c4:	3710      	adds	r7, #16
 80114c6:	46bd      	mov	sp, r7
 80114c8:	bd80      	pop	{r7, pc}
 80114ca:	bf00      	nop
 80114cc:	40023c00 	.word	0x40023c00
 80114d0:	40023800 	.word	0x40023800
 80114d4:	080281d8 	.word	0x080281d8
 80114d8:	20000018 	.word	0x20000018
 80114dc:	2000001c 	.word	0x2000001c

080114e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80114e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80114e4:	b084      	sub	sp, #16
 80114e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80114e8:	2300      	movs	r3, #0
 80114ea:	607b      	str	r3, [r7, #4]
 80114ec:	2300      	movs	r3, #0
 80114ee:	60fb      	str	r3, [r7, #12]
 80114f0:	2300      	movs	r3, #0
 80114f2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80114f4:	2300      	movs	r3, #0
 80114f6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80114f8:	4b67      	ldr	r3, [pc, #412]	; (8011698 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80114fa:	689b      	ldr	r3, [r3, #8]
 80114fc:	f003 030c 	and.w	r3, r3, #12
 8011500:	2b08      	cmp	r3, #8
 8011502:	d00d      	beq.n	8011520 <HAL_RCC_GetSysClockFreq+0x40>
 8011504:	2b08      	cmp	r3, #8
 8011506:	f200 80bd 	bhi.w	8011684 <HAL_RCC_GetSysClockFreq+0x1a4>
 801150a:	2b00      	cmp	r3, #0
 801150c:	d002      	beq.n	8011514 <HAL_RCC_GetSysClockFreq+0x34>
 801150e:	2b04      	cmp	r3, #4
 8011510:	d003      	beq.n	801151a <HAL_RCC_GetSysClockFreq+0x3a>
 8011512:	e0b7      	b.n	8011684 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8011514:	4b61      	ldr	r3, [pc, #388]	; (801169c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8011516:	60bb      	str	r3, [r7, #8]
      break;
 8011518:	e0b7      	b.n	801168a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801151a:	4b60      	ldr	r3, [pc, #384]	; (801169c <HAL_RCC_GetSysClockFreq+0x1bc>)
 801151c:	60bb      	str	r3, [r7, #8]
      break;
 801151e:	e0b4      	b.n	801168a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8011520:	4b5d      	ldr	r3, [pc, #372]	; (8011698 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8011522:	685b      	ldr	r3, [r3, #4]
 8011524:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011528:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 801152a:	4b5b      	ldr	r3, [pc, #364]	; (8011698 <HAL_RCC_GetSysClockFreq+0x1b8>)
 801152c:	685b      	ldr	r3, [r3, #4]
 801152e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011532:	2b00      	cmp	r3, #0
 8011534:	d04d      	beq.n	80115d2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8011536:	4b58      	ldr	r3, [pc, #352]	; (8011698 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8011538:	685b      	ldr	r3, [r3, #4]
 801153a:	099b      	lsrs	r3, r3, #6
 801153c:	461a      	mov	r2, r3
 801153e:	f04f 0300 	mov.w	r3, #0
 8011542:	f240 10ff 	movw	r0, #511	; 0x1ff
 8011546:	f04f 0100 	mov.w	r1, #0
 801154a:	ea02 0800 	and.w	r8, r2, r0
 801154e:	ea03 0901 	and.w	r9, r3, r1
 8011552:	4640      	mov	r0, r8
 8011554:	4649      	mov	r1, r9
 8011556:	f04f 0200 	mov.w	r2, #0
 801155a:	f04f 0300 	mov.w	r3, #0
 801155e:	014b      	lsls	r3, r1, #5
 8011560:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8011564:	0142      	lsls	r2, r0, #5
 8011566:	4610      	mov	r0, r2
 8011568:	4619      	mov	r1, r3
 801156a:	ebb0 0008 	subs.w	r0, r0, r8
 801156e:	eb61 0109 	sbc.w	r1, r1, r9
 8011572:	f04f 0200 	mov.w	r2, #0
 8011576:	f04f 0300 	mov.w	r3, #0
 801157a:	018b      	lsls	r3, r1, #6
 801157c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8011580:	0182      	lsls	r2, r0, #6
 8011582:	1a12      	subs	r2, r2, r0
 8011584:	eb63 0301 	sbc.w	r3, r3, r1
 8011588:	f04f 0000 	mov.w	r0, #0
 801158c:	f04f 0100 	mov.w	r1, #0
 8011590:	00d9      	lsls	r1, r3, #3
 8011592:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8011596:	00d0      	lsls	r0, r2, #3
 8011598:	4602      	mov	r2, r0
 801159a:	460b      	mov	r3, r1
 801159c:	eb12 0208 	adds.w	r2, r2, r8
 80115a0:	eb43 0309 	adc.w	r3, r3, r9
 80115a4:	f04f 0000 	mov.w	r0, #0
 80115a8:	f04f 0100 	mov.w	r1, #0
 80115ac:	0299      	lsls	r1, r3, #10
 80115ae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80115b2:	0290      	lsls	r0, r2, #10
 80115b4:	4602      	mov	r2, r0
 80115b6:	460b      	mov	r3, r1
 80115b8:	4610      	mov	r0, r2
 80115ba:	4619      	mov	r1, r3
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	461a      	mov	r2, r3
 80115c0:	f04f 0300 	mov.w	r3, #0
 80115c4:	f7f7 f8b0 	bl	8008728 <__aeabi_uldivmod>
 80115c8:	4602      	mov	r2, r0
 80115ca:	460b      	mov	r3, r1
 80115cc:	4613      	mov	r3, r2
 80115ce:	60fb      	str	r3, [r7, #12]
 80115d0:	e04a      	b.n	8011668 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80115d2:	4b31      	ldr	r3, [pc, #196]	; (8011698 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80115d4:	685b      	ldr	r3, [r3, #4]
 80115d6:	099b      	lsrs	r3, r3, #6
 80115d8:	461a      	mov	r2, r3
 80115da:	f04f 0300 	mov.w	r3, #0
 80115de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80115e2:	f04f 0100 	mov.w	r1, #0
 80115e6:	ea02 0400 	and.w	r4, r2, r0
 80115ea:	ea03 0501 	and.w	r5, r3, r1
 80115ee:	4620      	mov	r0, r4
 80115f0:	4629      	mov	r1, r5
 80115f2:	f04f 0200 	mov.w	r2, #0
 80115f6:	f04f 0300 	mov.w	r3, #0
 80115fa:	014b      	lsls	r3, r1, #5
 80115fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8011600:	0142      	lsls	r2, r0, #5
 8011602:	4610      	mov	r0, r2
 8011604:	4619      	mov	r1, r3
 8011606:	1b00      	subs	r0, r0, r4
 8011608:	eb61 0105 	sbc.w	r1, r1, r5
 801160c:	f04f 0200 	mov.w	r2, #0
 8011610:	f04f 0300 	mov.w	r3, #0
 8011614:	018b      	lsls	r3, r1, #6
 8011616:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 801161a:	0182      	lsls	r2, r0, #6
 801161c:	1a12      	subs	r2, r2, r0
 801161e:	eb63 0301 	sbc.w	r3, r3, r1
 8011622:	f04f 0000 	mov.w	r0, #0
 8011626:	f04f 0100 	mov.w	r1, #0
 801162a:	00d9      	lsls	r1, r3, #3
 801162c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8011630:	00d0      	lsls	r0, r2, #3
 8011632:	4602      	mov	r2, r0
 8011634:	460b      	mov	r3, r1
 8011636:	1912      	adds	r2, r2, r4
 8011638:	eb45 0303 	adc.w	r3, r5, r3
 801163c:	f04f 0000 	mov.w	r0, #0
 8011640:	f04f 0100 	mov.w	r1, #0
 8011644:	0299      	lsls	r1, r3, #10
 8011646:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 801164a:	0290      	lsls	r0, r2, #10
 801164c:	4602      	mov	r2, r0
 801164e:	460b      	mov	r3, r1
 8011650:	4610      	mov	r0, r2
 8011652:	4619      	mov	r1, r3
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	461a      	mov	r2, r3
 8011658:	f04f 0300 	mov.w	r3, #0
 801165c:	f7f7 f864 	bl	8008728 <__aeabi_uldivmod>
 8011660:	4602      	mov	r2, r0
 8011662:	460b      	mov	r3, r1
 8011664:	4613      	mov	r3, r2
 8011666:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8011668:	4b0b      	ldr	r3, [pc, #44]	; (8011698 <HAL_RCC_GetSysClockFreq+0x1b8>)
 801166a:	685b      	ldr	r3, [r3, #4]
 801166c:	0c1b      	lsrs	r3, r3, #16
 801166e:	f003 0303 	and.w	r3, r3, #3
 8011672:	3301      	adds	r3, #1
 8011674:	005b      	lsls	r3, r3, #1
 8011676:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8011678:	68fa      	ldr	r2, [r7, #12]
 801167a:	683b      	ldr	r3, [r7, #0]
 801167c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011680:	60bb      	str	r3, [r7, #8]
      break;
 8011682:	e002      	b.n	801168a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8011684:	4b05      	ldr	r3, [pc, #20]	; (801169c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8011686:	60bb      	str	r3, [r7, #8]
      break;
 8011688:	bf00      	nop
    }
  }
  return sysclockfreq;
 801168a:	68bb      	ldr	r3, [r7, #8]
}
 801168c:	4618      	mov	r0, r3
 801168e:	3710      	adds	r7, #16
 8011690:	46bd      	mov	sp, r7
 8011692:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8011696:	bf00      	nop
 8011698:	40023800 	.word	0x40023800
 801169c:	00f42400 	.word	0x00f42400

080116a0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80116a0:	b480      	push	{r7}
 80116a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80116a4:	4b03      	ldr	r3, [pc, #12]	; (80116b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80116a6:	681b      	ldr	r3, [r3, #0]
}
 80116a8:	4618      	mov	r0, r3
 80116aa:	46bd      	mov	sp, r7
 80116ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b0:	4770      	bx	lr
 80116b2:	bf00      	nop
 80116b4:	20000018 	.word	0x20000018

080116b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80116b8:	b580      	push	{r7, lr}
 80116ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80116bc:	f7ff fff0 	bl	80116a0 <HAL_RCC_GetHCLKFreq>
 80116c0:	4602      	mov	r2, r0
 80116c2:	4b05      	ldr	r3, [pc, #20]	; (80116d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80116c4:	689b      	ldr	r3, [r3, #8]
 80116c6:	0a9b      	lsrs	r3, r3, #10
 80116c8:	f003 0307 	and.w	r3, r3, #7
 80116cc:	4903      	ldr	r1, [pc, #12]	; (80116dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80116ce:	5ccb      	ldrb	r3, [r1, r3]
 80116d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80116d4:	4618      	mov	r0, r3
 80116d6:	bd80      	pop	{r7, pc}
 80116d8:	40023800 	.word	0x40023800
 80116dc:	080281e8 	.word	0x080281e8

080116e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80116e0:	b580      	push	{r7, lr}
 80116e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80116e4:	f7ff ffdc 	bl	80116a0 <HAL_RCC_GetHCLKFreq>
 80116e8:	4602      	mov	r2, r0
 80116ea:	4b05      	ldr	r3, [pc, #20]	; (8011700 <HAL_RCC_GetPCLK2Freq+0x20>)
 80116ec:	689b      	ldr	r3, [r3, #8]
 80116ee:	0b5b      	lsrs	r3, r3, #13
 80116f0:	f003 0307 	and.w	r3, r3, #7
 80116f4:	4903      	ldr	r1, [pc, #12]	; (8011704 <HAL_RCC_GetPCLK2Freq+0x24>)
 80116f6:	5ccb      	ldrb	r3, [r1, r3]
 80116f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80116fc:	4618      	mov	r0, r3
 80116fe:	bd80      	pop	{r7, pc}
 8011700:	40023800 	.word	0x40023800
 8011704:	080281e8 	.word	0x080281e8

08011708 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8011708:	b580      	push	{r7, lr}
 801170a:	b088      	sub	sp, #32
 801170c:	af00      	add	r7, sp, #0
 801170e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8011710:	2300      	movs	r3, #0
 8011712:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8011714:	2300      	movs	r3, #0
 8011716:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8011718:	2300      	movs	r3, #0
 801171a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 801171c:	2300      	movs	r3, #0
 801171e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8011720:	2300      	movs	r3, #0
 8011722:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	f003 0301 	and.w	r3, r3, #1
 801172c:	2b00      	cmp	r3, #0
 801172e:	d012      	beq.n	8011756 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8011730:	4b69      	ldr	r3, [pc, #420]	; (80118d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011732:	689b      	ldr	r3, [r3, #8]
 8011734:	4a68      	ldr	r2, [pc, #416]	; (80118d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011736:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801173a:	6093      	str	r3, [r2, #8]
 801173c:	4b66      	ldr	r3, [pc, #408]	; (80118d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801173e:	689a      	ldr	r2, [r3, #8]
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011744:	4964      	ldr	r1, [pc, #400]	; (80118d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011746:	4313      	orrs	r3, r2
 8011748:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801174e:	2b00      	cmp	r3, #0
 8011750:	d101      	bne.n	8011756 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8011752:	2301      	movs	r3, #1
 8011754:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801175e:	2b00      	cmp	r3, #0
 8011760:	d017      	beq.n	8011792 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8011762:	4b5d      	ldr	r3, [pc, #372]	; (80118d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011764:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011768:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011770:	4959      	ldr	r1, [pc, #356]	; (80118d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011772:	4313      	orrs	r3, r2
 8011774:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801177c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011780:	d101      	bne.n	8011786 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8011782:	2301      	movs	r3, #1
 8011784:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801178a:	2b00      	cmp	r3, #0
 801178c:	d101      	bne.n	8011792 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 801178e:	2301      	movs	r3, #1
 8011790:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801179a:	2b00      	cmp	r3, #0
 801179c:	d017      	beq.n	80117ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 801179e:	4b4e      	ldr	r3, [pc, #312]	; (80118d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80117a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80117a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117ac:	494a      	ldr	r1, [pc, #296]	; (80118d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80117ae:	4313      	orrs	r3, r2
 80117b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80117bc:	d101      	bne.n	80117c2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80117be:	2301      	movs	r3, #1
 80117c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d101      	bne.n	80117ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80117ca:	2301      	movs	r3, #1
 80117cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d001      	beq.n	80117de <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80117da:	2301      	movs	r3, #1
 80117dc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	f003 0320 	and.w	r3, r3, #32
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	f000 808b 	beq.w	8011902 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80117ec:	4b3a      	ldr	r3, [pc, #232]	; (80118d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80117ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117f0:	4a39      	ldr	r2, [pc, #228]	; (80118d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80117f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80117f6:	6413      	str	r3, [r2, #64]	; 0x40
 80117f8:	4b37      	ldr	r3, [pc, #220]	; (80118d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80117fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011800:	60bb      	str	r3, [r7, #8]
 8011802:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8011804:	4b35      	ldr	r3, [pc, #212]	; (80118dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	4a34      	ldr	r2, [pc, #208]	; (80118dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801180a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801180e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011810:	f7fd fe52 	bl	800f4b8 <HAL_GetTick>
 8011814:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8011816:	e008      	b.n	801182a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011818:	f7fd fe4e 	bl	800f4b8 <HAL_GetTick>
 801181c:	4602      	mov	r2, r0
 801181e:	697b      	ldr	r3, [r7, #20]
 8011820:	1ad3      	subs	r3, r2, r3
 8011822:	2b64      	cmp	r3, #100	; 0x64
 8011824:	d901      	bls.n	801182a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8011826:	2303      	movs	r3, #3
 8011828:	e38f      	b.n	8011f4a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 801182a:	4b2c      	ldr	r3, [pc, #176]	; (80118dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011832:	2b00      	cmp	r3, #0
 8011834:	d0f0      	beq.n	8011818 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8011836:	4b28      	ldr	r3, [pc, #160]	; (80118d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801183a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801183e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8011840:	693b      	ldr	r3, [r7, #16]
 8011842:	2b00      	cmp	r3, #0
 8011844:	d035      	beq.n	80118b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801184a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801184e:	693a      	ldr	r2, [r7, #16]
 8011850:	429a      	cmp	r2, r3
 8011852:	d02e      	beq.n	80118b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8011854:	4b20      	ldr	r3, [pc, #128]	; (80118d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011858:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801185c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801185e:	4b1e      	ldr	r3, [pc, #120]	; (80118d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011862:	4a1d      	ldr	r2, [pc, #116]	; (80118d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011868:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 801186a:	4b1b      	ldr	r3, [pc, #108]	; (80118d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801186c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801186e:	4a1a      	ldr	r2, [pc, #104]	; (80118d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011870:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011874:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8011876:	4a18      	ldr	r2, [pc, #96]	; (80118d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8011878:	693b      	ldr	r3, [r7, #16]
 801187a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 801187c:	4b16      	ldr	r3, [pc, #88]	; (80118d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801187e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011880:	f003 0301 	and.w	r3, r3, #1
 8011884:	2b01      	cmp	r3, #1
 8011886:	d114      	bne.n	80118b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011888:	f7fd fe16 	bl	800f4b8 <HAL_GetTick>
 801188c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801188e:	e00a      	b.n	80118a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011890:	f7fd fe12 	bl	800f4b8 <HAL_GetTick>
 8011894:	4602      	mov	r2, r0
 8011896:	697b      	ldr	r3, [r7, #20]
 8011898:	1ad3      	subs	r3, r2, r3
 801189a:	f241 3288 	movw	r2, #5000	; 0x1388
 801189e:	4293      	cmp	r3, r2
 80118a0:	d901      	bls.n	80118a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80118a2:	2303      	movs	r3, #3
 80118a4:	e351      	b.n	8011f4a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80118a6:	4b0c      	ldr	r3, [pc, #48]	; (80118d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80118a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80118aa:	f003 0302 	and.w	r3, r3, #2
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d0ee      	beq.n	8011890 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80118ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80118be:	d111      	bne.n	80118e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80118c0:	4b05      	ldr	r3, [pc, #20]	; (80118d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80118c2:	689b      	ldr	r3, [r3, #8]
 80118c4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80118cc:	4b04      	ldr	r3, [pc, #16]	; (80118e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80118ce:	400b      	ands	r3, r1
 80118d0:	4901      	ldr	r1, [pc, #4]	; (80118d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80118d2:	4313      	orrs	r3, r2
 80118d4:	608b      	str	r3, [r1, #8]
 80118d6:	e00b      	b.n	80118f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80118d8:	40023800 	.word	0x40023800
 80118dc:	40007000 	.word	0x40007000
 80118e0:	0ffffcff 	.word	0x0ffffcff
 80118e4:	4bb3      	ldr	r3, [pc, #716]	; (8011bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80118e6:	689b      	ldr	r3, [r3, #8]
 80118e8:	4ab2      	ldr	r2, [pc, #712]	; (8011bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80118ea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80118ee:	6093      	str	r3, [r2, #8]
 80118f0:	4bb0      	ldr	r3, [pc, #704]	; (8011bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80118f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80118fc:	49ad      	ldr	r1, [pc, #692]	; (8011bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80118fe:	4313      	orrs	r3, r2
 8011900:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	f003 0310 	and.w	r3, r3, #16
 801190a:	2b00      	cmp	r3, #0
 801190c:	d010      	beq.n	8011930 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801190e:	4ba9      	ldr	r3, [pc, #676]	; (8011bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011910:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011914:	4aa7      	ldr	r2, [pc, #668]	; (8011bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011916:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801191a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 801191e:	4ba5      	ldr	r3, [pc, #660]	; (8011bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011920:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011928:	49a2      	ldr	r1, [pc, #648]	; (8011bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 801192a:	4313      	orrs	r3, r2
 801192c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011938:	2b00      	cmp	r3, #0
 801193a:	d00a      	beq.n	8011952 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801193c:	4b9d      	ldr	r3, [pc, #628]	; (8011bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 801193e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011942:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801194a:	499a      	ldr	r1, [pc, #616]	; (8011bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 801194c:	4313      	orrs	r3, r2
 801194e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801195a:	2b00      	cmp	r3, #0
 801195c:	d00a      	beq.n	8011974 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801195e:	4b95      	ldr	r3, [pc, #596]	; (8011bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011964:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801196c:	4991      	ldr	r1, [pc, #580]	; (8011bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 801196e:	4313      	orrs	r3, r2
 8011970:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	681b      	ldr	r3, [r3, #0]
 8011978:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801197c:	2b00      	cmp	r3, #0
 801197e:	d00a      	beq.n	8011996 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8011980:	4b8c      	ldr	r3, [pc, #560]	; (8011bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011986:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801198e:	4989      	ldr	r1, [pc, #548]	; (8011bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011990:	4313      	orrs	r3, r2
 8011992:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d00a      	beq.n	80119b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80119a2:	4b84      	ldr	r3, [pc, #528]	; (8011bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80119a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80119a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119b0:	4980      	ldr	r1, [pc, #512]	; (8011bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80119b2:	4313      	orrs	r3, r2
 80119b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d00a      	beq.n	80119da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80119c4:	4b7b      	ldr	r3, [pc, #492]	; (8011bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80119c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80119ca:	f023 0203 	bic.w	r2, r3, #3
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80119d2:	4978      	ldr	r1, [pc, #480]	; (8011bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80119d4:	4313      	orrs	r3, r2
 80119d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d00a      	beq.n	80119fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80119e6:	4b73      	ldr	r3, [pc, #460]	; (8011bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80119e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80119ec:	f023 020c 	bic.w	r2, r3, #12
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80119f4:	496f      	ldr	r1, [pc, #444]	; (8011bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80119f6:	4313      	orrs	r3, r2
 80119f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d00a      	beq.n	8011a1e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8011a08:	4b6a      	ldr	r3, [pc, #424]	; (8011bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011a0e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011a16:	4967      	ldr	r1, [pc, #412]	; (8011bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011a18:	4313      	orrs	r3, r2
 8011a1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d00a      	beq.n	8011a40 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8011a2a:	4b62      	ldr	r3, [pc, #392]	; (8011bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011a30:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011a38:	495e      	ldr	r1, [pc, #376]	; (8011bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011a3a:	4313      	orrs	r3, r2
 8011a3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d00a      	beq.n	8011a62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8011a4c:	4b59      	ldr	r3, [pc, #356]	; (8011bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011a52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011a5a:	4956      	ldr	r1, [pc, #344]	; (8011bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011a5c:	4313      	orrs	r3, r2
 8011a5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d00a      	beq.n	8011a84 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8011a6e:	4b51      	ldr	r3, [pc, #324]	; (8011bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011a74:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a7c:	494d      	ldr	r1, [pc, #308]	; (8011bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011a7e:	4313      	orrs	r3, r2
 8011a80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d00a      	beq.n	8011aa6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8011a90:	4b48      	ldr	r3, [pc, #288]	; (8011bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011a96:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011a9e:	4945      	ldr	r1, [pc, #276]	; (8011bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011aa0:	4313      	orrs	r3, r2
 8011aa2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d00a      	beq.n	8011ac8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8011ab2:	4b40      	ldr	r3, [pc, #256]	; (8011bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011ab8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011ac0:	493c      	ldr	r1, [pc, #240]	; (8011bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011ac2:	4313      	orrs	r3, r2
 8011ac4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d00a      	beq.n	8011aea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8011ad4:	4b37      	ldr	r3, [pc, #220]	; (8011bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011ada:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011ae2:	4934      	ldr	r1, [pc, #208]	; (8011bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011ae4:	4313      	orrs	r3, r2
 8011ae6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d011      	beq.n	8011b1a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8011af6:	4b2f      	ldr	r3, [pc, #188]	; (8011bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011afc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011b04:	492b      	ldr	r1, [pc, #172]	; (8011bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011b06:	4313      	orrs	r3, r2
 8011b08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011b10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011b14:	d101      	bne.n	8011b1a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8011b16:	2301      	movs	r3, #1
 8011b18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	f003 0308 	and.w	r3, r3, #8
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d001      	beq.n	8011b2a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8011b26:	2301      	movs	r3, #1
 8011b28:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d00a      	beq.n	8011b4c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8011b36:	4b1f      	ldr	r3, [pc, #124]	; (8011bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b3c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011b44:	491b      	ldr	r1, [pc, #108]	; (8011bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011b46:	4313      	orrs	r3, r2
 8011b48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d00b      	beq.n	8011b70 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8011b58:	4b16      	ldr	r3, [pc, #88]	; (8011bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b5e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011b68:	4912      	ldr	r1, [pc, #72]	; (8011bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011b6a:	4313      	orrs	r3, r2
 8011b6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d00b      	beq.n	8011b94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8011b7c:	4b0d      	ldr	r3, [pc, #52]	; (8011bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b82:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011b8c:	4909      	ldr	r1, [pc, #36]	; (8011bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011b8e:	4313      	orrs	r3, r2
 8011b90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d00f      	beq.n	8011bc0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8011ba0:	4b04      	ldr	r3, [pc, #16]	; (8011bb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8011ba2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011ba6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011bb0:	e002      	b.n	8011bb8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8011bb2:	bf00      	nop
 8011bb4:	40023800 	.word	0x40023800
 8011bb8:	4986      	ldr	r1, [pc, #536]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8011bba:	4313      	orrs	r3, r2
 8011bbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d00b      	beq.n	8011be4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8011bcc:	4b81      	ldr	r3, [pc, #516]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8011bce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011bd2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011bdc:	497d      	ldr	r1, [pc, #500]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8011bde:	4313      	orrs	r3, r2
 8011be0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8011be4:	69fb      	ldr	r3, [r7, #28]
 8011be6:	2b01      	cmp	r3, #1
 8011be8:	d006      	beq.n	8011bf8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	f000 80d6 	beq.w	8011da4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8011bf8:	4b76      	ldr	r3, [pc, #472]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	4a75      	ldr	r2, [pc, #468]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8011bfe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011c02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011c04:	f7fd fc58 	bl	800f4b8 <HAL_GetTick>
 8011c08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8011c0a:	e008      	b.n	8011c1e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8011c0c:	f7fd fc54 	bl	800f4b8 <HAL_GetTick>
 8011c10:	4602      	mov	r2, r0
 8011c12:	697b      	ldr	r3, [r7, #20]
 8011c14:	1ad3      	subs	r3, r2, r3
 8011c16:	2b64      	cmp	r3, #100	; 0x64
 8011c18:	d901      	bls.n	8011c1e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8011c1a:	2303      	movs	r3, #3
 8011c1c:	e195      	b.n	8011f4a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8011c1e:	4b6d      	ldr	r3, [pc, #436]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d1f0      	bne.n	8011c0c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	f003 0301 	and.w	r3, r3, #1
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d021      	beq.n	8011c7a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d11d      	bne.n	8011c7a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8011c3e:	4b65      	ldr	r3, [pc, #404]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8011c40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011c44:	0c1b      	lsrs	r3, r3, #16
 8011c46:	f003 0303 	and.w	r3, r3, #3
 8011c4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8011c4c:	4b61      	ldr	r3, [pc, #388]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8011c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011c52:	0e1b      	lsrs	r3, r3, #24
 8011c54:	f003 030f 	and.w	r3, r3, #15
 8011c58:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	685b      	ldr	r3, [r3, #4]
 8011c5e:	019a      	lsls	r2, r3, #6
 8011c60:	693b      	ldr	r3, [r7, #16]
 8011c62:	041b      	lsls	r3, r3, #16
 8011c64:	431a      	orrs	r2, r3
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	061b      	lsls	r3, r3, #24
 8011c6a:	431a      	orrs	r2, r3
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	689b      	ldr	r3, [r3, #8]
 8011c70:	071b      	lsls	r3, r3, #28
 8011c72:	4958      	ldr	r1, [pc, #352]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8011c74:	4313      	orrs	r3, r2
 8011c76:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d004      	beq.n	8011c90 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011c8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011c8e:	d00a      	beq.n	8011ca6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d02e      	beq.n	8011cfa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ca0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011ca4:	d129      	bne.n	8011cfa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8011ca6:	4b4b      	ldr	r3, [pc, #300]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8011ca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011cac:	0c1b      	lsrs	r3, r3, #16
 8011cae:	f003 0303 	and.w	r3, r3, #3
 8011cb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8011cb4:	4b47      	ldr	r3, [pc, #284]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8011cb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011cba:	0f1b      	lsrs	r3, r3, #28
 8011cbc:	f003 0307 	and.w	r3, r3, #7
 8011cc0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	685b      	ldr	r3, [r3, #4]
 8011cc6:	019a      	lsls	r2, r3, #6
 8011cc8:	693b      	ldr	r3, [r7, #16]
 8011cca:	041b      	lsls	r3, r3, #16
 8011ccc:	431a      	orrs	r2, r3
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	68db      	ldr	r3, [r3, #12]
 8011cd2:	061b      	lsls	r3, r3, #24
 8011cd4:	431a      	orrs	r2, r3
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	071b      	lsls	r3, r3, #28
 8011cda:	493e      	ldr	r1, [pc, #248]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8011cdc:	4313      	orrs	r3, r2
 8011cde:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8011ce2:	4b3c      	ldr	r3, [pc, #240]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8011ce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011ce8:	f023 021f 	bic.w	r2, r3, #31
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cf0:	3b01      	subs	r3, #1
 8011cf2:	4938      	ldr	r1, [pc, #224]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8011cf4:	4313      	orrs	r3, r2
 8011cf6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d01d      	beq.n	8011d42 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8011d06:	4b33      	ldr	r3, [pc, #204]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8011d08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011d0c:	0e1b      	lsrs	r3, r3, #24
 8011d0e:	f003 030f 	and.w	r3, r3, #15
 8011d12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8011d14:	4b2f      	ldr	r3, [pc, #188]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8011d16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011d1a:	0f1b      	lsrs	r3, r3, #28
 8011d1c:	f003 0307 	and.w	r3, r3, #7
 8011d20:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	685b      	ldr	r3, [r3, #4]
 8011d26:	019a      	lsls	r2, r3, #6
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	691b      	ldr	r3, [r3, #16]
 8011d2c:	041b      	lsls	r3, r3, #16
 8011d2e:	431a      	orrs	r2, r3
 8011d30:	693b      	ldr	r3, [r7, #16]
 8011d32:	061b      	lsls	r3, r3, #24
 8011d34:	431a      	orrs	r2, r3
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	071b      	lsls	r3, r3, #28
 8011d3a:	4926      	ldr	r1, [pc, #152]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8011d3c:	4313      	orrs	r3, r2
 8011d3e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d011      	beq.n	8011d72 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	685b      	ldr	r3, [r3, #4]
 8011d52:	019a      	lsls	r2, r3, #6
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	691b      	ldr	r3, [r3, #16]
 8011d58:	041b      	lsls	r3, r3, #16
 8011d5a:	431a      	orrs	r2, r3
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	68db      	ldr	r3, [r3, #12]
 8011d60:	061b      	lsls	r3, r3, #24
 8011d62:	431a      	orrs	r2, r3
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	689b      	ldr	r3, [r3, #8]
 8011d68:	071b      	lsls	r3, r3, #28
 8011d6a:	491a      	ldr	r1, [pc, #104]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8011d6c:	4313      	orrs	r3, r2
 8011d6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8011d72:	4b18      	ldr	r3, [pc, #96]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	4a17      	ldr	r2, [pc, #92]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8011d78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011d7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011d7e:	f7fd fb9b 	bl	800f4b8 <HAL_GetTick>
 8011d82:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8011d84:	e008      	b.n	8011d98 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8011d86:	f7fd fb97 	bl	800f4b8 <HAL_GetTick>
 8011d8a:	4602      	mov	r2, r0
 8011d8c:	697b      	ldr	r3, [r7, #20]
 8011d8e:	1ad3      	subs	r3, r2, r3
 8011d90:	2b64      	cmp	r3, #100	; 0x64
 8011d92:	d901      	bls.n	8011d98 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8011d94:	2303      	movs	r3, #3
 8011d96:	e0d8      	b.n	8011f4a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8011d98:	4b0e      	ldr	r3, [pc, #56]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d0f0      	beq.n	8011d86 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8011da4:	69bb      	ldr	r3, [r7, #24]
 8011da6:	2b01      	cmp	r3, #1
 8011da8:	f040 80ce 	bne.w	8011f48 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8011dac:	4b09      	ldr	r3, [pc, #36]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	4a08      	ldr	r2, [pc, #32]	; (8011dd4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8011db2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011db6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011db8:	f7fd fb7e 	bl	800f4b8 <HAL_GetTick>
 8011dbc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8011dbe:	e00b      	b.n	8011dd8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8011dc0:	f7fd fb7a 	bl	800f4b8 <HAL_GetTick>
 8011dc4:	4602      	mov	r2, r0
 8011dc6:	697b      	ldr	r3, [r7, #20]
 8011dc8:	1ad3      	subs	r3, r2, r3
 8011dca:	2b64      	cmp	r3, #100	; 0x64
 8011dcc:	d904      	bls.n	8011dd8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8011dce:	2303      	movs	r3, #3
 8011dd0:	e0bb      	b.n	8011f4a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8011dd2:	bf00      	nop
 8011dd4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8011dd8:	4b5e      	ldr	r3, [pc, #376]	; (8011f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011de0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011de4:	d0ec      	beq.n	8011dc0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d003      	beq.n	8011dfa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d009      	beq.n	8011e0e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d02e      	beq.n	8011e64 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d12a      	bne.n	8011e64 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8011e0e:	4b51      	ldr	r3, [pc, #324]	; (8011f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8011e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011e14:	0c1b      	lsrs	r3, r3, #16
 8011e16:	f003 0303 	and.w	r3, r3, #3
 8011e1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8011e1c:	4b4d      	ldr	r3, [pc, #308]	; (8011f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8011e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011e22:	0f1b      	lsrs	r3, r3, #28
 8011e24:	f003 0307 	and.w	r3, r3, #7
 8011e28:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	695b      	ldr	r3, [r3, #20]
 8011e2e:	019a      	lsls	r2, r3, #6
 8011e30:	693b      	ldr	r3, [r7, #16]
 8011e32:	041b      	lsls	r3, r3, #16
 8011e34:	431a      	orrs	r2, r3
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	699b      	ldr	r3, [r3, #24]
 8011e3a:	061b      	lsls	r3, r3, #24
 8011e3c:	431a      	orrs	r2, r3
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	071b      	lsls	r3, r3, #28
 8011e42:	4944      	ldr	r1, [pc, #272]	; (8011f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8011e44:	4313      	orrs	r3, r2
 8011e46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8011e4a:	4b42      	ldr	r3, [pc, #264]	; (8011f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8011e4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011e50:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e58:	3b01      	subs	r3, #1
 8011e5a:	021b      	lsls	r3, r3, #8
 8011e5c:	493d      	ldr	r1, [pc, #244]	; (8011f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8011e5e:	4313      	orrs	r3, r2
 8011e60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d022      	beq.n	8011eb6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011e74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011e78:	d11d      	bne.n	8011eb6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8011e7a:	4b36      	ldr	r3, [pc, #216]	; (8011f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8011e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011e80:	0e1b      	lsrs	r3, r3, #24
 8011e82:	f003 030f 	and.w	r3, r3, #15
 8011e86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8011e88:	4b32      	ldr	r3, [pc, #200]	; (8011f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8011e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011e8e:	0f1b      	lsrs	r3, r3, #28
 8011e90:	f003 0307 	and.w	r3, r3, #7
 8011e94:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	695b      	ldr	r3, [r3, #20]
 8011e9a:	019a      	lsls	r2, r3, #6
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	6a1b      	ldr	r3, [r3, #32]
 8011ea0:	041b      	lsls	r3, r3, #16
 8011ea2:	431a      	orrs	r2, r3
 8011ea4:	693b      	ldr	r3, [r7, #16]
 8011ea6:	061b      	lsls	r3, r3, #24
 8011ea8:	431a      	orrs	r2, r3
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	071b      	lsls	r3, r3, #28
 8011eae:	4929      	ldr	r1, [pc, #164]	; (8011f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8011eb0:	4313      	orrs	r3, r2
 8011eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	f003 0308 	and.w	r3, r3, #8
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d028      	beq.n	8011f14 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8011ec2:	4b24      	ldr	r3, [pc, #144]	; (8011f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8011ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011ec8:	0e1b      	lsrs	r3, r3, #24
 8011eca:	f003 030f 	and.w	r3, r3, #15
 8011ece:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8011ed0:	4b20      	ldr	r3, [pc, #128]	; (8011f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8011ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011ed6:	0c1b      	lsrs	r3, r3, #16
 8011ed8:	f003 0303 	and.w	r3, r3, #3
 8011edc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	695b      	ldr	r3, [r3, #20]
 8011ee2:	019a      	lsls	r2, r3, #6
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	041b      	lsls	r3, r3, #16
 8011ee8:	431a      	orrs	r2, r3
 8011eea:	693b      	ldr	r3, [r7, #16]
 8011eec:	061b      	lsls	r3, r3, #24
 8011eee:	431a      	orrs	r2, r3
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	69db      	ldr	r3, [r3, #28]
 8011ef4:	071b      	lsls	r3, r3, #28
 8011ef6:	4917      	ldr	r1, [pc, #92]	; (8011f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8011ef8:	4313      	orrs	r3, r2
 8011efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8011efe:	4b15      	ldr	r3, [pc, #84]	; (8011f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8011f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011f04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f0c:	4911      	ldr	r1, [pc, #68]	; (8011f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8011f0e:	4313      	orrs	r3, r2
 8011f10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8011f14:	4b0f      	ldr	r3, [pc, #60]	; (8011f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	4a0e      	ldr	r2, [pc, #56]	; (8011f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8011f1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011f1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011f20:	f7fd faca 	bl	800f4b8 <HAL_GetTick>
 8011f24:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8011f26:	e008      	b.n	8011f3a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8011f28:	f7fd fac6 	bl	800f4b8 <HAL_GetTick>
 8011f2c:	4602      	mov	r2, r0
 8011f2e:	697b      	ldr	r3, [r7, #20]
 8011f30:	1ad3      	subs	r3, r2, r3
 8011f32:	2b64      	cmp	r3, #100	; 0x64
 8011f34:	d901      	bls.n	8011f3a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8011f36:	2303      	movs	r3, #3
 8011f38:	e007      	b.n	8011f4a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8011f3a:	4b06      	ldr	r3, [pc, #24]	; (8011f54 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011f42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011f46:	d1ef      	bne.n	8011f28 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8011f48:	2300      	movs	r3, #0
}
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	3720      	adds	r7, #32
 8011f4e:	46bd      	mov	sp, r7
 8011f50:	bd80      	pop	{r7, pc}
 8011f52:	bf00      	nop
 8011f54:	40023800 	.word	0x40023800

08011f58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b084      	sub	sp, #16
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d101      	bne.n	8011f6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8011f66:	2301      	movs	r3, #1
 8011f68:	e09d      	b.n	80120a6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d108      	bne.n	8011f84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	685b      	ldr	r3, [r3, #4]
 8011f76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011f7a:	d009      	beq.n	8011f90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	2200      	movs	r2, #0
 8011f80:	61da      	str	r2, [r3, #28]
 8011f82:	e005      	b.n	8011f90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	2200      	movs	r2, #0
 8011f88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	2200      	movs	r2, #0
 8011f8e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	2200      	movs	r2, #0
 8011f94:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8011f9c:	b2db      	uxtb	r3, r3
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d106      	bne.n	8011fb0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	2200      	movs	r2, #0
 8011fa6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8011faa:	6878      	ldr	r0, [r7, #4]
 8011fac:	f7fc ffbc 	bl	800ef28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	2202      	movs	r2, #2
 8011fb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	681a      	ldr	r2, [r3, #0]
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011fc6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	68db      	ldr	r3, [r3, #12]
 8011fcc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8011fd0:	d902      	bls.n	8011fd8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8011fd2:	2300      	movs	r3, #0
 8011fd4:	60fb      	str	r3, [r7, #12]
 8011fd6:	e002      	b.n	8011fde <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8011fd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011fdc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	68db      	ldr	r3, [r3, #12]
 8011fe2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8011fe6:	d007      	beq.n	8011ff8 <HAL_SPI_Init+0xa0>
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	68db      	ldr	r3, [r3, #12]
 8011fec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8011ff0:	d002      	beq.n	8011ff8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	2200      	movs	r2, #0
 8011ff6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	685b      	ldr	r3, [r3, #4]
 8011ffc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	689b      	ldr	r3, [r3, #8]
 8012004:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8012008:	431a      	orrs	r2, r3
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	691b      	ldr	r3, [r3, #16]
 801200e:	f003 0302 	and.w	r3, r3, #2
 8012012:	431a      	orrs	r2, r3
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	695b      	ldr	r3, [r3, #20]
 8012018:	f003 0301 	and.w	r3, r3, #1
 801201c:	431a      	orrs	r2, r3
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	699b      	ldr	r3, [r3, #24]
 8012022:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012026:	431a      	orrs	r2, r3
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	69db      	ldr	r3, [r3, #28]
 801202c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012030:	431a      	orrs	r2, r3
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	6a1b      	ldr	r3, [r3, #32]
 8012036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801203a:	ea42 0103 	orr.w	r1, r2, r3
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012042:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	430a      	orrs	r2, r1
 801204c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	699b      	ldr	r3, [r3, #24]
 8012052:	0c1b      	lsrs	r3, r3, #16
 8012054:	f003 0204 	and.w	r2, r3, #4
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801205c:	f003 0310 	and.w	r3, r3, #16
 8012060:	431a      	orrs	r2, r3
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012066:	f003 0308 	and.w	r3, r3, #8
 801206a:	431a      	orrs	r2, r3
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	68db      	ldr	r3, [r3, #12]
 8012070:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8012074:	ea42 0103 	orr.w	r1, r2, r3
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	430a      	orrs	r2, r1
 8012084:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	69da      	ldr	r2, [r3, #28]
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012094:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	2200      	movs	r2, #0
 801209a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	2201      	movs	r2, #1
 80120a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80120a4:	2300      	movs	r3, #0
}
 80120a6:	4618      	mov	r0, r3
 80120a8:	3710      	adds	r7, #16
 80120aa:	46bd      	mov	sp, r7
 80120ac:	bd80      	pop	{r7, pc}

080120ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80120ae:	b580      	push	{r7, lr}
 80120b0:	b088      	sub	sp, #32
 80120b2:	af00      	add	r7, sp, #0
 80120b4:	60f8      	str	r0, [r7, #12]
 80120b6:	60b9      	str	r1, [r7, #8]
 80120b8:	603b      	str	r3, [r7, #0]
 80120ba:	4613      	mov	r3, r2
 80120bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80120be:	2300      	movs	r3, #0
 80120c0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80120c8:	2b01      	cmp	r3, #1
 80120ca:	d101      	bne.n	80120d0 <HAL_SPI_Transmit+0x22>
 80120cc:	2302      	movs	r3, #2
 80120ce:	e158      	b.n	8012382 <HAL_SPI_Transmit+0x2d4>
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	2201      	movs	r2, #1
 80120d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80120d8:	f7fd f9ee 	bl	800f4b8 <HAL_GetTick>
 80120dc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80120de:	88fb      	ldrh	r3, [r7, #6]
 80120e0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80120e8:	b2db      	uxtb	r3, r3
 80120ea:	2b01      	cmp	r3, #1
 80120ec:	d002      	beq.n	80120f4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80120ee:	2302      	movs	r3, #2
 80120f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80120f2:	e13d      	b.n	8012370 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80120f4:	68bb      	ldr	r3, [r7, #8]
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d002      	beq.n	8012100 <HAL_SPI_Transmit+0x52>
 80120fa:	88fb      	ldrh	r3, [r7, #6]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d102      	bne.n	8012106 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8012100:	2301      	movs	r3, #1
 8012102:	77fb      	strb	r3, [r7, #31]
    goto error;
 8012104:	e134      	b.n	8012370 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	2203      	movs	r2, #3
 801210a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	2200      	movs	r2, #0
 8012112:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	68ba      	ldr	r2, [r7, #8]
 8012118:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	88fa      	ldrh	r2, [r7, #6]
 801211e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	88fa      	ldrh	r2, [r7, #6]
 8012124:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	2200      	movs	r2, #0
 801212a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	2200      	movs	r2, #0
 8012130:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	2200      	movs	r2, #0
 8012138:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	2200      	movs	r2, #0
 8012140:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	2200      	movs	r2, #0
 8012146:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	689b      	ldr	r3, [r3, #8]
 801214c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012150:	d10f      	bne.n	8012172 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	681a      	ldr	r2, [r3, #0]
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012160:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	681a      	ldr	r2, [r3, #0]
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012170:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801217c:	2b40      	cmp	r3, #64	; 0x40
 801217e:	d007      	beq.n	8012190 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	681a      	ldr	r2, [r3, #0]
 8012186:	68fb      	ldr	r3, [r7, #12]
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801218e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	68db      	ldr	r3, [r3, #12]
 8012194:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8012198:	d94b      	bls.n	8012232 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	685b      	ldr	r3, [r3, #4]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d002      	beq.n	80121a8 <HAL_SPI_Transmit+0xfa>
 80121a2:	8afb      	ldrh	r3, [r7, #22]
 80121a4:	2b01      	cmp	r3, #1
 80121a6:	d13e      	bne.n	8012226 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121ac:	881a      	ldrh	r2, [r3, #0]
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121b8:	1c9a      	adds	r2, r3, #2
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80121c2:	b29b      	uxth	r3, r3
 80121c4:	3b01      	subs	r3, #1
 80121c6:	b29a      	uxth	r2, r3
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80121cc:	e02b      	b.n	8012226 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	689b      	ldr	r3, [r3, #8]
 80121d4:	f003 0302 	and.w	r3, r3, #2
 80121d8:	2b02      	cmp	r3, #2
 80121da:	d112      	bne.n	8012202 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121e0:	881a      	ldrh	r2, [r3, #0]
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121ec:	1c9a      	adds	r2, r3, #2
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80121f6:	b29b      	uxth	r3, r3
 80121f8:	3b01      	subs	r3, #1
 80121fa:	b29a      	uxth	r2, r3
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8012200:	e011      	b.n	8012226 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012202:	f7fd f959 	bl	800f4b8 <HAL_GetTick>
 8012206:	4602      	mov	r2, r0
 8012208:	69bb      	ldr	r3, [r7, #24]
 801220a:	1ad3      	subs	r3, r2, r3
 801220c:	683a      	ldr	r2, [r7, #0]
 801220e:	429a      	cmp	r2, r3
 8012210:	d803      	bhi.n	801221a <HAL_SPI_Transmit+0x16c>
 8012212:	683b      	ldr	r3, [r7, #0]
 8012214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012218:	d102      	bne.n	8012220 <HAL_SPI_Transmit+0x172>
 801221a:	683b      	ldr	r3, [r7, #0]
 801221c:	2b00      	cmp	r3, #0
 801221e:	d102      	bne.n	8012226 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8012220:	2303      	movs	r3, #3
 8012222:	77fb      	strb	r3, [r7, #31]
          goto error;
 8012224:	e0a4      	b.n	8012370 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801222a:	b29b      	uxth	r3, r3
 801222c:	2b00      	cmp	r3, #0
 801222e:	d1ce      	bne.n	80121ce <HAL_SPI_Transmit+0x120>
 8012230:	e07c      	b.n	801232c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	685b      	ldr	r3, [r3, #4]
 8012236:	2b00      	cmp	r3, #0
 8012238:	d002      	beq.n	8012240 <HAL_SPI_Transmit+0x192>
 801223a:	8afb      	ldrh	r3, [r7, #22]
 801223c:	2b01      	cmp	r3, #1
 801223e:	d170      	bne.n	8012322 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012244:	b29b      	uxth	r3, r3
 8012246:	2b01      	cmp	r3, #1
 8012248:	d912      	bls.n	8012270 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801224e:	881a      	ldrh	r2, [r3, #0]
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801225a:	1c9a      	adds	r2, r3, #2
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012264:	b29b      	uxth	r3, r3
 8012266:	3b02      	subs	r3, #2
 8012268:	b29a      	uxth	r2, r3
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	87da      	strh	r2, [r3, #62]	; 0x3e
 801226e:	e058      	b.n	8012322 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	330c      	adds	r3, #12
 801227a:	7812      	ldrb	r2, [r2, #0]
 801227c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012282:	1c5a      	adds	r2, r3, #1
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801228c:	b29b      	uxth	r3, r3
 801228e:	3b01      	subs	r3, #1
 8012290:	b29a      	uxth	r2, r3
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8012296:	e044      	b.n	8012322 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	689b      	ldr	r3, [r3, #8]
 801229e:	f003 0302 	and.w	r3, r3, #2
 80122a2:	2b02      	cmp	r3, #2
 80122a4:	d12b      	bne.n	80122fe <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80122aa:	b29b      	uxth	r3, r3
 80122ac:	2b01      	cmp	r3, #1
 80122ae:	d912      	bls.n	80122d6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80122b4:	881a      	ldrh	r2, [r3, #0]
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80122c0:	1c9a      	adds	r2, r3, #2
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80122ca:	b29b      	uxth	r3, r3
 80122cc:	3b02      	subs	r3, #2
 80122ce:	b29a      	uxth	r2, r3
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80122d4:	e025      	b.n	8012322 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	330c      	adds	r3, #12
 80122e0:	7812      	ldrb	r2, [r2, #0]
 80122e2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80122e8:	1c5a      	adds	r2, r3, #1
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80122f2:	b29b      	uxth	r3, r3
 80122f4:	3b01      	subs	r3, #1
 80122f6:	b29a      	uxth	r2, r3
 80122f8:	68fb      	ldr	r3, [r7, #12]
 80122fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80122fc:	e011      	b.n	8012322 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80122fe:	f7fd f8db 	bl	800f4b8 <HAL_GetTick>
 8012302:	4602      	mov	r2, r0
 8012304:	69bb      	ldr	r3, [r7, #24]
 8012306:	1ad3      	subs	r3, r2, r3
 8012308:	683a      	ldr	r2, [r7, #0]
 801230a:	429a      	cmp	r2, r3
 801230c:	d803      	bhi.n	8012316 <HAL_SPI_Transmit+0x268>
 801230e:	683b      	ldr	r3, [r7, #0]
 8012310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012314:	d102      	bne.n	801231c <HAL_SPI_Transmit+0x26e>
 8012316:	683b      	ldr	r3, [r7, #0]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d102      	bne.n	8012322 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 801231c:	2303      	movs	r3, #3
 801231e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8012320:	e026      	b.n	8012370 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012326:	b29b      	uxth	r3, r3
 8012328:	2b00      	cmp	r3, #0
 801232a:	d1b5      	bne.n	8012298 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801232c:	69ba      	ldr	r2, [r7, #24]
 801232e:	6839      	ldr	r1, [r7, #0]
 8012330:	68f8      	ldr	r0, [r7, #12]
 8012332:	f000 fe6f 	bl	8013014 <SPI_EndRxTxTransaction>
 8012336:	4603      	mov	r3, r0
 8012338:	2b00      	cmp	r3, #0
 801233a:	d002      	beq.n	8012342 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	2220      	movs	r2, #32
 8012340:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	689b      	ldr	r3, [r3, #8]
 8012346:	2b00      	cmp	r3, #0
 8012348:	d10a      	bne.n	8012360 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801234a:	2300      	movs	r3, #0
 801234c:	613b      	str	r3, [r7, #16]
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	68db      	ldr	r3, [r3, #12]
 8012354:	613b      	str	r3, [r7, #16]
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	689b      	ldr	r3, [r3, #8]
 801235c:	613b      	str	r3, [r7, #16]
 801235e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012364:	2b00      	cmp	r3, #0
 8012366:	d002      	beq.n	801236e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8012368:	2301      	movs	r3, #1
 801236a:	77fb      	strb	r3, [r7, #31]
 801236c:	e000      	b.n	8012370 <HAL_SPI_Transmit+0x2c2>
  }

error:
 801236e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	2201      	movs	r2, #1
 8012374:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	2200      	movs	r2, #0
 801237c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8012380:	7ffb      	ldrb	r3, [r7, #31]
}
 8012382:	4618      	mov	r0, r3
 8012384:	3720      	adds	r7, #32
 8012386:	46bd      	mov	sp, r7
 8012388:	bd80      	pop	{r7, pc}

0801238a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801238a:	b580      	push	{r7, lr}
 801238c:	b08a      	sub	sp, #40	; 0x28
 801238e:	af00      	add	r7, sp, #0
 8012390:	60f8      	str	r0, [r7, #12]
 8012392:	60b9      	str	r1, [r7, #8]
 8012394:	607a      	str	r2, [r7, #4]
 8012396:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8012398:	2301      	movs	r3, #1
 801239a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801239c:	2300      	movs	r3, #0
 801239e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80123a8:	2b01      	cmp	r3, #1
 80123aa:	d101      	bne.n	80123b0 <HAL_SPI_TransmitReceive+0x26>
 80123ac:	2302      	movs	r3, #2
 80123ae:	e1fb      	b.n	80127a8 <HAL_SPI_TransmitReceive+0x41e>
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	2201      	movs	r2, #1
 80123b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80123b8:	f7fd f87e 	bl	800f4b8 <HAL_GetTick>
 80123bc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80123c4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	685b      	ldr	r3, [r3, #4]
 80123ca:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80123cc:	887b      	ldrh	r3, [r7, #2]
 80123ce:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80123d0:	887b      	ldrh	r3, [r7, #2]
 80123d2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80123d4:	7efb      	ldrb	r3, [r7, #27]
 80123d6:	2b01      	cmp	r3, #1
 80123d8:	d00e      	beq.n	80123f8 <HAL_SPI_TransmitReceive+0x6e>
 80123da:	697b      	ldr	r3, [r7, #20]
 80123dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80123e0:	d106      	bne.n	80123f0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	689b      	ldr	r3, [r3, #8]
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d102      	bne.n	80123f0 <HAL_SPI_TransmitReceive+0x66>
 80123ea:	7efb      	ldrb	r3, [r7, #27]
 80123ec:	2b04      	cmp	r3, #4
 80123ee:	d003      	beq.n	80123f8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80123f0:	2302      	movs	r3, #2
 80123f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80123f6:	e1cd      	b.n	8012794 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80123f8:	68bb      	ldr	r3, [r7, #8]
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d005      	beq.n	801240a <HAL_SPI_TransmitReceive+0x80>
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	2b00      	cmp	r3, #0
 8012402:	d002      	beq.n	801240a <HAL_SPI_TransmitReceive+0x80>
 8012404:	887b      	ldrh	r3, [r7, #2]
 8012406:	2b00      	cmp	r3, #0
 8012408:	d103      	bne.n	8012412 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 801240a:	2301      	movs	r3, #1
 801240c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8012410:	e1c0      	b.n	8012794 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8012418:	b2db      	uxtb	r3, r3
 801241a:	2b04      	cmp	r3, #4
 801241c:	d003      	beq.n	8012426 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	2205      	movs	r2, #5
 8012422:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	2200      	movs	r2, #0
 801242a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	687a      	ldr	r2, [r7, #4]
 8012430:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	887a      	ldrh	r2, [r7, #2]
 8012436:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	887a      	ldrh	r2, [r7, #2]
 801243e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	68ba      	ldr	r2, [r7, #8]
 8012446:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	887a      	ldrh	r2, [r7, #2]
 801244c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	887a      	ldrh	r2, [r7, #2]
 8012452:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	2200      	movs	r2, #0
 8012458:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	2200      	movs	r2, #0
 801245e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	68db      	ldr	r3, [r3, #12]
 8012464:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8012468:	d802      	bhi.n	8012470 <HAL_SPI_TransmitReceive+0xe6>
 801246a:	8a3b      	ldrh	r3, [r7, #16]
 801246c:	2b01      	cmp	r3, #1
 801246e:	d908      	bls.n	8012482 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	685a      	ldr	r2, [r3, #4]
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801247e:	605a      	str	r2, [r3, #4]
 8012480:	e007      	b.n	8012492 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	685a      	ldr	r2, [r3, #4]
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8012490:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801249c:	2b40      	cmp	r3, #64	; 0x40
 801249e:	d007      	beq.n	80124b0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	681a      	ldr	r2, [r3, #0]
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80124ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	68db      	ldr	r3, [r3, #12]
 80124b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80124b8:	d97c      	bls.n	80125b4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	685b      	ldr	r3, [r3, #4]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d002      	beq.n	80124c8 <HAL_SPI_TransmitReceive+0x13e>
 80124c2:	8a7b      	ldrh	r3, [r7, #18]
 80124c4:	2b01      	cmp	r3, #1
 80124c6:	d169      	bne.n	801259c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124cc:	881a      	ldrh	r2, [r3, #0]
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124d8:	1c9a      	adds	r2, r3, #2
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80124e2:	b29b      	uxth	r3, r3
 80124e4:	3b01      	subs	r3, #1
 80124e6:	b29a      	uxth	r2, r3
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80124ec:	e056      	b.n	801259c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	689b      	ldr	r3, [r3, #8]
 80124f4:	f003 0302 	and.w	r3, r3, #2
 80124f8:	2b02      	cmp	r3, #2
 80124fa:	d11b      	bne.n	8012534 <HAL_SPI_TransmitReceive+0x1aa>
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012500:	b29b      	uxth	r3, r3
 8012502:	2b00      	cmp	r3, #0
 8012504:	d016      	beq.n	8012534 <HAL_SPI_TransmitReceive+0x1aa>
 8012506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012508:	2b01      	cmp	r3, #1
 801250a:	d113      	bne.n	8012534 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012510:	881a      	ldrh	r2, [r3, #0]
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801251c:	1c9a      	adds	r2, r3, #2
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012526:	b29b      	uxth	r3, r3
 8012528:	3b01      	subs	r3, #1
 801252a:	b29a      	uxth	r2, r3
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8012530:	2300      	movs	r3, #0
 8012532:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	689b      	ldr	r3, [r3, #8]
 801253a:	f003 0301 	and.w	r3, r3, #1
 801253e:	2b01      	cmp	r3, #1
 8012540:	d11c      	bne.n	801257c <HAL_SPI_TransmitReceive+0x1f2>
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8012548:	b29b      	uxth	r3, r3
 801254a:	2b00      	cmp	r3, #0
 801254c:	d016      	beq.n	801257c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	68da      	ldr	r2, [r3, #12]
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012558:	b292      	uxth	r2, r2
 801255a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012560:	1c9a      	adds	r2, r3, #2
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801256c:	b29b      	uxth	r3, r3
 801256e:	3b01      	subs	r3, #1
 8012570:	b29a      	uxth	r2, r3
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8012578:	2301      	movs	r3, #1
 801257a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801257c:	f7fc ff9c 	bl	800f4b8 <HAL_GetTick>
 8012580:	4602      	mov	r2, r0
 8012582:	69fb      	ldr	r3, [r7, #28]
 8012584:	1ad3      	subs	r3, r2, r3
 8012586:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012588:	429a      	cmp	r2, r3
 801258a:	d807      	bhi.n	801259c <HAL_SPI_TransmitReceive+0x212>
 801258c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801258e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012592:	d003      	beq.n	801259c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8012594:	2303      	movs	r3, #3
 8012596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801259a:	e0fb      	b.n	8012794 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80125a0:	b29b      	uxth	r3, r3
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d1a3      	bne.n	80124ee <HAL_SPI_TransmitReceive+0x164>
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80125ac:	b29b      	uxth	r3, r3
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d19d      	bne.n	80124ee <HAL_SPI_TransmitReceive+0x164>
 80125b2:	e0df      	b.n	8012774 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	685b      	ldr	r3, [r3, #4]
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d003      	beq.n	80125c4 <HAL_SPI_TransmitReceive+0x23a>
 80125bc:	8a7b      	ldrh	r3, [r7, #18]
 80125be:	2b01      	cmp	r3, #1
 80125c0:	f040 80cb 	bne.w	801275a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80125c8:	b29b      	uxth	r3, r3
 80125ca:	2b01      	cmp	r3, #1
 80125cc:	d912      	bls.n	80125f4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80125d2:	881a      	ldrh	r2, [r3, #0]
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80125de:	1c9a      	adds	r2, r3, #2
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80125e8:	b29b      	uxth	r3, r3
 80125ea:	3b02      	subs	r3, #2
 80125ec:	b29a      	uxth	r2, r3
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80125f2:	e0b2      	b.n	801275a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	330c      	adds	r3, #12
 80125fe:	7812      	ldrb	r2, [r2, #0]
 8012600:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012606:	1c5a      	adds	r2, r3, #1
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012610:	b29b      	uxth	r3, r3
 8012612:	3b01      	subs	r3, #1
 8012614:	b29a      	uxth	r2, r3
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801261a:	e09e      	b.n	801275a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	689b      	ldr	r3, [r3, #8]
 8012622:	f003 0302 	and.w	r3, r3, #2
 8012626:	2b02      	cmp	r3, #2
 8012628:	d134      	bne.n	8012694 <HAL_SPI_TransmitReceive+0x30a>
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801262e:	b29b      	uxth	r3, r3
 8012630:	2b00      	cmp	r3, #0
 8012632:	d02f      	beq.n	8012694 <HAL_SPI_TransmitReceive+0x30a>
 8012634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012636:	2b01      	cmp	r3, #1
 8012638:	d12c      	bne.n	8012694 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801263e:	b29b      	uxth	r3, r3
 8012640:	2b01      	cmp	r3, #1
 8012642:	d912      	bls.n	801266a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012648:	881a      	ldrh	r2, [r3, #0]
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012654:	1c9a      	adds	r2, r3, #2
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801265e:	b29b      	uxth	r3, r3
 8012660:	3b02      	subs	r3, #2
 8012662:	b29a      	uxth	r2, r3
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	87da      	strh	r2, [r3, #62]	; 0x3e
 8012668:	e012      	b.n	8012690 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801266e:	68fb      	ldr	r3, [r7, #12]
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	330c      	adds	r3, #12
 8012674:	7812      	ldrb	r2, [r2, #0]
 8012676:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801267c:	1c5a      	adds	r2, r3, #1
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012686:	b29b      	uxth	r3, r3
 8012688:	3b01      	subs	r3, #1
 801268a:	b29a      	uxth	r2, r3
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8012690:	2300      	movs	r3, #0
 8012692:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	689b      	ldr	r3, [r3, #8]
 801269a:	f003 0301 	and.w	r3, r3, #1
 801269e:	2b01      	cmp	r3, #1
 80126a0:	d148      	bne.n	8012734 <HAL_SPI_TransmitReceive+0x3aa>
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80126a8:	b29b      	uxth	r3, r3
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d042      	beq.n	8012734 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80126b4:	b29b      	uxth	r3, r3
 80126b6:	2b01      	cmp	r3, #1
 80126b8:	d923      	bls.n	8012702 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	68da      	ldr	r2, [r3, #12]
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126c4:	b292      	uxth	r2, r2
 80126c6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126cc:	1c9a      	adds	r2, r3, #2
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80126d8:	b29b      	uxth	r3, r3
 80126da:	3b02      	subs	r3, #2
 80126dc:	b29a      	uxth	r2, r3
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80126ea:	b29b      	uxth	r3, r3
 80126ec:	2b01      	cmp	r3, #1
 80126ee:	d81f      	bhi.n	8012730 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	685a      	ldr	r2, [r3, #4]
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80126fe:	605a      	str	r2, [r3, #4]
 8012700:	e016      	b.n	8012730 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	f103 020c 	add.w	r2, r3, #12
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801270e:	7812      	ldrb	r2, [r2, #0]
 8012710:	b2d2      	uxtb	r2, r2
 8012712:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012718:	1c5a      	adds	r2, r3, #1
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8012724:	b29b      	uxth	r3, r3
 8012726:	3b01      	subs	r3, #1
 8012728:	b29a      	uxth	r2, r3
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8012730:	2301      	movs	r3, #1
 8012732:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8012734:	f7fc fec0 	bl	800f4b8 <HAL_GetTick>
 8012738:	4602      	mov	r2, r0
 801273a:	69fb      	ldr	r3, [r7, #28]
 801273c:	1ad3      	subs	r3, r2, r3
 801273e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012740:	429a      	cmp	r2, r3
 8012742:	d803      	bhi.n	801274c <HAL_SPI_TransmitReceive+0x3c2>
 8012744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012746:	f1b3 3fff 	cmp.w	r3, #4294967295
 801274a:	d102      	bne.n	8012752 <HAL_SPI_TransmitReceive+0x3c8>
 801274c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801274e:	2b00      	cmp	r3, #0
 8012750:	d103      	bne.n	801275a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8012752:	2303      	movs	r3, #3
 8012754:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8012758:	e01c      	b.n	8012794 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801275e:	b29b      	uxth	r3, r3
 8012760:	2b00      	cmp	r3, #0
 8012762:	f47f af5b 	bne.w	801261c <HAL_SPI_TransmitReceive+0x292>
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801276c:	b29b      	uxth	r3, r3
 801276e:	2b00      	cmp	r3, #0
 8012770:	f47f af54 	bne.w	801261c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8012774:	69fa      	ldr	r2, [r7, #28]
 8012776:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012778:	68f8      	ldr	r0, [r7, #12]
 801277a:	f000 fc4b 	bl	8013014 <SPI_EndRxTxTransaction>
 801277e:	4603      	mov	r3, r0
 8012780:	2b00      	cmp	r3, #0
 8012782:	d006      	beq.n	8012792 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8012784:	2301      	movs	r3, #1
 8012786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801278a:	68fb      	ldr	r3, [r7, #12]
 801278c:	2220      	movs	r2, #32
 801278e:	661a      	str	r2, [r3, #96]	; 0x60
 8012790:	e000      	b.n	8012794 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8012792:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	2201      	movs	r2, #1
 8012798:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	2200      	movs	r2, #0
 80127a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80127a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80127a8:	4618      	mov	r0, r3
 80127aa:	3728      	adds	r7, #40	; 0x28
 80127ac:	46bd      	mov	sp, r7
 80127ae:	bd80      	pop	{r7, pc}

080127b0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80127b0:	b580      	push	{r7, lr}
 80127b2:	b086      	sub	sp, #24
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	60f8      	str	r0, [r7, #12]
 80127b8:	60b9      	str	r1, [r7, #8]
 80127ba:	607a      	str	r2, [r7, #4]
 80127bc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80127be:	2300      	movs	r3, #0
 80127c0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80127c8:	2b01      	cmp	r3, #1
 80127ca:	d101      	bne.n	80127d0 <HAL_SPI_TransmitReceive_DMA+0x20>
 80127cc:	2302      	movs	r3, #2
 80127ce:	e16c      	b.n	8012aaa <HAL_SPI_TransmitReceive_DMA+0x2fa>
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	2201      	movs	r2, #1
 80127d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80127d8:	68fb      	ldr	r3, [r7, #12]
 80127da:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80127de:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	685b      	ldr	r3, [r3, #4]
 80127e4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80127e6:	7dbb      	ldrb	r3, [r7, #22]
 80127e8:	2b01      	cmp	r3, #1
 80127ea:	d00d      	beq.n	8012808 <HAL_SPI_TransmitReceive_DMA+0x58>
 80127ec:	693b      	ldr	r3, [r7, #16]
 80127ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80127f2:	d106      	bne.n	8012802 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	689b      	ldr	r3, [r3, #8]
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d102      	bne.n	8012802 <HAL_SPI_TransmitReceive_DMA+0x52>
 80127fc:	7dbb      	ldrb	r3, [r7, #22]
 80127fe:	2b04      	cmp	r3, #4
 8012800:	d002      	beq.n	8012808 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8012802:	2302      	movs	r3, #2
 8012804:	75fb      	strb	r3, [r7, #23]
    goto error;
 8012806:	e14b      	b.n	8012aa0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8012808:	68bb      	ldr	r3, [r7, #8]
 801280a:	2b00      	cmp	r3, #0
 801280c:	d005      	beq.n	801281a <HAL_SPI_TransmitReceive_DMA+0x6a>
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	2b00      	cmp	r3, #0
 8012812:	d002      	beq.n	801281a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8012814:	887b      	ldrh	r3, [r7, #2]
 8012816:	2b00      	cmp	r3, #0
 8012818:	d102      	bne.n	8012820 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 801281a:	2301      	movs	r3, #1
 801281c:	75fb      	strb	r3, [r7, #23]
    goto error;
 801281e:	e13f      	b.n	8012aa0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8012826:	b2db      	uxtb	r3, r3
 8012828:	2b04      	cmp	r3, #4
 801282a:	d003      	beq.n	8012834 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	2205      	movs	r2, #5
 8012830:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	2200      	movs	r2, #0
 8012838:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	68ba      	ldr	r2, [r7, #8]
 801283e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	887a      	ldrh	r2, [r7, #2]
 8012844:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	887a      	ldrh	r2, [r7, #2]
 801284a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	687a      	ldr	r2, [r7, #4]
 8012850:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	887a      	ldrh	r2, [r7, #2]
 8012856:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	887a      	ldrh	r2, [r7, #2]
 801285e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	2200      	movs	r2, #0
 8012866:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	2200      	movs	r2, #0
 801286c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 801286e:	68fb      	ldr	r3, [r7, #12]
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	685a      	ldr	r2, [r3, #4]
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 801287c:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	68db      	ldr	r3, [r3, #12]
 8012882:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8012886:	d908      	bls.n	801289a <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012888:	68fb      	ldr	r3, [r7, #12]
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	685a      	ldr	r2, [r3, #4]
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8012896:	605a      	str	r2, [r3, #4]
 8012898:	e06f      	b.n	801297a <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801289a:	68fb      	ldr	r3, [r7, #12]
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	685a      	ldr	r2, [r3, #4]
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80128a8:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80128ae:	699b      	ldr	r3, [r3, #24]
 80128b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80128b4:	d126      	bne.n	8012904 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80128ba:	f003 0301 	and.w	r3, r3, #1
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d10f      	bne.n	80128e2 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	685a      	ldr	r2, [r3, #4]
 80128c8:	68fb      	ldr	r3, [r7, #12]
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80128d0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80128d6:	b29b      	uxth	r3, r3
 80128d8:	085b      	lsrs	r3, r3, #1
 80128da:	b29a      	uxth	r2, r3
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80128e0:	e010      	b.n	8012904 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80128e2:	68fb      	ldr	r3, [r7, #12]
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	685a      	ldr	r2, [r3, #4]
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80128f0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80128f2:	68fb      	ldr	r3, [r7, #12]
 80128f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80128f6:	b29b      	uxth	r3, r3
 80128f8:	085b      	lsrs	r3, r3, #1
 80128fa:	b29b      	uxth	r3, r3
 80128fc:	3301      	adds	r3, #1
 80128fe:	b29a      	uxth	r2, r3
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012908:	699b      	ldr	r3, [r3, #24]
 801290a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801290e:	d134      	bne.n	801297a <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	685a      	ldr	r2, [r3, #4]
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801291e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8012926:	b29b      	uxth	r3, r3
 8012928:	f003 0301 	and.w	r3, r3, #1
 801292c:	2b00      	cmp	r3, #0
 801292e:	d111      	bne.n	8012954 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	685a      	ldr	r2, [r3, #4]
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801293e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8012946:	b29b      	uxth	r3, r3
 8012948:	085b      	lsrs	r3, r3, #1
 801294a:	b29a      	uxth	r2, r3
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8012952:	e012      	b.n	801297a <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	685a      	ldr	r2, [r3, #4]
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8012962:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801296a:	b29b      	uxth	r3, r3
 801296c:	085b      	lsrs	r3, r3, #1
 801296e:	b29b      	uxth	r3, r3
 8012970:	3301      	adds	r3, #1
 8012972:	b29a      	uxth	r2, r3
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8012980:	b2db      	uxtb	r3, r3
 8012982:	2b04      	cmp	r3, #4
 8012984:	d108      	bne.n	8012998 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8012986:	68fb      	ldr	r3, [r7, #12]
 8012988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801298a:	4a4a      	ldr	r2, [pc, #296]	; (8012ab4 <HAL_SPI_TransmitReceive_DMA+0x304>)
 801298c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 801298e:	68fb      	ldr	r3, [r7, #12]
 8012990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012992:	4a49      	ldr	r2, [pc, #292]	; (8012ab8 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8012994:	63da      	str	r2, [r3, #60]	; 0x3c
 8012996:	e007      	b.n	80129a8 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801299c:	4a47      	ldr	r2, [pc, #284]	; (8012abc <HAL_SPI_TransmitReceive_DMA+0x30c>)
 801299e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80129a4:	4a46      	ldr	r2, [pc, #280]	; (8012ac0 <HAL_SPI_TransmitReceive_DMA+0x310>)
 80129a6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80129ac:	4a45      	ldr	r2, [pc, #276]	; (8012ac4 <HAL_SPI_TransmitReceive_DMA+0x314>)
 80129ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80129b4:	2200      	movs	r2, #0
 80129b6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	330c      	adds	r3, #12
 80129c2:	4619      	mov	r1, r3
 80129c4:	68fb      	ldr	r3, [r7, #12]
 80129c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129c8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80129d0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80129d2:	f7fc ff3d 	bl	800f850 <HAL_DMA_Start_IT>
 80129d6:	4603      	mov	r3, r0
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d00c      	beq.n	80129f6 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80129e0:	f043 0210 	orr.w	r2, r3, #16
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80129e8:	2301      	movs	r3, #1
 80129ea:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	2201      	movs	r2, #1
 80129f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80129f4:	e054      	b.n	8012aa0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80129f6:	68fb      	ldr	r3, [r7, #12]
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	685a      	ldr	r2, [r3, #4]
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	f042 0201 	orr.w	r2, r2, #1
 8012a04:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012a0a:	2200      	movs	r2, #0
 8012a0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012a12:	2200      	movs	r2, #0
 8012a14:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012a1a:	2200      	movs	r2, #0
 8012a1c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012a22:	2200      	movs	r2, #0
 8012a24:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8012a2a:	68fb      	ldr	r3, [r7, #12]
 8012a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a2e:	4619      	mov	r1, r3
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	330c      	adds	r3, #12
 8012a36:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8012a38:	68fb      	ldr	r3, [r7, #12]
 8012a3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012a3c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8012a3e:	f7fc ff07 	bl	800f850 <HAL_DMA_Start_IT>
 8012a42:	4603      	mov	r3, r0
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d00c      	beq.n	8012a62 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012a4c:	f043 0210 	orr.w	r2, r3, #16
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8012a54:	2301      	movs	r3, #1
 8012a56:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8012a58:	68fb      	ldr	r3, [r7, #12]
 8012a5a:	2201      	movs	r2, #1
 8012a5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8012a60:	e01e      	b.n	8012aa0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012a6c:	2b40      	cmp	r3, #64	; 0x40
 8012a6e:	d007      	beq.n	8012a80 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8012a70:	68fb      	ldr	r3, [r7, #12]
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	681a      	ldr	r2, [r3, #0]
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012a7e:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	685a      	ldr	r2, [r3, #4]
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	f042 0220 	orr.w	r2, r2, #32
 8012a8e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	685a      	ldr	r2, [r3, #4]
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	f042 0202 	orr.w	r2, r2, #2
 8012a9e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8012aa0:	68fb      	ldr	r3, [r7, #12]
 8012aa2:	2200      	movs	r2, #0
 8012aa4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8012aa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8012aaa:	4618      	mov	r0, r3
 8012aac:	3718      	adds	r7, #24
 8012aae:	46bd      	mov	sp, r7
 8012ab0:	bd80      	pop	{r7, pc}
 8012ab2:	bf00      	nop
 8012ab4:	08012c69 	.word	0x08012c69
 8012ab8:	08012b2d 	.word	0x08012b2d
 8012abc:	08012c85 	.word	0x08012c85
 8012ac0:	08012bd7 	.word	0x08012bd7
 8012ac4:	08012ca1 	.word	0x08012ca1

08012ac8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8012ac8:	b480      	push	{r7}
 8012aca:	b083      	sub	sp, #12
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8012ad0:	bf00      	nop
 8012ad2:	370c      	adds	r7, #12
 8012ad4:	46bd      	mov	sp, r7
 8012ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ada:	4770      	bx	lr

08012adc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8012adc:	b480      	push	{r7}
 8012ade:	b083      	sub	sp, #12
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8012ae4:	bf00      	nop
 8012ae6:	370c      	adds	r7, #12
 8012ae8:	46bd      	mov	sp, r7
 8012aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aee:	4770      	bx	lr

08012af0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8012af0:	b480      	push	{r7}
 8012af2:	b083      	sub	sp, #12
 8012af4:	af00      	add	r7, sp, #0
 8012af6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8012af8:	bf00      	nop
 8012afa:	370c      	adds	r7, #12
 8012afc:	46bd      	mov	sp, r7
 8012afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b02:	4770      	bx	lr

08012b04 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8012b04:	b480      	push	{r7}
 8012b06:	b083      	sub	sp, #12
 8012b08:	af00      	add	r7, sp, #0
 8012b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8012b0c:	bf00      	nop
 8012b0e:	370c      	adds	r7, #12
 8012b10:	46bd      	mov	sp, r7
 8012b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b16:	4770      	bx	lr

08012b18 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8012b18:	b480      	push	{r7}
 8012b1a:	b083      	sub	sp, #12
 8012b1c:	af00      	add	r7, sp, #0
 8012b1e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8012b20:	bf00      	nop
 8012b22:	370c      	adds	r7, #12
 8012b24:	46bd      	mov	sp, r7
 8012b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b2a:	4770      	bx	lr

08012b2c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012b2c:	b580      	push	{r7, lr}
 8012b2e:	b084      	sub	sp, #16
 8012b30:	af00      	add	r7, sp, #0
 8012b32:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b38:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8012b3a:	f7fc fcbd 	bl	800f4b8 <HAL_GetTick>
 8012b3e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012b4e:	d03c      	beq.n	8012bca <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8012b50:	68fb      	ldr	r3, [r7, #12]
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	685a      	ldr	r2, [r3, #4]
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	f022 0220 	bic.w	r2, r2, #32
 8012b5e:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8012b60:	68fb      	ldr	r3, [r7, #12]
 8012b62:	689b      	ldr	r3, [r3, #8]
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d10d      	bne.n	8012b84 <SPI_DMAReceiveCplt+0x58>
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	685b      	ldr	r3, [r3, #4]
 8012b6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012b70:	d108      	bne.n	8012b84 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	685a      	ldr	r2, [r3, #4]
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	f022 0203 	bic.w	r2, r2, #3
 8012b80:	605a      	str	r2, [r3, #4]
 8012b82:	e007      	b.n	8012b94 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8012b84:	68fb      	ldr	r3, [r7, #12]
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	685a      	ldr	r2, [r3, #4]
 8012b8a:	68fb      	ldr	r3, [r7, #12]
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	f022 0201 	bic.w	r2, r2, #1
 8012b92:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8012b94:	68ba      	ldr	r2, [r7, #8]
 8012b96:	2164      	movs	r1, #100	; 0x64
 8012b98:	68f8      	ldr	r0, [r7, #12]
 8012b9a:	f000 f9bf 	bl	8012f1c <SPI_EndRxTransaction>
 8012b9e:	4603      	mov	r3, r0
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d002      	beq.n	8012baa <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	2220      	movs	r2, #32
 8012ba8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	2200      	movs	r2, #0
 8012bae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8012bb2:	68fb      	ldr	r3, [r7, #12]
 8012bb4:	2201      	movs	r2, #1
 8012bb6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d003      	beq.n	8012bca <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8012bc2:	68f8      	ldr	r0, [r7, #12]
 8012bc4:	f7ff ffa8 	bl	8012b18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8012bc8:	e002      	b.n	8012bd0 <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8012bca:	68f8      	ldr	r0, [r7, #12]
 8012bcc:	f7ff ff7c 	bl	8012ac8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8012bd0:	3710      	adds	r7, #16
 8012bd2:	46bd      	mov	sp, r7
 8012bd4:	bd80      	pop	{r7, pc}

08012bd6 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012bd6:	b580      	push	{r7, lr}
 8012bd8:	b084      	sub	sp, #16
 8012bda:	af00      	add	r7, sp, #0
 8012bdc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012be2:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8012be4:	f7fc fc68 	bl	800f4b8 <HAL_GetTick>
 8012be8:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012bf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012bf8:	d030      	beq.n	8012c5c <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	685a      	ldr	r2, [r3, #4]
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	f022 0220 	bic.w	r2, r2, #32
 8012c08:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8012c0a:	68ba      	ldr	r2, [r7, #8]
 8012c0c:	2164      	movs	r1, #100	; 0x64
 8012c0e:	68f8      	ldr	r0, [r7, #12]
 8012c10:	f000 fa00 	bl	8013014 <SPI_EndRxTxTransaction>
 8012c14:	4603      	mov	r3, r0
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d005      	beq.n	8012c26 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012c1e:	f043 0220 	orr.w	r2, r3, #32
 8012c22:	68fb      	ldr	r3, [r7, #12]
 8012c24:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	685a      	ldr	r2, [r3, #4]
 8012c2c:	68fb      	ldr	r3, [r7, #12]
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	f022 0203 	bic.w	r2, r2, #3
 8012c34:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8012c36:	68fb      	ldr	r3, [r7, #12]
 8012c38:	2200      	movs	r2, #0
 8012c3a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	2200      	movs	r2, #0
 8012c40:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	2201      	movs	r2, #1
 8012c48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d003      	beq.n	8012c5c <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8012c54:	68f8      	ldr	r0, [r7, #12]
 8012c56:	f7ff ff5f 	bl	8012b18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8012c5a:	e002      	b.n	8012c62 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8012c5c:	68f8      	ldr	r0, [r7, #12]
 8012c5e:	f7ff ff3d 	bl	8012adc <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8012c62:	3710      	adds	r7, #16
 8012c64:	46bd      	mov	sp, r7
 8012c66:	bd80      	pop	{r7, pc}

08012c68 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012c68:	b580      	push	{r7, lr}
 8012c6a:	b084      	sub	sp, #16
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c74:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8012c76:	68f8      	ldr	r0, [r7, #12]
 8012c78:	f7ff ff3a 	bl	8012af0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8012c7c:	bf00      	nop
 8012c7e:	3710      	adds	r7, #16
 8012c80:	46bd      	mov	sp, r7
 8012c82:	bd80      	pop	{r7, pc}

08012c84 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012c84:	b580      	push	{r7, lr}
 8012c86:	b084      	sub	sp, #16
 8012c88:	af00      	add	r7, sp, #0
 8012c8a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c90:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8012c92:	68f8      	ldr	r0, [r7, #12]
 8012c94:	f7ff ff36 	bl	8012b04 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8012c98:	bf00      	nop
 8012c9a:	3710      	adds	r7, #16
 8012c9c:	46bd      	mov	sp, r7
 8012c9e:	bd80      	pop	{r7, pc}

08012ca0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8012ca0:	b580      	push	{r7, lr}
 8012ca2:	b084      	sub	sp, #16
 8012ca4:	af00      	add	r7, sp, #0
 8012ca6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012cac:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8012cae:	68fb      	ldr	r3, [r7, #12]
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	685a      	ldr	r2, [r3, #4]
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	681b      	ldr	r3, [r3, #0]
 8012cb8:	f022 0203 	bic.w	r2, r2, #3
 8012cbc:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012cc2:	f043 0210 	orr.w	r2, r3, #16
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	2201      	movs	r2, #1
 8012cce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8012cd2:	68f8      	ldr	r0, [r7, #12]
 8012cd4:	f7ff ff20 	bl	8012b18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8012cd8:	bf00      	nop
 8012cda:	3710      	adds	r7, #16
 8012cdc:	46bd      	mov	sp, r7
 8012cde:	bd80      	pop	{r7, pc}

08012ce0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8012ce0:	b580      	push	{r7, lr}
 8012ce2:	b088      	sub	sp, #32
 8012ce4:	af00      	add	r7, sp, #0
 8012ce6:	60f8      	str	r0, [r7, #12]
 8012ce8:	60b9      	str	r1, [r7, #8]
 8012cea:	603b      	str	r3, [r7, #0]
 8012cec:	4613      	mov	r3, r2
 8012cee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8012cf0:	f7fc fbe2 	bl	800f4b8 <HAL_GetTick>
 8012cf4:	4602      	mov	r2, r0
 8012cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cf8:	1a9b      	subs	r3, r3, r2
 8012cfa:	683a      	ldr	r2, [r7, #0]
 8012cfc:	4413      	add	r3, r2
 8012cfe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8012d00:	f7fc fbda 	bl	800f4b8 <HAL_GetTick>
 8012d04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8012d06:	4b39      	ldr	r3, [pc, #228]	; (8012dec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	015b      	lsls	r3, r3, #5
 8012d0c:	0d1b      	lsrs	r3, r3, #20
 8012d0e:	69fa      	ldr	r2, [r7, #28]
 8012d10:	fb02 f303 	mul.w	r3, r2, r3
 8012d14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8012d16:	e054      	b.n	8012dc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8012d18:	683b      	ldr	r3, [r7, #0]
 8012d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d1e:	d050      	beq.n	8012dc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8012d20:	f7fc fbca 	bl	800f4b8 <HAL_GetTick>
 8012d24:	4602      	mov	r2, r0
 8012d26:	69bb      	ldr	r3, [r7, #24]
 8012d28:	1ad3      	subs	r3, r2, r3
 8012d2a:	69fa      	ldr	r2, [r7, #28]
 8012d2c:	429a      	cmp	r2, r3
 8012d2e:	d902      	bls.n	8012d36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8012d30:	69fb      	ldr	r3, [r7, #28]
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d13d      	bne.n	8012db2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	685a      	ldr	r2, [r3, #4]
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8012d44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012d46:	68fb      	ldr	r3, [r7, #12]
 8012d48:	685b      	ldr	r3, [r3, #4]
 8012d4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012d4e:	d111      	bne.n	8012d74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	689b      	ldr	r3, [r3, #8]
 8012d54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012d58:	d004      	beq.n	8012d64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	689b      	ldr	r3, [r3, #8]
 8012d5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012d62:	d107      	bne.n	8012d74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	681a      	ldr	r2, [r3, #0]
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012d72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8012d74:	68fb      	ldr	r3, [r7, #12]
 8012d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012d7c:	d10f      	bne.n	8012d9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	681a      	ldr	r2, [r3, #0]
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8012d8c:	601a      	str	r2, [r3, #0]
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	681a      	ldr	r2, [r3, #0]
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8012d9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	2201      	movs	r2, #1
 8012da2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	2200      	movs	r2, #0
 8012daa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8012dae:	2303      	movs	r3, #3
 8012db0:	e017      	b.n	8012de2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8012db2:	697b      	ldr	r3, [r7, #20]
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d101      	bne.n	8012dbc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8012db8:	2300      	movs	r3, #0
 8012dba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8012dbc:	697b      	ldr	r3, [r7, #20]
 8012dbe:	3b01      	subs	r3, #1
 8012dc0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	689a      	ldr	r2, [r3, #8]
 8012dc8:	68bb      	ldr	r3, [r7, #8]
 8012dca:	4013      	ands	r3, r2
 8012dcc:	68ba      	ldr	r2, [r7, #8]
 8012dce:	429a      	cmp	r2, r3
 8012dd0:	bf0c      	ite	eq
 8012dd2:	2301      	moveq	r3, #1
 8012dd4:	2300      	movne	r3, #0
 8012dd6:	b2db      	uxtb	r3, r3
 8012dd8:	461a      	mov	r2, r3
 8012dda:	79fb      	ldrb	r3, [r7, #7]
 8012ddc:	429a      	cmp	r2, r3
 8012dde:	d19b      	bne.n	8012d18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8012de0:	2300      	movs	r3, #0
}
 8012de2:	4618      	mov	r0, r3
 8012de4:	3720      	adds	r7, #32
 8012de6:	46bd      	mov	sp, r7
 8012de8:	bd80      	pop	{r7, pc}
 8012dea:	bf00      	nop
 8012dec:	20000018 	.word	0x20000018

08012df0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8012df0:	b580      	push	{r7, lr}
 8012df2:	b08a      	sub	sp, #40	; 0x28
 8012df4:	af00      	add	r7, sp, #0
 8012df6:	60f8      	str	r0, [r7, #12]
 8012df8:	60b9      	str	r1, [r7, #8]
 8012dfa:	607a      	str	r2, [r7, #4]
 8012dfc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8012dfe:	2300      	movs	r3, #0
 8012e00:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8012e02:	f7fc fb59 	bl	800f4b8 <HAL_GetTick>
 8012e06:	4602      	mov	r2, r0
 8012e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e0a:	1a9b      	subs	r3, r3, r2
 8012e0c:	683a      	ldr	r2, [r7, #0]
 8012e0e:	4413      	add	r3, r2
 8012e10:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8012e12:	f7fc fb51 	bl	800f4b8 <HAL_GetTick>
 8012e16:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	330c      	adds	r3, #12
 8012e1e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8012e20:	4b3d      	ldr	r3, [pc, #244]	; (8012f18 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8012e22:	681a      	ldr	r2, [r3, #0]
 8012e24:	4613      	mov	r3, r2
 8012e26:	009b      	lsls	r3, r3, #2
 8012e28:	4413      	add	r3, r2
 8012e2a:	00da      	lsls	r2, r3, #3
 8012e2c:	1ad3      	subs	r3, r2, r3
 8012e2e:	0d1b      	lsrs	r3, r3, #20
 8012e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e32:	fb02 f303 	mul.w	r3, r2, r3
 8012e36:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8012e38:	e060      	b.n	8012efc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8012e3a:	68bb      	ldr	r3, [r7, #8]
 8012e3c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8012e40:	d107      	bne.n	8012e52 <SPI_WaitFifoStateUntilTimeout+0x62>
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d104      	bne.n	8012e52 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8012e48:	69fb      	ldr	r3, [r7, #28]
 8012e4a:	781b      	ldrb	r3, [r3, #0]
 8012e4c:	b2db      	uxtb	r3, r3
 8012e4e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8012e50:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8012e52:	683b      	ldr	r3, [r7, #0]
 8012e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e58:	d050      	beq.n	8012efc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8012e5a:	f7fc fb2d 	bl	800f4b8 <HAL_GetTick>
 8012e5e:	4602      	mov	r2, r0
 8012e60:	6a3b      	ldr	r3, [r7, #32]
 8012e62:	1ad3      	subs	r3, r2, r3
 8012e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e66:	429a      	cmp	r2, r3
 8012e68:	d902      	bls.n	8012e70 <SPI_WaitFifoStateUntilTimeout+0x80>
 8012e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d13d      	bne.n	8012eec <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	681b      	ldr	r3, [r3, #0]
 8012e74:	685a      	ldr	r2, [r3, #4]
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8012e7e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	685b      	ldr	r3, [r3, #4]
 8012e84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012e88:	d111      	bne.n	8012eae <SPI_WaitFifoStateUntilTimeout+0xbe>
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	689b      	ldr	r3, [r3, #8]
 8012e8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012e92:	d004      	beq.n	8012e9e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	689b      	ldr	r3, [r3, #8]
 8012e98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012e9c:	d107      	bne.n	8012eae <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8012e9e:	68fb      	ldr	r3, [r7, #12]
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	681a      	ldr	r2, [r3, #0]
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	681b      	ldr	r3, [r3, #0]
 8012ea8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012eac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012eb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012eb6:	d10f      	bne.n	8012ed8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	681a      	ldr	r2, [r3, #0]
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8012ec6:	601a      	str	r2, [r3, #0]
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	681a      	ldr	r2, [r3, #0]
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8012ed6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	2201      	movs	r2, #1
 8012edc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	2200      	movs	r2, #0
 8012ee4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8012ee8:	2303      	movs	r3, #3
 8012eea:	e010      	b.n	8012f0e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8012eec:	69bb      	ldr	r3, [r7, #24]
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d101      	bne.n	8012ef6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8012ef2:	2300      	movs	r3, #0
 8012ef4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8012ef6:	69bb      	ldr	r3, [r7, #24]
 8012ef8:	3b01      	subs	r3, #1
 8012efa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	689a      	ldr	r2, [r3, #8]
 8012f02:	68bb      	ldr	r3, [r7, #8]
 8012f04:	4013      	ands	r3, r2
 8012f06:	687a      	ldr	r2, [r7, #4]
 8012f08:	429a      	cmp	r2, r3
 8012f0a:	d196      	bne.n	8012e3a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8012f0c:	2300      	movs	r3, #0
}
 8012f0e:	4618      	mov	r0, r3
 8012f10:	3728      	adds	r7, #40	; 0x28
 8012f12:	46bd      	mov	sp, r7
 8012f14:	bd80      	pop	{r7, pc}
 8012f16:	bf00      	nop
 8012f18:	20000018 	.word	0x20000018

08012f1c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8012f1c:	b580      	push	{r7, lr}
 8012f1e:	b088      	sub	sp, #32
 8012f20:	af02      	add	r7, sp, #8
 8012f22:	60f8      	str	r0, [r7, #12]
 8012f24:	60b9      	str	r1, [r7, #8]
 8012f26:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	685b      	ldr	r3, [r3, #4]
 8012f2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012f30:	d111      	bne.n	8012f56 <SPI_EndRxTransaction+0x3a>
 8012f32:	68fb      	ldr	r3, [r7, #12]
 8012f34:	689b      	ldr	r3, [r3, #8]
 8012f36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012f3a:	d004      	beq.n	8012f46 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	689b      	ldr	r3, [r3, #8]
 8012f40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012f44:	d107      	bne.n	8012f56 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	681b      	ldr	r3, [r3, #0]
 8012f4a:	681a      	ldr	r2, [r3, #0]
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012f54:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	685b      	ldr	r3, [r3, #4]
 8012f5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012f5e:	d112      	bne.n	8012f86 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	9300      	str	r3, [sp, #0]
 8012f64:	68bb      	ldr	r3, [r7, #8]
 8012f66:	2200      	movs	r2, #0
 8012f68:	2180      	movs	r1, #128	; 0x80
 8012f6a:	68f8      	ldr	r0, [r7, #12]
 8012f6c:	f7ff feb8 	bl	8012ce0 <SPI_WaitFlagStateUntilTimeout>
 8012f70:	4603      	mov	r3, r0
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d021      	beq.n	8012fba <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012f7a:	f043 0220 	orr.w	r2, r3, #32
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8012f82:	2303      	movs	r3, #3
 8012f84:	e03d      	b.n	8013002 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8012f86:	4b21      	ldr	r3, [pc, #132]	; (801300c <SPI_EndRxTransaction+0xf0>)
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	4a21      	ldr	r2, [pc, #132]	; (8013010 <SPI_EndRxTransaction+0xf4>)
 8012f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8012f90:	0d5b      	lsrs	r3, r3, #21
 8012f92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012f96:	fb02 f303 	mul.w	r3, r2, r3
 8012f9a:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8012f9c:	697b      	ldr	r3, [r7, #20]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d00a      	beq.n	8012fb8 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8012fa2:	697b      	ldr	r3, [r7, #20]
 8012fa4:	3b01      	subs	r3, #1
 8012fa6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8012fa8:	68fb      	ldr	r3, [r7, #12]
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	689b      	ldr	r3, [r3, #8]
 8012fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012fb2:	2b80      	cmp	r3, #128	; 0x80
 8012fb4:	d0f2      	beq.n	8012f9c <SPI_EndRxTransaction+0x80>
 8012fb6:	e000      	b.n	8012fba <SPI_EndRxTransaction+0x9e>
        break;
 8012fb8:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	685b      	ldr	r3, [r3, #4]
 8012fbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012fc2:	d11d      	bne.n	8013000 <SPI_EndRxTransaction+0xe4>
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	689b      	ldr	r3, [r3, #8]
 8012fc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012fcc:	d004      	beq.n	8012fd8 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	689b      	ldr	r3, [r3, #8]
 8012fd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012fd6:	d113      	bne.n	8013000 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	9300      	str	r3, [sp, #0]
 8012fdc:	68bb      	ldr	r3, [r7, #8]
 8012fde:	2200      	movs	r2, #0
 8012fe0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8012fe4:	68f8      	ldr	r0, [r7, #12]
 8012fe6:	f7ff ff03 	bl	8012df0 <SPI_WaitFifoStateUntilTimeout>
 8012fea:	4603      	mov	r3, r0
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d007      	beq.n	8013000 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012ff4:	f043 0220 	orr.w	r2, r3, #32
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8012ffc:	2303      	movs	r3, #3
 8012ffe:	e000      	b.n	8013002 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8013000:	2300      	movs	r3, #0
}
 8013002:	4618      	mov	r0, r3
 8013004:	3718      	adds	r7, #24
 8013006:	46bd      	mov	sp, r7
 8013008:	bd80      	pop	{r7, pc}
 801300a:	bf00      	nop
 801300c:	20000018 	.word	0x20000018
 8013010:	165e9f81 	.word	0x165e9f81

08013014 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8013014:	b580      	push	{r7, lr}
 8013016:	b088      	sub	sp, #32
 8013018:	af02      	add	r7, sp, #8
 801301a:	60f8      	str	r0, [r7, #12]
 801301c:	60b9      	str	r1, [r7, #8]
 801301e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	9300      	str	r3, [sp, #0]
 8013024:	68bb      	ldr	r3, [r7, #8]
 8013026:	2200      	movs	r2, #0
 8013028:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801302c:	68f8      	ldr	r0, [r7, #12]
 801302e:	f7ff fedf 	bl	8012df0 <SPI_WaitFifoStateUntilTimeout>
 8013032:	4603      	mov	r3, r0
 8013034:	2b00      	cmp	r3, #0
 8013036:	d007      	beq.n	8013048 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801303c:	f043 0220 	orr.w	r2, r3, #32
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8013044:	2303      	movs	r3, #3
 8013046:	e046      	b.n	80130d6 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8013048:	4b25      	ldr	r3, [pc, #148]	; (80130e0 <SPI_EndRxTxTransaction+0xcc>)
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	4a25      	ldr	r2, [pc, #148]	; (80130e4 <SPI_EndRxTxTransaction+0xd0>)
 801304e:	fba2 2303 	umull	r2, r3, r2, r3
 8013052:	0d5b      	lsrs	r3, r3, #21
 8013054:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013058:	fb02 f303 	mul.w	r3, r2, r3
 801305c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	685b      	ldr	r3, [r3, #4]
 8013062:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013066:	d112      	bne.n	801308e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	9300      	str	r3, [sp, #0]
 801306c:	68bb      	ldr	r3, [r7, #8]
 801306e:	2200      	movs	r2, #0
 8013070:	2180      	movs	r1, #128	; 0x80
 8013072:	68f8      	ldr	r0, [r7, #12]
 8013074:	f7ff fe34 	bl	8012ce0 <SPI_WaitFlagStateUntilTimeout>
 8013078:	4603      	mov	r3, r0
 801307a:	2b00      	cmp	r3, #0
 801307c:	d016      	beq.n	80130ac <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013082:	f043 0220 	orr.w	r2, r3, #32
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801308a:	2303      	movs	r3, #3
 801308c:	e023      	b.n	80130d6 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801308e:	697b      	ldr	r3, [r7, #20]
 8013090:	2b00      	cmp	r3, #0
 8013092:	d00a      	beq.n	80130aa <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8013094:	697b      	ldr	r3, [r7, #20]
 8013096:	3b01      	subs	r3, #1
 8013098:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	689b      	ldr	r3, [r3, #8]
 80130a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80130a4:	2b80      	cmp	r3, #128	; 0x80
 80130a6:	d0f2      	beq.n	801308e <SPI_EndRxTxTransaction+0x7a>
 80130a8:	e000      	b.n	80130ac <SPI_EndRxTxTransaction+0x98>
        break;
 80130aa:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	9300      	str	r3, [sp, #0]
 80130b0:	68bb      	ldr	r3, [r7, #8]
 80130b2:	2200      	movs	r2, #0
 80130b4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80130b8:	68f8      	ldr	r0, [r7, #12]
 80130ba:	f7ff fe99 	bl	8012df0 <SPI_WaitFifoStateUntilTimeout>
 80130be:	4603      	mov	r3, r0
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d007      	beq.n	80130d4 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80130c8:	f043 0220 	orr.w	r2, r3, #32
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80130d0:	2303      	movs	r3, #3
 80130d2:	e000      	b.n	80130d6 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80130d4:	2300      	movs	r3, #0
}
 80130d6:	4618      	mov	r0, r3
 80130d8:	3718      	adds	r7, #24
 80130da:	46bd      	mov	sp, r7
 80130dc:	bd80      	pop	{r7, pc}
 80130de:	bf00      	nop
 80130e0:	20000018 	.word	0x20000018
 80130e4:	165e9f81 	.word	0x165e9f81

080130e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80130e8:	b580      	push	{r7, lr}
 80130ea:	b082      	sub	sp, #8
 80130ec:	af00      	add	r7, sp, #0
 80130ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d101      	bne.n	80130fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80130f6:	2301      	movs	r3, #1
 80130f8:	e040      	b.n	801317c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d106      	bne.n	8013110 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	2200      	movs	r2, #0
 8013106:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801310a:	6878      	ldr	r0, [r7, #4]
 801310c:	f7fb ffb4 	bl	800f078 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	2224      	movs	r2, #36	; 0x24
 8013114:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	681a      	ldr	r2, [r3, #0]
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	f022 0201 	bic.w	r2, r2, #1
 8013124:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013126:	6878      	ldr	r0, [r7, #4]
 8013128:	f000 fc1e 	bl	8013968 <UART_SetConfig>
 801312c:	4603      	mov	r3, r0
 801312e:	2b01      	cmp	r3, #1
 8013130:	d101      	bne.n	8013136 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8013132:	2301      	movs	r3, #1
 8013134:	e022      	b.n	801317c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801313a:	2b00      	cmp	r3, #0
 801313c:	d002      	beq.n	8013144 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 801313e:	6878      	ldr	r0, [r7, #4]
 8013140:	f000 fe74 	bl	8013e2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	685a      	ldr	r2, [r3, #4]
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8013152:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	689a      	ldr	r2, [r3, #8]
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	681b      	ldr	r3, [r3, #0]
 801315e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8013162:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	681a      	ldr	r2, [r3, #0]
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	f042 0201 	orr.w	r2, r2, #1
 8013172:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8013174:	6878      	ldr	r0, [r7, #4]
 8013176:	f000 fefb 	bl	8013f70 <UART_CheckIdleState>
 801317a:	4603      	mov	r3, r0
}
 801317c:	4618      	mov	r0, r3
 801317e:	3708      	adds	r7, #8
 8013180:	46bd      	mov	sp, r7
 8013182:	bd80      	pop	{r7, pc}

08013184 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013184:	b580      	push	{r7, lr}
 8013186:	b08a      	sub	sp, #40	; 0x28
 8013188:	af00      	add	r7, sp, #0
 801318a:	60f8      	str	r0, [r7, #12]
 801318c:	60b9      	str	r1, [r7, #8]
 801318e:	4613      	mov	r3, r2
 8013190:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013196:	2b20      	cmp	r3, #32
 8013198:	d13d      	bne.n	8013216 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 801319a:	68bb      	ldr	r3, [r7, #8]
 801319c:	2b00      	cmp	r3, #0
 801319e:	d002      	beq.n	80131a6 <HAL_UART_Receive_IT+0x22>
 80131a0:	88fb      	ldrh	r3, [r7, #6]
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d101      	bne.n	80131aa <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80131a6:	2301      	movs	r3, #1
 80131a8:	e036      	b.n	8013218 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80131b0:	2b01      	cmp	r3, #1
 80131b2:	d101      	bne.n	80131b8 <HAL_UART_Receive_IT+0x34>
 80131b4:	2302      	movs	r3, #2
 80131b6:	e02f      	b.n	8013218 <HAL_UART_Receive_IT+0x94>
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	2201      	movs	r2, #1
 80131bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	2200      	movs	r2, #0
 80131c4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	685b      	ldr	r3, [r3, #4]
 80131cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d018      	beq.n	8013206 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80131d4:	68fb      	ldr	r3, [r7, #12]
 80131d6:	681b      	ldr	r3, [r3, #0]
 80131d8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80131da:	697b      	ldr	r3, [r7, #20]
 80131dc:	e853 3f00 	ldrex	r3, [r3]
 80131e0:	613b      	str	r3, [r7, #16]
   return(result);
 80131e2:	693b      	ldr	r3, [r7, #16]
 80131e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80131e8:	627b      	str	r3, [r7, #36]	; 0x24
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	461a      	mov	r2, r3
 80131f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131f2:	623b      	str	r3, [r7, #32]
 80131f4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80131f6:	69f9      	ldr	r1, [r7, #28]
 80131f8:	6a3a      	ldr	r2, [r7, #32]
 80131fa:	e841 2300 	strex	r3, r2, [r1]
 80131fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8013200:	69bb      	ldr	r3, [r7, #24]
 8013202:	2b00      	cmp	r3, #0
 8013204:	d1e6      	bne.n	80131d4 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8013206:	88fb      	ldrh	r3, [r7, #6]
 8013208:	461a      	mov	r2, r3
 801320a:	68b9      	ldr	r1, [r7, #8]
 801320c:	68f8      	ldr	r0, [r7, #12]
 801320e:	f000 ffbd 	bl	801418c <UART_Start_Receive_IT>
 8013212:	4603      	mov	r3, r0
 8013214:	e000      	b.n	8013218 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8013216:	2302      	movs	r3, #2
  }
}
 8013218:	4618      	mov	r0, r3
 801321a:	3728      	adds	r7, #40	; 0x28
 801321c:	46bd      	mov	sp, r7
 801321e:	bd80      	pop	{r7, pc}

08013220 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8013220:	b580      	push	{r7, lr}
 8013222:	b08a      	sub	sp, #40	; 0x28
 8013224:	af00      	add	r7, sp, #0
 8013226:	60f8      	str	r0, [r7, #12]
 8013228:	60b9      	str	r1, [r7, #8]
 801322a:	4613      	mov	r3, r2
 801322c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013232:	2b20      	cmp	r3, #32
 8013234:	d178      	bne.n	8013328 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8013236:	68bb      	ldr	r3, [r7, #8]
 8013238:	2b00      	cmp	r3, #0
 801323a:	d002      	beq.n	8013242 <HAL_UART_Transmit_DMA+0x22>
 801323c:	88fb      	ldrh	r3, [r7, #6]
 801323e:	2b00      	cmp	r3, #0
 8013240:	d101      	bne.n	8013246 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8013242:	2301      	movs	r3, #1
 8013244:	e071      	b.n	801332a <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801324c:	2b01      	cmp	r3, #1
 801324e:	d101      	bne.n	8013254 <HAL_UART_Transmit_DMA+0x34>
 8013250:	2302      	movs	r3, #2
 8013252:	e06a      	b.n	801332a <HAL_UART_Transmit_DMA+0x10a>
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	2201      	movs	r2, #1
 8013258:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	68ba      	ldr	r2, [r7, #8]
 8013260:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	88fa      	ldrh	r2, [r7, #6]
 8013266:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 801326a:	68fb      	ldr	r3, [r7, #12]
 801326c:	88fa      	ldrh	r2, [r7, #6]
 801326e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	2200      	movs	r2, #0
 8013276:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	2221      	movs	r2, #33	; 0x21
 801327e:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013284:	2b00      	cmp	r3, #0
 8013286:	d02b      	beq.n	80132e0 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801328c:	4a29      	ldr	r2, [pc, #164]	; (8013334 <HAL_UART_Transmit_DMA+0x114>)
 801328e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013294:	4a28      	ldr	r2, [pc, #160]	; (8013338 <HAL_UART_Transmit_DMA+0x118>)
 8013296:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801329c:	4a27      	ldr	r2, [pc, #156]	; (801333c <HAL_UART_Transmit_DMA+0x11c>)
 801329e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80132a4:	2200      	movs	r2, #0
 80132a6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80132b0:	4619      	mov	r1, r3
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	3328      	adds	r3, #40	; 0x28
 80132b8:	461a      	mov	r2, r3
 80132ba:	88fb      	ldrh	r3, [r7, #6]
 80132bc:	f7fc fac8 	bl	800f850 <HAL_DMA_Start_IT>
 80132c0:	4603      	mov	r3, r0
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d00c      	beq.n	80132e0 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	2210      	movs	r2, #16
 80132ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	2200      	movs	r2, #0
 80132d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	2220      	movs	r2, #32
 80132da:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 80132dc:	2301      	movs	r3, #1
 80132de:	e024      	b.n	801332a <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80132e0:	68fb      	ldr	r3, [r7, #12]
 80132e2:	681b      	ldr	r3, [r3, #0]
 80132e4:	2240      	movs	r2, #64	; 0x40
 80132e6:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	2200      	movs	r2, #0
 80132ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	3308      	adds	r3, #8
 80132f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80132f8:	697b      	ldr	r3, [r7, #20]
 80132fa:	e853 3f00 	ldrex	r3, [r3]
 80132fe:	613b      	str	r3, [r7, #16]
   return(result);
 8013300:	693b      	ldr	r3, [r7, #16]
 8013302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013306:	627b      	str	r3, [r7, #36]	; 0x24
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	681b      	ldr	r3, [r3, #0]
 801330c:	3308      	adds	r3, #8
 801330e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013310:	623a      	str	r2, [r7, #32]
 8013312:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013314:	69f9      	ldr	r1, [r7, #28]
 8013316:	6a3a      	ldr	r2, [r7, #32]
 8013318:	e841 2300 	strex	r3, r2, [r1]
 801331c:	61bb      	str	r3, [r7, #24]
   return(result);
 801331e:	69bb      	ldr	r3, [r7, #24]
 8013320:	2b00      	cmp	r3, #0
 8013322:	d1e5      	bne.n	80132f0 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 8013324:	2300      	movs	r3, #0
 8013326:	e000      	b.n	801332a <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8013328:	2302      	movs	r3, #2
  }
}
 801332a:	4618      	mov	r0, r3
 801332c:	3728      	adds	r7, #40	; 0x28
 801332e:	46bd      	mov	sp, r7
 8013330:	bd80      	pop	{r7, pc}
 8013332:	bf00      	nop
 8013334:	08014433 	.word	0x08014433
 8013338:	080144c9 	.word	0x080144c9
 801333c:	080144e5 	.word	0x080144e5

08013340 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8013340:	b580      	push	{r7, lr}
 8013342:	b0ba      	sub	sp, #232	; 0xe8
 8013344:	af00      	add	r7, sp, #0
 8013346:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	681b      	ldr	r3, [r3, #0]
 801334c:	69db      	ldr	r3, [r3, #28]
 801334e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	681b      	ldr	r3, [r3, #0]
 8013358:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	689b      	ldr	r3, [r3, #8]
 8013362:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8013366:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801336a:	f640 030f 	movw	r3, #2063	; 0x80f
 801336e:	4013      	ands	r3, r2
 8013370:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8013374:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8013378:	2b00      	cmp	r3, #0
 801337a:	d115      	bne.n	80133a8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801337c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013380:	f003 0320 	and.w	r3, r3, #32
 8013384:	2b00      	cmp	r3, #0
 8013386:	d00f      	beq.n	80133a8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8013388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801338c:	f003 0320 	and.w	r3, r3, #32
 8013390:	2b00      	cmp	r3, #0
 8013392:	d009      	beq.n	80133a8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013398:	2b00      	cmp	r3, #0
 801339a:	f000 82a4 	beq.w	80138e6 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80133a2:	6878      	ldr	r0, [r7, #4]
 80133a4:	4798      	blx	r3
      }
      return;
 80133a6:	e29e      	b.n	80138e6 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80133a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	f000 8117 	beq.w	80135e0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80133b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80133b6:	f003 0301 	and.w	r3, r3, #1
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d106      	bne.n	80133cc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80133be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80133c2:	4b85      	ldr	r3, [pc, #532]	; (80135d8 <HAL_UART_IRQHandler+0x298>)
 80133c4:	4013      	ands	r3, r2
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	f000 810a 	beq.w	80135e0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80133cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80133d0:	f003 0301 	and.w	r3, r3, #1
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d011      	beq.n	80133fc <HAL_UART_IRQHandler+0xbc>
 80133d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80133dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d00b      	beq.n	80133fc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	2201      	movs	r2, #1
 80133ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80133f2:	f043 0201 	orr.w	r2, r3, #1
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80133fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013400:	f003 0302 	and.w	r3, r3, #2
 8013404:	2b00      	cmp	r3, #0
 8013406:	d011      	beq.n	801342c <HAL_UART_IRQHandler+0xec>
 8013408:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801340c:	f003 0301 	and.w	r3, r3, #1
 8013410:	2b00      	cmp	r3, #0
 8013412:	d00b      	beq.n	801342c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	2202      	movs	r2, #2
 801341a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013422:	f043 0204 	orr.w	r2, r3, #4
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801342c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013430:	f003 0304 	and.w	r3, r3, #4
 8013434:	2b00      	cmp	r3, #0
 8013436:	d011      	beq.n	801345c <HAL_UART_IRQHandler+0x11c>
 8013438:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801343c:	f003 0301 	and.w	r3, r3, #1
 8013440:	2b00      	cmp	r3, #0
 8013442:	d00b      	beq.n	801345c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	2204      	movs	r2, #4
 801344a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013452:	f043 0202 	orr.w	r2, r3, #2
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801345c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013460:	f003 0308 	and.w	r3, r3, #8
 8013464:	2b00      	cmp	r3, #0
 8013466:	d017      	beq.n	8013498 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8013468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801346c:	f003 0320 	and.w	r3, r3, #32
 8013470:	2b00      	cmp	r3, #0
 8013472:	d105      	bne.n	8013480 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8013474:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013478:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801347c:	2b00      	cmp	r3, #0
 801347e:	d00b      	beq.n	8013498 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	681b      	ldr	r3, [r3, #0]
 8013484:	2208      	movs	r2, #8
 8013486:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801348e:	f043 0208 	orr.w	r2, r3, #8
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8013498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801349c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d012      	beq.n	80134ca <HAL_UART_IRQHandler+0x18a>
 80134a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80134a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d00c      	beq.n	80134ca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80134b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80134c0:	f043 0220 	orr.w	r2, r3, #32
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	f000 820a 	beq.w	80138ea <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80134d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80134da:	f003 0320 	and.w	r3, r3, #32
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d00d      	beq.n	80134fe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80134e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80134e6:	f003 0320 	and.w	r3, r3, #32
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d007      	beq.n	80134fe <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d003      	beq.n	80134fe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80134fa:	6878      	ldr	r0, [r7, #4]
 80134fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013504:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	689b      	ldr	r3, [r3, #8]
 801350e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013512:	2b40      	cmp	r3, #64	; 0x40
 8013514:	d005      	beq.n	8013522 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8013516:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801351a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801351e:	2b00      	cmp	r3, #0
 8013520:	d04f      	beq.n	80135c2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8013522:	6878      	ldr	r0, [r7, #4]
 8013524:	f000 ff22 	bl	801436c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	681b      	ldr	r3, [r3, #0]
 801352c:	689b      	ldr	r3, [r3, #8]
 801352e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013532:	2b40      	cmp	r3, #64	; 0x40
 8013534:	d141      	bne.n	80135ba <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	3308      	adds	r3, #8
 801353c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013540:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013544:	e853 3f00 	ldrex	r3, [r3]
 8013548:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801354c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013550:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013554:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	3308      	adds	r3, #8
 801355e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8013562:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8013566:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801356a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801356e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8013572:	e841 2300 	strex	r3, r2, [r1]
 8013576:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801357a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801357e:	2b00      	cmp	r3, #0
 8013580:	d1d9      	bne.n	8013536 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013586:	2b00      	cmp	r3, #0
 8013588:	d013      	beq.n	80135b2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801358e:	4a13      	ldr	r2, [pc, #76]	; (80135dc <HAL_UART_IRQHandler+0x29c>)
 8013590:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013596:	4618      	mov	r0, r3
 8013598:	f7fc fa2a 	bl	800f9f0 <HAL_DMA_Abort_IT>
 801359c:	4603      	mov	r3, r0
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d017      	beq.n	80135d2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80135a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80135a8:	687a      	ldr	r2, [r7, #4]
 80135aa:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80135ac:	4610      	mov	r0, r2
 80135ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80135b0:	e00f      	b.n	80135d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80135b2:	6878      	ldr	r0, [r7, #4]
 80135b4:	f000 f9b8 	bl	8013928 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80135b8:	e00b      	b.n	80135d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80135ba:	6878      	ldr	r0, [r7, #4]
 80135bc:	f000 f9b4 	bl	8013928 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80135c0:	e007      	b.n	80135d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80135c2:	6878      	ldr	r0, [r7, #4]
 80135c4:	f000 f9b0 	bl	8013928 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	2200      	movs	r2, #0
 80135cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80135d0:	e18b      	b.n	80138ea <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80135d2:	bf00      	nop
    return;
 80135d4:	e189      	b.n	80138ea <HAL_UART_IRQHandler+0x5aa>
 80135d6:	bf00      	nop
 80135d8:	04000120 	.word	0x04000120
 80135dc:	08014561 	.word	0x08014561

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80135e4:	2b01      	cmp	r3, #1
 80135e6:	f040 8144 	bne.w	8013872 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80135ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80135ee:	f003 0310 	and.w	r3, r3, #16
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	f000 813d 	beq.w	8013872 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80135f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80135fc:	f003 0310 	and.w	r3, r3, #16
 8013600:	2b00      	cmp	r3, #0
 8013602:	f000 8136 	beq.w	8013872 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	2210      	movs	r2, #16
 801360c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	689b      	ldr	r3, [r3, #8]
 8013614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013618:	2b40      	cmp	r3, #64	; 0x40
 801361a:	f040 80b2 	bne.w	8013782 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	685b      	ldr	r3, [r3, #4]
 8013626:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801362a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801362e:	2b00      	cmp	r3, #0
 8013630:	f000 815d 	beq.w	80138ee <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801363a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801363e:	429a      	cmp	r2, r3
 8013640:	f080 8155 	bcs.w	80138ee <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801364a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013652:	69db      	ldr	r3, [r3, #28]
 8013654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013658:	f000 8085 	beq.w	8013766 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	681b      	ldr	r3, [r3, #0]
 8013660:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013664:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013668:	e853 3f00 	ldrex	r3, [r3]
 801366c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8013670:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013674:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013678:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	681b      	ldr	r3, [r3, #0]
 8013680:	461a      	mov	r2, r3
 8013682:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013686:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801368a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801368e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8013692:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8013696:	e841 2300 	strex	r3, r2, [r1]
 801369a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801369e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d1da      	bne.n	801365c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	3308      	adds	r3, #8
 80136ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80136ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80136b0:	e853 3f00 	ldrex	r3, [r3]
 80136b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80136b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80136b8:	f023 0301 	bic.w	r3, r3, #1
 80136bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	681b      	ldr	r3, [r3, #0]
 80136c4:	3308      	adds	r3, #8
 80136c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80136ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80136ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80136d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80136d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80136d6:	e841 2300 	strex	r3, r2, [r1]
 80136da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80136dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d1e1      	bne.n	80136a6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	3308      	adds	r3, #8
 80136e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80136ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80136ec:	e853 3f00 	ldrex	r3, [r3]
 80136f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80136f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80136f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80136f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	3308      	adds	r3, #8
 8013702:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8013706:	66fa      	str	r2, [r7, #108]	; 0x6c
 8013708:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801370a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801370c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801370e:	e841 2300 	strex	r3, r2, [r1]
 8013712:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8013714:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013716:	2b00      	cmp	r3, #0
 8013718:	d1e3      	bne.n	80136e2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	2220      	movs	r2, #32
 801371e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	2200      	movs	r2, #0
 8013724:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801372c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801372e:	e853 3f00 	ldrex	r3, [r3]
 8013732:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8013734:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013736:	f023 0310 	bic.w	r3, r3, #16
 801373a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	681b      	ldr	r3, [r3, #0]
 8013742:	461a      	mov	r2, r3
 8013744:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013748:	65bb      	str	r3, [r7, #88]	; 0x58
 801374a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801374c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801374e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013750:	e841 2300 	strex	r3, r2, [r1]
 8013754:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8013756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013758:	2b00      	cmp	r3, #0
 801375a:	d1e4      	bne.n	8013726 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013760:	4618      	mov	r0, r3
 8013762:	f7fc f8d5 	bl	800f910 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8013772:	b29b      	uxth	r3, r3
 8013774:	1ad3      	subs	r3, r2, r3
 8013776:	b29b      	uxth	r3, r3
 8013778:	4619      	mov	r1, r3
 801377a:	6878      	ldr	r0, [r7, #4]
 801377c:	f000 f8de 	bl	801393c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8013780:	e0b5      	b.n	80138ee <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801378e:	b29b      	uxth	r3, r3
 8013790:	1ad3      	subs	r3, r2, r3
 8013792:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801379c:	b29b      	uxth	r3, r3
 801379e:	2b00      	cmp	r3, #0
 80137a0:	f000 80a7 	beq.w	80138f2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 80137a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	f000 80a2 	beq.w	80138f2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80137b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137b6:	e853 3f00 	ldrex	r3, [r3]
 80137ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80137bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80137c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	461a      	mov	r2, r3
 80137cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80137d0:	647b      	str	r3, [r7, #68]	; 0x44
 80137d2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80137d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80137d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80137d8:	e841 2300 	strex	r3, r2, [r1]
 80137dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80137de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d1e4      	bne.n	80137ae <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	3308      	adds	r3, #8
 80137ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80137ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137ee:	e853 3f00 	ldrex	r3, [r3]
 80137f2:	623b      	str	r3, [r7, #32]
   return(result);
 80137f4:	6a3b      	ldr	r3, [r7, #32]
 80137f6:	f023 0301 	bic.w	r3, r3, #1
 80137fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	681b      	ldr	r3, [r3, #0]
 8013802:	3308      	adds	r3, #8
 8013804:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8013808:	633a      	str	r2, [r7, #48]	; 0x30
 801380a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801380c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801380e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013810:	e841 2300 	strex	r3, r2, [r1]
 8013814:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013818:	2b00      	cmp	r3, #0
 801381a:	d1e3      	bne.n	80137e4 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	2220      	movs	r2, #32
 8013820:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	2200      	movs	r2, #0
 8013826:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	2200      	movs	r2, #0
 801382c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013834:	693b      	ldr	r3, [r7, #16]
 8013836:	e853 3f00 	ldrex	r3, [r3]
 801383a:	60fb      	str	r3, [r7, #12]
   return(result);
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	f023 0310 	bic.w	r3, r3, #16
 8013842:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	461a      	mov	r2, r3
 801384c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013850:	61fb      	str	r3, [r7, #28]
 8013852:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013854:	69b9      	ldr	r1, [r7, #24]
 8013856:	69fa      	ldr	r2, [r7, #28]
 8013858:	e841 2300 	strex	r3, r2, [r1]
 801385c:	617b      	str	r3, [r7, #20]
   return(result);
 801385e:	697b      	ldr	r3, [r7, #20]
 8013860:	2b00      	cmp	r3, #0
 8013862:	d1e4      	bne.n	801382e <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8013864:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8013868:	4619      	mov	r1, r3
 801386a:	6878      	ldr	r0, [r7, #4]
 801386c:	f000 f866 	bl	801393c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8013870:	e03f      	b.n	80138f2 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8013872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013876:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801387a:	2b00      	cmp	r3, #0
 801387c:	d00e      	beq.n	801389c <HAL_UART_IRQHandler+0x55c>
 801387e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013886:	2b00      	cmp	r3, #0
 8013888:	d008      	beq.n	801389c <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	681b      	ldr	r3, [r3, #0]
 801388e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8013892:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8013894:	6878      	ldr	r0, [r7, #4]
 8013896:	f000 f85d 	bl	8013954 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801389a:	e02d      	b.n	80138f8 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801389c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80138a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d00e      	beq.n	80138c6 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80138a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80138ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d008      	beq.n	80138c6 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d01c      	beq.n	80138f6 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80138c0:	6878      	ldr	r0, [r7, #4]
 80138c2:	4798      	blx	r3
    }
    return;
 80138c4:	e017      	b.n	80138f6 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80138c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80138ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d012      	beq.n	80138f8 <HAL_UART_IRQHandler+0x5b8>
 80138d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80138d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d00c      	beq.n	80138f8 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 80138de:	6878      	ldr	r0, [r7, #4]
 80138e0:	f000 fe54 	bl	801458c <UART_EndTransmit_IT>
    return;
 80138e4:	e008      	b.n	80138f8 <HAL_UART_IRQHandler+0x5b8>
      return;
 80138e6:	bf00      	nop
 80138e8:	e006      	b.n	80138f8 <HAL_UART_IRQHandler+0x5b8>
    return;
 80138ea:	bf00      	nop
 80138ec:	e004      	b.n	80138f8 <HAL_UART_IRQHandler+0x5b8>
      return;
 80138ee:	bf00      	nop
 80138f0:	e002      	b.n	80138f8 <HAL_UART_IRQHandler+0x5b8>
      return;
 80138f2:	bf00      	nop
 80138f4:	e000      	b.n	80138f8 <HAL_UART_IRQHandler+0x5b8>
    return;
 80138f6:	bf00      	nop
  }

}
 80138f8:	37e8      	adds	r7, #232	; 0xe8
 80138fa:	46bd      	mov	sp, r7
 80138fc:	bd80      	pop	{r7, pc}
 80138fe:	bf00      	nop

08013900 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8013900:	b480      	push	{r7}
 8013902:	b083      	sub	sp, #12
 8013904:	af00      	add	r7, sp, #0
 8013906:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8013908:	bf00      	nop
 801390a:	370c      	adds	r7, #12
 801390c:	46bd      	mov	sp, r7
 801390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013912:	4770      	bx	lr

08013914 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8013914:	b480      	push	{r7}
 8013916:	b083      	sub	sp, #12
 8013918:	af00      	add	r7, sp, #0
 801391a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801391c:	bf00      	nop
 801391e:	370c      	adds	r7, #12
 8013920:	46bd      	mov	sp, r7
 8013922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013926:	4770      	bx	lr

08013928 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8013928:	b480      	push	{r7}
 801392a:	b083      	sub	sp, #12
 801392c:	af00      	add	r7, sp, #0
 801392e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8013930:	bf00      	nop
 8013932:	370c      	adds	r7, #12
 8013934:	46bd      	mov	sp, r7
 8013936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801393a:	4770      	bx	lr

0801393c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801393c:	b480      	push	{r7}
 801393e:	b083      	sub	sp, #12
 8013940:	af00      	add	r7, sp, #0
 8013942:	6078      	str	r0, [r7, #4]
 8013944:	460b      	mov	r3, r1
 8013946:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8013948:	bf00      	nop
 801394a:	370c      	adds	r7, #12
 801394c:	46bd      	mov	sp, r7
 801394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013952:	4770      	bx	lr

08013954 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8013954:	b480      	push	{r7}
 8013956:	b083      	sub	sp, #12
 8013958:	af00      	add	r7, sp, #0
 801395a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801395c:	bf00      	nop
 801395e:	370c      	adds	r7, #12
 8013960:	46bd      	mov	sp, r7
 8013962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013966:	4770      	bx	lr

08013968 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8013968:	b580      	push	{r7, lr}
 801396a:	b088      	sub	sp, #32
 801396c:	af00      	add	r7, sp, #0
 801396e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8013970:	2300      	movs	r3, #0
 8013972:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	689a      	ldr	r2, [r3, #8]
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	691b      	ldr	r3, [r3, #16]
 801397c:	431a      	orrs	r2, r3
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	695b      	ldr	r3, [r3, #20]
 8013982:	431a      	orrs	r2, r3
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	69db      	ldr	r3, [r3, #28]
 8013988:	4313      	orrs	r3, r2
 801398a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	681b      	ldr	r3, [r3, #0]
 8013990:	681a      	ldr	r2, [r3, #0]
 8013992:	4ba7      	ldr	r3, [pc, #668]	; (8013c30 <UART_SetConfig+0x2c8>)
 8013994:	4013      	ands	r3, r2
 8013996:	687a      	ldr	r2, [r7, #4]
 8013998:	6812      	ldr	r2, [r2, #0]
 801399a:	6979      	ldr	r1, [r7, #20]
 801399c:	430b      	orrs	r3, r1
 801399e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	685b      	ldr	r3, [r3, #4]
 80139a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	68da      	ldr	r2, [r3, #12]
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	681b      	ldr	r3, [r3, #0]
 80139b2:	430a      	orrs	r2, r1
 80139b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	699b      	ldr	r3, [r3, #24]
 80139ba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	6a1b      	ldr	r3, [r3, #32]
 80139c0:	697a      	ldr	r2, [r7, #20]
 80139c2:	4313      	orrs	r3, r2
 80139c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	689b      	ldr	r3, [r3, #8]
 80139cc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	697a      	ldr	r2, [r7, #20]
 80139d6:	430a      	orrs	r2, r1
 80139d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	681b      	ldr	r3, [r3, #0]
 80139de:	4a95      	ldr	r2, [pc, #596]	; (8013c34 <UART_SetConfig+0x2cc>)
 80139e0:	4293      	cmp	r3, r2
 80139e2:	d120      	bne.n	8013a26 <UART_SetConfig+0xbe>
 80139e4:	4b94      	ldr	r3, [pc, #592]	; (8013c38 <UART_SetConfig+0x2d0>)
 80139e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80139ea:	f003 0303 	and.w	r3, r3, #3
 80139ee:	2b03      	cmp	r3, #3
 80139f0:	d816      	bhi.n	8013a20 <UART_SetConfig+0xb8>
 80139f2:	a201      	add	r2, pc, #4	; (adr r2, 80139f8 <UART_SetConfig+0x90>)
 80139f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80139f8:	08013a09 	.word	0x08013a09
 80139fc:	08013a15 	.word	0x08013a15
 8013a00:	08013a0f 	.word	0x08013a0f
 8013a04:	08013a1b 	.word	0x08013a1b
 8013a08:	2301      	movs	r3, #1
 8013a0a:	77fb      	strb	r3, [r7, #31]
 8013a0c:	e14f      	b.n	8013cae <UART_SetConfig+0x346>
 8013a0e:	2302      	movs	r3, #2
 8013a10:	77fb      	strb	r3, [r7, #31]
 8013a12:	e14c      	b.n	8013cae <UART_SetConfig+0x346>
 8013a14:	2304      	movs	r3, #4
 8013a16:	77fb      	strb	r3, [r7, #31]
 8013a18:	e149      	b.n	8013cae <UART_SetConfig+0x346>
 8013a1a:	2308      	movs	r3, #8
 8013a1c:	77fb      	strb	r3, [r7, #31]
 8013a1e:	e146      	b.n	8013cae <UART_SetConfig+0x346>
 8013a20:	2310      	movs	r3, #16
 8013a22:	77fb      	strb	r3, [r7, #31]
 8013a24:	e143      	b.n	8013cae <UART_SetConfig+0x346>
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	4a84      	ldr	r2, [pc, #528]	; (8013c3c <UART_SetConfig+0x2d4>)
 8013a2c:	4293      	cmp	r3, r2
 8013a2e:	d132      	bne.n	8013a96 <UART_SetConfig+0x12e>
 8013a30:	4b81      	ldr	r3, [pc, #516]	; (8013c38 <UART_SetConfig+0x2d0>)
 8013a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013a36:	f003 030c 	and.w	r3, r3, #12
 8013a3a:	2b0c      	cmp	r3, #12
 8013a3c:	d828      	bhi.n	8013a90 <UART_SetConfig+0x128>
 8013a3e:	a201      	add	r2, pc, #4	; (adr r2, 8013a44 <UART_SetConfig+0xdc>)
 8013a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a44:	08013a79 	.word	0x08013a79
 8013a48:	08013a91 	.word	0x08013a91
 8013a4c:	08013a91 	.word	0x08013a91
 8013a50:	08013a91 	.word	0x08013a91
 8013a54:	08013a85 	.word	0x08013a85
 8013a58:	08013a91 	.word	0x08013a91
 8013a5c:	08013a91 	.word	0x08013a91
 8013a60:	08013a91 	.word	0x08013a91
 8013a64:	08013a7f 	.word	0x08013a7f
 8013a68:	08013a91 	.word	0x08013a91
 8013a6c:	08013a91 	.word	0x08013a91
 8013a70:	08013a91 	.word	0x08013a91
 8013a74:	08013a8b 	.word	0x08013a8b
 8013a78:	2300      	movs	r3, #0
 8013a7a:	77fb      	strb	r3, [r7, #31]
 8013a7c:	e117      	b.n	8013cae <UART_SetConfig+0x346>
 8013a7e:	2302      	movs	r3, #2
 8013a80:	77fb      	strb	r3, [r7, #31]
 8013a82:	e114      	b.n	8013cae <UART_SetConfig+0x346>
 8013a84:	2304      	movs	r3, #4
 8013a86:	77fb      	strb	r3, [r7, #31]
 8013a88:	e111      	b.n	8013cae <UART_SetConfig+0x346>
 8013a8a:	2308      	movs	r3, #8
 8013a8c:	77fb      	strb	r3, [r7, #31]
 8013a8e:	e10e      	b.n	8013cae <UART_SetConfig+0x346>
 8013a90:	2310      	movs	r3, #16
 8013a92:	77fb      	strb	r3, [r7, #31]
 8013a94:	e10b      	b.n	8013cae <UART_SetConfig+0x346>
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	4a69      	ldr	r2, [pc, #420]	; (8013c40 <UART_SetConfig+0x2d8>)
 8013a9c:	4293      	cmp	r3, r2
 8013a9e:	d120      	bne.n	8013ae2 <UART_SetConfig+0x17a>
 8013aa0:	4b65      	ldr	r3, [pc, #404]	; (8013c38 <UART_SetConfig+0x2d0>)
 8013aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013aa6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8013aaa:	2b30      	cmp	r3, #48	; 0x30
 8013aac:	d013      	beq.n	8013ad6 <UART_SetConfig+0x16e>
 8013aae:	2b30      	cmp	r3, #48	; 0x30
 8013ab0:	d814      	bhi.n	8013adc <UART_SetConfig+0x174>
 8013ab2:	2b20      	cmp	r3, #32
 8013ab4:	d009      	beq.n	8013aca <UART_SetConfig+0x162>
 8013ab6:	2b20      	cmp	r3, #32
 8013ab8:	d810      	bhi.n	8013adc <UART_SetConfig+0x174>
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d002      	beq.n	8013ac4 <UART_SetConfig+0x15c>
 8013abe:	2b10      	cmp	r3, #16
 8013ac0:	d006      	beq.n	8013ad0 <UART_SetConfig+0x168>
 8013ac2:	e00b      	b.n	8013adc <UART_SetConfig+0x174>
 8013ac4:	2300      	movs	r3, #0
 8013ac6:	77fb      	strb	r3, [r7, #31]
 8013ac8:	e0f1      	b.n	8013cae <UART_SetConfig+0x346>
 8013aca:	2302      	movs	r3, #2
 8013acc:	77fb      	strb	r3, [r7, #31]
 8013ace:	e0ee      	b.n	8013cae <UART_SetConfig+0x346>
 8013ad0:	2304      	movs	r3, #4
 8013ad2:	77fb      	strb	r3, [r7, #31]
 8013ad4:	e0eb      	b.n	8013cae <UART_SetConfig+0x346>
 8013ad6:	2308      	movs	r3, #8
 8013ad8:	77fb      	strb	r3, [r7, #31]
 8013ada:	e0e8      	b.n	8013cae <UART_SetConfig+0x346>
 8013adc:	2310      	movs	r3, #16
 8013ade:	77fb      	strb	r3, [r7, #31]
 8013ae0:	e0e5      	b.n	8013cae <UART_SetConfig+0x346>
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	4a57      	ldr	r2, [pc, #348]	; (8013c44 <UART_SetConfig+0x2dc>)
 8013ae8:	4293      	cmp	r3, r2
 8013aea:	d120      	bne.n	8013b2e <UART_SetConfig+0x1c6>
 8013aec:	4b52      	ldr	r3, [pc, #328]	; (8013c38 <UART_SetConfig+0x2d0>)
 8013aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013af2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8013af6:	2bc0      	cmp	r3, #192	; 0xc0
 8013af8:	d013      	beq.n	8013b22 <UART_SetConfig+0x1ba>
 8013afa:	2bc0      	cmp	r3, #192	; 0xc0
 8013afc:	d814      	bhi.n	8013b28 <UART_SetConfig+0x1c0>
 8013afe:	2b80      	cmp	r3, #128	; 0x80
 8013b00:	d009      	beq.n	8013b16 <UART_SetConfig+0x1ae>
 8013b02:	2b80      	cmp	r3, #128	; 0x80
 8013b04:	d810      	bhi.n	8013b28 <UART_SetConfig+0x1c0>
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d002      	beq.n	8013b10 <UART_SetConfig+0x1a8>
 8013b0a:	2b40      	cmp	r3, #64	; 0x40
 8013b0c:	d006      	beq.n	8013b1c <UART_SetConfig+0x1b4>
 8013b0e:	e00b      	b.n	8013b28 <UART_SetConfig+0x1c0>
 8013b10:	2300      	movs	r3, #0
 8013b12:	77fb      	strb	r3, [r7, #31]
 8013b14:	e0cb      	b.n	8013cae <UART_SetConfig+0x346>
 8013b16:	2302      	movs	r3, #2
 8013b18:	77fb      	strb	r3, [r7, #31]
 8013b1a:	e0c8      	b.n	8013cae <UART_SetConfig+0x346>
 8013b1c:	2304      	movs	r3, #4
 8013b1e:	77fb      	strb	r3, [r7, #31]
 8013b20:	e0c5      	b.n	8013cae <UART_SetConfig+0x346>
 8013b22:	2308      	movs	r3, #8
 8013b24:	77fb      	strb	r3, [r7, #31]
 8013b26:	e0c2      	b.n	8013cae <UART_SetConfig+0x346>
 8013b28:	2310      	movs	r3, #16
 8013b2a:	77fb      	strb	r3, [r7, #31]
 8013b2c:	e0bf      	b.n	8013cae <UART_SetConfig+0x346>
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	681b      	ldr	r3, [r3, #0]
 8013b32:	4a45      	ldr	r2, [pc, #276]	; (8013c48 <UART_SetConfig+0x2e0>)
 8013b34:	4293      	cmp	r3, r2
 8013b36:	d125      	bne.n	8013b84 <UART_SetConfig+0x21c>
 8013b38:	4b3f      	ldr	r3, [pc, #252]	; (8013c38 <UART_SetConfig+0x2d0>)
 8013b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013b42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013b46:	d017      	beq.n	8013b78 <UART_SetConfig+0x210>
 8013b48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013b4c:	d817      	bhi.n	8013b7e <UART_SetConfig+0x216>
 8013b4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013b52:	d00b      	beq.n	8013b6c <UART_SetConfig+0x204>
 8013b54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013b58:	d811      	bhi.n	8013b7e <UART_SetConfig+0x216>
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d003      	beq.n	8013b66 <UART_SetConfig+0x1fe>
 8013b5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013b62:	d006      	beq.n	8013b72 <UART_SetConfig+0x20a>
 8013b64:	e00b      	b.n	8013b7e <UART_SetConfig+0x216>
 8013b66:	2300      	movs	r3, #0
 8013b68:	77fb      	strb	r3, [r7, #31]
 8013b6a:	e0a0      	b.n	8013cae <UART_SetConfig+0x346>
 8013b6c:	2302      	movs	r3, #2
 8013b6e:	77fb      	strb	r3, [r7, #31]
 8013b70:	e09d      	b.n	8013cae <UART_SetConfig+0x346>
 8013b72:	2304      	movs	r3, #4
 8013b74:	77fb      	strb	r3, [r7, #31]
 8013b76:	e09a      	b.n	8013cae <UART_SetConfig+0x346>
 8013b78:	2308      	movs	r3, #8
 8013b7a:	77fb      	strb	r3, [r7, #31]
 8013b7c:	e097      	b.n	8013cae <UART_SetConfig+0x346>
 8013b7e:	2310      	movs	r3, #16
 8013b80:	77fb      	strb	r3, [r7, #31]
 8013b82:	e094      	b.n	8013cae <UART_SetConfig+0x346>
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	681b      	ldr	r3, [r3, #0]
 8013b88:	4a30      	ldr	r2, [pc, #192]	; (8013c4c <UART_SetConfig+0x2e4>)
 8013b8a:	4293      	cmp	r3, r2
 8013b8c:	d125      	bne.n	8013bda <UART_SetConfig+0x272>
 8013b8e:	4b2a      	ldr	r3, [pc, #168]	; (8013c38 <UART_SetConfig+0x2d0>)
 8013b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013b94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8013b98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8013b9c:	d017      	beq.n	8013bce <UART_SetConfig+0x266>
 8013b9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8013ba2:	d817      	bhi.n	8013bd4 <UART_SetConfig+0x26c>
 8013ba4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013ba8:	d00b      	beq.n	8013bc2 <UART_SetConfig+0x25a>
 8013baa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013bae:	d811      	bhi.n	8013bd4 <UART_SetConfig+0x26c>
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d003      	beq.n	8013bbc <UART_SetConfig+0x254>
 8013bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013bb8:	d006      	beq.n	8013bc8 <UART_SetConfig+0x260>
 8013bba:	e00b      	b.n	8013bd4 <UART_SetConfig+0x26c>
 8013bbc:	2301      	movs	r3, #1
 8013bbe:	77fb      	strb	r3, [r7, #31]
 8013bc0:	e075      	b.n	8013cae <UART_SetConfig+0x346>
 8013bc2:	2302      	movs	r3, #2
 8013bc4:	77fb      	strb	r3, [r7, #31]
 8013bc6:	e072      	b.n	8013cae <UART_SetConfig+0x346>
 8013bc8:	2304      	movs	r3, #4
 8013bca:	77fb      	strb	r3, [r7, #31]
 8013bcc:	e06f      	b.n	8013cae <UART_SetConfig+0x346>
 8013bce:	2308      	movs	r3, #8
 8013bd0:	77fb      	strb	r3, [r7, #31]
 8013bd2:	e06c      	b.n	8013cae <UART_SetConfig+0x346>
 8013bd4:	2310      	movs	r3, #16
 8013bd6:	77fb      	strb	r3, [r7, #31]
 8013bd8:	e069      	b.n	8013cae <UART_SetConfig+0x346>
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	4a1c      	ldr	r2, [pc, #112]	; (8013c50 <UART_SetConfig+0x2e8>)
 8013be0:	4293      	cmp	r3, r2
 8013be2:	d137      	bne.n	8013c54 <UART_SetConfig+0x2ec>
 8013be4:	4b14      	ldr	r3, [pc, #80]	; (8013c38 <UART_SetConfig+0x2d0>)
 8013be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013bea:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8013bee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8013bf2:	d017      	beq.n	8013c24 <UART_SetConfig+0x2bc>
 8013bf4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8013bf8:	d817      	bhi.n	8013c2a <UART_SetConfig+0x2c2>
 8013bfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013bfe:	d00b      	beq.n	8013c18 <UART_SetConfig+0x2b0>
 8013c00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013c04:	d811      	bhi.n	8013c2a <UART_SetConfig+0x2c2>
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d003      	beq.n	8013c12 <UART_SetConfig+0x2aa>
 8013c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013c0e:	d006      	beq.n	8013c1e <UART_SetConfig+0x2b6>
 8013c10:	e00b      	b.n	8013c2a <UART_SetConfig+0x2c2>
 8013c12:	2300      	movs	r3, #0
 8013c14:	77fb      	strb	r3, [r7, #31]
 8013c16:	e04a      	b.n	8013cae <UART_SetConfig+0x346>
 8013c18:	2302      	movs	r3, #2
 8013c1a:	77fb      	strb	r3, [r7, #31]
 8013c1c:	e047      	b.n	8013cae <UART_SetConfig+0x346>
 8013c1e:	2304      	movs	r3, #4
 8013c20:	77fb      	strb	r3, [r7, #31]
 8013c22:	e044      	b.n	8013cae <UART_SetConfig+0x346>
 8013c24:	2308      	movs	r3, #8
 8013c26:	77fb      	strb	r3, [r7, #31]
 8013c28:	e041      	b.n	8013cae <UART_SetConfig+0x346>
 8013c2a:	2310      	movs	r3, #16
 8013c2c:	77fb      	strb	r3, [r7, #31]
 8013c2e:	e03e      	b.n	8013cae <UART_SetConfig+0x346>
 8013c30:	efff69f3 	.word	0xefff69f3
 8013c34:	40011000 	.word	0x40011000
 8013c38:	40023800 	.word	0x40023800
 8013c3c:	40004400 	.word	0x40004400
 8013c40:	40004800 	.word	0x40004800
 8013c44:	40004c00 	.word	0x40004c00
 8013c48:	40005000 	.word	0x40005000
 8013c4c:	40011400 	.word	0x40011400
 8013c50:	40007800 	.word	0x40007800
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	4a71      	ldr	r2, [pc, #452]	; (8013e20 <UART_SetConfig+0x4b8>)
 8013c5a:	4293      	cmp	r3, r2
 8013c5c:	d125      	bne.n	8013caa <UART_SetConfig+0x342>
 8013c5e:	4b71      	ldr	r3, [pc, #452]	; (8013e24 <UART_SetConfig+0x4bc>)
 8013c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013c64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8013c68:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8013c6c:	d017      	beq.n	8013c9e <UART_SetConfig+0x336>
 8013c6e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8013c72:	d817      	bhi.n	8013ca4 <UART_SetConfig+0x33c>
 8013c74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013c78:	d00b      	beq.n	8013c92 <UART_SetConfig+0x32a>
 8013c7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013c7e:	d811      	bhi.n	8013ca4 <UART_SetConfig+0x33c>
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d003      	beq.n	8013c8c <UART_SetConfig+0x324>
 8013c84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013c88:	d006      	beq.n	8013c98 <UART_SetConfig+0x330>
 8013c8a:	e00b      	b.n	8013ca4 <UART_SetConfig+0x33c>
 8013c8c:	2300      	movs	r3, #0
 8013c8e:	77fb      	strb	r3, [r7, #31]
 8013c90:	e00d      	b.n	8013cae <UART_SetConfig+0x346>
 8013c92:	2302      	movs	r3, #2
 8013c94:	77fb      	strb	r3, [r7, #31]
 8013c96:	e00a      	b.n	8013cae <UART_SetConfig+0x346>
 8013c98:	2304      	movs	r3, #4
 8013c9a:	77fb      	strb	r3, [r7, #31]
 8013c9c:	e007      	b.n	8013cae <UART_SetConfig+0x346>
 8013c9e:	2308      	movs	r3, #8
 8013ca0:	77fb      	strb	r3, [r7, #31]
 8013ca2:	e004      	b.n	8013cae <UART_SetConfig+0x346>
 8013ca4:	2310      	movs	r3, #16
 8013ca6:	77fb      	strb	r3, [r7, #31]
 8013ca8:	e001      	b.n	8013cae <UART_SetConfig+0x346>
 8013caa:	2310      	movs	r3, #16
 8013cac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	69db      	ldr	r3, [r3, #28]
 8013cb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013cb6:	d15a      	bne.n	8013d6e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8013cb8:	7ffb      	ldrb	r3, [r7, #31]
 8013cba:	2b08      	cmp	r3, #8
 8013cbc:	d827      	bhi.n	8013d0e <UART_SetConfig+0x3a6>
 8013cbe:	a201      	add	r2, pc, #4	; (adr r2, 8013cc4 <UART_SetConfig+0x35c>)
 8013cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013cc4:	08013ce9 	.word	0x08013ce9
 8013cc8:	08013cf1 	.word	0x08013cf1
 8013ccc:	08013cf9 	.word	0x08013cf9
 8013cd0:	08013d0f 	.word	0x08013d0f
 8013cd4:	08013cff 	.word	0x08013cff
 8013cd8:	08013d0f 	.word	0x08013d0f
 8013cdc:	08013d0f 	.word	0x08013d0f
 8013ce0:	08013d0f 	.word	0x08013d0f
 8013ce4:	08013d07 	.word	0x08013d07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013ce8:	f7fd fce6 	bl	80116b8 <HAL_RCC_GetPCLK1Freq>
 8013cec:	61b8      	str	r0, [r7, #24]
        break;
 8013cee:	e013      	b.n	8013d18 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013cf0:	f7fd fcf6 	bl	80116e0 <HAL_RCC_GetPCLK2Freq>
 8013cf4:	61b8      	str	r0, [r7, #24]
        break;
 8013cf6:	e00f      	b.n	8013d18 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8013cf8:	4b4b      	ldr	r3, [pc, #300]	; (8013e28 <UART_SetConfig+0x4c0>)
 8013cfa:	61bb      	str	r3, [r7, #24]
        break;
 8013cfc:	e00c      	b.n	8013d18 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8013cfe:	f7fd fbef 	bl	80114e0 <HAL_RCC_GetSysClockFreq>
 8013d02:	61b8      	str	r0, [r7, #24]
        break;
 8013d04:	e008      	b.n	8013d18 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013d06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013d0a:	61bb      	str	r3, [r7, #24]
        break;
 8013d0c:	e004      	b.n	8013d18 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8013d0e:	2300      	movs	r3, #0
 8013d10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8013d12:	2301      	movs	r3, #1
 8013d14:	77bb      	strb	r3, [r7, #30]
        break;
 8013d16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8013d18:	69bb      	ldr	r3, [r7, #24]
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d074      	beq.n	8013e08 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8013d1e:	69bb      	ldr	r3, [r7, #24]
 8013d20:	005a      	lsls	r2, r3, #1
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	685b      	ldr	r3, [r3, #4]
 8013d26:	085b      	lsrs	r3, r3, #1
 8013d28:	441a      	add	r2, r3
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	685b      	ldr	r3, [r3, #4]
 8013d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013d32:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013d34:	693b      	ldr	r3, [r7, #16]
 8013d36:	2b0f      	cmp	r3, #15
 8013d38:	d916      	bls.n	8013d68 <UART_SetConfig+0x400>
 8013d3a:	693b      	ldr	r3, [r7, #16]
 8013d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013d40:	d212      	bcs.n	8013d68 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8013d42:	693b      	ldr	r3, [r7, #16]
 8013d44:	b29b      	uxth	r3, r3
 8013d46:	f023 030f 	bic.w	r3, r3, #15
 8013d4a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8013d4c:	693b      	ldr	r3, [r7, #16]
 8013d4e:	085b      	lsrs	r3, r3, #1
 8013d50:	b29b      	uxth	r3, r3
 8013d52:	f003 0307 	and.w	r3, r3, #7
 8013d56:	b29a      	uxth	r2, r3
 8013d58:	89fb      	ldrh	r3, [r7, #14]
 8013d5a:	4313      	orrs	r3, r2
 8013d5c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	89fa      	ldrh	r2, [r7, #14]
 8013d64:	60da      	str	r2, [r3, #12]
 8013d66:	e04f      	b.n	8013e08 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8013d68:	2301      	movs	r3, #1
 8013d6a:	77bb      	strb	r3, [r7, #30]
 8013d6c:	e04c      	b.n	8013e08 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8013d6e:	7ffb      	ldrb	r3, [r7, #31]
 8013d70:	2b08      	cmp	r3, #8
 8013d72:	d828      	bhi.n	8013dc6 <UART_SetConfig+0x45e>
 8013d74:	a201      	add	r2, pc, #4	; (adr r2, 8013d7c <UART_SetConfig+0x414>)
 8013d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d7a:	bf00      	nop
 8013d7c:	08013da1 	.word	0x08013da1
 8013d80:	08013da9 	.word	0x08013da9
 8013d84:	08013db1 	.word	0x08013db1
 8013d88:	08013dc7 	.word	0x08013dc7
 8013d8c:	08013db7 	.word	0x08013db7
 8013d90:	08013dc7 	.word	0x08013dc7
 8013d94:	08013dc7 	.word	0x08013dc7
 8013d98:	08013dc7 	.word	0x08013dc7
 8013d9c:	08013dbf 	.word	0x08013dbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013da0:	f7fd fc8a 	bl	80116b8 <HAL_RCC_GetPCLK1Freq>
 8013da4:	61b8      	str	r0, [r7, #24]
        break;
 8013da6:	e013      	b.n	8013dd0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013da8:	f7fd fc9a 	bl	80116e0 <HAL_RCC_GetPCLK2Freq>
 8013dac:	61b8      	str	r0, [r7, #24]
        break;
 8013dae:	e00f      	b.n	8013dd0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8013db0:	4b1d      	ldr	r3, [pc, #116]	; (8013e28 <UART_SetConfig+0x4c0>)
 8013db2:	61bb      	str	r3, [r7, #24]
        break;
 8013db4:	e00c      	b.n	8013dd0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8013db6:	f7fd fb93 	bl	80114e0 <HAL_RCC_GetSysClockFreq>
 8013dba:	61b8      	str	r0, [r7, #24]
        break;
 8013dbc:	e008      	b.n	8013dd0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013dbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013dc2:	61bb      	str	r3, [r7, #24]
        break;
 8013dc4:	e004      	b.n	8013dd0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8013dc6:	2300      	movs	r3, #0
 8013dc8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8013dca:	2301      	movs	r3, #1
 8013dcc:	77bb      	strb	r3, [r7, #30]
        break;
 8013dce:	bf00      	nop
    }

    if (pclk != 0U)
 8013dd0:	69bb      	ldr	r3, [r7, #24]
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d018      	beq.n	8013e08 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	685b      	ldr	r3, [r3, #4]
 8013dda:	085a      	lsrs	r2, r3, #1
 8013ddc:	69bb      	ldr	r3, [r7, #24]
 8013dde:	441a      	add	r2, r3
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	685b      	ldr	r3, [r3, #4]
 8013de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8013de8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013dea:	693b      	ldr	r3, [r7, #16]
 8013dec:	2b0f      	cmp	r3, #15
 8013dee:	d909      	bls.n	8013e04 <UART_SetConfig+0x49c>
 8013df0:	693b      	ldr	r3, [r7, #16]
 8013df2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013df6:	d205      	bcs.n	8013e04 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8013df8:	693b      	ldr	r3, [r7, #16]
 8013dfa:	b29a      	uxth	r2, r3
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	681b      	ldr	r3, [r3, #0]
 8013e00:	60da      	str	r2, [r3, #12]
 8013e02:	e001      	b.n	8013e08 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8013e04:	2301      	movs	r3, #1
 8013e06:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	2200      	movs	r2, #0
 8013e0c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	2200      	movs	r2, #0
 8013e12:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8013e14:	7fbb      	ldrb	r3, [r7, #30]
}
 8013e16:	4618      	mov	r0, r3
 8013e18:	3720      	adds	r7, #32
 8013e1a:	46bd      	mov	sp, r7
 8013e1c:	bd80      	pop	{r7, pc}
 8013e1e:	bf00      	nop
 8013e20:	40007c00 	.word	0x40007c00
 8013e24:	40023800 	.word	0x40023800
 8013e28:	00f42400 	.word	0x00f42400

08013e2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8013e2c:	b480      	push	{r7}
 8013e2e:	b083      	sub	sp, #12
 8013e30:	af00      	add	r7, sp, #0
 8013e32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e38:	f003 0301 	and.w	r3, r3, #1
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d00a      	beq.n	8013e56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	681b      	ldr	r3, [r3, #0]
 8013e44:	685b      	ldr	r3, [r3, #4]
 8013e46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	681b      	ldr	r3, [r3, #0]
 8013e52:	430a      	orrs	r2, r1
 8013e54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e5a:	f003 0302 	and.w	r3, r3, #2
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d00a      	beq.n	8013e78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	681b      	ldr	r3, [r3, #0]
 8013e66:	685b      	ldr	r3, [r3, #4]
 8013e68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	681b      	ldr	r3, [r3, #0]
 8013e74:	430a      	orrs	r2, r1
 8013e76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e7c:	f003 0304 	and.w	r3, r3, #4
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d00a      	beq.n	8013e9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	681b      	ldr	r3, [r3, #0]
 8013e88:	685b      	ldr	r3, [r3, #4]
 8013e8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	681b      	ldr	r3, [r3, #0]
 8013e96:	430a      	orrs	r2, r1
 8013e98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e9e:	f003 0308 	and.w	r3, r3, #8
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d00a      	beq.n	8013ebc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	685b      	ldr	r3, [r3, #4]
 8013eac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	681b      	ldr	r3, [r3, #0]
 8013eb8:	430a      	orrs	r2, r1
 8013eba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ec0:	f003 0310 	and.w	r3, r3, #16
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d00a      	beq.n	8013ede <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	689b      	ldr	r3, [r3, #8]
 8013ece:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	430a      	orrs	r2, r1
 8013edc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ee2:	f003 0320 	and.w	r3, r3, #32
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d00a      	beq.n	8013f00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	689b      	ldr	r3, [r3, #8]
 8013ef0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	430a      	orrs	r2, r1
 8013efe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d01a      	beq.n	8013f42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	681b      	ldr	r3, [r3, #0]
 8013f10:	685b      	ldr	r3, [r3, #4]
 8013f12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	681b      	ldr	r3, [r3, #0]
 8013f1e:	430a      	orrs	r2, r1
 8013f20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013f2a:	d10a      	bne.n	8013f42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	681b      	ldr	r3, [r3, #0]
 8013f30:	685b      	ldr	r3, [r3, #4]
 8013f32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	681b      	ldr	r3, [r3, #0]
 8013f3e:	430a      	orrs	r2, r1
 8013f40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d00a      	beq.n	8013f64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	685b      	ldr	r3, [r3, #4]
 8013f54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	681b      	ldr	r3, [r3, #0]
 8013f60:	430a      	orrs	r2, r1
 8013f62:	605a      	str	r2, [r3, #4]
  }
}
 8013f64:	bf00      	nop
 8013f66:	370c      	adds	r7, #12
 8013f68:	46bd      	mov	sp, r7
 8013f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f6e:	4770      	bx	lr

08013f70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8013f70:	b580      	push	{r7, lr}
 8013f72:	b086      	sub	sp, #24
 8013f74:	af02      	add	r7, sp, #8
 8013f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	2200      	movs	r2, #0
 8013f7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8013f80:	f7fb fa9a 	bl	800f4b8 <HAL_GetTick>
 8013f84:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	681b      	ldr	r3, [r3, #0]
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	f003 0308 	and.w	r3, r3, #8
 8013f90:	2b08      	cmp	r3, #8
 8013f92:	d10e      	bne.n	8013fb2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013f94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013f98:	9300      	str	r3, [sp, #0]
 8013f9a:	68fb      	ldr	r3, [r7, #12]
 8013f9c:	2200      	movs	r2, #0
 8013f9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8013fa2:	6878      	ldr	r0, [r7, #4]
 8013fa4:	f000 f82d 	bl	8014002 <UART_WaitOnFlagUntilTimeout>
 8013fa8:	4603      	mov	r3, r0
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d001      	beq.n	8013fb2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013fae:	2303      	movs	r3, #3
 8013fb0:	e023      	b.n	8013ffa <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	681b      	ldr	r3, [r3, #0]
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	f003 0304 	and.w	r3, r3, #4
 8013fbc:	2b04      	cmp	r3, #4
 8013fbe:	d10e      	bne.n	8013fde <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013fc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013fc4:	9300      	str	r3, [sp, #0]
 8013fc6:	68fb      	ldr	r3, [r7, #12]
 8013fc8:	2200      	movs	r2, #0
 8013fca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8013fce:	6878      	ldr	r0, [r7, #4]
 8013fd0:	f000 f817 	bl	8014002 <UART_WaitOnFlagUntilTimeout>
 8013fd4:	4603      	mov	r3, r0
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d001      	beq.n	8013fde <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013fda:	2303      	movs	r3, #3
 8013fdc:	e00d      	b.n	8013ffa <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	2220      	movs	r2, #32
 8013fe2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	2220      	movs	r2, #32
 8013fe8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	2200      	movs	r2, #0
 8013fee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	2200      	movs	r2, #0
 8013ff4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8013ff8:	2300      	movs	r3, #0
}
 8013ffa:	4618      	mov	r0, r3
 8013ffc:	3710      	adds	r7, #16
 8013ffe:	46bd      	mov	sp, r7
 8014000:	bd80      	pop	{r7, pc}

08014002 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8014002:	b580      	push	{r7, lr}
 8014004:	b09c      	sub	sp, #112	; 0x70
 8014006:	af00      	add	r7, sp, #0
 8014008:	60f8      	str	r0, [r7, #12]
 801400a:	60b9      	str	r1, [r7, #8]
 801400c:	603b      	str	r3, [r7, #0]
 801400e:	4613      	mov	r3, r2
 8014010:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014012:	e0a5      	b.n	8014160 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014014:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014016:	f1b3 3fff 	cmp.w	r3, #4294967295
 801401a:	f000 80a1 	beq.w	8014160 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801401e:	f7fb fa4b 	bl	800f4b8 <HAL_GetTick>
 8014022:	4602      	mov	r2, r0
 8014024:	683b      	ldr	r3, [r7, #0]
 8014026:	1ad3      	subs	r3, r2, r3
 8014028:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801402a:	429a      	cmp	r2, r3
 801402c:	d302      	bcc.n	8014034 <UART_WaitOnFlagUntilTimeout+0x32>
 801402e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014030:	2b00      	cmp	r3, #0
 8014032:	d13e      	bne.n	80140b2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8014034:	68fb      	ldr	r3, [r7, #12]
 8014036:	681b      	ldr	r3, [r3, #0]
 8014038:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801403a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801403c:	e853 3f00 	ldrex	r3, [r3]
 8014040:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8014042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014044:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8014048:	667b      	str	r3, [r7, #100]	; 0x64
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	681b      	ldr	r3, [r3, #0]
 801404e:	461a      	mov	r2, r3
 8014050:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014052:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014054:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014056:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014058:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801405a:	e841 2300 	strex	r3, r2, [r1]
 801405e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8014060:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014062:	2b00      	cmp	r3, #0
 8014064:	d1e6      	bne.n	8014034 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014066:	68fb      	ldr	r3, [r7, #12]
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	3308      	adds	r3, #8
 801406c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801406e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014070:	e853 3f00 	ldrex	r3, [r3]
 8014074:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8014076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014078:	f023 0301 	bic.w	r3, r3, #1
 801407c:	663b      	str	r3, [r7, #96]	; 0x60
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	681b      	ldr	r3, [r3, #0]
 8014082:	3308      	adds	r3, #8
 8014084:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014086:	64ba      	str	r2, [r7, #72]	; 0x48
 8014088:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801408a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801408c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801408e:	e841 2300 	strex	r3, r2, [r1]
 8014092:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8014094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014096:	2b00      	cmp	r3, #0
 8014098:	d1e5      	bne.n	8014066 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801409a:	68fb      	ldr	r3, [r7, #12]
 801409c:	2220      	movs	r2, #32
 801409e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80140a0:	68fb      	ldr	r3, [r7, #12]
 80140a2:	2220      	movs	r2, #32
 80140a4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80140a6:	68fb      	ldr	r3, [r7, #12]
 80140a8:	2200      	movs	r2, #0
 80140aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80140ae:	2303      	movs	r3, #3
 80140b0:	e067      	b.n	8014182 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80140b2:	68fb      	ldr	r3, [r7, #12]
 80140b4:	681b      	ldr	r3, [r3, #0]
 80140b6:	681b      	ldr	r3, [r3, #0]
 80140b8:	f003 0304 	and.w	r3, r3, #4
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d04f      	beq.n	8014160 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80140c0:	68fb      	ldr	r3, [r7, #12]
 80140c2:	681b      	ldr	r3, [r3, #0]
 80140c4:	69db      	ldr	r3, [r3, #28]
 80140c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80140ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80140ce:	d147      	bne.n	8014160 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80140d0:	68fb      	ldr	r3, [r7, #12]
 80140d2:	681b      	ldr	r3, [r3, #0]
 80140d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80140d8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80140da:	68fb      	ldr	r3, [r7, #12]
 80140dc:	681b      	ldr	r3, [r3, #0]
 80140de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80140e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140e2:	e853 3f00 	ldrex	r3, [r3]
 80140e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80140e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80140ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80140f0:	68fb      	ldr	r3, [r7, #12]
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	461a      	mov	r2, r3
 80140f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80140f8:	637b      	str	r3, [r7, #52]	; 0x34
 80140fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80140fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80140fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014100:	e841 2300 	strex	r3, r2, [r1]
 8014104:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8014106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014108:	2b00      	cmp	r3, #0
 801410a:	d1e6      	bne.n	80140da <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801410c:	68fb      	ldr	r3, [r7, #12]
 801410e:	681b      	ldr	r3, [r3, #0]
 8014110:	3308      	adds	r3, #8
 8014112:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014114:	697b      	ldr	r3, [r7, #20]
 8014116:	e853 3f00 	ldrex	r3, [r3]
 801411a:	613b      	str	r3, [r7, #16]
   return(result);
 801411c:	693b      	ldr	r3, [r7, #16]
 801411e:	f023 0301 	bic.w	r3, r3, #1
 8014122:	66bb      	str	r3, [r7, #104]	; 0x68
 8014124:	68fb      	ldr	r3, [r7, #12]
 8014126:	681b      	ldr	r3, [r3, #0]
 8014128:	3308      	adds	r3, #8
 801412a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801412c:	623a      	str	r2, [r7, #32]
 801412e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014130:	69f9      	ldr	r1, [r7, #28]
 8014132:	6a3a      	ldr	r2, [r7, #32]
 8014134:	e841 2300 	strex	r3, r2, [r1]
 8014138:	61bb      	str	r3, [r7, #24]
   return(result);
 801413a:	69bb      	ldr	r3, [r7, #24]
 801413c:	2b00      	cmp	r3, #0
 801413e:	d1e5      	bne.n	801410c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	2220      	movs	r2, #32
 8014144:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8014146:	68fb      	ldr	r3, [r7, #12]
 8014148:	2220      	movs	r2, #32
 801414a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801414c:	68fb      	ldr	r3, [r7, #12]
 801414e:	2220      	movs	r2, #32
 8014150:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8014154:	68fb      	ldr	r3, [r7, #12]
 8014156:	2200      	movs	r2, #0
 8014158:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 801415c:	2303      	movs	r3, #3
 801415e:	e010      	b.n	8014182 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014160:	68fb      	ldr	r3, [r7, #12]
 8014162:	681b      	ldr	r3, [r3, #0]
 8014164:	69da      	ldr	r2, [r3, #28]
 8014166:	68bb      	ldr	r3, [r7, #8]
 8014168:	4013      	ands	r3, r2
 801416a:	68ba      	ldr	r2, [r7, #8]
 801416c:	429a      	cmp	r2, r3
 801416e:	bf0c      	ite	eq
 8014170:	2301      	moveq	r3, #1
 8014172:	2300      	movne	r3, #0
 8014174:	b2db      	uxtb	r3, r3
 8014176:	461a      	mov	r2, r3
 8014178:	79fb      	ldrb	r3, [r7, #7]
 801417a:	429a      	cmp	r2, r3
 801417c:	f43f af4a 	beq.w	8014014 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8014180:	2300      	movs	r3, #0
}
 8014182:	4618      	mov	r0, r3
 8014184:	3770      	adds	r7, #112	; 0x70
 8014186:	46bd      	mov	sp, r7
 8014188:	bd80      	pop	{r7, pc}
	...

0801418c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801418c:	b480      	push	{r7}
 801418e:	b097      	sub	sp, #92	; 0x5c
 8014190:	af00      	add	r7, sp, #0
 8014192:	60f8      	str	r0, [r7, #12]
 8014194:	60b9      	str	r1, [r7, #8]
 8014196:	4613      	mov	r3, r2
 8014198:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	68ba      	ldr	r2, [r7, #8]
 801419e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80141a0:	68fb      	ldr	r3, [r7, #12]
 80141a2:	88fa      	ldrh	r2, [r7, #6]
 80141a4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80141a8:	68fb      	ldr	r3, [r7, #12]
 80141aa:	88fa      	ldrh	r2, [r7, #6]
 80141ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80141b0:	68fb      	ldr	r3, [r7, #12]
 80141b2:	2200      	movs	r2, #0
 80141b4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	689b      	ldr	r3, [r3, #8]
 80141ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80141be:	d10e      	bne.n	80141de <UART_Start_Receive_IT+0x52>
 80141c0:	68fb      	ldr	r3, [r7, #12]
 80141c2:	691b      	ldr	r3, [r3, #16]
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d105      	bne.n	80141d4 <UART_Start_Receive_IT+0x48>
 80141c8:	68fb      	ldr	r3, [r7, #12]
 80141ca:	f240 12ff 	movw	r2, #511	; 0x1ff
 80141ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80141d2:	e02d      	b.n	8014230 <UART_Start_Receive_IT+0xa4>
 80141d4:	68fb      	ldr	r3, [r7, #12]
 80141d6:	22ff      	movs	r2, #255	; 0xff
 80141d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80141dc:	e028      	b.n	8014230 <UART_Start_Receive_IT+0xa4>
 80141de:	68fb      	ldr	r3, [r7, #12]
 80141e0:	689b      	ldr	r3, [r3, #8]
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d10d      	bne.n	8014202 <UART_Start_Receive_IT+0x76>
 80141e6:	68fb      	ldr	r3, [r7, #12]
 80141e8:	691b      	ldr	r3, [r3, #16]
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d104      	bne.n	80141f8 <UART_Start_Receive_IT+0x6c>
 80141ee:	68fb      	ldr	r3, [r7, #12]
 80141f0:	22ff      	movs	r2, #255	; 0xff
 80141f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80141f6:	e01b      	b.n	8014230 <UART_Start_Receive_IT+0xa4>
 80141f8:	68fb      	ldr	r3, [r7, #12]
 80141fa:	227f      	movs	r2, #127	; 0x7f
 80141fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8014200:	e016      	b.n	8014230 <UART_Start_Receive_IT+0xa4>
 8014202:	68fb      	ldr	r3, [r7, #12]
 8014204:	689b      	ldr	r3, [r3, #8]
 8014206:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801420a:	d10d      	bne.n	8014228 <UART_Start_Receive_IT+0x9c>
 801420c:	68fb      	ldr	r3, [r7, #12]
 801420e:	691b      	ldr	r3, [r3, #16]
 8014210:	2b00      	cmp	r3, #0
 8014212:	d104      	bne.n	801421e <UART_Start_Receive_IT+0x92>
 8014214:	68fb      	ldr	r3, [r7, #12]
 8014216:	227f      	movs	r2, #127	; 0x7f
 8014218:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801421c:	e008      	b.n	8014230 <UART_Start_Receive_IT+0xa4>
 801421e:	68fb      	ldr	r3, [r7, #12]
 8014220:	223f      	movs	r2, #63	; 0x3f
 8014222:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8014226:	e003      	b.n	8014230 <UART_Start_Receive_IT+0xa4>
 8014228:	68fb      	ldr	r3, [r7, #12]
 801422a:	2200      	movs	r2, #0
 801422c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014230:	68fb      	ldr	r3, [r7, #12]
 8014232:	2200      	movs	r2, #0
 8014234:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8014238:	68fb      	ldr	r3, [r7, #12]
 801423a:	2222      	movs	r2, #34	; 0x22
 801423c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801423e:	68fb      	ldr	r3, [r7, #12]
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	3308      	adds	r3, #8
 8014244:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014248:	e853 3f00 	ldrex	r3, [r3]
 801424c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801424e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014250:	f043 0301 	orr.w	r3, r3, #1
 8014254:	657b      	str	r3, [r7, #84]	; 0x54
 8014256:	68fb      	ldr	r3, [r7, #12]
 8014258:	681b      	ldr	r3, [r3, #0]
 801425a:	3308      	adds	r3, #8
 801425c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801425e:	64ba      	str	r2, [r7, #72]	; 0x48
 8014260:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014262:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014264:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014266:	e841 2300 	strex	r3, r2, [r1]
 801426a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801426c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801426e:	2b00      	cmp	r3, #0
 8014270:	d1e5      	bne.n	801423e <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014272:	68fb      	ldr	r3, [r7, #12]
 8014274:	689b      	ldr	r3, [r3, #8]
 8014276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801427a:	d107      	bne.n	801428c <UART_Start_Receive_IT+0x100>
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	691b      	ldr	r3, [r3, #16]
 8014280:	2b00      	cmp	r3, #0
 8014282:	d103      	bne.n	801428c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8014284:	68fb      	ldr	r3, [r7, #12]
 8014286:	4a24      	ldr	r2, [pc, #144]	; (8014318 <UART_Start_Receive_IT+0x18c>)
 8014288:	665a      	str	r2, [r3, #100]	; 0x64
 801428a:	e002      	b.n	8014292 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	4a23      	ldr	r2, [pc, #140]	; (801431c <UART_Start_Receive_IT+0x190>)
 8014290:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8014292:	68fb      	ldr	r3, [r7, #12]
 8014294:	2200      	movs	r2, #0
 8014296:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801429a:	68fb      	ldr	r3, [r7, #12]
 801429c:	691b      	ldr	r3, [r3, #16]
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d019      	beq.n	80142d6 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80142a2:	68fb      	ldr	r3, [r7, #12]
 80142a4:	681b      	ldr	r3, [r3, #0]
 80142a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80142a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142aa:	e853 3f00 	ldrex	r3, [r3]
 80142ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80142b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142b2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80142b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80142b8:	68fb      	ldr	r3, [r7, #12]
 80142ba:	681b      	ldr	r3, [r3, #0]
 80142bc:	461a      	mov	r2, r3
 80142be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142c0:	637b      	str	r3, [r7, #52]	; 0x34
 80142c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80142c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80142c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80142c8:	e841 2300 	strex	r3, r2, [r1]
 80142cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80142ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d1e6      	bne.n	80142a2 <UART_Start_Receive_IT+0x116>
 80142d4:	e018      	b.n	8014308 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80142d6:	68fb      	ldr	r3, [r7, #12]
 80142d8:	681b      	ldr	r3, [r3, #0]
 80142da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80142dc:	697b      	ldr	r3, [r7, #20]
 80142de:	e853 3f00 	ldrex	r3, [r3]
 80142e2:	613b      	str	r3, [r7, #16]
   return(result);
 80142e4:	693b      	ldr	r3, [r7, #16]
 80142e6:	f043 0320 	orr.w	r3, r3, #32
 80142ea:	653b      	str	r3, [r7, #80]	; 0x50
 80142ec:	68fb      	ldr	r3, [r7, #12]
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	461a      	mov	r2, r3
 80142f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80142f4:	623b      	str	r3, [r7, #32]
 80142f6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80142f8:	69f9      	ldr	r1, [r7, #28]
 80142fa:	6a3a      	ldr	r2, [r7, #32]
 80142fc:	e841 2300 	strex	r3, r2, [r1]
 8014300:	61bb      	str	r3, [r7, #24]
   return(result);
 8014302:	69bb      	ldr	r3, [r7, #24]
 8014304:	2b00      	cmp	r3, #0
 8014306:	d1e6      	bne.n	80142d6 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8014308:	2300      	movs	r3, #0
}
 801430a:	4618      	mov	r0, r3
 801430c:	375c      	adds	r7, #92	; 0x5c
 801430e:	46bd      	mov	sp, r7
 8014310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014314:	4770      	bx	lr
 8014316:	bf00      	nop
 8014318:	0801473d 	.word	0x0801473d
 801431c:	080145e1 	.word	0x080145e1

08014320 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8014320:	b480      	push	{r7}
 8014322:	b089      	sub	sp, #36	; 0x24
 8014324:	af00      	add	r7, sp, #0
 8014326:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801432e:	68fb      	ldr	r3, [r7, #12]
 8014330:	e853 3f00 	ldrex	r3, [r3]
 8014334:	60bb      	str	r3, [r7, #8]
   return(result);
 8014336:	68bb      	ldr	r3, [r7, #8]
 8014338:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801433c:	61fb      	str	r3, [r7, #28]
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	681b      	ldr	r3, [r3, #0]
 8014342:	461a      	mov	r2, r3
 8014344:	69fb      	ldr	r3, [r7, #28]
 8014346:	61bb      	str	r3, [r7, #24]
 8014348:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801434a:	6979      	ldr	r1, [r7, #20]
 801434c:	69ba      	ldr	r2, [r7, #24]
 801434e:	e841 2300 	strex	r3, r2, [r1]
 8014352:	613b      	str	r3, [r7, #16]
   return(result);
 8014354:	693b      	ldr	r3, [r7, #16]
 8014356:	2b00      	cmp	r3, #0
 8014358:	d1e6      	bne.n	8014328 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	2220      	movs	r2, #32
 801435e:	679a      	str	r2, [r3, #120]	; 0x78
}
 8014360:	bf00      	nop
 8014362:	3724      	adds	r7, #36	; 0x24
 8014364:	46bd      	mov	sp, r7
 8014366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801436a:	4770      	bx	lr

0801436c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801436c:	b480      	push	{r7}
 801436e:	b095      	sub	sp, #84	; 0x54
 8014370:	af00      	add	r7, sp, #0
 8014372:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	681b      	ldr	r3, [r3, #0]
 8014378:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801437a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801437c:	e853 3f00 	ldrex	r3, [r3]
 8014380:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8014382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014384:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014388:	64fb      	str	r3, [r7, #76]	; 0x4c
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	461a      	mov	r2, r3
 8014390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014392:	643b      	str	r3, [r7, #64]	; 0x40
 8014394:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014396:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014398:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801439a:	e841 2300 	strex	r3, r2, [r1]
 801439e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80143a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d1e6      	bne.n	8014374 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	681b      	ldr	r3, [r3, #0]
 80143aa:	3308      	adds	r3, #8
 80143ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80143ae:	6a3b      	ldr	r3, [r7, #32]
 80143b0:	e853 3f00 	ldrex	r3, [r3]
 80143b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80143b6:	69fb      	ldr	r3, [r7, #28]
 80143b8:	f023 0301 	bic.w	r3, r3, #1
 80143bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	681b      	ldr	r3, [r3, #0]
 80143c2:	3308      	adds	r3, #8
 80143c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80143c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80143c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80143ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80143cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80143ce:	e841 2300 	strex	r3, r2, [r1]
 80143d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80143d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d1e5      	bne.n	80143a6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80143de:	2b01      	cmp	r3, #1
 80143e0:	d118      	bne.n	8014414 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	681b      	ldr	r3, [r3, #0]
 80143e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80143e8:	68fb      	ldr	r3, [r7, #12]
 80143ea:	e853 3f00 	ldrex	r3, [r3]
 80143ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80143f0:	68bb      	ldr	r3, [r7, #8]
 80143f2:	f023 0310 	bic.w	r3, r3, #16
 80143f6:	647b      	str	r3, [r7, #68]	; 0x44
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	681b      	ldr	r3, [r3, #0]
 80143fc:	461a      	mov	r2, r3
 80143fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014400:	61bb      	str	r3, [r7, #24]
 8014402:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014404:	6979      	ldr	r1, [r7, #20]
 8014406:	69ba      	ldr	r2, [r7, #24]
 8014408:	e841 2300 	strex	r3, r2, [r1]
 801440c:	613b      	str	r3, [r7, #16]
   return(result);
 801440e:	693b      	ldr	r3, [r7, #16]
 8014410:	2b00      	cmp	r3, #0
 8014412:	d1e6      	bne.n	80143e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	2220      	movs	r2, #32
 8014418:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	2200      	movs	r2, #0
 801441e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	2200      	movs	r2, #0
 8014424:	665a      	str	r2, [r3, #100]	; 0x64
}
 8014426:	bf00      	nop
 8014428:	3754      	adds	r7, #84	; 0x54
 801442a:	46bd      	mov	sp, r7
 801442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014430:	4770      	bx	lr

08014432 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8014432:	b580      	push	{r7, lr}
 8014434:	b090      	sub	sp, #64	; 0x40
 8014436:	af00      	add	r7, sp, #0
 8014438:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801443e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	69db      	ldr	r3, [r3, #28]
 8014444:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014448:	d037      	beq.n	80144ba <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 801444a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801444c:	2200      	movs	r2, #0
 801444e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8014452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014454:	681b      	ldr	r3, [r3, #0]
 8014456:	3308      	adds	r3, #8
 8014458:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801445a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801445c:	e853 3f00 	ldrex	r3, [r3]
 8014460:	623b      	str	r3, [r7, #32]
   return(result);
 8014462:	6a3b      	ldr	r3, [r7, #32]
 8014464:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014468:	63bb      	str	r3, [r7, #56]	; 0x38
 801446a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	3308      	adds	r3, #8
 8014470:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014472:	633a      	str	r2, [r7, #48]	; 0x30
 8014474:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014476:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014478:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801447a:	e841 2300 	strex	r3, r2, [r1]
 801447e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8014480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014482:	2b00      	cmp	r3, #0
 8014484:	d1e5      	bne.n	8014452 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8014486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801448c:	693b      	ldr	r3, [r7, #16]
 801448e:	e853 3f00 	ldrex	r3, [r3]
 8014492:	60fb      	str	r3, [r7, #12]
   return(result);
 8014494:	68fb      	ldr	r3, [r7, #12]
 8014496:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801449a:	637b      	str	r3, [r7, #52]	; 0x34
 801449c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801449e:	681b      	ldr	r3, [r3, #0]
 80144a0:	461a      	mov	r2, r3
 80144a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144a4:	61fb      	str	r3, [r7, #28]
 80144a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80144a8:	69b9      	ldr	r1, [r7, #24]
 80144aa:	69fa      	ldr	r2, [r7, #28]
 80144ac:	e841 2300 	strex	r3, r2, [r1]
 80144b0:	617b      	str	r3, [r7, #20]
   return(result);
 80144b2:	697b      	ldr	r3, [r7, #20]
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d1e6      	bne.n	8014486 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80144b8:	e002      	b.n	80144c0 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 80144ba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80144bc:	f7ff fa20 	bl	8013900 <HAL_UART_TxCpltCallback>
}
 80144c0:	bf00      	nop
 80144c2:	3740      	adds	r7, #64	; 0x40
 80144c4:	46bd      	mov	sp, r7
 80144c6:	bd80      	pop	{r7, pc}

080144c8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80144c8:	b580      	push	{r7, lr}
 80144ca:	b084      	sub	sp, #16
 80144cc:	af00      	add	r7, sp, #0
 80144ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80144d4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80144d6:	68f8      	ldr	r0, [r7, #12]
 80144d8:	f7ff fa1c 	bl	8013914 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80144dc:	bf00      	nop
 80144de:	3710      	adds	r7, #16
 80144e0:	46bd      	mov	sp, r7
 80144e2:	bd80      	pop	{r7, pc}

080144e4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80144e4:	b580      	push	{r7, lr}
 80144e6:	b086      	sub	sp, #24
 80144e8:	af00      	add	r7, sp, #0
 80144ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80144f0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80144f2:	697b      	ldr	r3, [r7, #20]
 80144f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80144f6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80144f8:	697b      	ldr	r3, [r7, #20]
 80144fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80144fc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80144fe:	697b      	ldr	r3, [r7, #20]
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	689b      	ldr	r3, [r3, #8]
 8014504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014508:	2b80      	cmp	r3, #128	; 0x80
 801450a:	d109      	bne.n	8014520 <UART_DMAError+0x3c>
 801450c:	693b      	ldr	r3, [r7, #16]
 801450e:	2b21      	cmp	r3, #33	; 0x21
 8014510:	d106      	bne.n	8014520 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8014512:	697b      	ldr	r3, [r7, #20]
 8014514:	2200      	movs	r2, #0
 8014516:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 801451a:	6978      	ldr	r0, [r7, #20]
 801451c:	f7ff ff00 	bl	8014320 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8014520:	697b      	ldr	r3, [r7, #20]
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	689b      	ldr	r3, [r3, #8]
 8014526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801452a:	2b40      	cmp	r3, #64	; 0x40
 801452c:	d109      	bne.n	8014542 <UART_DMAError+0x5e>
 801452e:	68fb      	ldr	r3, [r7, #12]
 8014530:	2b22      	cmp	r3, #34	; 0x22
 8014532:	d106      	bne.n	8014542 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8014534:	697b      	ldr	r3, [r7, #20]
 8014536:	2200      	movs	r2, #0
 8014538:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 801453c:	6978      	ldr	r0, [r7, #20]
 801453e:	f7ff ff15 	bl	801436c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8014542:	697b      	ldr	r3, [r7, #20]
 8014544:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014548:	f043 0210 	orr.w	r2, r3, #16
 801454c:	697b      	ldr	r3, [r7, #20]
 801454e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8014552:	6978      	ldr	r0, [r7, #20]
 8014554:	f7ff f9e8 	bl	8013928 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014558:	bf00      	nop
 801455a:	3718      	adds	r7, #24
 801455c:	46bd      	mov	sp, r7
 801455e:	bd80      	pop	{r7, pc}

08014560 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8014560:	b580      	push	{r7, lr}
 8014562:	b084      	sub	sp, #16
 8014564:	af00      	add	r7, sp, #0
 8014566:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801456c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801456e:	68fb      	ldr	r3, [r7, #12]
 8014570:	2200      	movs	r2, #0
 8014572:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8014576:	68fb      	ldr	r3, [r7, #12]
 8014578:	2200      	movs	r2, #0
 801457a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801457e:	68f8      	ldr	r0, [r7, #12]
 8014580:	f7ff f9d2 	bl	8013928 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014584:	bf00      	nop
 8014586:	3710      	adds	r7, #16
 8014588:	46bd      	mov	sp, r7
 801458a:	bd80      	pop	{r7, pc}

0801458c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801458c:	b580      	push	{r7, lr}
 801458e:	b088      	sub	sp, #32
 8014590:	af00      	add	r7, sp, #0
 8014592:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801459a:	68fb      	ldr	r3, [r7, #12]
 801459c:	e853 3f00 	ldrex	r3, [r3]
 80145a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80145a2:	68bb      	ldr	r3, [r7, #8]
 80145a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80145a8:	61fb      	str	r3, [r7, #28]
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	681b      	ldr	r3, [r3, #0]
 80145ae:	461a      	mov	r2, r3
 80145b0:	69fb      	ldr	r3, [r7, #28]
 80145b2:	61bb      	str	r3, [r7, #24]
 80145b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80145b6:	6979      	ldr	r1, [r7, #20]
 80145b8:	69ba      	ldr	r2, [r7, #24]
 80145ba:	e841 2300 	strex	r3, r2, [r1]
 80145be:	613b      	str	r3, [r7, #16]
   return(result);
 80145c0:	693b      	ldr	r3, [r7, #16]
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d1e6      	bne.n	8014594 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	2220      	movs	r2, #32
 80145ca:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	2200      	movs	r2, #0
 80145d0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80145d2:	6878      	ldr	r0, [r7, #4]
 80145d4:	f7ff f994 	bl	8013900 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80145d8:	bf00      	nop
 80145da:	3720      	adds	r7, #32
 80145dc:	46bd      	mov	sp, r7
 80145de:	bd80      	pop	{r7, pc}

080145e0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80145e0:	b580      	push	{r7, lr}
 80145e2:	b096      	sub	sp, #88	; 0x58
 80145e4:	af00      	add	r7, sp, #0
 80145e6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80145ee:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80145f6:	2b22      	cmp	r3, #34	; 0x22
 80145f8:	f040 8094 	bne.w	8014724 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014602:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8014606:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 801460a:	b2d9      	uxtb	r1, r3
 801460c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8014610:	b2da      	uxtb	r2, r3
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014616:	400a      	ands	r2, r1
 8014618:	b2d2      	uxtb	r2, r2
 801461a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014620:	1c5a      	adds	r2, r3, #1
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801462c:	b29b      	uxth	r3, r3
 801462e:	3b01      	subs	r3, #1
 8014630:	b29a      	uxth	r2, r3
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801463e:	b29b      	uxth	r3, r3
 8014640:	2b00      	cmp	r3, #0
 8014642:	d177      	bne.n	8014734 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	681b      	ldr	r3, [r3, #0]
 8014648:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801464a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801464c:	e853 3f00 	ldrex	r3, [r3]
 8014650:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8014652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014654:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014658:	653b      	str	r3, [r7, #80]	; 0x50
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	681b      	ldr	r3, [r3, #0]
 801465e:	461a      	mov	r2, r3
 8014660:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014662:	647b      	str	r3, [r7, #68]	; 0x44
 8014664:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014666:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014668:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801466a:	e841 2300 	strex	r3, r2, [r1]
 801466e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8014670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014672:	2b00      	cmp	r3, #0
 8014674:	d1e6      	bne.n	8014644 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	681b      	ldr	r3, [r3, #0]
 801467a:	3308      	adds	r3, #8
 801467c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014680:	e853 3f00 	ldrex	r3, [r3]
 8014684:	623b      	str	r3, [r7, #32]
   return(result);
 8014686:	6a3b      	ldr	r3, [r7, #32]
 8014688:	f023 0301 	bic.w	r3, r3, #1
 801468c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	3308      	adds	r3, #8
 8014694:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014696:	633a      	str	r2, [r7, #48]	; 0x30
 8014698:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801469a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801469c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801469e:	e841 2300 	strex	r3, r2, [r1]
 80146a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80146a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d1e5      	bne.n	8014676 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	2220      	movs	r2, #32
 80146ae:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	2200      	movs	r2, #0
 80146b4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80146ba:	2b01      	cmp	r3, #1
 80146bc:	d12e      	bne.n	801471c <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	2200      	movs	r2, #0
 80146c2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80146ca:	693b      	ldr	r3, [r7, #16]
 80146cc:	e853 3f00 	ldrex	r3, [r3]
 80146d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80146d2:	68fb      	ldr	r3, [r7, #12]
 80146d4:	f023 0310 	bic.w	r3, r3, #16
 80146d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	461a      	mov	r2, r3
 80146e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80146e2:	61fb      	str	r3, [r7, #28]
 80146e4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80146e6:	69b9      	ldr	r1, [r7, #24]
 80146e8:	69fa      	ldr	r2, [r7, #28]
 80146ea:	e841 2300 	strex	r3, r2, [r1]
 80146ee:	617b      	str	r3, [r7, #20]
   return(result);
 80146f0:	697b      	ldr	r3, [r7, #20]
 80146f2:	2b00      	cmp	r3, #0
 80146f4:	d1e6      	bne.n	80146c4 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	681b      	ldr	r3, [r3, #0]
 80146fa:	69db      	ldr	r3, [r3, #28]
 80146fc:	f003 0310 	and.w	r3, r3, #16
 8014700:	2b10      	cmp	r3, #16
 8014702:	d103      	bne.n	801470c <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	2210      	movs	r2, #16
 801470a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8014712:	4619      	mov	r1, r3
 8014714:	6878      	ldr	r0, [r7, #4]
 8014716:	f7ff f911 	bl	801393c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801471a:	e00b      	b.n	8014734 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 801471c:	6878      	ldr	r0, [r7, #4]
 801471e:	f7f8 fb77 	bl	800ce10 <HAL_UART_RxCpltCallback>
}
 8014722:	e007      	b.n	8014734 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	681b      	ldr	r3, [r3, #0]
 8014728:	699a      	ldr	r2, [r3, #24]
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	681b      	ldr	r3, [r3, #0]
 801472e:	f042 0208 	orr.w	r2, r2, #8
 8014732:	619a      	str	r2, [r3, #24]
}
 8014734:	bf00      	nop
 8014736:	3758      	adds	r7, #88	; 0x58
 8014738:	46bd      	mov	sp, r7
 801473a:	bd80      	pop	{r7, pc}

0801473c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801473c:	b580      	push	{r7, lr}
 801473e:	b096      	sub	sp, #88	; 0x58
 8014740:	af00      	add	r7, sp, #0
 8014742:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801474a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014752:	2b22      	cmp	r3, #34	; 0x22
 8014754:	f040 8094 	bne.w	8014880 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	681b      	ldr	r3, [r3, #0]
 801475c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801475e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014766:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8014768:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 801476c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8014770:	4013      	ands	r3, r2
 8014772:	b29a      	uxth	r2, r3
 8014774:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014776:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801477c:	1c9a      	adds	r2, r3, #2
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8014788:	b29b      	uxth	r3, r3
 801478a:	3b01      	subs	r3, #1
 801478c:	b29a      	uxth	r2, r3
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801479a:	b29b      	uxth	r3, r3
 801479c:	2b00      	cmp	r3, #0
 801479e:	d177      	bne.n	8014890 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	681b      	ldr	r3, [r3, #0]
 80147a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80147a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80147a8:	e853 3f00 	ldrex	r3, [r3]
 80147ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80147ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80147b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	681b      	ldr	r3, [r3, #0]
 80147ba:	461a      	mov	r2, r3
 80147bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80147be:	643b      	str	r3, [r7, #64]	; 0x40
 80147c0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80147c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80147c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80147c6:	e841 2300 	strex	r3, r2, [r1]
 80147ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80147cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d1e6      	bne.n	80147a0 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	681b      	ldr	r3, [r3, #0]
 80147d6:	3308      	adds	r3, #8
 80147d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80147da:	6a3b      	ldr	r3, [r7, #32]
 80147dc:	e853 3f00 	ldrex	r3, [r3]
 80147e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80147e2:	69fb      	ldr	r3, [r7, #28]
 80147e4:	f023 0301 	bic.w	r3, r3, #1
 80147e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	3308      	adds	r3, #8
 80147f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80147f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80147f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80147f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80147f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80147fa:	e841 2300 	strex	r3, r2, [r1]
 80147fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014802:	2b00      	cmp	r3, #0
 8014804:	d1e5      	bne.n	80147d2 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	2220      	movs	r2, #32
 801480a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	2200      	movs	r2, #0
 8014810:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014816:	2b01      	cmp	r3, #1
 8014818:	d12e      	bne.n	8014878 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	2200      	movs	r2, #0
 801481e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014826:	68fb      	ldr	r3, [r7, #12]
 8014828:	e853 3f00 	ldrex	r3, [r3]
 801482c:	60bb      	str	r3, [r7, #8]
   return(result);
 801482e:	68bb      	ldr	r3, [r7, #8]
 8014830:	f023 0310 	bic.w	r3, r3, #16
 8014834:	647b      	str	r3, [r7, #68]	; 0x44
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	461a      	mov	r2, r3
 801483c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801483e:	61bb      	str	r3, [r7, #24]
 8014840:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014842:	6979      	ldr	r1, [r7, #20]
 8014844:	69ba      	ldr	r2, [r7, #24]
 8014846:	e841 2300 	strex	r3, r2, [r1]
 801484a:	613b      	str	r3, [r7, #16]
   return(result);
 801484c:	693b      	ldr	r3, [r7, #16]
 801484e:	2b00      	cmp	r3, #0
 8014850:	d1e6      	bne.n	8014820 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	69db      	ldr	r3, [r3, #28]
 8014858:	f003 0310 	and.w	r3, r3, #16
 801485c:	2b10      	cmp	r3, #16
 801485e:	d103      	bne.n	8014868 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	681b      	ldr	r3, [r3, #0]
 8014864:	2210      	movs	r2, #16
 8014866:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801486e:	4619      	mov	r1, r3
 8014870:	6878      	ldr	r0, [r7, #4]
 8014872:	f7ff f863 	bl	801393c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8014876:	e00b      	b.n	8014890 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8014878:	6878      	ldr	r0, [r7, #4]
 801487a:	f7f8 fac9 	bl	800ce10 <HAL_UART_RxCpltCallback>
}
 801487e:	e007      	b.n	8014890 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	699a      	ldr	r2, [r3, #24]
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	681b      	ldr	r3, [r3, #0]
 801488a:	f042 0208 	orr.w	r2, r2, #8
 801488e:	619a      	str	r2, [r3, #24]
}
 8014890:	bf00      	nop
 8014892:	3758      	adds	r7, #88	; 0x58
 8014894:	46bd      	mov	sp, r7
 8014896:	bd80      	pop	{r7, pc}

08014898 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8014898:	b480      	push	{r7}
 801489a:	b085      	sub	sp, #20
 801489c:	af00      	add	r7, sp, #0
 801489e:	4603      	mov	r3, r0
 80148a0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80148a2:	2300      	movs	r3, #0
 80148a4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80148a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80148aa:	2b84      	cmp	r3, #132	; 0x84
 80148ac:	d005      	beq.n	80148ba <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80148ae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80148b2:	68fb      	ldr	r3, [r7, #12]
 80148b4:	4413      	add	r3, r2
 80148b6:	3303      	adds	r3, #3
 80148b8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80148ba:	68fb      	ldr	r3, [r7, #12]
}
 80148bc:	4618      	mov	r0, r3
 80148be:	3714      	adds	r7, #20
 80148c0:	46bd      	mov	sp, r7
 80148c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148c6:	4770      	bx	lr

080148c8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80148c8:	b580      	push	{r7, lr}
 80148ca:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80148cc:	f001 fa4e 	bl	8015d6c <vTaskStartScheduler>
  
  return osOK;
 80148d0:	2300      	movs	r3, #0
}
 80148d2:	4618      	mov	r0, r3
 80148d4:	bd80      	pop	{r7, pc}

080148d6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80148d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80148d8:	b089      	sub	sp, #36	; 0x24
 80148da:	af04      	add	r7, sp, #16
 80148dc:	6078      	str	r0, [r7, #4]
 80148de:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	695b      	ldr	r3, [r3, #20]
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d020      	beq.n	801492a <osThreadCreate+0x54>
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	699b      	ldr	r3, [r3, #24]
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d01c      	beq.n	801492a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	685c      	ldr	r4, [r3, #4]
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	681d      	ldr	r5, [r3, #0]
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	691e      	ldr	r6, [r3, #16]
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8014902:	4618      	mov	r0, r3
 8014904:	f7ff ffc8 	bl	8014898 <makeFreeRtosPriority>
 8014908:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	695b      	ldr	r3, [r3, #20]
 801490e:	687a      	ldr	r2, [r7, #4]
 8014910:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014912:	9202      	str	r2, [sp, #8]
 8014914:	9301      	str	r3, [sp, #4]
 8014916:	9100      	str	r1, [sp, #0]
 8014918:	683b      	ldr	r3, [r7, #0]
 801491a:	4632      	mov	r2, r6
 801491c:	4629      	mov	r1, r5
 801491e:	4620      	mov	r0, r4
 8014920:	f000 ff60 	bl	80157e4 <xTaskCreateStatic>
 8014924:	4603      	mov	r3, r0
 8014926:	60fb      	str	r3, [r7, #12]
 8014928:	e01c      	b.n	8014964 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	685c      	ldr	r4, [r3, #4]
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014936:	b29e      	uxth	r6, r3
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801493e:	4618      	mov	r0, r3
 8014940:	f7ff ffaa 	bl	8014898 <makeFreeRtosPriority>
 8014944:	4602      	mov	r2, r0
 8014946:	f107 030c 	add.w	r3, r7, #12
 801494a:	9301      	str	r3, [sp, #4]
 801494c:	9200      	str	r2, [sp, #0]
 801494e:	683b      	ldr	r3, [r7, #0]
 8014950:	4632      	mov	r2, r6
 8014952:	4629      	mov	r1, r5
 8014954:	4620      	mov	r0, r4
 8014956:	f000 ffa8 	bl	80158aa <xTaskCreate>
 801495a:	4603      	mov	r3, r0
 801495c:	2b01      	cmp	r3, #1
 801495e:	d001      	beq.n	8014964 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8014960:	2300      	movs	r3, #0
 8014962:	e000      	b.n	8014966 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8014964:	68fb      	ldr	r3, [r7, #12]
}
 8014966:	4618      	mov	r0, r3
 8014968:	3714      	adds	r7, #20
 801496a:	46bd      	mov	sp, r7
 801496c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801496e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 801496e:	b580      	push	{r7, lr}
 8014970:	b086      	sub	sp, #24
 8014972:	af02      	add	r7, sp, #8
 8014974:	6078      	str	r0, [r7, #4]
 8014976:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	685b      	ldr	r3, [r3, #4]
 801497c:	2b00      	cmp	r3, #0
 801497e:	d00f      	beq.n	80149a0 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8014980:	683b      	ldr	r3, [r7, #0]
 8014982:	2b01      	cmp	r3, #1
 8014984:	d10a      	bne.n	801499c <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	685b      	ldr	r3, [r3, #4]
 801498a:	2203      	movs	r2, #3
 801498c:	9200      	str	r2, [sp, #0]
 801498e:	2200      	movs	r2, #0
 8014990:	2100      	movs	r1, #0
 8014992:	2001      	movs	r0, #1
 8014994:	f000 f964 	bl	8014c60 <xQueueGenericCreateStatic>
 8014998:	4603      	mov	r3, r0
 801499a:	e016      	b.n	80149ca <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 801499c:	2300      	movs	r3, #0
 801499e:	e014      	b.n	80149ca <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80149a0:	683b      	ldr	r3, [r7, #0]
 80149a2:	2b01      	cmp	r3, #1
 80149a4:	d110      	bne.n	80149c8 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80149a6:	2203      	movs	r2, #3
 80149a8:	2100      	movs	r1, #0
 80149aa:	2001      	movs	r0, #1
 80149ac:	f000 f9da 	bl	8014d64 <xQueueGenericCreate>
 80149b0:	60f8      	str	r0, [r7, #12]
 80149b2:	68fb      	ldr	r3, [r7, #12]
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d005      	beq.n	80149c4 <osSemaphoreCreate+0x56>
 80149b8:	2300      	movs	r3, #0
 80149ba:	2200      	movs	r2, #0
 80149bc:	2100      	movs	r1, #0
 80149be:	68f8      	ldr	r0, [r7, #12]
 80149c0:	f000 fa32 	bl	8014e28 <xQueueGenericSend>
      return sema;
 80149c4:	68fb      	ldr	r3, [r7, #12]
 80149c6:	e000      	b.n	80149ca <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80149c8:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80149ca:	4618      	mov	r0, r3
 80149cc:	3710      	adds	r7, #16
 80149ce:	46bd      	mov	sp, r7
 80149d0:	bd80      	pop	{r7, pc}

080149d2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80149d2:	b590      	push	{r4, r7, lr}
 80149d4:	b085      	sub	sp, #20
 80149d6:	af02      	add	r7, sp, #8
 80149d8:	6078      	str	r0, [r7, #4]
 80149da:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	689b      	ldr	r3, [r3, #8]
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d011      	beq.n	8014a08 <osMessageCreate+0x36>
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	68db      	ldr	r3, [r3, #12]
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d00d      	beq.n	8014a08 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	6818      	ldr	r0, [r3, #0]
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	6859      	ldr	r1, [r3, #4]
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	689a      	ldr	r2, [r3, #8]
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	68db      	ldr	r3, [r3, #12]
 80149fc:	2400      	movs	r4, #0
 80149fe:	9400      	str	r4, [sp, #0]
 8014a00:	f000 f92e 	bl	8014c60 <xQueueGenericCreateStatic>
 8014a04:	4603      	mov	r3, r0
 8014a06:	e008      	b.n	8014a1a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	6818      	ldr	r0, [r3, #0]
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	685b      	ldr	r3, [r3, #4]
 8014a10:	2200      	movs	r2, #0
 8014a12:	4619      	mov	r1, r3
 8014a14:	f000 f9a6 	bl	8014d64 <xQueueGenericCreate>
 8014a18:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8014a1a:	4618      	mov	r0, r3
 8014a1c:	370c      	adds	r7, #12
 8014a1e:	46bd      	mov	sp, r7
 8014a20:	bd90      	pop	{r4, r7, pc}

08014a22 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014a22:	b480      	push	{r7}
 8014a24:	b083      	sub	sp, #12
 8014a26:	af00      	add	r7, sp, #0
 8014a28:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	f103 0208 	add.w	r2, r3, #8
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	f04f 32ff 	mov.w	r2, #4294967295
 8014a3a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	f103 0208 	add.w	r2, r3, #8
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	f103 0208 	add.w	r2, r3, #8
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	2200      	movs	r2, #0
 8014a54:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8014a56:	bf00      	nop
 8014a58:	370c      	adds	r7, #12
 8014a5a:	46bd      	mov	sp, r7
 8014a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a60:	4770      	bx	lr

08014a62 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8014a62:	b480      	push	{r7}
 8014a64:	b083      	sub	sp, #12
 8014a66:	af00      	add	r7, sp, #0
 8014a68:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	2200      	movs	r2, #0
 8014a6e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8014a70:	bf00      	nop
 8014a72:	370c      	adds	r7, #12
 8014a74:	46bd      	mov	sp, r7
 8014a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a7a:	4770      	bx	lr

08014a7c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014a7c:	b480      	push	{r7}
 8014a7e:	b085      	sub	sp, #20
 8014a80:	af00      	add	r7, sp, #0
 8014a82:	6078      	str	r0, [r7, #4]
 8014a84:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	685b      	ldr	r3, [r3, #4]
 8014a8a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8014a8c:	683b      	ldr	r3, [r7, #0]
 8014a8e:	68fa      	ldr	r2, [r7, #12]
 8014a90:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014a92:	68fb      	ldr	r3, [r7, #12]
 8014a94:	689a      	ldr	r2, [r3, #8]
 8014a96:	683b      	ldr	r3, [r7, #0]
 8014a98:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014a9a:	68fb      	ldr	r3, [r7, #12]
 8014a9c:	689b      	ldr	r3, [r3, #8]
 8014a9e:	683a      	ldr	r2, [r7, #0]
 8014aa0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8014aa2:	68fb      	ldr	r3, [r7, #12]
 8014aa4:	683a      	ldr	r2, [r7, #0]
 8014aa6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8014aa8:	683b      	ldr	r3, [r7, #0]
 8014aaa:	687a      	ldr	r2, [r7, #4]
 8014aac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	1c5a      	adds	r2, r3, #1
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	601a      	str	r2, [r3, #0]
}
 8014ab8:	bf00      	nop
 8014aba:	3714      	adds	r7, #20
 8014abc:	46bd      	mov	sp, r7
 8014abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ac2:	4770      	bx	lr

08014ac4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014ac4:	b480      	push	{r7}
 8014ac6:	b085      	sub	sp, #20
 8014ac8:	af00      	add	r7, sp, #0
 8014aca:	6078      	str	r0, [r7, #4]
 8014acc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8014ace:	683b      	ldr	r3, [r7, #0]
 8014ad0:	681b      	ldr	r3, [r3, #0]
 8014ad2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8014ad4:	68bb      	ldr	r3, [r7, #8]
 8014ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ada:	d103      	bne.n	8014ae4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	691b      	ldr	r3, [r3, #16]
 8014ae0:	60fb      	str	r3, [r7, #12]
 8014ae2:	e00c      	b.n	8014afe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	3308      	adds	r3, #8
 8014ae8:	60fb      	str	r3, [r7, #12]
 8014aea:	e002      	b.n	8014af2 <vListInsert+0x2e>
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	685b      	ldr	r3, [r3, #4]
 8014af0:	60fb      	str	r3, [r7, #12]
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	685b      	ldr	r3, [r3, #4]
 8014af6:	681b      	ldr	r3, [r3, #0]
 8014af8:	68ba      	ldr	r2, [r7, #8]
 8014afa:	429a      	cmp	r2, r3
 8014afc:	d2f6      	bcs.n	8014aec <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	685a      	ldr	r2, [r3, #4]
 8014b02:	683b      	ldr	r3, [r7, #0]
 8014b04:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8014b06:	683b      	ldr	r3, [r7, #0]
 8014b08:	685b      	ldr	r3, [r3, #4]
 8014b0a:	683a      	ldr	r2, [r7, #0]
 8014b0c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8014b0e:	683b      	ldr	r3, [r7, #0]
 8014b10:	68fa      	ldr	r2, [r7, #12]
 8014b12:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8014b14:	68fb      	ldr	r3, [r7, #12]
 8014b16:	683a      	ldr	r2, [r7, #0]
 8014b18:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8014b1a:	683b      	ldr	r3, [r7, #0]
 8014b1c:	687a      	ldr	r2, [r7, #4]
 8014b1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	681b      	ldr	r3, [r3, #0]
 8014b24:	1c5a      	adds	r2, r3, #1
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	601a      	str	r2, [r3, #0]
}
 8014b2a:	bf00      	nop
 8014b2c:	3714      	adds	r7, #20
 8014b2e:	46bd      	mov	sp, r7
 8014b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b34:	4770      	bx	lr

08014b36 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8014b36:	b480      	push	{r7}
 8014b38:	b085      	sub	sp, #20
 8014b3a:	af00      	add	r7, sp, #0
 8014b3c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	691b      	ldr	r3, [r3, #16]
 8014b42:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	685b      	ldr	r3, [r3, #4]
 8014b48:	687a      	ldr	r2, [r7, #4]
 8014b4a:	6892      	ldr	r2, [r2, #8]
 8014b4c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	689b      	ldr	r3, [r3, #8]
 8014b52:	687a      	ldr	r2, [r7, #4]
 8014b54:	6852      	ldr	r2, [r2, #4]
 8014b56:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	685b      	ldr	r3, [r3, #4]
 8014b5c:	687a      	ldr	r2, [r7, #4]
 8014b5e:	429a      	cmp	r2, r3
 8014b60:	d103      	bne.n	8014b6a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	689a      	ldr	r2, [r3, #8]
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	2200      	movs	r2, #0
 8014b6e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8014b70:	68fb      	ldr	r3, [r7, #12]
 8014b72:	681b      	ldr	r3, [r3, #0]
 8014b74:	1e5a      	subs	r2, r3, #1
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	681b      	ldr	r3, [r3, #0]
}
 8014b7e:	4618      	mov	r0, r3
 8014b80:	3714      	adds	r7, #20
 8014b82:	46bd      	mov	sp, r7
 8014b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b88:	4770      	bx	lr
	...

08014b8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8014b8c:	b580      	push	{r7, lr}
 8014b8e:	b084      	sub	sp, #16
 8014b90:	af00      	add	r7, sp, #0
 8014b92:	6078      	str	r0, [r7, #4]
 8014b94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8014b9a:	68fb      	ldr	r3, [r7, #12]
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d10c      	bne.n	8014bba <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8014ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ba4:	b672      	cpsid	i
 8014ba6:	f383 8811 	msr	BASEPRI, r3
 8014baa:	f3bf 8f6f 	isb	sy
 8014bae:	f3bf 8f4f 	dsb	sy
 8014bb2:	b662      	cpsie	i
 8014bb4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8014bb6:	bf00      	nop
 8014bb8:	e7fe      	b.n	8014bb8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8014bba:	f002 f837 	bl	8016c2c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	681a      	ldr	r2, [r3, #0]
 8014bc2:	68fb      	ldr	r3, [r7, #12]
 8014bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014bc6:	68f9      	ldr	r1, [r7, #12]
 8014bc8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8014bca:	fb01 f303 	mul.w	r3, r1, r3
 8014bce:	441a      	add	r2, r3
 8014bd0:	68fb      	ldr	r3, [r7, #12]
 8014bd2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8014bd4:	68fb      	ldr	r3, [r7, #12]
 8014bd6:	2200      	movs	r2, #0
 8014bd8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8014bda:	68fb      	ldr	r3, [r7, #12]
 8014bdc:	681a      	ldr	r2, [r3, #0]
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	681a      	ldr	r2, [r3, #0]
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014bea:	3b01      	subs	r3, #1
 8014bec:	68f9      	ldr	r1, [r7, #12]
 8014bee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8014bf0:	fb01 f303 	mul.w	r3, r1, r3
 8014bf4:	441a      	add	r2, r3
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8014bfa:	68fb      	ldr	r3, [r7, #12]
 8014bfc:	22ff      	movs	r2, #255	; 0xff
 8014bfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8014c02:	68fb      	ldr	r3, [r7, #12]
 8014c04:	22ff      	movs	r2, #255	; 0xff
 8014c06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8014c0a:	683b      	ldr	r3, [r7, #0]
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d114      	bne.n	8014c3a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	691b      	ldr	r3, [r3, #16]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d01a      	beq.n	8014c4e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	3310      	adds	r3, #16
 8014c1c:	4618      	mov	r0, r3
 8014c1e:	f001 faf3 	bl	8016208 <xTaskRemoveFromEventList>
 8014c22:	4603      	mov	r3, r0
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	d012      	beq.n	8014c4e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8014c28:	4b0c      	ldr	r3, [pc, #48]	; (8014c5c <xQueueGenericReset+0xd0>)
 8014c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014c2e:	601a      	str	r2, [r3, #0]
 8014c30:	f3bf 8f4f 	dsb	sy
 8014c34:	f3bf 8f6f 	isb	sy
 8014c38:	e009      	b.n	8014c4e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8014c3a:	68fb      	ldr	r3, [r7, #12]
 8014c3c:	3310      	adds	r3, #16
 8014c3e:	4618      	mov	r0, r3
 8014c40:	f7ff feef 	bl	8014a22 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8014c44:	68fb      	ldr	r3, [r7, #12]
 8014c46:	3324      	adds	r3, #36	; 0x24
 8014c48:	4618      	mov	r0, r3
 8014c4a:	f7ff feea 	bl	8014a22 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8014c4e:	f002 f821 	bl	8016c94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8014c52:	2301      	movs	r3, #1
}
 8014c54:	4618      	mov	r0, r3
 8014c56:	3710      	adds	r7, #16
 8014c58:	46bd      	mov	sp, r7
 8014c5a:	bd80      	pop	{r7, pc}
 8014c5c:	e000ed04 	.word	0xe000ed04

08014c60 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8014c60:	b580      	push	{r7, lr}
 8014c62:	b08e      	sub	sp, #56	; 0x38
 8014c64:	af02      	add	r7, sp, #8
 8014c66:	60f8      	str	r0, [r7, #12]
 8014c68:	60b9      	str	r1, [r7, #8]
 8014c6a:	607a      	str	r2, [r7, #4]
 8014c6c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d10c      	bne.n	8014c8e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8014c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c78:	b672      	cpsid	i
 8014c7a:	f383 8811 	msr	BASEPRI, r3
 8014c7e:	f3bf 8f6f 	isb	sy
 8014c82:	f3bf 8f4f 	dsb	sy
 8014c86:	b662      	cpsie	i
 8014c88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8014c8a:	bf00      	nop
 8014c8c:	e7fe      	b.n	8014c8c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8014c8e:	683b      	ldr	r3, [r7, #0]
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d10c      	bne.n	8014cae <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8014c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c98:	b672      	cpsid	i
 8014c9a:	f383 8811 	msr	BASEPRI, r3
 8014c9e:	f3bf 8f6f 	isb	sy
 8014ca2:	f3bf 8f4f 	dsb	sy
 8014ca6:	b662      	cpsie	i
 8014ca8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014caa:	bf00      	nop
 8014cac:	e7fe      	b.n	8014cac <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d002      	beq.n	8014cba <xQueueGenericCreateStatic+0x5a>
 8014cb4:	68bb      	ldr	r3, [r7, #8]
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d001      	beq.n	8014cbe <xQueueGenericCreateStatic+0x5e>
 8014cba:	2301      	movs	r3, #1
 8014cbc:	e000      	b.n	8014cc0 <xQueueGenericCreateStatic+0x60>
 8014cbe:	2300      	movs	r3, #0
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	d10c      	bne.n	8014cde <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8014cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cc8:	b672      	cpsid	i
 8014cca:	f383 8811 	msr	BASEPRI, r3
 8014cce:	f3bf 8f6f 	isb	sy
 8014cd2:	f3bf 8f4f 	dsb	sy
 8014cd6:	b662      	cpsie	i
 8014cd8:	623b      	str	r3, [r7, #32]
}
 8014cda:	bf00      	nop
 8014cdc:	e7fe      	b.n	8014cdc <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d102      	bne.n	8014cea <xQueueGenericCreateStatic+0x8a>
 8014ce4:	68bb      	ldr	r3, [r7, #8]
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	d101      	bne.n	8014cee <xQueueGenericCreateStatic+0x8e>
 8014cea:	2301      	movs	r3, #1
 8014cec:	e000      	b.n	8014cf0 <xQueueGenericCreateStatic+0x90>
 8014cee:	2300      	movs	r3, #0
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d10c      	bne.n	8014d0e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8014cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cf8:	b672      	cpsid	i
 8014cfa:	f383 8811 	msr	BASEPRI, r3
 8014cfe:	f3bf 8f6f 	isb	sy
 8014d02:	f3bf 8f4f 	dsb	sy
 8014d06:	b662      	cpsie	i
 8014d08:	61fb      	str	r3, [r7, #28]
}
 8014d0a:	bf00      	nop
 8014d0c:	e7fe      	b.n	8014d0c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8014d0e:	2348      	movs	r3, #72	; 0x48
 8014d10:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8014d12:	697b      	ldr	r3, [r7, #20]
 8014d14:	2b48      	cmp	r3, #72	; 0x48
 8014d16:	d00c      	beq.n	8014d32 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8014d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d1c:	b672      	cpsid	i
 8014d1e:	f383 8811 	msr	BASEPRI, r3
 8014d22:	f3bf 8f6f 	isb	sy
 8014d26:	f3bf 8f4f 	dsb	sy
 8014d2a:	b662      	cpsie	i
 8014d2c:	61bb      	str	r3, [r7, #24]
}
 8014d2e:	bf00      	nop
 8014d30:	e7fe      	b.n	8014d30 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8014d32:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014d34:	683b      	ldr	r3, [r7, #0]
 8014d36:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8014d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d00d      	beq.n	8014d5a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8014d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d40:	2201      	movs	r2, #1
 8014d42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014d46:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8014d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d4c:	9300      	str	r3, [sp, #0]
 8014d4e:	4613      	mov	r3, r2
 8014d50:	687a      	ldr	r2, [r7, #4]
 8014d52:	68b9      	ldr	r1, [r7, #8]
 8014d54:	68f8      	ldr	r0, [r7, #12]
 8014d56:	f000 f847 	bl	8014de8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8014d5c:	4618      	mov	r0, r3
 8014d5e:	3730      	adds	r7, #48	; 0x30
 8014d60:	46bd      	mov	sp, r7
 8014d62:	bd80      	pop	{r7, pc}

08014d64 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8014d64:	b580      	push	{r7, lr}
 8014d66:	b08a      	sub	sp, #40	; 0x28
 8014d68:	af02      	add	r7, sp, #8
 8014d6a:	60f8      	str	r0, [r7, #12]
 8014d6c:	60b9      	str	r1, [r7, #8]
 8014d6e:	4613      	mov	r3, r2
 8014d70:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d10c      	bne.n	8014d92 <xQueueGenericCreate+0x2e>
	__asm volatile
 8014d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d7c:	b672      	cpsid	i
 8014d7e:	f383 8811 	msr	BASEPRI, r3
 8014d82:	f3bf 8f6f 	isb	sy
 8014d86:	f3bf 8f4f 	dsb	sy
 8014d8a:	b662      	cpsie	i
 8014d8c:	613b      	str	r3, [r7, #16]
}
 8014d8e:	bf00      	nop
 8014d90:	e7fe      	b.n	8014d90 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8014d92:	68bb      	ldr	r3, [r7, #8]
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d102      	bne.n	8014d9e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8014d98:	2300      	movs	r3, #0
 8014d9a:	61fb      	str	r3, [r7, #28]
 8014d9c:	e004      	b.n	8014da8 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014d9e:	68fb      	ldr	r3, [r7, #12]
 8014da0:	68ba      	ldr	r2, [r7, #8]
 8014da2:	fb02 f303 	mul.w	r3, r2, r3
 8014da6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8014da8:	69fb      	ldr	r3, [r7, #28]
 8014daa:	3348      	adds	r3, #72	; 0x48
 8014dac:	4618      	mov	r0, r3
 8014dae:	f002 f869 	bl	8016e84 <pvPortMalloc>
 8014db2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8014db4:	69bb      	ldr	r3, [r7, #24]
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d011      	beq.n	8014dde <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8014dba:	69bb      	ldr	r3, [r7, #24]
 8014dbc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014dbe:	697b      	ldr	r3, [r7, #20]
 8014dc0:	3348      	adds	r3, #72	; 0x48
 8014dc2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8014dc4:	69bb      	ldr	r3, [r7, #24]
 8014dc6:	2200      	movs	r2, #0
 8014dc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014dcc:	79fa      	ldrb	r2, [r7, #7]
 8014dce:	69bb      	ldr	r3, [r7, #24]
 8014dd0:	9300      	str	r3, [sp, #0]
 8014dd2:	4613      	mov	r3, r2
 8014dd4:	697a      	ldr	r2, [r7, #20]
 8014dd6:	68b9      	ldr	r1, [r7, #8]
 8014dd8:	68f8      	ldr	r0, [r7, #12]
 8014dda:	f000 f805 	bl	8014de8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014dde:	69bb      	ldr	r3, [r7, #24]
	}
 8014de0:	4618      	mov	r0, r3
 8014de2:	3720      	adds	r7, #32
 8014de4:	46bd      	mov	sp, r7
 8014de6:	bd80      	pop	{r7, pc}

08014de8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8014de8:	b580      	push	{r7, lr}
 8014dea:	b084      	sub	sp, #16
 8014dec:	af00      	add	r7, sp, #0
 8014dee:	60f8      	str	r0, [r7, #12]
 8014df0:	60b9      	str	r1, [r7, #8]
 8014df2:	607a      	str	r2, [r7, #4]
 8014df4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8014df6:	68bb      	ldr	r3, [r7, #8]
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d103      	bne.n	8014e04 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8014dfc:	69bb      	ldr	r3, [r7, #24]
 8014dfe:	69ba      	ldr	r2, [r7, #24]
 8014e00:	601a      	str	r2, [r3, #0]
 8014e02:	e002      	b.n	8014e0a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8014e04:	69bb      	ldr	r3, [r7, #24]
 8014e06:	687a      	ldr	r2, [r7, #4]
 8014e08:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8014e0a:	69bb      	ldr	r3, [r7, #24]
 8014e0c:	68fa      	ldr	r2, [r7, #12]
 8014e0e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8014e10:	69bb      	ldr	r3, [r7, #24]
 8014e12:	68ba      	ldr	r2, [r7, #8]
 8014e14:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8014e16:	2101      	movs	r1, #1
 8014e18:	69b8      	ldr	r0, [r7, #24]
 8014e1a:	f7ff feb7 	bl	8014b8c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8014e1e:	bf00      	nop
 8014e20:	3710      	adds	r7, #16
 8014e22:	46bd      	mov	sp, r7
 8014e24:	bd80      	pop	{r7, pc}
	...

08014e28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8014e28:	b580      	push	{r7, lr}
 8014e2a:	b08e      	sub	sp, #56	; 0x38
 8014e2c:	af00      	add	r7, sp, #0
 8014e2e:	60f8      	str	r0, [r7, #12]
 8014e30:	60b9      	str	r1, [r7, #8]
 8014e32:	607a      	str	r2, [r7, #4]
 8014e34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8014e36:	2300      	movs	r3, #0
 8014e38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014e3a:	68fb      	ldr	r3, [r7, #12]
 8014e3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d10c      	bne.n	8014e5e <xQueueGenericSend+0x36>
	__asm volatile
 8014e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e48:	b672      	cpsid	i
 8014e4a:	f383 8811 	msr	BASEPRI, r3
 8014e4e:	f3bf 8f6f 	isb	sy
 8014e52:	f3bf 8f4f 	dsb	sy
 8014e56:	b662      	cpsie	i
 8014e58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8014e5a:	bf00      	nop
 8014e5c:	e7fe      	b.n	8014e5c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014e5e:	68bb      	ldr	r3, [r7, #8]
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d103      	bne.n	8014e6c <xQueueGenericSend+0x44>
 8014e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d101      	bne.n	8014e70 <xQueueGenericSend+0x48>
 8014e6c:	2301      	movs	r3, #1
 8014e6e:	e000      	b.n	8014e72 <xQueueGenericSend+0x4a>
 8014e70:	2300      	movs	r3, #0
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d10c      	bne.n	8014e90 <xQueueGenericSend+0x68>
	__asm volatile
 8014e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e7a:	b672      	cpsid	i
 8014e7c:	f383 8811 	msr	BASEPRI, r3
 8014e80:	f3bf 8f6f 	isb	sy
 8014e84:	f3bf 8f4f 	dsb	sy
 8014e88:	b662      	cpsie	i
 8014e8a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014e8c:	bf00      	nop
 8014e8e:	e7fe      	b.n	8014e8e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014e90:	683b      	ldr	r3, [r7, #0]
 8014e92:	2b02      	cmp	r3, #2
 8014e94:	d103      	bne.n	8014e9e <xQueueGenericSend+0x76>
 8014e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014e9a:	2b01      	cmp	r3, #1
 8014e9c:	d101      	bne.n	8014ea2 <xQueueGenericSend+0x7a>
 8014e9e:	2301      	movs	r3, #1
 8014ea0:	e000      	b.n	8014ea4 <xQueueGenericSend+0x7c>
 8014ea2:	2300      	movs	r3, #0
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d10c      	bne.n	8014ec2 <xQueueGenericSend+0x9a>
	__asm volatile
 8014ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014eac:	b672      	cpsid	i
 8014eae:	f383 8811 	msr	BASEPRI, r3
 8014eb2:	f3bf 8f6f 	isb	sy
 8014eb6:	f3bf 8f4f 	dsb	sy
 8014eba:	b662      	cpsie	i
 8014ebc:	623b      	str	r3, [r7, #32]
}
 8014ebe:	bf00      	nop
 8014ec0:	e7fe      	b.n	8014ec0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014ec2:	f001 fb65 	bl	8016590 <xTaskGetSchedulerState>
 8014ec6:	4603      	mov	r3, r0
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d102      	bne.n	8014ed2 <xQueueGenericSend+0xaa>
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	d101      	bne.n	8014ed6 <xQueueGenericSend+0xae>
 8014ed2:	2301      	movs	r3, #1
 8014ed4:	e000      	b.n	8014ed8 <xQueueGenericSend+0xb0>
 8014ed6:	2300      	movs	r3, #0
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d10c      	bne.n	8014ef6 <xQueueGenericSend+0xce>
	__asm volatile
 8014edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ee0:	b672      	cpsid	i
 8014ee2:	f383 8811 	msr	BASEPRI, r3
 8014ee6:	f3bf 8f6f 	isb	sy
 8014eea:	f3bf 8f4f 	dsb	sy
 8014eee:	b662      	cpsie	i
 8014ef0:	61fb      	str	r3, [r7, #28]
}
 8014ef2:	bf00      	nop
 8014ef4:	e7fe      	b.n	8014ef4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014ef6:	f001 fe99 	bl	8016c2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014efc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014f02:	429a      	cmp	r2, r3
 8014f04:	d302      	bcc.n	8014f0c <xQueueGenericSend+0xe4>
 8014f06:	683b      	ldr	r3, [r7, #0]
 8014f08:	2b02      	cmp	r3, #2
 8014f0a:	d129      	bne.n	8014f60 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014f0c:	683a      	ldr	r2, [r7, #0]
 8014f0e:	68b9      	ldr	r1, [r7, #8]
 8014f10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014f12:	f000 fb57 	bl	80155c4 <prvCopyDataToQueue>
 8014f16:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d010      	beq.n	8014f42 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f22:	3324      	adds	r3, #36	; 0x24
 8014f24:	4618      	mov	r0, r3
 8014f26:	f001 f96f 	bl	8016208 <xTaskRemoveFromEventList>
 8014f2a:	4603      	mov	r3, r0
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d013      	beq.n	8014f58 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8014f30:	4b3f      	ldr	r3, [pc, #252]	; (8015030 <xQueueGenericSend+0x208>)
 8014f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014f36:	601a      	str	r2, [r3, #0]
 8014f38:	f3bf 8f4f 	dsb	sy
 8014f3c:	f3bf 8f6f 	isb	sy
 8014f40:	e00a      	b.n	8014f58 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8014f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d007      	beq.n	8014f58 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8014f48:	4b39      	ldr	r3, [pc, #228]	; (8015030 <xQueueGenericSend+0x208>)
 8014f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014f4e:	601a      	str	r2, [r3, #0]
 8014f50:	f3bf 8f4f 	dsb	sy
 8014f54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8014f58:	f001 fe9c 	bl	8016c94 <vPortExitCritical>
				return pdPASS;
 8014f5c:	2301      	movs	r3, #1
 8014f5e:	e063      	b.n	8015028 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d103      	bne.n	8014f6e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014f66:	f001 fe95 	bl	8016c94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8014f6a:	2300      	movs	r3, #0
 8014f6c:	e05c      	b.n	8015028 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d106      	bne.n	8014f82 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014f74:	f107 0314 	add.w	r3, r7, #20
 8014f78:	4618      	mov	r0, r3
 8014f7a:	f001 f9a9 	bl	80162d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014f7e:	2301      	movs	r3, #1
 8014f80:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014f82:	f001 fe87 	bl	8016c94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014f86:	f000 ff55 	bl	8015e34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014f8a:	f001 fe4f 	bl	8016c2c <vPortEnterCritical>
 8014f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014f94:	b25b      	sxtb	r3, r3
 8014f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f9a:	d103      	bne.n	8014fa4 <xQueueGenericSend+0x17c>
 8014f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f9e:	2200      	movs	r2, #0
 8014fa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fa6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014faa:	b25b      	sxtb	r3, r3
 8014fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014fb0:	d103      	bne.n	8014fba <xQueueGenericSend+0x192>
 8014fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fb4:	2200      	movs	r2, #0
 8014fb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014fba:	f001 fe6b 	bl	8016c94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014fbe:	1d3a      	adds	r2, r7, #4
 8014fc0:	f107 0314 	add.w	r3, r7, #20
 8014fc4:	4611      	mov	r1, r2
 8014fc6:	4618      	mov	r0, r3
 8014fc8:	f001 f998 	bl	80162fc <xTaskCheckForTimeOut>
 8014fcc:	4603      	mov	r3, r0
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d124      	bne.n	801501c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8014fd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014fd4:	f000 fbee 	bl	80157b4 <prvIsQueueFull>
 8014fd8:	4603      	mov	r3, r0
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d018      	beq.n	8015010 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8014fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fe0:	3310      	adds	r3, #16
 8014fe2:	687a      	ldr	r2, [r7, #4]
 8014fe4:	4611      	mov	r1, r2
 8014fe6:	4618      	mov	r0, r3
 8014fe8:	f001 f8e8 	bl	80161bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8014fec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014fee:	f000 fb79 	bl	80156e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8014ff2:	f000 ff2d 	bl	8015e50 <xTaskResumeAll>
 8014ff6:	4603      	mov	r3, r0
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	f47f af7c 	bne.w	8014ef6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8014ffe:	4b0c      	ldr	r3, [pc, #48]	; (8015030 <xQueueGenericSend+0x208>)
 8015000:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015004:	601a      	str	r2, [r3, #0]
 8015006:	f3bf 8f4f 	dsb	sy
 801500a:	f3bf 8f6f 	isb	sy
 801500e:	e772      	b.n	8014ef6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015010:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015012:	f000 fb67 	bl	80156e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015016:	f000 ff1b 	bl	8015e50 <xTaskResumeAll>
 801501a:	e76c      	b.n	8014ef6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801501c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801501e:	f000 fb61 	bl	80156e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015022:	f000 ff15 	bl	8015e50 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8015026:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8015028:	4618      	mov	r0, r3
 801502a:	3738      	adds	r7, #56	; 0x38
 801502c:	46bd      	mov	sp, r7
 801502e:	bd80      	pop	{r7, pc}
 8015030:	e000ed04 	.word	0xe000ed04

08015034 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015034:	b580      	push	{r7, lr}
 8015036:	b08e      	sub	sp, #56	; 0x38
 8015038:	af00      	add	r7, sp, #0
 801503a:	6078      	str	r0, [r7, #4]
 801503c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8015042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015044:	2b00      	cmp	r3, #0
 8015046:	d10c      	bne.n	8015062 <xQueueGiveFromISR+0x2e>
	__asm volatile
 8015048:	f04f 0350 	mov.w	r3, #80	; 0x50
 801504c:	b672      	cpsid	i
 801504e:	f383 8811 	msr	BASEPRI, r3
 8015052:	f3bf 8f6f 	isb	sy
 8015056:	f3bf 8f4f 	dsb	sy
 801505a:	b662      	cpsie	i
 801505c:	623b      	str	r3, [r7, #32]
}
 801505e:	bf00      	nop
 8015060:	e7fe      	b.n	8015060 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8015062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015066:	2b00      	cmp	r3, #0
 8015068:	d00c      	beq.n	8015084 <xQueueGiveFromISR+0x50>
	__asm volatile
 801506a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801506e:	b672      	cpsid	i
 8015070:	f383 8811 	msr	BASEPRI, r3
 8015074:	f3bf 8f6f 	isb	sy
 8015078:	f3bf 8f4f 	dsb	sy
 801507c:	b662      	cpsie	i
 801507e:	61fb      	str	r3, [r7, #28]
}
 8015080:	bf00      	nop
 8015082:	e7fe      	b.n	8015082 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8015084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015086:	681b      	ldr	r3, [r3, #0]
 8015088:	2b00      	cmp	r3, #0
 801508a:	d103      	bne.n	8015094 <xQueueGiveFromISR+0x60>
 801508c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801508e:	689b      	ldr	r3, [r3, #8]
 8015090:	2b00      	cmp	r3, #0
 8015092:	d101      	bne.n	8015098 <xQueueGiveFromISR+0x64>
 8015094:	2301      	movs	r3, #1
 8015096:	e000      	b.n	801509a <xQueueGiveFromISR+0x66>
 8015098:	2300      	movs	r3, #0
 801509a:	2b00      	cmp	r3, #0
 801509c:	d10c      	bne.n	80150b8 <xQueueGiveFromISR+0x84>
	__asm volatile
 801509e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150a2:	b672      	cpsid	i
 80150a4:	f383 8811 	msr	BASEPRI, r3
 80150a8:	f3bf 8f6f 	isb	sy
 80150ac:	f3bf 8f4f 	dsb	sy
 80150b0:	b662      	cpsie	i
 80150b2:	61bb      	str	r3, [r7, #24]
}
 80150b4:	bf00      	nop
 80150b6:	e7fe      	b.n	80150b6 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80150b8:	f001 fea0 	bl	8016dfc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80150bc:	f3ef 8211 	mrs	r2, BASEPRI
 80150c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150c4:	b672      	cpsid	i
 80150c6:	f383 8811 	msr	BASEPRI, r3
 80150ca:	f3bf 8f6f 	isb	sy
 80150ce:	f3bf 8f4f 	dsb	sy
 80150d2:	b662      	cpsie	i
 80150d4:	617a      	str	r2, [r7, #20]
 80150d6:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80150d8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80150da:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80150dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80150e0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80150e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80150e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80150e8:	429a      	cmp	r2, r3
 80150ea:	d22b      	bcs.n	8015144 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80150ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80150f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80150f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150f8:	1c5a      	adds	r2, r3, #1
 80150fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150fc:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80150fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015106:	d112      	bne.n	801512e <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801510c:	2b00      	cmp	r3, #0
 801510e:	d016      	beq.n	801513e <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015112:	3324      	adds	r3, #36	; 0x24
 8015114:	4618      	mov	r0, r3
 8015116:	f001 f877 	bl	8016208 <xTaskRemoveFromEventList>
 801511a:	4603      	mov	r3, r0
 801511c:	2b00      	cmp	r3, #0
 801511e:	d00e      	beq.n	801513e <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015120:	683b      	ldr	r3, [r7, #0]
 8015122:	2b00      	cmp	r3, #0
 8015124:	d00b      	beq.n	801513e <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015126:	683b      	ldr	r3, [r7, #0]
 8015128:	2201      	movs	r2, #1
 801512a:	601a      	str	r2, [r3, #0]
 801512c:	e007      	b.n	801513e <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801512e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015132:	3301      	adds	r3, #1
 8015134:	b2db      	uxtb	r3, r3
 8015136:	b25a      	sxtb	r2, r3
 8015138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801513a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801513e:	2301      	movs	r3, #1
 8015140:	637b      	str	r3, [r7, #52]	; 0x34
 8015142:	e001      	b.n	8015148 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015144:	2300      	movs	r3, #0
 8015146:	637b      	str	r3, [r7, #52]	; 0x34
 8015148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801514a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801514c:	68fb      	ldr	r3, [r7, #12]
 801514e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8015152:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015156:	4618      	mov	r0, r3
 8015158:	3738      	adds	r7, #56	; 0x38
 801515a:	46bd      	mov	sp, r7
 801515c:	bd80      	pop	{r7, pc}
	...

08015160 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8015160:	b580      	push	{r7, lr}
 8015162:	b08c      	sub	sp, #48	; 0x30
 8015164:	af00      	add	r7, sp, #0
 8015166:	60f8      	str	r0, [r7, #12]
 8015168:	60b9      	str	r1, [r7, #8]
 801516a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801516c:	2300      	movs	r3, #0
 801516e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015170:	68fb      	ldr	r3, [r7, #12]
 8015172:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015176:	2b00      	cmp	r3, #0
 8015178:	d10c      	bne.n	8015194 <xQueueReceive+0x34>
	__asm volatile
 801517a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801517e:	b672      	cpsid	i
 8015180:	f383 8811 	msr	BASEPRI, r3
 8015184:	f3bf 8f6f 	isb	sy
 8015188:	f3bf 8f4f 	dsb	sy
 801518c:	b662      	cpsie	i
 801518e:	623b      	str	r3, [r7, #32]
}
 8015190:	bf00      	nop
 8015192:	e7fe      	b.n	8015192 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015194:	68bb      	ldr	r3, [r7, #8]
 8015196:	2b00      	cmp	r3, #0
 8015198:	d103      	bne.n	80151a2 <xQueueReceive+0x42>
 801519a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801519c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d101      	bne.n	80151a6 <xQueueReceive+0x46>
 80151a2:	2301      	movs	r3, #1
 80151a4:	e000      	b.n	80151a8 <xQueueReceive+0x48>
 80151a6:	2300      	movs	r3, #0
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d10c      	bne.n	80151c6 <xQueueReceive+0x66>
	__asm volatile
 80151ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151b0:	b672      	cpsid	i
 80151b2:	f383 8811 	msr	BASEPRI, r3
 80151b6:	f3bf 8f6f 	isb	sy
 80151ba:	f3bf 8f4f 	dsb	sy
 80151be:	b662      	cpsie	i
 80151c0:	61fb      	str	r3, [r7, #28]
}
 80151c2:	bf00      	nop
 80151c4:	e7fe      	b.n	80151c4 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80151c6:	f001 f9e3 	bl	8016590 <xTaskGetSchedulerState>
 80151ca:	4603      	mov	r3, r0
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d102      	bne.n	80151d6 <xQueueReceive+0x76>
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d101      	bne.n	80151da <xQueueReceive+0x7a>
 80151d6:	2301      	movs	r3, #1
 80151d8:	e000      	b.n	80151dc <xQueueReceive+0x7c>
 80151da:	2300      	movs	r3, #0
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d10c      	bne.n	80151fa <xQueueReceive+0x9a>
	__asm volatile
 80151e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151e4:	b672      	cpsid	i
 80151e6:	f383 8811 	msr	BASEPRI, r3
 80151ea:	f3bf 8f6f 	isb	sy
 80151ee:	f3bf 8f4f 	dsb	sy
 80151f2:	b662      	cpsie	i
 80151f4:	61bb      	str	r3, [r7, #24]
}
 80151f6:	bf00      	nop
 80151f8:	e7fe      	b.n	80151f8 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80151fa:	f001 fd17 	bl	8016c2c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80151fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015202:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015206:	2b00      	cmp	r3, #0
 8015208:	d01f      	beq.n	801524a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801520a:	68b9      	ldr	r1, [r7, #8]
 801520c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801520e:	f000 fa43 	bl	8015698 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015214:	1e5a      	subs	r2, r3, #1
 8015216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015218:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801521a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801521c:	691b      	ldr	r3, [r3, #16]
 801521e:	2b00      	cmp	r3, #0
 8015220:	d00f      	beq.n	8015242 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015224:	3310      	adds	r3, #16
 8015226:	4618      	mov	r0, r3
 8015228:	f000 ffee 	bl	8016208 <xTaskRemoveFromEventList>
 801522c:	4603      	mov	r3, r0
 801522e:	2b00      	cmp	r3, #0
 8015230:	d007      	beq.n	8015242 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015232:	4b3d      	ldr	r3, [pc, #244]	; (8015328 <xQueueReceive+0x1c8>)
 8015234:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015238:	601a      	str	r2, [r3, #0]
 801523a:	f3bf 8f4f 	dsb	sy
 801523e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015242:	f001 fd27 	bl	8016c94 <vPortExitCritical>
				return pdPASS;
 8015246:	2301      	movs	r3, #1
 8015248:	e069      	b.n	801531e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	2b00      	cmp	r3, #0
 801524e:	d103      	bne.n	8015258 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015250:	f001 fd20 	bl	8016c94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015254:	2300      	movs	r3, #0
 8015256:	e062      	b.n	801531e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801525a:	2b00      	cmp	r3, #0
 801525c:	d106      	bne.n	801526c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801525e:	f107 0310 	add.w	r3, r7, #16
 8015262:	4618      	mov	r0, r3
 8015264:	f001 f834 	bl	80162d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015268:	2301      	movs	r3, #1
 801526a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801526c:	f001 fd12 	bl	8016c94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015270:	f000 fde0 	bl	8015e34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015274:	f001 fcda 	bl	8016c2c <vPortEnterCritical>
 8015278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801527a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801527e:	b25b      	sxtb	r3, r3
 8015280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015284:	d103      	bne.n	801528e <xQueueReceive+0x12e>
 8015286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015288:	2200      	movs	r2, #0
 801528a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801528e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015290:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015294:	b25b      	sxtb	r3, r3
 8015296:	f1b3 3fff 	cmp.w	r3, #4294967295
 801529a:	d103      	bne.n	80152a4 <xQueueReceive+0x144>
 801529c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801529e:	2200      	movs	r2, #0
 80152a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80152a4:	f001 fcf6 	bl	8016c94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80152a8:	1d3a      	adds	r2, r7, #4
 80152aa:	f107 0310 	add.w	r3, r7, #16
 80152ae:	4611      	mov	r1, r2
 80152b0:	4618      	mov	r0, r3
 80152b2:	f001 f823 	bl	80162fc <xTaskCheckForTimeOut>
 80152b6:	4603      	mov	r3, r0
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d123      	bne.n	8015304 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80152bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80152be:	f000 fa63 	bl	8015788 <prvIsQueueEmpty>
 80152c2:	4603      	mov	r3, r0
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d017      	beq.n	80152f8 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80152c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152ca:	3324      	adds	r3, #36	; 0x24
 80152cc:	687a      	ldr	r2, [r7, #4]
 80152ce:	4611      	mov	r1, r2
 80152d0:	4618      	mov	r0, r3
 80152d2:	f000 ff73 	bl	80161bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80152d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80152d8:	f000 fa04 	bl	80156e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80152dc:	f000 fdb8 	bl	8015e50 <xTaskResumeAll>
 80152e0:	4603      	mov	r3, r0
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d189      	bne.n	80151fa <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80152e6:	4b10      	ldr	r3, [pc, #64]	; (8015328 <xQueueReceive+0x1c8>)
 80152e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80152ec:	601a      	str	r2, [r3, #0]
 80152ee:	f3bf 8f4f 	dsb	sy
 80152f2:	f3bf 8f6f 	isb	sy
 80152f6:	e780      	b.n	80151fa <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80152f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80152fa:	f000 f9f3 	bl	80156e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80152fe:	f000 fda7 	bl	8015e50 <xTaskResumeAll>
 8015302:	e77a      	b.n	80151fa <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8015304:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015306:	f000 f9ed 	bl	80156e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801530a:	f000 fda1 	bl	8015e50 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801530e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015310:	f000 fa3a 	bl	8015788 <prvIsQueueEmpty>
 8015314:	4603      	mov	r3, r0
 8015316:	2b00      	cmp	r3, #0
 8015318:	f43f af6f 	beq.w	80151fa <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801531c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801531e:	4618      	mov	r0, r3
 8015320:	3730      	adds	r7, #48	; 0x30
 8015322:	46bd      	mov	sp, r7
 8015324:	bd80      	pop	{r7, pc}
 8015326:	bf00      	nop
 8015328:	e000ed04 	.word	0xe000ed04

0801532c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801532c:	b580      	push	{r7, lr}
 801532e:	b08e      	sub	sp, #56	; 0x38
 8015330:	af00      	add	r7, sp, #0
 8015332:	6078      	str	r0, [r7, #4]
 8015334:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8015336:	2300      	movs	r3, #0
 8015338:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801533e:	2300      	movs	r3, #0
 8015340:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015344:	2b00      	cmp	r3, #0
 8015346:	d10c      	bne.n	8015362 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8015348:	f04f 0350 	mov.w	r3, #80	; 0x50
 801534c:	b672      	cpsid	i
 801534e:	f383 8811 	msr	BASEPRI, r3
 8015352:	f3bf 8f6f 	isb	sy
 8015356:	f3bf 8f4f 	dsb	sy
 801535a:	b662      	cpsie	i
 801535c:	623b      	str	r3, [r7, #32]
}
 801535e:	bf00      	nop
 8015360:	e7fe      	b.n	8015360 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8015362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015366:	2b00      	cmp	r3, #0
 8015368:	d00c      	beq.n	8015384 <xQueueSemaphoreTake+0x58>
	__asm volatile
 801536a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801536e:	b672      	cpsid	i
 8015370:	f383 8811 	msr	BASEPRI, r3
 8015374:	f3bf 8f6f 	isb	sy
 8015378:	f3bf 8f4f 	dsb	sy
 801537c:	b662      	cpsie	i
 801537e:	61fb      	str	r3, [r7, #28]
}
 8015380:	bf00      	nop
 8015382:	e7fe      	b.n	8015382 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015384:	f001 f904 	bl	8016590 <xTaskGetSchedulerState>
 8015388:	4603      	mov	r3, r0
 801538a:	2b00      	cmp	r3, #0
 801538c:	d102      	bne.n	8015394 <xQueueSemaphoreTake+0x68>
 801538e:	683b      	ldr	r3, [r7, #0]
 8015390:	2b00      	cmp	r3, #0
 8015392:	d101      	bne.n	8015398 <xQueueSemaphoreTake+0x6c>
 8015394:	2301      	movs	r3, #1
 8015396:	e000      	b.n	801539a <xQueueSemaphoreTake+0x6e>
 8015398:	2300      	movs	r3, #0
 801539a:	2b00      	cmp	r3, #0
 801539c:	d10c      	bne.n	80153b8 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 801539e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153a2:	b672      	cpsid	i
 80153a4:	f383 8811 	msr	BASEPRI, r3
 80153a8:	f3bf 8f6f 	isb	sy
 80153ac:	f3bf 8f4f 	dsb	sy
 80153b0:	b662      	cpsie	i
 80153b2:	61bb      	str	r3, [r7, #24]
}
 80153b4:	bf00      	nop
 80153b6:	e7fe      	b.n	80153b6 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80153b8:	f001 fc38 	bl	8016c2c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80153bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80153c0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80153c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	d024      	beq.n	8015412 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80153c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153ca:	1e5a      	subs	r2, r3, #1
 80153cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153ce:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80153d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d104      	bne.n	80153e2 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80153d8:	f001 faa0 	bl	801691c <pvTaskIncrementMutexHeldCount>
 80153dc:	4602      	mov	r2, r0
 80153de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153e0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80153e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153e4:	691b      	ldr	r3, [r3, #16]
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d00f      	beq.n	801540a <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80153ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153ec:	3310      	adds	r3, #16
 80153ee:	4618      	mov	r0, r3
 80153f0:	f000 ff0a 	bl	8016208 <xTaskRemoveFromEventList>
 80153f4:	4603      	mov	r3, r0
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d007      	beq.n	801540a <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80153fa:	4b55      	ldr	r3, [pc, #340]	; (8015550 <xQueueSemaphoreTake+0x224>)
 80153fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015400:	601a      	str	r2, [r3, #0]
 8015402:	f3bf 8f4f 	dsb	sy
 8015406:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801540a:	f001 fc43 	bl	8016c94 <vPortExitCritical>
				return pdPASS;
 801540e:	2301      	movs	r3, #1
 8015410:	e099      	b.n	8015546 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015412:	683b      	ldr	r3, [r7, #0]
 8015414:	2b00      	cmp	r3, #0
 8015416:	d113      	bne.n	8015440 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8015418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801541a:	2b00      	cmp	r3, #0
 801541c:	d00c      	beq.n	8015438 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 801541e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015422:	b672      	cpsid	i
 8015424:	f383 8811 	msr	BASEPRI, r3
 8015428:	f3bf 8f6f 	isb	sy
 801542c:	f3bf 8f4f 	dsb	sy
 8015430:	b662      	cpsie	i
 8015432:	617b      	str	r3, [r7, #20]
}
 8015434:	bf00      	nop
 8015436:	e7fe      	b.n	8015436 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8015438:	f001 fc2c 	bl	8016c94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801543c:	2300      	movs	r3, #0
 801543e:	e082      	b.n	8015546 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015442:	2b00      	cmp	r3, #0
 8015444:	d106      	bne.n	8015454 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015446:	f107 030c 	add.w	r3, r7, #12
 801544a:	4618      	mov	r0, r3
 801544c:	f000 ff40 	bl	80162d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015450:	2301      	movs	r3, #1
 8015452:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015454:	f001 fc1e 	bl	8016c94 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015458:	f000 fcec 	bl	8015e34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801545c:	f001 fbe6 	bl	8016c2c <vPortEnterCritical>
 8015460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015462:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015466:	b25b      	sxtb	r3, r3
 8015468:	f1b3 3fff 	cmp.w	r3, #4294967295
 801546c:	d103      	bne.n	8015476 <xQueueSemaphoreTake+0x14a>
 801546e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015470:	2200      	movs	r2, #0
 8015472:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015478:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801547c:	b25b      	sxtb	r3, r3
 801547e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015482:	d103      	bne.n	801548c <xQueueSemaphoreTake+0x160>
 8015484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015486:	2200      	movs	r2, #0
 8015488:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801548c:	f001 fc02 	bl	8016c94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015490:	463a      	mov	r2, r7
 8015492:	f107 030c 	add.w	r3, r7, #12
 8015496:	4611      	mov	r1, r2
 8015498:	4618      	mov	r0, r3
 801549a:	f000 ff2f 	bl	80162fc <xTaskCheckForTimeOut>
 801549e:	4603      	mov	r3, r0
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d132      	bne.n	801550a <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80154a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80154a6:	f000 f96f 	bl	8015788 <prvIsQueueEmpty>
 80154aa:	4603      	mov	r3, r0
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d026      	beq.n	80154fe <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80154b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154b2:	681b      	ldr	r3, [r3, #0]
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d109      	bne.n	80154cc <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 80154b8:	f001 fbb8 	bl	8016c2c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80154bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154be:	689b      	ldr	r3, [r3, #8]
 80154c0:	4618      	mov	r0, r3
 80154c2:	f001 f883 	bl	80165cc <xTaskPriorityInherit>
 80154c6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80154c8:	f001 fbe4 	bl	8016c94 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80154cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154ce:	3324      	adds	r3, #36	; 0x24
 80154d0:	683a      	ldr	r2, [r7, #0]
 80154d2:	4611      	mov	r1, r2
 80154d4:	4618      	mov	r0, r3
 80154d6:	f000 fe71 	bl	80161bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80154da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80154dc:	f000 f902 	bl	80156e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80154e0:	f000 fcb6 	bl	8015e50 <xTaskResumeAll>
 80154e4:	4603      	mov	r3, r0
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	f47f af66 	bne.w	80153b8 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 80154ec:	4b18      	ldr	r3, [pc, #96]	; (8015550 <xQueueSemaphoreTake+0x224>)
 80154ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80154f2:	601a      	str	r2, [r3, #0]
 80154f4:	f3bf 8f4f 	dsb	sy
 80154f8:	f3bf 8f6f 	isb	sy
 80154fc:	e75c      	b.n	80153b8 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80154fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015500:	f000 f8f0 	bl	80156e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015504:	f000 fca4 	bl	8015e50 <xTaskResumeAll>
 8015508:	e756      	b.n	80153b8 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801550a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801550c:	f000 f8ea 	bl	80156e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015510:	f000 fc9e 	bl	8015e50 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015514:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015516:	f000 f937 	bl	8015788 <prvIsQueueEmpty>
 801551a:	4603      	mov	r3, r0
 801551c:	2b00      	cmp	r3, #0
 801551e:	f43f af4b 	beq.w	80153b8 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8015522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015524:	2b00      	cmp	r3, #0
 8015526:	d00d      	beq.n	8015544 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8015528:	f001 fb80 	bl	8016c2c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801552c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801552e:	f000 f831 	bl	8015594 <prvGetDisinheritPriorityAfterTimeout>
 8015532:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8015534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015536:	689b      	ldr	r3, [r3, #8]
 8015538:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801553a:	4618      	mov	r0, r3
 801553c:	f001 f950 	bl	80167e0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8015540:	f001 fba8 	bl	8016c94 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015544:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8015546:	4618      	mov	r0, r3
 8015548:	3738      	adds	r7, #56	; 0x38
 801554a:	46bd      	mov	sp, r7
 801554c:	bd80      	pop	{r7, pc}
 801554e:	bf00      	nop
 8015550:	e000ed04 	.word	0xe000ed04

08015554 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8015554:	b580      	push	{r7, lr}
 8015556:	b084      	sub	sp, #16
 8015558:	af00      	add	r7, sp, #0
 801555a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	2b00      	cmp	r3, #0
 8015560:	d10c      	bne.n	801557c <uxQueueMessagesWaiting+0x28>
	__asm volatile
 8015562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015566:	b672      	cpsid	i
 8015568:	f383 8811 	msr	BASEPRI, r3
 801556c:	f3bf 8f6f 	isb	sy
 8015570:	f3bf 8f4f 	dsb	sy
 8015574:	b662      	cpsie	i
 8015576:	60bb      	str	r3, [r7, #8]
}
 8015578:	bf00      	nop
 801557a:	e7fe      	b.n	801557a <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 801557c:	f001 fb56 	bl	8016c2c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015584:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8015586:	f001 fb85 	bl	8016c94 <vPortExitCritical>

	return uxReturn;
 801558a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801558c:	4618      	mov	r0, r3
 801558e:	3710      	adds	r7, #16
 8015590:	46bd      	mov	sp, r7
 8015592:	bd80      	pop	{r7, pc}

08015594 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8015594:	b480      	push	{r7}
 8015596:	b085      	sub	sp, #20
 8015598:	af00      	add	r7, sp, #0
 801559a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d006      	beq.n	80155b2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80155a8:	681b      	ldr	r3, [r3, #0]
 80155aa:	f1c3 0307 	rsb	r3, r3, #7
 80155ae:	60fb      	str	r3, [r7, #12]
 80155b0:	e001      	b.n	80155b6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80155b2:	2300      	movs	r3, #0
 80155b4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80155b6:	68fb      	ldr	r3, [r7, #12]
	}
 80155b8:	4618      	mov	r0, r3
 80155ba:	3714      	adds	r7, #20
 80155bc:	46bd      	mov	sp, r7
 80155be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155c2:	4770      	bx	lr

080155c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80155c4:	b580      	push	{r7, lr}
 80155c6:	b086      	sub	sp, #24
 80155c8:	af00      	add	r7, sp, #0
 80155ca:	60f8      	str	r0, [r7, #12]
 80155cc:	60b9      	str	r1, [r7, #8]
 80155ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80155d0:	2300      	movs	r3, #0
 80155d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80155d4:	68fb      	ldr	r3, [r7, #12]
 80155d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80155d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80155da:	68fb      	ldr	r3, [r7, #12]
 80155dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d10d      	bne.n	80155fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80155e2:	68fb      	ldr	r3, [r7, #12]
 80155e4:	681b      	ldr	r3, [r3, #0]
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	d14d      	bne.n	8015686 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80155ea:	68fb      	ldr	r3, [r7, #12]
 80155ec:	689b      	ldr	r3, [r3, #8]
 80155ee:	4618      	mov	r0, r3
 80155f0:	f001 f86c 	bl	80166cc <xTaskPriorityDisinherit>
 80155f4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80155f6:	68fb      	ldr	r3, [r7, #12]
 80155f8:	2200      	movs	r2, #0
 80155fa:	609a      	str	r2, [r3, #8]
 80155fc:	e043      	b.n	8015686 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	2b00      	cmp	r3, #0
 8015602:	d119      	bne.n	8015638 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015604:	68fb      	ldr	r3, [r7, #12]
 8015606:	6858      	ldr	r0, [r3, #4]
 8015608:	68fb      	ldr	r3, [r7, #12]
 801560a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801560c:	461a      	mov	r2, r3
 801560e:	68b9      	ldr	r1, [r7, #8]
 8015610:	f001 fe48 	bl	80172a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015614:	68fb      	ldr	r3, [r7, #12]
 8015616:	685a      	ldr	r2, [r3, #4]
 8015618:	68fb      	ldr	r3, [r7, #12]
 801561a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801561c:	441a      	add	r2, r3
 801561e:	68fb      	ldr	r3, [r7, #12]
 8015620:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015622:	68fb      	ldr	r3, [r7, #12]
 8015624:	685a      	ldr	r2, [r3, #4]
 8015626:	68fb      	ldr	r3, [r7, #12]
 8015628:	689b      	ldr	r3, [r3, #8]
 801562a:	429a      	cmp	r2, r3
 801562c:	d32b      	bcc.n	8015686 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801562e:	68fb      	ldr	r3, [r7, #12]
 8015630:	681a      	ldr	r2, [r3, #0]
 8015632:	68fb      	ldr	r3, [r7, #12]
 8015634:	605a      	str	r2, [r3, #4]
 8015636:	e026      	b.n	8015686 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8015638:	68fb      	ldr	r3, [r7, #12]
 801563a:	68d8      	ldr	r0, [r3, #12]
 801563c:	68fb      	ldr	r3, [r7, #12]
 801563e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015640:	461a      	mov	r2, r3
 8015642:	68b9      	ldr	r1, [r7, #8]
 8015644:	f001 fe2e 	bl	80172a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	68da      	ldr	r2, [r3, #12]
 801564c:	68fb      	ldr	r3, [r7, #12]
 801564e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015650:	425b      	negs	r3, r3
 8015652:	441a      	add	r2, r3
 8015654:	68fb      	ldr	r3, [r7, #12]
 8015656:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015658:	68fb      	ldr	r3, [r7, #12]
 801565a:	68da      	ldr	r2, [r3, #12]
 801565c:	68fb      	ldr	r3, [r7, #12]
 801565e:	681b      	ldr	r3, [r3, #0]
 8015660:	429a      	cmp	r2, r3
 8015662:	d207      	bcs.n	8015674 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8015664:	68fb      	ldr	r3, [r7, #12]
 8015666:	689a      	ldr	r2, [r3, #8]
 8015668:	68fb      	ldr	r3, [r7, #12]
 801566a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801566c:	425b      	negs	r3, r3
 801566e:	441a      	add	r2, r3
 8015670:	68fb      	ldr	r3, [r7, #12]
 8015672:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	2b02      	cmp	r3, #2
 8015678:	d105      	bne.n	8015686 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801567a:	693b      	ldr	r3, [r7, #16]
 801567c:	2b00      	cmp	r3, #0
 801567e:	d002      	beq.n	8015686 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8015680:	693b      	ldr	r3, [r7, #16]
 8015682:	3b01      	subs	r3, #1
 8015684:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015686:	693b      	ldr	r3, [r7, #16]
 8015688:	1c5a      	adds	r2, r3, #1
 801568a:	68fb      	ldr	r3, [r7, #12]
 801568c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801568e:	697b      	ldr	r3, [r7, #20]
}
 8015690:	4618      	mov	r0, r3
 8015692:	3718      	adds	r7, #24
 8015694:	46bd      	mov	sp, r7
 8015696:	bd80      	pop	{r7, pc}

08015698 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8015698:	b580      	push	{r7, lr}
 801569a:	b082      	sub	sp, #8
 801569c:	af00      	add	r7, sp, #0
 801569e:	6078      	str	r0, [r7, #4]
 80156a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d018      	beq.n	80156dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	68da      	ldr	r2, [r3, #12]
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80156b2:	441a      	add	r2, r3
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	68da      	ldr	r2, [r3, #12]
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	689b      	ldr	r3, [r3, #8]
 80156c0:	429a      	cmp	r2, r3
 80156c2:	d303      	bcc.n	80156cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	681a      	ldr	r2, [r3, #0]
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	68d9      	ldr	r1, [r3, #12]
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80156d4:	461a      	mov	r2, r3
 80156d6:	6838      	ldr	r0, [r7, #0]
 80156d8:	f001 fde4 	bl	80172a4 <memcpy>
	}
}
 80156dc:	bf00      	nop
 80156de:	3708      	adds	r7, #8
 80156e0:	46bd      	mov	sp, r7
 80156e2:	bd80      	pop	{r7, pc}

080156e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80156e4:	b580      	push	{r7, lr}
 80156e6:	b084      	sub	sp, #16
 80156e8:	af00      	add	r7, sp, #0
 80156ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80156ec:	f001 fa9e 	bl	8016c2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80156f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80156f8:	e011      	b.n	801571e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d012      	beq.n	8015728 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	3324      	adds	r3, #36	; 0x24
 8015706:	4618      	mov	r0, r3
 8015708:	f000 fd7e 	bl	8016208 <xTaskRemoveFromEventList>
 801570c:	4603      	mov	r3, r0
 801570e:	2b00      	cmp	r3, #0
 8015710:	d001      	beq.n	8015716 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8015712:	f000 fe59 	bl	80163c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8015716:	7bfb      	ldrb	r3, [r7, #15]
 8015718:	3b01      	subs	r3, #1
 801571a:	b2db      	uxtb	r3, r3
 801571c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801571e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015722:	2b00      	cmp	r3, #0
 8015724:	dce9      	bgt.n	80156fa <prvUnlockQueue+0x16>
 8015726:	e000      	b.n	801572a <prvUnlockQueue+0x46>
					break;
 8015728:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	22ff      	movs	r2, #255	; 0xff
 801572e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8015732:	f001 faaf 	bl	8016c94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8015736:	f001 fa79 	bl	8016c2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015740:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015742:	e011      	b.n	8015768 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	691b      	ldr	r3, [r3, #16]
 8015748:	2b00      	cmp	r3, #0
 801574a:	d012      	beq.n	8015772 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	3310      	adds	r3, #16
 8015750:	4618      	mov	r0, r3
 8015752:	f000 fd59 	bl	8016208 <xTaskRemoveFromEventList>
 8015756:	4603      	mov	r3, r0
 8015758:	2b00      	cmp	r3, #0
 801575a:	d001      	beq.n	8015760 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801575c:	f000 fe34 	bl	80163c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8015760:	7bbb      	ldrb	r3, [r7, #14]
 8015762:	3b01      	subs	r3, #1
 8015764:	b2db      	uxtb	r3, r3
 8015766:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015768:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801576c:	2b00      	cmp	r3, #0
 801576e:	dce9      	bgt.n	8015744 <prvUnlockQueue+0x60>
 8015770:	e000      	b.n	8015774 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8015772:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	22ff      	movs	r2, #255	; 0xff
 8015778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801577c:	f001 fa8a 	bl	8016c94 <vPortExitCritical>
}
 8015780:	bf00      	nop
 8015782:	3710      	adds	r7, #16
 8015784:	46bd      	mov	sp, r7
 8015786:	bd80      	pop	{r7, pc}

08015788 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8015788:	b580      	push	{r7, lr}
 801578a:	b084      	sub	sp, #16
 801578c:	af00      	add	r7, sp, #0
 801578e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015790:	f001 fa4c 	bl	8016c2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015798:	2b00      	cmp	r3, #0
 801579a:	d102      	bne.n	80157a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801579c:	2301      	movs	r3, #1
 801579e:	60fb      	str	r3, [r7, #12]
 80157a0:	e001      	b.n	80157a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80157a2:	2300      	movs	r3, #0
 80157a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80157a6:	f001 fa75 	bl	8016c94 <vPortExitCritical>

	return xReturn;
 80157aa:	68fb      	ldr	r3, [r7, #12]
}
 80157ac:	4618      	mov	r0, r3
 80157ae:	3710      	adds	r7, #16
 80157b0:	46bd      	mov	sp, r7
 80157b2:	bd80      	pop	{r7, pc}

080157b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80157b4:	b580      	push	{r7, lr}
 80157b6:	b084      	sub	sp, #16
 80157b8:	af00      	add	r7, sp, #0
 80157ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80157bc:	f001 fa36 	bl	8016c2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80157c8:	429a      	cmp	r2, r3
 80157ca:	d102      	bne.n	80157d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80157cc:	2301      	movs	r3, #1
 80157ce:	60fb      	str	r3, [r7, #12]
 80157d0:	e001      	b.n	80157d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80157d2:	2300      	movs	r3, #0
 80157d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80157d6:	f001 fa5d 	bl	8016c94 <vPortExitCritical>

	return xReturn;
 80157da:	68fb      	ldr	r3, [r7, #12]
}
 80157dc:	4618      	mov	r0, r3
 80157de:	3710      	adds	r7, #16
 80157e0:	46bd      	mov	sp, r7
 80157e2:	bd80      	pop	{r7, pc}

080157e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80157e4:	b580      	push	{r7, lr}
 80157e6:	b08e      	sub	sp, #56	; 0x38
 80157e8:	af04      	add	r7, sp, #16
 80157ea:	60f8      	str	r0, [r7, #12]
 80157ec:	60b9      	str	r1, [r7, #8]
 80157ee:	607a      	str	r2, [r7, #4]
 80157f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80157f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d10c      	bne.n	8015812 <xTaskCreateStatic+0x2e>
	__asm volatile
 80157f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157fc:	b672      	cpsid	i
 80157fe:	f383 8811 	msr	BASEPRI, r3
 8015802:	f3bf 8f6f 	isb	sy
 8015806:	f3bf 8f4f 	dsb	sy
 801580a:	b662      	cpsie	i
 801580c:	623b      	str	r3, [r7, #32]
}
 801580e:	bf00      	nop
 8015810:	e7fe      	b.n	8015810 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8015812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015814:	2b00      	cmp	r3, #0
 8015816:	d10c      	bne.n	8015832 <xTaskCreateStatic+0x4e>
	__asm volatile
 8015818:	f04f 0350 	mov.w	r3, #80	; 0x50
 801581c:	b672      	cpsid	i
 801581e:	f383 8811 	msr	BASEPRI, r3
 8015822:	f3bf 8f6f 	isb	sy
 8015826:	f3bf 8f4f 	dsb	sy
 801582a:	b662      	cpsie	i
 801582c:	61fb      	str	r3, [r7, #28]
}
 801582e:	bf00      	nop
 8015830:	e7fe      	b.n	8015830 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8015832:	2354      	movs	r3, #84	; 0x54
 8015834:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8015836:	693b      	ldr	r3, [r7, #16]
 8015838:	2b54      	cmp	r3, #84	; 0x54
 801583a:	d00c      	beq.n	8015856 <xTaskCreateStatic+0x72>
	__asm volatile
 801583c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015840:	b672      	cpsid	i
 8015842:	f383 8811 	msr	BASEPRI, r3
 8015846:	f3bf 8f6f 	isb	sy
 801584a:	f3bf 8f4f 	dsb	sy
 801584e:	b662      	cpsie	i
 8015850:	61bb      	str	r3, [r7, #24]
}
 8015852:	bf00      	nop
 8015854:	e7fe      	b.n	8015854 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8015856:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8015858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801585a:	2b00      	cmp	r3, #0
 801585c:	d01e      	beq.n	801589c <xTaskCreateStatic+0xb8>
 801585e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015860:	2b00      	cmp	r3, #0
 8015862:	d01b      	beq.n	801589c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015866:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8015868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801586a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801586c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801586e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015870:	2202      	movs	r2, #2
 8015872:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8015876:	2300      	movs	r3, #0
 8015878:	9303      	str	r3, [sp, #12]
 801587a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801587c:	9302      	str	r3, [sp, #8]
 801587e:	f107 0314 	add.w	r3, r7, #20
 8015882:	9301      	str	r3, [sp, #4]
 8015884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015886:	9300      	str	r3, [sp, #0]
 8015888:	683b      	ldr	r3, [r7, #0]
 801588a:	687a      	ldr	r2, [r7, #4]
 801588c:	68b9      	ldr	r1, [r7, #8]
 801588e:	68f8      	ldr	r0, [r7, #12]
 8015890:	f000 f850 	bl	8015934 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015894:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015896:	f000 f8d7 	bl	8015a48 <prvAddNewTaskToReadyList>
 801589a:	e001      	b.n	80158a0 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 801589c:	2300      	movs	r3, #0
 801589e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80158a0:	697b      	ldr	r3, [r7, #20]
	}
 80158a2:	4618      	mov	r0, r3
 80158a4:	3728      	adds	r7, #40	; 0x28
 80158a6:	46bd      	mov	sp, r7
 80158a8:	bd80      	pop	{r7, pc}

080158aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80158aa:	b580      	push	{r7, lr}
 80158ac:	b08c      	sub	sp, #48	; 0x30
 80158ae:	af04      	add	r7, sp, #16
 80158b0:	60f8      	str	r0, [r7, #12]
 80158b2:	60b9      	str	r1, [r7, #8]
 80158b4:	603b      	str	r3, [r7, #0]
 80158b6:	4613      	mov	r3, r2
 80158b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80158ba:	88fb      	ldrh	r3, [r7, #6]
 80158bc:	009b      	lsls	r3, r3, #2
 80158be:	4618      	mov	r0, r3
 80158c0:	f001 fae0 	bl	8016e84 <pvPortMalloc>
 80158c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80158c6:	697b      	ldr	r3, [r7, #20]
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d00e      	beq.n	80158ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80158cc:	2054      	movs	r0, #84	; 0x54
 80158ce:	f001 fad9 	bl	8016e84 <pvPortMalloc>
 80158d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80158d4:	69fb      	ldr	r3, [r7, #28]
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d003      	beq.n	80158e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80158da:	69fb      	ldr	r3, [r7, #28]
 80158dc:	697a      	ldr	r2, [r7, #20]
 80158de:	631a      	str	r2, [r3, #48]	; 0x30
 80158e0:	e005      	b.n	80158ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80158e2:	6978      	ldr	r0, [r7, #20]
 80158e4:	f001 fb98 	bl	8017018 <vPortFree>
 80158e8:	e001      	b.n	80158ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80158ea:	2300      	movs	r3, #0
 80158ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80158ee:	69fb      	ldr	r3, [r7, #28]
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d017      	beq.n	8015924 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80158f4:	69fb      	ldr	r3, [r7, #28]
 80158f6:	2200      	movs	r2, #0
 80158f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80158fc:	88fa      	ldrh	r2, [r7, #6]
 80158fe:	2300      	movs	r3, #0
 8015900:	9303      	str	r3, [sp, #12]
 8015902:	69fb      	ldr	r3, [r7, #28]
 8015904:	9302      	str	r3, [sp, #8]
 8015906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015908:	9301      	str	r3, [sp, #4]
 801590a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801590c:	9300      	str	r3, [sp, #0]
 801590e:	683b      	ldr	r3, [r7, #0]
 8015910:	68b9      	ldr	r1, [r7, #8]
 8015912:	68f8      	ldr	r0, [r7, #12]
 8015914:	f000 f80e 	bl	8015934 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015918:	69f8      	ldr	r0, [r7, #28]
 801591a:	f000 f895 	bl	8015a48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801591e:	2301      	movs	r3, #1
 8015920:	61bb      	str	r3, [r7, #24]
 8015922:	e002      	b.n	801592a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8015924:	f04f 33ff 	mov.w	r3, #4294967295
 8015928:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801592a:	69bb      	ldr	r3, [r7, #24]
	}
 801592c:	4618      	mov	r0, r3
 801592e:	3720      	adds	r7, #32
 8015930:	46bd      	mov	sp, r7
 8015932:	bd80      	pop	{r7, pc}

08015934 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8015934:	b580      	push	{r7, lr}
 8015936:	b088      	sub	sp, #32
 8015938:	af00      	add	r7, sp, #0
 801593a:	60f8      	str	r0, [r7, #12]
 801593c:	60b9      	str	r1, [r7, #8]
 801593e:	607a      	str	r2, [r7, #4]
 8015940:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8015942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015944:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015946:	6879      	ldr	r1, [r7, #4]
 8015948:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801594c:	440b      	add	r3, r1
 801594e:	009b      	lsls	r3, r3, #2
 8015950:	4413      	add	r3, r2
 8015952:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8015954:	69bb      	ldr	r3, [r7, #24]
 8015956:	f023 0307 	bic.w	r3, r3, #7
 801595a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801595c:	69bb      	ldr	r3, [r7, #24]
 801595e:	f003 0307 	and.w	r3, r3, #7
 8015962:	2b00      	cmp	r3, #0
 8015964:	d00c      	beq.n	8015980 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8015966:	f04f 0350 	mov.w	r3, #80	; 0x50
 801596a:	b672      	cpsid	i
 801596c:	f383 8811 	msr	BASEPRI, r3
 8015970:	f3bf 8f6f 	isb	sy
 8015974:	f3bf 8f4f 	dsb	sy
 8015978:	b662      	cpsie	i
 801597a:	617b      	str	r3, [r7, #20]
}
 801597c:	bf00      	nop
 801597e:	e7fe      	b.n	801597e <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8015980:	68bb      	ldr	r3, [r7, #8]
 8015982:	2b00      	cmp	r3, #0
 8015984:	d01f      	beq.n	80159c6 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015986:	2300      	movs	r3, #0
 8015988:	61fb      	str	r3, [r7, #28]
 801598a:	e012      	b.n	80159b2 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801598c:	68ba      	ldr	r2, [r7, #8]
 801598e:	69fb      	ldr	r3, [r7, #28]
 8015990:	4413      	add	r3, r2
 8015992:	7819      	ldrb	r1, [r3, #0]
 8015994:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015996:	69fb      	ldr	r3, [r7, #28]
 8015998:	4413      	add	r3, r2
 801599a:	3334      	adds	r3, #52	; 0x34
 801599c:	460a      	mov	r2, r1
 801599e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80159a0:	68ba      	ldr	r2, [r7, #8]
 80159a2:	69fb      	ldr	r3, [r7, #28]
 80159a4:	4413      	add	r3, r2
 80159a6:	781b      	ldrb	r3, [r3, #0]
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d006      	beq.n	80159ba <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80159ac:	69fb      	ldr	r3, [r7, #28]
 80159ae:	3301      	adds	r3, #1
 80159b0:	61fb      	str	r3, [r7, #28]
 80159b2:	69fb      	ldr	r3, [r7, #28]
 80159b4:	2b0f      	cmp	r3, #15
 80159b6:	d9e9      	bls.n	801598c <prvInitialiseNewTask+0x58>
 80159b8:	e000      	b.n	80159bc <prvInitialiseNewTask+0x88>
			{
				break;
 80159ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80159bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159be:	2200      	movs	r2, #0
 80159c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80159c4:	e003      	b.n	80159ce <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80159c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159c8:	2200      	movs	r2, #0
 80159ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80159ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159d0:	2b06      	cmp	r3, #6
 80159d2:	d901      	bls.n	80159d8 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80159d4:	2306      	movs	r3, #6
 80159d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80159d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80159dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80159de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80159e2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80159e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159e6:	2200      	movs	r2, #0
 80159e8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80159ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159ec:	3304      	adds	r3, #4
 80159ee:	4618      	mov	r0, r3
 80159f0:	f7ff f837 	bl	8014a62 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80159f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159f6:	3318      	adds	r3, #24
 80159f8:	4618      	mov	r0, r3
 80159fa:	f7ff f832 	bl	8014a62 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80159fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015a02:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a06:	f1c3 0207 	rsb	r2, r3, #7
 8015a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a0c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8015a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015a12:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8015a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a16:	2200      	movs	r2, #0
 8015a18:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a1c:	2200      	movs	r2, #0
 8015a1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8015a22:	683a      	ldr	r2, [r7, #0]
 8015a24:	68f9      	ldr	r1, [r7, #12]
 8015a26:	69b8      	ldr	r0, [r7, #24]
 8015a28:	f000 fff2 	bl	8016a10 <pxPortInitialiseStack>
 8015a2c:	4602      	mov	r2, r0
 8015a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a30:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8015a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	d002      	beq.n	8015a3e <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8015a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015a3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015a3e:	bf00      	nop
 8015a40:	3720      	adds	r7, #32
 8015a42:	46bd      	mov	sp, r7
 8015a44:	bd80      	pop	{r7, pc}
	...

08015a48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8015a48:	b580      	push	{r7, lr}
 8015a4a:	b082      	sub	sp, #8
 8015a4c:	af00      	add	r7, sp, #0
 8015a4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8015a50:	f001 f8ec 	bl	8016c2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8015a54:	4b2a      	ldr	r3, [pc, #168]	; (8015b00 <prvAddNewTaskToReadyList+0xb8>)
 8015a56:	681b      	ldr	r3, [r3, #0]
 8015a58:	3301      	adds	r3, #1
 8015a5a:	4a29      	ldr	r2, [pc, #164]	; (8015b00 <prvAddNewTaskToReadyList+0xb8>)
 8015a5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8015a5e:	4b29      	ldr	r3, [pc, #164]	; (8015b04 <prvAddNewTaskToReadyList+0xbc>)
 8015a60:	681b      	ldr	r3, [r3, #0]
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d109      	bne.n	8015a7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8015a66:	4a27      	ldr	r2, [pc, #156]	; (8015b04 <prvAddNewTaskToReadyList+0xbc>)
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8015a6c:	4b24      	ldr	r3, [pc, #144]	; (8015b00 <prvAddNewTaskToReadyList+0xb8>)
 8015a6e:	681b      	ldr	r3, [r3, #0]
 8015a70:	2b01      	cmp	r3, #1
 8015a72:	d110      	bne.n	8015a96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8015a74:	f000 fccc 	bl	8016410 <prvInitialiseTaskLists>
 8015a78:	e00d      	b.n	8015a96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8015a7a:	4b23      	ldr	r3, [pc, #140]	; (8015b08 <prvAddNewTaskToReadyList+0xc0>)
 8015a7c:	681b      	ldr	r3, [r3, #0]
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d109      	bne.n	8015a96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8015a82:	4b20      	ldr	r3, [pc, #128]	; (8015b04 <prvAddNewTaskToReadyList+0xbc>)
 8015a84:	681b      	ldr	r3, [r3, #0]
 8015a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a8c:	429a      	cmp	r2, r3
 8015a8e:	d802      	bhi.n	8015a96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8015a90:	4a1c      	ldr	r2, [pc, #112]	; (8015b04 <prvAddNewTaskToReadyList+0xbc>)
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8015a96:	4b1d      	ldr	r3, [pc, #116]	; (8015b0c <prvAddNewTaskToReadyList+0xc4>)
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	3301      	adds	r3, #1
 8015a9c:	4a1b      	ldr	r2, [pc, #108]	; (8015b0c <prvAddNewTaskToReadyList+0xc4>)
 8015a9e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015aa4:	2201      	movs	r2, #1
 8015aa6:	409a      	lsls	r2, r3
 8015aa8:	4b19      	ldr	r3, [pc, #100]	; (8015b10 <prvAddNewTaskToReadyList+0xc8>)
 8015aaa:	681b      	ldr	r3, [r3, #0]
 8015aac:	4313      	orrs	r3, r2
 8015aae:	4a18      	ldr	r2, [pc, #96]	; (8015b10 <prvAddNewTaskToReadyList+0xc8>)
 8015ab0:	6013      	str	r3, [r2, #0]
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ab6:	4613      	mov	r3, r2
 8015ab8:	009b      	lsls	r3, r3, #2
 8015aba:	4413      	add	r3, r2
 8015abc:	009b      	lsls	r3, r3, #2
 8015abe:	4a15      	ldr	r2, [pc, #84]	; (8015b14 <prvAddNewTaskToReadyList+0xcc>)
 8015ac0:	441a      	add	r2, r3
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	3304      	adds	r3, #4
 8015ac6:	4619      	mov	r1, r3
 8015ac8:	4610      	mov	r0, r2
 8015aca:	f7fe ffd7 	bl	8014a7c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8015ace:	f001 f8e1 	bl	8016c94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8015ad2:	4b0d      	ldr	r3, [pc, #52]	; (8015b08 <prvAddNewTaskToReadyList+0xc0>)
 8015ad4:	681b      	ldr	r3, [r3, #0]
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d00e      	beq.n	8015af8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8015ada:	4b0a      	ldr	r3, [pc, #40]	; (8015b04 <prvAddNewTaskToReadyList+0xbc>)
 8015adc:	681b      	ldr	r3, [r3, #0]
 8015ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ae4:	429a      	cmp	r2, r3
 8015ae6:	d207      	bcs.n	8015af8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8015ae8:	4b0b      	ldr	r3, [pc, #44]	; (8015b18 <prvAddNewTaskToReadyList+0xd0>)
 8015aea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015aee:	601a      	str	r2, [r3, #0]
 8015af0:	f3bf 8f4f 	dsb	sy
 8015af4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015af8:	bf00      	nop
 8015afa:	3708      	adds	r7, #8
 8015afc:	46bd      	mov	sp, r7
 8015afe:	bd80      	pop	{r7, pc}
 8015b00:	200005a4 	.word	0x200005a4
 8015b04:	200004a4 	.word	0x200004a4
 8015b08:	200005b0 	.word	0x200005b0
 8015b0c:	200005c0 	.word	0x200005c0
 8015b10:	200005ac 	.word	0x200005ac
 8015b14:	200004a8 	.word	0x200004a8
 8015b18:	e000ed04 	.word	0xe000ed04

08015b1c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8015b1c:	b580      	push	{r7, lr}
 8015b1e:	b084      	sub	sp, #16
 8015b20:	af00      	add	r7, sp, #0
 8015b22:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8015b24:	f001 f882 	bl	8016c2c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d102      	bne.n	8015b34 <vTaskSuspend+0x18>
 8015b2e:	4b3d      	ldr	r3, [pc, #244]	; (8015c24 <vTaskSuspend+0x108>)
 8015b30:	681b      	ldr	r3, [r3, #0]
 8015b32:	e000      	b.n	8015b36 <vTaskSuspend+0x1a>
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015b38:	68fb      	ldr	r3, [r7, #12]
 8015b3a:	3304      	adds	r3, #4
 8015b3c:	4618      	mov	r0, r3
 8015b3e:	f7fe fffa 	bl	8014b36 <uxListRemove>
 8015b42:	4603      	mov	r3, r0
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	d115      	bne.n	8015b74 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8015b48:	68fb      	ldr	r3, [r7, #12]
 8015b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015b4c:	4936      	ldr	r1, [pc, #216]	; (8015c28 <vTaskSuspend+0x10c>)
 8015b4e:	4613      	mov	r3, r2
 8015b50:	009b      	lsls	r3, r3, #2
 8015b52:	4413      	add	r3, r2
 8015b54:	009b      	lsls	r3, r3, #2
 8015b56:	440b      	add	r3, r1
 8015b58:	681b      	ldr	r3, [r3, #0]
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	d10a      	bne.n	8015b74 <vTaskSuspend+0x58>
 8015b5e:	68fb      	ldr	r3, [r7, #12]
 8015b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b62:	2201      	movs	r2, #1
 8015b64:	fa02 f303 	lsl.w	r3, r2, r3
 8015b68:	43da      	mvns	r2, r3
 8015b6a:	4b30      	ldr	r3, [pc, #192]	; (8015c2c <vTaskSuspend+0x110>)
 8015b6c:	681b      	ldr	r3, [r3, #0]
 8015b6e:	4013      	ands	r3, r2
 8015b70:	4a2e      	ldr	r2, [pc, #184]	; (8015c2c <vTaskSuspend+0x110>)
 8015b72:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015b74:	68fb      	ldr	r3, [r7, #12]
 8015b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d004      	beq.n	8015b86 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015b7c:	68fb      	ldr	r3, [r7, #12]
 8015b7e:	3318      	adds	r3, #24
 8015b80:	4618      	mov	r0, r3
 8015b82:	f7fe ffd8 	bl	8014b36 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8015b86:	68fb      	ldr	r3, [r7, #12]
 8015b88:	3304      	adds	r3, #4
 8015b8a:	4619      	mov	r1, r3
 8015b8c:	4828      	ldr	r0, [pc, #160]	; (8015c30 <vTaskSuspend+0x114>)
 8015b8e:	f7fe ff75 	bl	8014a7c <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8015b92:	68fb      	ldr	r3, [r7, #12]
 8015b94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8015b98:	b2db      	uxtb	r3, r3
 8015b9a:	2b01      	cmp	r3, #1
 8015b9c:	d103      	bne.n	8015ba6 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015b9e:	68fb      	ldr	r3, [r7, #12]
 8015ba0:	2200      	movs	r2, #0
 8015ba2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8015ba6:	f001 f875 	bl	8016c94 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8015baa:	4b22      	ldr	r3, [pc, #136]	; (8015c34 <vTaskSuspend+0x118>)
 8015bac:	681b      	ldr	r3, [r3, #0]
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	d005      	beq.n	8015bbe <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8015bb2:	f001 f83b 	bl	8016c2c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8015bb6:	f000 fccb 	bl	8016550 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8015bba:	f001 f86b 	bl	8016c94 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8015bbe:	4b19      	ldr	r3, [pc, #100]	; (8015c24 <vTaskSuspend+0x108>)
 8015bc0:	681b      	ldr	r3, [r3, #0]
 8015bc2:	68fa      	ldr	r2, [r7, #12]
 8015bc4:	429a      	cmp	r2, r3
 8015bc6:	d129      	bne.n	8015c1c <vTaskSuspend+0x100>
		{
			if( xSchedulerRunning != pdFALSE )
 8015bc8:	4b1a      	ldr	r3, [pc, #104]	; (8015c34 <vTaskSuspend+0x118>)
 8015bca:	681b      	ldr	r3, [r3, #0]
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	d019      	beq.n	8015c04 <vTaskSuspend+0xe8>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8015bd0:	4b19      	ldr	r3, [pc, #100]	; (8015c38 <vTaskSuspend+0x11c>)
 8015bd2:	681b      	ldr	r3, [r3, #0]
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	d00c      	beq.n	8015bf2 <vTaskSuspend+0xd6>
	__asm volatile
 8015bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bdc:	b672      	cpsid	i
 8015bde:	f383 8811 	msr	BASEPRI, r3
 8015be2:	f3bf 8f6f 	isb	sy
 8015be6:	f3bf 8f4f 	dsb	sy
 8015bea:	b662      	cpsie	i
 8015bec:	60bb      	str	r3, [r7, #8]
}
 8015bee:	bf00      	nop
 8015bf0:	e7fe      	b.n	8015bf0 <vTaskSuspend+0xd4>
				portYIELD_WITHIN_API();
 8015bf2:	4b12      	ldr	r3, [pc, #72]	; (8015c3c <vTaskSuspend+0x120>)
 8015bf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015bf8:	601a      	str	r2, [r3, #0]
 8015bfa:	f3bf 8f4f 	dsb	sy
 8015bfe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015c02:	e00b      	b.n	8015c1c <vTaskSuspend+0x100>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8015c04:	4b0a      	ldr	r3, [pc, #40]	; (8015c30 <vTaskSuspend+0x114>)
 8015c06:	681a      	ldr	r2, [r3, #0]
 8015c08:	4b0d      	ldr	r3, [pc, #52]	; (8015c40 <vTaskSuspend+0x124>)
 8015c0a:	681b      	ldr	r3, [r3, #0]
 8015c0c:	429a      	cmp	r2, r3
 8015c0e:	d103      	bne.n	8015c18 <vTaskSuspend+0xfc>
					pxCurrentTCB = NULL;
 8015c10:	4b04      	ldr	r3, [pc, #16]	; (8015c24 <vTaskSuspend+0x108>)
 8015c12:	2200      	movs	r2, #0
 8015c14:	601a      	str	r2, [r3, #0]
	}
 8015c16:	e001      	b.n	8015c1c <vTaskSuspend+0x100>
					vTaskSwitchContext();
 8015c18:	f000 fa72 	bl	8016100 <vTaskSwitchContext>
	}
 8015c1c:	bf00      	nop
 8015c1e:	3710      	adds	r7, #16
 8015c20:	46bd      	mov	sp, r7
 8015c22:	bd80      	pop	{r7, pc}
 8015c24:	200004a4 	.word	0x200004a4
 8015c28:	200004a8 	.word	0x200004a8
 8015c2c:	200005ac 	.word	0x200005ac
 8015c30:	20000590 	.word	0x20000590
 8015c34:	200005b0 	.word	0x200005b0
 8015c38:	200005cc 	.word	0x200005cc
 8015c3c:	e000ed04 	.word	0xe000ed04
 8015c40:	200005a4 	.word	0x200005a4

08015c44 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8015c44:	b480      	push	{r7}
 8015c46:	b087      	sub	sp, #28
 8015c48:	af00      	add	r7, sp, #0
 8015c4a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8015c4c:	2300      	movs	r3, #0
 8015c4e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d10c      	bne.n	8015c74 <prvTaskIsTaskSuspended+0x30>
	__asm volatile
 8015c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c5e:	b672      	cpsid	i
 8015c60:	f383 8811 	msr	BASEPRI, r3
 8015c64:	f3bf 8f6f 	isb	sy
 8015c68:	f3bf 8f4f 	dsb	sy
 8015c6c:	b662      	cpsie	i
 8015c6e:	60fb      	str	r3, [r7, #12]
}
 8015c70:	bf00      	nop
 8015c72:	e7fe      	b.n	8015c72 <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8015c74:	693b      	ldr	r3, [r7, #16]
 8015c76:	695b      	ldr	r3, [r3, #20]
 8015c78:	4a0a      	ldr	r2, [pc, #40]	; (8015ca4 <prvTaskIsTaskSuspended+0x60>)
 8015c7a:	4293      	cmp	r3, r2
 8015c7c:	d10a      	bne.n	8015c94 <prvTaskIsTaskSuspended+0x50>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8015c7e:	693b      	ldr	r3, [r7, #16]
 8015c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c82:	4a09      	ldr	r2, [pc, #36]	; (8015ca8 <prvTaskIsTaskSuspended+0x64>)
 8015c84:	4293      	cmp	r3, r2
 8015c86:	d005      	beq.n	8015c94 <prvTaskIsTaskSuspended+0x50>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8015c88:	693b      	ldr	r3, [r7, #16]
 8015c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d101      	bne.n	8015c94 <prvTaskIsTaskSuspended+0x50>
				{
					xReturn = pdTRUE;
 8015c90:	2301      	movs	r3, #1
 8015c92:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015c94:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8015c96:	4618      	mov	r0, r3
 8015c98:	371c      	adds	r7, #28
 8015c9a:	46bd      	mov	sp, r7
 8015c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ca0:	4770      	bx	lr
 8015ca2:	bf00      	nop
 8015ca4:	20000590 	.word	0x20000590
 8015ca8:	20000564 	.word	0x20000564

08015cac <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8015cac:	b580      	push	{r7, lr}
 8015cae:	b084      	sub	sp, #16
 8015cb0:	af00      	add	r7, sp, #0
 8015cb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	d10c      	bne.n	8015cd8 <vTaskResume+0x2c>
	__asm volatile
 8015cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cc2:	b672      	cpsid	i
 8015cc4:	f383 8811 	msr	BASEPRI, r3
 8015cc8:	f3bf 8f6f 	isb	sy
 8015ccc:	f3bf 8f4f 	dsb	sy
 8015cd0:	b662      	cpsie	i
 8015cd2:	60bb      	str	r3, [r7, #8]
}
 8015cd4:	bf00      	nop
 8015cd6:	e7fe      	b.n	8015cd6 <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8015cd8:	4b20      	ldr	r3, [pc, #128]	; (8015d5c <vTaskResume+0xb0>)
 8015cda:	681b      	ldr	r3, [r3, #0]
 8015cdc:	68fa      	ldr	r2, [r7, #12]
 8015cde:	429a      	cmp	r2, r3
 8015ce0:	d037      	beq.n	8015d52 <vTaskResume+0xa6>
 8015ce2:	68fb      	ldr	r3, [r7, #12]
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d034      	beq.n	8015d52 <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 8015ce8:	f000 ffa0 	bl	8016c2c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8015cec:	68f8      	ldr	r0, [r7, #12]
 8015cee:	f7ff ffa9 	bl	8015c44 <prvTaskIsTaskSuspended>
 8015cf2:	4603      	mov	r3, r0
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	d02a      	beq.n	8015d4e <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8015cf8:	68fb      	ldr	r3, [r7, #12]
 8015cfa:	3304      	adds	r3, #4
 8015cfc:	4618      	mov	r0, r3
 8015cfe:	f7fe ff1a 	bl	8014b36 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015d02:	68fb      	ldr	r3, [r7, #12]
 8015d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d06:	2201      	movs	r2, #1
 8015d08:	409a      	lsls	r2, r3
 8015d0a:	4b15      	ldr	r3, [pc, #84]	; (8015d60 <vTaskResume+0xb4>)
 8015d0c:	681b      	ldr	r3, [r3, #0]
 8015d0e:	4313      	orrs	r3, r2
 8015d10:	4a13      	ldr	r2, [pc, #76]	; (8015d60 <vTaskResume+0xb4>)
 8015d12:	6013      	str	r3, [r2, #0]
 8015d14:	68fb      	ldr	r3, [r7, #12]
 8015d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015d18:	4613      	mov	r3, r2
 8015d1a:	009b      	lsls	r3, r3, #2
 8015d1c:	4413      	add	r3, r2
 8015d1e:	009b      	lsls	r3, r3, #2
 8015d20:	4a10      	ldr	r2, [pc, #64]	; (8015d64 <vTaskResume+0xb8>)
 8015d22:	441a      	add	r2, r3
 8015d24:	68fb      	ldr	r3, [r7, #12]
 8015d26:	3304      	adds	r3, #4
 8015d28:	4619      	mov	r1, r3
 8015d2a:	4610      	mov	r0, r2
 8015d2c:	f7fe fea6 	bl	8014a7c <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015d30:	68fb      	ldr	r3, [r7, #12]
 8015d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015d34:	4b09      	ldr	r3, [pc, #36]	; (8015d5c <vTaskResume+0xb0>)
 8015d36:	681b      	ldr	r3, [r3, #0]
 8015d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d3a:	429a      	cmp	r2, r3
 8015d3c:	d307      	bcc.n	8015d4e <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8015d3e:	4b0a      	ldr	r3, [pc, #40]	; (8015d68 <vTaskResume+0xbc>)
 8015d40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015d44:	601a      	str	r2, [r3, #0]
 8015d46:	f3bf 8f4f 	dsb	sy
 8015d4a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8015d4e:	f000 ffa1 	bl	8016c94 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015d52:	bf00      	nop
 8015d54:	3710      	adds	r7, #16
 8015d56:	46bd      	mov	sp, r7
 8015d58:	bd80      	pop	{r7, pc}
 8015d5a:	bf00      	nop
 8015d5c:	200004a4 	.word	0x200004a4
 8015d60:	200005ac 	.word	0x200005ac
 8015d64:	200004a8 	.word	0x200004a8
 8015d68:	e000ed04 	.word	0xe000ed04

08015d6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8015d6c:	b580      	push	{r7, lr}
 8015d6e:	b08a      	sub	sp, #40	; 0x28
 8015d70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8015d72:	2300      	movs	r3, #0
 8015d74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8015d76:	2300      	movs	r3, #0
 8015d78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8015d7a:	463a      	mov	r2, r7
 8015d7c:	1d39      	adds	r1, r7, #4
 8015d7e:	f107 0308 	add.w	r3, r7, #8
 8015d82:	4618      	mov	r0, r3
 8015d84:	f7f6 fc00 	bl	800c588 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8015d88:	6839      	ldr	r1, [r7, #0]
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	68ba      	ldr	r2, [r7, #8]
 8015d8e:	9202      	str	r2, [sp, #8]
 8015d90:	9301      	str	r3, [sp, #4]
 8015d92:	2300      	movs	r3, #0
 8015d94:	9300      	str	r3, [sp, #0]
 8015d96:	2300      	movs	r3, #0
 8015d98:	460a      	mov	r2, r1
 8015d9a:	4920      	ldr	r1, [pc, #128]	; (8015e1c <vTaskStartScheduler+0xb0>)
 8015d9c:	4820      	ldr	r0, [pc, #128]	; (8015e20 <vTaskStartScheduler+0xb4>)
 8015d9e:	f7ff fd21 	bl	80157e4 <xTaskCreateStatic>
 8015da2:	4603      	mov	r3, r0
 8015da4:	4a1f      	ldr	r2, [pc, #124]	; (8015e24 <vTaskStartScheduler+0xb8>)
 8015da6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8015da8:	4b1e      	ldr	r3, [pc, #120]	; (8015e24 <vTaskStartScheduler+0xb8>)
 8015daa:	681b      	ldr	r3, [r3, #0]
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d002      	beq.n	8015db6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8015db0:	2301      	movs	r3, #1
 8015db2:	617b      	str	r3, [r7, #20]
 8015db4:	e001      	b.n	8015dba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8015db6:	2300      	movs	r3, #0
 8015db8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8015dba:	697b      	ldr	r3, [r7, #20]
 8015dbc:	2b01      	cmp	r3, #1
 8015dbe:	d118      	bne.n	8015df2 <vTaskStartScheduler+0x86>
	__asm volatile
 8015dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015dc4:	b672      	cpsid	i
 8015dc6:	f383 8811 	msr	BASEPRI, r3
 8015dca:	f3bf 8f6f 	isb	sy
 8015dce:	f3bf 8f4f 	dsb	sy
 8015dd2:	b662      	cpsie	i
 8015dd4:	613b      	str	r3, [r7, #16]
}
 8015dd6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8015dd8:	4b13      	ldr	r3, [pc, #76]	; (8015e28 <vTaskStartScheduler+0xbc>)
 8015dda:	f04f 32ff 	mov.w	r2, #4294967295
 8015dde:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8015de0:	4b12      	ldr	r3, [pc, #72]	; (8015e2c <vTaskStartScheduler+0xc0>)
 8015de2:	2201      	movs	r2, #1
 8015de4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8015de6:	4b12      	ldr	r3, [pc, #72]	; (8015e30 <vTaskStartScheduler+0xc4>)
 8015de8:	2200      	movs	r2, #0
 8015dea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8015dec:	f000 fea0 	bl	8016b30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8015df0:	e010      	b.n	8015e14 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8015df2:	697b      	ldr	r3, [r7, #20]
 8015df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015df8:	d10c      	bne.n	8015e14 <vTaskStartScheduler+0xa8>
	__asm volatile
 8015dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015dfe:	b672      	cpsid	i
 8015e00:	f383 8811 	msr	BASEPRI, r3
 8015e04:	f3bf 8f6f 	isb	sy
 8015e08:	f3bf 8f4f 	dsb	sy
 8015e0c:	b662      	cpsie	i
 8015e0e:	60fb      	str	r3, [r7, #12]
}
 8015e10:	bf00      	nop
 8015e12:	e7fe      	b.n	8015e12 <vTaskStartScheduler+0xa6>
}
 8015e14:	bf00      	nop
 8015e16:	3718      	adds	r7, #24
 8015e18:	46bd      	mov	sp, r7
 8015e1a:	bd80      	pop	{r7, pc}
 8015e1c:	0801e1f0 	.word	0x0801e1f0
 8015e20:	080163e1 	.word	0x080163e1
 8015e24:	200005c8 	.word	0x200005c8
 8015e28:	200005c4 	.word	0x200005c4
 8015e2c:	200005b0 	.word	0x200005b0
 8015e30:	200005a8 	.word	0x200005a8

08015e34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8015e34:	b480      	push	{r7}
 8015e36:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8015e38:	4b04      	ldr	r3, [pc, #16]	; (8015e4c <vTaskSuspendAll+0x18>)
 8015e3a:	681b      	ldr	r3, [r3, #0]
 8015e3c:	3301      	adds	r3, #1
 8015e3e:	4a03      	ldr	r2, [pc, #12]	; (8015e4c <vTaskSuspendAll+0x18>)
 8015e40:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8015e42:	bf00      	nop
 8015e44:	46bd      	mov	sp, r7
 8015e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e4a:	4770      	bx	lr
 8015e4c:	200005cc 	.word	0x200005cc

08015e50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8015e50:	b580      	push	{r7, lr}
 8015e52:	b084      	sub	sp, #16
 8015e54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8015e56:	2300      	movs	r3, #0
 8015e58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8015e5a:	2300      	movs	r3, #0
 8015e5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8015e5e:	4b42      	ldr	r3, [pc, #264]	; (8015f68 <xTaskResumeAll+0x118>)
 8015e60:	681b      	ldr	r3, [r3, #0]
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d10c      	bne.n	8015e80 <xTaskResumeAll+0x30>
	__asm volatile
 8015e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e6a:	b672      	cpsid	i
 8015e6c:	f383 8811 	msr	BASEPRI, r3
 8015e70:	f3bf 8f6f 	isb	sy
 8015e74:	f3bf 8f4f 	dsb	sy
 8015e78:	b662      	cpsie	i
 8015e7a:	603b      	str	r3, [r7, #0]
}
 8015e7c:	bf00      	nop
 8015e7e:	e7fe      	b.n	8015e7e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8015e80:	f000 fed4 	bl	8016c2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8015e84:	4b38      	ldr	r3, [pc, #224]	; (8015f68 <xTaskResumeAll+0x118>)
 8015e86:	681b      	ldr	r3, [r3, #0]
 8015e88:	3b01      	subs	r3, #1
 8015e8a:	4a37      	ldr	r2, [pc, #220]	; (8015f68 <xTaskResumeAll+0x118>)
 8015e8c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015e8e:	4b36      	ldr	r3, [pc, #216]	; (8015f68 <xTaskResumeAll+0x118>)
 8015e90:	681b      	ldr	r3, [r3, #0]
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	d161      	bne.n	8015f5a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8015e96:	4b35      	ldr	r3, [pc, #212]	; (8015f6c <xTaskResumeAll+0x11c>)
 8015e98:	681b      	ldr	r3, [r3, #0]
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	d05d      	beq.n	8015f5a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015e9e:	e02e      	b.n	8015efe <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015ea0:	4b33      	ldr	r3, [pc, #204]	; (8015f70 <xTaskResumeAll+0x120>)
 8015ea2:	68db      	ldr	r3, [r3, #12]
 8015ea4:	68db      	ldr	r3, [r3, #12]
 8015ea6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015ea8:	68fb      	ldr	r3, [r7, #12]
 8015eaa:	3318      	adds	r3, #24
 8015eac:	4618      	mov	r0, r3
 8015eae:	f7fe fe42 	bl	8014b36 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015eb2:	68fb      	ldr	r3, [r7, #12]
 8015eb4:	3304      	adds	r3, #4
 8015eb6:	4618      	mov	r0, r3
 8015eb8:	f7fe fe3d 	bl	8014b36 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015ebc:	68fb      	ldr	r3, [r7, #12]
 8015ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ec0:	2201      	movs	r2, #1
 8015ec2:	409a      	lsls	r2, r3
 8015ec4:	4b2b      	ldr	r3, [pc, #172]	; (8015f74 <xTaskResumeAll+0x124>)
 8015ec6:	681b      	ldr	r3, [r3, #0]
 8015ec8:	4313      	orrs	r3, r2
 8015eca:	4a2a      	ldr	r2, [pc, #168]	; (8015f74 <xTaskResumeAll+0x124>)
 8015ecc:	6013      	str	r3, [r2, #0]
 8015ece:	68fb      	ldr	r3, [r7, #12]
 8015ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ed2:	4613      	mov	r3, r2
 8015ed4:	009b      	lsls	r3, r3, #2
 8015ed6:	4413      	add	r3, r2
 8015ed8:	009b      	lsls	r3, r3, #2
 8015eda:	4a27      	ldr	r2, [pc, #156]	; (8015f78 <xTaskResumeAll+0x128>)
 8015edc:	441a      	add	r2, r3
 8015ede:	68fb      	ldr	r3, [r7, #12]
 8015ee0:	3304      	adds	r3, #4
 8015ee2:	4619      	mov	r1, r3
 8015ee4:	4610      	mov	r0, r2
 8015ee6:	f7fe fdc9 	bl	8014a7c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015eea:	68fb      	ldr	r3, [r7, #12]
 8015eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015eee:	4b23      	ldr	r3, [pc, #140]	; (8015f7c <xTaskResumeAll+0x12c>)
 8015ef0:	681b      	ldr	r3, [r3, #0]
 8015ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ef4:	429a      	cmp	r2, r3
 8015ef6:	d302      	bcc.n	8015efe <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8015ef8:	4b21      	ldr	r3, [pc, #132]	; (8015f80 <xTaskResumeAll+0x130>)
 8015efa:	2201      	movs	r2, #1
 8015efc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015efe:	4b1c      	ldr	r3, [pc, #112]	; (8015f70 <xTaskResumeAll+0x120>)
 8015f00:	681b      	ldr	r3, [r3, #0]
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	d1cc      	bne.n	8015ea0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8015f06:	68fb      	ldr	r3, [r7, #12]
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d001      	beq.n	8015f10 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8015f0c:	f000 fb20 	bl	8016550 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8015f10:	4b1c      	ldr	r3, [pc, #112]	; (8015f84 <xTaskResumeAll+0x134>)
 8015f12:	681b      	ldr	r3, [r3, #0]
 8015f14:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d010      	beq.n	8015f3e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8015f1c:	f000 f836 	bl	8015f8c <xTaskIncrementTick>
 8015f20:	4603      	mov	r3, r0
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d002      	beq.n	8015f2c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8015f26:	4b16      	ldr	r3, [pc, #88]	; (8015f80 <xTaskResumeAll+0x130>)
 8015f28:	2201      	movs	r2, #1
 8015f2a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	3b01      	subs	r3, #1
 8015f30:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	d1f1      	bne.n	8015f1c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8015f38:	4b12      	ldr	r3, [pc, #72]	; (8015f84 <xTaskResumeAll+0x134>)
 8015f3a:	2200      	movs	r2, #0
 8015f3c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8015f3e:	4b10      	ldr	r3, [pc, #64]	; (8015f80 <xTaskResumeAll+0x130>)
 8015f40:	681b      	ldr	r3, [r3, #0]
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	d009      	beq.n	8015f5a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8015f46:	2301      	movs	r3, #1
 8015f48:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8015f4a:	4b0f      	ldr	r3, [pc, #60]	; (8015f88 <xTaskResumeAll+0x138>)
 8015f4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015f50:	601a      	str	r2, [r3, #0]
 8015f52:	f3bf 8f4f 	dsb	sy
 8015f56:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015f5a:	f000 fe9b 	bl	8016c94 <vPortExitCritical>

	return xAlreadyYielded;
 8015f5e:	68bb      	ldr	r3, [r7, #8]
}
 8015f60:	4618      	mov	r0, r3
 8015f62:	3710      	adds	r7, #16
 8015f64:	46bd      	mov	sp, r7
 8015f66:	bd80      	pop	{r7, pc}
 8015f68:	200005cc 	.word	0x200005cc
 8015f6c:	200005a4 	.word	0x200005a4
 8015f70:	20000564 	.word	0x20000564
 8015f74:	200005ac 	.word	0x200005ac
 8015f78:	200004a8 	.word	0x200004a8
 8015f7c:	200004a4 	.word	0x200004a4
 8015f80:	200005b8 	.word	0x200005b8
 8015f84:	200005b4 	.word	0x200005b4
 8015f88:	e000ed04 	.word	0xe000ed04

08015f8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8015f8c:	b580      	push	{r7, lr}
 8015f8e:	b086      	sub	sp, #24
 8015f90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8015f92:	2300      	movs	r3, #0
 8015f94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015f96:	4b4f      	ldr	r3, [pc, #316]	; (80160d4 <xTaskIncrementTick+0x148>)
 8015f98:	681b      	ldr	r3, [r3, #0]
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	f040 808a 	bne.w	80160b4 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8015fa0:	4b4d      	ldr	r3, [pc, #308]	; (80160d8 <xTaskIncrementTick+0x14c>)
 8015fa2:	681b      	ldr	r3, [r3, #0]
 8015fa4:	3301      	adds	r3, #1
 8015fa6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8015fa8:	4a4b      	ldr	r2, [pc, #300]	; (80160d8 <xTaskIncrementTick+0x14c>)
 8015faa:	693b      	ldr	r3, [r7, #16]
 8015fac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8015fae:	693b      	ldr	r3, [r7, #16]
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	d122      	bne.n	8015ffa <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8015fb4:	4b49      	ldr	r3, [pc, #292]	; (80160dc <xTaskIncrementTick+0x150>)
 8015fb6:	681b      	ldr	r3, [r3, #0]
 8015fb8:	681b      	ldr	r3, [r3, #0]
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	d00c      	beq.n	8015fd8 <xTaskIncrementTick+0x4c>
	__asm volatile
 8015fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fc2:	b672      	cpsid	i
 8015fc4:	f383 8811 	msr	BASEPRI, r3
 8015fc8:	f3bf 8f6f 	isb	sy
 8015fcc:	f3bf 8f4f 	dsb	sy
 8015fd0:	b662      	cpsie	i
 8015fd2:	603b      	str	r3, [r7, #0]
}
 8015fd4:	bf00      	nop
 8015fd6:	e7fe      	b.n	8015fd6 <xTaskIncrementTick+0x4a>
 8015fd8:	4b40      	ldr	r3, [pc, #256]	; (80160dc <xTaskIncrementTick+0x150>)
 8015fda:	681b      	ldr	r3, [r3, #0]
 8015fdc:	60fb      	str	r3, [r7, #12]
 8015fde:	4b40      	ldr	r3, [pc, #256]	; (80160e0 <xTaskIncrementTick+0x154>)
 8015fe0:	681b      	ldr	r3, [r3, #0]
 8015fe2:	4a3e      	ldr	r2, [pc, #248]	; (80160dc <xTaskIncrementTick+0x150>)
 8015fe4:	6013      	str	r3, [r2, #0]
 8015fe6:	4a3e      	ldr	r2, [pc, #248]	; (80160e0 <xTaskIncrementTick+0x154>)
 8015fe8:	68fb      	ldr	r3, [r7, #12]
 8015fea:	6013      	str	r3, [r2, #0]
 8015fec:	4b3d      	ldr	r3, [pc, #244]	; (80160e4 <xTaskIncrementTick+0x158>)
 8015fee:	681b      	ldr	r3, [r3, #0]
 8015ff0:	3301      	adds	r3, #1
 8015ff2:	4a3c      	ldr	r2, [pc, #240]	; (80160e4 <xTaskIncrementTick+0x158>)
 8015ff4:	6013      	str	r3, [r2, #0]
 8015ff6:	f000 faab 	bl	8016550 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8015ffa:	4b3b      	ldr	r3, [pc, #236]	; (80160e8 <xTaskIncrementTick+0x15c>)
 8015ffc:	681b      	ldr	r3, [r3, #0]
 8015ffe:	693a      	ldr	r2, [r7, #16]
 8016000:	429a      	cmp	r2, r3
 8016002:	d348      	bcc.n	8016096 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016004:	4b35      	ldr	r3, [pc, #212]	; (80160dc <xTaskIncrementTick+0x150>)
 8016006:	681b      	ldr	r3, [r3, #0]
 8016008:	681b      	ldr	r3, [r3, #0]
 801600a:	2b00      	cmp	r3, #0
 801600c:	d104      	bne.n	8016018 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801600e:	4b36      	ldr	r3, [pc, #216]	; (80160e8 <xTaskIncrementTick+0x15c>)
 8016010:	f04f 32ff 	mov.w	r2, #4294967295
 8016014:	601a      	str	r2, [r3, #0]
					break;
 8016016:	e03e      	b.n	8016096 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016018:	4b30      	ldr	r3, [pc, #192]	; (80160dc <xTaskIncrementTick+0x150>)
 801601a:	681b      	ldr	r3, [r3, #0]
 801601c:	68db      	ldr	r3, [r3, #12]
 801601e:	68db      	ldr	r3, [r3, #12]
 8016020:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8016022:	68bb      	ldr	r3, [r7, #8]
 8016024:	685b      	ldr	r3, [r3, #4]
 8016026:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8016028:	693a      	ldr	r2, [r7, #16]
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	429a      	cmp	r2, r3
 801602e:	d203      	bcs.n	8016038 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8016030:	4a2d      	ldr	r2, [pc, #180]	; (80160e8 <xTaskIncrementTick+0x15c>)
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8016036:	e02e      	b.n	8016096 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016038:	68bb      	ldr	r3, [r7, #8]
 801603a:	3304      	adds	r3, #4
 801603c:	4618      	mov	r0, r3
 801603e:	f7fe fd7a 	bl	8014b36 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016042:	68bb      	ldr	r3, [r7, #8]
 8016044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016046:	2b00      	cmp	r3, #0
 8016048:	d004      	beq.n	8016054 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801604a:	68bb      	ldr	r3, [r7, #8]
 801604c:	3318      	adds	r3, #24
 801604e:	4618      	mov	r0, r3
 8016050:	f7fe fd71 	bl	8014b36 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8016054:	68bb      	ldr	r3, [r7, #8]
 8016056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016058:	2201      	movs	r2, #1
 801605a:	409a      	lsls	r2, r3
 801605c:	4b23      	ldr	r3, [pc, #140]	; (80160ec <xTaskIncrementTick+0x160>)
 801605e:	681b      	ldr	r3, [r3, #0]
 8016060:	4313      	orrs	r3, r2
 8016062:	4a22      	ldr	r2, [pc, #136]	; (80160ec <xTaskIncrementTick+0x160>)
 8016064:	6013      	str	r3, [r2, #0]
 8016066:	68bb      	ldr	r3, [r7, #8]
 8016068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801606a:	4613      	mov	r3, r2
 801606c:	009b      	lsls	r3, r3, #2
 801606e:	4413      	add	r3, r2
 8016070:	009b      	lsls	r3, r3, #2
 8016072:	4a1f      	ldr	r2, [pc, #124]	; (80160f0 <xTaskIncrementTick+0x164>)
 8016074:	441a      	add	r2, r3
 8016076:	68bb      	ldr	r3, [r7, #8]
 8016078:	3304      	adds	r3, #4
 801607a:	4619      	mov	r1, r3
 801607c:	4610      	mov	r0, r2
 801607e:	f7fe fcfd 	bl	8014a7c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016082:	68bb      	ldr	r3, [r7, #8]
 8016084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016086:	4b1b      	ldr	r3, [pc, #108]	; (80160f4 <xTaskIncrementTick+0x168>)
 8016088:	681b      	ldr	r3, [r3, #0]
 801608a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801608c:	429a      	cmp	r2, r3
 801608e:	d3b9      	bcc.n	8016004 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8016090:	2301      	movs	r3, #1
 8016092:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016094:	e7b6      	b.n	8016004 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8016096:	4b17      	ldr	r3, [pc, #92]	; (80160f4 <xTaskIncrementTick+0x168>)
 8016098:	681b      	ldr	r3, [r3, #0]
 801609a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801609c:	4914      	ldr	r1, [pc, #80]	; (80160f0 <xTaskIncrementTick+0x164>)
 801609e:	4613      	mov	r3, r2
 80160a0:	009b      	lsls	r3, r3, #2
 80160a2:	4413      	add	r3, r2
 80160a4:	009b      	lsls	r3, r3, #2
 80160a6:	440b      	add	r3, r1
 80160a8:	681b      	ldr	r3, [r3, #0]
 80160aa:	2b01      	cmp	r3, #1
 80160ac:	d907      	bls.n	80160be <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80160ae:	2301      	movs	r3, #1
 80160b0:	617b      	str	r3, [r7, #20]
 80160b2:	e004      	b.n	80160be <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80160b4:	4b10      	ldr	r3, [pc, #64]	; (80160f8 <xTaskIncrementTick+0x16c>)
 80160b6:	681b      	ldr	r3, [r3, #0]
 80160b8:	3301      	adds	r3, #1
 80160ba:	4a0f      	ldr	r2, [pc, #60]	; (80160f8 <xTaskIncrementTick+0x16c>)
 80160bc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80160be:	4b0f      	ldr	r3, [pc, #60]	; (80160fc <xTaskIncrementTick+0x170>)
 80160c0:	681b      	ldr	r3, [r3, #0]
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	d001      	beq.n	80160ca <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80160c6:	2301      	movs	r3, #1
 80160c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80160ca:	697b      	ldr	r3, [r7, #20]
}
 80160cc:	4618      	mov	r0, r3
 80160ce:	3718      	adds	r7, #24
 80160d0:	46bd      	mov	sp, r7
 80160d2:	bd80      	pop	{r7, pc}
 80160d4:	200005cc 	.word	0x200005cc
 80160d8:	200005a8 	.word	0x200005a8
 80160dc:	2000055c 	.word	0x2000055c
 80160e0:	20000560 	.word	0x20000560
 80160e4:	200005bc 	.word	0x200005bc
 80160e8:	200005c4 	.word	0x200005c4
 80160ec:	200005ac 	.word	0x200005ac
 80160f0:	200004a8 	.word	0x200004a8
 80160f4:	200004a4 	.word	0x200004a4
 80160f8:	200005b4 	.word	0x200005b4
 80160fc:	200005b8 	.word	0x200005b8

08016100 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8016100:	b480      	push	{r7}
 8016102:	b087      	sub	sp, #28
 8016104:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8016106:	4b28      	ldr	r3, [pc, #160]	; (80161a8 <vTaskSwitchContext+0xa8>)
 8016108:	681b      	ldr	r3, [r3, #0]
 801610a:	2b00      	cmp	r3, #0
 801610c:	d003      	beq.n	8016116 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801610e:	4b27      	ldr	r3, [pc, #156]	; (80161ac <vTaskSwitchContext+0xac>)
 8016110:	2201      	movs	r2, #1
 8016112:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8016114:	e041      	b.n	801619a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8016116:	4b25      	ldr	r3, [pc, #148]	; (80161ac <vTaskSwitchContext+0xac>)
 8016118:	2200      	movs	r2, #0
 801611a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801611c:	4b24      	ldr	r3, [pc, #144]	; (80161b0 <vTaskSwitchContext+0xb0>)
 801611e:	681b      	ldr	r3, [r3, #0]
 8016120:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8016122:	68fb      	ldr	r3, [r7, #12]
 8016124:	fab3 f383 	clz	r3, r3
 8016128:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801612a:	7afb      	ldrb	r3, [r7, #11]
 801612c:	f1c3 031f 	rsb	r3, r3, #31
 8016130:	617b      	str	r3, [r7, #20]
 8016132:	4920      	ldr	r1, [pc, #128]	; (80161b4 <vTaskSwitchContext+0xb4>)
 8016134:	697a      	ldr	r2, [r7, #20]
 8016136:	4613      	mov	r3, r2
 8016138:	009b      	lsls	r3, r3, #2
 801613a:	4413      	add	r3, r2
 801613c:	009b      	lsls	r3, r3, #2
 801613e:	440b      	add	r3, r1
 8016140:	681b      	ldr	r3, [r3, #0]
 8016142:	2b00      	cmp	r3, #0
 8016144:	d10c      	bne.n	8016160 <vTaskSwitchContext+0x60>
	__asm volatile
 8016146:	f04f 0350 	mov.w	r3, #80	; 0x50
 801614a:	b672      	cpsid	i
 801614c:	f383 8811 	msr	BASEPRI, r3
 8016150:	f3bf 8f6f 	isb	sy
 8016154:	f3bf 8f4f 	dsb	sy
 8016158:	b662      	cpsie	i
 801615a:	607b      	str	r3, [r7, #4]
}
 801615c:	bf00      	nop
 801615e:	e7fe      	b.n	801615e <vTaskSwitchContext+0x5e>
 8016160:	697a      	ldr	r2, [r7, #20]
 8016162:	4613      	mov	r3, r2
 8016164:	009b      	lsls	r3, r3, #2
 8016166:	4413      	add	r3, r2
 8016168:	009b      	lsls	r3, r3, #2
 801616a:	4a12      	ldr	r2, [pc, #72]	; (80161b4 <vTaskSwitchContext+0xb4>)
 801616c:	4413      	add	r3, r2
 801616e:	613b      	str	r3, [r7, #16]
 8016170:	693b      	ldr	r3, [r7, #16]
 8016172:	685b      	ldr	r3, [r3, #4]
 8016174:	685a      	ldr	r2, [r3, #4]
 8016176:	693b      	ldr	r3, [r7, #16]
 8016178:	605a      	str	r2, [r3, #4]
 801617a:	693b      	ldr	r3, [r7, #16]
 801617c:	685a      	ldr	r2, [r3, #4]
 801617e:	693b      	ldr	r3, [r7, #16]
 8016180:	3308      	adds	r3, #8
 8016182:	429a      	cmp	r2, r3
 8016184:	d104      	bne.n	8016190 <vTaskSwitchContext+0x90>
 8016186:	693b      	ldr	r3, [r7, #16]
 8016188:	685b      	ldr	r3, [r3, #4]
 801618a:	685a      	ldr	r2, [r3, #4]
 801618c:	693b      	ldr	r3, [r7, #16]
 801618e:	605a      	str	r2, [r3, #4]
 8016190:	693b      	ldr	r3, [r7, #16]
 8016192:	685b      	ldr	r3, [r3, #4]
 8016194:	68db      	ldr	r3, [r3, #12]
 8016196:	4a08      	ldr	r2, [pc, #32]	; (80161b8 <vTaskSwitchContext+0xb8>)
 8016198:	6013      	str	r3, [r2, #0]
}
 801619a:	bf00      	nop
 801619c:	371c      	adds	r7, #28
 801619e:	46bd      	mov	sp, r7
 80161a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161a4:	4770      	bx	lr
 80161a6:	bf00      	nop
 80161a8:	200005cc 	.word	0x200005cc
 80161ac:	200005b8 	.word	0x200005b8
 80161b0:	200005ac 	.word	0x200005ac
 80161b4:	200004a8 	.word	0x200004a8
 80161b8:	200004a4 	.word	0x200004a4

080161bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80161bc:	b580      	push	{r7, lr}
 80161be:	b084      	sub	sp, #16
 80161c0:	af00      	add	r7, sp, #0
 80161c2:	6078      	str	r0, [r7, #4]
 80161c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d10c      	bne.n	80161e6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80161cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161d0:	b672      	cpsid	i
 80161d2:	f383 8811 	msr	BASEPRI, r3
 80161d6:	f3bf 8f6f 	isb	sy
 80161da:	f3bf 8f4f 	dsb	sy
 80161de:	b662      	cpsie	i
 80161e0:	60fb      	str	r3, [r7, #12]
}
 80161e2:	bf00      	nop
 80161e4:	e7fe      	b.n	80161e4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80161e6:	4b07      	ldr	r3, [pc, #28]	; (8016204 <vTaskPlaceOnEventList+0x48>)
 80161e8:	681b      	ldr	r3, [r3, #0]
 80161ea:	3318      	adds	r3, #24
 80161ec:	4619      	mov	r1, r3
 80161ee:	6878      	ldr	r0, [r7, #4]
 80161f0:	f7fe fc68 	bl	8014ac4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80161f4:	2101      	movs	r1, #1
 80161f6:	6838      	ldr	r0, [r7, #0]
 80161f8:	f000 fba4 	bl	8016944 <prvAddCurrentTaskToDelayedList>
}
 80161fc:	bf00      	nop
 80161fe:	3710      	adds	r7, #16
 8016200:	46bd      	mov	sp, r7
 8016202:	bd80      	pop	{r7, pc}
 8016204:	200004a4 	.word	0x200004a4

08016208 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8016208:	b580      	push	{r7, lr}
 801620a:	b086      	sub	sp, #24
 801620c:	af00      	add	r7, sp, #0
 801620e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	68db      	ldr	r3, [r3, #12]
 8016214:	68db      	ldr	r3, [r3, #12]
 8016216:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8016218:	693b      	ldr	r3, [r7, #16]
 801621a:	2b00      	cmp	r3, #0
 801621c:	d10c      	bne.n	8016238 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 801621e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016222:	b672      	cpsid	i
 8016224:	f383 8811 	msr	BASEPRI, r3
 8016228:	f3bf 8f6f 	isb	sy
 801622c:	f3bf 8f4f 	dsb	sy
 8016230:	b662      	cpsie	i
 8016232:	60fb      	str	r3, [r7, #12]
}
 8016234:	bf00      	nop
 8016236:	e7fe      	b.n	8016236 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8016238:	693b      	ldr	r3, [r7, #16]
 801623a:	3318      	adds	r3, #24
 801623c:	4618      	mov	r0, r3
 801623e:	f7fe fc7a 	bl	8014b36 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016242:	4b1d      	ldr	r3, [pc, #116]	; (80162b8 <xTaskRemoveFromEventList+0xb0>)
 8016244:	681b      	ldr	r3, [r3, #0]
 8016246:	2b00      	cmp	r3, #0
 8016248:	d11c      	bne.n	8016284 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801624a:	693b      	ldr	r3, [r7, #16]
 801624c:	3304      	adds	r3, #4
 801624e:	4618      	mov	r0, r3
 8016250:	f7fe fc71 	bl	8014b36 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8016254:	693b      	ldr	r3, [r7, #16]
 8016256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016258:	2201      	movs	r2, #1
 801625a:	409a      	lsls	r2, r3
 801625c:	4b17      	ldr	r3, [pc, #92]	; (80162bc <xTaskRemoveFromEventList+0xb4>)
 801625e:	681b      	ldr	r3, [r3, #0]
 8016260:	4313      	orrs	r3, r2
 8016262:	4a16      	ldr	r2, [pc, #88]	; (80162bc <xTaskRemoveFromEventList+0xb4>)
 8016264:	6013      	str	r3, [r2, #0]
 8016266:	693b      	ldr	r3, [r7, #16]
 8016268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801626a:	4613      	mov	r3, r2
 801626c:	009b      	lsls	r3, r3, #2
 801626e:	4413      	add	r3, r2
 8016270:	009b      	lsls	r3, r3, #2
 8016272:	4a13      	ldr	r2, [pc, #76]	; (80162c0 <xTaskRemoveFromEventList+0xb8>)
 8016274:	441a      	add	r2, r3
 8016276:	693b      	ldr	r3, [r7, #16]
 8016278:	3304      	adds	r3, #4
 801627a:	4619      	mov	r1, r3
 801627c:	4610      	mov	r0, r2
 801627e:	f7fe fbfd 	bl	8014a7c <vListInsertEnd>
 8016282:	e005      	b.n	8016290 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8016284:	693b      	ldr	r3, [r7, #16]
 8016286:	3318      	adds	r3, #24
 8016288:	4619      	mov	r1, r3
 801628a:	480e      	ldr	r0, [pc, #56]	; (80162c4 <xTaskRemoveFromEventList+0xbc>)
 801628c:	f7fe fbf6 	bl	8014a7c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016290:	693b      	ldr	r3, [r7, #16]
 8016292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016294:	4b0c      	ldr	r3, [pc, #48]	; (80162c8 <xTaskRemoveFromEventList+0xc0>)
 8016296:	681b      	ldr	r3, [r3, #0]
 8016298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801629a:	429a      	cmp	r2, r3
 801629c:	d905      	bls.n	80162aa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801629e:	2301      	movs	r3, #1
 80162a0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80162a2:	4b0a      	ldr	r3, [pc, #40]	; (80162cc <xTaskRemoveFromEventList+0xc4>)
 80162a4:	2201      	movs	r2, #1
 80162a6:	601a      	str	r2, [r3, #0]
 80162a8:	e001      	b.n	80162ae <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80162aa:	2300      	movs	r3, #0
 80162ac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80162ae:	697b      	ldr	r3, [r7, #20]
}
 80162b0:	4618      	mov	r0, r3
 80162b2:	3718      	adds	r7, #24
 80162b4:	46bd      	mov	sp, r7
 80162b6:	bd80      	pop	{r7, pc}
 80162b8:	200005cc 	.word	0x200005cc
 80162bc:	200005ac 	.word	0x200005ac
 80162c0:	200004a8 	.word	0x200004a8
 80162c4:	20000564 	.word	0x20000564
 80162c8:	200004a4 	.word	0x200004a4
 80162cc:	200005b8 	.word	0x200005b8

080162d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80162d0:	b480      	push	{r7}
 80162d2:	b083      	sub	sp, #12
 80162d4:	af00      	add	r7, sp, #0
 80162d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80162d8:	4b06      	ldr	r3, [pc, #24]	; (80162f4 <vTaskInternalSetTimeOutState+0x24>)
 80162da:	681a      	ldr	r2, [r3, #0]
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80162e0:	4b05      	ldr	r3, [pc, #20]	; (80162f8 <vTaskInternalSetTimeOutState+0x28>)
 80162e2:	681a      	ldr	r2, [r3, #0]
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	605a      	str	r2, [r3, #4]
}
 80162e8:	bf00      	nop
 80162ea:	370c      	adds	r7, #12
 80162ec:	46bd      	mov	sp, r7
 80162ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162f2:	4770      	bx	lr
 80162f4:	200005bc 	.word	0x200005bc
 80162f8:	200005a8 	.word	0x200005a8

080162fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80162fc:	b580      	push	{r7, lr}
 80162fe:	b088      	sub	sp, #32
 8016300:	af00      	add	r7, sp, #0
 8016302:	6078      	str	r0, [r7, #4]
 8016304:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	2b00      	cmp	r3, #0
 801630a:	d10c      	bne.n	8016326 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 801630c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016310:	b672      	cpsid	i
 8016312:	f383 8811 	msr	BASEPRI, r3
 8016316:	f3bf 8f6f 	isb	sy
 801631a:	f3bf 8f4f 	dsb	sy
 801631e:	b662      	cpsie	i
 8016320:	613b      	str	r3, [r7, #16]
}
 8016322:	bf00      	nop
 8016324:	e7fe      	b.n	8016324 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8016326:	683b      	ldr	r3, [r7, #0]
 8016328:	2b00      	cmp	r3, #0
 801632a:	d10c      	bne.n	8016346 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 801632c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016330:	b672      	cpsid	i
 8016332:	f383 8811 	msr	BASEPRI, r3
 8016336:	f3bf 8f6f 	isb	sy
 801633a:	f3bf 8f4f 	dsb	sy
 801633e:	b662      	cpsie	i
 8016340:	60fb      	str	r3, [r7, #12]
}
 8016342:	bf00      	nop
 8016344:	e7fe      	b.n	8016344 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8016346:	f000 fc71 	bl	8016c2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801634a:	4b1d      	ldr	r3, [pc, #116]	; (80163c0 <xTaskCheckForTimeOut+0xc4>)
 801634c:	681b      	ldr	r3, [r3, #0]
 801634e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	685b      	ldr	r3, [r3, #4]
 8016354:	69ba      	ldr	r2, [r7, #24]
 8016356:	1ad3      	subs	r3, r2, r3
 8016358:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801635a:	683b      	ldr	r3, [r7, #0]
 801635c:	681b      	ldr	r3, [r3, #0]
 801635e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016362:	d102      	bne.n	801636a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8016364:	2300      	movs	r3, #0
 8016366:	61fb      	str	r3, [r7, #28]
 8016368:	e023      	b.n	80163b2 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	681a      	ldr	r2, [r3, #0]
 801636e:	4b15      	ldr	r3, [pc, #84]	; (80163c4 <xTaskCheckForTimeOut+0xc8>)
 8016370:	681b      	ldr	r3, [r3, #0]
 8016372:	429a      	cmp	r2, r3
 8016374:	d007      	beq.n	8016386 <xTaskCheckForTimeOut+0x8a>
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	685b      	ldr	r3, [r3, #4]
 801637a:	69ba      	ldr	r2, [r7, #24]
 801637c:	429a      	cmp	r2, r3
 801637e:	d302      	bcc.n	8016386 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8016380:	2301      	movs	r3, #1
 8016382:	61fb      	str	r3, [r7, #28]
 8016384:	e015      	b.n	80163b2 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8016386:	683b      	ldr	r3, [r7, #0]
 8016388:	681b      	ldr	r3, [r3, #0]
 801638a:	697a      	ldr	r2, [r7, #20]
 801638c:	429a      	cmp	r2, r3
 801638e:	d20b      	bcs.n	80163a8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8016390:	683b      	ldr	r3, [r7, #0]
 8016392:	681a      	ldr	r2, [r3, #0]
 8016394:	697b      	ldr	r3, [r7, #20]
 8016396:	1ad2      	subs	r2, r2, r3
 8016398:	683b      	ldr	r3, [r7, #0]
 801639a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801639c:	6878      	ldr	r0, [r7, #4]
 801639e:	f7ff ff97 	bl	80162d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80163a2:	2300      	movs	r3, #0
 80163a4:	61fb      	str	r3, [r7, #28]
 80163a6:	e004      	b.n	80163b2 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80163a8:	683b      	ldr	r3, [r7, #0]
 80163aa:	2200      	movs	r2, #0
 80163ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80163ae:	2301      	movs	r3, #1
 80163b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80163b2:	f000 fc6f 	bl	8016c94 <vPortExitCritical>

	return xReturn;
 80163b6:	69fb      	ldr	r3, [r7, #28]
}
 80163b8:	4618      	mov	r0, r3
 80163ba:	3720      	adds	r7, #32
 80163bc:	46bd      	mov	sp, r7
 80163be:	bd80      	pop	{r7, pc}
 80163c0:	200005a8 	.word	0x200005a8
 80163c4:	200005bc 	.word	0x200005bc

080163c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80163c8:	b480      	push	{r7}
 80163ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80163cc:	4b03      	ldr	r3, [pc, #12]	; (80163dc <vTaskMissedYield+0x14>)
 80163ce:	2201      	movs	r2, #1
 80163d0:	601a      	str	r2, [r3, #0]
}
 80163d2:	bf00      	nop
 80163d4:	46bd      	mov	sp, r7
 80163d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163da:	4770      	bx	lr
 80163dc:	200005b8 	.word	0x200005b8

080163e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80163e0:	b580      	push	{r7, lr}
 80163e2:	b082      	sub	sp, #8
 80163e4:	af00      	add	r7, sp, #0
 80163e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80163e8:	f000 f852 	bl	8016490 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80163ec:	4b06      	ldr	r3, [pc, #24]	; (8016408 <prvIdleTask+0x28>)
 80163ee:	681b      	ldr	r3, [r3, #0]
 80163f0:	2b01      	cmp	r3, #1
 80163f2:	d9f9      	bls.n	80163e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80163f4:	4b05      	ldr	r3, [pc, #20]	; (801640c <prvIdleTask+0x2c>)
 80163f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80163fa:	601a      	str	r2, [r3, #0]
 80163fc:	f3bf 8f4f 	dsb	sy
 8016400:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8016404:	e7f0      	b.n	80163e8 <prvIdleTask+0x8>
 8016406:	bf00      	nop
 8016408:	200004a8 	.word	0x200004a8
 801640c:	e000ed04 	.word	0xe000ed04

08016410 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016410:	b580      	push	{r7, lr}
 8016412:	b082      	sub	sp, #8
 8016414:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016416:	2300      	movs	r3, #0
 8016418:	607b      	str	r3, [r7, #4]
 801641a:	e00c      	b.n	8016436 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801641c:	687a      	ldr	r2, [r7, #4]
 801641e:	4613      	mov	r3, r2
 8016420:	009b      	lsls	r3, r3, #2
 8016422:	4413      	add	r3, r2
 8016424:	009b      	lsls	r3, r3, #2
 8016426:	4a12      	ldr	r2, [pc, #72]	; (8016470 <prvInitialiseTaskLists+0x60>)
 8016428:	4413      	add	r3, r2
 801642a:	4618      	mov	r0, r3
 801642c:	f7fe faf9 	bl	8014a22 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	3301      	adds	r3, #1
 8016434:	607b      	str	r3, [r7, #4]
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	2b06      	cmp	r3, #6
 801643a:	d9ef      	bls.n	801641c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801643c:	480d      	ldr	r0, [pc, #52]	; (8016474 <prvInitialiseTaskLists+0x64>)
 801643e:	f7fe faf0 	bl	8014a22 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8016442:	480d      	ldr	r0, [pc, #52]	; (8016478 <prvInitialiseTaskLists+0x68>)
 8016444:	f7fe faed 	bl	8014a22 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8016448:	480c      	ldr	r0, [pc, #48]	; (801647c <prvInitialiseTaskLists+0x6c>)
 801644a:	f7fe faea 	bl	8014a22 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801644e:	480c      	ldr	r0, [pc, #48]	; (8016480 <prvInitialiseTaskLists+0x70>)
 8016450:	f7fe fae7 	bl	8014a22 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8016454:	480b      	ldr	r0, [pc, #44]	; (8016484 <prvInitialiseTaskLists+0x74>)
 8016456:	f7fe fae4 	bl	8014a22 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801645a:	4b0b      	ldr	r3, [pc, #44]	; (8016488 <prvInitialiseTaskLists+0x78>)
 801645c:	4a05      	ldr	r2, [pc, #20]	; (8016474 <prvInitialiseTaskLists+0x64>)
 801645e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8016460:	4b0a      	ldr	r3, [pc, #40]	; (801648c <prvInitialiseTaskLists+0x7c>)
 8016462:	4a05      	ldr	r2, [pc, #20]	; (8016478 <prvInitialiseTaskLists+0x68>)
 8016464:	601a      	str	r2, [r3, #0]
}
 8016466:	bf00      	nop
 8016468:	3708      	adds	r7, #8
 801646a:	46bd      	mov	sp, r7
 801646c:	bd80      	pop	{r7, pc}
 801646e:	bf00      	nop
 8016470:	200004a8 	.word	0x200004a8
 8016474:	20000534 	.word	0x20000534
 8016478:	20000548 	.word	0x20000548
 801647c:	20000564 	.word	0x20000564
 8016480:	20000578 	.word	0x20000578
 8016484:	20000590 	.word	0x20000590
 8016488:	2000055c 	.word	0x2000055c
 801648c:	20000560 	.word	0x20000560

08016490 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8016490:	b580      	push	{r7, lr}
 8016492:	b082      	sub	sp, #8
 8016494:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016496:	e019      	b.n	80164cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8016498:	f000 fbc8 	bl	8016c2c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801649c:	4b10      	ldr	r3, [pc, #64]	; (80164e0 <prvCheckTasksWaitingTermination+0x50>)
 801649e:	68db      	ldr	r3, [r3, #12]
 80164a0:	68db      	ldr	r3, [r3, #12]
 80164a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	3304      	adds	r3, #4
 80164a8:	4618      	mov	r0, r3
 80164aa:	f7fe fb44 	bl	8014b36 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80164ae:	4b0d      	ldr	r3, [pc, #52]	; (80164e4 <prvCheckTasksWaitingTermination+0x54>)
 80164b0:	681b      	ldr	r3, [r3, #0]
 80164b2:	3b01      	subs	r3, #1
 80164b4:	4a0b      	ldr	r2, [pc, #44]	; (80164e4 <prvCheckTasksWaitingTermination+0x54>)
 80164b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80164b8:	4b0b      	ldr	r3, [pc, #44]	; (80164e8 <prvCheckTasksWaitingTermination+0x58>)
 80164ba:	681b      	ldr	r3, [r3, #0]
 80164bc:	3b01      	subs	r3, #1
 80164be:	4a0a      	ldr	r2, [pc, #40]	; (80164e8 <prvCheckTasksWaitingTermination+0x58>)
 80164c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80164c2:	f000 fbe7 	bl	8016c94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80164c6:	6878      	ldr	r0, [r7, #4]
 80164c8:	f000 f810 	bl	80164ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80164cc:	4b06      	ldr	r3, [pc, #24]	; (80164e8 <prvCheckTasksWaitingTermination+0x58>)
 80164ce:	681b      	ldr	r3, [r3, #0]
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	d1e1      	bne.n	8016498 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80164d4:	bf00      	nop
 80164d6:	bf00      	nop
 80164d8:	3708      	adds	r7, #8
 80164da:	46bd      	mov	sp, r7
 80164dc:	bd80      	pop	{r7, pc}
 80164de:	bf00      	nop
 80164e0:	20000578 	.word	0x20000578
 80164e4:	200005a4 	.word	0x200005a4
 80164e8:	2000058c 	.word	0x2000058c

080164ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80164ec:	b580      	push	{r7, lr}
 80164ee:	b084      	sub	sp, #16
 80164f0:	af00      	add	r7, sp, #0
 80164f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d108      	bne.n	8016510 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016502:	4618      	mov	r0, r3
 8016504:	f000 fd88 	bl	8017018 <vPortFree>
				vPortFree( pxTCB );
 8016508:	6878      	ldr	r0, [r7, #4]
 801650a:	f000 fd85 	bl	8017018 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801650e:	e01a      	b.n	8016546 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8016516:	2b01      	cmp	r3, #1
 8016518:	d103      	bne.n	8016522 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801651a:	6878      	ldr	r0, [r7, #4]
 801651c:	f000 fd7c 	bl	8017018 <vPortFree>
	}
 8016520:	e011      	b.n	8016546 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8016528:	2b02      	cmp	r3, #2
 801652a:	d00c      	beq.n	8016546 <prvDeleteTCB+0x5a>
	__asm volatile
 801652c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016530:	b672      	cpsid	i
 8016532:	f383 8811 	msr	BASEPRI, r3
 8016536:	f3bf 8f6f 	isb	sy
 801653a:	f3bf 8f4f 	dsb	sy
 801653e:	b662      	cpsie	i
 8016540:	60fb      	str	r3, [r7, #12]
}
 8016542:	bf00      	nop
 8016544:	e7fe      	b.n	8016544 <prvDeleteTCB+0x58>
	}
 8016546:	bf00      	nop
 8016548:	3710      	adds	r7, #16
 801654a:	46bd      	mov	sp, r7
 801654c:	bd80      	pop	{r7, pc}
	...

08016550 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8016550:	b480      	push	{r7}
 8016552:	b083      	sub	sp, #12
 8016554:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016556:	4b0c      	ldr	r3, [pc, #48]	; (8016588 <prvResetNextTaskUnblockTime+0x38>)
 8016558:	681b      	ldr	r3, [r3, #0]
 801655a:	681b      	ldr	r3, [r3, #0]
 801655c:	2b00      	cmp	r3, #0
 801655e:	d104      	bne.n	801656a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8016560:	4b0a      	ldr	r3, [pc, #40]	; (801658c <prvResetNextTaskUnblockTime+0x3c>)
 8016562:	f04f 32ff 	mov.w	r2, #4294967295
 8016566:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8016568:	e008      	b.n	801657c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801656a:	4b07      	ldr	r3, [pc, #28]	; (8016588 <prvResetNextTaskUnblockTime+0x38>)
 801656c:	681b      	ldr	r3, [r3, #0]
 801656e:	68db      	ldr	r3, [r3, #12]
 8016570:	68db      	ldr	r3, [r3, #12]
 8016572:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	685b      	ldr	r3, [r3, #4]
 8016578:	4a04      	ldr	r2, [pc, #16]	; (801658c <prvResetNextTaskUnblockTime+0x3c>)
 801657a:	6013      	str	r3, [r2, #0]
}
 801657c:	bf00      	nop
 801657e:	370c      	adds	r7, #12
 8016580:	46bd      	mov	sp, r7
 8016582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016586:	4770      	bx	lr
 8016588:	2000055c 	.word	0x2000055c
 801658c:	200005c4 	.word	0x200005c4

08016590 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8016590:	b480      	push	{r7}
 8016592:	b083      	sub	sp, #12
 8016594:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8016596:	4b0b      	ldr	r3, [pc, #44]	; (80165c4 <xTaskGetSchedulerState+0x34>)
 8016598:	681b      	ldr	r3, [r3, #0]
 801659a:	2b00      	cmp	r3, #0
 801659c:	d102      	bne.n	80165a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801659e:	2301      	movs	r3, #1
 80165a0:	607b      	str	r3, [r7, #4]
 80165a2:	e008      	b.n	80165b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80165a4:	4b08      	ldr	r3, [pc, #32]	; (80165c8 <xTaskGetSchedulerState+0x38>)
 80165a6:	681b      	ldr	r3, [r3, #0]
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d102      	bne.n	80165b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80165ac:	2302      	movs	r3, #2
 80165ae:	607b      	str	r3, [r7, #4]
 80165b0:	e001      	b.n	80165b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80165b2:	2300      	movs	r3, #0
 80165b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80165b6:	687b      	ldr	r3, [r7, #4]
	}
 80165b8:	4618      	mov	r0, r3
 80165ba:	370c      	adds	r7, #12
 80165bc:	46bd      	mov	sp, r7
 80165be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165c2:	4770      	bx	lr
 80165c4:	200005b0 	.word	0x200005b0
 80165c8:	200005cc 	.word	0x200005cc

080165cc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80165cc:	b580      	push	{r7, lr}
 80165ce:	b084      	sub	sp, #16
 80165d0:	af00      	add	r7, sp, #0
 80165d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80165d8:	2300      	movs	r3, #0
 80165da:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	2b00      	cmp	r3, #0
 80165e0:	d069      	beq.n	80166b6 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80165e2:	68bb      	ldr	r3, [r7, #8]
 80165e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80165e6:	4b36      	ldr	r3, [pc, #216]	; (80166c0 <xTaskPriorityInherit+0xf4>)
 80165e8:	681b      	ldr	r3, [r3, #0]
 80165ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80165ec:	429a      	cmp	r2, r3
 80165ee:	d259      	bcs.n	80166a4 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80165f0:	68bb      	ldr	r3, [r7, #8]
 80165f2:	699b      	ldr	r3, [r3, #24]
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	db06      	blt.n	8016606 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80165f8:	4b31      	ldr	r3, [pc, #196]	; (80166c0 <xTaskPriorityInherit+0xf4>)
 80165fa:	681b      	ldr	r3, [r3, #0]
 80165fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80165fe:	f1c3 0207 	rsb	r2, r3, #7
 8016602:	68bb      	ldr	r3, [r7, #8]
 8016604:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8016606:	68bb      	ldr	r3, [r7, #8]
 8016608:	6959      	ldr	r1, [r3, #20]
 801660a:	68bb      	ldr	r3, [r7, #8]
 801660c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801660e:	4613      	mov	r3, r2
 8016610:	009b      	lsls	r3, r3, #2
 8016612:	4413      	add	r3, r2
 8016614:	009b      	lsls	r3, r3, #2
 8016616:	4a2b      	ldr	r2, [pc, #172]	; (80166c4 <xTaskPriorityInherit+0xf8>)
 8016618:	4413      	add	r3, r2
 801661a:	4299      	cmp	r1, r3
 801661c:	d13a      	bne.n	8016694 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801661e:	68bb      	ldr	r3, [r7, #8]
 8016620:	3304      	adds	r3, #4
 8016622:	4618      	mov	r0, r3
 8016624:	f7fe fa87 	bl	8014b36 <uxListRemove>
 8016628:	4603      	mov	r3, r0
 801662a:	2b00      	cmp	r3, #0
 801662c:	d115      	bne.n	801665a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 801662e:	68bb      	ldr	r3, [r7, #8]
 8016630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016632:	4924      	ldr	r1, [pc, #144]	; (80166c4 <xTaskPriorityInherit+0xf8>)
 8016634:	4613      	mov	r3, r2
 8016636:	009b      	lsls	r3, r3, #2
 8016638:	4413      	add	r3, r2
 801663a:	009b      	lsls	r3, r3, #2
 801663c:	440b      	add	r3, r1
 801663e:	681b      	ldr	r3, [r3, #0]
 8016640:	2b00      	cmp	r3, #0
 8016642:	d10a      	bne.n	801665a <xTaskPriorityInherit+0x8e>
 8016644:	68bb      	ldr	r3, [r7, #8]
 8016646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016648:	2201      	movs	r2, #1
 801664a:	fa02 f303 	lsl.w	r3, r2, r3
 801664e:	43da      	mvns	r2, r3
 8016650:	4b1d      	ldr	r3, [pc, #116]	; (80166c8 <xTaskPriorityInherit+0xfc>)
 8016652:	681b      	ldr	r3, [r3, #0]
 8016654:	4013      	ands	r3, r2
 8016656:	4a1c      	ldr	r2, [pc, #112]	; (80166c8 <xTaskPriorityInherit+0xfc>)
 8016658:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801665a:	4b19      	ldr	r3, [pc, #100]	; (80166c0 <xTaskPriorityInherit+0xf4>)
 801665c:	681b      	ldr	r3, [r3, #0]
 801665e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016660:	68bb      	ldr	r3, [r7, #8]
 8016662:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8016664:	68bb      	ldr	r3, [r7, #8]
 8016666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016668:	2201      	movs	r2, #1
 801666a:	409a      	lsls	r2, r3
 801666c:	4b16      	ldr	r3, [pc, #88]	; (80166c8 <xTaskPriorityInherit+0xfc>)
 801666e:	681b      	ldr	r3, [r3, #0]
 8016670:	4313      	orrs	r3, r2
 8016672:	4a15      	ldr	r2, [pc, #84]	; (80166c8 <xTaskPriorityInherit+0xfc>)
 8016674:	6013      	str	r3, [r2, #0]
 8016676:	68bb      	ldr	r3, [r7, #8]
 8016678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801667a:	4613      	mov	r3, r2
 801667c:	009b      	lsls	r3, r3, #2
 801667e:	4413      	add	r3, r2
 8016680:	009b      	lsls	r3, r3, #2
 8016682:	4a10      	ldr	r2, [pc, #64]	; (80166c4 <xTaskPriorityInherit+0xf8>)
 8016684:	441a      	add	r2, r3
 8016686:	68bb      	ldr	r3, [r7, #8]
 8016688:	3304      	adds	r3, #4
 801668a:	4619      	mov	r1, r3
 801668c:	4610      	mov	r0, r2
 801668e:	f7fe f9f5 	bl	8014a7c <vListInsertEnd>
 8016692:	e004      	b.n	801669e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016694:	4b0a      	ldr	r3, [pc, #40]	; (80166c0 <xTaskPriorityInherit+0xf4>)
 8016696:	681b      	ldr	r3, [r3, #0]
 8016698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801669a:	68bb      	ldr	r3, [r7, #8]
 801669c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801669e:	2301      	movs	r3, #1
 80166a0:	60fb      	str	r3, [r7, #12]
 80166a2:	e008      	b.n	80166b6 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80166a4:	68bb      	ldr	r3, [r7, #8]
 80166a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80166a8:	4b05      	ldr	r3, [pc, #20]	; (80166c0 <xTaskPriorityInherit+0xf4>)
 80166aa:	681b      	ldr	r3, [r3, #0]
 80166ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80166ae:	429a      	cmp	r2, r3
 80166b0:	d201      	bcs.n	80166b6 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80166b2:	2301      	movs	r3, #1
 80166b4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80166b6:	68fb      	ldr	r3, [r7, #12]
	}
 80166b8:	4618      	mov	r0, r3
 80166ba:	3710      	adds	r7, #16
 80166bc:	46bd      	mov	sp, r7
 80166be:	bd80      	pop	{r7, pc}
 80166c0:	200004a4 	.word	0x200004a4
 80166c4:	200004a8 	.word	0x200004a8
 80166c8:	200005ac 	.word	0x200005ac

080166cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80166cc:	b580      	push	{r7, lr}
 80166ce:	b086      	sub	sp, #24
 80166d0:	af00      	add	r7, sp, #0
 80166d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80166d8:	2300      	movs	r3, #0
 80166da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	2b00      	cmp	r3, #0
 80166e0:	d072      	beq.n	80167c8 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80166e2:	4b3c      	ldr	r3, [pc, #240]	; (80167d4 <xTaskPriorityDisinherit+0x108>)
 80166e4:	681b      	ldr	r3, [r3, #0]
 80166e6:	693a      	ldr	r2, [r7, #16]
 80166e8:	429a      	cmp	r2, r3
 80166ea:	d00c      	beq.n	8016706 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80166ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166f0:	b672      	cpsid	i
 80166f2:	f383 8811 	msr	BASEPRI, r3
 80166f6:	f3bf 8f6f 	isb	sy
 80166fa:	f3bf 8f4f 	dsb	sy
 80166fe:	b662      	cpsie	i
 8016700:	60fb      	str	r3, [r7, #12]
}
 8016702:	bf00      	nop
 8016704:	e7fe      	b.n	8016704 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8016706:	693b      	ldr	r3, [r7, #16]
 8016708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801670a:	2b00      	cmp	r3, #0
 801670c:	d10c      	bne.n	8016728 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 801670e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016712:	b672      	cpsid	i
 8016714:	f383 8811 	msr	BASEPRI, r3
 8016718:	f3bf 8f6f 	isb	sy
 801671c:	f3bf 8f4f 	dsb	sy
 8016720:	b662      	cpsie	i
 8016722:	60bb      	str	r3, [r7, #8]
}
 8016724:	bf00      	nop
 8016726:	e7fe      	b.n	8016726 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8016728:	693b      	ldr	r3, [r7, #16]
 801672a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801672c:	1e5a      	subs	r2, r3, #1
 801672e:	693b      	ldr	r3, [r7, #16]
 8016730:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016732:	693b      	ldr	r3, [r7, #16]
 8016734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016736:	693b      	ldr	r3, [r7, #16]
 8016738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801673a:	429a      	cmp	r2, r3
 801673c:	d044      	beq.n	80167c8 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801673e:	693b      	ldr	r3, [r7, #16]
 8016740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016742:	2b00      	cmp	r3, #0
 8016744:	d140      	bne.n	80167c8 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016746:	693b      	ldr	r3, [r7, #16]
 8016748:	3304      	adds	r3, #4
 801674a:	4618      	mov	r0, r3
 801674c:	f7fe f9f3 	bl	8014b36 <uxListRemove>
 8016750:	4603      	mov	r3, r0
 8016752:	2b00      	cmp	r3, #0
 8016754:	d115      	bne.n	8016782 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8016756:	693b      	ldr	r3, [r7, #16]
 8016758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801675a:	491f      	ldr	r1, [pc, #124]	; (80167d8 <xTaskPriorityDisinherit+0x10c>)
 801675c:	4613      	mov	r3, r2
 801675e:	009b      	lsls	r3, r3, #2
 8016760:	4413      	add	r3, r2
 8016762:	009b      	lsls	r3, r3, #2
 8016764:	440b      	add	r3, r1
 8016766:	681b      	ldr	r3, [r3, #0]
 8016768:	2b00      	cmp	r3, #0
 801676a:	d10a      	bne.n	8016782 <xTaskPriorityDisinherit+0xb6>
 801676c:	693b      	ldr	r3, [r7, #16]
 801676e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016770:	2201      	movs	r2, #1
 8016772:	fa02 f303 	lsl.w	r3, r2, r3
 8016776:	43da      	mvns	r2, r3
 8016778:	4b18      	ldr	r3, [pc, #96]	; (80167dc <xTaskPriorityDisinherit+0x110>)
 801677a:	681b      	ldr	r3, [r3, #0]
 801677c:	4013      	ands	r3, r2
 801677e:	4a17      	ldr	r2, [pc, #92]	; (80167dc <xTaskPriorityDisinherit+0x110>)
 8016780:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016782:	693b      	ldr	r3, [r7, #16]
 8016784:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016786:	693b      	ldr	r3, [r7, #16]
 8016788:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801678a:	693b      	ldr	r3, [r7, #16]
 801678c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801678e:	f1c3 0207 	rsb	r2, r3, #7
 8016792:	693b      	ldr	r3, [r7, #16]
 8016794:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8016796:	693b      	ldr	r3, [r7, #16]
 8016798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801679a:	2201      	movs	r2, #1
 801679c:	409a      	lsls	r2, r3
 801679e:	4b0f      	ldr	r3, [pc, #60]	; (80167dc <xTaskPriorityDisinherit+0x110>)
 80167a0:	681b      	ldr	r3, [r3, #0]
 80167a2:	4313      	orrs	r3, r2
 80167a4:	4a0d      	ldr	r2, [pc, #52]	; (80167dc <xTaskPriorityDisinherit+0x110>)
 80167a6:	6013      	str	r3, [r2, #0]
 80167a8:	693b      	ldr	r3, [r7, #16]
 80167aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80167ac:	4613      	mov	r3, r2
 80167ae:	009b      	lsls	r3, r3, #2
 80167b0:	4413      	add	r3, r2
 80167b2:	009b      	lsls	r3, r3, #2
 80167b4:	4a08      	ldr	r2, [pc, #32]	; (80167d8 <xTaskPriorityDisinherit+0x10c>)
 80167b6:	441a      	add	r2, r3
 80167b8:	693b      	ldr	r3, [r7, #16]
 80167ba:	3304      	adds	r3, #4
 80167bc:	4619      	mov	r1, r3
 80167be:	4610      	mov	r0, r2
 80167c0:	f7fe f95c 	bl	8014a7c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80167c4:	2301      	movs	r3, #1
 80167c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80167c8:	697b      	ldr	r3, [r7, #20]
	}
 80167ca:	4618      	mov	r0, r3
 80167cc:	3718      	adds	r7, #24
 80167ce:	46bd      	mov	sp, r7
 80167d0:	bd80      	pop	{r7, pc}
 80167d2:	bf00      	nop
 80167d4:	200004a4 	.word	0x200004a4
 80167d8:	200004a8 	.word	0x200004a8
 80167dc:	200005ac 	.word	0x200005ac

080167e0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80167e0:	b580      	push	{r7, lr}
 80167e2:	b088      	sub	sp, #32
 80167e4:	af00      	add	r7, sp, #0
 80167e6:	6078      	str	r0, [r7, #4]
 80167e8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80167ee:	2301      	movs	r3, #1
 80167f0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	f000 8087 	beq.w	8016908 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80167fa:	69bb      	ldr	r3, [r7, #24]
 80167fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80167fe:	2b00      	cmp	r3, #0
 8016800:	d10c      	bne.n	801681c <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8016802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016806:	b672      	cpsid	i
 8016808:	f383 8811 	msr	BASEPRI, r3
 801680c:	f3bf 8f6f 	isb	sy
 8016810:	f3bf 8f4f 	dsb	sy
 8016814:	b662      	cpsie	i
 8016816:	60fb      	str	r3, [r7, #12]
}
 8016818:	bf00      	nop
 801681a:	e7fe      	b.n	801681a <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801681c:	69bb      	ldr	r3, [r7, #24]
 801681e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016820:	683a      	ldr	r2, [r7, #0]
 8016822:	429a      	cmp	r2, r3
 8016824:	d902      	bls.n	801682c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8016826:	683b      	ldr	r3, [r7, #0]
 8016828:	61fb      	str	r3, [r7, #28]
 801682a:	e002      	b.n	8016832 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801682c:	69bb      	ldr	r3, [r7, #24]
 801682e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016830:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8016832:	69bb      	ldr	r3, [r7, #24]
 8016834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016836:	69fa      	ldr	r2, [r7, #28]
 8016838:	429a      	cmp	r2, r3
 801683a:	d065      	beq.n	8016908 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801683c:	69bb      	ldr	r3, [r7, #24]
 801683e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016840:	697a      	ldr	r2, [r7, #20]
 8016842:	429a      	cmp	r2, r3
 8016844:	d160      	bne.n	8016908 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8016846:	4b32      	ldr	r3, [pc, #200]	; (8016910 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8016848:	681b      	ldr	r3, [r3, #0]
 801684a:	69ba      	ldr	r2, [r7, #24]
 801684c:	429a      	cmp	r2, r3
 801684e:	d10c      	bne.n	801686a <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8016850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016854:	b672      	cpsid	i
 8016856:	f383 8811 	msr	BASEPRI, r3
 801685a:	f3bf 8f6f 	isb	sy
 801685e:	f3bf 8f4f 	dsb	sy
 8016862:	b662      	cpsie	i
 8016864:	60bb      	str	r3, [r7, #8]
}
 8016866:	bf00      	nop
 8016868:	e7fe      	b.n	8016868 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801686a:	69bb      	ldr	r3, [r7, #24]
 801686c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801686e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8016870:	69bb      	ldr	r3, [r7, #24]
 8016872:	69fa      	ldr	r2, [r7, #28]
 8016874:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016876:	69bb      	ldr	r3, [r7, #24]
 8016878:	699b      	ldr	r3, [r3, #24]
 801687a:	2b00      	cmp	r3, #0
 801687c:	db04      	blt.n	8016888 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801687e:	69fb      	ldr	r3, [r7, #28]
 8016880:	f1c3 0207 	rsb	r2, r3, #7
 8016884:	69bb      	ldr	r3, [r7, #24]
 8016886:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8016888:	69bb      	ldr	r3, [r7, #24]
 801688a:	6959      	ldr	r1, [r3, #20]
 801688c:	693a      	ldr	r2, [r7, #16]
 801688e:	4613      	mov	r3, r2
 8016890:	009b      	lsls	r3, r3, #2
 8016892:	4413      	add	r3, r2
 8016894:	009b      	lsls	r3, r3, #2
 8016896:	4a1f      	ldr	r2, [pc, #124]	; (8016914 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8016898:	4413      	add	r3, r2
 801689a:	4299      	cmp	r1, r3
 801689c:	d134      	bne.n	8016908 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801689e:	69bb      	ldr	r3, [r7, #24]
 80168a0:	3304      	adds	r3, #4
 80168a2:	4618      	mov	r0, r3
 80168a4:	f7fe f947 	bl	8014b36 <uxListRemove>
 80168a8:	4603      	mov	r3, r0
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	d115      	bne.n	80168da <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80168ae:	69bb      	ldr	r3, [r7, #24]
 80168b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80168b2:	4918      	ldr	r1, [pc, #96]	; (8016914 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80168b4:	4613      	mov	r3, r2
 80168b6:	009b      	lsls	r3, r3, #2
 80168b8:	4413      	add	r3, r2
 80168ba:	009b      	lsls	r3, r3, #2
 80168bc:	440b      	add	r3, r1
 80168be:	681b      	ldr	r3, [r3, #0]
 80168c0:	2b00      	cmp	r3, #0
 80168c2:	d10a      	bne.n	80168da <vTaskPriorityDisinheritAfterTimeout+0xfa>
 80168c4:	69bb      	ldr	r3, [r7, #24]
 80168c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80168c8:	2201      	movs	r2, #1
 80168ca:	fa02 f303 	lsl.w	r3, r2, r3
 80168ce:	43da      	mvns	r2, r3
 80168d0:	4b11      	ldr	r3, [pc, #68]	; (8016918 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80168d2:	681b      	ldr	r3, [r3, #0]
 80168d4:	4013      	ands	r3, r2
 80168d6:	4a10      	ldr	r2, [pc, #64]	; (8016918 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80168d8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80168da:	69bb      	ldr	r3, [r7, #24]
 80168dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80168de:	2201      	movs	r2, #1
 80168e0:	409a      	lsls	r2, r3
 80168e2:	4b0d      	ldr	r3, [pc, #52]	; (8016918 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80168e4:	681b      	ldr	r3, [r3, #0]
 80168e6:	4313      	orrs	r3, r2
 80168e8:	4a0b      	ldr	r2, [pc, #44]	; (8016918 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80168ea:	6013      	str	r3, [r2, #0]
 80168ec:	69bb      	ldr	r3, [r7, #24]
 80168ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80168f0:	4613      	mov	r3, r2
 80168f2:	009b      	lsls	r3, r3, #2
 80168f4:	4413      	add	r3, r2
 80168f6:	009b      	lsls	r3, r3, #2
 80168f8:	4a06      	ldr	r2, [pc, #24]	; (8016914 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80168fa:	441a      	add	r2, r3
 80168fc:	69bb      	ldr	r3, [r7, #24]
 80168fe:	3304      	adds	r3, #4
 8016900:	4619      	mov	r1, r3
 8016902:	4610      	mov	r0, r2
 8016904:	f7fe f8ba 	bl	8014a7c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016908:	bf00      	nop
 801690a:	3720      	adds	r7, #32
 801690c:	46bd      	mov	sp, r7
 801690e:	bd80      	pop	{r7, pc}
 8016910:	200004a4 	.word	0x200004a4
 8016914:	200004a8 	.word	0x200004a8
 8016918:	200005ac 	.word	0x200005ac

0801691c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801691c:	b480      	push	{r7}
 801691e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8016920:	4b07      	ldr	r3, [pc, #28]	; (8016940 <pvTaskIncrementMutexHeldCount+0x24>)
 8016922:	681b      	ldr	r3, [r3, #0]
 8016924:	2b00      	cmp	r3, #0
 8016926:	d004      	beq.n	8016932 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8016928:	4b05      	ldr	r3, [pc, #20]	; (8016940 <pvTaskIncrementMutexHeldCount+0x24>)
 801692a:	681b      	ldr	r3, [r3, #0]
 801692c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801692e:	3201      	adds	r2, #1
 8016930:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8016932:	4b03      	ldr	r3, [pc, #12]	; (8016940 <pvTaskIncrementMutexHeldCount+0x24>)
 8016934:	681b      	ldr	r3, [r3, #0]
	}
 8016936:	4618      	mov	r0, r3
 8016938:	46bd      	mov	sp, r7
 801693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801693e:	4770      	bx	lr
 8016940:	200004a4 	.word	0x200004a4

08016944 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8016944:	b580      	push	{r7, lr}
 8016946:	b084      	sub	sp, #16
 8016948:	af00      	add	r7, sp, #0
 801694a:	6078      	str	r0, [r7, #4]
 801694c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801694e:	4b29      	ldr	r3, [pc, #164]	; (80169f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8016950:	681b      	ldr	r3, [r3, #0]
 8016952:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016954:	4b28      	ldr	r3, [pc, #160]	; (80169f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016956:	681b      	ldr	r3, [r3, #0]
 8016958:	3304      	adds	r3, #4
 801695a:	4618      	mov	r0, r3
 801695c:	f7fe f8eb 	bl	8014b36 <uxListRemove>
 8016960:	4603      	mov	r3, r0
 8016962:	2b00      	cmp	r3, #0
 8016964:	d10b      	bne.n	801697e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8016966:	4b24      	ldr	r3, [pc, #144]	; (80169f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016968:	681b      	ldr	r3, [r3, #0]
 801696a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801696c:	2201      	movs	r2, #1
 801696e:	fa02 f303 	lsl.w	r3, r2, r3
 8016972:	43da      	mvns	r2, r3
 8016974:	4b21      	ldr	r3, [pc, #132]	; (80169fc <prvAddCurrentTaskToDelayedList+0xb8>)
 8016976:	681b      	ldr	r3, [r3, #0]
 8016978:	4013      	ands	r3, r2
 801697a:	4a20      	ldr	r2, [pc, #128]	; (80169fc <prvAddCurrentTaskToDelayedList+0xb8>)
 801697c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016984:	d10a      	bne.n	801699c <prvAddCurrentTaskToDelayedList+0x58>
 8016986:	683b      	ldr	r3, [r7, #0]
 8016988:	2b00      	cmp	r3, #0
 801698a:	d007      	beq.n	801699c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801698c:	4b1a      	ldr	r3, [pc, #104]	; (80169f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801698e:	681b      	ldr	r3, [r3, #0]
 8016990:	3304      	adds	r3, #4
 8016992:	4619      	mov	r1, r3
 8016994:	481a      	ldr	r0, [pc, #104]	; (8016a00 <prvAddCurrentTaskToDelayedList+0xbc>)
 8016996:	f7fe f871 	bl	8014a7c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801699a:	e026      	b.n	80169ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801699c:	68fa      	ldr	r2, [r7, #12]
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	4413      	add	r3, r2
 80169a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80169a4:	4b14      	ldr	r3, [pc, #80]	; (80169f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80169a6:	681b      	ldr	r3, [r3, #0]
 80169a8:	68ba      	ldr	r2, [r7, #8]
 80169aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80169ac:	68ba      	ldr	r2, [r7, #8]
 80169ae:	68fb      	ldr	r3, [r7, #12]
 80169b0:	429a      	cmp	r2, r3
 80169b2:	d209      	bcs.n	80169c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80169b4:	4b13      	ldr	r3, [pc, #76]	; (8016a04 <prvAddCurrentTaskToDelayedList+0xc0>)
 80169b6:	681a      	ldr	r2, [r3, #0]
 80169b8:	4b0f      	ldr	r3, [pc, #60]	; (80169f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80169ba:	681b      	ldr	r3, [r3, #0]
 80169bc:	3304      	adds	r3, #4
 80169be:	4619      	mov	r1, r3
 80169c0:	4610      	mov	r0, r2
 80169c2:	f7fe f87f 	bl	8014ac4 <vListInsert>
}
 80169c6:	e010      	b.n	80169ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80169c8:	4b0f      	ldr	r3, [pc, #60]	; (8016a08 <prvAddCurrentTaskToDelayedList+0xc4>)
 80169ca:	681a      	ldr	r2, [r3, #0]
 80169cc:	4b0a      	ldr	r3, [pc, #40]	; (80169f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80169ce:	681b      	ldr	r3, [r3, #0]
 80169d0:	3304      	adds	r3, #4
 80169d2:	4619      	mov	r1, r3
 80169d4:	4610      	mov	r0, r2
 80169d6:	f7fe f875 	bl	8014ac4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80169da:	4b0c      	ldr	r3, [pc, #48]	; (8016a0c <prvAddCurrentTaskToDelayedList+0xc8>)
 80169dc:	681b      	ldr	r3, [r3, #0]
 80169de:	68ba      	ldr	r2, [r7, #8]
 80169e0:	429a      	cmp	r2, r3
 80169e2:	d202      	bcs.n	80169ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80169e4:	4a09      	ldr	r2, [pc, #36]	; (8016a0c <prvAddCurrentTaskToDelayedList+0xc8>)
 80169e6:	68bb      	ldr	r3, [r7, #8]
 80169e8:	6013      	str	r3, [r2, #0]
}
 80169ea:	bf00      	nop
 80169ec:	3710      	adds	r7, #16
 80169ee:	46bd      	mov	sp, r7
 80169f0:	bd80      	pop	{r7, pc}
 80169f2:	bf00      	nop
 80169f4:	200005a8 	.word	0x200005a8
 80169f8:	200004a4 	.word	0x200004a4
 80169fc:	200005ac 	.word	0x200005ac
 8016a00:	20000590 	.word	0x20000590
 8016a04:	20000560 	.word	0x20000560
 8016a08:	2000055c 	.word	0x2000055c
 8016a0c:	200005c4 	.word	0x200005c4

08016a10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016a10:	b480      	push	{r7}
 8016a12:	b085      	sub	sp, #20
 8016a14:	af00      	add	r7, sp, #0
 8016a16:	60f8      	str	r0, [r7, #12]
 8016a18:	60b9      	str	r1, [r7, #8]
 8016a1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8016a1c:	68fb      	ldr	r3, [r7, #12]
 8016a1e:	3b04      	subs	r3, #4
 8016a20:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8016a22:	68fb      	ldr	r3, [r7, #12]
 8016a24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8016a28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016a2a:	68fb      	ldr	r3, [r7, #12]
 8016a2c:	3b04      	subs	r3, #4
 8016a2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016a30:	68bb      	ldr	r3, [r7, #8]
 8016a32:	f023 0201 	bic.w	r2, r3, #1
 8016a36:	68fb      	ldr	r3, [r7, #12]
 8016a38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016a3a:	68fb      	ldr	r3, [r7, #12]
 8016a3c:	3b04      	subs	r3, #4
 8016a3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016a40:	4a0c      	ldr	r2, [pc, #48]	; (8016a74 <pxPortInitialiseStack+0x64>)
 8016a42:	68fb      	ldr	r3, [r7, #12]
 8016a44:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8016a46:	68fb      	ldr	r3, [r7, #12]
 8016a48:	3b14      	subs	r3, #20
 8016a4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016a4c:	687a      	ldr	r2, [r7, #4]
 8016a4e:	68fb      	ldr	r3, [r7, #12]
 8016a50:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8016a52:	68fb      	ldr	r3, [r7, #12]
 8016a54:	3b04      	subs	r3, #4
 8016a56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8016a58:	68fb      	ldr	r3, [r7, #12]
 8016a5a:	f06f 0202 	mvn.w	r2, #2
 8016a5e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8016a60:	68fb      	ldr	r3, [r7, #12]
 8016a62:	3b20      	subs	r3, #32
 8016a64:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8016a66:	68fb      	ldr	r3, [r7, #12]
}
 8016a68:	4618      	mov	r0, r3
 8016a6a:	3714      	adds	r7, #20
 8016a6c:	46bd      	mov	sp, r7
 8016a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a72:	4770      	bx	lr
 8016a74:	08016a79 	.word	0x08016a79

08016a78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8016a78:	b480      	push	{r7}
 8016a7a:	b085      	sub	sp, #20
 8016a7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8016a7e:	2300      	movs	r3, #0
 8016a80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8016a82:	4b14      	ldr	r3, [pc, #80]	; (8016ad4 <prvTaskExitError+0x5c>)
 8016a84:	681b      	ldr	r3, [r3, #0]
 8016a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a8a:	d00c      	beq.n	8016aa6 <prvTaskExitError+0x2e>
	__asm volatile
 8016a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a90:	b672      	cpsid	i
 8016a92:	f383 8811 	msr	BASEPRI, r3
 8016a96:	f3bf 8f6f 	isb	sy
 8016a9a:	f3bf 8f4f 	dsb	sy
 8016a9e:	b662      	cpsie	i
 8016aa0:	60fb      	str	r3, [r7, #12]
}
 8016aa2:	bf00      	nop
 8016aa4:	e7fe      	b.n	8016aa4 <prvTaskExitError+0x2c>
	__asm volatile
 8016aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016aaa:	b672      	cpsid	i
 8016aac:	f383 8811 	msr	BASEPRI, r3
 8016ab0:	f3bf 8f6f 	isb	sy
 8016ab4:	f3bf 8f4f 	dsb	sy
 8016ab8:	b662      	cpsie	i
 8016aba:	60bb      	str	r3, [r7, #8]
}
 8016abc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8016abe:	bf00      	nop
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d0fc      	beq.n	8016ac0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8016ac6:	bf00      	nop
 8016ac8:	bf00      	nop
 8016aca:	3714      	adds	r7, #20
 8016acc:	46bd      	mov	sp, r7
 8016ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ad2:	4770      	bx	lr
 8016ad4:	20000024 	.word	0x20000024
	...

08016ae0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016ae0:	4b07      	ldr	r3, [pc, #28]	; (8016b00 <pxCurrentTCBConst2>)
 8016ae2:	6819      	ldr	r1, [r3, #0]
 8016ae4:	6808      	ldr	r0, [r1, #0]
 8016ae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016aea:	f380 8809 	msr	PSP, r0
 8016aee:	f3bf 8f6f 	isb	sy
 8016af2:	f04f 0000 	mov.w	r0, #0
 8016af6:	f380 8811 	msr	BASEPRI, r0
 8016afa:	4770      	bx	lr
 8016afc:	f3af 8000 	nop.w

08016b00 <pxCurrentTCBConst2>:
 8016b00:	200004a4 	.word	0x200004a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016b04:	bf00      	nop
 8016b06:	bf00      	nop

08016b08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016b08:	4808      	ldr	r0, [pc, #32]	; (8016b2c <prvPortStartFirstTask+0x24>)
 8016b0a:	6800      	ldr	r0, [r0, #0]
 8016b0c:	6800      	ldr	r0, [r0, #0]
 8016b0e:	f380 8808 	msr	MSP, r0
 8016b12:	f04f 0000 	mov.w	r0, #0
 8016b16:	f380 8814 	msr	CONTROL, r0
 8016b1a:	b662      	cpsie	i
 8016b1c:	b661      	cpsie	f
 8016b1e:	f3bf 8f4f 	dsb	sy
 8016b22:	f3bf 8f6f 	isb	sy
 8016b26:	df00      	svc	0
 8016b28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8016b2a:	bf00      	nop
 8016b2c:	e000ed08 	.word	0xe000ed08

08016b30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016b30:	b580      	push	{r7, lr}
 8016b32:	b084      	sub	sp, #16
 8016b34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016b36:	4b37      	ldr	r3, [pc, #220]	; (8016c14 <xPortStartScheduler+0xe4>)
 8016b38:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8016b3a:	68fb      	ldr	r3, [r7, #12]
 8016b3c:	781b      	ldrb	r3, [r3, #0]
 8016b3e:	b2db      	uxtb	r3, r3
 8016b40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016b42:	68fb      	ldr	r3, [r7, #12]
 8016b44:	22ff      	movs	r2, #255	; 0xff
 8016b46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8016b48:	68fb      	ldr	r3, [r7, #12]
 8016b4a:	781b      	ldrb	r3, [r3, #0]
 8016b4c:	b2db      	uxtb	r3, r3
 8016b4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016b50:	78fb      	ldrb	r3, [r7, #3]
 8016b52:	b2db      	uxtb	r3, r3
 8016b54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8016b58:	b2da      	uxtb	r2, r3
 8016b5a:	4b2f      	ldr	r3, [pc, #188]	; (8016c18 <xPortStartScheduler+0xe8>)
 8016b5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8016b5e:	4b2f      	ldr	r3, [pc, #188]	; (8016c1c <xPortStartScheduler+0xec>)
 8016b60:	2207      	movs	r2, #7
 8016b62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016b64:	e009      	b.n	8016b7a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8016b66:	4b2d      	ldr	r3, [pc, #180]	; (8016c1c <xPortStartScheduler+0xec>)
 8016b68:	681b      	ldr	r3, [r3, #0]
 8016b6a:	3b01      	subs	r3, #1
 8016b6c:	4a2b      	ldr	r2, [pc, #172]	; (8016c1c <xPortStartScheduler+0xec>)
 8016b6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8016b70:	78fb      	ldrb	r3, [r7, #3]
 8016b72:	b2db      	uxtb	r3, r3
 8016b74:	005b      	lsls	r3, r3, #1
 8016b76:	b2db      	uxtb	r3, r3
 8016b78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016b7a:	78fb      	ldrb	r3, [r7, #3]
 8016b7c:	b2db      	uxtb	r3, r3
 8016b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016b82:	2b80      	cmp	r3, #128	; 0x80
 8016b84:	d0ef      	beq.n	8016b66 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8016b86:	4b25      	ldr	r3, [pc, #148]	; (8016c1c <xPortStartScheduler+0xec>)
 8016b88:	681b      	ldr	r3, [r3, #0]
 8016b8a:	f1c3 0307 	rsb	r3, r3, #7
 8016b8e:	2b04      	cmp	r3, #4
 8016b90:	d00c      	beq.n	8016bac <xPortStartScheduler+0x7c>
	__asm volatile
 8016b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b96:	b672      	cpsid	i
 8016b98:	f383 8811 	msr	BASEPRI, r3
 8016b9c:	f3bf 8f6f 	isb	sy
 8016ba0:	f3bf 8f4f 	dsb	sy
 8016ba4:	b662      	cpsie	i
 8016ba6:	60bb      	str	r3, [r7, #8]
}
 8016ba8:	bf00      	nop
 8016baa:	e7fe      	b.n	8016baa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8016bac:	4b1b      	ldr	r3, [pc, #108]	; (8016c1c <xPortStartScheduler+0xec>)
 8016bae:	681b      	ldr	r3, [r3, #0]
 8016bb0:	021b      	lsls	r3, r3, #8
 8016bb2:	4a1a      	ldr	r2, [pc, #104]	; (8016c1c <xPortStartScheduler+0xec>)
 8016bb4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016bb6:	4b19      	ldr	r3, [pc, #100]	; (8016c1c <xPortStartScheduler+0xec>)
 8016bb8:	681b      	ldr	r3, [r3, #0]
 8016bba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8016bbe:	4a17      	ldr	r2, [pc, #92]	; (8016c1c <xPortStartScheduler+0xec>)
 8016bc0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	b2da      	uxtb	r2, r3
 8016bc6:	68fb      	ldr	r3, [r7, #12]
 8016bc8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016bca:	4b15      	ldr	r3, [pc, #84]	; (8016c20 <xPortStartScheduler+0xf0>)
 8016bcc:	681b      	ldr	r3, [r3, #0]
 8016bce:	4a14      	ldr	r2, [pc, #80]	; (8016c20 <xPortStartScheduler+0xf0>)
 8016bd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016bd4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016bd6:	4b12      	ldr	r3, [pc, #72]	; (8016c20 <xPortStartScheduler+0xf0>)
 8016bd8:	681b      	ldr	r3, [r3, #0]
 8016bda:	4a11      	ldr	r2, [pc, #68]	; (8016c20 <xPortStartScheduler+0xf0>)
 8016bdc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8016be0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8016be2:	f000 f8dd 	bl	8016da0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016be6:	4b0f      	ldr	r3, [pc, #60]	; (8016c24 <xPortStartScheduler+0xf4>)
 8016be8:	2200      	movs	r2, #0
 8016bea:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8016bec:	f000 f8fc 	bl	8016de8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8016bf0:	4b0d      	ldr	r3, [pc, #52]	; (8016c28 <xPortStartScheduler+0xf8>)
 8016bf2:	681b      	ldr	r3, [r3, #0]
 8016bf4:	4a0c      	ldr	r2, [pc, #48]	; (8016c28 <xPortStartScheduler+0xf8>)
 8016bf6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016bfa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016bfc:	f7ff ff84 	bl	8016b08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8016c00:	f7ff fa7e 	bl	8016100 <vTaskSwitchContext>
	prvTaskExitError();
 8016c04:	f7ff ff38 	bl	8016a78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016c08:	2300      	movs	r3, #0
}
 8016c0a:	4618      	mov	r0, r3
 8016c0c:	3710      	adds	r7, #16
 8016c0e:	46bd      	mov	sp, r7
 8016c10:	bd80      	pop	{r7, pc}
 8016c12:	bf00      	nop
 8016c14:	e000e400 	.word	0xe000e400
 8016c18:	200005d0 	.word	0x200005d0
 8016c1c:	200005d4 	.word	0x200005d4
 8016c20:	e000ed20 	.word	0xe000ed20
 8016c24:	20000024 	.word	0x20000024
 8016c28:	e000ef34 	.word	0xe000ef34

08016c2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016c2c:	b480      	push	{r7}
 8016c2e:	b083      	sub	sp, #12
 8016c30:	af00      	add	r7, sp, #0
	__asm volatile
 8016c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c36:	b672      	cpsid	i
 8016c38:	f383 8811 	msr	BASEPRI, r3
 8016c3c:	f3bf 8f6f 	isb	sy
 8016c40:	f3bf 8f4f 	dsb	sy
 8016c44:	b662      	cpsie	i
 8016c46:	607b      	str	r3, [r7, #4]
}
 8016c48:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8016c4a:	4b10      	ldr	r3, [pc, #64]	; (8016c8c <vPortEnterCritical+0x60>)
 8016c4c:	681b      	ldr	r3, [r3, #0]
 8016c4e:	3301      	adds	r3, #1
 8016c50:	4a0e      	ldr	r2, [pc, #56]	; (8016c8c <vPortEnterCritical+0x60>)
 8016c52:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8016c54:	4b0d      	ldr	r3, [pc, #52]	; (8016c8c <vPortEnterCritical+0x60>)
 8016c56:	681b      	ldr	r3, [r3, #0]
 8016c58:	2b01      	cmp	r3, #1
 8016c5a:	d111      	bne.n	8016c80 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016c5c:	4b0c      	ldr	r3, [pc, #48]	; (8016c90 <vPortEnterCritical+0x64>)
 8016c5e:	681b      	ldr	r3, [r3, #0]
 8016c60:	b2db      	uxtb	r3, r3
 8016c62:	2b00      	cmp	r3, #0
 8016c64:	d00c      	beq.n	8016c80 <vPortEnterCritical+0x54>
	__asm volatile
 8016c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c6a:	b672      	cpsid	i
 8016c6c:	f383 8811 	msr	BASEPRI, r3
 8016c70:	f3bf 8f6f 	isb	sy
 8016c74:	f3bf 8f4f 	dsb	sy
 8016c78:	b662      	cpsie	i
 8016c7a:	603b      	str	r3, [r7, #0]
}
 8016c7c:	bf00      	nop
 8016c7e:	e7fe      	b.n	8016c7e <vPortEnterCritical+0x52>
	}
}
 8016c80:	bf00      	nop
 8016c82:	370c      	adds	r7, #12
 8016c84:	46bd      	mov	sp, r7
 8016c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c8a:	4770      	bx	lr
 8016c8c:	20000024 	.word	0x20000024
 8016c90:	e000ed04 	.word	0xe000ed04

08016c94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8016c94:	b480      	push	{r7}
 8016c96:	b083      	sub	sp, #12
 8016c98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8016c9a:	4b13      	ldr	r3, [pc, #76]	; (8016ce8 <vPortExitCritical+0x54>)
 8016c9c:	681b      	ldr	r3, [r3, #0]
 8016c9e:	2b00      	cmp	r3, #0
 8016ca0:	d10c      	bne.n	8016cbc <vPortExitCritical+0x28>
	__asm volatile
 8016ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ca6:	b672      	cpsid	i
 8016ca8:	f383 8811 	msr	BASEPRI, r3
 8016cac:	f3bf 8f6f 	isb	sy
 8016cb0:	f3bf 8f4f 	dsb	sy
 8016cb4:	b662      	cpsie	i
 8016cb6:	607b      	str	r3, [r7, #4]
}
 8016cb8:	bf00      	nop
 8016cba:	e7fe      	b.n	8016cba <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8016cbc:	4b0a      	ldr	r3, [pc, #40]	; (8016ce8 <vPortExitCritical+0x54>)
 8016cbe:	681b      	ldr	r3, [r3, #0]
 8016cc0:	3b01      	subs	r3, #1
 8016cc2:	4a09      	ldr	r2, [pc, #36]	; (8016ce8 <vPortExitCritical+0x54>)
 8016cc4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016cc6:	4b08      	ldr	r3, [pc, #32]	; (8016ce8 <vPortExitCritical+0x54>)
 8016cc8:	681b      	ldr	r3, [r3, #0]
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	d105      	bne.n	8016cda <vPortExitCritical+0x46>
 8016cce:	2300      	movs	r3, #0
 8016cd0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016cd2:	683b      	ldr	r3, [r7, #0]
 8016cd4:	f383 8811 	msr	BASEPRI, r3
}
 8016cd8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8016cda:	bf00      	nop
 8016cdc:	370c      	adds	r7, #12
 8016cde:	46bd      	mov	sp, r7
 8016ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ce4:	4770      	bx	lr
 8016ce6:	bf00      	nop
 8016ce8:	20000024 	.word	0x20000024
 8016cec:	00000000 	.word	0x00000000

08016cf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016cf0:	f3ef 8009 	mrs	r0, PSP
 8016cf4:	f3bf 8f6f 	isb	sy
 8016cf8:	4b15      	ldr	r3, [pc, #84]	; (8016d50 <pxCurrentTCBConst>)
 8016cfa:	681a      	ldr	r2, [r3, #0]
 8016cfc:	f01e 0f10 	tst.w	lr, #16
 8016d00:	bf08      	it	eq
 8016d02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016d06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d0a:	6010      	str	r0, [r2, #0]
 8016d0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016d10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016d14:	b672      	cpsid	i
 8016d16:	f380 8811 	msr	BASEPRI, r0
 8016d1a:	f3bf 8f4f 	dsb	sy
 8016d1e:	f3bf 8f6f 	isb	sy
 8016d22:	b662      	cpsie	i
 8016d24:	f7ff f9ec 	bl	8016100 <vTaskSwitchContext>
 8016d28:	f04f 0000 	mov.w	r0, #0
 8016d2c:	f380 8811 	msr	BASEPRI, r0
 8016d30:	bc09      	pop	{r0, r3}
 8016d32:	6819      	ldr	r1, [r3, #0]
 8016d34:	6808      	ldr	r0, [r1, #0]
 8016d36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d3a:	f01e 0f10 	tst.w	lr, #16
 8016d3e:	bf08      	it	eq
 8016d40:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016d44:	f380 8809 	msr	PSP, r0
 8016d48:	f3bf 8f6f 	isb	sy
 8016d4c:	4770      	bx	lr
 8016d4e:	bf00      	nop

08016d50 <pxCurrentTCBConst>:
 8016d50:	200004a4 	.word	0x200004a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016d54:	bf00      	nop
 8016d56:	bf00      	nop

08016d58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016d58:	b580      	push	{r7, lr}
 8016d5a:	b082      	sub	sp, #8
 8016d5c:	af00      	add	r7, sp, #0
	__asm volatile
 8016d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d62:	b672      	cpsid	i
 8016d64:	f383 8811 	msr	BASEPRI, r3
 8016d68:	f3bf 8f6f 	isb	sy
 8016d6c:	f3bf 8f4f 	dsb	sy
 8016d70:	b662      	cpsie	i
 8016d72:	607b      	str	r3, [r7, #4]
}
 8016d74:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016d76:	f7ff f909 	bl	8015f8c <xTaskIncrementTick>
 8016d7a:	4603      	mov	r3, r0
 8016d7c:	2b00      	cmp	r3, #0
 8016d7e:	d003      	beq.n	8016d88 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8016d80:	4b06      	ldr	r3, [pc, #24]	; (8016d9c <xPortSysTickHandler+0x44>)
 8016d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016d86:	601a      	str	r2, [r3, #0]
 8016d88:	2300      	movs	r3, #0
 8016d8a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016d8c:	683b      	ldr	r3, [r7, #0]
 8016d8e:	f383 8811 	msr	BASEPRI, r3
}
 8016d92:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8016d94:	bf00      	nop
 8016d96:	3708      	adds	r7, #8
 8016d98:	46bd      	mov	sp, r7
 8016d9a:	bd80      	pop	{r7, pc}
 8016d9c:	e000ed04 	.word	0xe000ed04

08016da0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8016da0:	b480      	push	{r7}
 8016da2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016da4:	4b0b      	ldr	r3, [pc, #44]	; (8016dd4 <vPortSetupTimerInterrupt+0x34>)
 8016da6:	2200      	movs	r2, #0
 8016da8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016daa:	4b0b      	ldr	r3, [pc, #44]	; (8016dd8 <vPortSetupTimerInterrupt+0x38>)
 8016dac:	2200      	movs	r2, #0
 8016dae:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8016db0:	4b0a      	ldr	r3, [pc, #40]	; (8016ddc <vPortSetupTimerInterrupt+0x3c>)
 8016db2:	681b      	ldr	r3, [r3, #0]
 8016db4:	4a0a      	ldr	r2, [pc, #40]	; (8016de0 <vPortSetupTimerInterrupt+0x40>)
 8016db6:	fba2 2303 	umull	r2, r3, r2, r3
 8016dba:	099b      	lsrs	r3, r3, #6
 8016dbc:	4a09      	ldr	r2, [pc, #36]	; (8016de4 <vPortSetupTimerInterrupt+0x44>)
 8016dbe:	3b01      	subs	r3, #1
 8016dc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8016dc2:	4b04      	ldr	r3, [pc, #16]	; (8016dd4 <vPortSetupTimerInterrupt+0x34>)
 8016dc4:	2207      	movs	r2, #7
 8016dc6:	601a      	str	r2, [r3, #0]
}
 8016dc8:	bf00      	nop
 8016dca:	46bd      	mov	sp, r7
 8016dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dd0:	4770      	bx	lr
 8016dd2:	bf00      	nop
 8016dd4:	e000e010 	.word	0xe000e010
 8016dd8:	e000e018 	.word	0xe000e018
 8016ddc:	20000018 	.word	0x20000018
 8016de0:	10624dd3 	.word	0x10624dd3
 8016de4:	e000e014 	.word	0xe000e014

08016de8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016de8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016df8 <vPortEnableVFP+0x10>
 8016dec:	6801      	ldr	r1, [r0, #0]
 8016dee:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8016df2:	6001      	str	r1, [r0, #0]
 8016df4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016df6:	bf00      	nop
 8016df8:	e000ed88 	.word	0xe000ed88

08016dfc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016dfc:	b480      	push	{r7}
 8016dfe:	b085      	sub	sp, #20
 8016e00:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8016e02:	f3ef 8305 	mrs	r3, IPSR
 8016e06:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016e08:	68fb      	ldr	r3, [r7, #12]
 8016e0a:	2b0f      	cmp	r3, #15
 8016e0c:	d916      	bls.n	8016e3c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8016e0e:	4a19      	ldr	r2, [pc, #100]	; (8016e74 <vPortValidateInterruptPriority+0x78>)
 8016e10:	68fb      	ldr	r3, [r7, #12]
 8016e12:	4413      	add	r3, r2
 8016e14:	781b      	ldrb	r3, [r3, #0]
 8016e16:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016e18:	4b17      	ldr	r3, [pc, #92]	; (8016e78 <vPortValidateInterruptPriority+0x7c>)
 8016e1a:	781b      	ldrb	r3, [r3, #0]
 8016e1c:	7afa      	ldrb	r2, [r7, #11]
 8016e1e:	429a      	cmp	r2, r3
 8016e20:	d20c      	bcs.n	8016e3c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8016e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e26:	b672      	cpsid	i
 8016e28:	f383 8811 	msr	BASEPRI, r3
 8016e2c:	f3bf 8f6f 	isb	sy
 8016e30:	f3bf 8f4f 	dsb	sy
 8016e34:	b662      	cpsie	i
 8016e36:	607b      	str	r3, [r7, #4]
}
 8016e38:	bf00      	nop
 8016e3a:	e7fe      	b.n	8016e3a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016e3c:	4b0f      	ldr	r3, [pc, #60]	; (8016e7c <vPortValidateInterruptPriority+0x80>)
 8016e3e:	681b      	ldr	r3, [r3, #0]
 8016e40:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8016e44:	4b0e      	ldr	r3, [pc, #56]	; (8016e80 <vPortValidateInterruptPriority+0x84>)
 8016e46:	681b      	ldr	r3, [r3, #0]
 8016e48:	429a      	cmp	r2, r3
 8016e4a:	d90c      	bls.n	8016e66 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8016e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e50:	b672      	cpsid	i
 8016e52:	f383 8811 	msr	BASEPRI, r3
 8016e56:	f3bf 8f6f 	isb	sy
 8016e5a:	f3bf 8f4f 	dsb	sy
 8016e5e:	b662      	cpsie	i
 8016e60:	603b      	str	r3, [r7, #0]
}
 8016e62:	bf00      	nop
 8016e64:	e7fe      	b.n	8016e64 <vPortValidateInterruptPriority+0x68>
	}
 8016e66:	bf00      	nop
 8016e68:	3714      	adds	r7, #20
 8016e6a:	46bd      	mov	sp, r7
 8016e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e70:	4770      	bx	lr
 8016e72:	bf00      	nop
 8016e74:	e000e3f0 	.word	0xe000e3f0
 8016e78:	200005d0 	.word	0x200005d0
 8016e7c:	e000ed0c 	.word	0xe000ed0c
 8016e80:	200005d4 	.word	0x200005d4

08016e84 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8016e84:	b580      	push	{r7, lr}
 8016e86:	b08a      	sub	sp, #40	; 0x28
 8016e88:	af00      	add	r7, sp, #0
 8016e8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016e8c:	2300      	movs	r3, #0
 8016e8e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016e90:	f7fe ffd0 	bl	8015e34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016e94:	4b5b      	ldr	r3, [pc, #364]	; (8017004 <pvPortMalloc+0x180>)
 8016e96:	681b      	ldr	r3, [r3, #0]
 8016e98:	2b00      	cmp	r3, #0
 8016e9a:	d101      	bne.n	8016ea0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016e9c:	f000 f91a 	bl	80170d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016ea0:	4b59      	ldr	r3, [pc, #356]	; (8017008 <pvPortMalloc+0x184>)
 8016ea2:	681a      	ldr	r2, [r3, #0]
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	4013      	ands	r3, r2
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	f040 8092 	bne.w	8016fd2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	d01f      	beq.n	8016ef4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8016eb4:	2208      	movs	r2, #8
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	4413      	add	r3, r2
 8016eba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	f003 0307 	and.w	r3, r3, #7
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	d016      	beq.n	8016ef4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	f023 0307 	bic.w	r3, r3, #7
 8016ecc:	3308      	adds	r3, #8
 8016ece:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	f003 0307 	and.w	r3, r3, #7
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	d00c      	beq.n	8016ef4 <pvPortMalloc+0x70>
	__asm volatile
 8016eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ede:	b672      	cpsid	i
 8016ee0:	f383 8811 	msr	BASEPRI, r3
 8016ee4:	f3bf 8f6f 	isb	sy
 8016ee8:	f3bf 8f4f 	dsb	sy
 8016eec:	b662      	cpsie	i
 8016eee:	617b      	str	r3, [r7, #20]
}
 8016ef0:	bf00      	nop
 8016ef2:	e7fe      	b.n	8016ef2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	2b00      	cmp	r3, #0
 8016ef8:	d06b      	beq.n	8016fd2 <pvPortMalloc+0x14e>
 8016efa:	4b44      	ldr	r3, [pc, #272]	; (801700c <pvPortMalloc+0x188>)
 8016efc:	681b      	ldr	r3, [r3, #0]
 8016efe:	687a      	ldr	r2, [r7, #4]
 8016f00:	429a      	cmp	r2, r3
 8016f02:	d866      	bhi.n	8016fd2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016f04:	4b42      	ldr	r3, [pc, #264]	; (8017010 <pvPortMalloc+0x18c>)
 8016f06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016f08:	4b41      	ldr	r3, [pc, #260]	; (8017010 <pvPortMalloc+0x18c>)
 8016f0a:	681b      	ldr	r3, [r3, #0]
 8016f0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016f0e:	e004      	b.n	8016f1a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8016f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f16:	681b      	ldr	r3, [r3, #0]
 8016f18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f1c:	685b      	ldr	r3, [r3, #4]
 8016f1e:	687a      	ldr	r2, [r7, #4]
 8016f20:	429a      	cmp	r2, r3
 8016f22:	d903      	bls.n	8016f2c <pvPortMalloc+0xa8>
 8016f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f26:	681b      	ldr	r3, [r3, #0]
 8016f28:	2b00      	cmp	r3, #0
 8016f2a:	d1f1      	bne.n	8016f10 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8016f2c:	4b35      	ldr	r3, [pc, #212]	; (8017004 <pvPortMalloc+0x180>)
 8016f2e:	681b      	ldr	r3, [r3, #0]
 8016f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016f32:	429a      	cmp	r2, r3
 8016f34:	d04d      	beq.n	8016fd2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016f36:	6a3b      	ldr	r3, [r7, #32]
 8016f38:	681b      	ldr	r3, [r3, #0]
 8016f3a:	2208      	movs	r2, #8
 8016f3c:	4413      	add	r3, r2
 8016f3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f42:	681a      	ldr	r2, [r3, #0]
 8016f44:	6a3b      	ldr	r3, [r7, #32]
 8016f46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f4a:	685a      	ldr	r2, [r3, #4]
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	1ad2      	subs	r2, r2, r3
 8016f50:	2308      	movs	r3, #8
 8016f52:	005b      	lsls	r3, r3, #1
 8016f54:	429a      	cmp	r2, r3
 8016f56:	d921      	bls.n	8016f9c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	4413      	add	r3, r2
 8016f5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016f60:	69bb      	ldr	r3, [r7, #24]
 8016f62:	f003 0307 	and.w	r3, r3, #7
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	d00c      	beq.n	8016f84 <pvPortMalloc+0x100>
	__asm volatile
 8016f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f6e:	b672      	cpsid	i
 8016f70:	f383 8811 	msr	BASEPRI, r3
 8016f74:	f3bf 8f6f 	isb	sy
 8016f78:	f3bf 8f4f 	dsb	sy
 8016f7c:	b662      	cpsie	i
 8016f7e:	613b      	str	r3, [r7, #16]
}
 8016f80:	bf00      	nop
 8016f82:	e7fe      	b.n	8016f82 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f86:	685a      	ldr	r2, [r3, #4]
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	1ad2      	subs	r2, r2, r3
 8016f8c:	69bb      	ldr	r3, [r7, #24]
 8016f8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8016f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f92:	687a      	ldr	r2, [r7, #4]
 8016f94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016f96:	69b8      	ldr	r0, [r7, #24]
 8016f98:	f000 f900 	bl	801719c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016f9c:	4b1b      	ldr	r3, [pc, #108]	; (801700c <pvPortMalloc+0x188>)
 8016f9e:	681a      	ldr	r2, [r3, #0]
 8016fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fa2:	685b      	ldr	r3, [r3, #4]
 8016fa4:	1ad3      	subs	r3, r2, r3
 8016fa6:	4a19      	ldr	r2, [pc, #100]	; (801700c <pvPortMalloc+0x188>)
 8016fa8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016faa:	4b18      	ldr	r3, [pc, #96]	; (801700c <pvPortMalloc+0x188>)
 8016fac:	681a      	ldr	r2, [r3, #0]
 8016fae:	4b19      	ldr	r3, [pc, #100]	; (8017014 <pvPortMalloc+0x190>)
 8016fb0:	681b      	ldr	r3, [r3, #0]
 8016fb2:	429a      	cmp	r2, r3
 8016fb4:	d203      	bcs.n	8016fbe <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016fb6:	4b15      	ldr	r3, [pc, #84]	; (801700c <pvPortMalloc+0x188>)
 8016fb8:	681b      	ldr	r3, [r3, #0]
 8016fba:	4a16      	ldr	r2, [pc, #88]	; (8017014 <pvPortMalloc+0x190>)
 8016fbc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fc0:	685a      	ldr	r2, [r3, #4]
 8016fc2:	4b11      	ldr	r3, [pc, #68]	; (8017008 <pvPortMalloc+0x184>)
 8016fc4:	681b      	ldr	r3, [r3, #0]
 8016fc6:	431a      	orrs	r2, r3
 8016fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fce:	2200      	movs	r2, #0
 8016fd0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016fd2:	f7fe ff3d 	bl	8015e50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016fd6:	69fb      	ldr	r3, [r7, #28]
 8016fd8:	f003 0307 	and.w	r3, r3, #7
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	d00c      	beq.n	8016ffa <pvPortMalloc+0x176>
	__asm volatile
 8016fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016fe4:	b672      	cpsid	i
 8016fe6:	f383 8811 	msr	BASEPRI, r3
 8016fea:	f3bf 8f6f 	isb	sy
 8016fee:	f3bf 8f4f 	dsb	sy
 8016ff2:	b662      	cpsie	i
 8016ff4:	60fb      	str	r3, [r7, #12]
}
 8016ff6:	bf00      	nop
 8016ff8:	e7fe      	b.n	8016ff8 <pvPortMalloc+0x174>
	return pvReturn;
 8016ffa:	69fb      	ldr	r3, [r7, #28]
}
 8016ffc:	4618      	mov	r0, r3
 8016ffe:	3728      	adds	r7, #40	; 0x28
 8017000:	46bd      	mov	sp, r7
 8017002:	bd80      	pop	{r7, pc}
 8017004:	20055d10 	.word	0x20055d10
 8017008:	20055d1c 	.word	0x20055d1c
 801700c:	20055d14 	.word	0x20055d14
 8017010:	20055d08 	.word	0x20055d08
 8017014:	20055d18 	.word	0x20055d18

08017018 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8017018:	b580      	push	{r7, lr}
 801701a:	b086      	sub	sp, #24
 801701c:	af00      	add	r7, sp, #0
 801701e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	2b00      	cmp	r3, #0
 8017028:	d04c      	beq.n	80170c4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801702a:	2308      	movs	r3, #8
 801702c:	425b      	negs	r3, r3
 801702e:	697a      	ldr	r2, [r7, #20]
 8017030:	4413      	add	r3, r2
 8017032:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8017034:	697b      	ldr	r3, [r7, #20]
 8017036:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8017038:	693b      	ldr	r3, [r7, #16]
 801703a:	685a      	ldr	r2, [r3, #4]
 801703c:	4b23      	ldr	r3, [pc, #140]	; (80170cc <vPortFree+0xb4>)
 801703e:	681b      	ldr	r3, [r3, #0]
 8017040:	4013      	ands	r3, r2
 8017042:	2b00      	cmp	r3, #0
 8017044:	d10c      	bne.n	8017060 <vPortFree+0x48>
	__asm volatile
 8017046:	f04f 0350 	mov.w	r3, #80	; 0x50
 801704a:	b672      	cpsid	i
 801704c:	f383 8811 	msr	BASEPRI, r3
 8017050:	f3bf 8f6f 	isb	sy
 8017054:	f3bf 8f4f 	dsb	sy
 8017058:	b662      	cpsie	i
 801705a:	60fb      	str	r3, [r7, #12]
}
 801705c:	bf00      	nop
 801705e:	e7fe      	b.n	801705e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8017060:	693b      	ldr	r3, [r7, #16]
 8017062:	681b      	ldr	r3, [r3, #0]
 8017064:	2b00      	cmp	r3, #0
 8017066:	d00c      	beq.n	8017082 <vPortFree+0x6a>
	__asm volatile
 8017068:	f04f 0350 	mov.w	r3, #80	; 0x50
 801706c:	b672      	cpsid	i
 801706e:	f383 8811 	msr	BASEPRI, r3
 8017072:	f3bf 8f6f 	isb	sy
 8017076:	f3bf 8f4f 	dsb	sy
 801707a:	b662      	cpsie	i
 801707c:	60bb      	str	r3, [r7, #8]
}
 801707e:	bf00      	nop
 8017080:	e7fe      	b.n	8017080 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8017082:	693b      	ldr	r3, [r7, #16]
 8017084:	685a      	ldr	r2, [r3, #4]
 8017086:	4b11      	ldr	r3, [pc, #68]	; (80170cc <vPortFree+0xb4>)
 8017088:	681b      	ldr	r3, [r3, #0]
 801708a:	4013      	ands	r3, r2
 801708c:	2b00      	cmp	r3, #0
 801708e:	d019      	beq.n	80170c4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8017090:	693b      	ldr	r3, [r7, #16]
 8017092:	681b      	ldr	r3, [r3, #0]
 8017094:	2b00      	cmp	r3, #0
 8017096:	d115      	bne.n	80170c4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8017098:	693b      	ldr	r3, [r7, #16]
 801709a:	685a      	ldr	r2, [r3, #4]
 801709c:	4b0b      	ldr	r3, [pc, #44]	; (80170cc <vPortFree+0xb4>)
 801709e:	681b      	ldr	r3, [r3, #0]
 80170a0:	43db      	mvns	r3, r3
 80170a2:	401a      	ands	r2, r3
 80170a4:	693b      	ldr	r3, [r7, #16]
 80170a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80170a8:	f7fe fec4 	bl	8015e34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80170ac:	693b      	ldr	r3, [r7, #16]
 80170ae:	685a      	ldr	r2, [r3, #4]
 80170b0:	4b07      	ldr	r3, [pc, #28]	; (80170d0 <vPortFree+0xb8>)
 80170b2:	681b      	ldr	r3, [r3, #0]
 80170b4:	4413      	add	r3, r2
 80170b6:	4a06      	ldr	r2, [pc, #24]	; (80170d0 <vPortFree+0xb8>)
 80170b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80170ba:	6938      	ldr	r0, [r7, #16]
 80170bc:	f000 f86e 	bl	801719c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80170c0:	f7fe fec6 	bl	8015e50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80170c4:	bf00      	nop
 80170c6:	3718      	adds	r7, #24
 80170c8:	46bd      	mov	sp, r7
 80170ca:	bd80      	pop	{r7, pc}
 80170cc:	20055d1c 	.word	0x20055d1c
 80170d0:	20055d14 	.word	0x20055d14

080170d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80170d4:	b480      	push	{r7}
 80170d6:	b085      	sub	sp, #20
 80170d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80170da:	4b29      	ldr	r3, [pc, #164]	; (8017180 <prvHeapInit+0xac>)
 80170dc:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80170de:	4b29      	ldr	r3, [pc, #164]	; (8017184 <prvHeapInit+0xb0>)
 80170e0:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80170e2:	68fb      	ldr	r3, [r7, #12]
 80170e4:	f003 0307 	and.w	r3, r3, #7
 80170e8:	2b00      	cmp	r3, #0
 80170ea:	d00c      	beq.n	8017106 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	3307      	adds	r3, #7
 80170f0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80170f2:	68fb      	ldr	r3, [r7, #12]
 80170f4:	f023 0307 	bic.w	r3, r3, #7
 80170f8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80170fa:	68ba      	ldr	r2, [r7, #8]
 80170fc:	68fb      	ldr	r3, [r7, #12]
 80170fe:	1ad3      	subs	r3, r2, r3
 8017100:	4a20      	ldr	r2, [pc, #128]	; (8017184 <prvHeapInit+0xb0>)
 8017102:	4413      	add	r3, r2
 8017104:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8017106:	68fb      	ldr	r3, [r7, #12]
 8017108:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801710a:	4a1f      	ldr	r2, [pc, #124]	; (8017188 <prvHeapInit+0xb4>)
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8017110:	4b1d      	ldr	r3, [pc, #116]	; (8017188 <prvHeapInit+0xb4>)
 8017112:	2200      	movs	r2, #0
 8017114:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	68ba      	ldr	r2, [r7, #8]
 801711a:	4413      	add	r3, r2
 801711c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801711e:	2208      	movs	r2, #8
 8017120:	68fb      	ldr	r3, [r7, #12]
 8017122:	1a9b      	subs	r3, r3, r2
 8017124:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017126:	68fb      	ldr	r3, [r7, #12]
 8017128:	f023 0307 	bic.w	r3, r3, #7
 801712c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801712e:	68fb      	ldr	r3, [r7, #12]
 8017130:	4a16      	ldr	r2, [pc, #88]	; (801718c <prvHeapInit+0xb8>)
 8017132:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8017134:	4b15      	ldr	r3, [pc, #84]	; (801718c <prvHeapInit+0xb8>)
 8017136:	681b      	ldr	r3, [r3, #0]
 8017138:	2200      	movs	r2, #0
 801713a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801713c:	4b13      	ldr	r3, [pc, #76]	; (801718c <prvHeapInit+0xb8>)
 801713e:	681b      	ldr	r3, [r3, #0]
 8017140:	2200      	movs	r2, #0
 8017142:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8017148:	683b      	ldr	r3, [r7, #0]
 801714a:	68fa      	ldr	r2, [r7, #12]
 801714c:	1ad2      	subs	r2, r2, r3
 801714e:	683b      	ldr	r3, [r7, #0]
 8017150:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8017152:	4b0e      	ldr	r3, [pc, #56]	; (801718c <prvHeapInit+0xb8>)
 8017154:	681a      	ldr	r2, [r3, #0]
 8017156:	683b      	ldr	r3, [r7, #0]
 8017158:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801715a:	683b      	ldr	r3, [r7, #0]
 801715c:	685b      	ldr	r3, [r3, #4]
 801715e:	4a0c      	ldr	r2, [pc, #48]	; (8017190 <prvHeapInit+0xbc>)
 8017160:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017162:	683b      	ldr	r3, [r7, #0]
 8017164:	685b      	ldr	r3, [r3, #4]
 8017166:	4a0b      	ldr	r2, [pc, #44]	; (8017194 <prvHeapInit+0xc0>)
 8017168:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801716a:	4b0b      	ldr	r3, [pc, #44]	; (8017198 <prvHeapInit+0xc4>)
 801716c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8017170:	601a      	str	r2, [r3, #0]
}
 8017172:	bf00      	nop
 8017174:	3714      	adds	r7, #20
 8017176:	46bd      	mov	sp, r7
 8017178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801717c:	4770      	bx	lr
 801717e:	bf00      	nop
 8017180:	00055730 	.word	0x00055730
 8017184:	200005d8 	.word	0x200005d8
 8017188:	20055d08 	.word	0x20055d08
 801718c:	20055d10 	.word	0x20055d10
 8017190:	20055d18 	.word	0x20055d18
 8017194:	20055d14 	.word	0x20055d14
 8017198:	20055d1c 	.word	0x20055d1c

0801719c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801719c:	b480      	push	{r7}
 801719e:	b085      	sub	sp, #20
 80171a0:	af00      	add	r7, sp, #0
 80171a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80171a4:	4b28      	ldr	r3, [pc, #160]	; (8017248 <prvInsertBlockIntoFreeList+0xac>)
 80171a6:	60fb      	str	r3, [r7, #12]
 80171a8:	e002      	b.n	80171b0 <prvInsertBlockIntoFreeList+0x14>
 80171aa:	68fb      	ldr	r3, [r7, #12]
 80171ac:	681b      	ldr	r3, [r3, #0]
 80171ae:	60fb      	str	r3, [r7, #12]
 80171b0:	68fb      	ldr	r3, [r7, #12]
 80171b2:	681b      	ldr	r3, [r3, #0]
 80171b4:	687a      	ldr	r2, [r7, #4]
 80171b6:	429a      	cmp	r2, r3
 80171b8:	d8f7      	bhi.n	80171aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80171ba:	68fb      	ldr	r3, [r7, #12]
 80171bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80171be:	68fb      	ldr	r3, [r7, #12]
 80171c0:	685b      	ldr	r3, [r3, #4]
 80171c2:	68ba      	ldr	r2, [r7, #8]
 80171c4:	4413      	add	r3, r2
 80171c6:	687a      	ldr	r2, [r7, #4]
 80171c8:	429a      	cmp	r2, r3
 80171ca:	d108      	bne.n	80171de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80171cc:	68fb      	ldr	r3, [r7, #12]
 80171ce:	685a      	ldr	r2, [r3, #4]
 80171d0:	687b      	ldr	r3, [r7, #4]
 80171d2:	685b      	ldr	r3, [r3, #4]
 80171d4:	441a      	add	r2, r3
 80171d6:	68fb      	ldr	r3, [r7, #12]
 80171d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80171da:	68fb      	ldr	r3, [r7, #12]
 80171dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80171e2:	687b      	ldr	r3, [r7, #4]
 80171e4:	685b      	ldr	r3, [r3, #4]
 80171e6:	68ba      	ldr	r2, [r7, #8]
 80171e8:	441a      	add	r2, r3
 80171ea:	68fb      	ldr	r3, [r7, #12]
 80171ec:	681b      	ldr	r3, [r3, #0]
 80171ee:	429a      	cmp	r2, r3
 80171f0:	d118      	bne.n	8017224 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80171f2:	68fb      	ldr	r3, [r7, #12]
 80171f4:	681a      	ldr	r2, [r3, #0]
 80171f6:	4b15      	ldr	r3, [pc, #84]	; (801724c <prvInsertBlockIntoFreeList+0xb0>)
 80171f8:	681b      	ldr	r3, [r3, #0]
 80171fa:	429a      	cmp	r2, r3
 80171fc:	d00d      	beq.n	801721a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	685a      	ldr	r2, [r3, #4]
 8017202:	68fb      	ldr	r3, [r7, #12]
 8017204:	681b      	ldr	r3, [r3, #0]
 8017206:	685b      	ldr	r3, [r3, #4]
 8017208:	441a      	add	r2, r3
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801720e:	68fb      	ldr	r3, [r7, #12]
 8017210:	681b      	ldr	r3, [r3, #0]
 8017212:	681a      	ldr	r2, [r3, #0]
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	601a      	str	r2, [r3, #0]
 8017218:	e008      	b.n	801722c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801721a:	4b0c      	ldr	r3, [pc, #48]	; (801724c <prvInsertBlockIntoFreeList+0xb0>)
 801721c:	681a      	ldr	r2, [r3, #0]
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	601a      	str	r2, [r3, #0]
 8017222:	e003      	b.n	801722c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8017224:	68fb      	ldr	r3, [r7, #12]
 8017226:	681a      	ldr	r2, [r3, #0]
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801722c:	68fa      	ldr	r2, [r7, #12]
 801722e:	687b      	ldr	r3, [r7, #4]
 8017230:	429a      	cmp	r2, r3
 8017232:	d002      	beq.n	801723a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8017234:	68fb      	ldr	r3, [r7, #12]
 8017236:	687a      	ldr	r2, [r7, #4]
 8017238:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801723a:	bf00      	nop
 801723c:	3714      	adds	r7, #20
 801723e:	46bd      	mov	sp, r7
 8017240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017244:	4770      	bx	lr
 8017246:	bf00      	nop
 8017248:	20055d08 	.word	0x20055d08
 801724c:	20055d10 	.word	0x20055d10

08017250 <__errno>:
 8017250:	4b01      	ldr	r3, [pc, #4]	; (8017258 <__errno+0x8>)
 8017252:	6818      	ldr	r0, [r3, #0]
 8017254:	4770      	bx	lr
 8017256:	bf00      	nop
 8017258:	20000028 	.word	0x20000028

0801725c <__libc_init_array>:
 801725c:	b570      	push	{r4, r5, r6, lr}
 801725e:	4d0d      	ldr	r5, [pc, #52]	; (8017294 <__libc_init_array+0x38>)
 8017260:	4c0d      	ldr	r4, [pc, #52]	; (8017298 <__libc_init_array+0x3c>)
 8017262:	1b64      	subs	r4, r4, r5
 8017264:	10a4      	asrs	r4, r4, #2
 8017266:	2600      	movs	r6, #0
 8017268:	42a6      	cmp	r6, r4
 801726a:	d109      	bne.n	8017280 <__libc_init_array+0x24>
 801726c:	4d0b      	ldr	r5, [pc, #44]	; (801729c <__libc_init_array+0x40>)
 801726e:	4c0c      	ldr	r4, [pc, #48]	; (80172a0 <__libc_init_array+0x44>)
 8017270:	f004 ff4e 	bl	801c110 <_init>
 8017274:	1b64      	subs	r4, r4, r5
 8017276:	10a4      	asrs	r4, r4, #2
 8017278:	2600      	movs	r6, #0
 801727a:	42a6      	cmp	r6, r4
 801727c:	d105      	bne.n	801728a <__libc_init_array+0x2e>
 801727e:	bd70      	pop	{r4, r5, r6, pc}
 8017280:	f855 3b04 	ldr.w	r3, [r5], #4
 8017284:	4798      	blx	r3
 8017286:	3601      	adds	r6, #1
 8017288:	e7ee      	b.n	8017268 <__libc_init_array+0xc>
 801728a:	f855 3b04 	ldr.w	r3, [r5], #4
 801728e:	4798      	blx	r3
 8017290:	3601      	adds	r6, #1
 8017292:	e7f2      	b.n	801727a <__libc_init_array+0x1e>
 8017294:	08029f70 	.word	0x08029f70
 8017298:	08029f70 	.word	0x08029f70
 801729c:	08029f70 	.word	0x08029f70
 80172a0:	08029f74 	.word	0x08029f74

080172a4 <memcpy>:
 80172a4:	440a      	add	r2, r1
 80172a6:	4291      	cmp	r1, r2
 80172a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80172ac:	d100      	bne.n	80172b0 <memcpy+0xc>
 80172ae:	4770      	bx	lr
 80172b0:	b510      	push	{r4, lr}
 80172b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80172b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80172ba:	4291      	cmp	r1, r2
 80172bc:	d1f9      	bne.n	80172b2 <memcpy+0xe>
 80172be:	bd10      	pop	{r4, pc}

080172c0 <memset>:
 80172c0:	4402      	add	r2, r0
 80172c2:	4603      	mov	r3, r0
 80172c4:	4293      	cmp	r3, r2
 80172c6:	d100      	bne.n	80172ca <memset+0xa>
 80172c8:	4770      	bx	lr
 80172ca:	f803 1b01 	strb.w	r1, [r3], #1
 80172ce:	e7f9      	b.n	80172c4 <memset+0x4>

080172d0 <__cvt>:
 80172d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80172d2:	ed2d 8b02 	vpush	{d8}
 80172d6:	eeb0 8b40 	vmov.f64	d8, d0
 80172da:	b085      	sub	sp, #20
 80172dc:	4617      	mov	r7, r2
 80172de:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80172e0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80172e2:	ee18 2a90 	vmov	r2, s17
 80172e6:	f025 0520 	bic.w	r5, r5, #32
 80172ea:	2a00      	cmp	r2, #0
 80172ec:	bfb6      	itet	lt
 80172ee:	222d      	movlt	r2, #45	; 0x2d
 80172f0:	2200      	movge	r2, #0
 80172f2:	eeb1 8b40 	vneglt.f64	d8, d0
 80172f6:	2d46      	cmp	r5, #70	; 0x46
 80172f8:	460c      	mov	r4, r1
 80172fa:	701a      	strb	r2, [r3, #0]
 80172fc:	d004      	beq.n	8017308 <__cvt+0x38>
 80172fe:	2d45      	cmp	r5, #69	; 0x45
 8017300:	d100      	bne.n	8017304 <__cvt+0x34>
 8017302:	3401      	adds	r4, #1
 8017304:	2102      	movs	r1, #2
 8017306:	e000      	b.n	801730a <__cvt+0x3a>
 8017308:	2103      	movs	r1, #3
 801730a:	ab03      	add	r3, sp, #12
 801730c:	9301      	str	r3, [sp, #4]
 801730e:	ab02      	add	r3, sp, #8
 8017310:	9300      	str	r3, [sp, #0]
 8017312:	4622      	mov	r2, r4
 8017314:	4633      	mov	r3, r6
 8017316:	eeb0 0b48 	vmov.f64	d0, d8
 801731a:	f001 fd79 	bl	8018e10 <_dtoa_r>
 801731e:	2d47      	cmp	r5, #71	; 0x47
 8017320:	d109      	bne.n	8017336 <__cvt+0x66>
 8017322:	07fb      	lsls	r3, r7, #31
 8017324:	d407      	bmi.n	8017336 <__cvt+0x66>
 8017326:	9b03      	ldr	r3, [sp, #12]
 8017328:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801732a:	1a1b      	subs	r3, r3, r0
 801732c:	6013      	str	r3, [r2, #0]
 801732e:	b005      	add	sp, #20
 8017330:	ecbd 8b02 	vpop	{d8}
 8017334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017336:	2d46      	cmp	r5, #70	; 0x46
 8017338:	eb00 0204 	add.w	r2, r0, r4
 801733c:	d10c      	bne.n	8017358 <__cvt+0x88>
 801733e:	7803      	ldrb	r3, [r0, #0]
 8017340:	2b30      	cmp	r3, #48	; 0x30
 8017342:	d107      	bne.n	8017354 <__cvt+0x84>
 8017344:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8017348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801734c:	bf1c      	itt	ne
 801734e:	f1c4 0401 	rsbne	r4, r4, #1
 8017352:	6034      	strne	r4, [r6, #0]
 8017354:	6833      	ldr	r3, [r6, #0]
 8017356:	441a      	add	r2, r3
 8017358:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801735c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017360:	bf08      	it	eq
 8017362:	9203      	streq	r2, [sp, #12]
 8017364:	2130      	movs	r1, #48	; 0x30
 8017366:	9b03      	ldr	r3, [sp, #12]
 8017368:	4293      	cmp	r3, r2
 801736a:	d2dc      	bcs.n	8017326 <__cvt+0x56>
 801736c:	1c5c      	adds	r4, r3, #1
 801736e:	9403      	str	r4, [sp, #12]
 8017370:	7019      	strb	r1, [r3, #0]
 8017372:	e7f8      	b.n	8017366 <__cvt+0x96>

08017374 <__exponent>:
 8017374:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017376:	4603      	mov	r3, r0
 8017378:	2900      	cmp	r1, #0
 801737a:	bfb8      	it	lt
 801737c:	4249      	neglt	r1, r1
 801737e:	f803 2b02 	strb.w	r2, [r3], #2
 8017382:	bfb4      	ite	lt
 8017384:	222d      	movlt	r2, #45	; 0x2d
 8017386:	222b      	movge	r2, #43	; 0x2b
 8017388:	2909      	cmp	r1, #9
 801738a:	7042      	strb	r2, [r0, #1]
 801738c:	dd2a      	ble.n	80173e4 <__exponent+0x70>
 801738e:	f10d 0407 	add.w	r4, sp, #7
 8017392:	46a4      	mov	ip, r4
 8017394:	270a      	movs	r7, #10
 8017396:	46a6      	mov	lr, r4
 8017398:	460a      	mov	r2, r1
 801739a:	fb91 f6f7 	sdiv	r6, r1, r7
 801739e:	fb07 1516 	mls	r5, r7, r6, r1
 80173a2:	3530      	adds	r5, #48	; 0x30
 80173a4:	2a63      	cmp	r2, #99	; 0x63
 80173a6:	f104 34ff 	add.w	r4, r4, #4294967295
 80173aa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80173ae:	4631      	mov	r1, r6
 80173b0:	dcf1      	bgt.n	8017396 <__exponent+0x22>
 80173b2:	3130      	adds	r1, #48	; 0x30
 80173b4:	f1ae 0502 	sub.w	r5, lr, #2
 80173b8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80173bc:	1c44      	adds	r4, r0, #1
 80173be:	4629      	mov	r1, r5
 80173c0:	4561      	cmp	r1, ip
 80173c2:	d30a      	bcc.n	80173da <__exponent+0x66>
 80173c4:	f10d 0209 	add.w	r2, sp, #9
 80173c8:	eba2 020e 	sub.w	r2, r2, lr
 80173cc:	4565      	cmp	r5, ip
 80173ce:	bf88      	it	hi
 80173d0:	2200      	movhi	r2, #0
 80173d2:	4413      	add	r3, r2
 80173d4:	1a18      	subs	r0, r3, r0
 80173d6:	b003      	add	sp, #12
 80173d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80173da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80173de:	f804 2f01 	strb.w	r2, [r4, #1]!
 80173e2:	e7ed      	b.n	80173c0 <__exponent+0x4c>
 80173e4:	2330      	movs	r3, #48	; 0x30
 80173e6:	3130      	adds	r1, #48	; 0x30
 80173e8:	7083      	strb	r3, [r0, #2]
 80173ea:	70c1      	strb	r1, [r0, #3]
 80173ec:	1d03      	adds	r3, r0, #4
 80173ee:	e7f1      	b.n	80173d4 <__exponent+0x60>

080173f0 <_printf_float>:
 80173f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173f4:	b08b      	sub	sp, #44	; 0x2c
 80173f6:	460c      	mov	r4, r1
 80173f8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80173fc:	4616      	mov	r6, r2
 80173fe:	461f      	mov	r7, r3
 8017400:	4605      	mov	r5, r0
 8017402:	f002 fdf7 	bl	8019ff4 <_localeconv_r>
 8017406:	f8d0 b000 	ldr.w	fp, [r0]
 801740a:	4658      	mov	r0, fp
 801740c:	f7f0 ff78 	bl	8008300 <strlen>
 8017410:	2300      	movs	r3, #0
 8017412:	9308      	str	r3, [sp, #32]
 8017414:	f8d8 3000 	ldr.w	r3, [r8]
 8017418:	f894 9018 	ldrb.w	r9, [r4, #24]
 801741c:	6822      	ldr	r2, [r4, #0]
 801741e:	3307      	adds	r3, #7
 8017420:	f023 0307 	bic.w	r3, r3, #7
 8017424:	f103 0108 	add.w	r1, r3, #8
 8017428:	f8c8 1000 	str.w	r1, [r8]
 801742c:	4682      	mov	sl, r0
 801742e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017432:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8017436:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8017698 <_printf_float+0x2a8>
 801743a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801743e:	eeb0 6bc0 	vabs.f64	d6, d0
 8017442:	eeb4 6b47 	vcmp.f64	d6, d7
 8017446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801744a:	dd24      	ble.n	8017496 <_printf_float+0xa6>
 801744c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8017450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017454:	d502      	bpl.n	801745c <_printf_float+0x6c>
 8017456:	232d      	movs	r3, #45	; 0x2d
 8017458:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801745c:	4b90      	ldr	r3, [pc, #576]	; (80176a0 <_printf_float+0x2b0>)
 801745e:	4891      	ldr	r0, [pc, #580]	; (80176a4 <_printf_float+0x2b4>)
 8017460:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8017464:	bf94      	ite	ls
 8017466:	4698      	movls	r8, r3
 8017468:	4680      	movhi	r8, r0
 801746a:	2303      	movs	r3, #3
 801746c:	6123      	str	r3, [r4, #16]
 801746e:	f022 0204 	bic.w	r2, r2, #4
 8017472:	2300      	movs	r3, #0
 8017474:	6022      	str	r2, [r4, #0]
 8017476:	9304      	str	r3, [sp, #16]
 8017478:	9700      	str	r7, [sp, #0]
 801747a:	4633      	mov	r3, r6
 801747c:	aa09      	add	r2, sp, #36	; 0x24
 801747e:	4621      	mov	r1, r4
 8017480:	4628      	mov	r0, r5
 8017482:	f000 f9d3 	bl	801782c <_printf_common>
 8017486:	3001      	adds	r0, #1
 8017488:	f040 808a 	bne.w	80175a0 <_printf_float+0x1b0>
 801748c:	f04f 30ff 	mov.w	r0, #4294967295
 8017490:	b00b      	add	sp, #44	; 0x2c
 8017492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017496:	eeb4 0b40 	vcmp.f64	d0, d0
 801749a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801749e:	d709      	bvc.n	80174b4 <_printf_float+0xc4>
 80174a0:	ee10 3a90 	vmov	r3, s1
 80174a4:	2b00      	cmp	r3, #0
 80174a6:	bfbc      	itt	lt
 80174a8:	232d      	movlt	r3, #45	; 0x2d
 80174aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80174ae:	487e      	ldr	r0, [pc, #504]	; (80176a8 <_printf_float+0x2b8>)
 80174b0:	4b7e      	ldr	r3, [pc, #504]	; (80176ac <_printf_float+0x2bc>)
 80174b2:	e7d5      	b.n	8017460 <_printf_float+0x70>
 80174b4:	6863      	ldr	r3, [r4, #4]
 80174b6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80174ba:	9104      	str	r1, [sp, #16]
 80174bc:	1c59      	adds	r1, r3, #1
 80174be:	d13c      	bne.n	801753a <_printf_float+0x14a>
 80174c0:	2306      	movs	r3, #6
 80174c2:	6063      	str	r3, [r4, #4]
 80174c4:	2300      	movs	r3, #0
 80174c6:	9303      	str	r3, [sp, #12]
 80174c8:	ab08      	add	r3, sp, #32
 80174ca:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80174ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80174d2:	ab07      	add	r3, sp, #28
 80174d4:	6861      	ldr	r1, [r4, #4]
 80174d6:	9300      	str	r3, [sp, #0]
 80174d8:	6022      	str	r2, [r4, #0]
 80174da:	f10d 031b 	add.w	r3, sp, #27
 80174de:	4628      	mov	r0, r5
 80174e0:	f7ff fef6 	bl	80172d0 <__cvt>
 80174e4:	9b04      	ldr	r3, [sp, #16]
 80174e6:	9907      	ldr	r1, [sp, #28]
 80174e8:	2b47      	cmp	r3, #71	; 0x47
 80174ea:	4680      	mov	r8, r0
 80174ec:	d108      	bne.n	8017500 <_printf_float+0x110>
 80174ee:	1cc8      	adds	r0, r1, #3
 80174f0:	db02      	blt.n	80174f8 <_printf_float+0x108>
 80174f2:	6863      	ldr	r3, [r4, #4]
 80174f4:	4299      	cmp	r1, r3
 80174f6:	dd41      	ble.n	801757c <_printf_float+0x18c>
 80174f8:	f1a9 0902 	sub.w	r9, r9, #2
 80174fc:	fa5f f989 	uxtb.w	r9, r9
 8017500:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8017504:	d820      	bhi.n	8017548 <_printf_float+0x158>
 8017506:	3901      	subs	r1, #1
 8017508:	464a      	mov	r2, r9
 801750a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801750e:	9107      	str	r1, [sp, #28]
 8017510:	f7ff ff30 	bl	8017374 <__exponent>
 8017514:	9a08      	ldr	r2, [sp, #32]
 8017516:	9004      	str	r0, [sp, #16]
 8017518:	1813      	adds	r3, r2, r0
 801751a:	2a01      	cmp	r2, #1
 801751c:	6123      	str	r3, [r4, #16]
 801751e:	dc02      	bgt.n	8017526 <_printf_float+0x136>
 8017520:	6822      	ldr	r2, [r4, #0]
 8017522:	07d2      	lsls	r2, r2, #31
 8017524:	d501      	bpl.n	801752a <_printf_float+0x13a>
 8017526:	3301      	adds	r3, #1
 8017528:	6123      	str	r3, [r4, #16]
 801752a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801752e:	2b00      	cmp	r3, #0
 8017530:	d0a2      	beq.n	8017478 <_printf_float+0x88>
 8017532:	232d      	movs	r3, #45	; 0x2d
 8017534:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017538:	e79e      	b.n	8017478 <_printf_float+0x88>
 801753a:	9904      	ldr	r1, [sp, #16]
 801753c:	2947      	cmp	r1, #71	; 0x47
 801753e:	d1c1      	bne.n	80174c4 <_printf_float+0xd4>
 8017540:	2b00      	cmp	r3, #0
 8017542:	d1bf      	bne.n	80174c4 <_printf_float+0xd4>
 8017544:	2301      	movs	r3, #1
 8017546:	e7bc      	b.n	80174c2 <_printf_float+0xd2>
 8017548:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801754c:	d118      	bne.n	8017580 <_printf_float+0x190>
 801754e:	2900      	cmp	r1, #0
 8017550:	6863      	ldr	r3, [r4, #4]
 8017552:	dd0b      	ble.n	801756c <_printf_float+0x17c>
 8017554:	6121      	str	r1, [r4, #16]
 8017556:	b913      	cbnz	r3, 801755e <_printf_float+0x16e>
 8017558:	6822      	ldr	r2, [r4, #0]
 801755a:	07d0      	lsls	r0, r2, #31
 801755c:	d502      	bpl.n	8017564 <_printf_float+0x174>
 801755e:	3301      	adds	r3, #1
 8017560:	440b      	add	r3, r1
 8017562:	6123      	str	r3, [r4, #16]
 8017564:	2300      	movs	r3, #0
 8017566:	65a1      	str	r1, [r4, #88]	; 0x58
 8017568:	9304      	str	r3, [sp, #16]
 801756a:	e7de      	b.n	801752a <_printf_float+0x13a>
 801756c:	b913      	cbnz	r3, 8017574 <_printf_float+0x184>
 801756e:	6822      	ldr	r2, [r4, #0]
 8017570:	07d2      	lsls	r2, r2, #31
 8017572:	d501      	bpl.n	8017578 <_printf_float+0x188>
 8017574:	3302      	adds	r3, #2
 8017576:	e7f4      	b.n	8017562 <_printf_float+0x172>
 8017578:	2301      	movs	r3, #1
 801757a:	e7f2      	b.n	8017562 <_printf_float+0x172>
 801757c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8017580:	9b08      	ldr	r3, [sp, #32]
 8017582:	4299      	cmp	r1, r3
 8017584:	db05      	blt.n	8017592 <_printf_float+0x1a2>
 8017586:	6823      	ldr	r3, [r4, #0]
 8017588:	6121      	str	r1, [r4, #16]
 801758a:	07d8      	lsls	r0, r3, #31
 801758c:	d5ea      	bpl.n	8017564 <_printf_float+0x174>
 801758e:	1c4b      	adds	r3, r1, #1
 8017590:	e7e7      	b.n	8017562 <_printf_float+0x172>
 8017592:	2900      	cmp	r1, #0
 8017594:	bfd4      	ite	le
 8017596:	f1c1 0202 	rsble	r2, r1, #2
 801759a:	2201      	movgt	r2, #1
 801759c:	4413      	add	r3, r2
 801759e:	e7e0      	b.n	8017562 <_printf_float+0x172>
 80175a0:	6823      	ldr	r3, [r4, #0]
 80175a2:	055a      	lsls	r2, r3, #21
 80175a4:	d407      	bmi.n	80175b6 <_printf_float+0x1c6>
 80175a6:	6923      	ldr	r3, [r4, #16]
 80175a8:	4642      	mov	r2, r8
 80175aa:	4631      	mov	r1, r6
 80175ac:	4628      	mov	r0, r5
 80175ae:	47b8      	blx	r7
 80175b0:	3001      	adds	r0, #1
 80175b2:	d12a      	bne.n	801760a <_printf_float+0x21a>
 80175b4:	e76a      	b.n	801748c <_printf_float+0x9c>
 80175b6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80175ba:	f240 80e2 	bls.w	8017782 <_printf_float+0x392>
 80175be:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80175c2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80175c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175ca:	d133      	bne.n	8017634 <_printf_float+0x244>
 80175cc:	4a38      	ldr	r2, [pc, #224]	; (80176b0 <_printf_float+0x2c0>)
 80175ce:	2301      	movs	r3, #1
 80175d0:	4631      	mov	r1, r6
 80175d2:	4628      	mov	r0, r5
 80175d4:	47b8      	blx	r7
 80175d6:	3001      	adds	r0, #1
 80175d8:	f43f af58 	beq.w	801748c <_printf_float+0x9c>
 80175dc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80175e0:	429a      	cmp	r2, r3
 80175e2:	db02      	blt.n	80175ea <_printf_float+0x1fa>
 80175e4:	6823      	ldr	r3, [r4, #0]
 80175e6:	07d8      	lsls	r0, r3, #31
 80175e8:	d50f      	bpl.n	801760a <_printf_float+0x21a>
 80175ea:	4653      	mov	r3, sl
 80175ec:	465a      	mov	r2, fp
 80175ee:	4631      	mov	r1, r6
 80175f0:	4628      	mov	r0, r5
 80175f2:	47b8      	blx	r7
 80175f4:	3001      	adds	r0, #1
 80175f6:	f43f af49 	beq.w	801748c <_printf_float+0x9c>
 80175fa:	f04f 0800 	mov.w	r8, #0
 80175fe:	f104 091a 	add.w	r9, r4, #26
 8017602:	9b08      	ldr	r3, [sp, #32]
 8017604:	3b01      	subs	r3, #1
 8017606:	4543      	cmp	r3, r8
 8017608:	dc09      	bgt.n	801761e <_printf_float+0x22e>
 801760a:	6823      	ldr	r3, [r4, #0]
 801760c:	079b      	lsls	r3, r3, #30
 801760e:	f100 8108 	bmi.w	8017822 <_printf_float+0x432>
 8017612:	68e0      	ldr	r0, [r4, #12]
 8017614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017616:	4298      	cmp	r0, r3
 8017618:	bfb8      	it	lt
 801761a:	4618      	movlt	r0, r3
 801761c:	e738      	b.n	8017490 <_printf_float+0xa0>
 801761e:	2301      	movs	r3, #1
 8017620:	464a      	mov	r2, r9
 8017622:	4631      	mov	r1, r6
 8017624:	4628      	mov	r0, r5
 8017626:	47b8      	blx	r7
 8017628:	3001      	adds	r0, #1
 801762a:	f43f af2f 	beq.w	801748c <_printf_float+0x9c>
 801762e:	f108 0801 	add.w	r8, r8, #1
 8017632:	e7e6      	b.n	8017602 <_printf_float+0x212>
 8017634:	9b07      	ldr	r3, [sp, #28]
 8017636:	2b00      	cmp	r3, #0
 8017638:	dc3c      	bgt.n	80176b4 <_printf_float+0x2c4>
 801763a:	4a1d      	ldr	r2, [pc, #116]	; (80176b0 <_printf_float+0x2c0>)
 801763c:	2301      	movs	r3, #1
 801763e:	4631      	mov	r1, r6
 8017640:	4628      	mov	r0, r5
 8017642:	47b8      	blx	r7
 8017644:	3001      	adds	r0, #1
 8017646:	f43f af21 	beq.w	801748c <_printf_float+0x9c>
 801764a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801764e:	4313      	orrs	r3, r2
 8017650:	d102      	bne.n	8017658 <_printf_float+0x268>
 8017652:	6823      	ldr	r3, [r4, #0]
 8017654:	07d9      	lsls	r1, r3, #31
 8017656:	d5d8      	bpl.n	801760a <_printf_float+0x21a>
 8017658:	4653      	mov	r3, sl
 801765a:	465a      	mov	r2, fp
 801765c:	4631      	mov	r1, r6
 801765e:	4628      	mov	r0, r5
 8017660:	47b8      	blx	r7
 8017662:	3001      	adds	r0, #1
 8017664:	f43f af12 	beq.w	801748c <_printf_float+0x9c>
 8017668:	f04f 0900 	mov.w	r9, #0
 801766c:	f104 0a1a 	add.w	sl, r4, #26
 8017670:	9b07      	ldr	r3, [sp, #28]
 8017672:	425b      	negs	r3, r3
 8017674:	454b      	cmp	r3, r9
 8017676:	dc01      	bgt.n	801767c <_printf_float+0x28c>
 8017678:	9b08      	ldr	r3, [sp, #32]
 801767a:	e795      	b.n	80175a8 <_printf_float+0x1b8>
 801767c:	2301      	movs	r3, #1
 801767e:	4652      	mov	r2, sl
 8017680:	4631      	mov	r1, r6
 8017682:	4628      	mov	r0, r5
 8017684:	47b8      	blx	r7
 8017686:	3001      	adds	r0, #1
 8017688:	f43f af00 	beq.w	801748c <_printf_float+0x9c>
 801768c:	f109 0901 	add.w	r9, r9, #1
 8017690:	e7ee      	b.n	8017670 <_printf_float+0x280>
 8017692:	bf00      	nop
 8017694:	f3af 8000 	nop.w
 8017698:	ffffffff 	.word	0xffffffff
 801769c:	7fefffff 	.word	0x7fefffff
 80176a0:	080281fc 	.word	0x080281fc
 80176a4:	08028200 	.word	0x08028200
 80176a8:	08028208 	.word	0x08028208
 80176ac:	08028204 	.word	0x08028204
 80176b0:	0802820c 	.word	0x0802820c
 80176b4:	9a08      	ldr	r2, [sp, #32]
 80176b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80176b8:	429a      	cmp	r2, r3
 80176ba:	bfa8      	it	ge
 80176bc:	461a      	movge	r2, r3
 80176be:	2a00      	cmp	r2, #0
 80176c0:	4691      	mov	r9, r2
 80176c2:	dc38      	bgt.n	8017736 <_printf_float+0x346>
 80176c4:	2300      	movs	r3, #0
 80176c6:	9305      	str	r3, [sp, #20]
 80176c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80176cc:	f104 021a 	add.w	r2, r4, #26
 80176d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80176d2:	9905      	ldr	r1, [sp, #20]
 80176d4:	9304      	str	r3, [sp, #16]
 80176d6:	eba3 0309 	sub.w	r3, r3, r9
 80176da:	428b      	cmp	r3, r1
 80176dc:	dc33      	bgt.n	8017746 <_printf_float+0x356>
 80176de:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80176e2:	429a      	cmp	r2, r3
 80176e4:	db3c      	blt.n	8017760 <_printf_float+0x370>
 80176e6:	6823      	ldr	r3, [r4, #0]
 80176e8:	07da      	lsls	r2, r3, #31
 80176ea:	d439      	bmi.n	8017760 <_printf_float+0x370>
 80176ec:	9a08      	ldr	r2, [sp, #32]
 80176ee:	9b04      	ldr	r3, [sp, #16]
 80176f0:	9907      	ldr	r1, [sp, #28]
 80176f2:	1ad3      	subs	r3, r2, r3
 80176f4:	eba2 0901 	sub.w	r9, r2, r1
 80176f8:	4599      	cmp	r9, r3
 80176fa:	bfa8      	it	ge
 80176fc:	4699      	movge	r9, r3
 80176fe:	f1b9 0f00 	cmp.w	r9, #0
 8017702:	dc35      	bgt.n	8017770 <_printf_float+0x380>
 8017704:	f04f 0800 	mov.w	r8, #0
 8017708:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801770c:	f104 0a1a 	add.w	sl, r4, #26
 8017710:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8017714:	1a9b      	subs	r3, r3, r2
 8017716:	eba3 0309 	sub.w	r3, r3, r9
 801771a:	4543      	cmp	r3, r8
 801771c:	f77f af75 	ble.w	801760a <_printf_float+0x21a>
 8017720:	2301      	movs	r3, #1
 8017722:	4652      	mov	r2, sl
 8017724:	4631      	mov	r1, r6
 8017726:	4628      	mov	r0, r5
 8017728:	47b8      	blx	r7
 801772a:	3001      	adds	r0, #1
 801772c:	f43f aeae 	beq.w	801748c <_printf_float+0x9c>
 8017730:	f108 0801 	add.w	r8, r8, #1
 8017734:	e7ec      	b.n	8017710 <_printf_float+0x320>
 8017736:	4613      	mov	r3, r2
 8017738:	4631      	mov	r1, r6
 801773a:	4642      	mov	r2, r8
 801773c:	4628      	mov	r0, r5
 801773e:	47b8      	blx	r7
 8017740:	3001      	adds	r0, #1
 8017742:	d1bf      	bne.n	80176c4 <_printf_float+0x2d4>
 8017744:	e6a2      	b.n	801748c <_printf_float+0x9c>
 8017746:	2301      	movs	r3, #1
 8017748:	4631      	mov	r1, r6
 801774a:	4628      	mov	r0, r5
 801774c:	9204      	str	r2, [sp, #16]
 801774e:	47b8      	blx	r7
 8017750:	3001      	adds	r0, #1
 8017752:	f43f ae9b 	beq.w	801748c <_printf_float+0x9c>
 8017756:	9b05      	ldr	r3, [sp, #20]
 8017758:	9a04      	ldr	r2, [sp, #16]
 801775a:	3301      	adds	r3, #1
 801775c:	9305      	str	r3, [sp, #20]
 801775e:	e7b7      	b.n	80176d0 <_printf_float+0x2e0>
 8017760:	4653      	mov	r3, sl
 8017762:	465a      	mov	r2, fp
 8017764:	4631      	mov	r1, r6
 8017766:	4628      	mov	r0, r5
 8017768:	47b8      	blx	r7
 801776a:	3001      	adds	r0, #1
 801776c:	d1be      	bne.n	80176ec <_printf_float+0x2fc>
 801776e:	e68d      	b.n	801748c <_printf_float+0x9c>
 8017770:	9a04      	ldr	r2, [sp, #16]
 8017772:	464b      	mov	r3, r9
 8017774:	4442      	add	r2, r8
 8017776:	4631      	mov	r1, r6
 8017778:	4628      	mov	r0, r5
 801777a:	47b8      	blx	r7
 801777c:	3001      	adds	r0, #1
 801777e:	d1c1      	bne.n	8017704 <_printf_float+0x314>
 8017780:	e684      	b.n	801748c <_printf_float+0x9c>
 8017782:	9a08      	ldr	r2, [sp, #32]
 8017784:	2a01      	cmp	r2, #1
 8017786:	dc01      	bgt.n	801778c <_printf_float+0x39c>
 8017788:	07db      	lsls	r3, r3, #31
 801778a:	d537      	bpl.n	80177fc <_printf_float+0x40c>
 801778c:	2301      	movs	r3, #1
 801778e:	4642      	mov	r2, r8
 8017790:	4631      	mov	r1, r6
 8017792:	4628      	mov	r0, r5
 8017794:	47b8      	blx	r7
 8017796:	3001      	adds	r0, #1
 8017798:	f43f ae78 	beq.w	801748c <_printf_float+0x9c>
 801779c:	4653      	mov	r3, sl
 801779e:	465a      	mov	r2, fp
 80177a0:	4631      	mov	r1, r6
 80177a2:	4628      	mov	r0, r5
 80177a4:	47b8      	blx	r7
 80177a6:	3001      	adds	r0, #1
 80177a8:	f43f ae70 	beq.w	801748c <_printf_float+0x9c>
 80177ac:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80177b0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80177b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177b8:	d01b      	beq.n	80177f2 <_printf_float+0x402>
 80177ba:	9b08      	ldr	r3, [sp, #32]
 80177bc:	f108 0201 	add.w	r2, r8, #1
 80177c0:	3b01      	subs	r3, #1
 80177c2:	4631      	mov	r1, r6
 80177c4:	4628      	mov	r0, r5
 80177c6:	47b8      	blx	r7
 80177c8:	3001      	adds	r0, #1
 80177ca:	d10e      	bne.n	80177ea <_printf_float+0x3fa>
 80177cc:	e65e      	b.n	801748c <_printf_float+0x9c>
 80177ce:	2301      	movs	r3, #1
 80177d0:	464a      	mov	r2, r9
 80177d2:	4631      	mov	r1, r6
 80177d4:	4628      	mov	r0, r5
 80177d6:	47b8      	blx	r7
 80177d8:	3001      	adds	r0, #1
 80177da:	f43f ae57 	beq.w	801748c <_printf_float+0x9c>
 80177de:	f108 0801 	add.w	r8, r8, #1
 80177e2:	9b08      	ldr	r3, [sp, #32]
 80177e4:	3b01      	subs	r3, #1
 80177e6:	4543      	cmp	r3, r8
 80177e8:	dcf1      	bgt.n	80177ce <_printf_float+0x3de>
 80177ea:	9b04      	ldr	r3, [sp, #16]
 80177ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80177f0:	e6db      	b.n	80175aa <_printf_float+0x1ba>
 80177f2:	f04f 0800 	mov.w	r8, #0
 80177f6:	f104 091a 	add.w	r9, r4, #26
 80177fa:	e7f2      	b.n	80177e2 <_printf_float+0x3f2>
 80177fc:	2301      	movs	r3, #1
 80177fe:	4642      	mov	r2, r8
 8017800:	e7df      	b.n	80177c2 <_printf_float+0x3d2>
 8017802:	2301      	movs	r3, #1
 8017804:	464a      	mov	r2, r9
 8017806:	4631      	mov	r1, r6
 8017808:	4628      	mov	r0, r5
 801780a:	47b8      	blx	r7
 801780c:	3001      	adds	r0, #1
 801780e:	f43f ae3d 	beq.w	801748c <_printf_float+0x9c>
 8017812:	f108 0801 	add.w	r8, r8, #1
 8017816:	68e3      	ldr	r3, [r4, #12]
 8017818:	9909      	ldr	r1, [sp, #36]	; 0x24
 801781a:	1a5b      	subs	r3, r3, r1
 801781c:	4543      	cmp	r3, r8
 801781e:	dcf0      	bgt.n	8017802 <_printf_float+0x412>
 8017820:	e6f7      	b.n	8017612 <_printf_float+0x222>
 8017822:	f04f 0800 	mov.w	r8, #0
 8017826:	f104 0919 	add.w	r9, r4, #25
 801782a:	e7f4      	b.n	8017816 <_printf_float+0x426>

0801782c <_printf_common>:
 801782c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017830:	4616      	mov	r6, r2
 8017832:	4699      	mov	r9, r3
 8017834:	688a      	ldr	r2, [r1, #8]
 8017836:	690b      	ldr	r3, [r1, #16]
 8017838:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801783c:	4293      	cmp	r3, r2
 801783e:	bfb8      	it	lt
 8017840:	4613      	movlt	r3, r2
 8017842:	6033      	str	r3, [r6, #0]
 8017844:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017848:	4607      	mov	r7, r0
 801784a:	460c      	mov	r4, r1
 801784c:	b10a      	cbz	r2, 8017852 <_printf_common+0x26>
 801784e:	3301      	adds	r3, #1
 8017850:	6033      	str	r3, [r6, #0]
 8017852:	6823      	ldr	r3, [r4, #0]
 8017854:	0699      	lsls	r1, r3, #26
 8017856:	bf42      	ittt	mi
 8017858:	6833      	ldrmi	r3, [r6, #0]
 801785a:	3302      	addmi	r3, #2
 801785c:	6033      	strmi	r3, [r6, #0]
 801785e:	6825      	ldr	r5, [r4, #0]
 8017860:	f015 0506 	ands.w	r5, r5, #6
 8017864:	d106      	bne.n	8017874 <_printf_common+0x48>
 8017866:	f104 0a19 	add.w	sl, r4, #25
 801786a:	68e3      	ldr	r3, [r4, #12]
 801786c:	6832      	ldr	r2, [r6, #0]
 801786e:	1a9b      	subs	r3, r3, r2
 8017870:	42ab      	cmp	r3, r5
 8017872:	dc26      	bgt.n	80178c2 <_printf_common+0x96>
 8017874:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017878:	1e13      	subs	r3, r2, #0
 801787a:	6822      	ldr	r2, [r4, #0]
 801787c:	bf18      	it	ne
 801787e:	2301      	movne	r3, #1
 8017880:	0692      	lsls	r2, r2, #26
 8017882:	d42b      	bmi.n	80178dc <_printf_common+0xb0>
 8017884:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017888:	4649      	mov	r1, r9
 801788a:	4638      	mov	r0, r7
 801788c:	47c0      	blx	r8
 801788e:	3001      	adds	r0, #1
 8017890:	d01e      	beq.n	80178d0 <_printf_common+0xa4>
 8017892:	6823      	ldr	r3, [r4, #0]
 8017894:	68e5      	ldr	r5, [r4, #12]
 8017896:	6832      	ldr	r2, [r6, #0]
 8017898:	f003 0306 	and.w	r3, r3, #6
 801789c:	2b04      	cmp	r3, #4
 801789e:	bf08      	it	eq
 80178a0:	1aad      	subeq	r5, r5, r2
 80178a2:	68a3      	ldr	r3, [r4, #8]
 80178a4:	6922      	ldr	r2, [r4, #16]
 80178a6:	bf0c      	ite	eq
 80178a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80178ac:	2500      	movne	r5, #0
 80178ae:	4293      	cmp	r3, r2
 80178b0:	bfc4      	itt	gt
 80178b2:	1a9b      	subgt	r3, r3, r2
 80178b4:	18ed      	addgt	r5, r5, r3
 80178b6:	2600      	movs	r6, #0
 80178b8:	341a      	adds	r4, #26
 80178ba:	42b5      	cmp	r5, r6
 80178bc:	d11a      	bne.n	80178f4 <_printf_common+0xc8>
 80178be:	2000      	movs	r0, #0
 80178c0:	e008      	b.n	80178d4 <_printf_common+0xa8>
 80178c2:	2301      	movs	r3, #1
 80178c4:	4652      	mov	r2, sl
 80178c6:	4649      	mov	r1, r9
 80178c8:	4638      	mov	r0, r7
 80178ca:	47c0      	blx	r8
 80178cc:	3001      	adds	r0, #1
 80178ce:	d103      	bne.n	80178d8 <_printf_common+0xac>
 80178d0:	f04f 30ff 	mov.w	r0, #4294967295
 80178d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178d8:	3501      	adds	r5, #1
 80178da:	e7c6      	b.n	801786a <_printf_common+0x3e>
 80178dc:	18e1      	adds	r1, r4, r3
 80178de:	1c5a      	adds	r2, r3, #1
 80178e0:	2030      	movs	r0, #48	; 0x30
 80178e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80178e6:	4422      	add	r2, r4
 80178e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80178ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80178f0:	3302      	adds	r3, #2
 80178f2:	e7c7      	b.n	8017884 <_printf_common+0x58>
 80178f4:	2301      	movs	r3, #1
 80178f6:	4622      	mov	r2, r4
 80178f8:	4649      	mov	r1, r9
 80178fa:	4638      	mov	r0, r7
 80178fc:	47c0      	blx	r8
 80178fe:	3001      	adds	r0, #1
 8017900:	d0e6      	beq.n	80178d0 <_printf_common+0xa4>
 8017902:	3601      	adds	r6, #1
 8017904:	e7d9      	b.n	80178ba <_printf_common+0x8e>
	...

08017908 <_printf_i>:
 8017908:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801790c:	460c      	mov	r4, r1
 801790e:	4691      	mov	r9, r2
 8017910:	7e27      	ldrb	r7, [r4, #24]
 8017912:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017914:	2f78      	cmp	r7, #120	; 0x78
 8017916:	4680      	mov	r8, r0
 8017918:	469a      	mov	sl, r3
 801791a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801791e:	d807      	bhi.n	8017930 <_printf_i+0x28>
 8017920:	2f62      	cmp	r7, #98	; 0x62
 8017922:	d80a      	bhi.n	801793a <_printf_i+0x32>
 8017924:	2f00      	cmp	r7, #0
 8017926:	f000 80d8 	beq.w	8017ada <_printf_i+0x1d2>
 801792a:	2f58      	cmp	r7, #88	; 0x58
 801792c:	f000 80a3 	beq.w	8017a76 <_printf_i+0x16e>
 8017930:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017934:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017938:	e03a      	b.n	80179b0 <_printf_i+0xa8>
 801793a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801793e:	2b15      	cmp	r3, #21
 8017940:	d8f6      	bhi.n	8017930 <_printf_i+0x28>
 8017942:	a001      	add	r0, pc, #4	; (adr r0, 8017948 <_printf_i+0x40>)
 8017944:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8017948:	080179a1 	.word	0x080179a1
 801794c:	080179b5 	.word	0x080179b5
 8017950:	08017931 	.word	0x08017931
 8017954:	08017931 	.word	0x08017931
 8017958:	08017931 	.word	0x08017931
 801795c:	08017931 	.word	0x08017931
 8017960:	080179b5 	.word	0x080179b5
 8017964:	08017931 	.word	0x08017931
 8017968:	08017931 	.word	0x08017931
 801796c:	08017931 	.word	0x08017931
 8017970:	08017931 	.word	0x08017931
 8017974:	08017ac1 	.word	0x08017ac1
 8017978:	080179e5 	.word	0x080179e5
 801797c:	08017aa3 	.word	0x08017aa3
 8017980:	08017931 	.word	0x08017931
 8017984:	08017931 	.word	0x08017931
 8017988:	08017ae3 	.word	0x08017ae3
 801798c:	08017931 	.word	0x08017931
 8017990:	080179e5 	.word	0x080179e5
 8017994:	08017931 	.word	0x08017931
 8017998:	08017931 	.word	0x08017931
 801799c:	08017aab 	.word	0x08017aab
 80179a0:	680b      	ldr	r3, [r1, #0]
 80179a2:	1d1a      	adds	r2, r3, #4
 80179a4:	681b      	ldr	r3, [r3, #0]
 80179a6:	600a      	str	r2, [r1, #0]
 80179a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80179ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80179b0:	2301      	movs	r3, #1
 80179b2:	e0a3      	b.n	8017afc <_printf_i+0x1f4>
 80179b4:	6825      	ldr	r5, [r4, #0]
 80179b6:	6808      	ldr	r0, [r1, #0]
 80179b8:	062e      	lsls	r6, r5, #24
 80179ba:	f100 0304 	add.w	r3, r0, #4
 80179be:	d50a      	bpl.n	80179d6 <_printf_i+0xce>
 80179c0:	6805      	ldr	r5, [r0, #0]
 80179c2:	600b      	str	r3, [r1, #0]
 80179c4:	2d00      	cmp	r5, #0
 80179c6:	da03      	bge.n	80179d0 <_printf_i+0xc8>
 80179c8:	232d      	movs	r3, #45	; 0x2d
 80179ca:	426d      	negs	r5, r5
 80179cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80179d0:	485e      	ldr	r0, [pc, #376]	; (8017b4c <_printf_i+0x244>)
 80179d2:	230a      	movs	r3, #10
 80179d4:	e019      	b.n	8017a0a <_printf_i+0x102>
 80179d6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80179da:	6805      	ldr	r5, [r0, #0]
 80179dc:	600b      	str	r3, [r1, #0]
 80179de:	bf18      	it	ne
 80179e0:	b22d      	sxthne	r5, r5
 80179e2:	e7ef      	b.n	80179c4 <_printf_i+0xbc>
 80179e4:	680b      	ldr	r3, [r1, #0]
 80179e6:	6825      	ldr	r5, [r4, #0]
 80179e8:	1d18      	adds	r0, r3, #4
 80179ea:	6008      	str	r0, [r1, #0]
 80179ec:	0628      	lsls	r0, r5, #24
 80179ee:	d501      	bpl.n	80179f4 <_printf_i+0xec>
 80179f0:	681d      	ldr	r5, [r3, #0]
 80179f2:	e002      	b.n	80179fa <_printf_i+0xf2>
 80179f4:	0669      	lsls	r1, r5, #25
 80179f6:	d5fb      	bpl.n	80179f0 <_printf_i+0xe8>
 80179f8:	881d      	ldrh	r5, [r3, #0]
 80179fa:	4854      	ldr	r0, [pc, #336]	; (8017b4c <_printf_i+0x244>)
 80179fc:	2f6f      	cmp	r7, #111	; 0x6f
 80179fe:	bf0c      	ite	eq
 8017a00:	2308      	moveq	r3, #8
 8017a02:	230a      	movne	r3, #10
 8017a04:	2100      	movs	r1, #0
 8017a06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017a0a:	6866      	ldr	r6, [r4, #4]
 8017a0c:	60a6      	str	r6, [r4, #8]
 8017a0e:	2e00      	cmp	r6, #0
 8017a10:	bfa2      	ittt	ge
 8017a12:	6821      	ldrge	r1, [r4, #0]
 8017a14:	f021 0104 	bicge.w	r1, r1, #4
 8017a18:	6021      	strge	r1, [r4, #0]
 8017a1a:	b90d      	cbnz	r5, 8017a20 <_printf_i+0x118>
 8017a1c:	2e00      	cmp	r6, #0
 8017a1e:	d04d      	beq.n	8017abc <_printf_i+0x1b4>
 8017a20:	4616      	mov	r6, r2
 8017a22:	fbb5 f1f3 	udiv	r1, r5, r3
 8017a26:	fb03 5711 	mls	r7, r3, r1, r5
 8017a2a:	5dc7      	ldrb	r7, [r0, r7]
 8017a2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017a30:	462f      	mov	r7, r5
 8017a32:	42bb      	cmp	r3, r7
 8017a34:	460d      	mov	r5, r1
 8017a36:	d9f4      	bls.n	8017a22 <_printf_i+0x11a>
 8017a38:	2b08      	cmp	r3, #8
 8017a3a:	d10b      	bne.n	8017a54 <_printf_i+0x14c>
 8017a3c:	6823      	ldr	r3, [r4, #0]
 8017a3e:	07df      	lsls	r7, r3, #31
 8017a40:	d508      	bpl.n	8017a54 <_printf_i+0x14c>
 8017a42:	6923      	ldr	r3, [r4, #16]
 8017a44:	6861      	ldr	r1, [r4, #4]
 8017a46:	4299      	cmp	r1, r3
 8017a48:	bfde      	ittt	le
 8017a4a:	2330      	movle	r3, #48	; 0x30
 8017a4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017a50:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017a54:	1b92      	subs	r2, r2, r6
 8017a56:	6122      	str	r2, [r4, #16]
 8017a58:	f8cd a000 	str.w	sl, [sp]
 8017a5c:	464b      	mov	r3, r9
 8017a5e:	aa03      	add	r2, sp, #12
 8017a60:	4621      	mov	r1, r4
 8017a62:	4640      	mov	r0, r8
 8017a64:	f7ff fee2 	bl	801782c <_printf_common>
 8017a68:	3001      	adds	r0, #1
 8017a6a:	d14c      	bne.n	8017b06 <_printf_i+0x1fe>
 8017a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8017a70:	b004      	add	sp, #16
 8017a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a76:	4835      	ldr	r0, [pc, #212]	; (8017b4c <_printf_i+0x244>)
 8017a78:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017a7c:	6823      	ldr	r3, [r4, #0]
 8017a7e:	680e      	ldr	r6, [r1, #0]
 8017a80:	061f      	lsls	r7, r3, #24
 8017a82:	f856 5b04 	ldr.w	r5, [r6], #4
 8017a86:	600e      	str	r6, [r1, #0]
 8017a88:	d514      	bpl.n	8017ab4 <_printf_i+0x1ac>
 8017a8a:	07d9      	lsls	r1, r3, #31
 8017a8c:	bf44      	itt	mi
 8017a8e:	f043 0320 	orrmi.w	r3, r3, #32
 8017a92:	6023      	strmi	r3, [r4, #0]
 8017a94:	b91d      	cbnz	r5, 8017a9e <_printf_i+0x196>
 8017a96:	6823      	ldr	r3, [r4, #0]
 8017a98:	f023 0320 	bic.w	r3, r3, #32
 8017a9c:	6023      	str	r3, [r4, #0]
 8017a9e:	2310      	movs	r3, #16
 8017aa0:	e7b0      	b.n	8017a04 <_printf_i+0xfc>
 8017aa2:	6823      	ldr	r3, [r4, #0]
 8017aa4:	f043 0320 	orr.w	r3, r3, #32
 8017aa8:	6023      	str	r3, [r4, #0]
 8017aaa:	2378      	movs	r3, #120	; 0x78
 8017aac:	4828      	ldr	r0, [pc, #160]	; (8017b50 <_printf_i+0x248>)
 8017aae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017ab2:	e7e3      	b.n	8017a7c <_printf_i+0x174>
 8017ab4:	065e      	lsls	r6, r3, #25
 8017ab6:	bf48      	it	mi
 8017ab8:	b2ad      	uxthmi	r5, r5
 8017aba:	e7e6      	b.n	8017a8a <_printf_i+0x182>
 8017abc:	4616      	mov	r6, r2
 8017abe:	e7bb      	b.n	8017a38 <_printf_i+0x130>
 8017ac0:	680b      	ldr	r3, [r1, #0]
 8017ac2:	6826      	ldr	r6, [r4, #0]
 8017ac4:	6960      	ldr	r0, [r4, #20]
 8017ac6:	1d1d      	adds	r5, r3, #4
 8017ac8:	600d      	str	r5, [r1, #0]
 8017aca:	0635      	lsls	r5, r6, #24
 8017acc:	681b      	ldr	r3, [r3, #0]
 8017ace:	d501      	bpl.n	8017ad4 <_printf_i+0x1cc>
 8017ad0:	6018      	str	r0, [r3, #0]
 8017ad2:	e002      	b.n	8017ada <_printf_i+0x1d2>
 8017ad4:	0671      	lsls	r1, r6, #25
 8017ad6:	d5fb      	bpl.n	8017ad0 <_printf_i+0x1c8>
 8017ad8:	8018      	strh	r0, [r3, #0]
 8017ada:	2300      	movs	r3, #0
 8017adc:	6123      	str	r3, [r4, #16]
 8017ade:	4616      	mov	r6, r2
 8017ae0:	e7ba      	b.n	8017a58 <_printf_i+0x150>
 8017ae2:	680b      	ldr	r3, [r1, #0]
 8017ae4:	1d1a      	adds	r2, r3, #4
 8017ae6:	600a      	str	r2, [r1, #0]
 8017ae8:	681e      	ldr	r6, [r3, #0]
 8017aea:	6862      	ldr	r2, [r4, #4]
 8017aec:	2100      	movs	r1, #0
 8017aee:	4630      	mov	r0, r6
 8017af0:	f7f0 fc0e 	bl	8008310 <memchr>
 8017af4:	b108      	cbz	r0, 8017afa <_printf_i+0x1f2>
 8017af6:	1b80      	subs	r0, r0, r6
 8017af8:	6060      	str	r0, [r4, #4]
 8017afa:	6863      	ldr	r3, [r4, #4]
 8017afc:	6123      	str	r3, [r4, #16]
 8017afe:	2300      	movs	r3, #0
 8017b00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017b04:	e7a8      	b.n	8017a58 <_printf_i+0x150>
 8017b06:	6923      	ldr	r3, [r4, #16]
 8017b08:	4632      	mov	r2, r6
 8017b0a:	4649      	mov	r1, r9
 8017b0c:	4640      	mov	r0, r8
 8017b0e:	47d0      	blx	sl
 8017b10:	3001      	adds	r0, #1
 8017b12:	d0ab      	beq.n	8017a6c <_printf_i+0x164>
 8017b14:	6823      	ldr	r3, [r4, #0]
 8017b16:	079b      	lsls	r3, r3, #30
 8017b18:	d413      	bmi.n	8017b42 <_printf_i+0x23a>
 8017b1a:	68e0      	ldr	r0, [r4, #12]
 8017b1c:	9b03      	ldr	r3, [sp, #12]
 8017b1e:	4298      	cmp	r0, r3
 8017b20:	bfb8      	it	lt
 8017b22:	4618      	movlt	r0, r3
 8017b24:	e7a4      	b.n	8017a70 <_printf_i+0x168>
 8017b26:	2301      	movs	r3, #1
 8017b28:	4632      	mov	r2, r6
 8017b2a:	4649      	mov	r1, r9
 8017b2c:	4640      	mov	r0, r8
 8017b2e:	47d0      	blx	sl
 8017b30:	3001      	adds	r0, #1
 8017b32:	d09b      	beq.n	8017a6c <_printf_i+0x164>
 8017b34:	3501      	adds	r5, #1
 8017b36:	68e3      	ldr	r3, [r4, #12]
 8017b38:	9903      	ldr	r1, [sp, #12]
 8017b3a:	1a5b      	subs	r3, r3, r1
 8017b3c:	42ab      	cmp	r3, r5
 8017b3e:	dcf2      	bgt.n	8017b26 <_printf_i+0x21e>
 8017b40:	e7eb      	b.n	8017b1a <_printf_i+0x212>
 8017b42:	2500      	movs	r5, #0
 8017b44:	f104 0619 	add.w	r6, r4, #25
 8017b48:	e7f5      	b.n	8017b36 <_printf_i+0x22e>
 8017b4a:	bf00      	nop
 8017b4c:	0802820e 	.word	0x0802820e
 8017b50:	0802821f 	.word	0x0802821f

08017b54 <_scanf_float>:
 8017b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b58:	b087      	sub	sp, #28
 8017b5a:	4617      	mov	r7, r2
 8017b5c:	9303      	str	r3, [sp, #12]
 8017b5e:	688b      	ldr	r3, [r1, #8]
 8017b60:	1e5a      	subs	r2, r3, #1
 8017b62:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8017b66:	bf83      	ittte	hi
 8017b68:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8017b6c:	195b      	addhi	r3, r3, r5
 8017b6e:	9302      	strhi	r3, [sp, #8]
 8017b70:	2300      	movls	r3, #0
 8017b72:	bf86      	itte	hi
 8017b74:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017b78:	608b      	strhi	r3, [r1, #8]
 8017b7a:	9302      	strls	r3, [sp, #8]
 8017b7c:	680b      	ldr	r3, [r1, #0]
 8017b7e:	468b      	mov	fp, r1
 8017b80:	2500      	movs	r5, #0
 8017b82:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8017b86:	f84b 3b1c 	str.w	r3, [fp], #28
 8017b8a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8017b8e:	4680      	mov	r8, r0
 8017b90:	460c      	mov	r4, r1
 8017b92:	465e      	mov	r6, fp
 8017b94:	46aa      	mov	sl, r5
 8017b96:	46a9      	mov	r9, r5
 8017b98:	9501      	str	r5, [sp, #4]
 8017b9a:	68a2      	ldr	r2, [r4, #8]
 8017b9c:	b152      	cbz	r2, 8017bb4 <_scanf_float+0x60>
 8017b9e:	683b      	ldr	r3, [r7, #0]
 8017ba0:	781b      	ldrb	r3, [r3, #0]
 8017ba2:	2b4e      	cmp	r3, #78	; 0x4e
 8017ba4:	d864      	bhi.n	8017c70 <_scanf_float+0x11c>
 8017ba6:	2b40      	cmp	r3, #64	; 0x40
 8017ba8:	d83c      	bhi.n	8017c24 <_scanf_float+0xd0>
 8017baa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8017bae:	b2c8      	uxtb	r0, r1
 8017bb0:	280e      	cmp	r0, #14
 8017bb2:	d93a      	bls.n	8017c2a <_scanf_float+0xd6>
 8017bb4:	f1b9 0f00 	cmp.w	r9, #0
 8017bb8:	d003      	beq.n	8017bc2 <_scanf_float+0x6e>
 8017bba:	6823      	ldr	r3, [r4, #0]
 8017bbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8017bc0:	6023      	str	r3, [r4, #0]
 8017bc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017bc6:	f1ba 0f01 	cmp.w	sl, #1
 8017bca:	f200 8113 	bhi.w	8017df4 <_scanf_float+0x2a0>
 8017bce:	455e      	cmp	r6, fp
 8017bd0:	f200 8105 	bhi.w	8017dde <_scanf_float+0x28a>
 8017bd4:	2501      	movs	r5, #1
 8017bd6:	4628      	mov	r0, r5
 8017bd8:	b007      	add	sp, #28
 8017bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017bde:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8017be2:	2a0d      	cmp	r2, #13
 8017be4:	d8e6      	bhi.n	8017bb4 <_scanf_float+0x60>
 8017be6:	a101      	add	r1, pc, #4	; (adr r1, 8017bec <_scanf_float+0x98>)
 8017be8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017bec:	08017d2b 	.word	0x08017d2b
 8017bf0:	08017bb5 	.word	0x08017bb5
 8017bf4:	08017bb5 	.word	0x08017bb5
 8017bf8:	08017bb5 	.word	0x08017bb5
 8017bfc:	08017d8b 	.word	0x08017d8b
 8017c00:	08017d63 	.word	0x08017d63
 8017c04:	08017bb5 	.word	0x08017bb5
 8017c08:	08017bb5 	.word	0x08017bb5
 8017c0c:	08017d39 	.word	0x08017d39
 8017c10:	08017bb5 	.word	0x08017bb5
 8017c14:	08017bb5 	.word	0x08017bb5
 8017c18:	08017bb5 	.word	0x08017bb5
 8017c1c:	08017bb5 	.word	0x08017bb5
 8017c20:	08017cf1 	.word	0x08017cf1
 8017c24:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8017c28:	e7db      	b.n	8017be2 <_scanf_float+0x8e>
 8017c2a:	290e      	cmp	r1, #14
 8017c2c:	d8c2      	bhi.n	8017bb4 <_scanf_float+0x60>
 8017c2e:	a001      	add	r0, pc, #4	; (adr r0, 8017c34 <_scanf_float+0xe0>)
 8017c30:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8017c34:	08017ce3 	.word	0x08017ce3
 8017c38:	08017bb5 	.word	0x08017bb5
 8017c3c:	08017ce3 	.word	0x08017ce3
 8017c40:	08017d77 	.word	0x08017d77
 8017c44:	08017bb5 	.word	0x08017bb5
 8017c48:	08017c91 	.word	0x08017c91
 8017c4c:	08017ccd 	.word	0x08017ccd
 8017c50:	08017ccd 	.word	0x08017ccd
 8017c54:	08017ccd 	.word	0x08017ccd
 8017c58:	08017ccd 	.word	0x08017ccd
 8017c5c:	08017ccd 	.word	0x08017ccd
 8017c60:	08017ccd 	.word	0x08017ccd
 8017c64:	08017ccd 	.word	0x08017ccd
 8017c68:	08017ccd 	.word	0x08017ccd
 8017c6c:	08017ccd 	.word	0x08017ccd
 8017c70:	2b6e      	cmp	r3, #110	; 0x6e
 8017c72:	d809      	bhi.n	8017c88 <_scanf_float+0x134>
 8017c74:	2b60      	cmp	r3, #96	; 0x60
 8017c76:	d8b2      	bhi.n	8017bde <_scanf_float+0x8a>
 8017c78:	2b54      	cmp	r3, #84	; 0x54
 8017c7a:	d077      	beq.n	8017d6c <_scanf_float+0x218>
 8017c7c:	2b59      	cmp	r3, #89	; 0x59
 8017c7e:	d199      	bne.n	8017bb4 <_scanf_float+0x60>
 8017c80:	2d07      	cmp	r5, #7
 8017c82:	d197      	bne.n	8017bb4 <_scanf_float+0x60>
 8017c84:	2508      	movs	r5, #8
 8017c86:	e029      	b.n	8017cdc <_scanf_float+0x188>
 8017c88:	2b74      	cmp	r3, #116	; 0x74
 8017c8a:	d06f      	beq.n	8017d6c <_scanf_float+0x218>
 8017c8c:	2b79      	cmp	r3, #121	; 0x79
 8017c8e:	e7f6      	b.n	8017c7e <_scanf_float+0x12a>
 8017c90:	6821      	ldr	r1, [r4, #0]
 8017c92:	05c8      	lsls	r0, r1, #23
 8017c94:	d51a      	bpl.n	8017ccc <_scanf_float+0x178>
 8017c96:	9b02      	ldr	r3, [sp, #8]
 8017c98:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8017c9c:	6021      	str	r1, [r4, #0]
 8017c9e:	f109 0901 	add.w	r9, r9, #1
 8017ca2:	b11b      	cbz	r3, 8017cac <_scanf_float+0x158>
 8017ca4:	3b01      	subs	r3, #1
 8017ca6:	3201      	adds	r2, #1
 8017ca8:	9302      	str	r3, [sp, #8]
 8017caa:	60a2      	str	r2, [r4, #8]
 8017cac:	68a3      	ldr	r3, [r4, #8]
 8017cae:	3b01      	subs	r3, #1
 8017cb0:	60a3      	str	r3, [r4, #8]
 8017cb2:	6923      	ldr	r3, [r4, #16]
 8017cb4:	3301      	adds	r3, #1
 8017cb6:	6123      	str	r3, [r4, #16]
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	3b01      	subs	r3, #1
 8017cbc:	2b00      	cmp	r3, #0
 8017cbe:	607b      	str	r3, [r7, #4]
 8017cc0:	f340 8084 	ble.w	8017dcc <_scanf_float+0x278>
 8017cc4:	683b      	ldr	r3, [r7, #0]
 8017cc6:	3301      	adds	r3, #1
 8017cc8:	603b      	str	r3, [r7, #0]
 8017cca:	e766      	b.n	8017b9a <_scanf_float+0x46>
 8017ccc:	eb1a 0f05 	cmn.w	sl, r5
 8017cd0:	f47f af70 	bne.w	8017bb4 <_scanf_float+0x60>
 8017cd4:	6822      	ldr	r2, [r4, #0]
 8017cd6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8017cda:	6022      	str	r2, [r4, #0]
 8017cdc:	f806 3b01 	strb.w	r3, [r6], #1
 8017ce0:	e7e4      	b.n	8017cac <_scanf_float+0x158>
 8017ce2:	6822      	ldr	r2, [r4, #0]
 8017ce4:	0610      	lsls	r0, r2, #24
 8017ce6:	f57f af65 	bpl.w	8017bb4 <_scanf_float+0x60>
 8017cea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8017cee:	e7f4      	b.n	8017cda <_scanf_float+0x186>
 8017cf0:	f1ba 0f00 	cmp.w	sl, #0
 8017cf4:	d10e      	bne.n	8017d14 <_scanf_float+0x1c0>
 8017cf6:	f1b9 0f00 	cmp.w	r9, #0
 8017cfa:	d10e      	bne.n	8017d1a <_scanf_float+0x1c6>
 8017cfc:	6822      	ldr	r2, [r4, #0]
 8017cfe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8017d02:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8017d06:	d108      	bne.n	8017d1a <_scanf_float+0x1c6>
 8017d08:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017d0c:	6022      	str	r2, [r4, #0]
 8017d0e:	f04f 0a01 	mov.w	sl, #1
 8017d12:	e7e3      	b.n	8017cdc <_scanf_float+0x188>
 8017d14:	f1ba 0f02 	cmp.w	sl, #2
 8017d18:	d055      	beq.n	8017dc6 <_scanf_float+0x272>
 8017d1a:	2d01      	cmp	r5, #1
 8017d1c:	d002      	beq.n	8017d24 <_scanf_float+0x1d0>
 8017d1e:	2d04      	cmp	r5, #4
 8017d20:	f47f af48 	bne.w	8017bb4 <_scanf_float+0x60>
 8017d24:	3501      	adds	r5, #1
 8017d26:	b2ed      	uxtb	r5, r5
 8017d28:	e7d8      	b.n	8017cdc <_scanf_float+0x188>
 8017d2a:	f1ba 0f01 	cmp.w	sl, #1
 8017d2e:	f47f af41 	bne.w	8017bb4 <_scanf_float+0x60>
 8017d32:	f04f 0a02 	mov.w	sl, #2
 8017d36:	e7d1      	b.n	8017cdc <_scanf_float+0x188>
 8017d38:	b97d      	cbnz	r5, 8017d5a <_scanf_float+0x206>
 8017d3a:	f1b9 0f00 	cmp.w	r9, #0
 8017d3e:	f47f af3c 	bne.w	8017bba <_scanf_float+0x66>
 8017d42:	6822      	ldr	r2, [r4, #0]
 8017d44:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8017d48:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8017d4c:	f47f af39 	bne.w	8017bc2 <_scanf_float+0x6e>
 8017d50:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017d54:	6022      	str	r2, [r4, #0]
 8017d56:	2501      	movs	r5, #1
 8017d58:	e7c0      	b.n	8017cdc <_scanf_float+0x188>
 8017d5a:	2d03      	cmp	r5, #3
 8017d5c:	d0e2      	beq.n	8017d24 <_scanf_float+0x1d0>
 8017d5e:	2d05      	cmp	r5, #5
 8017d60:	e7de      	b.n	8017d20 <_scanf_float+0x1cc>
 8017d62:	2d02      	cmp	r5, #2
 8017d64:	f47f af26 	bne.w	8017bb4 <_scanf_float+0x60>
 8017d68:	2503      	movs	r5, #3
 8017d6a:	e7b7      	b.n	8017cdc <_scanf_float+0x188>
 8017d6c:	2d06      	cmp	r5, #6
 8017d6e:	f47f af21 	bne.w	8017bb4 <_scanf_float+0x60>
 8017d72:	2507      	movs	r5, #7
 8017d74:	e7b2      	b.n	8017cdc <_scanf_float+0x188>
 8017d76:	6822      	ldr	r2, [r4, #0]
 8017d78:	0591      	lsls	r1, r2, #22
 8017d7a:	f57f af1b 	bpl.w	8017bb4 <_scanf_float+0x60>
 8017d7e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8017d82:	6022      	str	r2, [r4, #0]
 8017d84:	f8cd 9004 	str.w	r9, [sp, #4]
 8017d88:	e7a8      	b.n	8017cdc <_scanf_float+0x188>
 8017d8a:	6822      	ldr	r2, [r4, #0]
 8017d8c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8017d90:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8017d94:	d006      	beq.n	8017da4 <_scanf_float+0x250>
 8017d96:	0550      	lsls	r0, r2, #21
 8017d98:	f57f af0c 	bpl.w	8017bb4 <_scanf_float+0x60>
 8017d9c:	f1b9 0f00 	cmp.w	r9, #0
 8017da0:	f43f af0f 	beq.w	8017bc2 <_scanf_float+0x6e>
 8017da4:	0591      	lsls	r1, r2, #22
 8017da6:	bf58      	it	pl
 8017da8:	9901      	ldrpl	r1, [sp, #4]
 8017daa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017dae:	bf58      	it	pl
 8017db0:	eba9 0101 	subpl.w	r1, r9, r1
 8017db4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8017db8:	bf58      	it	pl
 8017dba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8017dbe:	6022      	str	r2, [r4, #0]
 8017dc0:	f04f 0900 	mov.w	r9, #0
 8017dc4:	e78a      	b.n	8017cdc <_scanf_float+0x188>
 8017dc6:	f04f 0a03 	mov.w	sl, #3
 8017dca:	e787      	b.n	8017cdc <_scanf_float+0x188>
 8017dcc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017dd0:	4639      	mov	r1, r7
 8017dd2:	4640      	mov	r0, r8
 8017dd4:	4798      	blx	r3
 8017dd6:	2800      	cmp	r0, #0
 8017dd8:	f43f aedf 	beq.w	8017b9a <_scanf_float+0x46>
 8017ddc:	e6ea      	b.n	8017bb4 <_scanf_float+0x60>
 8017dde:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017de2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017de6:	463a      	mov	r2, r7
 8017de8:	4640      	mov	r0, r8
 8017dea:	4798      	blx	r3
 8017dec:	6923      	ldr	r3, [r4, #16]
 8017dee:	3b01      	subs	r3, #1
 8017df0:	6123      	str	r3, [r4, #16]
 8017df2:	e6ec      	b.n	8017bce <_scanf_float+0x7a>
 8017df4:	1e6b      	subs	r3, r5, #1
 8017df6:	2b06      	cmp	r3, #6
 8017df8:	d825      	bhi.n	8017e46 <_scanf_float+0x2f2>
 8017dfa:	2d02      	cmp	r5, #2
 8017dfc:	d836      	bhi.n	8017e6c <_scanf_float+0x318>
 8017dfe:	455e      	cmp	r6, fp
 8017e00:	f67f aee8 	bls.w	8017bd4 <_scanf_float+0x80>
 8017e04:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017e08:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017e0c:	463a      	mov	r2, r7
 8017e0e:	4640      	mov	r0, r8
 8017e10:	4798      	blx	r3
 8017e12:	6923      	ldr	r3, [r4, #16]
 8017e14:	3b01      	subs	r3, #1
 8017e16:	6123      	str	r3, [r4, #16]
 8017e18:	e7f1      	b.n	8017dfe <_scanf_float+0x2aa>
 8017e1a:	9802      	ldr	r0, [sp, #8]
 8017e1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017e20:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8017e24:	9002      	str	r0, [sp, #8]
 8017e26:	463a      	mov	r2, r7
 8017e28:	4640      	mov	r0, r8
 8017e2a:	4798      	blx	r3
 8017e2c:	6923      	ldr	r3, [r4, #16]
 8017e2e:	3b01      	subs	r3, #1
 8017e30:	6123      	str	r3, [r4, #16]
 8017e32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017e36:	fa5f fa8a 	uxtb.w	sl, sl
 8017e3a:	f1ba 0f02 	cmp.w	sl, #2
 8017e3e:	d1ec      	bne.n	8017e1a <_scanf_float+0x2c6>
 8017e40:	3d03      	subs	r5, #3
 8017e42:	b2ed      	uxtb	r5, r5
 8017e44:	1b76      	subs	r6, r6, r5
 8017e46:	6823      	ldr	r3, [r4, #0]
 8017e48:	05da      	lsls	r2, r3, #23
 8017e4a:	d52f      	bpl.n	8017eac <_scanf_float+0x358>
 8017e4c:	055b      	lsls	r3, r3, #21
 8017e4e:	d510      	bpl.n	8017e72 <_scanf_float+0x31e>
 8017e50:	455e      	cmp	r6, fp
 8017e52:	f67f aebf 	bls.w	8017bd4 <_scanf_float+0x80>
 8017e56:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017e5a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017e5e:	463a      	mov	r2, r7
 8017e60:	4640      	mov	r0, r8
 8017e62:	4798      	blx	r3
 8017e64:	6923      	ldr	r3, [r4, #16]
 8017e66:	3b01      	subs	r3, #1
 8017e68:	6123      	str	r3, [r4, #16]
 8017e6a:	e7f1      	b.n	8017e50 <_scanf_float+0x2fc>
 8017e6c:	46aa      	mov	sl, r5
 8017e6e:	9602      	str	r6, [sp, #8]
 8017e70:	e7df      	b.n	8017e32 <_scanf_float+0x2de>
 8017e72:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8017e76:	6923      	ldr	r3, [r4, #16]
 8017e78:	2965      	cmp	r1, #101	; 0x65
 8017e7a:	f103 33ff 	add.w	r3, r3, #4294967295
 8017e7e:	f106 35ff 	add.w	r5, r6, #4294967295
 8017e82:	6123      	str	r3, [r4, #16]
 8017e84:	d00c      	beq.n	8017ea0 <_scanf_float+0x34c>
 8017e86:	2945      	cmp	r1, #69	; 0x45
 8017e88:	d00a      	beq.n	8017ea0 <_scanf_float+0x34c>
 8017e8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017e8e:	463a      	mov	r2, r7
 8017e90:	4640      	mov	r0, r8
 8017e92:	4798      	blx	r3
 8017e94:	6923      	ldr	r3, [r4, #16]
 8017e96:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8017e9a:	3b01      	subs	r3, #1
 8017e9c:	1eb5      	subs	r5, r6, #2
 8017e9e:	6123      	str	r3, [r4, #16]
 8017ea0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017ea4:	463a      	mov	r2, r7
 8017ea6:	4640      	mov	r0, r8
 8017ea8:	4798      	blx	r3
 8017eaa:	462e      	mov	r6, r5
 8017eac:	6825      	ldr	r5, [r4, #0]
 8017eae:	f015 0510 	ands.w	r5, r5, #16
 8017eb2:	d14d      	bne.n	8017f50 <_scanf_float+0x3fc>
 8017eb4:	7035      	strb	r5, [r6, #0]
 8017eb6:	6823      	ldr	r3, [r4, #0]
 8017eb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8017ebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017ec0:	d11a      	bne.n	8017ef8 <_scanf_float+0x3a4>
 8017ec2:	9b01      	ldr	r3, [sp, #4]
 8017ec4:	454b      	cmp	r3, r9
 8017ec6:	eba3 0209 	sub.w	r2, r3, r9
 8017eca:	d122      	bne.n	8017f12 <_scanf_float+0x3be>
 8017ecc:	2200      	movs	r2, #0
 8017ece:	4659      	mov	r1, fp
 8017ed0:	4640      	mov	r0, r8
 8017ed2:	f000 fe83 	bl	8018bdc <_strtod_r>
 8017ed6:	9b03      	ldr	r3, [sp, #12]
 8017ed8:	6821      	ldr	r1, [r4, #0]
 8017eda:	681b      	ldr	r3, [r3, #0]
 8017edc:	f011 0f02 	tst.w	r1, #2
 8017ee0:	f103 0204 	add.w	r2, r3, #4
 8017ee4:	d020      	beq.n	8017f28 <_scanf_float+0x3d4>
 8017ee6:	9903      	ldr	r1, [sp, #12]
 8017ee8:	600a      	str	r2, [r1, #0]
 8017eea:	681b      	ldr	r3, [r3, #0]
 8017eec:	ed83 0b00 	vstr	d0, [r3]
 8017ef0:	68e3      	ldr	r3, [r4, #12]
 8017ef2:	3301      	adds	r3, #1
 8017ef4:	60e3      	str	r3, [r4, #12]
 8017ef6:	e66e      	b.n	8017bd6 <_scanf_float+0x82>
 8017ef8:	9b04      	ldr	r3, [sp, #16]
 8017efa:	2b00      	cmp	r3, #0
 8017efc:	d0e6      	beq.n	8017ecc <_scanf_float+0x378>
 8017efe:	9905      	ldr	r1, [sp, #20]
 8017f00:	230a      	movs	r3, #10
 8017f02:	462a      	mov	r2, r5
 8017f04:	3101      	adds	r1, #1
 8017f06:	4640      	mov	r0, r8
 8017f08:	f000 fef2 	bl	8018cf0 <_strtol_r>
 8017f0c:	9b04      	ldr	r3, [sp, #16]
 8017f0e:	9e05      	ldr	r6, [sp, #20]
 8017f10:	1ac2      	subs	r2, r0, r3
 8017f12:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8017f16:	429e      	cmp	r6, r3
 8017f18:	bf28      	it	cs
 8017f1a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8017f1e:	490d      	ldr	r1, [pc, #52]	; (8017f54 <_scanf_float+0x400>)
 8017f20:	4630      	mov	r0, r6
 8017f22:	f000 f821 	bl	8017f68 <siprintf>
 8017f26:	e7d1      	b.n	8017ecc <_scanf_float+0x378>
 8017f28:	f011 0f04 	tst.w	r1, #4
 8017f2c:	9903      	ldr	r1, [sp, #12]
 8017f2e:	600a      	str	r2, [r1, #0]
 8017f30:	d1db      	bne.n	8017eea <_scanf_float+0x396>
 8017f32:	eeb4 0b40 	vcmp.f64	d0, d0
 8017f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f3a:	681e      	ldr	r6, [r3, #0]
 8017f3c:	d705      	bvc.n	8017f4a <_scanf_float+0x3f6>
 8017f3e:	4806      	ldr	r0, [pc, #24]	; (8017f58 <_scanf_float+0x404>)
 8017f40:	f000 f80c 	bl	8017f5c <nanf>
 8017f44:	ed86 0a00 	vstr	s0, [r6]
 8017f48:	e7d2      	b.n	8017ef0 <_scanf_float+0x39c>
 8017f4a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8017f4e:	e7f9      	b.n	8017f44 <_scanf_float+0x3f0>
 8017f50:	2500      	movs	r5, #0
 8017f52:	e640      	b.n	8017bd6 <_scanf_float+0x82>
 8017f54:	08028230 	.word	0x08028230
 8017f58:	08028648 	.word	0x08028648

08017f5c <nanf>:
 8017f5c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017f64 <nanf+0x8>
 8017f60:	4770      	bx	lr
 8017f62:	bf00      	nop
 8017f64:	7fc00000 	.word	0x7fc00000

08017f68 <siprintf>:
 8017f68:	b40e      	push	{r1, r2, r3}
 8017f6a:	b500      	push	{lr}
 8017f6c:	b09c      	sub	sp, #112	; 0x70
 8017f6e:	ab1d      	add	r3, sp, #116	; 0x74
 8017f70:	9002      	str	r0, [sp, #8]
 8017f72:	9006      	str	r0, [sp, #24]
 8017f74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017f78:	4809      	ldr	r0, [pc, #36]	; (8017fa0 <siprintf+0x38>)
 8017f7a:	9107      	str	r1, [sp, #28]
 8017f7c:	9104      	str	r1, [sp, #16]
 8017f7e:	4909      	ldr	r1, [pc, #36]	; (8017fa4 <siprintf+0x3c>)
 8017f80:	f853 2b04 	ldr.w	r2, [r3], #4
 8017f84:	9105      	str	r1, [sp, #20]
 8017f86:	6800      	ldr	r0, [r0, #0]
 8017f88:	9301      	str	r3, [sp, #4]
 8017f8a:	a902      	add	r1, sp, #8
 8017f8c:	f002 fe22 	bl	801abd4 <_svfiprintf_r>
 8017f90:	9b02      	ldr	r3, [sp, #8]
 8017f92:	2200      	movs	r2, #0
 8017f94:	701a      	strb	r2, [r3, #0]
 8017f96:	b01c      	add	sp, #112	; 0x70
 8017f98:	f85d eb04 	ldr.w	lr, [sp], #4
 8017f9c:	b003      	add	sp, #12
 8017f9e:	4770      	bx	lr
 8017fa0:	20000028 	.word	0x20000028
 8017fa4:	ffff0208 	.word	0xffff0208

08017fa8 <strncmp>:
 8017fa8:	b510      	push	{r4, lr}
 8017faa:	b16a      	cbz	r2, 8017fc8 <strncmp+0x20>
 8017fac:	3901      	subs	r1, #1
 8017fae:	1884      	adds	r4, r0, r2
 8017fb0:	f810 3b01 	ldrb.w	r3, [r0], #1
 8017fb4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017fb8:	4293      	cmp	r3, r2
 8017fba:	d103      	bne.n	8017fc4 <strncmp+0x1c>
 8017fbc:	42a0      	cmp	r0, r4
 8017fbe:	d001      	beq.n	8017fc4 <strncmp+0x1c>
 8017fc0:	2b00      	cmp	r3, #0
 8017fc2:	d1f5      	bne.n	8017fb0 <strncmp+0x8>
 8017fc4:	1a98      	subs	r0, r3, r2
 8017fc6:	bd10      	pop	{r4, pc}
 8017fc8:	4610      	mov	r0, r2
 8017fca:	e7fc      	b.n	8017fc6 <strncmp+0x1e>

08017fcc <strstr>:
 8017fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017fce:	780c      	ldrb	r4, [r1, #0]
 8017fd0:	b164      	cbz	r4, 8017fec <strstr+0x20>
 8017fd2:	4603      	mov	r3, r0
 8017fd4:	781a      	ldrb	r2, [r3, #0]
 8017fd6:	4618      	mov	r0, r3
 8017fd8:	1c5e      	adds	r6, r3, #1
 8017fda:	b90a      	cbnz	r2, 8017fe0 <strstr+0x14>
 8017fdc:	4610      	mov	r0, r2
 8017fde:	e005      	b.n	8017fec <strstr+0x20>
 8017fe0:	4294      	cmp	r4, r2
 8017fe2:	d108      	bne.n	8017ff6 <strstr+0x2a>
 8017fe4:	460d      	mov	r5, r1
 8017fe6:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8017fea:	b902      	cbnz	r2, 8017fee <strstr+0x22>
 8017fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017fee:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8017ff2:	4297      	cmp	r7, r2
 8017ff4:	d0f7      	beq.n	8017fe6 <strstr+0x1a>
 8017ff6:	4633      	mov	r3, r6
 8017ff8:	e7ec      	b.n	8017fd4 <strstr+0x8>

08017ffa <sulp>:
 8017ffa:	b570      	push	{r4, r5, r6, lr}
 8017ffc:	4604      	mov	r4, r0
 8017ffe:	460d      	mov	r5, r1
 8018000:	4616      	mov	r6, r2
 8018002:	ec45 4b10 	vmov	d0, r4, r5
 8018006:	f002 fb7f 	bl	801a708 <__ulp>
 801800a:	b17e      	cbz	r6, 801802c <sulp+0x32>
 801800c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8018010:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8018014:	2b00      	cmp	r3, #0
 8018016:	dd09      	ble.n	801802c <sulp+0x32>
 8018018:	051b      	lsls	r3, r3, #20
 801801a:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801801e:	2000      	movs	r0, #0
 8018020:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8018024:	ec41 0b17 	vmov	d7, r0, r1
 8018028:	ee20 0b07 	vmul.f64	d0, d0, d7
 801802c:	bd70      	pop	{r4, r5, r6, pc}
	...

08018030 <_strtod_l>:
 8018030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018034:	ed2d 8b0c 	vpush	{d8-d13}
 8018038:	b09d      	sub	sp, #116	; 0x74
 801803a:	461f      	mov	r7, r3
 801803c:	2300      	movs	r3, #0
 801803e:	9318      	str	r3, [sp, #96]	; 0x60
 8018040:	4ba6      	ldr	r3, [pc, #664]	; (80182dc <_strtod_l+0x2ac>)
 8018042:	9213      	str	r2, [sp, #76]	; 0x4c
 8018044:	681b      	ldr	r3, [r3, #0]
 8018046:	9308      	str	r3, [sp, #32]
 8018048:	4604      	mov	r4, r0
 801804a:	4618      	mov	r0, r3
 801804c:	468a      	mov	sl, r1
 801804e:	f7f0 f957 	bl	8008300 <strlen>
 8018052:	f04f 0800 	mov.w	r8, #0
 8018056:	4605      	mov	r5, r0
 8018058:	f04f 0900 	mov.w	r9, #0
 801805c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8018060:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018062:	781a      	ldrb	r2, [r3, #0]
 8018064:	2a2b      	cmp	r2, #43	; 0x2b
 8018066:	d04d      	beq.n	8018104 <_strtod_l+0xd4>
 8018068:	d83a      	bhi.n	80180e0 <_strtod_l+0xb0>
 801806a:	2a0d      	cmp	r2, #13
 801806c:	d833      	bhi.n	80180d6 <_strtod_l+0xa6>
 801806e:	2a08      	cmp	r2, #8
 8018070:	d833      	bhi.n	80180da <_strtod_l+0xaa>
 8018072:	2a00      	cmp	r2, #0
 8018074:	d03d      	beq.n	80180f2 <_strtod_l+0xc2>
 8018076:	2300      	movs	r3, #0
 8018078:	930b      	str	r3, [sp, #44]	; 0x2c
 801807a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801807c:	7833      	ldrb	r3, [r6, #0]
 801807e:	2b30      	cmp	r3, #48	; 0x30
 8018080:	f040 80b6 	bne.w	80181f0 <_strtod_l+0x1c0>
 8018084:	7873      	ldrb	r3, [r6, #1]
 8018086:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801808a:	2b58      	cmp	r3, #88	; 0x58
 801808c:	d16d      	bne.n	801816a <_strtod_l+0x13a>
 801808e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018090:	9301      	str	r3, [sp, #4]
 8018092:	ab18      	add	r3, sp, #96	; 0x60
 8018094:	9702      	str	r7, [sp, #8]
 8018096:	9300      	str	r3, [sp, #0]
 8018098:	4a91      	ldr	r2, [pc, #580]	; (80182e0 <_strtod_l+0x2b0>)
 801809a:	ab19      	add	r3, sp, #100	; 0x64
 801809c:	a917      	add	r1, sp, #92	; 0x5c
 801809e:	4620      	mov	r0, r4
 80180a0:	f001 fca0 	bl	80199e4 <__gethex>
 80180a4:	f010 0507 	ands.w	r5, r0, #7
 80180a8:	4607      	mov	r7, r0
 80180aa:	d005      	beq.n	80180b8 <_strtod_l+0x88>
 80180ac:	2d06      	cmp	r5, #6
 80180ae:	d12b      	bne.n	8018108 <_strtod_l+0xd8>
 80180b0:	3601      	adds	r6, #1
 80180b2:	2300      	movs	r3, #0
 80180b4:	9617      	str	r6, [sp, #92]	; 0x5c
 80180b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80180b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80180ba:	2b00      	cmp	r3, #0
 80180bc:	f040 856e 	bne.w	8018b9c <_strtod_l+0xb6c>
 80180c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80180c2:	b1e3      	cbz	r3, 80180fe <_strtod_l+0xce>
 80180c4:	ec49 8b17 	vmov	d7, r8, r9
 80180c8:	eeb1 0b47 	vneg.f64	d0, d7
 80180cc:	b01d      	add	sp, #116	; 0x74
 80180ce:	ecbd 8b0c 	vpop	{d8-d13}
 80180d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180d6:	2a20      	cmp	r2, #32
 80180d8:	d1cd      	bne.n	8018076 <_strtod_l+0x46>
 80180da:	3301      	adds	r3, #1
 80180dc:	9317      	str	r3, [sp, #92]	; 0x5c
 80180de:	e7bf      	b.n	8018060 <_strtod_l+0x30>
 80180e0:	2a2d      	cmp	r2, #45	; 0x2d
 80180e2:	d1c8      	bne.n	8018076 <_strtod_l+0x46>
 80180e4:	2201      	movs	r2, #1
 80180e6:	920b      	str	r2, [sp, #44]	; 0x2c
 80180e8:	1c5a      	adds	r2, r3, #1
 80180ea:	9217      	str	r2, [sp, #92]	; 0x5c
 80180ec:	785b      	ldrb	r3, [r3, #1]
 80180ee:	2b00      	cmp	r3, #0
 80180f0:	d1c3      	bne.n	801807a <_strtod_l+0x4a>
 80180f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80180f4:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	f040 854d 	bne.w	8018b98 <_strtod_l+0xb68>
 80180fe:	ec49 8b10 	vmov	d0, r8, r9
 8018102:	e7e3      	b.n	80180cc <_strtod_l+0x9c>
 8018104:	2200      	movs	r2, #0
 8018106:	e7ee      	b.n	80180e6 <_strtod_l+0xb6>
 8018108:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801810a:	b13a      	cbz	r2, 801811c <_strtod_l+0xec>
 801810c:	2135      	movs	r1, #53	; 0x35
 801810e:	a81a      	add	r0, sp, #104	; 0x68
 8018110:	f002 fc06 	bl	801a920 <__copybits>
 8018114:	9918      	ldr	r1, [sp, #96]	; 0x60
 8018116:	4620      	mov	r0, r4
 8018118:	f001 ffca 	bl	801a0b0 <_Bfree>
 801811c:	3d01      	subs	r5, #1
 801811e:	2d05      	cmp	r5, #5
 8018120:	d807      	bhi.n	8018132 <_strtod_l+0x102>
 8018122:	e8df f005 	tbb	[pc, r5]
 8018126:	0b0e      	.short	0x0b0e
 8018128:	030e1d18 	.word	0x030e1d18
 801812c:	f04f 0900 	mov.w	r9, #0
 8018130:	46c8      	mov	r8, r9
 8018132:	073b      	lsls	r3, r7, #28
 8018134:	d5c0      	bpl.n	80180b8 <_strtod_l+0x88>
 8018136:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 801813a:	e7bd      	b.n	80180b8 <_strtod_l+0x88>
 801813c:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 8018140:	e7f7      	b.n	8018132 <_strtod_l+0x102>
 8018142:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 8018146:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8018148:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801814c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8018150:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8018154:	e7ed      	b.n	8018132 <_strtod_l+0x102>
 8018156:	f8df 918c 	ldr.w	r9, [pc, #396]	; 80182e4 <_strtod_l+0x2b4>
 801815a:	f04f 0800 	mov.w	r8, #0
 801815e:	e7e8      	b.n	8018132 <_strtod_l+0x102>
 8018160:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8018164:	f04f 38ff 	mov.w	r8, #4294967295
 8018168:	e7e3      	b.n	8018132 <_strtod_l+0x102>
 801816a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801816c:	1c5a      	adds	r2, r3, #1
 801816e:	9217      	str	r2, [sp, #92]	; 0x5c
 8018170:	785b      	ldrb	r3, [r3, #1]
 8018172:	2b30      	cmp	r3, #48	; 0x30
 8018174:	d0f9      	beq.n	801816a <_strtod_l+0x13a>
 8018176:	2b00      	cmp	r3, #0
 8018178:	d09e      	beq.n	80180b8 <_strtod_l+0x88>
 801817a:	2301      	movs	r3, #1
 801817c:	9306      	str	r3, [sp, #24]
 801817e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018180:	930c      	str	r3, [sp, #48]	; 0x30
 8018182:	2300      	movs	r3, #0
 8018184:	9304      	str	r3, [sp, #16]
 8018186:	930a      	str	r3, [sp, #40]	; 0x28
 8018188:	461e      	mov	r6, r3
 801818a:	220a      	movs	r2, #10
 801818c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801818e:	f890 b000 	ldrb.w	fp, [r0]
 8018192:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 8018196:	b2d9      	uxtb	r1, r3
 8018198:	2909      	cmp	r1, #9
 801819a:	d92b      	bls.n	80181f4 <_strtod_l+0x1c4>
 801819c:	9908      	ldr	r1, [sp, #32]
 801819e:	462a      	mov	r2, r5
 80181a0:	f7ff ff02 	bl	8017fa8 <strncmp>
 80181a4:	2800      	cmp	r0, #0
 80181a6:	d035      	beq.n	8018214 <_strtod_l+0x1e4>
 80181a8:	2000      	movs	r0, #0
 80181aa:	465a      	mov	r2, fp
 80181ac:	4633      	mov	r3, r6
 80181ae:	4683      	mov	fp, r0
 80181b0:	4601      	mov	r1, r0
 80181b2:	2a65      	cmp	r2, #101	; 0x65
 80181b4:	d001      	beq.n	80181ba <_strtod_l+0x18a>
 80181b6:	2a45      	cmp	r2, #69	; 0x45
 80181b8:	d118      	bne.n	80181ec <_strtod_l+0x1bc>
 80181ba:	b91b      	cbnz	r3, 80181c4 <_strtod_l+0x194>
 80181bc:	9b06      	ldr	r3, [sp, #24]
 80181be:	4303      	orrs	r3, r0
 80181c0:	d097      	beq.n	80180f2 <_strtod_l+0xc2>
 80181c2:	2300      	movs	r3, #0
 80181c4:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 80181c8:	f10a 0201 	add.w	r2, sl, #1
 80181cc:	9217      	str	r2, [sp, #92]	; 0x5c
 80181ce:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80181d2:	2a2b      	cmp	r2, #43	; 0x2b
 80181d4:	d077      	beq.n	80182c6 <_strtod_l+0x296>
 80181d6:	2a2d      	cmp	r2, #45	; 0x2d
 80181d8:	d07d      	beq.n	80182d6 <_strtod_l+0x2a6>
 80181da:	f04f 0e00 	mov.w	lr, #0
 80181de:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80181e2:	2d09      	cmp	r5, #9
 80181e4:	f240 8084 	bls.w	80182f0 <_strtod_l+0x2c0>
 80181e8:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 80181ec:	2500      	movs	r5, #0
 80181ee:	e09f      	b.n	8018330 <_strtod_l+0x300>
 80181f0:	2300      	movs	r3, #0
 80181f2:	e7c3      	b.n	801817c <_strtod_l+0x14c>
 80181f4:	2e08      	cmp	r6, #8
 80181f6:	bfd5      	itete	le
 80181f8:	990a      	ldrle	r1, [sp, #40]	; 0x28
 80181fa:	9904      	ldrgt	r1, [sp, #16]
 80181fc:	fb02 3301 	mlale	r3, r2, r1, r3
 8018200:	fb02 3301 	mlagt	r3, r2, r1, r3
 8018204:	f100 0001 	add.w	r0, r0, #1
 8018208:	bfd4      	ite	le
 801820a:	930a      	strle	r3, [sp, #40]	; 0x28
 801820c:	9304      	strgt	r3, [sp, #16]
 801820e:	3601      	adds	r6, #1
 8018210:	9017      	str	r0, [sp, #92]	; 0x5c
 8018212:	e7bb      	b.n	801818c <_strtod_l+0x15c>
 8018214:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018216:	195a      	adds	r2, r3, r5
 8018218:	9217      	str	r2, [sp, #92]	; 0x5c
 801821a:	5d5a      	ldrb	r2, [r3, r5]
 801821c:	b3ae      	cbz	r6, 801828a <_strtod_l+0x25a>
 801821e:	4683      	mov	fp, r0
 8018220:	4633      	mov	r3, r6
 8018222:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8018226:	2909      	cmp	r1, #9
 8018228:	d912      	bls.n	8018250 <_strtod_l+0x220>
 801822a:	2101      	movs	r1, #1
 801822c:	e7c1      	b.n	80181b2 <_strtod_l+0x182>
 801822e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018230:	1c5a      	adds	r2, r3, #1
 8018232:	9217      	str	r2, [sp, #92]	; 0x5c
 8018234:	785a      	ldrb	r2, [r3, #1]
 8018236:	3001      	adds	r0, #1
 8018238:	2a30      	cmp	r2, #48	; 0x30
 801823a:	d0f8      	beq.n	801822e <_strtod_l+0x1fe>
 801823c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8018240:	2b08      	cmp	r3, #8
 8018242:	f200 84b0 	bhi.w	8018ba6 <_strtod_l+0xb76>
 8018246:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018248:	930c      	str	r3, [sp, #48]	; 0x30
 801824a:	4683      	mov	fp, r0
 801824c:	2000      	movs	r0, #0
 801824e:	4603      	mov	r3, r0
 8018250:	3a30      	subs	r2, #48	; 0x30
 8018252:	f100 0101 	add.w	r1, r0, #1
 8018256:	d012      	beq.n	801827e <_strtod_l+0x24e>
 8018258:	448b      	add	fp, r1
 801825a:	eb00 0c03 	add.w	ip, r0, r3
 801825e:	4619      	mov	r1, r3
 8018260:	250a      	movs	r5, #10
 8018262:	4561      	cmp	r1, ip
 8018264:	d113      	bne.n	801828e <_strtod_l+0x25e>
 8018266:	1819      	adds	r1, r3, r0
 8018268:	2908      	cmp	r1, #8
 801826a:	f103 0301 	add.w	r3, r3, #1
 801826e:	4403      	add	r3, r0
 8018270:	dc1d      	bgt.n	80182ae <_strtod_l+0x27e>
 8018272:	980a      	ldr	r0, [sp, #40]	; 0x28
 8018274:	210a      	movs	r1, #10
 8018276:	fb01 2200 	mla	r2, r1, r0, r2
 801827a:	920a      	str	r2, [sp, #40]	; 0x28
 801827c:	2100      	movs	r1, #0
 801827e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8018280:	1c50      	adds	r0, r2, #1
 8018282:	9017      	str	r0, [sp, #92]	; 0x5c
 8018284:	7852      	ldrb	r2, [r2, #1]
 8018286:	4608      	mov	r0, r1
 8018288:	e7cb      	b.n	8018222 <_strtod_l+0x1f2>
 801828a:	4630      	mov	r0, r6
 801828c:	e7d4      	b.n	8018238 <_strtod_l+0x208>
 801828e:	2908      	cmp	r1, #8
 8018290:	dc04      	bgt.n	801829c <_strtod_l+0x26c>
 8018292:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8018294:	436f      	muls	r7, r5
 8018296:	970a      	str	r7, [sp, #40]	; 0x28
 8018298:	3101      	adds	r1, #1
 801829a:	e7e2      	b.n	8018262 <_strtod_l+0x232>
 801829c:	f101 0e01 	add.w	lr, r1, #1
 80182a0:	f1be 0f10 	cmp.w	lr, #16
 80182a4:	bfde      	ittt	le
 80182a6:	9f04      	ldrle	r7, [sp, #16]
 80182a8:	436f      	mulle	r7, r5
 80182aa:	9704      	strle	r7, [sp, #16]
 80182ac:	e7f4      	b.n	8018298 <_strtod_l+0x268>
 80182ae:	2b10      	cmp	r3, #16
 80182b0:	bfdf      	itttt	le
 80182b2:	9804      	ldrle	r0, [sp, #16]
 80182b4:	210a      	movle	r1, #10
 80182b6:	fb01 2200 	mlale	r2, r1, r0, r2
 80182ba:	9204      	strle	r2, [sp, #16]
 80182bc:	e7de      	b.n	801827c <_strtod_l+0x24c>
 80182be:	f04f 0b00 	mov.w	fp, #0
 80182c2:	2101      	movs	r1, #1
 80182c4:	e77a      	b.n	80181bc <_strtod_l+0x18c>
 80182c6:	f04f 0e00 	mov.w	lr, #0
 80182ca:	f10a 0202 	add.w	r2, sl, #2
 80182ce:	9217      	str	r2, [sp, #92]	; 0x5c
 80182d0:	f89a 2002 	ldrb.w	r2, [sl, #2]
 80182d4:	e783      	b.n	80181de <_strtod_l+0x1ae>
 80182d6:	f04f 0e01 	mov.w	lr, #1
 80182da:	e7f6      	b.n	80182ca <_strtod_l+0x29a>
 80182dc:	08028488 	.word	0x08028488
 80182e0:	08028238 	.word	0x08028238
 80182e4:	7ff00000 	.word	0x7ff00000
 80182e8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80182ea:	1c55      	adds	r5, r2, #1
 80182ec:	9517      	str	r5, [sp, #92]	; 0x5c
 80182ee:	7852      	ldrb	r2, [r2, #1]
 80182f0:	2a30      	cmp	r2, #48	; 0x30
 80182f2:	d0f9      	beq.n	80182e8 <_strtod_l+0x2b8>
 80182f4:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80182f8:	2d08      	cmp	r5, #8
 80182fa:	f63f af77 	bhi.w	80181ec <_strtod_l+0x1bc>
 80182fe:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8018302:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8018304:	9208      	str	r2, [sp, #32]
 8018306:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8018308:	1c55      	adds	r5, r2, #1
 801830a:	9517      	str	r5, [sp, #92]	; 0x5c
 801830c:	7852      	ldrb	r2, [r2, #1]
 801830e:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8018312:	2f09      	cmp	r7, #9
 8018314:	d937      	bls.n	8018386 <_strtod_l+0x356>
 8018316:	9f08      	ldr	r7, [sp, #32]
 8018318:	1bed      	subs	r5, r5, r7
 801831a:	2d08      	cmp	r5, #8
 801831c:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8018320:	dc02      	bgt.n	8018328 <_strtod_l+0x2f8>
 8018322:	4565      	cmp	r5, ip
 8018324:	bfa8      	it	ge
 8018326:	4665      	movge	r5, ip
 8018328:	f1be 0f00 	cmp.w	lr, #0
 801832c:	d000      	beq.n	8018330 <_strtod_l+0x300>
 801832e:	426d      	negs	r5, r5
 8018330:	2b00      	cmp	r3, #0
 8018332:	d14f      	bne.n	80183d4 <_strtod_l+0x3a4>
 8018334:	9b06      	ldr	r3, [sp, #24]
 8018336:	4303      	orrs	r3, r0
 8018338:	f47f aebe 	bne.w	80180b8 <_strtod_l+0x88>
 801833c:	2900      	cmp	r1, #0
 801833e:	f47f aed8 	bne.w	80180f2 <_strtod_l+0xc2>
 8018342:	2a69      	cmp	r2, #105	; 0x69
 8018344:	d027      	beq.n	8018396 <_strtod_l+0x366>
 8018346:	dc24      	bgt.n	8018392 <_strtod_l+0x362>
 8018348:	2a49      	cmp	r2, #73	; 0x49
 801834a:	d024      	beq.n	8018396 <_strtod_l+0x366>
 801834c:	2a4e      	cmp	r2, #78	; 0x4e
 801834e:	f47f aed0 	bne.w	80180f2 <_strtod_l+0xc2>
 8018352:	499b      	ldr	r1, [pc, #620]	; (80185c0 <_strtod_l+0x590>)
 8018354:	a817      	add	r0, sp, #92	; 0x5c
 8018356:	f001 fd9d 	bl	8019e94 <__match>
 801835a:	2800      	cmp	r0, #0
 801835c:	f43f aec9 	beq.w	80180f2 <_strtod_l+0xc2>
 8018360:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018362:	781b      	ldrb	r3, [r3, #0]
 8018364:	2b28      	cmp	r3, #40	; 0x28
 8018366:	d12d      	bne.n	80183c4 <_strtod_l+0x394>
 8018368:	4996      	ldr	r1, [pc, #600]	; (80185c4 <_strtod_l+0x594>)
 801836a:	aa1a      	add	r2, sp, #104	; 0x68
 801836c:	a817      	add	r0, sp, #92	; 0x5c
 801836e:	f001 fda5 	bl	8019ebc <__hexnan>
 8018372:	2805      	cmp	r0, #5
 8018374:	d126      	bne.n	80183c4 <_strtod_l+0x394>
 8018376:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018378:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 801837c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8018380:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8018384:	e698      	b.n	80180b8 <_strtod_l+0x88>
 8018386:	250a      	movs	r5, #10
 8018388:	fb05 250c 	mla	r5, r5, ip, r2
 801838c:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8018390:	e7b9      	b.n	8018306 <_strtod_l+0x2d6>
 8018392:	2a6e      	cmp	r2, #110	; 0x6e
 8018394:	e7db      	b.n	801834e <_strtod_l+0x31e>
 8018396:	498c      	ldr	r1, [pc, #560]	; (80185c8 <_strtod_l+0x598>)
 8018398:	a817      	add	r0, sp, #92	; 0x5c
 801839a:	f001 fd7b 	bl	8019e94 <__match>
 801839e:	2800      	cmp	r0, #0
 80183a0:	f43f aea7 	beq.w	80180f2 <_strtod_l+0xc2>
 80183a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80183a6:	4989      	ldr	r1, [pc, #548]	; (80185cc <_strtod_l+0x59c>)
 80183a8:	3b01      	subs	r3, #1
 80183aa:	a817      	add	r0, sp, #92	; 0x5c
 80183ac:	9317      	str	r3, [sp, #92]	; 0x5c
 80183ae:	f001 fd71 	bl	8019e94 <__match>
 80183b2:	b910      	cbnz	r0, 80183ba <_strtod_l+0x38a>
 80183b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80183b6:	3301      	adds	r3, #1
 80183b8:	9317      	str	r3, [sp, #92]	; 0x5c
 80183ba:	f8df 9224 	ldr.w	r9, [pc, #548]	; 80185e0 <_strtod_l+0x5b0>
 80183be:	f04f 0800 	mov.w	r8, #0
 80183c2:	e679      	b.n	80180b8 <_strtod_l+0x88>
 80183c4:	4882      	ldr	r0, [pc, #520]	; (80185d0 <_strtod_l+0x5a0>)
 80183c6:	f002 fd07 	bl	801add8 <nan>
 80183ca:	ed8d 0b04 	vstr	d0, [sp, #16]
 80183ce:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80183d2:	e671      	b.n	80180b8 <_strtod_l+0x88>
 80183d4:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 80183d8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80183dc:	eba5 020b 	sub.w	r2, r5, fp
 80183e0:	2e00      	cmp	r6, #0
 80183e2:	bf08      	it	eq
 80183e4:	461e      	moveq	r6, r3
 80183e6:	2b10      	cmp	r3, #16
 80183e8:	ed8d 7b08 	vstr	d7, [sp, #32]
 80183ec:	9206      	str	r2, [sp, #24]
 80183ee:	461a      	mov	r2, r3
 80183f0:	bfa8      	it	ge
 80183f2:	2210      	movge	r2, #16
 80183f4:	2b09      	cmp	r3, #9
 80183f6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80183fa:	dd0e      	ble.n	801841a <_strtod_l+0x3ea>
 80183fc:	4975      	ldr	r1, [pc, #468]	; (80185d4 <_strtod_l+0x5a4>)
 80183fe:	eddd 7a04 	vldr	s15, [sp, #16]
 8018402:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8018406:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 801840a:	ed9d 5b08 	vldr	d5, [sp, #32]
 801840e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8018412:	eea5 7b06 	vfma.f64	d7, d5, d6
 8018416:	ec59 8b17 	vmov	r8, r9, d7
 801841a:	2b0f      	cmp	r3, #15
 801841c:	dc37      	bgt.n	801848e <_strtod_l+0x45e>
 801841e:	9906      	ldr	r1, [sp, #24]
 8018420:	2900      	cmp	r1, #0
 8018422:	f43f ae49 	beq.w	80180b8 <_strtod_l+0x88>
 8018426:	dd23      	ble.n	8018470 <_strtod_l+0x440>
 8018428:	2916      	cmp	r1, #22
 801842a:	dc0b      	bgt.n	8018444 <_strtod_l+0x414>
 801842c:	4b69      	ldr	r3, [pc, #420]	; (80185d4 <_strtod_l+0x5a4>)
 801842e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8018432:	ed93 7b00 	vldr	d7, [r3]
 8018436:	ec49 8b16 	vmov	d6, r8, r9
 801843a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801843e:	ec59 8b17 	vmov	r8, r9, d7
 8018442:	e639      	b.n	80180b8 <_strtod_l+0x88>
 8018444:	9806      	ldr	r0, [sp, #24]
 8018446:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 801844a:	4281      	cmp	r1, r0
 801844c:	db1f      	blt.n	801848e <_strtod_l+0x45e>
 801844e:	4a61      	ldr	r2, [pc, #388]	; (80185d4 <_strtod_l+0x5a4>)
 8018450:	f1c3 030f 	rsb	r3, r3, #15
 8018454:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8018458:	ed91 7b00 	vldr	d7, [r1]
 801845c:	ec49 8b16 	vmov	d6, r8, r9
 8018460:	1ac3      	subs	r3, r0, r3
 8018462:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8018466:	ee27 7b06 	vmul.f64	d7, d7, d6
 801846a:	ed92 6b00 	vldr	d6, [r2]
 801846e:	e7e4      	b.n	801843a <_strtod_l+0x40a>
 8018470:	9906      	ldr	r1, [sp, #24]
 8018472:	3116      	adds	r1, #22
 8018474:	db0b      	blt.n	801848e <_strtod_l+0x45e>
 8018476:	4b57      	ldr	r3, [pc, #348]	; (80185d4 <_strtod_l+0x5a4>)
 8018478:	ebab 0505 	sub.w	r5, fp, r5
 801847c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8018480:	ed95 7b00 	vldr	d7, [r5]
 8018484:	ec49 8b16 	vmov	d6, r8, r9
 8018488:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801848c:	e7d7      	b.n	801843e <_strtod_l+0x40e>
 801848e:	9906      	ldr	r1, [sp, #24]
 8018490:	1a9a      	subs	r2, r3, r2
 8018492:	440a      	add	r2, r1
 8018494:	2a00      	cmp	r2, #0
 8018496:	dd74      	ble.n	8018582 <_strtod_l+0x552>
 8018498:	f012 000f 	ands.w	r0, r2, #15
 801849c:	d00a      	beq.n	80184b4 <_strtod_l+0x484>
 801849e:	494d      	ldr	r1, [pc, #308]	; (80185d4 <_strtod_l+0x5a4>)
 80184a0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80184a4:	ed91 7b00 	vldr	d7, [r1]
 80184a8:	ec49 8b16 	vmov	d6, r8, r9
 80184ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 80184b0:	ec59 8b17 	vmov	r8, r9, d7
 80184b4:	f032 020f 	bics.w	r2, r2, #15
 80184b8:	d04f      	beq.n	801855a <_strtod_l+0x52a>
 80184ba:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 80184be:	dd22      	ble.n	8018506 <_strtod_l+0x4d6>
 80184c0:	2500      	movs	r5, #0
 80184c2:	462e      	mov	r6, r5
 80184c4:	950a      	str	r5, [sp, #40]	; 0x28
 80184c6:	462f      	mov	r7, r5
 80184c8:	2322      	movs	r3, #34	; 0x22
 80184ca:	f8df 9114 	ldr.w	r9, [pc, #276]	; 80185e0 <_strtod_l+0x5b0>
 80184ce:	6023      	str	r3, [r4, #0]
 80184d0:	f04f 0800 	mov.w	r8, #0
 80184d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80184d6:	2b00      	cmp	r3, #0
 80184d8:	f43f adee 	beq.w	80180b8 <_strtod_l+0x88>
 80184dc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80184de:	4620      	mov	r0, r4
 80184e0:	f001 fde6 	bl	801a0b0 <_Bfree>
 80184e4:	4639      	mov	r1, r7
 80184e6:	4620      	mov	r0, r4
 80184e8:	f001 fde2 	bl	801a0b0 <_Bfree>
 80184ec:	4631      	mov	r1, r6
 80184ee:	4620      	mov	r0, r4
 80184f0:	f001 fdde 	bl	801a0b0 <_Bfree>
 80184f4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80184f6:	4620      	mov	r0, r4
 80184f8:	f001 fdda 	bl	801a0b0 <_Bfree>
 80184fc:	4629      	mov	r1, r5
 80184fe:	4620      	mov	r0, r4
 8018500:	f001 fdd6 	bl	801a0b0 <_Bfree>
 8018504:	e5d8      	b.n	80180b8 <_strtod_l+0x88>
 8018506:	e9cd 8904 	strd	r8, r9, [sp, #16]
 801850a:	2000      	movs	r0, #0
 801850c:	4f32      	ldr	r7, [pc, #200]	; (80185d8 <_strtod_l+0x5a8>)
 801850e:	1112      	asrs	r2, r2, #4
 8018510:	4601      	mov	r1, r0
 8018512:	2a01      	cmp	r2, #1
 8018514:	dc24      	bgt.n	8018560 <_strtod_l+0x530>
 8018516:	b108      	cbz	r0, 801851c <_strtod_l+0x4ec>
 8018518:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801851c:	4a2e      	ldr	r2, [pc, #184]	; (80185d8 <_strtod_l+0x5a8>)
 801851e:	482f      	ldr	r0, [pc, #188]	; (80185dc <_strtod_l+0x5ac>)
 8018520:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8018524:	ed91 7b00 	vldr	d7, [r1]
 8018528:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801852c:	ec49 8b16 	vmov	d6, r8, r9
 8018530:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018534:	ed8d 7b04 	vstr	d7, [sp, #16]
 8018538:	9905      	ldr	r1, [sp, #20]
 801853a:	4a29      	ldr	r2, [pc, #164]	; (80185e0 <_strtod_l+0x5b0>)
 801853c:	400a      	ands	r2, r1
 801853e:	4282      	cmp	r2, r0
 8018540:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8018544:	d8bc      	bhi.n	80184c0 <_strtod_l+0x490>
 8018546:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801854a:	4282      	cmp	r2, r0
 801854c:	bf86      	itte	hi
 801854e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80185e4 <_strtod_l+0x5b4>
 8018552:	f04f 38ff 	movhi.w	r8, #4294967295
 8018556:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 801855a:	2200      	movs	r2, #0
 801855c:	9204      	str	r2, [sp, #16]
 801855e:	e07f      	b.n	8018660 <_strtod_l+0x630>
 8018560:	f012 0f01 	tst.w	r2, #1
 8018564:	d00a      	beq.n	801857c <_strtod_l+0x54c>
 8018566:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 801856a:	ed90 7b00 	vldr	d7, [r0]
 801856e:	ed9d 6b04 	vldr	d6, [sp, #16]
 8018572:	ee26 7b07 	vmul.f64	d7, d6, d7
 8018576:	ed8d 7b04 	vstr	d7, [sp, #16]
 801857a:	2001      	movs	r0, #1
 801857c:	3101      	adds	r1, #1
 801857e:	1052      	asrs	r2, r2, #1
 8018580:	e7c7      	b.n	8018512 <_strtod_l+0x4e2>
 8018582:	d0ea      	beq.n	801855a <_strtod_l+0x52a>
 8018584:	4252      	negs	r2, r2
 8018586:	f012 000f 	ands.w	r0, r2, #15
 801858a:	d00a      	beq.n	80185a2 <_strtod_l+0x572>
 801858c:	4911      	ldr	r1, [pc, #68]	; (80185d4 <_strtod_l+0x5a4>)
 801858e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8018592:	ed91 7b00 	vldr	d7, [r1]
 8018596:	ec49 8b16 	vmov	d6, r8, r9
 801859a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801859e:	ec59 8b17 	vmov	r8, r9, d7
 80185a2:	1112      	asrs	r2, r2, #4
 80185a4:	d0d9      	beq.n	801855a <_strtod_l+0x52a>
 80185a6:	2a1f      	cmp	r2, #31
 80185a8:	dd1e      	ble.n	80185e8 <_strtod_l+0x5b8>
 80185aa:	2500      	movs	r5, #0
 80185ac:	462e      	mov	r6, r5
 80185ae:	950a      	str	r5, [sp, #40]	; 0x28
 80185b0:	462f      	mov	r7, r5
 80185b2:	2322      	movs	r3, #34	; 0x22
 80185b4:	f04f 0800 	mov.w	r8, #0
 80185b8:	f04f 0900 	mov.w	r9, #0
 80185bc:	6023      	str	r3, [r4, #0]
 80185be:	e789      	b.n	80184d4 <_strtod_l+0x4a4>
 80185c0:	08028209 	.word	0x08028209
 80185c4:	0802824c 	.word	0x0802824c
 80185c8:	08028201 	.word	0x08028201
 80185cc:	0802838c 	.word	0x0802838c
 80185d0:	08028648 	.word	0x08028648
 80185d4:	08028528 	.word	0x08028528
 80185d8:	08028500 	.word	0x08028500
 80185dc:	7ca00000 	.word	0x7ca00000
 80185e0:	7ff00000 	.word	0x7ff00000
 80185e4:	7fefffff 	.word	0x7fefffff
 80185e8:	f012 0110 	ands.w	r1, r2, #16
 80185ec:	bf18      	it	ne
 80185ee:	216a      	movne	r1, #106	; 0x6a
 80185f0:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80185f4:	9104      	str	r1, [sp, #16]
 80185f6:	49c0      	ldr	r1, [pc, #768]	; (80188f8 <_strtod_l+0x8c8>)
 80185f8:	2000      	movs	r0, #0
 80185fa:	07d7      	lsls	r7, r2, #31
 80185fc:	d508      	bpl.n	8018610 <_strtod_l+0x5e0>
 80185fe:	ed9d 6b08 	vldr	d6, [sp, #32]
 8018602:	ed91 7b00 	vldr	d7, [r1]
 8018606:	ee26 7b07 	vmul.f64	d7, d6, d7
 801860a:	ed8d 7b08 	vstr	d7, [sp, #32]
 801860e:	2001      	movs	r0, #1
 8018610:	1052      	asrs	r2, r2, #1
 8018612:	f101 0108 	add.w	r1, r1, #8
 8018616:	d1f0      	bne.n	80185fa <_strtod_l+0x5ca>
 8018618:	b108      	cbz	r0, 801861e <_strtod_l+0x5ee>
 801861a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 801861e:	9a04      	ldr	r2, [sp, #16]
 8018620:	b1ba      	cbz	r2, 8018652 <_strtod_l+0x622>
 8018622:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8018626:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 801862a:	2a00      	cmp	r2, #0
 801862c:	4649      	mov	r1, r9
 801862e:	dd10      	ble.n	8018652 <_strtod_l+0x622>
 8018630:	2a1f      	cmp	r2, #31
 8018632:	f340 8132 	ble.w	801889a <_strtod_l+0x86a>
 8018636:	2a34      	cmp	r2, #52	; 0x34
 8018638:	bfde      	ittt	le
 801863a:	3a20      	suble	r2, #32
 801863c:	f04f 30ff 	movle.w	r0, #4294967295
 8018640:	fa00 f202 	lslle.w	r2, r0, r2
 8018644:	f04f 0800 	mov.w	r8, #0
 8018648:	bfcc      	ite	gt
 801864a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801864e:	ea02 0901 	andle.w	r9, r2, r1
 8018652:	ec49 8b17 	vmov	d7, r8, r9
 8018656:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801865a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801865e:	d0a4      	beq.n	80185aa <_strtod_l+0x57a>
 8018660:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018662:	9200      	str	r2, [sp, #0]
 8018664:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018666:	4632      	mov	r2, r6
 8018668:	4620      	mov	r0, r4
 801866a:	f001 fd8d 	bl	801a188 <__s2b>
 801866e:	900a      	str	r0, [sp, #40]	; 0x28
 8018670:	2800      	cmp	r0, #0
 8018672:	f43f af25 	beq.w	80184c0 <_strtod_l+0x490>
 8018676:	9b06      	ldr	r3, [sp, #24]
 8018678:	ebab 0505 	sub.w	r5, fp, r5
 801867c:	2b00      	cmp	r3, #0
 801867e:	bfb4      	ite	lt
 8018680:	462b      	movlt	r3, r5
 8018682:	2300      	movge	r3, #0
 8018684:	930c      	str	r3, [sp, #48]	; 0x30
 8018686:	9b06      	ldr	r3, [sp, #24]
 8018688:	ed9f 9b95 	vldr	d9, [pc, #596]	; 80188e0 <_strtod_l+0x8b0>
 801868c:	ed9f ab96 	vldr	d10, [pc, #600]	; 80188e8 <_strtod_l+0x8b8>
 8018690:	ed9f bb97 	vldr	d11, [pc, #604]	; 80188f0 <_strtod_l+0x8c0>
 8018694:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018698:	2500      	movs	r5, #0
 801869a:	9312      	str	r3, [sp, #72]	; 0x48
 801869c:	462e      	mov	r6, r5
 801869e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80186a0:	4620      	mov	r0, r4
 80186a2:	6859      	ldr	r1, [r3, #4]
 80186a4:	f001 fcc4 	bl	801a030 <_Balloc>
 80186a8:	4607      	mov	r7, r0
 80186aa:	2800      	cmp	r0, #0
 80186ac:	f43f af0c 	beq.w	80184c8 <_strtod_l+0x498>
 80186b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80186b2:	691a      	ldr	r2, [r3, #16]
 80186b4:	3202      	adds	r2, #2
 80186b6:	f103 010c 	add.w	r1, r3, #12
 80186ba:	0092      	lsls	r2, r2, #2
 80186bc:	300c      	adds	r0, #12
 80186be:	f7fe fdf1 	bl	80172a4 <memcpy>
 80186c2:	ec49 8b10 	vmov	d0, r8, r9
 80186c6:	aa1a      	add	r2, sp, #104	; 0x68
 80186c8:	a919      	add	r1, sp, #100	; 0x64
 80186ca:	4620      	mov	r0, r4
 80186cc:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80186d0:	f002 f896 	bl	801a800 <__d2b>
 80186d4:	9018      	str	r0, [sp, #96]	; 0x60
 80186d6:	2800      	cmp	r0, #0
 80186d8:	f43f aef6 	beq.w	80184c8 <_strtod_l+0x498>
 80186dc:	2101      	movs	r1, #1
 80186de:	4620      	mov	r0, r4
 80186e0:	f001 fdec 	bl	801a2bc <__i2b>
 80186e4:	4606      	mov	r6, r0
 80186e6:	2800      	cmp	r0, #0
 80186e8:	f43f aeee 	beq.w	80184c8 <_strtod_l+0x498>
 80186ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80186ee:	991a      	ldr	r1, [sp, #104]	; 0x68
 80186f0:	2b00      	cmp	r3, #0
 80186f2:	bfab      	itete	ge
 80186f4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80186f6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80186f8:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 80186fc:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 8018700:	bfac      	ite	ge
 8018702:	eb03 0b02 	addge.w	fp, r3, r2
 8018706:	eba2 0a03 	sublt.w	sl, r2, r3
 801870a:	9a04      	ldr	r2, [sp, #16]
 801870c:	1a9b      	subs	r3, r3, r2
 801870e:	440b      	add	r3, r1
 8018710:	4a7a      	ldr	r2, [pc, #488]	; (80188fc <_strtod_l+0x8cc>)
 8018712:	3b01      	subs	r3, #1
 8018714:	4293      	cmp	r3, r2
 8018716:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 801871a:	f280 80d1 	bge.w	80188c0 <_strtod_l+0x890>
 801871e:	1ad2      	subs	r2, r2, r3
 8018720:	2a1f      	cmp	r2, #31
 8018722:	eba1 0102 	sub.w	r1, r1, r2
 8018726:	f04f 0001 	mov.w	r0, #1
 801872a:	f300 80bd 	bgt.w	80188a8 <_strtod_l+0x878>
 801872e:	fa00 f302 	lsl.w	r3, r0, r2
 8018732:	930e      	str	r3, [sp, #56]	; 0x38
 8018734:	2300      	movs	r3, #0
 8018736:	930d      	str	r3, [sp, #52]	; 0x34
 8018738:	eb0b 0301 	add.w	r3, fp, r1
 801873c:	9a04      	ldr	r2, [sp, #16]
 801873e:	459b      	cmp	fp, r3
 8018740:	448a      	add	sl, r1
 8018742:	4492      	add	sl, r2
 8018744:	465a      	mov	r2, fp
 8018746:	bfa8      	it	ge
 8018748:	461a      	movge	r2, r3
 801874a:	4552      	cmp	r2, sl
 801874c:	bfa8      	it	ge
 801874e:	4652      	movge	r2, sl
 8018750:	2a00      	cmp	r2, #0
 8018752:	bfc2      	ittt	gt
 8018754:	1a9b      	subgt	r3, r3, r2
 8018756:	ebaa 0a02 	subgt.w	sl, sl, r2
 801875a:	ebab 0b02 	subgt.w	fp, fp, r2
 801875e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018760:	2a00      	cmp	r2, #0
 8018762:	dd18      	ble.n	8018796 <_strtod_l+0x766>
 8018764:	4631      	mov	r1, r6
 8018766:	4620      	mov	r0, r4
 8018768:	9315      	str	r3, [sp, #84]	; 0x54
 801876a:	f001 fe63 	bl	801a434 <__pow5mult>
 801876e:	4606      	mov	r6, r0
 8018770:	2800      	cmp	r0, #0
 8018772:	f43f aea9 	beq.w	80184c8 <_strtod_l+0x498>
 8018776:	4601      	mov	r1, r0
 8018778:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801877a:	4620      	mov	r0, r4
 801877c:	f001 fdb4 	bl	801a2e8 <__multiply>
 8018780:	9014      	str	r0, [sp, #80]	; 0x50
 8018782:	2800      	cmp	r0, #0
 8018784:	f43f aea0 	beq.w	80184c8 <_strtod_l+0x498>
 8018788:	9918      	ldr	r1, [sp, #96]	; 0x60
 801878a:	4620      	mov	r0, r4
 801878c:	f001 fc90 	bl	801a0b0 <_Bfree>
 8018790:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018792:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018794:	9218      	str	r2, [sp, #96]	; 0x60
 8018796:	2b00      	cmp	r3, #0
 8018798:	f300 8097 	bgt.w	80188ca <_strtod_l+0x89a>
 801879c:	9b06      	ldr	r3, [sp, #24]
 801879e:	2b00      	cmp	r3, #0
 80187a0:	dd08      	ble.n	80187b4 <_strtod_l+0x784>
 80187a2:	4639      	mov	r1, r7
 80187a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80187a6:	4620      	mov	r0, r4
 80187a8:	f001 fe44 	bl	801a434 <__pow5mult>
 80187ac:	4607      	mov	r7, r0
 80187ae:	2800      	cmp	r0, #0
 80187b0:	f43f ae8a 	beq.w	80184c8 <_strtod_l+0x498>
 80187b4:	f1ba 0f00 	cmp.w	sl, #0
 80187b8:	dd08      	ble.n	80187cc <_strtod_l+0x79c>
 80187ba:	4639      	mov	r1, r7
 80187bc:	4652      	mov	r2, sl
 80187be:	4620      	mov	r0, r4
 80187c0:	f001 fe92 	bl	801a4e8 <__lshift>
 80187c4:	4607      	mov	r7, r0
 80187c6:	2800      	cmp	r0, #0
 80187c8:	f43f ae7e 	beq.w	80184c8 <_strtod_l+0x498>
 80187cc:	f1bb 0f00 	cmp.w	fp, #0
 80187d0:	dd08      	ble.n	80187e4 <_strtod_l+0x7b4>
 80187d2:	4631      	mov	r1, r6
 80187d4:	465a      	mov	r2, fp
 80187d6:	4620      	mov	r0, r4
 80187d8:	f001 fe86 	bl	801a4e8 <__lshift>
 80187dc:	4606      	mov	r6, r0
 80187de:	2800      	cmp	r0, #0
 80187e0:	f43f ae72 	beq.w	80184c8 <_strtod_l+0x498>
 80187e4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80187e6:	463a      	mov	r2, r7
 80187e8:	4620      	mov	r0, r4
 80187ea:	f001 ff05 	bl	801a5f8 <__mdiff>
 80187ee:	4605      	mov	r5, r0
 80187f0:	2800      	cmp	r0, #0
 80187f2:	f43f ae69 	beq.w	80184c8 <_strtod_l+0x498>
 80187f6:	2300      	movs	r3, #0
 80187f8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80187fc:	60c3      	str	r3, [r0, #12]
 80187fe:	4631      	mov	r1, r6
 8018800:	f001 fede 	bl	801a5c0 <__mcmp>
 8018804:	2800      	cmp	r0, #0
 8018806:	da7f      	bge.n	8018908 <_strtod_l+0x8d8>
 8018808:	ea5a 0308 	orrs.w	r3, sl, r8
 801880c:	f040 80a5 	bne.w	801895a <_strtod_l+0x92a>
 8018810:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018814:	2b00      	cmp	r3, #0
 8018816:	f040 80a0 	bne.w	801895a <_strtod_l+0x92a>
 801881a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801881e:	0d1b      	lsrs	r3, r3, #20
 8018820:	051b      	lsls	r3, r3, #20
 8018822:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8018826:	f240 8098 	bls.w	801895a <_strtod_l+0x92a>
 801882a:	696b      	ldr	r3, [r5, #20]
 801882c:	b91b      	cbnz	r3, 8018836 <_strtod_l+0x806>
 801882e:	692b      	ldr	r3, [r5, #16]
 8018830:	2b01      	cmp	r3, #1
 8018832:	f340 8092 	ble.w	801895a <_strtod_l+0x92a>
 8018836:	4629      	mov	r1, r5
 8018838:	2201      	movs	r2, #1
 801883a:	4620      	mov	r0, r4
 801883c:	f001 fe54 	bl	801a4e8 <__lshift>
 8018840:	4631      	mov	r1, r6
 8018842:	4605      	mov	r5, r0
 8018844:	f001 febc 	bl	801a5c0 <__mcmp>
 8018848:	2800      	cmp	r0, #0
 801884a:	f340 8086 	ble.w	801895a <_strtod_l+0x92a>
 801884e:	9904      	ldr	r1, [sp, #16]
 8018850:	4a2b      	ldr	r2, [pc, #172]	; (8018900 <_strtod_l+0x8d0>)
 8018852:	464b      	mov	r3, r9
 8018854:	2900      	cmp	r1, #0
 8018856:	f000 80a1 	beq.w	801899c <_strtod_l+0x96c>
 801885a:	ea02 0109 	and.w	r1, r2, r9
 801885e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8018862:	f300 809b 	bgt.w	801899c <_strtod_l+0x96c>
 8018866:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801886a:	f77f aea2 	ble.w	80185b2 <_strtod_l+0x582>
 801886e:	4a25      	ldr	r2, [pc, #148]	; (8018904 <_strtod_l+0x8d4>)
 8018870:	2300      	movs	r3, #0
 8018872:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8018876:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 801887a:	ec49 8b17 	vmov	d7, r8, r9
 801887e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018882:	ed8d 7b04 	vstr	d7, [sp, #16]
 8018886:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801888a:	4313      	orrs	r3, r2
 801888c:	bf08      	it	eq
 801888e:	2322      	moveq	r3, #34	; 0x22
 8018890:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8018894:	bf08      	it	eq
 8018896:	6023      	streq	r3, [r4, #0]
 8018898:	e620      	b.n	80184dc <_strtod_l+0x4ac>
 801889a:	f04f 31ff 	mov.w	r1, #4294967295
 801889e:	fa01 f202 	lsl.w	r2, r1, r2
 80188a2:	ea02 0808 	and.w	r8, r2, r8
 80188a6:	e6d4      	b.n	8018652 <_strtod_l+0x622>
 80188a8:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 80188ac:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80188b0:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 80188b4:	33e2      	adds	r3, #226	; 0xe2
 80188b6:	fa00 f303 	lsl.w	r3, r0, r3
 80188ba:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 80188be:	e73b      	b.n	8018738 <_strtod_l+0x708>
 80188c0:	2000      	movs	r0, #0
 80188c2:	2301      	movs	r3, #1
 80188c4:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 80188c8:	e736      	b.n	8018738 <_strtod_l+0x708>
 80188ca:	9918      	ldr	r1, [sp, #96]	; 0x60
 80188cc:	461a      	mov	r2, r3
 80188ce:	4620      	mov	r0, r4
 80188d0:	f001 fe0a 	bl	801a4e8 <__lshift>
 80188d4:	9018      	str	r0, [sp, #96]	; 0x60
 80188d6:	2800      	cmp	r0, #0
 80188d8:	f47f af60 	bne.w	801879c <_strtod_l+0x76c>
 80188dc:	e5f4      	b.n	80184c8 <_strtod_l+0x498>
 80188de:	bf00      	nop
 80188e0:	94a03595 	.word	0x94a03595
 80188e4:	3fcfffff 	.word	0x3fcfffff
 80188e8:	94a03595 	.word	0x94a03595
 80188ec:	3fdfffff 	.word	0x3fdfffff
 80188f0:	35afe535 	.word	0x35afe535
 80188f4:	3fe00000 	.word	0x3fe00000
 80188f8:	08028260 	.word	0x08028260
 80188fc:	fffffc02 	.word	0xfffffc02
 8018900:	7ff00000 	.word	0x7ff00000
 8018904:	39500000 	.word	0x39500000
 8018908:	46cb      	mov	fp, r9
 801890a:	d165      	bne.n	80189d8 <_strtod_l+0x9a8>
 801890c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018910:	f1ba 0f00 	cmp.w	sl, #0
 8018914:	d02a      	beq.n	801896c <_strtod_l+0x93c>
 8018916:	4aaa      	ldr	r2, [pc, #680]	; (8018bc0 <_strtod_l+0xb90>)
 8018918:	4293      	cmp	r3, r2
 801891a:	d12b      	bne.n	8018974 <_strtod_l+0x944>
 801891c:	9b04      	ldr	r3, [sp, #16]
 801891e:	4641      	mov	r1, r8
 8018920:	b1fb      	cbz	r3, 8018962 <_strtod_l+0x932>
 8018922:	4aa8      	ldr	r2, [pc, #672]	; (8018bc4 <_strtod_l+0xb94>)
 8018924:	ea09 0202 	and.w	r2, r9, r2
 8018928:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801892c:	f04f 30ff 	mov.w	r0, #4294967295
 8018930:	d81a      	bhi.n	8018968 <_strtod_l+0x938>
 8018932:	0d12      	lsrs	r2, r2, #20
 8018934:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8018938:	fa00 f303 	lsl.w	r3, r0, r3
 801893c:	4299      	cmp	r1, r3
 801893e:	d119      	bne.n	8018974 <_strtod_l+0x944>
 8018940:	4ba1      	ldr	r3, [pc, #644]	; (8018bc8 <_strtod_l+0xb98>)
 8018942:	459b      	cmp	fp, r3
 8018944:	d102      	bne.n	801894c <_strtod_l+0x91c>
 8018946:	3101      	adds	r1, #1
 8018948:	f43f adbe 	beq.w	80184c8 <_strtod_l+0x498>
 801894c:	4b9d      	ldr	r3, [pc, #628]	; (8018bc4 <_strtod_l+0xb94>)
 801894e:	ea0b 0303 	and.w	r3, fp, r3
 8018952:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8018956:	f04f 0800 	mov.w	r8, #0
 801895a:	9b04      	ldr	r3, [sp, #16]
 801895c:	2b00      	cmp	r3, #0
 801895e:	d186      	bne.n	801886e <_strtod_l+0x83e>
 8018960:	e5bc      	b.n	80184dc <_strtod_l+0x4ac>
 8018962:	f04f 33ff 	mov.w	r3, #4294967295
 8018966:	e7e9      	b.n	801893c <_strtod_l+0x90c>
 8018968:	4603      	mov	r3, r0
 801896a:	e7e7      	b.n	801893c <_strtod_l+0x90c>
 801896c:	ea53 0308 	orrs.w	r3, r3, r8
 8018970:	f43f af6d 	beq.w	801884e <_strtod_l+0x81e>
 8018974:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018976:	b1db      	cbz	r3, 80189b0 <_strtod_l+0x980>
 8018978:	ea13 0f0b 	tst.w	r3, fp
 801897c:	d0ed      	beq.n	801895a <_strtod_l+0x92a>
 801897e:	9a04      	ldr	r2, [sp, #16]
 8018980:	4640      	mov	r0, r8
 8018982:	4649      	mov	r1, r9
 8018984:	f1ba 0f00 	cmp.w	sl, #0
 8018988:	d016      	beq.n	80189b8 <_strtod_l+0x988>
 801898a:	f7ff fb36 	bl	8017ffa <sulp>
 801898e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8018992:	ee37 7b00 	vadd.f64	d7, d7, d0
 8018996:	ec59 8b17 	vmov	r8, r9, d7
 801899a:	e7de      	b.n	801895a <_strtod_l+0x92a>
 801899c:	4013      	ands	r3, r2
 801899e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80189a2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80189a6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80189aa:	f04f 38ff 	mov.w	r8, #4294967295
 80189ae:	e7d4      	b.n	801895a <_strtod_l+0x92a>
 80189b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80189b2:	ea13 0f08 	tst.w	r3, r8
 80189b6:	e7e1      	b.n	801897c <_strtod_l+0x94c>
 80189b8:	f7ff fb1f 	bl	8017ffa <sulp>
 80189bc:	ed9d 7b08 	vldr	d7, [sp, #32]
 80189c0:	ee37 7b40 	vsub.f64	d7, d7, d0
 80189c4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80189c8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80189cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80189d0:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80189d4:	d1c1      	bne.n	801895a <_strtod_l+0x92a>
 80189d6:	e5ec      	b.n	80185b2 <_strtod_l+0x582>
 80189d8:	4631      	mov	r1, r6
 80189da:	4628      	mov	r0, r5
 80189dc:	f001 ff6c 	bl	801a8b8 <__ratio>
 80189e0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80189e4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80189e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80189ec:	d867      	bhi.n	8018abe <_strtod_l+0xa8e>
 80189ee:	f1ba 0f00 	cmp.w	sl, #0
 80189f2:	d044      	beq.n	8018a7e <_strtod_l+0xa4e>
 80189f4:	4b75      	ldr	r3, [pc, #468]	; (8018bcc <_strtod_l+0xb9c>)
 80189f6:	2200      	movs	r2, #0
 80189f8:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 80189fc:	4971      	ldr	r1, [pc, #452]	; (8018bc4 <_strtod_l+0xb94>)
 80189fe:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8018bd8 <_strtod_l+0xba8>
 8018a02:	ea0b 0001 	and.w	r0, fp, r1
 8018a06:	4560      	cmp	r0, ip
 8018a08:	900d      	str	r0, [sp, #52]	; 0x34
 8018a0a:	f040 808b 	bne.w	8018b24 <_strtod_l+0xaf4>
 8018a0e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8018a12:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8018a16:	ec49 8b10 	vmov	d0, r8, r9
 8018a1a:	ec43 2b1c 	vmov	d12, r2, r3
 8018a1e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8018a22:	f001 fe71 	bl	801a708 <__ulp>
 8018a26:	ec49 8b1d 	vmov	d13, r8, r9
 8018a2a:	eeac db00 	vfma.f64	d13, d12, d0
 8018a2e:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 8018a32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018a34:	4963      	ldr	r1, [pc, #396]	; (8018bc4 <_strtod_l+0xb94>)
 8018a36:	4a66      	ldr	r2, [pc, #408]	; (8018bd0 <_strtod_l+0xba0>)
 8018a38:	4019      	ands	r1, r3
 8018a3a:	4291      	cmp	r1, r2
 8018a3c:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8018a40:	d947      	bls.n	8018ad2 <_strtod_l+0xaa2>
 8018a42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018a44:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8018a48:	4293      	cmp	r3, r2
 8018a4a:	d103      	bne.n	8018a54 <_strtod_l+0xa24>
 8018a4c:	9b08      	ldr	r3, [sp, #32]
 8018a4e:	3301      	adds	r3, #1
 8018a50:	f43f ad3a 	beq.w	80184c8 <_strtod_l+0x498>
 8018a54:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8018bc8 <_strtod_l+0xb98>
 8018a58:	f04f 38ff 	mov.w	r8, #4294967295
 8018a5c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8018a5e:	4620      	mov	r0, r4
 8018a60:	f001 fb26 	bl	801a0b0 <_Bfree>
 8018a64:	4639      	mov	r1, r7
 8018a66:	4620      	mov	r0, r4
 8018a68:	f001 fb22 	bl	801a0b0 <_Bfree>
 8018a6c:	4631      	mov	r1, r6
 8018a6e:	4620      	mov	r0, r4
 8018a70:	f001 fb1e 	bl	801a0b0 <_Bfree>
 8018a74:	4629      	mov	r1, r5
 8018a76:	4620      	mov	r0, r4
 8018a78:	f001 fb1a 	bl	801a0b0 <_Bfree>
 8018a7c:	e60f      	b.n	801869e <_strtod_l+0x66e>
 8018a7e:	f1b8 0f00 	cmp.w	r8, #0
 8018a82:	d112      	bne.n	8018aaa <_strtod_l+0xa7a>
 8018a84:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018a88:	b9b3      	cbnz	r3, 8018ab8 <_strtod_l+0xa88>
 8018a8a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8018a8e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8018a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a96:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8018a9a:	d401      	bmi.n	8018aa0 <_strtod_l+0xa70>
 8018a9c:	ee20 8b08 	vmul.f64	d8, d0, d8
 8018aa0:	eeb1 7b48 	vneg.f64	d7, d8
 8018aa4:	ec53 2b17 	vmov	r2, r3, d7
 8018aa8:	e7a8      	b.n	80189fc <_strtod_l+0x9cc>
 8018aaa:	f1b8 0f01 	cmp.w	r8, #1
 8018aae:	d103      	bne.n	8018ab8 <_strtod_l+0xa88>
 8018ab0:	f1b9 0f00 	cmp.w	r9, #0
 8018ab4:	f43f ad7d 	beq.w	80185b2 <_strtod_l+0x582>
 8018ab8:	4b46      	ldr	r3, [pc, #280]	; (8018bd4 <_strtod_l+0xba4>)
 8018aba:	2200      	movs	r2, #0
 8018abc:	e79c      	b.n	80189f8 <_strtod_l+0x9c8>
 8018abe:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8018ac2:	ee20 8b08 	vmul.f64	d8, d0, d8
 8018ac6:	f1ba 0f00 	cmp.w	sl, #0
 8018aca:	d0e9      	beq.n	8018aa0 <_strtod_l+0xa70>
 8018acc:	ec53 2b18 	vmov	r2, r3, d8
 8018ad0:	e794      	b.n	80189fc <_strtod_l+0x9cc>
 8018ad2:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8018ad6:	9b04      	ldr	r3, [sp, #16]
 8018ad8:	2b00      	cmp	r3, #0
 8018ada:	d1bf      	bne.n	8018a5c <_strtod_l+0xa2c>
 8018adc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8018ae0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018ae2:	0d1b      	lsrs	r3, r3, #20
 8018ae4:	051b      	lsls	r3, r3, #20
 8018ae6:	429a      	cmp	r2, r3
 8018ae8:	d1b8      	bne.n	8018a5c <_strtod_l+0xa2c>
 8018aea:	ec51 0b18 	vmov	r0, r1, d8
 8018aee:	f7ef fe33 	bl	8008758 <__aeabi_d2lz>
 8018af2:	f7ef fdeb 	bl	80086cc <__aeabi_l2d>
 8018af6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018afa:	ec41 0b17 	vmov	d7, r0, r1
 8018afe:	ea43 0308 	orr.w	r3, r3, r8
 8018b02:	ea53 030a 	orrs.w	r3, r3, sl
 8018b06:	ee38 8b47 	vsub.f64	d8, d8, d7
 8018b0a:	d03e      	beq.n	8018b8a <_strtod_l+0xb5a>
 8018b0c:	eeb4 8bca 	vcmpe.f64	d8, d10
 8018b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b14:	f53f ace2 	bmi.w	80184dc <_strtod_l+0x4ac>
 8018b18:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8018b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b20:	dd9c      	ble.n	8018a5c <_strtod_l+0xa2c>
 8018b22:	e4db      	b.n	80184dc <_strtod_l+0x4ac>
 8018b24:	9904      	ldr	r1, [sp, #16]
 8018b26:	b301      	cbz	r1, 8018b6a <_strtod_l+0xb3a>
 8018b28:	990d      	ldr	r1, [sp, #52]	; 0x34
 8018b2a:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8018b2e:	d81c      	bhi.n	8018b6a <_strtod_l+0xb3a>
 8018b30:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8018bb8 <_strtod_l+0xb88>
 8018b34:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8018b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b3c:	d811      	bhi.n	8018b62 <_strtod_l+0xb32>
 8018b3e:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8018b42:	ee18 3a10 	vmov	r3, s16
 8018b46:	2b01      	cmp	r3, #1
 8018b48:	bf38      	it	cc
 8018b4a:	2301      	movcc	r3, #1
 8018b4c:	ee08 3a10 	vmov	s16, r3
 8018b50:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8018b54:	f1ba 0f00 	cmp.w	sl, #0
 8018b58:	d114      	bne.n	8018b84 <_strtod_l+0xb54>
 8018b5a:	eeb1 7b48 	vneg.f64	d7, d8
 8018b5e:	ec53 2b17 	vmov	r2, r3, d7
 8018b62:	980d      	ldr	r0, [sp, #52]	; 0x34
 8018b64:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8018b68:	1a0b      	subs	r3, r1, r0
 8018b6a:	ed9d 0b08 	vldr	d0, [sp, #32]
 8018b6e:	ec43 2b1c 	vmov	d12, r2, r3
 8018b72:	f001 fdc9 	bl	801a708 <__ulp>
 8018b76:	ed9d 7b08 	vldr	d7, [sp, #32]
 8018b7a:	eeac 7b00 	vfma.f64	d7, d12, d0
 8018b7e:	ec59 8b17 	vmov	r8, r9, d7
 8018b82:	e7a8      	b.n	8018ad6 <_strtod_l+0xaa6>
 8018b84:	ec53 2b18 	vmov	r2, r3, d8
 8018b88:	e7eb      	b.n	8018b62 <_strtod_l+0xb32>
 8018b8a:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8018b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b92:	f57f af63 	bpl.w	8018a5c <_strtod_l+0xa2c>
 8018b96:	e4a1      	b.n	80184dc <_strtod_l+0x4ac>
 8018b98:	2300      	movs	r3, #0
 8018b9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8018b9c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018b9e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018ba0:	6013      	str	r3, [r2, #0]
 8018ba2:	f7ff ba8d 	b.w	80180c0 <_strtod_l+0x90>
 8018ba6:	2a65      	cmp	r2, #101	; 0x65
 8018ba8:	f43f ab89 	beq.w	80182be <_strtod_l+0x28e>
 8018bac:	2a45      	cmp	r2, #69	; 0x45
 8018bae:	f43f ab86 	beq.w	80182be <_strtod_l+0x28e>
 8018bb2:	2101      	movs	r1, #1
 8018bb4:	f7ff bbbe 	b.w	8018334 <_strtod_l+0x304>
 8018bb8:	ffc00000 	.word	0xffc00000
 8018bbc:	41dfffff 	.word	0x41dfffff
 8018bc0:	000fffff 	.word	0x000fffff
 8018bc4:	7ff00000 	.word	0x7ff00000
 8018bc8:	7fefffff 	.word	0x7fefffff
 8018bcc:	3ff00000 	.word	0x3ff00000
 8018bd0:	7c9fffff 	.word	0x7c9fffff
 8018bd4:	bff00000 	.word	0xbff00000
 8018bd8:	7fe00000 	.word	0x7fe00000

08018bdc <_strtod_r>:
 8018bdc:	4b01      	ldr	r3, [pc, #4]	; (8018be4 <_strtod_r+0x8>)
 8018bde:	f7ff ba27 	b.w	8018030 <_strtod_l>
 8018be2:	bf00      	nop
 8018be4:	20000090 	.word	0x20000090

08018be8 <_strtol_l.isra.0>:
 8018be8:	2b01      	cmp	r3, #1
 8018bea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018bee:	d001      	beq.n	8018bf4 <_strtol_l.isra.0+0xc>
 8018bf0:	2b24      	cmp	r3, #36	; 0x24
 8018bf2:	d906      	bls.n	8018c02 <_strtol_l.isra.0+0x1a>
 8018bf4:	f7fe fb2c 	bl	8017250 <__errno>
 8018bf8:	2316      	movs	r3, #22
 8018bfa:	6003      	str	r3, [r0, #0]
 8018bfc:	2000      	movs	r0, #0
 8018bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018c02:	4f3a      	ldr	r7, [pc, #232]	; (8018cec <_strtol_l.isra.0+0x104>)
 8018c04:	468e      	mov	lr, r1
 8018c06:	4676      	mov	r6, lr
 8018c08:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8018c0c:	5de5      	ldrb	r5, [r4, r7]
 8018c0e:	f015 0508 	ands.w	r5, r5, #8
 8018c12:	d1f8      	bne.n	8018c06 <_strtol_l.isra.0+0x1e>
 8018c14:	2c2d      	cmp	r4, #45	; 0x2d
 8018c16:	d134      	bne.n	8018c82 <_strtol_l.isra.0+0x9a>
 8018c18:	f89e 4000 	ldrb.w	r4, [lr]
 8018c1c:	f04f 0801 	mov.w	r8, #1
 8018c20:	f106 0e02 	add.w	lr, r6, #2
 8018c24:	2b00      	cmp	r3, #0
 8018c26:	d05c      	beq.n	8018ce2 <_strtol_l.isra.0+0xfa>
 8018c28:	2b10      	cmp	r3, #16
 8018c2a:	d10c      	bne.n	8018c46 <_strtol_l.isra.0+0x5e>
 8018c2c:	2c30      	cmp	r4, #48	; 0x30
 8018c2e:	d10a      	bne.n	8018c46 <_strtol_l.isra.0+0x5e>
 8018c30:	f89e 4000 	ldrb.w	r4, [lr]
 8018c34:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8018c38:	2c58      	cmp	r4, #88	; 0x58
 8018c3a:	d14d      	bne.n	8018cd8 <_strtol_l.isra.0+0xf0>
 8018c3c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8018c40:	2310      	movs	r3, #16
 8018c42:	f10e 0e02 	add.w	lr, lr, #2
 8018c46:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8018c4a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8018c4e:	2600      	movs	r6, #0
 8018c50:	fbbc f9f3 	udiv	r9, ip, r3
 8018c54:	4635      	mov	r5, r6
 8018c56:	fb03 ca19 	mls	sl, r3, r9, ip
 8018c5a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8018c5e:	2f09      	cmp	r7, #9
 8018c60:	d818      	bhi.n	8018c94 <_strtol_l.isra.0+0xac>
 8018c62:	463c      	mov	r4, r7
 8018c64:	42a3      	cmp	r3, r4
 8018c66:	dd24      	ble.n	8018cb2 <_strtol_l.isra.0+0xca>
 8018c68:	2e00      	cmp	r6, #0
 8018c6a:	db1f      	blt.n	8018cac <_strtol_l.isra.0+0xc4>
 8018c6c:	45a9      	cmp	r9, r5
 8018c6e:	d31d      	bcc.n	8018cac <_strtol_l.isra.0+0xc4>
 8018c70:	d101      	bne.n	8018c76 <_strtol_l.isra.0+0x8e>
 8018c72:	45a2      	cmp	sl, r4
 8018c74:	db1a      	blt.n	8018cac <_strtol_l.isra.0+0xc4>
 8018c76:	fb05 4503 	mla	r5, r5, r3, r4
 8018c7a:	2601      	movs	r6, #1
 8018c7c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8018c80:	e7eb      	b.n	8018c5a <_strtol_l.isra.0+0x72>
 8018c82:	2c2b      	cmp	r4, #43	; 0x2b
 8018c84:	bf08      	it	eq
 8018c86:	f89e 4000 	ldrbeq.w	r4, [lr]
 8018c8a:	46a8      	mov	r8, r5
 8018c8c:	bf08      	it	eq
 8018c8e:	f106 0e02 	addeq.w	lr, r6, #2
 8018c92:	e7c7      	b.n	8018c24 <_strtol_l.isra.0+0x3c>
 8018c94:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8018c98:	2f19      	cmp	r7, #25
 8018c9a:	d801      	bhi.n	8018ca0 <_strtol_l.isra.0+0xb8>
 8018c9c:	3c37      	subs	r4, #55	; 0x37
 8018c9e:	e7e1      	b.n	8018c64 <_strtol_l.isra.0+0x7c>
 8018ca0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8018ca4:	2f19      	cmp	r7, #25
 8018ca6:	d804      	bhi.n	8018cb2 <_strtol_l.isra.0+0xca>
 8018ca8:	3c57      	subs	r4, #87	; 0x57
 8018caa:	e7db      	b.n	8018c64 <_strtol_l.isra.0+0x7c>
 8018cac:	f04f 36ff 	mov.w	r6, #4294967295
 8018cb0:	e7e4      	b.n	8018c7c <_strtol_l.isra.0+0x94>
 8018cb2:	2e00      	cmp	r6, #0
 8018cb4:	da05      	bge.n	8018cc2 <_strtol_l.isra.0+0xda>
 8018cb6:	2322      	movs	r3, #34	; 0x22
 8018cb8:	6003      	str	r3, [r0, #0]
 8018cba:	4665      	mov	r5, ip
 8018cbc:	b942      	cbnz	r2, 8018cd0 <_strtol_l.isra.0+0xe8>
 8018cbe:	4628      	mov	r0, r5
 8018cc0:	e79d      	b.n	8018bfe <_strtol_l.isra.0+0x16>
 8018cc2:	f1b8 0f00 	cmp.w	r8, #0
 8018cc6:	d000      	beq.n	8018cca <_strtol_l.isra.0+0xe2>
 8018cc8:	426d      	negs	r5, r5
 8018cca:	2a00      	cmp	r2, #0
 8018ccc:	d0f7      	beq.n	8018cbe <_strtol_l.isra.0+0xd6>
 8018cce:	b10e      	cbz	r6, 8018cd4 <_strtol_l.isra.0+0xec>
 8018cd0:	f10e 31ff 	add.w	r1, lr, #4294967295
 8018cd4:	6011      	str	r1, [r2, #0]
 8018cd6:	e7f2      	b.n	8018cbe <_strtol_l.isra.0+0xd6>
 8018cd8:	2430      	movs	r4, #48	; 0x30
 8018cda:	2b00      	cmp	r3, #0
 8018cdc:	d1b3      	bne.n	8018c46 <_strtol_l.isra.0+0x5e>
 8018cde:	2308      	movs	r3, #8
 8018ce0:	e7b1      	b.n	8018c46 <_strtol_l.isra.0+0x5e>
 8018ce2:	2c30      	cmp	r4, #48	; 0x30
 8018ce4:	d0a4      	beq.n	8018c30 <_strtol_l.isra.0+0x48>
 8018ce6:	230a      	movs	r3, #10
 8018ce8:	e7ad      	b.n	8018c46 <_strtol_l.isra.0+0x5e>
 8018cea:	bf00      	nop
 8018cec:	08028289 	.word	0x08028289

08018cf0 <_strtol_r>:
 8018cf0:	f7ff bf7a 	b.w	8018be8 <_strtol_l.isra.0>

08018cf4 <quorem>:
 8018cf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cf8:	6903      	ldr	r3, [r0, #16]
 8018cfa:	690c      	ldr	r4, [r1, #16]
 8018cfc:	42a3      	cmp	r3, r4
 8018cfe:	4607      	mov	r7, r0
 8018d00:	f2c0 8081 	blt.w	8018e06 <quorem+0x112>
 8018d04:	3c01      	subs	r4, #1
 8018d06:	f101 0814 	add.w	r8, r1, #20
 8018d0a:	f100 0514 	add.w	r5, r0, #20
 8018d0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018d12:	9301      	str	r3, [sp, #4]
 8018d14:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8018d18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018d1c:	3301      	adds	r3, #1
 8018d1e:	429a      	cmp	r2, r3
 8018d20:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8018d24:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8018d28:	fbb2 f6f3 	udiv	r6, r2, r3
 8018d2c:	d331      	bcc.n	8018d92 <quorem+0x9e>
 8018d2e:	f04f 0e00 	mov.w	lr, #0
 8018d32:	4640      	mov	r0, r8
 8018d34:	46ac      	mov	ip, r5
 8018d36:	46f2      	mov	sl, lr
 8018d38:	f850 2b04 	ldr.w	r2, [r0], #4
 8018d3c:	b293      	uxth	r3, r2
 8018d3e:	fb06 e303 	mla	r3, r6, r3, lr
 8018d42:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8018d46:	b29b      	uxth	r3, r3
 8018d48:	ebaa 0303 	sub.w	r3, sl, r3
 8018d4c:	0c12      	lsrs	r2, r2, #16
 8018d4e:	f8dc a000 	ldr.w	sl, [ip]
 8018d52:	fb06 e202 	mla	r2, r6, r2, lr
 8018d56:	fa13 f38a 	uxtah	r3, r3, sl
 8018d5a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8018d5e:	fa1f fa82 	uxth.w	sl, r2
 8018d62:	f8dc 2000 	ldr.w	r2, [ip]
 8018d66:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8018d6a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018d6e:	b29b      	uxth	r3, r3
 8018d70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018d74:	4581      	cmp	r9, r0
 8018d76:	f84c 3b04 	str.w	r3, [ip], #4
 8018d7a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8018d7e:	d2db      	bcs.n	8018d38 <quorem+0x44>
 8018d80:	f855 300b 	ldr.w	r3, [r5, fp]
 8018d84:	b92b      	cbnz	r3, 8018d92 <quorem+0x9e>
 8018d86:	9b01      	ldr	r3, [sp, #4]
 8018d88:	3b04      	subs	r3, #4
 8018d8a:	429d      	cmp	r5, r3
 8018d8c:	461a      	mov	r2, r3
 8018d8e:	d32e      	bcc.n	8018dee <quorem+0xfa>
 8018d90:	613c      	str	r4, [r7, #16]
 8018d92:	4638      	mov	r0, r7
 8018d94:	f001 fc14 	bl	801a5c0 <__mcmp>
 8018d98:	2800      	cmp	r0, #0
 8018d9a:	db24      	blt.n	8018de6 <quorem+0xf2>
 8018d9c:	3601      	adds	r6, #1
 8018d9e:	4628      	mov	r0, r5
 8018da0:	f04f 0c00 	mov.w	ip, #0
 8018da4:	f858 2b04 	ldr.w	r2, [r8], #4
 8018da8:	f8d0 e000 	ldr.w	lr, [r0]
 8018dac:	b293      	uxth	r3, r2
 8018dae:	ebac 0303 	sub.w	r3, ip, r3
 8018db2:	0c12      	lsrs	r2, r2, #16
 8018db4:	fa13 f38e 	uxtah	r3, r3, lr
 8018db8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8018dbc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018dc0:	b29b      	uxth	r3, r3
 8018dc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018dc6:	45c1      	cmp	r9, r8
 8018dc8:	f840 3b04 	str.w	r3, [r0], #4
 8018dcc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8018dd0:	d2e8      	bcs.n	8018da4 <quorem+0xb0>
 8018dd2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018dd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018dda:	b922      	cbnz	r2, 8018de6 <quorem+0xf2>
 8018ddc:	3b04      	subs	r3, #4
 8018dde:	429d      	cmp	r5, r3
 8018de0:	461a      	mov	r2, r3
 8018de2:	d30a      	bcc.n	8018dfa <quorem+0x106>
 8018de4:	613c      	str	r4, [r7, #16]
 8018de6:	4630      	mov	r0, r6
 8018de8:	b003      	add	sp, #12
 8018dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018dee:	6812      	ldr	r2, [r2, #0]
 8018df0:	3b04      	subs	r3, #4
 8018df2:	2a00      	cmp	r2, #0
 8018df4:	d1cc      	bne.n	8018d90 <quorem+0x9c>
 8018df6:	3c01      	subs	r4, #1
 8018df8:	e7c7      	b.n	8018d8a <quorem+0x96>
 8018dfa:	6812      	ldr	r2, [r2, #0]
 8018dfc:	3b04      	subs	r3, #4
 8018dfe:	2a00      	cmp	r2, #0
 8018e00:	d1f0      	bne.n	8018de4 <quorem+0xf0>
 8018e02:	3c01      	subs	r4, #1
 8018e04:	e7eb      	b.n	8018dde <quorem+0xea>
 8018e06:	2000      	movs	r0, #0
 8018e08:	e7ee      	b.n	8018de8 <quorem+0xf4>
 8018e0a:	0000      	movs	r0, r0
 8018e0c:	0000      	movs	r0, r0
	...

08018e10 <_dtoa_r>:
 8018e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e14:	ec59 8b10 	vmov	r8, r9, d0
 8018e18:	b095      	sub	sp, #84	; 0x54
 8018e1a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018e1c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8018e1e:	9107      	str	r1, [sp, #28]
 8018e20:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8018e24:	4606      	mov	r6, r0
 8018e26:	9209      	str	r2, [sp, #36]	; 0x24
 8018e28:	9310      	str	r3, [sp, #64]	; 0x40
 8018e2a:	b975      	cbnz	r5, 8018e4a <_dtoa_r+0x3a>
 8018e2c:	2010      	movs	r0, #16
 8018e2e:	f001 f8e5 	bl	8019ffc <malloc>
 8018e32:	4602      	mov	r2, r0
 8018e34:	6270      	str	r0, [r6, #36]	; 0x24
 8018e36:	b920      	cbnz	r0, 8018e42 <_dtoa_r+0x32>
 8018e38:	4bab      	ldr	r3, [pc, #684]	; (80190e8 <_dtoa_r+0x2d8>)
 8018e3a:	21ea      	movs	r1, #234	; 0xea
 8018e3c:	48ab      	ldr	r0, [pc, #684]	; (80190ec <_dtoa_r+0x2dc>)
 8018e3e:	f001 fff1 	bl	801ae24 <__assert_func>
 8018e42:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018e46:	6005      	str	r5, [r0, #0]
 8018e48:	60c5      	str	r5, [r0, #12]
 8018e4a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018e4c:	6819      	ldr	r1, [r3, #0]
 8018e4e:	b151      	cbz	r1, 8018e66 <_dtoa_r+0x56>
 8018e50:	685a      	ldr	r2, [r3, #4]
 8018e52:	604a      	str	r2, [r1, #4]
 8018e54:	2301      	movs	r3, #1
 8018e56:	4093      	lsls	r3, r2
 8018e58:	608b      	str	r3, [r1, #8]
 8018e5a:	4630      	mov	r0, r6
 8018e5c:	f001 f928 	bl	801a0b0 <_Bfree>
 8018e60:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018e62:	2200      	movs	r2, #0
 8018e64:	601a      	str	r2, [r3, #0]
 8018e66:	f1b9 0300 	subs.w	r3, r9, #0
 8018e6a:	bfbb      	ittet	lt
 8018e6c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8018e70:	9303      	strlt	r3, [sp, #12]
 8018e72:	2300      	movge	r3, #0
 8018e74:	2201      	movlt	r2, #1
 8018e76:	bfac      	ite	ge
 8018e78:	6023      	strge	r3, [r4, #0]
 8018e7a:	6022      	strlt	r2, [r4, #0]
 8018e7c:	4b9c      	ldr	r3, [pc, #624]	; (80190f0 <_dtoa_r+0x2e0>)
 8018e7e:	9c03      	ldr	r4, [sp, #12]
 8018e80:	43a3      	bics	r3, r4
 8018e82:	d11a      	bne.n	8018eba <_dtoa_r+0xaa>
 8018e84:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018e86:	f242 730f 	movw	r3, #9999	; 0x270f
 8018e8a:	6013      	str	r3, [r2, #0]
 8018e8c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8018e90:	ea53 0308 	orrs.w	r3, r3, r8
 8018e94:	f000 8512 	beq.w	80198bc <_dtoa_r+0xaac>
 8018e98:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018e9a:	b953      	cbnz	r3, 8018eb2 <_dtoa_r+0xa2>
 8018e9c:	4b95      	ldr	r3, [pc, #596]	; (80190f4 <_dtoa_r+0x2e4>)
 8018e9e:	e01f      	b.n	8018ee0 <_dtoa_r+0xd0>
 8018ea0:	4b95      	ldr	r3, [pc, #596]	; (80190f8 <_dtoa_r+0x2e8>)
 8018ea2:	9300      	str	r3, [sp, #0]
 8018ea4:	3308      	adds	r3, #8
 8018ea6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8018ea8:	6013      	str	r3, [r2, #0]
 8018eaa:	9800      	ldr	r0, [sp, #0]
 8018eac:	b015      	add	sp, #84	; 0x54
 8018eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018eb2:	4b90      	ldr	r3, [pc, #576]	; (80190f4 <_dtoa_r+0x2e4>)
 8018eb4:	9300      	str	r3, [sp, #0]
 8018eb6:	3303      	adds	r3, #3
 8018eb8:	e7f5      	b.n	8018ea6 <_dtoa_r+0x96>
 8018eba:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018ebe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ec6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8018eca:	d10b      	bne.n	8018ee4 <_dtoa_r+0xd4>
 8018ecc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018ece:	2301      	movs	r3, #1
 8018ed0:	6013      	str	r3, [r2, #0]
 8018ed2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8018ed4:	2b00      	cmp	r3, #0
 8018ed6:	f000 84ee 	beq.w	80198b6 <_dtoa_r+0xaa6>
 8018eda:	4888      	ldr	r0, [pc, #544]	; (80190fc <_dtoa_r+0x2ec>)
 8018edc:	6018      	str	r0, [r3, #0]
 8018ede:	1e43      	subs	r3, r0, #1
 8018ee0:	9300      	str	r3, [sp, #0]
 8018ee2:	e7e2      	b.n	8018eaa <_dtoa_r+0x9a>
 8018ee4:	a913      	add	r1, sp, #76	; 0x4c
 8018ee6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8018eea:	aa12      	add	r2, sp, #72	; 0x48
 8018eec:	4630      	mov	r0, r6
 8018eee:	f001 fc87 	bl	801a800 <__d2b>
 8018ef2:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8018ef6:	4605      	mov	r5, r0
 8018ef8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8018efa:	2900      	cmp	r1, #0
 8018efc:	d047      	beq.n	8018f8e <_dtoa_r+0x17e>
 8018efe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8018f00:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8018f04:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018f08:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8018f0c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8018f10:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8018f14:	2400      	movs	r4, #0
 8018f16:	ec43 2b16 	vmov	d6, r2, r3
 8018f1a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8018f1e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 80190d0 <_dtoa_r+0x2c0>
 8018f22:	ee36 7b47 	vsub.f64	d7, d6, d7
 8018f26:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 80190d8 <_dtoa_r+0x2c8>
 8018f2a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8018f2e:	eeb0 7b46 	vmov.f64	d7, d6
 8018f32:	ee06 1a90 	vmov	s13, r1
 8018f36:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8018f3a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80190e0 <_dtoa_r+0x2d0>
 8018f3e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8018f42:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8018f46:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8018f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f4e:	ee16 ba90 	vmov	fp, s13
 8018f52:	9411      	str	r4, [sp, #68]	; 0x44
 8018f54:	d508      	bpl.n	8018f68 <_dtoa_r+0x158>
 8018f56:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8018f5a:	eeb4 6b47 	vcmp.f64	d6, d7
 8018f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f62:	bf18      	it	ne
 8018f64:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8018f68:	f1bb 0f16 	cmp.w	fp, #22
 8018f6c:	d832      	bhi.n	8018fd4 <_dtoa_r+0x1c4>
 8018f6e:	4b64      	ldr	r3, [pc, #400]	; (8019100 <_dtoa_r+0x2f0>)
 8018f70:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8018f74:	ed93 7b00 	vldr	d7, [r3]
 8018f78:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8018f7c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f84:	d501      	bpl.n	8018f8a <_dtoa_r+0x17a>
 8018f86:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018f8a:	2300      	movs	r3, #0
 8018f8c:	e023      	b.n	8018fd6 <_dtoa_r+0x1c6>
 8018f8e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8018f90:	4401      	add	r1, r0
 8018f92:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8018f96:	2b20      	cmp	r3, #32
 8018f98:	bfc3      	ittte	gt
 8018f9a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8018f9e:	fa04 f303 	lslgt.w	r3, r4, r3
 8018fa2:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8018fa6:	f1c3 0320 	rsble	r3, r3, #32
 8018faa:	bfc6      	itte	gt
 8018fac:	fa28 f804 	lsrgt.w	r8, r8, r4
 8018fb0:	ea43 0308 	orrgt.w	r3, r3, r8
 8018fb4:	fa08 f303 	lslle.w	r3, r8, r3
 8018fb8:	ee07 3a90 	vmov	s15, r3
 8018fbc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8018fc0:	3901      	subs	r1, #1
 8018fc2:	ed8d 7b00 	vstr	d7, [sp]
 8018fc6:	9c01      	ldr	r4, [sp, #4]
 8018fc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018fcc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8018fd0:	2401      	movs	r4, #1
 8018fd2:	e7a0      	b.n	8018f16 <_dtoa_r+0x106>
 8018fd4:	2301      	movs	r3, #1
 8018fd6:	930f      	str	r3, [sp, #60]	; 0x3c
 8018fd8:	1a43      	subs	r3, r0, r1
 8018fda:	1e5a      	subs	r2, r3, #1
 8018fdc:	bf45      	ittet	mi
 8018fde:	f1c3 0301 	rsbmi	r3, r3, #1
 8018fe2:	9305      	strmi	r3, [sp, #20]
 8018fe4:	2300      	movpl	r3, #0
 8018fe6:	2300      	movmi	r3, #0
 8018fe8:	9206      	str	r2, [sp, #24]
 8018fea:	bf54      	ite	pl
 8018fec:	9305      	strpl	r3, [sp, #20]
 8018fee:	9306      	strmi	r3, [sp, #24]
 8018ff0:	f1bb 0f00 	cmp.w	fp, #0
 8018ff4:	db18      	blt.n	8019028 <_dtoa_r+0x218>
 8018ff6:	9b06      	ldr	r3, [sp, #24]
 8018ff8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8018ffc:	445b      	add	r3, fp
 8018ffe:	9306      	str	r3, [sp, #24]
 8019000:	2300      	movs	r3, #0
 8019002:	9a07      	ldr	r2, [sp, #28]
 8019004:	2a09      	cmp	r2, #9
 8019006:	d849      	bhi.n	801909c <_dtoa_r+0x28c>
 8019008:	2a05      	cmp	r2, #5
 801900a:	bfc4      	itt	gt
 801900c:	3a04      	subgt	r2, #4
 801900e:	9207      	strgt	r2, [sp, #28]
 8019010:	9a07      	ldr	r2, [sp, #28]
 8019012:	f1a2 0202 	sub.w	r2, r2, #2
 8019016:	bfcc      	ite	gt
 8019018:	2400      	movgt	r4, #0
 801901a:	2401      	movle	r4, #1
 801901c:	2a03      	cmp	r2, #3
 801901e:	d848      	bhi.n	80190b2 <_dtoa_r+0x2a2>
 8019020:	e8df f002 	tbb	[pc, r2]
 8019024:	3a2c2e0b 	.word	0x3a2c2e0b
 8019028:	9b05      	ldr	r3, [sp, #20]
 801902a:	2200      	movs	r2, #0
 801902c:	eba3 030b 	sub.w	r3, r3, fp
 8019030:	9305      	str	r3, [sp, #20]
 8019032:	920e      	str	r2, [sp, #56]	; 0x38
 8019034:	f1cb 0300 	rsb	r3, fp, #0
 8019038:	e7e3      	b.n	8019002 <_dtoa_r+0x1f2>
 801903a:	2200      	movs	r2, #0
 801903c:	9208      	str	r2, [sp, #32]
 801903e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019040:	2a00      	cmp	r2, #0
 8019042:	dc39      	bgt.n	80190b8 <_dtoa_r+0x2a8>
 8019044:	f04f 0a01 	mov.w	sl, #1
 8019048:	46d1      	mov	r9, sl
 801904a:	4652      	mov	r2, sl
 801904c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8019050:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8019052:	2100      	movs	r1, #0
 8019054:	6079      	str	r1, [r7, #4]
 8019056:	2004      	movs	r0, #4
 8019058:	f100 0c14 	add.w	ip, r0, #20
 801905c:	4594      	cmp	ip, r2
 801905e:	6879      	ldr	r1, [r7, #4]
 8019060:	d92f      	bls.n	80190c2 <_dtoa_r+0x2b2>
 8019062:	4630      	mov	r0, r6
 8019064:	930c      	str	r3, [sp, #48]	; 0x30
 8019066:	f000 ffe3 	bl	801a030 <_Balloc>
 801906a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801906c:	9000      	str	r0, [sp, #0]
 801906e:	4602      	mov	r2, r0
 8019070:	2800      	cmp	r0, #0
 8019072:	d149      	bne.n	8019108 <_dtoa_r+0x2f8>
 8019074:	4b23      	ldr	r3, [pc, #140]	; (8019104 <_dtoa_r+0x2f4>)
 8019076:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801907a:	e6df      	b.n	8018e3c <_dtoa_r+0x2c>
 801907c:	2201      	movs	r2, #1
 801907e:	e7dd      	b.n	801903c <_dtoa_r+0x22c>
 8019080:	2200      	movs	r2, #0
 8019082:	9208      	str	r2, [sp, #32]
 8019084:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019086:	eb0b 0a02 	add.w	sl, fp, r2
 801908a:	f10a 0901 	add.w	r9, sl, #1
 801908e:	464a      	mov	r2, r9
 8019090:	2a01      	cmp	r2, #1
 8019092:	bfb8      	it	lt
 8019094:	2201      	movlt	r2, #1
 8019096:	e7db      	b.n	8019050 <_dtoa_r+0x240>
 8019098:	2201      	movs	r2, #1
 801909a:	e7f2      	b.n	8019082 <_dtoa_r+0x272>
 801909c:	2401      	movs	r4, #1
 801909e:	2200      	movs	r2, #0
 80190a0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80190a4:	f04f 3aff 	mov.w	sl, #4294967295
 80190a8:	2100      	movs	r1, #0
 80190aa:	46d1      	mov	r9, sl
 80190ac:	2212      	movs	r2, #18
 80190ae:	9109      	str	r1, [sp, #36]	; 0x24
 80190b0:	e7ce      	b.n	8019050 <_dtoa_r+0x240>
 80190b2:	2201      	movs	r2, #1
 80190b4:	9208      	str	r2, [sp, #32]
 80190b6:	e7f5      	b.n	80190a4 <_dtoa_r+0x294>
 80190b8:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80190bc:	46d1      	mov	r9, sl
 80190be:	4652      	mov	r2, sl
 80190c0:	e7c6      	b.n	8019050 <_dtoa_r+0x240>
 80190c2:	3101      	adds	r1, #1
 80190c4:	6079      	str	r1, [r7, #4]
 80190c6:	0040      	lsls	r0, r0, #1
 80190c8:	e7c6      	b.n	8019058 <_dtoa_r+0x248>
 80190ca:	bf00      	nop
 80190cc:	f3af 8000 	nop.w
 80190d0:	636f4361 	.word	0x636f4361
 80190d4:	3fd287a7 	.word	0x3fd287a7
 80190d8:	8b60c8b3 	.word	0x8b60c8b3
 80190dc:	3fc68a28 	.word	0x3fc68a28
 80190e0:	509f79fb 	.word	0x509f79fb
 80190e4:	3fd34413 	.word	0x3fd34413
 80190e8:	08028396 	.word	0x08028396
 80190ec:	080283ad 	.word	0x080283ad
 80190f0:	7ff00000 	.word	0x7ff00000
 80190f4:	08028392 	.word	0x08028392
 80190f8:	08028389 	.word	0x08028389
 80190fc:	0802820d 	.word	0x0802820d
 8019100:	08028528 	.word	0x08028528
 8019104:	0802840c 	.word	0x0802840c
 8019108:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801910a:	9900      	ldr	r1, [sp, #0]
 801910c:	6011      	str	r1, [r2, #0]
 801910e:	f1b9 0f0e 	cmp.w	r9, #14
 8019112:	d872      	bhi.n	80191fa <_dtoa_r+0x3ea>
 8019114:	2c00      	cmp	r4, #0
 8019116:	d070      	beq.n	80191fa <_dtoa_r+0x3ea>
 8019118:	f1bb 0f00 	cmp.w	fp, #0
 801911c:	f340 80a6 	ble.w	801926c <_dtoa_r+0x45c>
 8019120:	49ca      	ldr	r1, [pc, #808]	; (801944c <_dtoa_r+0x63c>)
 8019122:	f00b 020f 	and.w	r2, fp, #15
 8019126:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801912a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801912e:	ed92 7b00 	vldr	d7, [r2]
 8019132:	ea4f 112b 	mov.w	r1, fp, asr #4
 8019136:	f000 808d 	beq.w	8019254 <_dtoa_r+0x444>
 801913a:	4ac5      	ldr	r2, [pc, #788]	; (8019450 <_dtoa_r+0x640>)
 801913c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8019140:	ed92 6b08 	vldr	d6, [r2, #32]
 8019144:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8019148:	ed8d 6b02 	vstr	d6, [sp, #8]
 801914c:	f001 010f 	and.w	r1, r1, #15
 8019150:	2203      	movs	r2, #3
 8019152:	48bf      	ldr	r0, [pc, #764]	; (8019450 <_dtoa_r+0x640>)
 8019154:	2900      	cmp	r1, #0
 8019156:	d17f      	bne.n	8019258 <_dtoa_r+0x448>
 8019158:	ed9d 6b02 	vldr	d6, [sp, #8]
 801915c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8019160:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019164:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8019166:	2900      	cmp	r1, #0
 8019168:	f000 80b2 	beq.w	80192d0 <_dtoa_r+0x4c0>
 801916c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8019170:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019174:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8019178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801917c:	f140 80a8 	bpl.w	80192d0 <_dtoa_r+0x4c0>
 8019180:	f1b9 0f00 	cmp.w	r9, #0
 8019184:	f000 80a4 	beq.w	80192d0 <_dtoa_r+0x4c0>
 8019188:	f1ba 0f00 	cmp.w	sl, #0
 801918c:	dd31      	ble.n	80191f2 <_dtoa_r+0x3e2>
 801918e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8019192:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019196:	ed8d 7b02 	vstr	d7, [sp, #8]
 801919a:	f10b 37ff 	add.w	r7, fp, #4294967295
 801919e:	3201      	adds	r2, #1
 80191a0:	4650      	mov	r0, sl
 80191a2:	ed9d 6b02 	vldr	d6, [sp, #8]
 80191a6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80191aa:	ee07 2a90 	vmov	s15, r2
 80191ae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80191b2:	eea7 5b06 	vfma.f64	d5, d7, d6
 80191b6:	ed8d 5b02 	vstr	d5, [sp, #8]
 80191ba:	9c03      	ldr	r4, [sp, #12]
 80191bc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80191c0:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80191c4:	2800      	cmp	r0, #0
 80191c6:	f040 8086 	bne.w	80192d6 <_dtoa_r+0x4c6>
 80191ca:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80191ce:	ee36 6b47 	vsub.f64	d6, d6, d7
 80191d2:	ec42 1b17 	vmov	d7, r1, r2
 80191d6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80191da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191de:	f300 8272 	bgt.w	80196c6 <_dtoa_r+0x8b6>
 80191e2:	eeb1 7b47 	vneg.f64	d7, d7
 80191e6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80191ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191ee:	f100 8267 	bmi.w	80196c0 <_dtoa_r+0x8b0>
 80191f2:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 80191f6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80191fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80191fc:	2a00      	cmp	r2, #0
 80191fe:	f2c0 8129 	blt.w	8019454 <_dtoa_r+0x644>
 8019202:	f1bb 0f0e 	cmp.w	fp, #14
 8019206:	f300 8125 	bgt.w	8019454 <_dtoa_r+0x644>
 801920a:	4b90      	ldr	r3, [pc, #576]	; (801944c <_dtoa_r+0x63c>)
 801920c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8019210:	ed93 6b00 	vldr	d6, [r3]
 8019214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019216:	2b00      	cmp	r3, #0
 8019218:	f280 80c3 	bge.w	80193a2 <_dtoa_r+0x592>
 801921c:	f1b9 0f00 	cmp.w	r9, #0
 8019220:	f300 80bf 	bgt.w	80193a2 <_dtoa_r+0x592>
 8019224:	f040 824c 	bne.w	80196c0 <_dtoa_r+0x8b0>
 8019228:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801922c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8019230:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019234:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801923c:	464c      	mov	r4, r9
 801923e:	464f      	mov	r7, r9
 8019240:	f280 8222 	bge.w	8019688 <_dtoa_r+0x878>
 8019244:	f8dd 8000 	ldr.w	r8, [sp]
 8019248:	2331      	movs	r3, #49	; 0x31
 801924a:	f808 3b01 	strb.w	r3, [r8], #1
 801924e:	f10b 0b01 	add.w	fp, fp, #1
 8019252:	e21e      	b.n	8019692 <_dtoa_r+0x882>
 8019254:	2202      	movs	r2, #2
 8019256:	e77c      	b.n	8019152 <_dtoa_r+0x342>
 8019258:	07cc      	lsls	r4, r1, #31
 801925a:	d504      	bpl.n	8019266 <_dtoa_r+0x456>
 801925c:	ed90 6b00 	vldr	d6, [r0]
 8019260:	3201      	adds	r2, #1
 8019262:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019266:	1049      	asrs	r1, r1, #1
 8019268:	3008      	adds	r0, #8
 801926a:	e773      	b.n	8019154 <_dtoa_r+0x344>
 801926c:	d02e      	beq.n	80192cc <_dtoa_r+0x4bc>
 801926e:	f1cb 0100 	rsb	r1, fp, #0
 8019272:	4a76      	ldr	r2, [pc, #472]	; (801944c <_dtoa_r+0x63c>)
 8019274:	f001 000f 	and.w	r0, r1, #15
 8019278:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801927c:	ed92 7b00 	vldr	d7, [r2]
 8019280:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8019284:	ee26 7b07 	vmul.f64	d7, d6, d7
 8019288:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801928c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8019290:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8019294:	486e      	ldr	r0, [pc, #440]	; (8019450 <_dtoa_r+0x640>)
 8019296:	1109      	asrs	r1, r1, #4
 8019298:	2400      	movs	r4, #0
 801929a:	2202      	movs	r2, #2
 801929c:	b939      	cbnz	r1, 80192ae <_dtoa_r+0x49e>
 801929e:	2c00      	cmp	r4, #0
 80192a0:	f43f af60 	beq.w	8019164 <_dtoa_r+0x354>
 80192a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80192a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80192ac:	e75a      	b.n	8019164 <_dtoa_r+0x354>
 80192ae:	07cf      	lsls	r7, r1, #31
 80192b0:	d509      	bpl.n	80192c6 <_dtoa_r+0x4b6>
 80192b2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80192b6:	ed90 7b00 	vldr	d7, [r0]
 80192ba:	ee26 7b07 	vmul.f64	d7, d6, d7
 80192be:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80192c2:	3201      	adds	r2, #1
 80192c4:	2401      	movs	r4, #1
 80192c6:	1049      	asrs	r1, r1, #1
 80192c8:	3008      	adds	r0, #8
 80192ca:	e7e7      	b.n	801929c <_dtoa_r+0x48c>
 80192cc:	2202      	movs	r2, #2
 80192ce:	e749      	b.n	8019164 <_dtoa_r+0x354>
 80192d0:	465f      	mov	r7, fp
 80192d2:	4648      	mov	r0, r9
 80192d4:	e765      	b.n	80191a2 <_dtoa_r+0x392>
 80192d6:	ec42 1b17 	vmov	d7, r1, r2
 80192da:	4a5c      	ldr	r2, [pc, #368]	; (801944c <_dtoa_r+0x63c>)
 80192dc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80192e0:	ed12 4b02 	vldr	d4, [r2, #-8]
 80192e4:	9a00      	ldr	r2, [sp, #0]
 80192e6:	1814      	adds	r4, r2, r0
 80192e8:	9a08      	ldr	r2, [sp, #32]
 80192ea:	b352      	cbz	r2, 8019342 <_dtoa_r+0x532>
 80192ec:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80192f0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80192f4:	f8dd 8000 	ldr.w	r8, [sp]
 80192f8:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80192fc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8019300:	ee35 7b47 	vsub.f64	d7, d5, d7
 8019304:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8019308:	ee14 2a90 	vmov	r2, s9
 801930c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8019310:	3230      	adds	r2, #48	; 0x30
 8019312:	ee36 6b45 	vsub.f64	d6, d6, d5
 8019316:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801931a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801931e:	f808 2b01 	strb.w	r2, [r8], #1
 8019322:	d439      	bmi.n	8019398 <_dtoa_r+0x588>
 8019324:	ee32 5b46 	vsub.f64	d5, d2, d6
 8019328:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801932c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019330:	d472      	bmi.n	8019418 <_dtoa_r+0x608>
 8019332:	45a0      	cmp	r8, r4
 8019334:	f43f af5d 	beq.w	80191f2 <_dtoa_r+0x3e2>
 8019338:	ee27 7b03 	vmul.f64	d7, d7, d3
 801933c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8019340:	e7e0      	b.n	8019304 <_dtoa_r+0x4f4>
 8019342:	f8dd 8000 	ldr.w	r8, [sp]
 8019346:	ee27 7b04 	vmul.f64	d7, d7, d4
 801934a:	4621      	mov	r1, r4
 801934c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8019350:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8019354:	ee14 2a90 	vmov	r2, s9
 8019358:	3230      	adds	r2, #48	; 0x30
 801935a:	f808 2b01 	strb.w	r2, [r8], #1
 801935e:	45a0      	cmp	r8, r4
 8019360:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8019364:	ee36 6b45 	vsub.f64	d6, d6, d5
 8019368:	d118      	bne.n	801939c <_dtoa_r+0x58c>
 801936a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801936e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8019372:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8019376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801937a:	dc4d      	bgt.n	8019418 <_dtoa_r+0x608>
 801937c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8019380:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019388:	f57f af33 	bpl.w	80191f2 <_dtoa_r+0x3e2>
 801938c:	4688      	mov	r8, r1
 801938e:	3901      	subs	r1, #1
 8019390:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8019394:	2b30      	cmp	r3, #48	; 0x30
 8019396:	d0f9      	beq.n	801938c <_dtoa_r+0x57c>
 8019398:	46bb      	mov	fp, r7
 801939a:	e02a      	b.n	80193f2 <_dtoa_r+0x5e2>
 801939c:	ee26 6b03 	vmul.f64	d6, d6, d3
 80193a0:	e7d6      	b.n	8019350 <_dtoa_r+0x540>
 80193a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80193a6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80193aa:	f8dd 8000 	ldr.w	r8, [sp]
 80193ae:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80193b2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80193b6:	ee15 3a10 	vmov	r3, s10
 80193ba:	3330      	adds	r3, #48	; 0x30
 80193bc:	f808 3b01 	strb.w	r3, [r8], #1
 80193c0:	9b00      	ldr	r3, [sp, #0]
 80193c2:	eba8 0303 	sub.w	r3, r8, r3
 80193c6:	4599      	cmp	r9, r3
 80193c8:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80193cc:	eea3 7b46 	vfms.f64	d7, d3, d6
 80193d0:	d133      	bne.n	801943a <_dtoa_r+0x62a>
 80193d2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80193d6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80193da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193de:	dc1a      	bgt.n	8019416 <_dtoa_r+0x606>
 80193e0:	eeb4 7b46 	vcmp.f64	d7, d6
 80193e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193e8:	d103      	bne.n	80193f2 <_dtoa_r+0x5e2>
 80193ea:	ee15 3a10 	vmov	r3, s10
 80193ee:	07d9      	lsls	r1, r3, #31
 80193f0:	d411      	bmi.n	8019416 <_dtoa_r+0x606>
 80193f2:	4629      	mov	r1, r5
 80193f4:	4630      	mov	r0, r6
 80193f6:	f000 fe5b 	bl	801a0b0 <_Bfree>
 80193fa:	2300      	movs	r3, #0
 80193fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80193fe:	f888 3000 	strb.w	r3, [r8]
 8019402:	f10b 0301 	add.w	r3, fp, #1
 8019406:	6013      	str	r3, [r2, #0]
 8019408:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801940a:	2b00      	cmp	r3, #0
 801940c:	f43f ad4d 	beq.w	8018eaa <_dtoa_r+0x9a>
 8019410:	f8c3 8000 	str.w	r8, [r3]
 8019414:	e549      	b.n	8018eaa <_dtoa_r+0x9a>
 8019416:	465f      	mov	r7, fp
 8019418:	4643      	mov	r3, r8
 801941a:	4698      	mov	r8, r3
 801941c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019420:	2a39      	cmp	r2, #57	; 0x39
 8019422:	d106      	bne.n	8019432 <_dtoa_r+0x622>
 8019424:	9a00      	ldr	r2, [sp, #0]
 8019426:	429a      	cmp	r2, r3
 8019428:	d1f7      	bne.n	801941a <_dtoa_r+0x60a>
 801942a:	9900      	ldr	r1, [sp, #0]
 801942c:	2230      	movs	r2, #48	; 0x30
 801942e:	3701      	adds	r7, #1
 8019430:	700a      	strb	r2, [r1, #0]
 8019432:	781a      	ldrb	r2, [r3, #0]
 8019434:	3201      	adds	r2, #1
 8019436:	701a      	strb	r2, [r3, #0]
 8019438:	e7ae      	b.n	8019398 <_dtoa_r+0x588>
 801943a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801943e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019446:	d1b2      	bne.n	80193ae <_dtoa_r+0x59e>
 8019448:	e7d3      	b.n	80193f2 <_dtoa_r+0x5e2>
 801944a:	bf00      	nop
 801944c:	08028528 	.word	0x08028528
 8019450:	08028500 	.word	0x08028500
 8019454:	9908      	ldr	r1, [sp, #32]
 8019456:	2900      	cmp	r1, #0
 8019458:	f000 80d1 	beq.w	80195fe <_dtoa_r+0x7ee>
 801945c:	9907      	ldr	r1, [sp, #28]
 801945e:	2901      	cmp	r1, #1
 8019460:	f300 80b4 	bgt.w	80195cc <_dtoa_r+0x7bc>
 8019464:	9911      	ldr	r1, [sp, #68]	; 0x44
 8019466:	2900      	cmp	r1, #0
 8019468:	f000 80ac 	beq.w	80195c4 <_dtoa_r+0x7b4>
 801946c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8019470:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8019474:	461c      	mov	r4, r3
 8019476:	930a      	str	r3, [sp, #40]	; 0x28
 8019478:	9b05      	ldr	r3, [sp, #20]
 801947a:	4413      	add	r3, r2
 801947c:	9305      	str	r3, [sp, #20]
 801947e:	9b06      	ldr	r3, [sp, #24]
 8019480:	2101      	movs	r1, #1
 8019482:	4413      	add	r3, r2
 8019484:	4630      	mov	r0, r6
 8019486:	9306      	str	r3, [sp, #24]
 8019488:	f000 ff18 	bl	801a2bc <__i2b>
 801948c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801948e:	4607      	mov	r7, r0
 8019490:	f1b8 0f00 	cmp.w	r8, #0
 8019494:	dd0d      	ble.n	80194b2 <_dtoa_r+0x6a2>
 8019496:	9a06      	ldr	r2, [sp, #24]
 8019498:	2a00      	cmp	r2, #0
 801949a:	dd0a      	ble.n	80194b2 <_dtoa_r+0x6a2>
 801949c:	4542      	cmp	r2, r8
 801949e:	9905      	ldr	r1, [sp, #20]
 80194a0:	bfa8      	it	ge
 80194a2:	4642      	movge	r2, r8
 80194a4:	1a89      	subs	r1, r1, r2
 80194a6:	9105      	str	r1, [sp, #20]
 80194a8:	9906      	ldr	r1, [sp, #24]
 80194aa:	eba8 0802 	sub.w	r8, r8, r2
 80194ae:	1a8a      	subs	r2, r1, r2
 80194b0:	9206      	str	r2, [sp, #24]
 80194b2:	b303      	cbz	r3, 80194f6 <_dtoa_r+0x6e6>
 80194b4:	9a08      	ldr	r2, [sp, #32]
 80194b6:	2a00      	cmp	r2, #0
 80194b8:	f000 80a6 	beq.w	8019608 <_dtoa_r+0x7f8>
 80194bc:	2c00      	cmp	r4, #0
 80194be:	dd13      	ble.n	80194e8 <_dtoa_r+0x6d8>
 80194c0:	4639      	mov	r1, r7
 80194c2:	4622      	mov	r2, r4
 80194c4:	4630      	mov	r0, r6
 80194c6:	930c      	str	r3, [sp, #48]	; 0x30
 80194c8:	f000 ffb4 	bl	801a434 <__pow5mult>
 80194cc:	462a      	mov	r2, r5
 80194ce:	4601      	mov	r1, r0
 80194d0:	4607      	mov	r7, r0
 80194d2:	4630      	mov	r0, r6
 80194d4:	f000 ff08 	bl	801a2e8 <__multiply>
 80194d8:	4629      	mov	r1, r5
 80194da:	900a      	str	r0, [sp, #40]	; 0x28
 80194dc:	4630      	mov	r0, r6
 80194de:	f000 fde7 	bl	801a0b0 <_Bfree>
 80194e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80194e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80194e6:	4615      	mov	r5, r2
 80194e8:	1b1a      	subs	r2, r3, r4
 80194ea:	d004      	beq.n	80194f6 <_dtoa_r+0x6e6>
 80194ec:	4629      	mov	r1, r5
 80194ee:	4630      	mov	r0, r6
 80194f0:	f000 ffa0 	bl	801a434 <__pow5mult>
 80194f4:	4605      	mov	r5, r0
 80194f6:	2101      	movs	r1, #1
 80194f8:	4630      	mov	r0, r6
 80194fa:	f000 fedf 	bl	801a2bc <__i2b>
 80194fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019500:	2b00      	cmp	r3, #0
 8019502:	4604      	mov	r4, r0
 8019504:	f340 8082 	ble.w	801960c <_dtoa_r+0x7fc>
 8019508:	461a      	mov	r2, r3
 801950a:	4601      	mov	r1, r0
 801950c:	4630      	mov	r0, r6
 801950e:	f000 ff91 	bl	801a434 <__pow5mult>
 8019512:	9b07      	ldr	r3, [sp, #28]
 8019514:	2b01      	cmp	r3, #1
 8019516:	4604      	mov	r4, r0
 8019518:	dd7b      	ble.n	8019612 <_dtoa_r+0x802>
 801951a:	2300      	movs	r3, #0
 801951c:	930a      	str	r3, [sp, #40]	; 0x28
 801951e:	6922      	ldr	r2, [r4, #16]
 8019520:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8019524:	6910      	ldr	r0, [r2, #16]
 8019526:	f000 fe79 	bl	801a21c <__hi0bits>
 801952a:	f1c0 0020 	rsb	r0, r0, #32
 801952e:	9b06      	ldr	r3, [sp, #24]
 8019530:	4418      	add	r0, r3
 8019532:	f010 001f 	ands.w	r0, r0, #31
 8019536:	f000 808d 	beq.w	8019654 <_dtoa_r+0x844>
 801953a:	f1c0 0220 	rsb	r2, r0, #32
 801953e:	2a04      	cmp	r2, #4
 8019540:	f340 8086 	ble.w	8019650 <_dtoa_r+0x840>
 8019544:	f1c0 001c 	rsb	r0, r0, #28
 8019548:	9b05      	ldr	r3, [sp, #20]
 801954a:	4403      	add	r3, r0
 801954c:	9305      	str	r3, [sp, #20]
 801954e:	9b06      	ldr	r3, [sp, #24]
 8019550:	4403      	add	r3, r0
 8019552:	4480      	add	r8, r0
 8019554:	9306      	str	r3, [sp, #24]
 8019556:	9b05      	ldr	r3, [sp, #20]
 8019558:	2b00      	cmp	r3, #0
 801955a:	dd05      	ble.n	8019568 <_dtoa_r+0x758>
 801955c:	4629      	mov	r1, r5
 801955e:	461a      	mov	r2, r3
 8019560:	4630      	mov	r0, r6
 8019562:	f000 ffc1 	bl	801a4e8 <__lshift>
 8019566:	4605      	mov	r5, r0
 8019568:	9b06      	ldr	r3, [sp, #24]
 801956a:	2b00      	cmp	r3, #0
 801956c:	dd05      	ble.n	801957a <_dtoa_r+0x76a>
 801956e:	4621      	mov	r1, r4
 8019570:	461a      	mov	r2, r3
 8019572:	4630      	mov	r0, r6
 8019574:	f000 ffb8 	bl	801a4e8 <__lshift>
 8019578:	4604      	mov	r4, r0
 801957a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801957c:	2b00      	cmp	r3, #0
 801957e:	d06b      	beq.n	8019658 <_dtoa_r+0x848>
 8019580:	4621      	mov	r1, r4
 8019582:	4628      	mov	r0, r5
 8019584:	f001 f81c 	bl	801a5c0 <__mcmp>
 8019588:	2800      	cmp	r0, #0
 801958a:	da65      	bge.n	8019658 <_dtoa_r+0x848>
 801958c:	2300      	movs	r3, #0
 801958e:	4629      	mov	r1, r5
 8019590:	220a      	movs	r2, #10
 8019592:	4630      	mov	r0, r6
 8019594:	f000 fdae 	bl	801a0f4 <__multadd>
 8019598:	9b08      	ldr	r3, [sp, #32]
 801959a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801959e:	4605      	mov	r5, r0
 80195a0:	2b00      	cmp	r3, #0
 80195a2:	f000 8192 	beq.w	80198ca <_dtoa_r+0xaba>
 80195a6:	4639      	mov	r1, r7
 80195a8:	2300      	movs	r3, #0
 80195aa:	220a      	movs	r2, #10
 80195ac:	4630      	mov	r0, r6
 80195ae:	f000 fda1 	bl	801a0f4 <__multadd>
 80195b2:	f1ba 0f00 	cmp.w	sl, #0
 80195b6:	4607      	mov	r7, r0
 80195b8:	f300 808e 	bgt.w	80196d8 <_dtoa_r+0x8c8>
 80195bc:	9b07      	ldr	r3, [sp, #28]
 80195be:	2b02      	cmp	r3, #2
 80195c0:	dc51      	bgt.n	8019666 <_dtoa_r+0x856>
 80195c2:	e089      	b.n	80196d8 <_dtoa_r+0x8c8>
 80195c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80195c6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80195ca:	e751      	b.n	8019470 <_dtoa_r+0x660>
 80195cc:	f109 34ff 	add.w	r4, r9, #4294967295
 80195d0:	42a3      	cmp	r3, r4
 80195d2:	bfbf      	itttt	lt
 80195d4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80195d6:	1ae3      	sublt	r3, r4, r3
 80195d8:	18d2      	addlt	r2, r2, r3
 80195da:	4613      	movlt	r3, r2
 80195dc:	bfb7      	itett	lt
 80195de:	930e      	strlt	r3, [sp, #56]	; 0x38
 80195e0:	1b1c      	subge	r4, r3, r4
 80195e2:	4623      	movlt	r3, r4
 80195e4:	2400      	movlt	r4, #0
 80195e6:	f1b9 0f00 	cmp.w	r9, #0
 80195ea:	bfb5      	itete	lt
 80195ec:	9a05      	ldrlt	r2, [sp, #20]
 80195ee:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 80195f2:	eba2 0809 	sublt.w	r8, r2, r9
 80195f6:	464a      	movge	r2, r9
 80195f8:	bfb8      	it	lt
 80195fa:	2200      	movlt	r2, #0
 80195fc:	e73b      	b.n	8019476 <_dtoa_r+0x666>
 80195fe:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8019602:	9f08      	ldr	r7, [sp, #32]
 8019604:	461c      	mov	r4, r3
 8019606:	e743      	b.n	8019490 <_dtoa_r+0x680>
 8019608:	461a      	mov	r2, r3
 801960a:	e76f      	b.n	80194ec <_dtoa_r+0x6dc>
 801960c:	9b07      	ldr	r3, [sp, #28]
 801960e:	2b01      	cmp	r3, #1
 8019610:	dc18      	bgt.n	8019644 <_dtoa_r+0x834>
 8019612:	9b02      	ldr	r3, [sp, #8]
 8019614:	b9b3      	cbnz	r3, 8019644 <_dtoa_r+0x834>
 8019616:	9b03      	ldr	r3, [sp, #12]
 8019618:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801961c:	b9a2      	cbnz	r2, 8019648 <_dtoa_r+0x838>
 801961e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8019622:	0d12      	lsrs	r2, r2, #20
 8019624:	0512      	lsls	r2, r2, #20
 8019626:	b18a      	cbz	r2, 801964c <_dtoa_r+0x83c>
 8019628:	9b05      	ldr	r3, [sp, #20]
 801962a:	3301      	adds	r3, #1
 801962c:	9305      	str	r3, [sp, #20]
 801962e:	9b06      	ldr	r3, [sp, #24]
 8019630:	3301      	adds	r3, #1
 8019632:	9306      	str	r3, [sp, #24]
 8019634:	2301      	movs	r3, #1
 8019636:	930a      	str	r3, [sp, #40]	; 0x28
 8019638:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801963a:	2b00      	cmp	r3, #0
 801963c:	f47f af6f 	bne.w	801951e <_dtoa_r+0x70e>
 8019640:	2001      	movs	r0, #1
 8019642:	e774      	b.n	801952e <_dtoa_r+0x71e>
 8019644:	2300      	movs	r3, #0
 8019646:	e7f6      	b.n	8019636 <_dtoa_r+0x826>
 8019648:	9b02      	ldr	r3, [sp, #8]
 801964a:	e7f4      	b.n	8019636 <_dtoa_r+0x826>
 801964c:	920a      	str	r2, [sp, #40]	; 0x28
 801964e:	e7f3      	b.n	8019638 <_dtoa_r+0x828>
 8019650:	d081      	beq.n	8019556 <_dtoa_r+0x746>
 8019652:	4610      	mov	r0, r2
 8019654:	301c      	adds	r0, #28
 8019656:	e777      	b.n	8019548 <_dtoa_r+0x738>
 8019658:	f1b9 0f00 	cmp.w	r9, #0
 801965c:	dc37      	bgt.n	80196ce <_dtoa_r+0x8be>
 801965e:	9b07      	ldr	r3, [sp, #28]
 8019660:	2b02      	cmp	r3, #2
 8019662:	dd34      	ble.n	80196ce <_dtoa_r+0x8be>
 8019664:	46ca      	mov	sl, r9
 8019666:	f1ba 0f00 	cmp.w	sl, #0
 801966a:	d10d      	bne.n	8019688 <_dtoa_r+0x878>
 801966c:	4621      	mov	r1, r4
 801966e:	4653      	mov	r3, sl
 8019670:	2205      	movs	r2, #5
 8019672:	4630      	mov	r0, r6
 8019674:	f000 fd3e 	bl	801a0f4 <__multadd>
 8019678:	4601      	mov	r1, r0
 801967a:	4604      	mov	r4, r0
 801967c:	4628      	mov	r0, r5
 801967e:	f000 ff9f 	bl	801a5c0 <__mcmp>
 8019682:	2800      	cmp	r0, #0
 8019684:	f73f adde 	bgt.w	8019244 <_dtoa_r+0x434>
 8019688:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801968a:	f8dd 8000 	ldr.w	r8, [sp]
 801968e:	ea6f 0b03 	mvn.w	fp, r3
 8019692:	f04f 0900 	mov.w	r9, #0
 8019696:	4621      	mov	r1, r4
 8019698:	4630      	mov	r0, r6
 801969a:	f000 fd09 	bl	801a0b0 <_Bfree>
 801969e:	2f00      	cmp	r7, #0
 80196a0:	f43f aea7 	beq.w	80193f2 <_dtoa_r+0x5e2>
 80196a4:	f1b9 0f00 	cmp.w	r9, #0
 80196a8:	d005      	beq.n	80196b6 <_dtoa_r+0x8a6>
 80196aa:	45b9      	cmp	r9, r7
 80196ac:	d003      	beq.n	80196b6 <_dtoa_r+0x8a6>
 80196ae:	4649      	mov	r1, r9
 80196b0:	4630      	mov	r0, r6
 80196b2:	f000 fcfd 	bl	801a0b0 <_Bfree>
 80196b6:	4639      	mov	r1, r7
 80196b8:	4630      	mov	r0, r6
 80196ba:	f000 fcf9 	bl	801a0b0 <_Bfree>
 80196be:	e698      	b.n	80193f2 <_dtoa_r+0x5e2>
 80196c0:	2400      	movs	r4, #0
 80196c2:	4627      	mov	r7, r4
 80196c4:	e7e0      	b.n	8019688 <_dtoa_r+0x878>
 80196c6:	46bb      	mov	fp, r7
 80196c8:	4604      	mov	r4, r0
 80196ca:	4607      	mov	r7, r0
 80196cc:	e5ba      	b.n	8019244 <_dtoa_r+0x434>
 80196ce:	9b08      	ldr	r3, [sp, #32]
 80196d0:	46ca      	mov	sl, r9
 80196d2:	2b00      	cmp	r3, #0
 80196d4:	f000 8100 	beq.w	80198d8 <_dtoa_r+0xac8>
 80196d8:	f1b8 0f00 	cmp.w	r8, #0
 80196dc:	dd05      	ble.n	80196ea <_dtoa_r+0x8da>
 80196de:	4639      	mov	r1, r7
 80196e0:	4642      	mov	r2, r8
 80196e2:	4630      	mov	r0, r6
 80196e4:	f000 ff00 	bl	801a4e8 <__lshift>
 80196e8:	4607      	mov	r7, r0
 80196ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80196ec:	2b00      	cmp	r3, #0
 80196ee:	d05d      	beq.n	80197ac <_dtoa_r+0x99c>
 80196f0:	6879      	ldr	r1, [r7, #4]
 80196f2:	4630      	mov	r0, r6
 80196f4:	f000 fc9c 	bl	801a030 <_Balloc>
 80196f8:	4680      	mov	r8, r0
 80196fa:	b928      	cbnz	r0, 8019708 <_dtoa_r+0x8f8>
 80196fc:	4b82      	ldr	r3, [pc, #520]	; (8019908 <_dtoa_r+0xaf8>)
 80196fe:	4602      	mov	r2, r0
 8019700:	f240 21ea 	movw	r1, #746	; 0x2ea
 8019704:	f7ff bb9a 	b.w	8018e3c <_dtoa_r+0x2c>
 8019708:	693a      	ldr	r2, [r7, #16]
 801970a:	3202      	adds	r2, #2
 801970c:	0092      	lsls	r2, r2, #2
 801970e:	f107 010c 	add.w	r1, r7, #12
 8019712:	300c      	adds	r0, #12
 8019714:	f7fd fdc6 	bl	80172a4 <memcpy>
 8019718:	2201      	movs	r2, #1
 801971a:	4641      	mov	r1, r8
 801971c:	4630      	mov	r0, r6
 801971e:	f000 fee3 	bl	801a4e8 <__lshift>
 8019722:	9b00      	ldr	r3, [sp, #0]
 8019724:	3301      	adds	r3, #1
 8019726:	9305      	str	r3, [sp, #20]
 8019728:	9b00      	ldr	r3, [sp, #0]
 801972a:	4453      	add	r3, sl
 801972c:	9309      	str	r3, [sp, #36]	; 0x24
 801972e:	9b02      	ldr	r3, [sp, #8]
 8019730:	f003 0301 	and.w	r3, r3, #1
 8019734:	46b9      	mov	r9, r7
 8019736:	9308      	str	r3, [sp, #32]
 8019738:	4607      	mov	r7, r0
 801973a:	9b05      	ldr	r3, [sp, #20]
 801973c:	4621      	mov	r1, r4
 801973e:	3b01      	subs	r3, #1
 8019740:	4628      	mov	r0, r5
 8019742:	9302      	str	r3, [sp, #8]
 8019744:	f7ff fad6 	bl	8018cf4 <quorem>
 8019748:	4603      	mov	r3, r0
 801974a:	3330      	adds	r3, #48	; 0x30
 801974c:	9006      	str	r0, [sp, #24]
 801974e:	4649      	mov	r1, r9
 8019750:	4628      	mov	r0, r5
 8019752:	930a      	str	r3, [sp, #40]	; 0x28
 8019754:	f000 ff34 	bl	801a5c0 <__mcmp>
 8019758:	463a      	mov	r2, r7
 801975a:	4682      	mov	sl, r0
 801975c:	4621      	mov	r1, r4
 801975e:	4630      	mov	r0, r6
 8019760:	f000 ff4a 	bl	801a5f8 <__mdiff>
 8019764:	68c2      	ldr	r2, [r0, #12]
 8019766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019768:	4680      	mov	r8, r0
 801976a:	bb0a      	cbnz	r2, 80197b0 <_dtoa_r+0x9a0>
 801976c:	4601      	mov	r1, r0
 801976e:	4628      	mov	r0, r5
 8019770:	f000 ff26 	bl	801a5c0 <__mcmp>
 8019774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019776:	4602      	mov	r2, r0
 8019778:	4641      	mov	r1, r8
 801977a:	4630      	mov	r0, r6
 801977c:	920e      	str	r2, [sp, #56]	; 0x38
 801977e:	930a      	str	r3, [sp, #40]	; 0x28
 8019780:	f000 fc96 	bl	801a0b0 <_Bfree>
 8019784:	9b07      	ldr	r3, [sp, #28]
 8019786:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019788:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801978c:	ea43 0102 	orr.w	r1, r3, r2
 8019790:	9b08      	ldr	r3, [sp, #32]
 8019792:	430b      	orrs	r3, r1
 8019794:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019796:	d10d      	bne.n	80197b4 <_dtoa_r+0x9a4>
 8019798:	2b39      	cmp	r3, #57	; 0x39
 801979a:	d029      	beq.n	80197f0 <_dtoa_r+0x9e0>
 801979c:	f1ba 0f00 	cmp.w	sl, #0
 80197a0:	dd01      	ble.n	80197a6 <_dtoa_r+0x996>
 80197a2:	9b06      	ldr	r3, [sp, #24]
 80197a4:	3331      	adds	r3, #49	; 0x31
 80197a6:	9a02      	ldr	r2, [sp, #8]
 80197a8:	7013      	strb	r3, [r2, #0]
 80197aa:	e774      	b.n	8019696 <_dtoa_r+0x886>
 80197ac:	4638      	mov	r0, r7
 80197ae:	e7b8      	b.n	8019722 <_dtoa_r+0x912>
 80197b0:	2201      	movs	r2, #1
 80197b2:	e7e1      	b.n	8019778 <_dtoa_r+0x968>
 80197b4:	f1ba 0f00 	cmp.w	sl, #0
 80197b8:	db06      	blt.n	80197c8 <_dtoa_r+0x9b8>
 80197ba:	9907      	ldr	r1, [sp, #28]
 80197bc:	ea41 0a0a 	orr.w	sl, r1, sl
 80197c0:	9908      	ldr	r1, [sp, #32]
 80197c2:	ea5a 0101 	orrs.w	r1, sl, r1
 80197c6:	d120      	bne.n	801980a <_dtoa_r+0x9fa>
 80197c8:	2a00      	cmp	r2, #0
 80197ca:	ddec      	ble.n	80197a6 <_dtoa_r+0x996>
 80197cc:	4629      	mov	r1, r5
 80197ce:	2201      	movs	r2, #1
 80197d0:	4630      	mov	r0, r6
 80197d2:	9305      	str	r3, [sp, #20]
 80197d4:	f000 fe88 	bl	801a4e8 <__lshift>
 80197d8:	4621      	mov	r1, r4
 80197da:	4605      	mov	r5, r0
 80197dc:	f000 fef0 	bl	801a5c0 <__mcmp>
 80197e0:	2800      	cmp	r0, #0
 80197e2:	9b05      	ldr	r3, [sp, #20]
 80197e4:	dc02      	bgt.n	80197ec <_dtoa_r+0x9dc>
 80197e6:	d1de      	bne.n	80197a6 <_dtoa_r+0x996>
 80197e8:	07da      	lsls	r2, r3, #31
 80197ea:	d5dc      	bpl.n	80197a6 <_dtoa_r+0x996>
 80197ec:	2b39      	cmp	r3, #57	; 0x39
 80197ee:	d1d8      	bne.n	80197a2 <_dtoa_r+0x992>
 80197f0:	9a02      	ldr	r2, [sp, #8]
 80197f2:	2339      	movs	r3, #57	; 0x39
 80197f4:	7013      	strb	r3, [r2, #0]
 80197f6:	4643      	mov	r3, r8
 80197f8:	4698      	mov	r8, r3
 80197fa:	3b01      	subs	r3, #1
 80197fc:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8019800:	2a39      	cmp	r2, #57	; 0x39
 8019802:	d051      	beq.n	80198a8 <_dtoa_r+0xa98>
 8019804:	3201      	adds	r2, #1
 8019806:	701a      	strb	r2, [r3, #0]
 8019808:	e745      	b.n	8019696 <_dtoa_r+0x886>
 801980a:	2a00      	cmp	r2, #0
 801980c:	dd03      	ble.n	8019816 <_dtoa_r+0xa06>
 801980e:	2b39      	cmp	r3, #57	; 0x39
 8019810:	d0ee      	beq.n	80197f0 <_dtoa_r+0x9e0>
 8019812:	3301      	adds	r3, #1
 8019814:	e7c7      	b.n	80197a6 <_dtoa_r+0x996>
 8019816:	9a05      	ldr	r2, [sp, #20]
 8019818:	9909      	ldr	r1, [sp, #36]	; 0x24
 801981a:	f802 3c01 	strb.w	r3, [r2, #-1]
 801981e:	428a      	cmp	r2, r1
 8019820:	d02b      	beq.n	801987a <_dtoa_r+0xa6a>
 8019822:	4629      	mov	r1, r5
 8019824:	2300      	movs	r3, #0
 8019826:	220a      	movs	r2, #10
 8019828:	4630      	mov	r0, r6
 801982a:	f000 fc63 	bl	801a0f4 <__multadd>
 801982e:	45b9      	cmp	r9, r7
 8019830:	4605      	mov	r5, r0
 8019832:	f04f 0300 	mov.w	r3, #0
 8019836:	f04f 020a 	mov.w	r2, #10
 801983a:	4649      	mov	r1, r9
 801983c:	4630      	mov	r0, r6
 801983e:	d107      	bne.n	8019850 <_dtoa_r+0xa40>
 8019840:	f000 fc58 	bl	801a0f4 <__multadd>
 8019844:	4681      	mov	r9, r0
 8019846:	4607      	mov	r7, r0
 8019848:	9b05      	ldr	r3, [sp, #20]
 801984a:	3301      	adds	r3, #1
 801984c:	9305      	str	r3, [sp, #20]
 801984e:	e774      	b.n	801973a <_dtoa_r+0x92a>
 8019850:	f000 fc50 	bl	801a0f4 <__multadd>
 8019854:	4639      	mov	r1, r7
 8019856:	4681      	mov	r9, r0
 8019858:	2300      	movs	r3, #0
 801985a:	220a      	movs	r2, #10
 801985c:	4630      	mov	r0, r6
 801985e:	f000 fc49 	bl	801a0f4 <__multadd>
 8019862:	4607      	mov	r7, r0
 8019864:	e7f0      	b.n	8019848 <_dtoa_r+0xa38>
 8019866:	f1ba 0f00 	cmp.w	sl, #0
 801986a:	9a00      	ldr	r2, [sp, #0]
 801986c:	bfcc      	ite	gt
 801986e:	46d0      	movgt	r8, sl
 8019870:	f04f 0801 	movle.w	r8, #1
 8019874:	4490      	add	r8, r2
 8019876:	f04f 0900 	mov.w	r9, #0
 801987a:	4629      	mov	r1, r5
 801987c:	2201      	movs	r2, #1
 801987e:	4630      	mov	r0, r6
 8019880:	9302      	str	r3, [sp, #8]
 8019882:	f000 fe31 	bl	801a4e8 <__lshift>
 8019886:	4621      	mov	r1, r4
 8019888:	4605      	mov	r5, r0
 801988a:	f000 fe99 	bl	801a5c0 <__mcmp>
 801988e:	2800      	cmp	r0, #0
 8019890:	dcb1      	bgt.n	80197f6 <_dtoa_r+0x9e6>
 8019892:	d102      	bne.n	801989a <_dtoa_r+0xa8a>
 8019894:	9b02      	ldr	r3, [sp, #8]
 8019896:	07db      	lsls	r3, r3, #31
 8019898:	d4ad      	bmi.n	80197f6 <_dtoa_r+0x9e6>
 801989a:	4643      	mov	r3, r8
 801989c:	4698      	mov	r8, r3
 801989e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80198a2:	2a30      	cmp	r2, #48	; 0x30
 80198a4:	d0fa      	beq.n	801989c <_dtoa_r+0xa8c>
 80198a6:	e6f6      	b.n	8019696 <_dtoa_r+0x886>
 80198a8:	9a00      	ldr	r2, [sp, #0]
 80198aa:	429a      	cmp	r2, r3
 80198ac:	d1a4      	bne.n	80197f8 <_dtoa_r+0x9e8>
 80198ae:	f10b 0b01 	add.w	fp, fp, #1
 80198b2:	2331      	movs	r3, #49	; 0x31
 80198b4:	e778      	b.n	80197a8 <_dtoa_r+0x998>
 80198b6:	4b15      	ldr	r3, [pc, #84]	; (801990c <_dtoa_r+0xafc>)
 80198b8:	f7ff bb12 	b.w	8018ee0 <_dtoa_r+0xd0>
 80198bc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80198be:	2b00      	cmp	r3, #0
 80198c0:	f47f aaee 	bne.w	8018ea0 <_dtoa_r+0x90>
 80198c4:	4b12      	ldr	r3, [pc, #72]	; (8019910 <_dtoa_r+0xb00>)
 80198c6:	f7ff bb0b 	b.w	8018ee0 <_dtoa_r+0xd0>
 80198ca:	f1ba 0f00 	cmp.w	sl, #0
 80198ce:	dc03      	bgt.n	80198d8 <_dtoa_r+0xac8>
 80198d0:	9b07      	ldr	r3, [sp, #28]
 80198d2:	2b02      	cmp	r3, #2
 80198d4:	f73f aec7 	bgt.w	8019666 <_dtoa_r+0x856>
 80198d8:	f8dd 8000 	ldr.w	r8, [sp]
 80198dc:	4621      	mov	r1, r4
 80198de:	4628      	mov	r0, r5
 80198e0:	f7ff fa08 	bl	8018cf4 <quorem>
 80198e4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80198e8:	f808 3b01 	strb.w	r3, [r8], #1
 80198ec:	9a00      	ldr	r2, [sp, #0]
 80198ee:	eba8 0202 	sub.w	r2, r8, r2
 80198f2:	4592      	cmp	sl, r2
 80198f4:	ddb7      	ble.n	8019866 <_dtoa_r+0xa56>
 80198f6:	4629      	mov	r1, r5
 80198f8:	2300      	movs	r3, #0
 80198fa:	220a      	movs	r2, #10
 80198fc:	4630      	mov	r0, r6
 80198fe:	f000 fbf9 	bl	801a0f4 <__multadd>
 8019902:	4605      	mov	r5, r0
 8019904:	e7ea      	b.n	80198dc <_dtoa_r+0xacc>
 8019906:	bf00      	nop
 8019908:	0802840c 	.word	0x0802840c
 801990c:	0802820c 	.word	0x0802820c
 8019910:	08028389 	.word	0x08028389

08019914 <rshift>:
 8019914:	6903      	ldr	r3, [r0, #16]
 8019916:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801991a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801991e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8019922:	f100 0414 	add.w	r4, r0, #20
 8019926:	dd45      	ble.n	80199b4 <rshift+0xa0>
 8019928:	f011 011f 	ands.w	r1, r1, #31
 801992c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8019930:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8019934:	d10c      	bne.n	8019950 <rshift+0x3c>
 8019936:	f100 0710 	add.w	r7, r0, #16
 801993a:	4629      	mov	r1, r5
 801993c:	42b1      	cmp	r1, r6
 801993e:	d334      	bcc.n	80199aa <rshift+0x96>
 8019940:	1a9b      	subs	r3, r3, r2
 8019942:	009b      	lsls	r3, r3, #2
 8019944:	1eea      	subs	r2, r5, #3
 8019946:	4296      	cmp	r6, r2
 8019948:	bf38      	it	cc
 801994a:	2300      	movcc	r3, #0
 801994c:	4423      	add	r3, r4
 801994e:	e015      	b.n	801997c <rshift+0x68>
 8019950:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8019954:	f1c1 0820 	rsb	r8, r1, #32
 8019958:	40cf      	lsrs	r7, r1
 801995a:	f105 0e04 	add.w	lr, r5, #4
 801995e:	46a1      	mov	r9, r4
 8019960:	4576      	cmp	r6, lr
 8019962:	46f4      	mov	ip, lr
 8019964:	d815      	bhi.n	8019992 <rshift+0x7e>
 8019966:	1a9b      	subs	r3, r3, r2
 8019968:	009a      	lsls	r2, r3, #2
 801996a:	3a04      	subs	r2, #4
 801996c:	3501      	adds	r5, #1
 801996e:	42ae      	cmp	r6, r5
 8019970:	bf38      	it	cc
 8019972:	2200      	movcc	r2, #0
 8019974:	18a3      	adds	r3, r4, r2
 8019976:	50a7      	str	r7, [r4, r2]
 8019978:	b107      	cbz	r7, 801997c <rshift+0x68>
 801997a:	3304      	adds	r3, #4
 801997c:	1b1a      	subs	r2, r3, r4
 801997e:	42a3      	cmp	r3, r4
 8019980:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8019984:	bf08      	it	eq
 8019986:	2300      	moveq	r3, #0
 8019988:	6102      	str	r2, [r0, #16]
 801998a:	bf08      	it	eq
 801998c:	6143      	streq	r3, [r0, #20]
 801998e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019992:	f8dc c000 	ldr.w	ip, [ip]
 8019996:	fa0c fc08 	lsl.w	ip, ip, r8
 801999a:	ea4c 0707 	orr.w	r7, ip, r7
 801999e:	f849 7b04 	str.w	r7, [r9], #4
 80199a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80199a6:	40cf      	lsrs	r7, r1
 80199a8:	e7da      	b.n	8019960 <rshift+0x4c>
 80199aa:	f851 cb04 	ldr.w	ip, [r1], #4
 80199ae:	f847 cf04 	str.w	ip, [r7, #4]!
 80199b2:	e7c3      	b.n	801993c <rshift+0x28>
 80199b4:	4623      	mov	r3, r4
 80199b6:	e7e1      	b.n	801997c <rshift+0x68>

080199b8 <__hexdig_fun>:
 80199b8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80199bc:	2b09      	cmp	r3, #9
 80199be:	d802      	bhi.n	80199c6 <__hexdig_fun+0xe>
 80199c0:	3820      	subs	r0, #32
 80199c2:	b2c0      	uxtb	r0, r0
 80199c4:	4770      	bx	lr
 80199c6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80199ca:	2b05      	cmp	r3, #5
 80199cc:	d801      	bhi.n	80199d2 <__hexdig_fun+0x1a>
 80199ce:	3847      	subs	r0, #71	; 0x47
 80199d0:	e7f7      	b.n	80199c2 <__hexdig_fun+0xa>
 80199d2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80199d6:	2b05      	cmp	r3, #5
 80199d8:	d801      	bhi.n	80199de <__hexdig_fun+0x26>
 80199da:	3827      	subs	r0, #39	; 0x27
 80199dc:	e7f1      	b.n	80199c2 <__hexdig_fun+0xa>
 80199de:	2000      	movs	r0, #0
 80199e0:	4770      	bx	lr
	...

080199e4 <__gethex>:
 80199e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199e8:	ed2d 8b02 	vpush	{d8}
 80199ec:	b089      	sub	sp, #36	; 0x24
 80199ee:	ee08 0a10 	vmov	s16, r0
 80199f2:	9304      	str	r3, [sp, #16]
 80199f4:	4bbc      	ldr	r3, [pc, #752]	; (8019ce8 <__gethex+0x304>)
 80199f6:	681b      	ldr	r3, [r3, #0]
 80199f8:	9301      	str	r3, [sp, #4]
 80199fa:	4618      	mov	r0, r3
 80199fc:	468b      	mov	fp, r1
 80199fe:	4690      	mov	r8, r2
 8019a00:	f7ee fc7e 	bl	8008300 <strlen>
 8019a04:	9b01      	ldr	r3, [sp, #4]
 8019a06:	f8db 2000 	ldr.w	r2, [fp]
 8019a0a:	4403      	add	r3, r0
 8019a0c:	4682      	mov	sl, r0
 8019a0e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8019a12:	9305      	str	r3, [sp, #20]
 8019a14:	1c93      	adds	r3, r2, #2
 8019a16:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8019a1a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8019a1e:	32fe      	adds	r2, #254	; 0xfe
 8019a20:	18d1      	adds	r1, r2, r3
 8019a22:	461f      	mov	r7, r3
 8019a24:	f813 0b01 	ldrb.w	r0, [r3], #1
 8019a28:	9100      	str	r1, [sp, #0]
 8019a2a:	2830      	cmp	r0, #48	; 0x30
 8019a2c:	d0f8      	beq.n	8019a20 <__gethex+0x3c>
 8019a2e:	f7ff ffc3 	bl	80199b8 <__hexdig_fun>
 8019a32:	4604      	mov	r4, r0
 8019a34:	2800      	cmp	r0, #0
 8019a36:	d13a      	bne.n	8019aae <__gethex+0xca>
 8019a38:	9901      	ldr	r1, [sp, #4]
 8019a3a:	4652      	mov	r2, sl
 8019a3c:	4638      	mov	r0, r7
 8019a3e:	f7fe fab3 	bl	8017fa8 <strncmp>
 8019a42:	4605      	mov	r5, r0
 8019a44:	2800      	cmp	r0, #0
 8019a46:	d168      	bne.n	8019b1a <__gethex+0x136>
 8019a48:	f817 000a 	ldrb.w	r0, [r7, sl]
 8019a4c:	eb07 060a 	add.w	r6, r7, sl
 8019a50:	f7ff ffb2 	bl	80199b8 <__hexdig_fun>
 8019a54:	2800      	cmp	r0, #0
 8019a56:	d062      	beq.n	8019b1e <__gethex+0x13a>
 8019a58:	4633      	mov	r3, r6
 8019a5a:	7818      	ldrb	r0, [r3, #0]
 8019a5c:	2830      	cmp	r0, #48	; 0x30
 8019a5e:	461f      	mov	r7, r3
 8019a60:	f103 0301 	add.w	r3, r3, #1
 8019a64:	d0f9      	beq.n	8019a5a <__gethex+0x76>
 8019a66:	f7ff ffa7 	bl	80199b8 <__hexdig_fun>
 8019a6a:	2301      	movs	r3, #1
 8019a6c:	fab0 f480 	clz	r4, r0
 8019a70:	0964      	lsrs	r4, r4, #5
 8019a72:	4635      	mov	r5, r6
 8019a74:	9300      	str	r3, [sp, #0]
 8019a76:	463a      	mov	r2, r7
 8019a78:	4616      	mov	r6, r2
 8019a7a:	3201      	adds	r2, #1
 8019a7c:	7830      	ldrb	r0, [r6, #0]
 8019a7e:	f7ff ff9b 	bl	80199b8 <__hexdig_fun>
 8019a82:	2800      	cmp	r0, #0
 8019a84:	d1f8      	bne.n	8019a78 <__gethex+0x94>
 8019a86:	9901      	ldr	r1, [sp, #4]
 8019a88:	4652      	mov	r2, sl
 8019a8a:	4630      	mov	r0, r6
 8019a8c:	f7fe fa8c 	bl	8017fa8 <strncmp>
 8019a90:	b980      	cbnz	r0, 8019ab4 <__gethex+0xd0>
 8019a92:	b94d      	cbnz	r5, 8019aa8 <__gethex+0xc4>
 8019a94:	eb06 050a 	add.w	r5, r6, sl
 8019a98:	462a      	mov	r2, r5
 8019a9a:	4616      	mov	r6, r2
 8019a9c:	3201      	adds	r2, #1
 8019a9e:	7830      	ldrb	r0, [r6, #0]
 8019aa0:	f7ff ff8a 	bl	80199b8 <__hexdig_fun>
 8019aa4:	2800      	cmp	r0, #0
 8019aa6:	d1f8      	bne.n	8019a9a <__gethex+0xb6>
 8019aa8:	1bad      	subs	r5, r5, r6
 8019aaa:	00ad      	lsls	r5, r5, #2
 8019aac:	e004      	b.n	8019ab8 <__gethex+0xd4>
 8019aae:	2400      	movs	r4, #0
 8019ab0:	4625      	mov	r5, r4
 8019ab2:	e7e0      	b.n	8019a76 <__gethex+0x92>
 8019ab4:	2d00      	cmp	r5, #0
 8019ab6:	d1f7      	bne.n	8019aa8 <__gethex+0xc4>
 8019ab8:	7833      	ldrb	r3, [r6, #0]
 8019aba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8019abe:	2b50      	cmp	r3, #80	; 0x50
 8019ac0:	d13b      	bne.n	8019b3a <__gethex+0x156>
 8019ac2:	7873      	ldrb	r3, [r6, #1]
 8019ac4:	2b2b      	cmp	r3, #43	; 0x2b
 8019ac6:	d02c      	beq.n	8019b22 <__gethex+0x13e>
 8019ac8:	2b2d      	cmp	r3, #45	; 0x2d
 8019aca:	d02e      	beq.n	8019b2a <__gethex+0x146>
 8019acc:	1c71      	adds	r1, r6, #1
 8019ace:	f04f 0900 	mov.w	r9, #0
 8019ad2:	7808      	ldrb	r0, [r1, #0]
 8019ad4:	f7ff ff70 	bl	80199b8 <__hexdig_fun>
 8019ad8:	1e43      	subs	r3, r0, #1
 8019ada:	b2db      	uxtb	r3, r3
 8019adc:	2b18      	cmp	r3, #24
 8019ade:	d82c      	bhi.n	8019b3a <__gethex+0x156>
 8019ae0:	f1a0 0210 	sub.w	r2, r0, #16
 8019ae4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8019ae8:	f7ff ff66 	bl	80199b8 <__hexdig_fun>
 8019aec:	1e43      	subs	r3, r0, #1
 8019aee:	b2db      	uxtb	r3, r3
 8019af0:	2b18      	cmp	r3, #24
 8019af2:	d91d      	bls.n	8019b30 <__gethex+0x14c>
 8019af4:	f1b9 0f00 	cmp.w	r9, #0
 8019af8:	d000      	beq.n	8019afc <__gethex+0x118>
 8019afa:	4252      	negs	r2, r2
 8019afc:	4415      	add	r5, r2
 8019afe:	f8cb 1000 	str.w	r1, [fp]
 8019b02:	b1e4      	cbz	r4, 8019b3e <__gethex+0x15a>
 8019b04:	9b00      	ldr	r3, [sp, #0]
 8019b06:	2b00      	cmp	r3, #0
 8019b08:	bf14      	ite	ne
 8019b0a:	2700      	movne	r7, #0
 8019b0c:	2706      	moveq	r7, #6
 8019b0e:	4638      	mov	r0, r7
 8019b10:	b009      	add	sp, #36	; 0x24
 8019b12:	ecbd 8b02 	vpop	{d8}
 8019b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b1a:	463e      	mov	r6, r7
 8019b1c:	4625      	mov	r5, r4
 8019b1e:	2401      	movs	r4, #1
 8019b20:	e7ca      	b.n	8019ab8 <__gethex+0xd4>
 8019b22:	f04f 0900 	mov.w	r9, #0
 8019b26:	1cb1      	adds	r1, r6, #2
 8019b28:	e7d3      	b.n	8019ad2 <__gethex+0xee>
 8019b2a:	f04f 0901 	mov.w	r9, #1
 8019b2e:	e7fa      	b.n	8019b26 <__gethex+0x142>
 8019b30:	230a      	movs	r3, #10
 8019b32:	fb03 0202 	mla	r2, r3, r2, r0
 8019b36:	3a10      	subs	r2, #16
 8019b38:	e7d4      	b.n	8019ae4 <__gethex+0x100>
 8019b3a:	4631      	mov	r1, r6
 8019b3c:	e7df      	b.n	8019afe <__gethex+0x11a>
 8019b3e:	1bf3      	subs	r3, r6, r7
 8019b40:	3b01      	subs	r3, #1
 8019b42:	4621      	mov	r1, r4
 8019b44:	2b07      	cmp	r3, #7
 8019b46:	dc0b      	bgt.n	8019b60 <__gethex+0x17c>
 8019b48:	ee18 0a10 	vmov	r0, s16
 8019b4c:	f000 fa70 	bl	801a030 <_Balloc>
 8019b50:	4604      	mov	r4, r0
 8019b52:	b940      	cbnz	r0, 8019b66 <__gethex+0x182>
 8019b54:	4b65      	ldr	r3, [pc, #404]	; (8019cec <__gethex+0x308>)
 8019b56:	4602      	mov	r2, r0
 8019b58:	21de      	movs	r1, #222	; 0xde
 8019b5a:	4865      	ldr	r0, [pc, #404]	; (8019cf0 <__gethex+0x30c>)
 8019b5c:	f001 f962 	bl	801ae24 <__assert_func>
 8019b60:	3101      	adds	r1, #1
 8019b62:	105b      	asrs	r3, r3, #1
 8019b64:	e7ee      	b.n	8019b44 <__gethex+0x160>
 8019b66:	f100 0914 	add.w	r9, r0, #20
 8019b6a:	f04f 0b00 	mov.w	fp, #0
 8019b6e:	f1ca 0301 	rsb	r3, sl, #1
 8019b72:	f8cd 9008 	str.w	r9, [sp, #8]
 8019b76:	f8cd b000 	str.w	fp, [sp]
 8019b7a:	9306      	str	r3, [sp, #24]
 8019b7c:	42b7      	cmp	r7, r6
 8019b7e:	d340      	bcc.n	8019c02 <__gethex+0x21e>
 8019b80:	9802      	ldr	r0, [sp, #8]
 8019b82:	9b00      	ldr	r3, [sp, #0]
 8019b84:	f840 3b04 	str.w	r3, [r0], #4
 8019b88:	eba0 0009 	sub.w	r0, r0, r9
 8019b8c:	1080      	asrs	r0, r0, #2
 8019b8e:	0146      	lsls	r6, r0, #5
 8019b90:	6120      	str	r0, [r4, #16]
 8019b92:	4618      	mov	r0, r3
 8019b94:	f000 fb42 	bl	801a21c <__hi0bits>
 8019b98:	1a30      	subs	r0, r6, r0
 8019b9a:	f8d8 6000 	ldr.w	r6, [r8]
 8019b9e:	42b0      	cmp	r0, r6
 8019ba0:	dd63      	ble.n	8019c6a <__gethex+0x286>
 8019ba2:	1b87      	subs	r7, r0, r6
 8019ba4:	4639      	mov	r1, r7
 8019ba6:	4620      	mov	r0, r4
 8019ba8:	f000 fedd 	bl	801a966 <__any_on>
 8019bac:	4682      	mov	sl, r0
 8019bae:	b1a8      	cbz	r0, 8019bdc <__gethex+0x1f8>
 8019bb0:	1e7b      	subs	r3, r7, #1
 8019bb2:	1159      	asrs	r1, r3, #5
 8019bb4:	f003 021f 	and.w	r2, r3, #31
 8019bb8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8019bbc:	f04f 0a01 	mov.w	sl, #1
 8019bc0:	fa0a f202 	lsl.w	r2, sl, r2
 8019bc4:	420a      	tst	r2, r1
 8019bc6:	d009      	beq.n	8019bdc <__gethex+0x1f8>
 8019bc8:	4553      	cmp	r3, sl
 8019bca:	dd05      	ble.n	8019bd8 <__gethex+0x1f4>
 8019bcc:	1eb9      	subs	r1, r7, #2
 8019bce:	4620      	mov	r0, r4
 8019bd0:	f000 fec9 	bl	801a966 <__any_on>
 8019bd4:	2800      	cmp	r0, #0
 8019bd6:	d145      	bne.n	8019c64 <__gethex+0x280>
 8019bd8:	f04f 0a02 	mov.w	sl, #2
 8019bdc:	4639      	mov	r1, r7
 8019bde:	4620      	mov	r0, r4
 8019be0:	f7ff fe98 	bl	8019914 <rshift>
 8019be4:	443d      	add	r5, r7
 8019be6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019bea:	42ab      	cmp	r3, r5
 8019bec:	da4c      	bge.n	8019c88 <__gethex+0x2a4>
 8019bee:	ee18 0a10 	vmov	r0, s16
 8019bf2:	4621      	mov	r1, r4
 8019bf4:	f000 fa5c 	bl	801a0b0 <_Bfree>
 8019bf8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019bfa:	2300      	movs	r3, #0
 8019bfc:	6013      	str	r3, [r2, #0]
 8019bfe:	27a3      	movs	r7, #163	; 0xa3
 8019c00:	e785      	b.n	8019b0e <__gethex+0x12a>
 8019c02:	1e73      	subs	r3, r6, #1
 8019c04:	9a05      	ldr	r2, [sp, #20]
 8019c06:	9303      	str	r3, [sp, #12]
 8019c08:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8019c0c:	4293      	cmp	r3, r2
 8019c0e:	d019      	beq.n	8019c44 <__gethex+0x260>
 8019c10:	f1bb 0f20 	cmp.w	fp, #32
 8019c14:	d107      	bne.n	8019c26 <__gethex+0x242>
 8019c16:	9b02      	ldr	r3, [sp, #8]
 8019c18:	9a00      	ldr	r2, [sp, #0]
 8019c1a:	f843 2b04 	str.w	r2, [r3], #4
 8019c1e:	9302      	str	r3, [sp, #8]
 8019c20:	2300      	movs	r3, #0
 8019c22:	9300      	str	r3, [sp, #0]
 8019c24:	469b      	mov	fp, r3
 8019c26:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8019c2a:	f7ff fec5 	bl	80199b8 <__hexdig_fun>
 8019c2e:	9b00      	ldr	r3, [sp, #0]
 8019c30:	f000 000f 	and.w	r0, r0, #15
 8019c34:	fa00 f00b 	lsl.w	r0, r0, fp
 8019c38:	4303      	orrs	r3, r0
 8019c3a:	9300      	str	r3, [sp, #0]
 8019c3c:	f10b 0b04 	add.w	fp, fp, #4
 8019c40:	9b03      	ldr	r3, [sp, #12]
 8019c42:	e00d      	b.n	8019c60 <__gethex+0x27c>
 8019c44:	9b03      	ldr	r3, [sp, #12]
 8019c46:	9a06      	ldr	r2, [sp, #24]
 8019c48:	4413      	add	r3, r2
 8019c4a:	42bb      	cmp	r3, r7
 8019c4c:	d3e0      	bcc.n	8019c10 <__gethex+0x22c>
 8019c4e:	4618      	mov	r0, r3
 8019c50:	9901      	ldr	r1, [sp, #4]
 8019c52:	9307      	str	r3, [sp, #28]
 8019c54:	4652      	mov	r2, sl
 8019c56:	f7fe f9a7 	bl	8017fa8 <strncmp>
 8019c5a:	9b07      	ldr	r3, [sp, #28]
 8019c5c:	2800      	cmp	r0, #0
 8019c5e:	d1d7      	bne.n	8019c10 <__gethex+0x22c>
 8019c60:	461e      	mov	r6, r3
 8019c62:	e78b      	b.n	8019b7c <__gethex+0x198>
 8019c64:	f04f 0a03 	mov.w	sl, #3
 8019c68:	e7b8      	b.n	8019bdc <__gethex+0x1f8>
 8019c6a:	da0a      	bge.n	8019c82 <__gethex+0x29e>
 8019c6c:	1a37      	subs	r7, r6, r0
 8019c6e:	4621      	mov	r1, r4
 8019c70:	ee18 0a10 	vmov	r0, s16
 8019c74:	463a      	mov	r2, r7
 8019c76:	f000 fc37 	bl	801a4e8 <__lshift>
 8019c7a:	1bed      	subs	r5, r5, r7
 8019c7c:	4604      	mov	r4, r0
 8019c7e:	f100 0914 	add.w	r9, r0, #20
 8019c82:	f04f 0a00 	mov.w	sl, #0
 8019c86:	e7ae      	b.n	8019be6 <__gethex+0x202>
 8019c88:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8019c8c:	42a8      	cmp	r0, r5
 8019c8e:	dd72      	ble.n	8019d76 <__gethex+0x392>
 8019c90:	1b45      	subs	r5, r0, r5
 8019c92:	42ae      	cmp	r6, r5
 8019c94:	dc36      	bgt.n	8019d04 <__gethex+0x320>
 8019c96:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019c9a:	2b02      	cmp	r3, #2
 8019c9c:	d02a      	beq.n	8019cf4 <__gethex+0x310>
 8019c9e:	2b03      	cmp	r3, #3
 8019ca0:	d02c      	beq.n	8019cfc <__gethex+0x318>
 8019ca2:	2b01      	cmp	r3, #1
 8019ca4:	d115      	bne.n	8019cd2 <__gethex+0x2ee>
 8019ca6:	42ae      	cmp	r6, r5
 8019ca8:	d113      	bne.n	8019cd2 <__gethex+0x2ee>
 8019caa:	2e01      	cmp	r6, #1
 8019cac:	d10b      	bne.n	8019cc6 <__gethex+0x2e2>
 8019cae:	9a04      	ldr	r2, [sp, #16]
 8019cb0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8019cb4:	6013      	str	r3, [r2, #0]
 8019cb6:	2301      	movs	r3, #1
 8019cb8:	6123      	str	r3, [r4, #16]
 8019cba:	f8c9 3000 	str.w	r3, [r9]
 8019cbe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019cc0:	2762      	movs	r7, #98	; 0x62
 8019cc2:	601c      	str	r4, [r3, #0]
 8019cc4:	e723      	b.n	8019b0e <__gethex+0x12a>
 8019cc6:	1e71      	subs	r1, r6, #1
 8019cc8:	4620      	mov	r0, r4
 8019cca:	f000 fe4c 	bl	801a966 <__any_on>
 8019cce:	2800      	cmp	r0, #0
 8019cd0:	d1ed      	bne.n	8019cae <__gethex+0x2ca>
 8019cd2:	ee18 0a10 	vmov	r0, s16
 8019cd6:	4621      	mov	r1, r4
 8019cd8:	f000 f9ea 	bl	801a0b0 <_Bfree>
 8019cdc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019cde:	2300      	movs	r3, #0
 8019ce0:	6013      	str	r3, [r2, #0]
 8019ce2:	2750      	movs	r7, #80	; 0x50
 8019ce4:	e713      	b.n	8019b0e <__gethex+0x12a>
 8019ce6:	bf00      	nop
 8019ce8:	08028488 	.word	0x08028488
 8019cec:	0802840c 	.word	0x0802840c
 8019cf0:	0802841d 	.word	0x0802841d
 8019cf4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019cf6:	2b00      	cmp	r3, #0
 8019cf8:	d1eb      	bne.n	8019cd2 <__gethex+0x2ee>
 8019cfa:	e7d8      	b.n	8019cae <__gethex+0x2ca>
 8019cfc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019cfe:	2b00      	cmp	r3, #0
 8019d00:	d1d5      	bne.n	8019cae <__gethex+0x2ca>
 8019d02:	e7e6      	b.n	8019cd2 <__gethex+0x2ee>
 8019d04:	1e6f      	subs	r7, r5, #1
 8019d06:	f1ba 0f00 	cmp.w	sl, #0
 8019d0a:	d131      	bne.n	8019d70 <__gethex+0x38c>
 8019d0c:	b127      	cbz	r7, 8019d18 <__gethex+0x334>
 8019d0e:	4639      	mov	r1, r7
 8019d10:	4620      	mov	r0, r4
 8019d12:	f000 fe28 	bl	801a966 <__any_on>
 8019d16:	4682      	mov	sl, r0
 8019d18:	117b      	asrs	r3, r7, #5
 8019d1a:	2101      	movs	r1, #1
 8019d1c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8019d20:	f007 071f 	and.w	r7, r7, #31
 8019d24:	fa01 f707 	lsl.w	r7, r1, r7
 8019d28:	421f      	tst	r7, r3
 8019d2a:	4629      	mov	r1, r5
 8019d2c:	4620      	mov	r0, r4
 8019d2e:	bf18      	it	ne
 8019d30:	f04a 0a02 	orrne.w	sl, sl, #2
 8019d34:	1b76      	subs	r6, r6, r5
 8019d36:	f7ff fded 	bl	8019914 <rshift>
 8019d3a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8019d3e:	2702      	movs	r7, #2
 8019d40:	f1ba 0f00 	cmp.w	sl, #0
 8019d44:	d048      	beq.n	8019dd8 <__gethex+0x3f4>
 8019d46:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019d4a:	2b02      	cmp	r3, #2
 8019d4c:	d015      	beq.n	8019d7a <__gethex+0x396>
 8019d4e:	2b03      	cmp	r3, #3
 8019d50:	d017      	beq.n	8019d82 <__gethex+0x39e>
 8019d52:	2b01      	cmp	r3, #1
 8019d54:	d109      	bne.n	8019d6a <__gethex+0x386>
 8019d56:	f01a 0f02 	tst.w	sl, #2
 8019d5a:	d006      	beq.n	8019d6a <__gethex+0x386>
 8019d5c:	f8d9 0000 	ldr.w	r0, [r9]
 8019d60:	ea4a 0a00 	orr.w	sl, sl, r0
 8019d64:	f01a 0f01 	tst.w	sl, #1
 8019d68:	d10e      	bne.n	8019d88 <__gethex+0x3a4>
 8019d6a:	f047 0710 	orr.w	r7, r7, #16
 8019d6e:	e033      	b.n	8019dd8 <__gethex+0x3f4>
 8019d70:	f04f 0a01 	mov.w	sl, #1
 8019d74:	e7d0      	b.n	8019d18 <__gethex+0x334>
 8019d76:	2701      	movs	r7, #1
 8019d78:	e7e2      	b.n	8019d40 <__gethex+0x35c>
 8019d7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019d7c:	f1c3 0301 	rsb	r3, r3, #1
 8019d80:	9315      	str	r3, [sp, #84]	; 0x54
 8019d82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019d84:	2b00      	cmp	r3, #0
 8019d86:	d0f0      	beq.n	8019d6a <__gethex+0x386>
 8019d88:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8019d8c:	f104 0314 	add.w	r3, r4, #20
 8019d90:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8019d94:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8019d98:	f04f 0c00 	mov.w	ip, #0
 8019d9c:	4618      	mov	r0, r3
 8019d9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019da2:	f1b2 3fff 	cmp.w	r2, #4294967295
 8019da6:	d01c      	beq.n	8019de2 <__gethex+0x3fe>
 8019da8:	3201      	adds	r2, #1
 8019daa:	6002      	str	r2, [r0, #0]
 8019dac:	2f02      	cmp	r7, #2
 8019dae:	f104 0314 	add.w	r3, r4, #20
 8019db2:	d13f      	bne.n	8019e34 <__gethex+0x450>
 8019db4:	f8d8 2000 	ldr.w	r2, [r8]
 8019db8:	3a01      	subs	r2, #1
 8019dba:	42b2      	cmp	r2, r6
 8019dbc:	d10a      	bne.n	8019dd4 <__gethex+0x3f0>
 8019dbe:	1171      	asrs	r1, r6, #5
 8019dc0:	2201      	movs	r2, #1
 8019dc2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019dc6:	f006 061f 	and.w	r6, r6, #31
 8019dca:	fa02 f606 	lsl.w	r6, r2, r6
 8019dce:	421e      	tst	r6, r3
 8019dd0:	bf18      	it	ne
 8019dd2:	4617      	movne	r7, r2
 8019dd4:	f047 0720 	orr.w	r7, r7, #32
 8019dd8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019dda:	601c      	str	r4, [r3, #0]
 8019ddc:	9b04      	ldr	r3, [sp, #16]
 8019dde:	601d      	str	r5, [r3, #0]
 8019de0:	e695      	b.n	8019b0e <__gethex+0x12a>
 8019de2:	4299      	cmp	r1, r3
 8019de4:	f843 cc04 	str.w	ip, [r3, #-4]
 8019de8:	d8d8      	bhi.n	8019d9c <__gethex+0x3b8>
 8019dea:	68a3      	ldr	r3, [r4, #8]
 8019dec:	459b      	cmp	fp, r3
 8019dee:	db19      	blt.n	8019e24 <__gethex+0x440>
 8019df0:	6861      	ldr	r1, [r4, #4]
 8019df2:	ee18 0a10 	vmov	r0, s16
 8019df6:	3101      	adds	r1, #1
 8019df8:	f000 f91a 	bl	801a030 <_Balloc>
 8019dfc:	4681      	mov	r9, r0
 8019dfe:	b918      	cbnz	r0, 8019e08 <__gethex+0x424>
 8019e00:	4b1a      	ldr	r3, [pc, #104]	; (8019e6c <__gethex+0x488>)
 8019e02:	4602      	mov	r2, r0
 8019e04:	2184      	movs	r1, #132	; 0x84
 8019e06:	e6a8      	b.n	8019b5a <__gethex+0x176>
 8019e08:	6922      	ldr	r2, [r4, #16]
 8019e0a:	3202      	adds	r2, #2
 8019e0c:	f104 010c 	add.w	r1, r4, #12
 8019e10:	0092      	lsls	r2, r2, #2
 8019e12:	300c      	adds	r0, #12
 8019e14:	f7fd fa46 	bl	80172a4 <memcpy>
 8019e18:	4621      	mov	r1, r4
 8019e1a:	ee18 0a10 	vmov	r0, s16
 8019e1e:	f000 f947 	bl	801a0b0 <_Bfree>
 8019e22:	464c      	mov	r4, r9
 8019e24:	6923      	ldr	r3, [r4, #16]
 8019e26:	1c5a      	adds	r2, r3, #1
 8019e28:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8019e2c:	6122      	str	r2, [r4, #16]
 8019e2e:	2201      	movs	r2, #1
 8019e30:	615a      	str	r2, [r3, #20]
 8019e32:	e7bb      	b.n	8019dac <__gethex+0x3c8>
 8019e34:	6922      	ldr	r2, [r4, #16]
 8019e36:	455a      	cmp	r2, fp
 8019e38:	dd0b      	ble.n	8019e52 <__gethex+0x46e>
 8019e3a:	2101      	movs	r1, #1
 8019e3c:	4620      	mov	r0, r4
 8019e3e:	f7ff fd69 	bl	8019914 <rshift>
 8019e42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019e46:	3501      	adds	r5, #1
 8019e48:	42ab      	cmp	r3, r5
 8019e4a:	f6ff aed0 	blt.w	8019bee <__gethex+0x20a>
 8019e4e:	2701      	movs	r7, #1
 8019e50:	e7c0      	b.n	8019dd4 <__gethex+0x3f0>
 8019e52:	f016 061f 	ands.w	r6, r6, #31
 8019e56:	d0fa      	beq.n	8019e4e <__gethex+0x46a>
 8019e58:	449a      	add	sl, r3
 8019e5a:	f1c6 0620 	rsb	r6, r6, #32
 8019e5e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8019e62:	f000 f9db 	bl	801a21c <__hi0bits>
 8019e66:	42b0      	cmp	r0, r6
 8019e68:	dbe7      	blt.n	8019e3a <__gethex+0x456>
 8019e6a:	e7f0      	b.n	8019e4e <__gethex+0x46a>
 8019e6c:	0802840c 	.word	0x0802840c

08019e70 <L_shift>:
 8019e70:	f1c2 0208 	rsb	r2, r2, #8
 8019e74:	0092      	lsls	r2, r2, #2
 8019e76:	b570      	push	{r4, r5, r6, lr}
 8019e78:	f1c2 0620 	rsb	r6, r2, #32
 8019e7c:	6843      	ldr	r3, [r0, #4]
 8019e7e:	6804      	ldr	r4, [r0, #0]
 8019e80:	fa03 f506 	lsl.w	r5, r3, r6
 8019e84:	432c      	orrs	r4, r5
 8019e86:	40d3      	lsrs	r3, r2
 8019e88:	6004      	str	r4, [r0, #0]
 8019e8a:	f840 3f04 	str.w	r3, [r0, #4]!
 8019e8e:	4288      	cmp	r0, r1
 8019e90:	d3f4      	bcc.n	8019e7c <L_shift+0xc>
 8019e92:	bd70      	pop	{r4, r5, r6, pc}

08019e94 <__match>:
 8019e94:	b530      	push	{r4, r5, lr}
 8019e96:	6803      	ldr	r3, [r0, #0]
 8019e98:	3301      	adds	r3, #1
 8019e9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019e9e:	b914      	cbnz	r4, 8019ea6 <__match+0x12>
 8019ea0:	6003      	str	r3, [r0, #0]
 8019ea2:	2001      	movs	r0, #1
 8019ea4:	bd30      	pop	{r4, r5, pc}
 8019ea6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019eaa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8019eae:	2d19      	cmp	r5, #25
 8019eb0:	bf98      	it	ls
 8019eb2:	3220      	addls	r2, #32
 8019eb4:	42a2      	cmp	r2, r4
 8019eb6:	d0f0      	beq.n	8019e9a <__match+0x6>
 8019eb8:	2000      	movs	r0, #0
 8019eba:	e7f3      	b.n	8019ea4 <__match+0x10>

08019ebc <__hexnan>:
 8019ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ec0:	680b      	ldr	r3, [r1, #0]
 8019ec2:	6801      	ldr	r1, [r0, #0]
 8019ec4:	115e      	asrs	r6, r3, #5
 8019ec6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8019eca:	f013 031f 	ands.w	r3, r3, #31
 8019ece:	b087      	sub	sp, #28
 8019ed0:	bf18      	it	ne
 8019ed2:	3604      	addne	r6, #4
 8019ed4:	2500      	movs	r5, #0
 8019ed6:	1f37      	subs	r7, r6, #4
 8019ed8:	4682      	mov	sl, r0
 8019eda:	4690      	mov	r8, r2
 8019edc:	9301      	str	r3, [sp, #4]
 8019ede:	f846 5c04 	str.w	r5, [r6, #-4]
 8019ee2:	46b9      	mov	r9, r7
 8019ee4:	463c      	mov	r4, r7
 8019ee6:	9502      	str	r5, [sp, #8]
 8019ee8:	46ab      	mov	fp, r5
 8019eea:	784a      	ldrb	r2, [r1, #1]
 8019eec:	1c4b      	adds	r3, r1, #1
 8019eee:	9303      	str	r3, [sp, #12]
 8019ef0:	b342      	cbz	r2, 8019f44 <__hexnan+0x88>
 8019ef2:	4610      	mov	r0, r2
 8019ef4:	9105      	str	r1, [sp, #20]
 8019ef6:	9204      	str	r2, [sp, #16]
 8019ef8:	f7ff fd5e 	bl	80199b8 <__hexdig_fun>
 8019efc:	2800      	cmp	r0, #0
 8019efe:	d14f      	bne.n	8019fa0 <__hexnan+0xe4>
 8019f00:	9a04      	ldr	r2, [sp, #16]
 8019f02:	9905      	ldr	r1, [sp, #20]
 8019f04:	2a20      	cmp	r2, #32
 8019f06:	d818      	bhi.n	8019f3a <__hexnan+0x7e>
 8019f08:	9b02      	ldr	r3, [sp, #8]
 8019f0a:	459b      	cmp	fp, r3
 8019f0c:	dd13      	ble.n	8019f36 <__hexnan+0x7a>
 8019f0e:	454c      	cmp	r4, r9
 8019f10:	d206      	bcs.n	8019f20 <__hexnan+0x64>
 8019f12:	2d07      	cmp	r5, #7
 8019f14:	dc04      	bgt.n	8019f20 <__hexnan+0x64>
 8019f16:	462a      	mov	r2, r5
 8019f18:	4649      	mov	r1, r9
 8019f1a:	4620      	mov	r0, r4
 8019f1c:	f7ff ffa8 	bl	8019e70 <L_shift>
 8019f20:	4544      	cmp	r4, r8
 8019f22:	d950      	bls.n	8019fc6 <__hexnan+0x10a>
 8019f24:	2300      	movs	r3, #0
 8019f26:	f1a4 0904 	sub.w	r9, r4, #4
 8019f2a:	f844 3c04 	str.w	r3, [r4, #-4]
 8019f2e:	f8cd b008 	str.w	fp, [sp, #8]
 8019f32:	464c      	mov	r4, r9
 8019f34:	461d      	mov	r5, r3
 8019f36:	9903      	ldr	r1, [sp, #12]
 8019f38:	e7d7      	b.n	8019eea <__hexnan+0x2e>
 8019f3a:	2a29      	cmp	r2, #41	; 0x29
 8019f3c:	d156      	bne.n	8019fec <__hexnan+0x130>
 8019f3e:	3102      	adds	r1, #2
 8019f40:	f8ca 1000 	str.w	r1, [sl]
 8019f44:	f1bb 0f00 	cmp.w	fp, #0
 8019f48:	d050      	beq.n	8019fec <__hexnan+0x130>
 8019f4a:	454c      	cmp	r4, r9
 8019f4c:	d206      	bcs.n	8019f5c <__hexnan+0xa0>
 8019f4e:	2d07      	cmp	r5, #7
 8019f50:	dc04      	bgt.n	8019f5c <__hexnan+0xa0>
 8019f52:	462a      	mov	r2, r5
 8019f54:	4649      	mov	r1, r9
 8019f56:	4620      	mov	r0, r4
 8019f58:	f7ff ff8a 	bl	8019e70 <L_shift>
 8019f5c:	4544      	cmp	r4, r8
 8019f5e:	d934      	bls.n	8019fca <__hexnan+0x10e>
 8019f60:	f1a8 0204 	sub.w	r2, r8, #4
 8019f64:	4623      	mov	r3, r4
 8019f66:	f853 1b04 	ldr.w	r1, [r3], #4
 8019f6a:	f842 1f04 	str.w	r1, [r2, #4]!
 8019f6e:	429f      	cmp	r7, r3
 8019f70:	d2f9      	bcs.n	8019f66 <__hexnan+0xaa>
 8019f72:	1b3b      	subs	r3, r7, r4
 8019f74:	f023 0303 	bic.w	r3, r3, #3
 8019f78:	3304      	adds	r3, #4
 8019f7a:	3401      	adds	r4, #1
 8019f7c:	3e03      	subs	r6, #3
 8019f7e:	42b4      	cmp	r4, r6
 8019f80:	bf88      	it	hi
 8019f82:	2304      	movhi	r3, #4
 8019f84:	4443      	add	r3, r8
 8019f86:	2200      	movs	r2, #0
 8019f88:	f843 2b04 	str.w	r2, [r3], #4
 8019f8c:	429f      	cmp	r7, r3
 8019f8e:	d2fb      	bcs.n	8019f88 <__hexnan+0xcc>
 8019f90:	683b      	ldr	r3, [r7, #0]
 8019f92:	b91b      	cbnz	r3, 8019f9c <__hexnan+0xe0>
 8019f94:	4547      	cmp	r7, r8
 8019f96:	d127      	bne.n	8019fe8 <__hexnan+0x12c>
 8019f98:	2301      	movs	r3, #1
 8019f9a:	603b      	str	r3, [r7, #0]
 8019f9c:	2005      	movs	r0, #5
 8019f9e:	e026      	b.n	8019fee <__hexnan+0x132>
 8019fa0:	3501      	adds	r5, #1
 8019fa2:	2d08      	cmp	r5, #8
 8019fa4:	f10b 0b01 	add.w	fp, fp, #1
 8019fa8:	dd06      	ble.n	8019fb8 <__hexnan+0xfc>
 8019faa:	4544      	cmp	r4, r8
 8019fac:	d9c3      	bls.n	8019f36 <__hexnan+0x7a>
 8019fae:	2300      	movs	r3, #0
 8019fb0:	f844 3c04 	str.w	r3, [r4, #-4]
 8019fb4:	2501      	movs	r5, #1
 8019fb6:	3c04      	subs	r4, #4
 8019fb8:	6822      	ldr	r2, [r4, #0]
 8019fba:	f000 000f 	and.w	r0, r0, #15
 8019fbe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8019fc2:	6022      	str	r2, [r4, #0]
 8019fc4:	e7b7      	b.n	8019f36 <__hexnan+0x7a>
 8019fc6:	2508      	movs	r5, #8
 8019fc8:	e7b5      	b.n	8019f36 <__hexnan+0x7a>
 8019fca:	9b01      	ldr	r3, [sp, #4]
 8019fcc:	2b00      	cmp	r3, #0
 8019fce:	d0df      	beq.n	8019f90 <__hexnan+0xd4>
 8019fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8019fd4:	f1c3 0320 	rsb	r3, r3, #32
 8019fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8019fdc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8019fe0:	401a      	ands	r2, r3
 8019fe2:	f846 2c04 	str.w	r2, [r6, #-4]
 8019fe6:	e7d3      	b.n	8019f90 <__hexnan+0xd4>
 8019fe8:	3f04      	subs	r7, #4
 8019fea:	e7d1      	b.n	8019f90 <__hexnan+0xd4>
 8019fec:	2004      	movs	r0, #4
 8019fee:	b007      	add	sp, #28
 8019ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019ff4 <_localeconv_r>:
 8019ff4:	4800      	ldr	r0, [pc, #0]	; (8019ff8 <_localeconv_r+0x4>)
 8019ff6:	4770      	bx	lr
 8019ff8:	20000180 	.word	0x20000180

08019ffc <malloc>:
 8019ffc:	4b02      	ldr	r3, [pc, #8]	; (801a008 <malloc+0xc>)
 8019ffe:	4601      	mov	r1, r0
 801a000:	6818      	ldr	r0, [r3, #0]
 801a002:	f000 bd31 	b.w	801aa68 <_malloc_r>
 801a006:	bf00      	nop
 801a008:	20000028 	.word	0x20000028

0801a00c <__ascii_mbtowc>:
 801a00c:	b082      	sub	sp, #8
 801a00e:	b901      	cbnz	r1, 801a012 <__ascii_mbtowc+0x6>
 801a010:	a901      	add	r1, sp, #4
 801a012:	b142      	cbz	r2, 801a026 <__ascii_mbtowc+0x1a>
 801a014:	b14b      	cbz	r3, 801a02a <__ascii_mbtowc+0x1e>
 801a016:	7813      	ldrb	r3, [r2, #0]
 801a018:	600b      	str	r3, [r1, #0]
 801a01a:	7812      	ldrb	r2, [r2, #0]
 801a01c:	1e10      	subs	r0, r2, #0
 801a01e:	bf18      	it	ne
 801a020:	2001      	movne	r0, #1
 801a022:	b002      	add	sp, #8
 801a024:	4770      	bx	lr
 801a026:	4610      	mov	r0, r2
 801a028:	e7fb      	b.n	801a022 <__ascii_mbtowc+0x16>
 801a02a:	f06f 0001 	mvn.w	r0, #1
 801a02e:	e7f8      	b.n	801a022 <__ascii_mbtowc+0x16>

0801a030 <_Balloc>:
 801a030:	b570      	push	{r4, r5, r6, lr}
 801a032:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801a034:	4604      	mov	r4, r0
 801a036:	460d      	mov	r5, r1
 801a038:	b976      	cbnz	r6, 801a058 <_Balloc+0x28>
 801a03a:	2010      	movs	r0, #16
 801a03c:	f7ff ffde 	bl	8019ffc <malloc>
 801a040:	4602      	mov	r2, r0
 801a042:	6260      	str	r0, [r4, #36]	; 0x24
 801a044:	b920      	cbnz	r0, 801a050 <_Balloc+0x20>
 801a046:	4b18      	ldr	r3, [pc, #96]	; (801a0a8 <_Balloc+0x78>)
 801a048:	4818      	ldr	r0, [pc, #96]	; (801a0ac <_Balloc+0x7c>)
 801a04a:	2166      	movs	r1, #102	; 0x66
 801a04c:	f000 feea 	bl	801ae24 <__assert_func>
 801a050:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a054:	6006      	str	r6, [r0, #0]
 801a056:	60c6      	str	r6, [r0, #12]
 801a058:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801a05a:	68f3      	ldr	r3, [r6, #12]
 801a05c:	b183      	cbz	r3, 801a080 <_Balloc+0x50>
 801a05e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a060:	68db      	ldr	r3, [r3, #12]
 801a062:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801a066:	b9b8      	cbnz	r0, 801a098 <_Balloc+0x68>
 801a068:	2101      	movs	r1, #1
 801a06a:	fa01 f605 	lsl.w	r6, r1, r5
 801a06e:	1d72      	adds	r2, r6, #5
 801a070:	0092      	lsls	r2, r2, #2
 801a072:	4620      	mov	r0, r4
 801a074:	f000 fc98 	bl	801a9a8 <_calloc_r>
 801a078:	b160      	cbz	r0, 801a094 <_Balloc+0x64>
 801a07a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801a07e:	e00e      	b.n	801a09e <_Balloc+0x6e>
 801a080:	2221      	movs	r2, #33	; 0x21
 801a082:	2104      	movs	r1, #4
 801a084:	4620      	mov	r0, r4
 801a086:	f000 fc8f 	bl	801a9a8 <_calloc_r>
 801a08a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a08c:	60f0      	str	r0, [r6, #12]
 801a08e:	68db      	ldr	r3, [r3, #12]
 801a090:	2b00      	cmp	r3, #0
 801a092:	d1e4      	bne.n	801a05e <_Balloc+0x2e>
 801a094:	2000      	movs	r0, #0
 801a096:	bd70      	pop	{r4, r5, r6, pc}
 801a098:	6802      	ldr	r2, [r0, #0]
 801a09a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801a09e:	2300      	movs	r3, #0
 801a0a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801a0a4:	e7f7      	b.n	801a096 <_Balloc+0x66>
 801a0a6:	bf00      	nop
 801a0a8:	08028396 	.word	0x08028396
 801a0ac:	0802849c 	.word	0x0802849c

0801a0b0 <_Bfree>:
 801a0b0:	b570      	push	{r4, r5, r6, lr}
 801a0b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801a0b4:	4605      	mov	r5, r0
 801a0b6:	460c      	mov	r4, r1
 801a0b8:	b976      	cbnz	r6, 801a0d8 <_Bfree+0x28>
 801a0ba:	2010      	movs	r0, #16
 801a0bc:	f7ff ff9e 	bl	8019ffc <malloc>
 801a0c0:	4602      	mov	r2, r0
 801a0c2:	6268      	str	r0, [r5, #36]	; 0x24
 801a0c4:	b920      	cbnz	r0, 801a0d0 <_Bfree+0x20>
 801a0c6:	4b09      	ldr	r3, [pc, #36]	; (801a0ec <_Bfree+0x3c>)
 801a0c8:	4809      	ldr	r0, [pc, #36]	; (801a0f0 <_Bfree+0x40>)
 801a0ca:	218a      	movs	r1, #138	; 0x8a
 801a0cc:	f000 feaa 	bl	801ae24 <__assert_func>
 801a0d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a0d4:	6006      	str	r6, [r0, #0]
 801a0d6:	60c6      	str	r6, [r0, #12]
 801a0d8:	b13c      	cbz	r4, 801a0ea <_Bfree+0x3a>
 801a0da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801a0dc:	6862      	ldr	r2, [r4, #4]
 801a0de:	68db      	ldr	r3, [r3, #12]
 801a0e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801a0e4:	6021      	str	r1, [r4, #0]
 801a0e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801a0ea:	bd70      	pop	{r4, r5, r6, pc}
 801a0ec:	08028396 	.word	0x08028396
 801a0f0:	0802849c 	.word	0x0802849c

0801a0f4 <__multadd>:
 801a0f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0f8:	690e      	ldr	r6, [r1, #16]
 801a0fa:	4607      	mov	r7, r0
 801a0fc:	4698      	mov	r8, r3
 801a0fe:	460c      	mov	r4, r1
 801a100:	f101 0014 	add.w	r0, r1, #20
 801a104:	2300      	movs	r3, #0
 801a106:	6805      	ldr	r5, [r0, #0]
 801a108:	b2a9      	uxth	r1, r5
 801a10a:	fb02 8101 	mla	r1, r2, r1, r8
 801a10e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801a112:	0c2d      	lsrs	r5, r5, #16
 801a114:	fb02 c505 	mla	r5, r2, r5, ip
 801a118:	b289      	uxth	r1, r1
 801a11a:	3301      	adds	r3, #1
 801a11c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801a120:	429e      	cmp	r6, r3
 801a122:	f840 1b04 	str.w	r1, [r0], #4
 801a126:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801a12a:	dcec      	bgt.n	801a106 <__multadd+0x12>
 801a12c:	f1b8 0f00 	cmp.w	r8, #0
 801a130:	d022      	beq.n	801a178 <__multadd+0x84>
 801a132:	68a3      	ldr	r3, [r4, #8]
 801a134:	42b3      	cmp	r3, r6
 801a136:	dc19      	bgt.n	801a16c <__multadd+0x78>
 801a138:	6861      	ldr	r1, [r4, #4]
 801a13a:	4638      	mov	r0, r7
 801a13c:	3101      	adds	r1, #1
 801a13e:	f7ff ff77 	bl	801a030 <_Balloc>
 801a142:	4605      	mov	r5, r0
 801a144:	b928      	cbnz	r0, 801a152 <__multadd+0x5e>
 801a146:	4602      	mov	r2, r0
 801a148:	4b0d      	ldr	r3, [pc, #52]	; (801a180 <__multadd+0x8c>)
 801a14a:	480e      	ldr	r0, [pc, #56]	; (801a184 <__multadd+0x90>)
 801a14c:	21b5      	movs	r1, #181	; 0xb5
 801a14e:	f000 fe69 	bl	801ae24 <__assert_func>
 801a152:	6922      	ldr	r2, [r4, #16]
 801a154:	3202      	adds	r2, #2
 801a156:	f104 010c 	add.w	r1, r4, #12
 801a15a:	0092      	lsls	r2, r2, #2
 801a15c:	300c      	adds	r0, #12
 801a15e:	f7fd f8a1 	bl	80172a4 <memcpy>
 801a162:	4621      	mov	r1, r4
 801a164:	4638      	mov	r0, r7
 801a166:	f7ff ffa3 	bl	801a0b0 <_Bfree>
 801a16a:	462c      	mov	r4, r5
 801a16c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801a170:	3601      	adds	r6, #1
 801a172:	f8c3 8014 	str.w	r8, [r3, #20]
 801a176:	6126      	str	r6, [r4, #16]
 801a178:	4620      	mov	r0, r4
 801a17a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a17e:	bf00      	nop
 801a180:	0802840c 	.word	0x0802840c
 801a184:	0802849c 	.word	0x0802849c

0801a188 <__s2b>:
 801a188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a18c:	460c      	mov	r4, r1
 801a18e:	4615      	mov	r5, r2
 801a190:	461f      	mov	r7, r3
 801a192:	2209      	movs	r2, #9
 801a194:	3308      	adds	r3, #8
 801a196:	4606      	mov	r6, r0
 801a198:	fb93 f3f2 	sdiv	r3, r3, r2
 801a19c:	2100      	movs	r1, #0
 801a19e:	2201      	movs	r2, #1
 801a1a0:	429a      	cmp	r2, r3
 801a1a2:	db09      	blt.n	801a1b8 <__s2b+0x30>
 801a1a4:	4630      	mov	r0, r6
 801a1a6:	f7ff ff43 	bl	801a030 <_Balloc>
 801a1aa:	b940      	cbnz	r0, 801a1be <__s2b+0x36>
 801a1ac:	4602      	mov	r2, r0
 801a1ae:	4b19      	ldr	r3, [pc, #100]	; (801a214 <__s2b+0x8c>)
 801a1b0:	4819      	ldr	r0, [pc, #100]	; (801a218 <__s2b+0x90>)
 801a1b2:	21ce      	movs	r1, #206	; 0xce
 801a1b4:	f000 fe36 	bl	801ae24 <__assert_func>
 801a1b8:	0052      	lsls	r2, r2, #1
 801a1ba:	3101      	adds	r1, #1
 801a1bc:	e7f0      	b.n	801a1a0 <__s2b+0x18>
 801a1be:	9b08      	ldr	r3, [sp, #32]
 801a1c0:	6143      	str	r3, [r0, #20]
 801a1c2:	2d09      	cmp	r5, #9
 801a1c4:	f04f 0301 	mov.w	r3, #1
 801a1c8:	6103      	str	r3, [r0, #16]
 801a1ca:	dd16      	ble.n	801a1fa <__s2b+0x72>
 801a1cc:	f104 0909 	add.w	r9, r4, #9
 801a1d0:	46c8      	mov	r8, r9
 801a1d2:	442c      	add	r4, r5
 801a1d4:	f818 3b01 	ldrb.w	r3, [r8], #1
 801a1d8:	4601      	mov	r1, r0
 801a1da:	3b30      	subs	r3, #48	; 0x30
 801a1dc:	220a      	movs	r2, #10
 801a1de:	4630      	mov	r0, r6
 801a1e0:	f7ff ff88 	bl	801a0f4 <__multadd>
 801a1e4:	45a0      	cmp	r8, r4
 801a1e6:	d1f5      	bne.n	801a1d4 <__s2b+0x4c>
 801a1e8:	f1a5 0408 	sub.w	r4, r5, #8
 801a1ec:	444c      	add	r4, r9
 801a1ee:	1b2d      	subs	r5, r5, r4
 801a1f0:	1963      	adds	r3, r4, r5
 801a1f2:	42bb      	cmp	r3, r7
 801a1f4:	db04      	blt.n	801a200 <__s2b+0x78>
 801a1f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a1fa:	340a      	adds	r4, #10
 801a1fc:	2509      	movs	r5, #9
 801a1fe:	e7f6      	b.n	801a1ee <__s2b+0x66>
 801a200:	f814 3b01 	ldrb.w	r3, [r4], #1
 801a204:	4601      	mov	r1, r0
 801a206:	3b30      	subs	r3, #48	; 0x30
 801a208:	220a      	movs	r2, #10
 801a20a:	4630      	mov	r0, r6
 801a20c:	f7ff ff72 	bl	801a0f4 <__multadd>
 801a210:	e7ee      	b.n	801a1f0 <__s2b+0x68>
 801a212:	bf00      	nop
 801a214:	0802840c 	.word	0x0802840c
 801a218:	0802849c 	.word	0x0802849c

0801a21c <__hi0bits>:
 801a21c:	0c03      	lsrs	r3, r0, #16
 801a21e:	041b      	lsls	r3, r3, #16
 801a220:	b9d3      	cbnz	r3, 801a258 <__hi0bits+0x3c>
 801a222:	0400      	lsls	r0, r0, #16
 801a224:	2310      	movs	r3, #16
 801a226:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801a22a:	bf04      	itt	eq
 801a22c:	0200      	lsleq	r0, r0, #8
 801a22e:	3308      	addeq	r3, #8
 801a230:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801a234:	bf04      	itt	eq
 801a236:	0100      	lsleq	r0, r0, #4
 801a238:	3304      	addeq	r3, #4
 801a23a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801a23e:	bf04      	itt	eq
 801a240:	0080      	lsleq	r0, r0, #2
 801a242:	3302      	addeq	r3, #2
 801a244:	2800      	cmp	r0, #0
 801a246:	db05      	blt.n	801a254 <__hi0bits+0x38>
 801a248:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801a24c:	f103 0301 	add.w	r3, r3, #1
 801a250:	bf08      	it	eq
 801a252:	2320      	moveq	r3, #32
 801a254:	4618      	mov	r0, r3
 801a256:	4770      	bx	lr
 801a258:	2300      	movs	r3, #0
 801a25a:	e7e4      	b.n	801a226 <__hi0bits+0xa>

0801a25c <__lo0bits>:
 801a25c:	6803      	ldr	r3, [r0, #0]
 801a25e:	f013 0207 	ands.w	r2, r3, #7
 801a262:	4601      	mov	r1, r0
 801a264:	d00b      	beq.n	801a27e <__lo0bits+0x22>
 801a266:	07da      	lsls	r2, r3, #31
 801a268:	d424      	bmi.n	801a2b4 <__lo0bits+0x58>
 801a26a:	0798      	lsls	r0, r3, #30
 801a26c:	bf49      	itett	mi
 801a26e:	085b      	lsrmi	r3, r3, #1
 801a270:	089b      	lsrpl	r3, r3, #2
 801a272:	2001      	movmi	r0, #1
 801a274:	600b      	strmi	r3, [r1, #0]
 801a276:	bf5c      	itt	pl
 801a278:	600b      	strpl	r3, [r1, #0]
 801a27a:	2002      	movpl	r0, #2
 801a27c:	4770      	bx	lr
 801a27e:	b298      	uxth	r0, r3
 801a280:	b9b0      	cbnz	r0, 801a2b0 <__lo0bits+0x54>
 801a282:	0c1b      	lsrs	r3, r3, #16
 801a284:	2010      	movs	r0, #16
 801a286:	f013 0fff 	tst.w	r3, #255	; 0xff
 801a28a:	bf04      	itt	eq
 801a28c:	0a1b      	lsreq	r3, r3, #8
 801a28e:	3008      	addeq	r0, #8
 801a290:	071a      	lsls	r2, r3, #28
 801a292:	bf04      	itt	eq
 801a294:	091b      	lsreq	r3, r3, #4
 801a296:	3004      	addeq	r0, #4
 801a298:	079a      	lsls	r2, r3, #30
 801a29a:	bf04      	itt	eq
 801a29c:	089b      	lsreq	r3, r3, #2
 801a29e:	3002      	addeq	r0, #2
 801a2a0:	07da      	lsls	r2, r3, #31
 801a2a2:	d403      	bmi.n	801a2ac <__lo0bits+0x50>
 801a2a4:	085b      	lsrs	r3, r3, #1
 801a2a6:	f100 0001 	add.w	r0, r0, #1
 801a2aa:	d005      	beq.n	801a2b8 <__lo0bits+0x5c>
 801a2ac:	600b      	str	r3, [r1, #0]
 801a2ae:	4770      	bx	lr
 801a2b0:	4610      	mov	r0, r2
 801a2b2:	e7e8      	b.n	801a286 <__lo0bits+0x2a>
 801a2b4:	2000      	movs	r0, #0
 801a2b6:	4770      	bx	lr
 801a2b8:	2020      	movs	r0, #32
 801a2ba:	4770      	bx	lr

0801a2bc <__i2b>:
 801a2bc:	b510      	push	{r4, lr}
 801a2be:	460c      	mov	r4, r1
 801a2c0:	2101      	movs	r1, #1
 801a2c2:	f7ff feb5 	bl	801a030 <_Balloc>
 801a2c6:	4602      	mov	r2, r0
 801a2c8:	b928      	cbnz	r0, 801a2d6 <__i2b+0x1a>
 801a2ca:	4b05      	ldr	r3, [pc, #20]	; (801a2e0 <__i2b+0x24>)
 801a2cc:	4805      	ldr	r0, [pc, #20]	; (801a2e4 <__i2b+0x28>)
 801a2ce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801a2d2:	f000 fda7 	bl	801ae24 <__assert_func>
 801a2d6:	2301      	movs	r3, #1
 801a2d8:	6144      	str	r4, [r0, #20]
 801a2da:	6103      	str	r3, [r0, #16]
 801a2dc:	bd10      	pop	{r4, pc}
 801a2de:	bf00      	nop
 801a2e0:	0802840c 	.word	0x0802840c
 801a2e4:	0802849c 	.word	0x0802849c

0801a2e8 <__multiply>:
 801a2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2ec:	4614      	mov	r4, r2
 801a2ee:	690a      	ldr	r2, [r1, #16]
 801a2f0:	6923      	ldr	r3, [r4, #16]
 801a2f2:	429a      	cmp	r2, r3
 801a2f4:	bfb8      	it	lt
 801a2f6:	460b      	movlt	r3, r1
 801a2f8:	460d      	mov	r5, r1
 801a2fa:	bfbc      	itt	lt
 801a2fc:	4625      	movlt	r5, r4
 801a2fe:	461c      	movlt	r4, r3
 801a300:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801a304:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801a308:	68ab      	ldr	r3, [r5, #8]
 801a30a:	6869      	ldr	r1, [r5, #4]
 801a30c:	eb0a 0709 	add.w	r7, sl, r9
 801a310:	42bb      	cmp	r3, r7
 801a312:	b085      	sub	sp, #20
 801a314:	bfb8      	it	lt
 801a316:	3101      	addlt	r1, #1
 801a318:	f7ff fe8a 	bl	801a030 <_Balloc>
 801a31c:	b930      	cbnz	r0, 801a32c <__multiply+0x44>
 801a31e:	4602      	mov	r2, r0
 801a320:	4b42      	ldr	r3, [pc, #264]	; (801a42c <__multiply+0x144>)
 801a322:	4843      	ldr	r0, [pc, #268]	; (801a430 <__multiply+0x148>)
 801a324:	f240 115d 	movw	r1, #349	; 0x15d
 801a328:	f000 fd7c 	bl	801ae24 <__assert_func>
 801a32c:	f100 0614 	add.w	r6, r0, #20
 801a330:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801a334:	4633      	mov	r3, r6
 801a336:	2200      	movs	r2, #0
 801a338:	4543      	cmp	r3, r8
 801a33a:	d31e      	bcc.n	801a37a <__multiply+0x92>
 801a33c:	f105 0c14 	add.w	ip, r5, #20
 801a340:	f104 0314 	add.w	r3, r4, #20
 801a344:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801a348:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801a34c:	9202      	str	r2, [sp, #8]
 801a34e:	ebac 0205 	sub.w	r2, ip, r5
 801a352:	3a15      	subs	r2, #21
 801a354:	f022 0203 	bic.w	r2, r2, #3
 801a358:	3204      	adds	r2, #4
 801a35a:	f105 0115 	add.w	r1, r5, #21
 801a35e:	458c      	cmp	ip, r1
 801a360:	bf38      	it	cc
 801a362:	2204      	movcc	r2, #4
 801a364:	9201      	str	r2, [sp, #4]
 801a366:	9a02      	ldr	r2, [sp, #8]
 801a368:	9303      	str	r3, [sp, #12]
 801a36a:	429a      	cmp	r2, r3
 801a36c:	d808      	bhi.n	801a380 <__multiply+0x98>
 801a36e:	2f00      	cmp	r7, #0
 801a370:	dc55      	bgt.n	801a41e <__multiply+0x136>
 801a372:	6107      	str	r7, [r0, #16]
 801a374:	b005      	add	sp, #20
 801a376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a37a:	f843 2b04 	str.w	r2, [r3], #4
 801a37e:	e7db      	b.n	801a338 <__multiply+0x50>
 801a380:	f8b3 a000 	ldrh.w	sl, [r3]
 801a384:	f1ba 0f00 	cmp.w	sl, #0
 801a388:	d020      	beq.n	801a3cc <__multiply+0xe4>
 801a38a:	f105 0e14 	add.w	lr, r5, #20
 801a38e:	46b1      	mov	r9, r6
 801a390:	2200      	movs	r2, #0
 801a392:	f85e 4b04 	ldr.w	r4, [lr], #4
 801a396:	f8d9 b000 	ldr.w	fp, [r9]
 801a39a:	b2a1      	uxth	r1, r4
 801a39c:	fa1f fb8b 	uxth.w	fp, fp
 801a3a0:	fb0a b101 	mla	r1, sl, r1, fp
 801a3a4:	4411      	add	r1, r2
 801a3a6:	f8d9 2000 	ldr.w	r2, [r9]
 801a3aa:	0c24      	lsrs	r4, r4, #16
 801a3ac:	0c12      	lsrs	r2, r2, #16
 801a3ae:	fb0a 2404 	mla	r4, sl, r4, r2
 801a3b2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801a3b6:	b289      	uxth	r1, r1
 801a3b8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801a3bc:	45f4      	cmp	ip, lr
 801a3be:	f849 1b04 	str.w	r1, [r9], #4
 801a3c2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801a3c6:	d8e4      	bhi.n	801a392 <__multiply+0xaa>
 801a3c8:	9901      	ldr	r1, [sp, #4]
 801a3ca:	5072      	str	r2, [r6, r1]
 801a3cc:	9a03      	ldr	r2, [sp, #12]
 801a3ce:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801a3d2:	3304      	adds	r3, #4
 801a3d4:	f1b9 0f00 	cmp.w	r9, #0
 801a3d8:	d01f      	beq.n	801a41a <__multiply+0x132>
 801a3da:	6834      	ldr	r4, [r6, #0]
 801a3dc:	f105 0114 	add.w	r1, r5, #20
 801a3e0:	46b6      	mov	lr, r6
 801a3e2:	f04f 0a00 	mov.w	sl, #0
 801a3e6:	880a      	ldrh	r2, [r1, #0]
 801a3e8:	f8be b002 	ldrh.w	fp, [lr, #2]
 801a3ec:	fb09 b202 	mla	r2, r9, r2, fp
 801a3f0:	4492      	add	sl, r2
 801a3f2:	b2a4      	uxth	r4, r4
 801a3f4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801a3f8:	f84e 4b04 	str.w	r4, [lr], #4
 801a3fc:	f851 4b04 	ldr.w	r4, [r1], #4
 801a400:	f8be 2000 	ldrh.w	r2, [lr]
 801a404:	0c24      	lsrs	r4, r4, #16
 801a406:	fb09 2404 	mla	r4, r9, r4, r2
 801a40a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801a40e:	458c      	cmp	ip, r1
 801a410:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801a414:	d8e7      	bhi.n	801a3e6 <__multiply+0xfe>
 801a416:	9a01      	ldr	r2, [sp, #4]
 801a418:	50b4      	str	r4, [r6, r2]
 801a41a:	3604      	adds	r6, #4
 801a41c:	e7a3      	b.n	801a366 <__multiply+0x7e>
 801a41e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801a422:	2b00      	cmp	r3, #0
 801a424:	d1a5      	bne.n	801a372 <__multiply+0x8a>
 801a426:	3f01      	subs	r7, #1
 801a428:	e7a1      	b.n	801a36e <__multiply+0x86>
 801a42a:	bf00      	nop
 801a42c:	0802840c 	.word	0x0802840c
 801a430:	0802849c 	.word	0x0802849c

0801a434 <__pow5mult>:
 801a434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a438:	4615      	mov	r5, r2
 801a43a:	f012 0203 	ands.w	r2, r2, #3
 801a43e:	4606      	mov	r6, r0
 801a440:	460f      	mov	r7, r1
 801a442:	d007      	beq.n	801a454 <__pow5mult+0x20>
 801a444:	4c25      	ldr	r4, [pc, #148]	; (801a4dc <__pow5mult+0xa8>)
 801a446:	3a01      	subs	r2, #1
 801a448:	2300      	movs	r3, #0
 801a44a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801a44e:	f7ff fe51 	bl	801a0f4 <__multadd>
 801a452:	4607      	mov	r7, r0
 801a454:	10ad      	asrs	r5, r5, #2
 801a456:	d03d      	beq.n	801a4d4 <__pow5mult+0xa0>
 801a458:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801a45a:	b97c      	cbnz	r4, 801a47c <__pow5mult+0x48>
 801a45c:	2010      	movs	r0, #16
 801a45e:	f7ff fdcd 	bl	8019ffc <malloc>
 801a462:	4602      	mov	r2, r0
 801a464:	6270      	str	r0, [r6, #36]	; 0x24
 801a466:	b928      	cbnz	r0, 801a474 <__pow5mult+0x40>
 801a468:	4b1d      	ldr	r3, [pc, #116]	; (801a4e0 <__pow5mult+0xac>)
 801a46a:	481e      	ldr	r0, [pc, #120]	; (801a4e4 <__pow5mult+0xb0>)
 801a46c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801a470:	f000 fcd8 	bl	801ae24 <__assert_func>
 801a474:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801a478:	6004      	str	r4, [r0, #0]
 801a47a:	60c4      	str	r4, [r0, #12]
 801a47c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801a480:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801a484:	b94c      	cbnz	r4, 801a49a <__pow5mult+0x66>
 801a486:	f240 2171 	movw	r1, #625	; 0x271
 801a48a:	4630      	mov	r0, r6
 801a48c:	f7ff ff16 	bl	801a2bc <__i2b>
 801a490:	2300      	movs	r3, #0
 801a492:	f8c8 0008 	str.w	r0, [r8, #8]
 801a496:	4604      	mov	r4, r0
 801a498:	6003      	str	r3, [r0, #0]
 801a49a:	f04f 0900 	mov.w	r9, #0
 801a49e:	07eb      	lsls	r3, r5, #31
 801a4a0:	d50a      	bpl.n	801a4b8 <__pow5mult+0x84>
 801a4a2:	4639      	mov	r1, r7
 801a4a4:	4622      	mov	r2, r4
 801a4a6:	4630      	mov	r0, r6
 801a4a8:	f7ff ff1e 	bl	801a2e8 <__multiply>
 801a4ac:	4639      	mov	r1, r7
 801a4ae:	4680      	mov	r8, r0
 801a4b0:	4630      	mov	r0, r6
 801a4b2:	f7ff fdfd 	bl	801a0b0 <_Bfree>
 801a4b6:	4647      	mov	r7, r8
 801a4b8:	106d      	asrs	r5, r5, #1
 801a4ba:	d00b      	beq.n	801a4d4 <__pow5mult+0xa0>
 801a4bc:	6820      	ldr	r0, [r4, #0]
 801a4be:	b938      	cbnz	r0, 801a4d0 <__pow5mult+0x9c>
 801a4c0:	4622      	mov	r2, r4
 801a4c2:	4621      	mov	r1, r4
 801a4c4:	4630      	mov	r0, r6
 801a4c6:	f7ff ff0f 	bl	801a2e8 <__multiply>
 801a4ca:	6020      	str	r0, [r4, #0]
 801a4cc:	f8c0 9000 	str.w	r9, [r0]
 801a4d0:	4604      	mov	r4, r0
 801a4d2:	e7e4      	b.n	801a49e <__pow5mult+0x6a>
 801a4d4:	4638      	mov	r0, r7
 801a4d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a4da:	bf00      	nop
 801a4dc:	080285f0 	.word	0x080285f0
 801a4e0:	08028396 	.word	0x08028396
 801a4e4:	0802849c 	.word	0x0802849c

0801a4e8 <__lshift>:
 801a4e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a4ec:	460c      	mov	r4, r1
 801a4ee:	6849      	ldr	r1, [r1, #4]
 801a4f0:	6923      	ldr	r3, [r4, #16]
 801a4f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801a4f6:	68a3      	ldr	r3, [r4, #8]
 801a4f8:	4607      	mov	r7, r0
 801a4fa:	4691      	mov	r9, r2
 801a4fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801a500:	f108 0601 	add.w	r6, r8, #1
 801a504:	42b3      	cmp	r3, r6
 801a506:	db0b      	blt.n	801a520 <__lshift+0x38>
 801a508:	4638      	mov	r0, r7
 801a50a:	f7ff fd91 	bl	801a030 <_Balloc>
 801a50e:	4605      	mov	r5, r0
 801a510:	b948      	cbnz	r0, 801a526 <__lshift+0x3e>
 801a512:	4602      	mov	r2, r0
 801a514:	4b28      	ldr	r3, [pc, #160]	; (801a5b8 <__lshift+0xd0>)
 801a516:	4829      	ldr	r0, [pc, #164]	; (801a5bc <__lshift+0xd4>)
 801a518:	f240 11d9 	movw	r1, #473	; 0x1d9
 801a51c:	f000 fc82 	bl	801ae24 <__assert_func>
 801a520:	3101      	adds	r1, #1
 801a522:	005b      	lsls	r3, r3, #1
 801a524:	e7ee      	b.n	801a504 <__lshift+0x1c>
 801a526:	2300      	movs	r3, #0
 801a528:	f100 0114 	add.w	r1, r0, #20
 801a52c:	f100 0210 	add.w	r2, r0, #16
 801a530:	4618      	mov	r0, r3
 801a532:	4553      	cmp	r3, sl
 801a534:	db33      	blt.n	801a59e <__lshift+0xb6>
 801a536:	6920      	ldr	r0, [r4, #16]
 801a538:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801a53c:	f104 0314 	add.w	r3, r4, #20
 801a540:	f019 091f 	ands.w	r9, r9, #31
 801a544:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a548:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801a54c:	d02b      	beq.n	801a5a6 <__lshift+0xbe>
 801a54e:	f1c9 0e20 	rsb	lr, r9, #32
 801a552:	468a      	mov	sl, r1
 801a554:	2200      	movs	r2, #0
 801a556:	6818      	ldr	r0, [r3, #0]
 801a558:	fa00 f009 	lsl.w	r0, r0, r9
 801a55c:	4302      	orrs	r2, r0
 801a55e:	f84a 2b04 	str.w	r2, [sl], #4
 801a562:	f853 2b04 	ldr.w	r2, [r3], #4
 801a566:	459c      	cmp	ip, r3
 801a568:	fa22 f20e 	lsr.w	r2, r2, lr
 801a56c:	d8f3      	bhi.n	801a556 <__lshift+0x6e>
 801a56e:	ebac 0304 	sub.w	r3, ip, r4
 801a572:	3b15      	subs	r3, #21
 801a574:	f023 0303 	bic.w	r3, r3, #3
 801a578:	3304      	adds	r3, #4
 801a57a:	f104 0015 	add.w	r0, r4, #21
 801a57e:	4584      	cmp	ip, r0
 801a580:	bf38      	it	cc
 801a582:	2304      	movcc	r3, #4
 801a584:	50ca      	str	r2, [r1, r3]
 801a586:	b10a      	cbz	r2, 801a58c <__lshift+0xa4>
 801a588:	f108 0602 	add.w	r6, r8, #2
 801a58c:	3e01      	subs	r6, #1
 801a58e:	4638      	mov	r0, r7
 801a590:	612e      	str	r6, [r5, #16]
 801a592:	4621      	mov	r1, r4
 801a594:	f7ff fd8c 	bl	801a0b0 <_Bfree>
 801a598:	4628      	mov	r0, r5
 801a59a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a59e:	f842 0f04 	str.w	r0, [r2, #4]!
 801a5a2:	3301      	adds	r3, #1
 801a5a4:	e7c5      	b.n	801a532 <__lshift+0x4a>
 801a5a6:	3904      	subs	r1, #4
 801a5a8:	f853 2b04 	ldr.w	r2, [r3], #4
 801a5ac:	f841 2f04 	str.w	r2, [r1, #4]!
 801a5b0:	459c      	cmp	ip, r3
 801a5b2:	d8f9      	bhi.n	801a5a8 <__lshift+0xc0>
 801a5b4:	e7ea      	b.n	801a58c <__lshift+0xa4>
 801a5b6:	bf00      	nop
 801a5b8:	0802840c 	.word	0x0802840c
 801a5bc:	0802849c 	.word	0x0802849c

0801a5c0 <__mcmp>:
 801a5c0:	b530      	push	{r4, r5, lr}
 801a5c2:	6902      	ldr	r2, [r0, #16]
 801a5c4:	690c      	ldr	r4, [r1, #16]
 801a5c6:	1b12      	subs	r2, r2, r4
 801a5c8:	d10e      	bne.n	801a5e8 <__mcmp+0x28>
 801a5ca:	f100 0314 	add.w	r3, r0, #20
 801a5ce:	3114      	adds	r1, #20
 801a5d0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801a5d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801a5d8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801a5dc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801a5e0:	42a5      	cmp	r5, r4
 801a5e2:	d003      	beq.n	801a5ec <__mcmp+0x2c>
 801a5e4:	d305      	bcc.n	801a5f2 <__mcmp+0x32>
 801a5e6:	2201      	movs	r2, #1
 801a5e8:	4610      	mov	r0, r2
 801a5ea:	bd30      	pop	{r4, r5, pc}
 801a5ec:	4283      	cmp	r3, r0
 801a5ee:	d3f3      	bcc.n	801a5d8 <__mcmp+0x18>
 801a5f0:	e7fa      	b.n	801a5e8 <__mcmp+0x28>
 801a5f2:	f04f 32ff 	mov.w	r2, #4294967295
 801a5f6:	e7f7      	b.n	801a5e8 <__mcmp+0x28>

0801a5f8 <__mdiff>:
 801a5f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5fc:	460c      	mov	r4, r1
 801a5fe:	4606      	mov	r6, r0
 801a600:	4611      	mov	r1, r2
 801a602:	4620      	mov	r0, r4
 801a604:	4617      	mov	r7, r2
 801a606:	f7ff ffdb 	bl	801a5c0 <__mcmp>
 801a60a:	1e05      	subs	r5, r0, #0
 801a60c:	d110      	bne.n	801a630 <__mdiff+0x38>
 801a60e:	4629      	mov	r1, r5
 801a610:	4630      	mov	r0, r6
 801a612:	f7ff fd0d 	bl	801a030 <_Balloc>
 801a616:	b930      	cbnz	r0, 801a626 <__mdiff+0x2e>
 801a618:	4b39      	ldr	r3, [pc, #228]	; (801a700 <__mdiff+0x108>)
 801a61a:	4602      	mov	r2, r0
 801a61c:	f240 2132 	movw	r1, #562	; 0x232
 801a620:	4838      	ldr	r0, [pc, #224]	; (801a704 <__mdiff+0x10c>)
 801a622:	f000 fbff 	bl	801ae24 <__assert_func>
 801a626:	2301      	movs	r3, #1
 801a628:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801a62c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a630:	bfa4      	itt	ge
 801a632:	463b      	movge	r3, r7
 801a634:	4627      	movge	r7, r4
 801a636:	4630      	mov	r0, r6
 801a638:	6879      	ldr	r1, [r7, #4]
 801a63a:	bfa6      	itte	ge
 801a63c:	461c      	movge	r4, r3
 801a63e:	2500      	movge	r5, #0
 801a640:	2501      	movlt	r5, #1
 801a642:	f7ff fcf5 	bl	801a030 <_Balloc>
 801a646:	b920      	cbnz	r0, 801a652 <__mdiff+0x5a>
 801a648:	4b2d      	ldr	r3, [pc, #180]	; (801a700 <__mdiff+0x108>)
 801a64a:	4602      	mov	r2, r0
 801a64c:	f44f 7110 	mov.w	r1, #576	; 0x240
 801a650:	e7e6      	b.n	801a620 <__mdiff+0x28>
 801a652:	693e      	ldr	r6, [r7, #16]
 801a654:	60c5      	str	r5, [r0, #12]
 801a656:	6925      	ldr	r5, [r4, #16]
 801a658:	f107 0114 	add.w	r1, r7, #20
 801a65c:	f104 0914 	add.w	r9, r4, #20
 801a660:	f100 0e14 	add.w	lr, r0, #20
 801a664:	f107 0210 	add.w	r2, r7, #16
 801a668:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801a66c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801a670:	46f2      	mov	sl, lr
 801a672:	2700      	movs	r7, #0
 801a674:	f859 3b04 	ldr.w	r3, [r9], #4
 801a678:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801a67c:	fa1f f883 	uxth.w	r8, r3
 801a680:	fa17 f78b 	uxtah	r7, r7, fp
 801a684:	0c1b      	lsrs	r3, r3, #16
 801a686:	eba7 0808 	sub.w	r8, r7, r8
 801a68a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801a68e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801a692:	fa1f f888 	uxth.w	r8, r8
 801a696:	141f      	asrs	r7, r3, #16
 801a698:	454d      	cmp	r5, r9
 801a69a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801a69e:	f84a 3b04 	str.w	r3, [sl], #4
 801a6a2:	d8e7      	bhi.n	801a674 <__mdiff+0x7c>
 801a6a4:	1b2b      	subs	r3, r5, r4
 801a6a6:	3b15      	subs	r3, #21
 801a6a8:	f023 0303 	bic.w	r3, r3, #3
 801a6ac:	3304      	adds	r3, #4
 801a6ae:	3415      	adds	r4, #21
 801a6b0:	42a5      	cmp	r5, r4
 801a6b2:	bf38      	it	cc
 801a6b4:	2304      	movcc	r3, #4
 801a6b6:	4419      	add	r1, r3
 801a6b8:	4473      	add	r3, lr
 801a6ba:	469e      	mov	lr, r3
 801a6bc:	460d      	mov	r5, r1
 801a6be:	4565      	cmp	r5, ip
 801a6c0:	d30e      	bcc.n	801a6e0 <__mdiff+0xe8>
 801a6c2:	f10c 0203 	add.w	r2, ip, #3
 801a6c6:	1a52      	subs	r2, r2, r1
 801a6c8:	f022 0203 	bic.w	r2, r2, #3
 801a6cc:	3903      	subs	r1, #3
 801a6ce:	458c      	cmp	ip, r1
 801a6d0:	bf38      	it	cc
 801a6d2:	2200      	movcc	r2, #0
 801a6d4:	441a      	add	r2, r3
 801a6d6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801a6da:	b17b      	cbz	r3, 801a6fc <__mdiff+0x104>
 801a6dc:	6106      	str	r6, [r0, #16]
 801a6de:	e7a5      	b.n	801a62c <__mdiff+0x34>
 801a6e0:	f855 8b04 	ldr.w	r8, [r5], #4
 801a6e4:	fa17 f488 	uxtah	r4, r7, r8
 801a6e8:	1422      	asrs	r2, r4, #16
 801a6ea:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801a6ee:	b2a4      	uxth	r4, r4
 801a6f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801a6f4:	f84e 4b04 	str.w	r4, [lr], #4
 801a6f8:	1417      	asrs	r7, r2, #16
 801a6fa:	e7e0      	b.n	801a6be <__mdiff+0xc6>
 801a6fc:	3e01      	subs	r6, #1
 801a6fe:	e7ea      	b.n	801a6d6 <__mdiff+0xde>
 801a700:	0802840c 	.word	0x0802840c
 801a704:	0802849c 	.word	0x0802849c

0801a708 <__ulp>:
 801a708:	b082      	sub	sp, #8
 801a70a:	ed8d 0b00 	vstr	d0, [sp]
 801a70e:	9b01      	ldr	r3, [sp, #4]
 801a710:	4912      	ldr	r1, [pc, #72]	; (801a75c <__ulp+0x54>)
 801a712:	4019      	ands	r1, r3
 801a714:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801a718:	2900      	cmp	r1, #0
 801a71a:	dd05      	ble.n	801a728 <__ulp+0x20>
 801a71c:	2200      	movs	r2, #0
 801a71e:	460b      	mov	r3, r1
 801a720:	ec43 2b10 	vmov	d0, r2, r3
 801a724:	b002      	add	sp, #8
 801a726:	4770      	bx	lr
 801a728:	4249      	negs	r1, r1
 801a72a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801a72e:	ea4f 5021 	mov.w	r0, r1, asr #20
 801a732:	f04f 0200 	mov.w	r2, #0
 801a736:	f04f 0300 	mov.w	r3, #0
 801a73a:	da04      	bge.n	801a746 <__ulp+0x3e>
 801a73c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801a740:	fa41 f300 	asr.w	r3, r1, r0
 801a744:	e7ec      	b.n	801a720 <__ulp+0x18>
 801a746:	f1a0 0114 	sub.w	r1, r0, #20
 801a74a:	291e      	cmp	r1, #30
 801a74c:	bfda      	itte	le
 801a74e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801a752:	fa20 f101 	lsrle.w	r1, r0, r1
 801a756:	2101      	movgt	r1, #1
 801a758:	460a      	mov	r2, r1
 801a75a:	e7e1      	b.n	801a720 <__ulp+0x18>
 801a75c:	7ff00000 	.word	0x7ff00000

0801a760 <__b2d>:
 801a760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a762:	6905      	ldr	r5, [r0, #16]
 801a764:	f100 0714 	add.w	r7, r0, #20
 801a768:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801a76c:	1f2e      	subs	r6, r5, #4
 801a76e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801a772:	4620      	mov	r0, r4
 801a774:	f7ff fd52 	bl	801a21c <__hi0bits>
 801a778:	f1c0 0320 	rsb	r3, r0, #32
 801a77c:	280a      	cmp	r0, #10
 801a77e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801a7fc <__b2d+0x9c>
 801a782:	600b      	str	r3, [r1, #0]
 801a784:	dc14      	bgt.n	801a7b0 <__b2d+0x50>
 801a786:	f1c0 0e0b 	rsb	lr, r0, #11
 801a78a:	fa24 f10e 	lsr.w	r1, r4, lr
 801a78e:	42b7      	cmp	r7, r6
 801a790:	ea41 030c 	orr.w	r3, r1, ip
 801a794:	bf34      	ite	cc
 801a796:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801a79a:	2100      	movcs	r1, #0
 801a79c:	3015      	adds	r0, #21
 801a79e:	fa04 f000 	lsl.w	r0, r4, r0
 801a7a2:	fa21 f10e 	lsr.w	r1, r1, lr
 801a7a6:	ea40 0201 	orr.w	r2, r0, r1
 801a7aa:	ec43 2b10 	vmov	d0, r2, r3
 801a7ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a7b0:	42b7      	cmp	r7, r6
 801a7b2:	bf3a      	itte	cc
 801a7b4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801a7b8:	f1a5 0608 	subcc.w	r6, r5, #8
 801a7bc:	2100      	movcs	r1, #0
 801a7be:	380b      	subs	r0, #11
 801a7c0:	d017      	beq.n	801a7f2 <__b2d+0x92>
 801a7c2:	f1c0 0c20 	rsb	ip, r0, #32
 801a7c6:	fa04 f500 	lsl.w	r5, r4, r0
 801a7ca:	42be      	cmp	r6, r7
 801a7cc:	fa21 f40c 	lsr.w	r4, r1, ip
 801a7d0:	ea45 0504 	orr.w	r5, r5, r4
 801a7d4:	bf8c      	ite	hi
 801a7d6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801a7da:	2400      	movls	r4, #0
 801a7dc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801a7e0:	fa01 f000 	lsl.w	r0, r1, r0
 801a7e4:	fa24 f40c 	lsr.w	r4, r4, ip
 801a7e8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801a7ec:	ea40 0204 	orr.w	r2, r0, r4
 801a7f0:	e7db      	b.n	801a7aa <__b2d+0x4a>
 801a7f2:	ea44 030c 	orr.w	r3, r4, ip
 801a7f6:	460a      	mov	r2, r1
 801a7f8:	e7d7      	b.n	801a7aa <__b2d+0x4a>
 801a7fa:	bf00      	nop
 801a7fc:	3ff00000 	.word	0x3ff00000

0801a800 <__d2b>:
 801a800:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a804:	4689      	mov	r9, r1
 801a806:	2101      	movs	r1, #1
 801a808:	ec57 6b10 	vmov	r6, r7, d0
 801a80c:	4690      	mov	r8, r2
 801a80e:	f7ff fc0f 	bl	801a030 <_Balloc>
 801a812:	4604      	mov	r4, r0
 801a814:	b930      	cbnz	r0, 801a824 <__d2b+0x24>
 801a816:	4602      	mov	r2, r0
 801a818:	4b25      	ldr	r3, [pc, #148]	; (801a8b0 <__d2b+0xb0>)
 801a81a:	4826      	ldr	r0, [pc, #152]	; (801a8b4 <__d2b+0xb4>)
 801a81c:	f240 310a 	movw	r1, #778	; 0x30a
 801a820:	f000 fb00 	bl	801ae24 <__assert_func>
 801a824:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801a828:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801a82c:	bb35      	cbnz	r5, 801a87c <__d2b+0x7c>
 801a82e:	2e00      	cmp	r6, #0
 801a830:	9301      	str	r3, [sp, #4]
 801a832:	d028      	beq.n	801a886 <__d2b+0x86>
 801a834:	4668      	mov	r0, sp
 801a836:	9600      	str	r6, [sp, #0]
 801a838:	f7ff fd10 	bl	801a25c <__lo0bits>
 801a83c:	9900      	ldr	r1, [sp, #0]
 801a83e:	b300      	cbz	r0, 801a882 <__d2b+0x82>
 801a840:	9a01      	ldr	r2, [sp, #4]
 801a842:	f1c0 0320 	rsb	r3, r0, #32
 801a846:	fa02 f303 	lsl.w	r3, r2, r3
 801a84a:	430b      	orrs	r3, r1
 801a84c:	40c2      	lsrs	r2, r0
 801a84e:	6163      	str	r3, [r4, #20]
 801a850:	9201      	str	r2, [sp, #4]
 801a852:	9b01      	ldr	r3, [sp, #4]
 801a854:	61a3      	str	r3, [r4, #24]
 801a856:	2b00      	cmp	r3, #0
 801a858:	bf14      	ite	ne
 801a85a:	2202      	movne	r2, #2
 801a85c:	2201      	moveq	r2, #1
 801a85e:	6122      	str	r2, [r4, #16]
 801a860:	b1d5      	cbz	r5, 801a898 <__d2b+0x98>
 801a862:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801a866:	4405      	add	r5, r0
 801a868:	f8c9 5000 	str.w	r5, [r9]
 801a86c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801a870:	f8c8 0000 	str.w	r0, [r8]
 801a874:	4620      	mov	r0, r4
 801a876:	b003      	add	sp, #12
 801a878:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a87c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801a880:	e7d5      	b.n	801a82e <__d2b+0x2e>
 801a882:	6161      	str	r1, [r4, #20]
 801a884:	e7e5      	b.n	801a852 <__d2b+0x52>
 801a886:	a801      	add	r0, sp, #4
 801a888:	f7ff fce8 	bl	801a25c <__lo0bits>
 801a88c:	9b01      	ldr	r3, [sp, #4]
 801a88e:	6163      	str	r3, [r4, #20]
 801a890:	2201      	movs	r2, #1
 801a892:	6122      	str	r2, [r4, #16]
 801a894:	3020      	adds	r0, #32
 801a896:	e7e3      	b.n	801a860 <__d2b+0x60>
 801a898:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801a89c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801a8a0:	f8c9 0000 	str.w	r0, [r9]
 801a8a4:	6918      	ldr	r0, [r3, #16]
 801a8a6:	f7ff fcb9 	bl	801a21c <__hi0bits>
 801a8aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801a8ae:	e7df      	b.n	801a870 <__d2b+0x70>
 801a8b0:	0802840c 	.word	0x0802840c
 801a8b4:	0802849c 	.word	0x0802849c

0801a8b8 <__ratio>:
 801a8b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8bc:	468a      	mov	sl, r1
 801a8be:	4669      	mov	r1, sp
 801a8c0:	4683      	mov	fp, r0
 801a8c2:	f7ff ff4d 	bl	801a760 <__b2d>
 801a8c6:	a901      	add	r1, sp, #4
 801a8c8:	4650      	mov	r0, sl
 801a8ca:	ec59 8b10 	vmov	r8, r9, d0
 801a8ce:	ee10 6a10 	vmov	r6, s0
 801a8d2:	f7ff ff45 	bl	801a760 <__b2d>
 801a8d6:	f8db 3010 	ldr.w	r3, [fp, #16]
 801a8da:	f8da 2010 	ldr.w	r2, [sl, #16]
 801a8de:	eba3 0c02 	sub.w	ip, r3, r2
 801a8e2:	e9dd 3200 	ldrd	r3, r2, [sp]
 801a8e6:	1a9b      	subs	r3, r3, r2
 801a8e8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801a8ec:	ec55 4b10 	vmov	r4, r5, d0
 801a8f0:	2b00      	cmp	r3, #0
 801a8f2:	ee10 0a10 	vmov	r0, s0
 801a8f6:	bfce      	itee	gt
 801a8f8:	464a      	movgt	r2, r9
 801a8fa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801a8fe:	462a      	movle	r2, r5
 801a900:	464f      	mov	r7, r9
 801a902:	4629      	mov	r1, r5
 801a904:	bfcc      	ite	gt
 801a906:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801a90a:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 801a90e:	ec47 6b17 	vmov	d7, r6, r7
 801a912:	ec41 0b16 	vmov	d6, r0, r1
 801a916:	ee87 0b06 	vdiv.f64	d0, d7, d6
 801a91a:	b003      	add	sp, #12
 801a91c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a920 <__copybits>:
 801a920:	3901      	subs	r1, #1
 801a922:	b570      	push	{r4, r5, r6, lr}
 801a924:	1149      	asrs	r1, r1, #5
 801a926:	6914      	ldr	r4, [r2, #16]
 801a928:	3101      	adds	r1, #1
 801a92a:	f102 0314 	add.w	r3, r2, #20
 801a92e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801a932:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801a936:	1f05      	subs	r5, r0, #4
 801a938:	42a3      	cmp	r3, r4
 801a93a:	d30c      	bcc.n	801a956 <__copybits+0x36>
 801a93c:	1aa3      	subs	r3, r4, r2
 801a93e:	3b11      	subs	r3, #17
 801a940:	f023 0303 	bic.w	r3, r3, #3
 801a944:	3211      	adds	r2, #17
 801a946:	42a2      	cmp	r2, r4
 801a948:	bf88      	it	hi
 801a94a:	2300      	movhi	r3, #0
 801a94c:	4418      	add	r0, r3
 801a94e:	2300      	movs	r3, #0
 801a950:	4288      	cmp	r0, r1
 801a952:	d305      	bcc.n	801a960 <__copybits+0x40>
 801a954:	bd70      	pop	{r4, r5, r6, pc}
 801a956:	f853 6b04 	ldr.w	r6, [r3], #4
 801a95a:	f845 6f04 	str.w	r6, [r5, #4]!
 801a95e:	e7eb      	b.n	801a938 <__copybits+0x18>
 801a960:	f840 3b04 	str.w	r3, [r0], #4
 801a964:	e7f4      	b.n	801a950 <__copybits+0x30>

0801a966 <__any_on>:
 801a966:	f100 0214 	add.w	r2, r0, #20
 801a96a:	6900      	ldr	r0, [r0, #16]
 801a96c:	114b      	asrs	r3, r1, #5
 801a96e:	4298      	cmp	r0, r3
 801a970:	b510      	push	{r4, lr}
 801a972:	db11      	blt.n	801a998 <__any_on+0x32>
 801a974:	dd0a      	ble.n	801a98c <__any_on+0x26>
 801a976:	f011 011f 	ands.w	r1, r1, #31
 801a97a:	d007      	beq.n	801a98c <__any_on+0x26>
 801a97c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801a980:	fa24 f001 	lsr.w	r0, r4, r1
 801a984:	fa00 f101 	lsl.w	r1, r0, r1
 801a988:	428c      	cmp	r4, r1
 801a98a:	d10b      	bne.n	801a9a4 <__any_on+0x3e>
 801a98c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a990:	4293      	cmp	r3, r2
 801a992:	d803      	bhi.n	801a99c <__any_on+0x36>
 801a994:	2000      	movs	r0, #0
 801a996:	bd10      	pop	{r4, pc}
 801a998:	4603      	mov	r3, r0
 801a99a:	e7f7      	b.n	801a98c <__any_on+0x26>
 801a99c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801a9a0:	2900      	cmp	r1, #0
 801a9a2:	d0f5      	beq.n	801a990 <__any_on+0x2a>
 801a9a4:	2001      	movs	r0, #1
 801a9a6:	e7f6      	b.n	801a996 <__any_on+0x30>

0801a9a8 <_calloc_r>:
 801a9a8:	b513      	push	{r0, r1, r4, lr}
 801a9aa:	434a      	muls	r2, r1
 801a9ac:	4611      	mov	r1, r2
 801a9ae:	9201      	str	r2, [sp, #4]
 801a9b0:	f000 f85a 	bl	801aa68 <_malloc_r>
 801a9b4:	4604      	mov	r4, r0
 801a9b6:	b118      	cbz	r0, 801a9c0 <_calloc_r+0x18>
 801a9b8:	9a01      	ldr	r2, [sp, #4]
 801a9ba:	2100      	movs	r1, #0
 801a9bc:	f7fc fc80 	bl	80172c0 <memset>
 801a9c0:	4620      	mov	r0, r4
 801a9c2:	b002      	add	sp, #8
 801a9c4:	bd10      	pop	{r4, pc}
	...

0801a9c8 <_free_r>:
 801a9c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a9ca:	2900      	cmp	r1, #0
 801a9cc:	d048      	beq.n	801aa60 <_free_r+0x98>
 801a9ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a9d2:	9001      	str	r0, [sp, #4]
 801a9d4:	2b00      	cmp	r3, #0
 801a9d6:	f1a1 0404 	sub.w	r4, r1, #4
 801a9da:	bfb8      	it	lt
 801a9dc:	18e4      	addlt	r4, r4, r3
 801a9de:	f000 fa6b 	bl	801aeb8 <__malloc_lock>
 801a9e2:	4a20      	ldr	r2, [pc, #128]	; (801aa64 <_free_r+0x9c>)
 801a9e4:	9801      	ldr	r0, [sp, #4]
 801a9e6:	6813      	ldr	r3, [r2, #0]
 801a9e8:	4615      	mov	r5, r2
 801a9ea:	b933      	cbnz	r3, 801a9fa <_free_r+0x32>
 801a9ec:	6063      	str	r3, [r4, #4]
 801a9ee:	6014      	str	r4, [r2, #0]
 801a9f0:	b003      	add	sp, #12
 801a9f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a9f6:	f000 ba65 	b.w	801aec4 <__malloc_unlock>
 801a9fa:	42a3      	cmp	r3, r4
 801a9fc:	d90b      	bls.n	801aa16 <_free_r+0x4e>
 801a9fe:	6821      	ldr	r1, [r4, #0]
 801aa00:	1862      	adds	r2, r4, r1
 801aa02:	4293      	cmp	r3, r2
 801aa04:	bf04      	itt	eq
 801aa06:	681a      	ldreq	r2, [r3, #0]
 801aa08:	685b      	ldreq	r3, [r3, #4]
 801aa0a:	6063      	str	r3, [r4, #4]
 801aa0c:	bf04      	itt	eq
 801aa0e:	1852      	addeq	r2, r2, r1
 801aa10:	6022      	streq	r2, [r4, #0]
 801aa12:	602c      	str	r4, [r5, #0]
 801aa14:	e7ec      	b.n	801a9f0 <_free_r+0x28>
 801aa16:	461a      	mov	r2, r3
 801aa18:	685b      	ldr	r3, [r3, #4]
 801aa1a:	b10b      	cbz	r3, 801aa20 <_free_r+0x58>
 801aa1c:	42a3      	cmp	r3, r4
 801aa1e:	d9fa      	bls.n	801aa16 <_free_r+0x4e>
 801aa20:	6811      	ldr	r1, [r2, #0]
 801aa22:	1855      	adds	r5, r2, r1
 801aa24:	42a5      	cmp	r5, r4
 801aa26:	d10b      	bne.n	801aa40 <_free_r+0x78>
 801aa28:	6824      	ldr	r4, [r4, #0]
 801aa2a:	4421      	add	r1, r4
 801aa2c:	1854      	adds	r4, r2, r1
 801aa2e:	42a3      	cmp	r3, r4
 801aa30:	6011      	str	r1, [r2, #0]
 801aa32:	d1dd      	bne.n	801a9f0 <_free_r+0x28>
 801aa34:	681c      	ldr	r4, [r3, #0]
 801aa36:	685b      	ldr	r3, [r3, #4]
 801aa38:	6053      	str	r3, [r2, #4]
 801aa3a:	4421      	add	r1, r4
 801aa3c:	6011      	str	r1, [r2, #0]
 801aa3e:	e7d7      	b.n	801a9f0 <_free_r+0x28>
 801aa40:	d902      	bls.n	801aa48 <_free_r+0x80>
 801aa42:	230c      	movs	r3, #12
 801aa44:	6003      	str	r3, [r0, #0]
 801aa46:	e7d3      	b.n	801a9f0 <_free_r+0x28>
 801aa48:	6825      	ldr	r5, [r4, #0]
 801aa4a:	1961      	adds	r1, r4, r5
 801aa4c:	428b      	cmp	r3, r1
 801aa4e:	bf04      	itt	eq
 801aa50:	6819      	ldreq	r1, [r3, #0]
 801aa52:	685b      	ldreq	r3, [r3, #4]
 801aa54:	6063      	str	r3, [r4, #4]
 801aa56:	bf04      	itt	eq
 801aa58:	1949      	addeq	r1, r1, r5
 801aa5a:	6021      	streq	r1, [r4, #0]
 801aa5c:	6054      	str	r4, [r2, #4]
 801aa5e:	e7c7      	b.n	801a9f0 <_free_r+0x28>
 801aa60:	b003      	add	sp, #12
 801aa62:	bd30      	pop	{r4, r5, pc}
 801aa64:	20055d20 	.word	0x20055d20

0801aa68 <_malloc_r>:
 801aa68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa6a:	1ccd      	adds	r5, r1, #3
 801aa6c:	f025 0503 	bic.w	r5, r5, #3
 801aa70:	3508      	adds	r5, #8
 801aa72:	2d0c      	cmp	r5, #12
 801aa74:	bf38      	it	cc
 801aa76:	250c      	movcc	r5, #12
 801aa78:	2d00      	cmp	r5, #0
 801aa7a:	4606      	mov	r6, r0
 801aa7c:	db01      	blt.n	801aa82 <_malloc_r+0x1a>
 801aa7e:	42a9      	cmp	r1, r5
 801aa80:	d903      	bls.n	801aa8a <_malloc_r+0x22>
 801aa82:	230c      	movs	r3, #12
 801aa84:	6033      	str	r3, [r6, #0]
 801aa86:	2000      	movs	r0, #0
 801aa88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aa8a:	f000 fa15 	bl	801aeb8 <__malloc_lock>
 801aa8e:	4921      	ldr	r1, [pc, #132]	; (801ab14 <_malloc_r+0xac>)
 801aa90:	680a      	ldr	r2, [r1, #0]
 801aa92:	4614      	mov	r4, r2
 801aa94:	b99c      	cbnz	r4, 801aabe <_malloc_r+0x56>
 801aa96:	4f20      	ldr	r7, [pc, #128]	; (801ab18 <_malloc_r+0xb0>)
 801aa98:	683b      	ldr	r3, [r7, #0]
 801aa9a:	b923      	cbnz	r3, 801aaa6 <_malloc_r+0x3e>
 801aa9c:	4621      	mov	r1, r4
 801aa9e:	4630      	mov	r0, r6
 801aaa0:	f000 f9a2 	bl	801ade8 <_sbrk_r>
 801aaa4:	6038      	str	r0, [r7, #0]
 801aaa6:	4629      	mov	r1, r5
 801aaa8:	4630      	mov	r0, r6
 801aaaa:	f000 f99d 	bl	801ade8 <_sbrk_r>
 801aaae:	1c43      	adds	r3, r0, #1
 801aab0:	d123      	bne.n	801aafa <_malloc_r+0x92>
 801aab2:	230c      	movs	r3, #12
 801aab4:	6033      	str	r3, [r6, #0]
 801aab6:	4630      	mov	r0, r6
 801aab8:	f000 fa04 	bl	801aec4 <__malloc_unlock>
 801aabc:	e7e3      	b.n	801aa86 <_malloc_r+0x1e>
 801aabe:	6823      	ldr	r3, [r4, #0]
 801aac0:	1b5b      	subs	r3, r3, r5
 801aac2:	d417      	bmi.n	801aaf4 <_malloc_r+0x8c>
 801aac4:	2b0b      	cmp	r3, #11
 801aac6:	d903      	bls.n	801aad0 <_malloc_r+0x68>
 801aac8:	6023      	str	r3, [r4, #0]
 801aaca:	441c      	add	r4, r3
 801aacc:	6025      	str	r5, [r4, #0]
 801aace:	e004      	b.n	801aada <_malloc_r+0x72>
 801aad0:	6863      	ldr	r3, [r4, #4]
 801aad2:	42a2      	cmp	r2, r4
 801aad4:	bf0c      	ite	eq
 801aad6:	600b      	streq	r3, [r1, #0]
 801aad8:	6053      	strne	r3, [r2, #4]
 801aada:	4630      	mov	r0, r6
 801aadc:	f000 f9f2 	bl	801aec4 <__malloc_unlock>
 801aae0:	f104 000b 	add.w	r0, r4, #11
 801aae4:	1d23      	adds	r3, r4, #4
 801aae6:	f020 0007 	bic.w	r0, r0, #7
 801aaea:	1ac2      	subs	r2, r0, r3
 801aaec:	d0cc      	beq.n	801aa88 <_malloc_r+0x20>
 801aaee:	1a1b      	subs	r3, r3, r0
 801aaf0:	50a3      	str	r3, [r4, r2]
 801aaf2:	e7c9      	b.n	801aa88 <_malloc_r+0x20>
 801aaf4:	4622      	mov	r2, r4
 801aaf6:	6864      	ldr	r4, [r4, #4]
 801aaf8:	e7cc      	b.n	801aa94 <_malloc_r+0x2c>
 801aafa:	1cc4      	adds	r4, r0, #3
 801aafc:	f024 0403 	bic.w	r4, r4, #3
 801ab00:	42a0      	cmp	r0, r4
 801ab02:	d0e3      	beq.n	801aacc <_malloc_r+0x64>
 801ab04:	1a21      	subs	r1, r4, r0
 801ab06:	4630      	mov	r0, r6
 801ab08:	f000 f96e 	bl	801ade8 <_sbrk_r>
 801ab0c:	3001      	adds	r0, #1
 801ab0e:	d1dd      	bne.n	801aacc <_malloc_r+0x64>
 801ab10:	e7cf      	b.n	801aab2 <_malloc_r+0x4a>
 801ab12:	bf00      	nop
 801ab14:	20055d20 	.word	0x20055d20
 801ab18:	20055d24 	.word	0x20055d24

0801ab1c <__ssputs_r>:
 801ab1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ab20:	688e      	ldr	r6, [r1, #8]
 801ab22:	429e      	cmp	r6, r3
 801ab24:	4682      	mov	sl, r0
 801ab26:	460c      	mov	r4, r1
 801ab28:	4690      	mov	r8, r2
 801ab2a:	461f      	mov	r7, r3
 801ab2c:	d838      	bhi.n	801aba0 <__ssputs_r+0x84>
 801ab2e:	898a      	ldrh	r2, [r1, #12]
 801ab30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801ab34:	d032      	beq.n	801ab9c <__ssputs_r+0x80>
 801ab36:	6825      	ldr	r5, [r4, #0]
 801ab38:	6909      	ldr	r1, [r1, #16]
 801ab3a:	eba5 0901 	sub.w	r9, r5, r1
 801ab3e:	6965      	ldr	r5, [r4, #20]
 801ab40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ab44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801ab48:	3301      	adds	r3, #1
 801ab4a:	444b      	add	r3, r9
 801ab4c:	106d      	asrs	r5, r5, #1
 801ab4e:	429d      	cmp	r5, r3
 801ab50:	bf38      	it	cc
 801ab52:	461d      	movcc	r5, r3
 801ab54:	0553      	lsls	r3, r2, #21
 801ab56:	d531      	bpl.n	801abbc <__ssputs_r+0xa0>
 801ab58:	4629      	mov	r1, r5
 801ab5a:	f7ff ff85 	bl	801aa68 <_malloc_r>
 801ab5e:	4606      	mov	r6, r0
 801ab60:	b950      	cbnz	r0, 801ab78 <__ssputs_r+0x5c>
 801ab62:	230c      	movs	r3, #12
 801ab64:	f8ca 3000 	str.w	r3, [sl]
 801ab68:	89a3      	ldrh	r3, [r4, #12]
 801ab6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ab6e:	81a3      	strh	r3, [r4, #12]
 801ab70:	f04f 30ff 	mov.w	r0, #4294967295
 801ab74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ab78:	6921      	ldr	r1, [r4, #16]
 801ab7a:	464a      	mov	r2, r9
 801ab7c:	f7fc fb92 	bl	80172a4 <memcpy>
 801ab80:	89a3      	ldrh	r3, [r4, #12]
 801ab82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801ab86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ab8a:	81a3      	strh	r3, [r4, #12]
 801ab8c:	6126      	str	r6, [r4, #16]
 801ab8e:	6165      	str	r5, [r4, #20]
 801ab90:	444e      	add	r6, r9
 801ab92:	eba5 0509 	sub.w	r5, r5, r9
 801ab96:	6026      	str	r6, [r4, #0]
 801ab98:	60a5      	str	r5, [r4, #8]
 801ab9a:	463e      	mov	r6, r7
 801ab9c:	42be      	cmp	r6, r7
 801ab9e:	d900      	bls.n	801aba2 <__ssputs_r+0x86>
 801aba0:	463e      	mov	r6, r7
 801aba2:	4632      	mov	r2, r6
 801aba4:	6820      	ldr	r0, [r4, #0]
 801aba6:	4641      	mov	r1, r8
 801aba8:	f000 f96c 	bl	801ae84 <memmove>
 801abac:	68a3      	ldr	r3, [r4, #8]
 801abae:	6822      	ldr	r2, [r4, #0]
 801abb0:	1b9b      	subs	r3, r3, r6
 801abb2:	4432      	add	r2, r6
 801abb4:	60a3      	str	r3, [r4, #8]
 801abb6:	6022      	str	r2, [r4, #0]
 801abb8:	2000      	movs	r0, #0
 801abba:	e7db      	b.n	801ab74 <__ssputs_r+0x58>
 801abbc:	462a      	mov	r2, r5
 801abbe:	f000 f987 	bl	801aed0 <_realloc_r>
 801abc2:	4606      	mov	r6, r0
 801abc4:	2800      	cmp	r0, #0
 801abc6:	d1e1      	bne.n	801ab8c <__ssputs_r+0x70>
 801abc8:	6921      	ldr	r1, [r4, #16]
 801abca:	4650      	mov	r0, sl
 801abcc:	f7ff fefc 	bl	801a9c8 <_free_r>
 801abd0:	e7c7      	b.n	801ab62 <__ssputs_r+0x46>
	...

0801abd4 <_svfiprintf_r>:
 801abd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abd8:	4698      	mov	r8, r3
 801abda:	898b      	ldrh	r3, [r1, #12]
 801abdc:	061b      	lsls	r3, r3, #24
 801abde:	b09d      	sub	sp, #116	; 0x74
 801abe0:	4607      	mov	r7, r0
 801abe2:	460d      	mov	r5, r1
 801abe4:	4614      	mov	r4, r2
 801abe6:	d50e      	bpl.n	801ac06 <_svfiprintf_r+0x32>
 801abe8:	690b      	ldr	r3, [r1, #16]
 801abea:	b963      	cbnz	r3, 801ac06 <_svfiprintf_r+0x32>
 801abec:	2140      	movs	r1, #64	; 0x40
 801abee:	f7ff ff3b 	bl	801aa68 <_malloc_r>
 801abf2:	6028      	str	r0, [r5, #0]
 801abf4:	6128      	str	r0, [r5, #16]
 801abf6:	b920      	cbnz	r0, 801ac02 <_svfiprintf_r+0x2e>
 801abf8:	230c      	movs	r3, #12
 801abfa:	603b      	str	r3, [r7, #0]
 801abfc:	f04f 30ff 	mov.w	r0, #4294967295
 801ac00:	e0d1      	b.n	801ada6 <_svfiprintf_r+0x1d2>
 801ac02:	2340      	movs	r3, #64	; 0x40
 801ac04:	616b      	str	r3, [r5, #20]
 801ac06:	2300      	movs	r3, #0
 801ac08:	9309      	str	r3, [sp, #36]	; 0x24
 801ac0a:	2320      	movs	r3, #32
 801ac0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ac10:	f8cd 800c 	str.w	r8, [sp, #12]
 801ac14:	2330      	movs	r3, #48	; 0x30
 801ac16:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801adc0 <_svfiprintf_r+0x1ec>
 801ac1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ac1e:	f04f 0901 	mov.w	r9, #1
 801ac22:	4623      	mov	r3, r4
 801ac24:	469a      	mov	sl, r3
 801ac26:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ac2a:	b10a      	cbz	r2, 801ac30 <_svfiprintf_r+0x5c>
 801ac2c:	2a25      	cmp	r2, #37	; 0x25
 801ac2e:	d1f9      	bne.n	801ac24 <_svfiprintf_r+0x50>
 801ac30:	ebba 0b04 	subs.w	fp, sl, r4
 801ac34:	d00b      	beq.n	801ac4e <_svfiprintf_r+0x7a>
 801ac36:	465b      	mov	r3, fp
 801ac38:	4622      	mov	r2, r4
 801ac3a:	4629      	mov	r1, r5
 801ac3c:	4638      	mov	r0, r7
 801ac3e:	f7ff ff6d 	bl	801ab1c <__ssputs_r>
 801ac42:	3001      	adds	r0, #1
 801ac44:	f000 80aa 	beq.w	801ad9c <_svfiprintf_r+0x1c8>
 801ac48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ac4a:	445a      	add	r2, fp
 801ac4c:	9209      	str	r2, [sp, #36]	; 0x24
 801ac4e:	f89a 3000 	ldrb.w	r3, [sl]
 801ac52:	2b00      	cmp	r3, #0
 801ac54:	f000 80a2 	beq.w	801ad9c <_svfiprintf_r+0x1c8>
 801ac58:	2300      	movs	r3, #0
 801ac5a:	f04f 32ff 	mov.w	r2, #4294967295
 801ac5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ac62:	f10a 0a01 	add.w	sl, sl, #1
 801ac66:	9304      	str	r3, [sp, #16]
 801ac68:	9307      	str	r3, [sp, #28]
 801ac6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ac6e:	931a      	str	r3, [sp, #104]	; 0x68
 801ac70:	4654      	mov	r4, sl
 801ac72:	2205      	movs	r2, #5
 801ac74:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ac78:	4851      	ldr	r0, [pc, #324]	; (801adc0 <_svfiprintf_r+0x1ec>)
 801ac7a:	f7ed fb49 	bl	8008310 <memchr>
 801ac7e:	9a04      	ldr	r2, [sp, #16]
 801ac80:	b9d8      	cbnz	r0, 801acba <_svfiprintf_r+0xe6>
 801ac82:	06d0      	lsls	r0, r2, #27
 801ac84:	bf44      	itt	mi
 801ac86:	2320      	movmi	r3, #32
 801ac88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ac8c:	0711      	lsls	r1, r2, #28
 801ac8e:	bf44      	itt	mi
 801ac90:	232b      	movmi	r3, #43	; 0x2b
 801ac92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ac96:	f89a 3000 	ldrb.w	r3, [sl]
 801ac9a:	2b2a      	cmp	r3, #42	; 0x2a
 801ac9c:	d015      	beq.n	801acca <_svfiprintf_r+0xf6>
 801ac9e:	9a07      	ldr	r2, [sp, #28]
 801aca0:	4654      	mov	r4, sl
 801aca2:	2000      	movs	r0, #0
 801aca4:	f04f 0c0a 	mov.w	ip, #10
 801aca8:	4621      	mov	r1, r4
 801acaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 801acae:	3b30      	subs	r3, #48	; 0x30
 801acb0:	2b09      	cmp	r3, #9
 801acb2:	d94e      	bls.n	801ad52 <_svfiprintf_r+0x17e>
 801acb4:	b1b0      	cbz	r0, 801ace4 <_svfiprintf_r+0x110>
 801acb6:	9207      	str	r2, [sp, #28]
 801acb8:	e014      	b.n	801ace4 <_svfiprintf_r+0x110>
 801acba:	eba0 0308 	sub.w	r3, r0, r8
 801acbe:	fa09 f303 	lsl.w	r3, r9, r3
 801acc2:	4313      	orrs	r3, r2
 801acc4:	9304      	str	r3, [sp, #16]
 801acc6:	46a2      	mov	sl, r4
 801acc8:	e7d2      	b.n	801ac70 <_svfiprintf_r+0x9c>
 801acca:	9b03      	ldr	r3, [sp, #12]
 801accc:	1d19      	adds	r1, r3, #4
 801acce:	681b      	ldr	r3, [r3, #0]
 801acd0:	9103      	str	r1, [sp, #12]
 801acd2:	2b00      	cmp	r3, #0
 801acd4:	bfbb      	ittet	lt
 801acd6:	425b      	neglt	r3, r3
 801acd8:	f042 0202 	orrlt.w	r2, r2, #2
 801acdc:	9307      	strge	r3, [sp, #28]
 801acde:	9307      	strlt	r3, [sp, #28]
 801ace0:	bfb8      	it	lt
 801ace2:	9204      	strlt	r2, [sp, #16]
 801ace4:	7823      	ldrb	r3, [r4, #0]
 801ace6:	2b2e      	cmp	r3, #46	; 0x2e
 801ace8:	d10c      	bne.n	801ad04 <_svfiprintf_r+0x130>
 801acea:	7863      	ldrb	r3, [r4, #1]
 801acec:	2b2a      	cmp	r3, #42	; 0x2a
 801acee:	d135      	bne.n	801ad5c <_svfiprintf_r+0x188>
 801acf0:	9b03      	ldr	r3, [sp, #12]
 801acf2:	1d1a      	adds	r2, r3, #4
 801acf4:	681b      	ldr	r3, [r3, #0]
 801acf6:	9203      	str	r2, [sp, #12]
 801acf8:	2b00      	cmp	r3, #0
 801acfa:	bfb8      	it	lt
 801acfc:	f04f 33ff 	movlt.w	r3, #4294967295
 801ad00:	3402      	adds	r4, #2
 801ad02:	9305      	str	r3, [sp, #20]
 801ad04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801add0 <_svfiprintf_r+0x1fc>
 801ad08:	7821      	ldrb	r1, [r4, #0]
 801ad0a:	2203      	movs	r2, #3
 801ad0c:	4650      	mov	r0, sl
 801ad0e:	f7ed faff 	bl	8008310 <memchr>
 801ad12:	b140      	cbz	r0, 801ad26 <_svfiprintf_r+0x152>
 801ad14:	2340      	movs	r3, #64	; 0x40
 801ad16:	eba0 000a 	sub.w	r0, r0, sl
 801ad1a:	fa03 f000 	lsl.w	r0, r3, r0
 801ad1e:	9b04      	ldr	r3, [sp, #16]
 801ad20:	4303      	orrs	r3, r0
 801ad22:	3401      	adds	r4, #1
 801ad24:	9304      	str	r3, [sp, #16]
 801ad26:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ad2a:	4826      	ldr	r0, [pc, #152]	; (801adc4 <_svfiprintf_r+0x1f0>)
 801ad2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ad30:	2206      	movs	r2, #6
 801ad32:	f7ed faed 	bl	8008310 <memchr>
 801ad36:	2800      	cmp	r0, #0
 801ad38:	d038      	beq.n	801adac <_svfiprintf_r+0x1d8>
 801ad3a:	4b23      	ldr	r3, [pc, #140]	; (801adc8 <_svfiprintf_r+0x1f4>)
 801ad3c:	bb1b      	cbnz	r3, 801ad86 <_svfiprintf_r+0x1b2>
 801ad3e:	9b03      	ldr	r3, [sp, #12]
 801ad40:	3307      	adds	r3, #7
 801ad42:	f023 0307 	bic.w	r3, r3, #7
 801ad46:	3308      	adds	r3, #8
 801ad48:	9303      	str	r3, [sp, #12]
 801ad4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad4c:	4433      	add	r3, r6
 801ad4e:	9309      	str	r3, [sp, #36]	; 0x24
 801ad50:	e767      	b.n	801ac22 <_svfiprintf_r+0x4e>
 801ad52:	fb0c 3202 	mla	r2, ip, r2, r3
 801ad56:	460c      	mov	r4, r1
 801ad58:	2001      	movs	r0, #1
 801ad5a:	e7a5      	b.n	801aca8 <_svfiprintf_r+0xd4>
 801ad5c:	2300      	movs	r3, #0
 801ad5e:	3401      	adds	r4, #1
 801ad60:	9305      	str	r3, [sp, #20]
 801ad62:	4619      	mov	r1, r3
 801ad64:	f04f 0c0a 	mov.w	ip, #10
 801ad68:	4620      	mov	r0, r4
 801ad6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ad6e:	3a30      	subs	r2, #48	; 0x30
 801ad70:	2a09      	cmp	r2, #9
 801ad72:	d903      	bls.n	801ad7c <_svfiprintf_r+0x1a8>
 801ad74:	2b00      	cmp	r3, #0
 801ad76:	d0c5      	beq.n	801ad04 <_svfiprintf_r+0x130>
 801ad78:	9105      	str	r1, [sp, #20]
 801ad7a:	e7c3      	b.n	801ad04 <_svfiprintf_r+0x130>
 801ad7c:	fb0c 2101 	mla	r1, ip, r1, r2
 801ad80:	4604      	mov	r4, r0
 801ad82:	2301      	movs	r3, #1
 801ad84:	e7f0      	b.n	801ad68 <_svfiprintf_r+0x194>
 801ad86:	ab03      	add	r3, sp, #12
 801ad88:	9300      	str	r3, [sp, #0]
 801ad8a:	462a      	mov	r2, r5
 801ad8c:	4b0f      	ldr	r3, [pc, #60]	; (801adcc <_svfiprintf_r+0x1f8>)
 801ad8e:	a904      	add	r1, sp, #16
 801ad90:	4638      	mov	r0, r7
 801ad92:	f7fc fb2d 	bl	80173f0 <_printf_float>
 801ad96:	1c42      	adds	r2, r0, #1
 801ad98:	4606      	mov	r6, r0
 801ad9a:	d1d6      	bne.n	801ad4a <_svfiprintf_r+0x176>
 801ad9c:	89ab      	ldrh	r3, [r5, #12]
 801ad9e:	065b      	lsls	r3, r3, #25
 801ada0:	f53f af2c 	bmi.w	801abfc <_svfiprintf_r+0x28>
 801ada4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ada6:	b01d      	add	sp, #116	; 0x74
 801ada8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801adac:	ab03      	add	r3, sp, #12
 801adae:	9300      	str	r3, [sp, #0]
 801adb0:	462a      	mov	r2, r5
 801adb2:	4b06      	ldr	r3, [pc, #24]	; (801adcc <_svfiprintf_r+0x1f8>)
 801adb4:	a904      	add	r1, sp, #16
 801adb6:	4638      	mov	r0, r7
 801adb8:	f7fc fda6 	bl	8017908 <_printf_i>
 801adbc:	e7eb      	b.n	801ad96 <_svfiprintf_r+0x1c2>
 801adbe:	bf00      	nop
 801adc0:	080285fc 	.word	0x080285fc
 801adc4:	08028606 	.word	0x08028606
 801adc8:	080173f1 	.word	0x080173f1
 801adcc:	0801ab1d 	.word	0x0801ab1d
 801add0:	08028602 	.word	0x08028602
 801add4:	00000000 	.word	0x00000000

0801add8 <nan>:
 801add8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801ade0 <nan+0x8>
 801addc:	4770      	bx	lr
 801adde:	bf00      	nop
 801ade0:	00000000 	.word	0x00000000
 801ade4:	7ff80000 	.word	0x7ff80000

0801ade8 <_sbrk_r>:
 801ade8:	b538      	push	{r3, r4, r5, lr}
 801adea:	4d06      	ldr	r5, [pc, #24]	; (801ae04 <_sbrk_r+0x1c>)
 801adec:	2300      	movs	r3, #0
 801adee:	4604      	mov	r4, r0
 801adf0:	4608      	mov	r0, r1
 801adf2:	602b      	str	r3, [r5, #0]
 801adf4:	f7f4 faa4 	bl	800f340 <_sbrk>
 801adf8:	1c43      	adds	r3, r0, #1
 801adfa:	d102      	bne.n	801ae02 <_sbrk_r+0x1a>
 801adfc:	682b      	ldr	r3, [r5, #0]
 801adfe:	b103      	cbz	r3, 801ae02 <_sbrk_r+0x1a>
 801ae00:	6023      	str	r3, [r4, #0]
 801ae02:	bd38      	pop	{r3, r4, r5, pc}
 801ae04:	2006c580 	.word	0x2006c580

0801ae08 <__ascii_wctomb>:
 801ae08:	b149      	cbz	r1, 801ae1e <__ascii_wctomb+0x16>
 801ae0a:	2aff      	cmp	r2, #255	; 0xff
 801ae0c:	bf85      	ittet	hi
 801ae0e:	238a      	movhi	r3, #138	; 0x8a
 801ae10:	6003      	strhi	r3, [r0, #0]
 801ae12:	700a      	strbls	r2, [r1, #0]
 801ae14:	f04f 30ff 	movhi.w	r0, #4294967295
 801ae18:	bf98      	it	ls
 801ae1a:	2001      	movls	r0, #1
 801ae1c:	4770      	bx	lr
 801ae1e:	4608      	mov	r0, r1
 801ae20:	4770      	bx	lr
	...

0801ae24 <__assert_func>:
 801ae24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ae26:	4614      	mov	r4, r2
 801ae28:	461a      	mov	r2, r3
 801ae2a:	4b09      	ldr	r3, [pc, #36]	; (801ae50 <__assert_func+0x2c>)
 801ae2c:	681b      	ldr	r3, [r3, #0]
 801ae2e:	4605      	mov	r5, r0
 801ae30:	68d8      	ldr	r0, [r3, #12]
 801ae32:	b14c      	cbz	r4, 801ae48 <__assert_func+0x24>
 801ae34:	4b07      	ldr	r3, [pc, #28]	; (801ae54 <__assert_func+0x30>)
 801ae36:	9100      	str	r1, [sp, #0]
 801ae38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ae3c:	4906      	ldr	r1, [pc, #24]	; (801ae58 <__assert_func+0x34>)
 801ae3e:	462b      	mov	r3, r5
 801ae40:	f000 f80e 	bl	801ae60 <fiprintf>
 801ae44:	f000 fa84 	bl	801b350 <abort>
 801ae48:	4b04      	ldr	r3, [pc, #16]	; (801ae5c <__assert_func+0x38>)
 801ae4a:	461c      	mov	r4, r3
 801ae4c:	e7f3      	b.n	801ae36 <__assert_func+0x12>
 801ae4e:	bf00      	nop
 801ae50:	20000028 	.word	0x20000028
 801ae54:	0802860d 	.word	0x0802860d
 801ae58:	0802861a 	.word	0x0802861a
 801ae5c:	08028648 	.word	0x08028648

0801ae60 <fiprintf>:
 801ae60:	b40e      	push	{r1, r2, r3}
 801ae62:	b503      	push	{r0, r1, lr}
 801ae64:	4601      	mov	r1, r0
 801ae66:	ab03      	add	r3, sp, #12
 801ae68:	4805      	ldr	r0, [pc, #20]	; (801ae80 <fiprintf+0x20>)
 801ae6a:	f853 2b04 	ldr.w	r2, [r3], #4
 801ae6e:	6800      	ldr	r0, [r0, #0]
 801ae70:	9301      	str	r3, [sp, #4]
 801ae72:	f000 f87d 	bl	801af70 <_vfiprintf_r>
 801ae76:	b002      	add	sp, #8
 801ae78:	f85d eb04 	ldr.w	lr, [sp], #4
 801ae7c:	b003      	add	sp, #12
 801ae7e:	4770      	bx	lr
 801ae80:	20000028 	.word	0x20000028

0801ae84 <memmove>:
 801ae84:	4288      	cmp	r0, r1
 801ae86:	b510      	push	{r4, lr}
 801ae88:	eb01 0402 	add.w	r4, r1, r2
 801ae8c:	d902      	bls.n	801ae94 <memmove+0x10>
 801ae8e:	4284      	cmp	r4, r0
 801ae90:	4623      	mov	r3, r4
 801ae92:	d807      	bhi.n	801aea4 <memmove+0x20>
 801ae94:	1e43      	subs	r3, r0, #1
 801ae96:	42a1      	cmp	r1, r4
 801ae98:	d008      	beq.n	801aeac <memmove+0x28>
 801ae9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ae9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801aea2:	e7f8      	b.n	801ae96 <memmove+0x12>
 801aea4:	4402      	add	r2, r0
 801aea6:	4601      	mov	r1, r0
 801aea8:	428a      	cmp	r2, r1
 801aeaa:	d100      	bne.n	801aeae <memmove+0x2a>
 801aeac:	bd10      	pop	{r4, pc}
 801aeae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801aeb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801aeb6:	e7f7      	b.n	801aea8 <memmove+0x24>

0801aeb8 <__malloc_lock>:
 801aeb8:	4801      	ldr	r0, [pc, #4]	; (801aec0 <__malloc_lock+0x8>)
 801aeba:	f000 bc09 	b.w	801b6d0 <__retarget_lock_acquire_recursive>
 801aebe:	bf00      	nop
 801aec0:	2006c588 	.word	0x2006c588

0801aec4 <__malloc_unlock>:
 801aec4:	4801      	ldr	r0, [pc, #4]	; (801aecc <__malloc_unlock+0x8>)
 801aec6:	f000 bc04 	b.w	801b6d2 <__retarget_lock_release_recursive>
 801aeca:	bf00      	nop
 801aecc:	2006c588 	.word	0x2006c588

0801aed0 <_realloc_r>:
 801aed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aed2:	4607      	mov	r7, r0
 801aed4:	4614      	mov	r4, r2
 801aed6:	460e      	mov	r6, r1
 801aed8:	b921      	cbnz	r1, 801aee4 <_realloc_r+0x14>
 801aeda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801aede:	4611      	mov	r1, r2
 801aee0:	f7ff bdc2 	b.w	801aa68 <_malloc_r>
 801aee4:	b922      	cbnz	r2, 801aef0 <_realloc_r+0x20>
 801aee6:	f7ff fd6f 	bl	801a9c8 <_free_r>
 801aeea:	4625      	mov	r5, r4
 801aeec:	4628      	mov	r0, r5
 801aeee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aef0:	f000 fc54 	bl	801b79c <_malloc_usable_size_r>
 801aef4:	42a0      	cmp	r0, r4
 801aef6:	d20f      	bcs.n	801af18 <_realloc_r+0x48>
 801aef8:	4621      	mov	r1, r4
 801aefa:	4638      	mov	r0, r7
 801aefc:	f7ff fdb4 	bl	801aa68 <_malloc_r>
 801af00:	4605      	mov	r5, r0
 801af02:	2800      	cmp	r0, #0
 801af04:	d0f2      	beq.n	801aeec <_realloc_r+0x1c>
 801af06:	4631      	mov	r1, r6
 801af08:	4622      	mov	r2, r4
 801af0a:	f7fc f9cb 	bl	80172a4 <memcpy>
 801af0e:	4631      	mov	r1, r6
 801af10:	4638      	mov	r0, r7
 801af12:	f7ff fd59 	bl	801a9c8 <_free_r>
 801af16:	e7e9      	b.n	801aeec <_realloc_r+0x1c>
 801af18:	4635      	mov	r5, r6
 801af1a:	e7e7      	b.n	801aeec <_realloc_r+0x1c>

0801af1c <__sfputc_r>:
 801af1c:	6893      	ldr	r3, [r2, #8]
 801af1e:	3b01      	subs	r3, #1
 801af20:	2b00      	cmp	r3, #0
 801af22:	b410      	push	{r4}
 801af24:	6093      	str	r3, [r2, #8]
 801af26:	da08      	bge.n	801af3a <__sfputc_r+0x1e>
 801af28:	6994      	ldr	r4, [r2, #24]
 801af2a:	42a3      	cmp	r3, r4
 801af2c:	db01      	blt.n	801af32 <__sfputc_r+0x16>
 801af2e:	290a      	cmp	r1, #10
 801af30:	d103      	bne.n	801af3a <__sfputc_r+0x1e>
 801af32:	f85d 4b04 	ldr.w	r4, [sp], #4
 801af36:	f000 b94b 	b.w	801b1d0 <__swbuf_r>
 801af3a:	6813      	ldr	r3, [r2, #0]
 801af3c:	1c58      	adds	r0, r3, #1
 801af3e:	6010      	str	r0, [r2, #0]
 801af40:	7019      	strb	r1, [r3, #0]
 801af42:	4608      	mov	r0, r1
 801af44:	f85d 4b04 	ldr.w	r4, [sp], #4
 801af48:	4770      	bx	lr

0801af4a <__sfputs_r>:
 801af4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af4c:	4606      	mov	r6, r0
 801af4e:	460f      	mov	r7, r1
 801af50:	4614      	mov	r4, r2
 801af52:	18d5      	adds	r5, r2, r3
 801af54:	42ac      	cmp	r4, r5
 801af56:	d101      	bne.n	801af5c <__sfputs_r+0x12>
 801af58:	2000      	movs	r0, #0
 801af5a:	e007      	b.n	801af6c <__sfputs_r+0x22>
 801af5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801af60:	463a      	mov	r2, r7
 801af62:	4630      	mov	r0, r6
 801af64:	f7ff ffda 	bl	801af1c <__sfputc_r>
 801af68:	1c43      	adds	r3, r0, #1
 801af6a:	d1f3      	bne.n	801af54 <__sfputs_r+0xa>
 801af6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801af70 <_vfiprintf_r>:
 801af70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af74:	460d      	mov	r5, r1
 801af76:	b09d      	sub	sp, #116	; 0x74
 801af78:	4614      	mov	r4, r2
 801af7a:	4698      	mov	r8, r3
 801af7c:	4606      	mov	r6, r0
 801af7e:	b118      	cbz	r0, 801af88 <_vfiprintf_r+0x18>
 801af80:	6983      	ldr	r3, [r0, #24]
 801af82:	b90b      	cbnz	r3, 801af88 <_vfiprintf_r+0x18>
 801af84:	f000 fb06 	bl	801b594 <__sinit>
 801af88:	4b89      	ldr	r3, [pc, #548]	; (801b1b0 <_vfiprintf_r+0x240>)
 801af8a:	429d      	cmp	r5, r3
 801af8c:	d11b      	bne.n	801afc6 <_vfiprintf_r+0x56>
 801af8e:	6875      	ldr	r5, [r6, #4]
 801af90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801af92:	07d9      	lsls	r1, r3, #31
 801af94:	d405      	bmi.n	801afa2 <_vfiprintf_r+0x32>
 801af96:	89ab      	ldrh	r3, [r5, #12]
 801af98:	059a      	lsls	r2, r3, #22
 801af9a:	d402      	bmi.n	801afa2 <_vfiprintf_r+0x32>
 801af9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801af9e:	f000 fb97 	bl	801b6d0 <__retarget_lock_acquire_recursive>
 801afa2:	89ab      	ldrh	r3, [r5, #12]
 801afa4:	071b      	lsls	r3, r3, #28
 801afa6:	d501      	bpl.n	801afac <_vfiprintf_r+0x3c>
 801afa8:	692b      	ldr	r3, [r5, #16]
 801afaa:	b9eb      	cbnz	r3, 801afe8 <_vfiprintf_r+0x78>
 801afac:	4629      	mov	r1, r5
 801afae:	4630      	mov	r0, r6
 801afb0:	f000 f960 	bl	801b274 <__swsetup_r>
 801afb4:	b1c0      	cbz	r0, 801afe8 <_vfiprintf_r+0x78>
 801afb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801afb8:	07dc      	lsls	r4, r3, #31
 801afba:	d50e      	bpl.n	801afda <_vfiprintf_r+0x6a>
 801afbc:	f04f 30ff 	mov.w	r0, #4294967295
 801afc0:	b01d      	add	sp, #116	; 0x74
 801afc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801afc6:	4b7b      	ldr	r3, [pc, #492]	; (801b1b4 <_vfiprintf_r+0x244>)
 801afc8:	429d      	cmp	r5, r3
 801afca:	d101      	bne.n	801afd0 <_vfiprintf_r+0x60>
 801afcc:	68b5      	ldr	r5, [r6, #8]
 801afce:	e7df      	b.n	801af90 <_vfiprintf_r+0x20>
 801afd0:	4b79      	ldr	r3, [pc, #484]	; (801b1b8 <_vfiprintf_r+0x248>)
 801afd2:	429d      	cmp	r5, r3
 801afd4:	bf08      	it	eq
 801afd6:	68f5      	ldreq	r5, [r6, #12]
 801afd8:	e7da      	b.n	801af90 <_vfiprintf_r+0x20>
 801afda:	89ab      	ldrh	r3, [r5, #12]
 801afdc:	0598      	lsls	r0, r3, #22
 801afde:	d4ed      	bmi.n	801afbc <_vfiprintf_r+0x4c>
 801afe0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801afe2:	f000 fb76 	bl	801b6d2 <__retarget_lock_release_recursive>
 801afe6:	e7e9      	b.n	801afbc <_vfiprintf_r+0x4c>
 801afe8:	2300      	movs	r3, #0
 801afea:	9309      	str	r3, [sp, #36]	; 0x24
 801afec:	2320      	movs	r3, #32
 801afee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801aff2:	f8cd 800c 	str.w	r8, [sp, #12]
 801aff6:	2330      	movs	r3, #48	; 0x30
 801aff8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801b1bc <_vfiprintf_r+0x24c>
 801affc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b000:	f04f 0901 	mov.w	r9, #1
 801b004:	4623      	mov	r3, r4
 801b006:	469a      	mov	sl, r3
 801b008:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b00c:	b10a      	cbz	r2, 801b012 <_vfiprintf_r+0xa2>
 801b00e:	2a25      	cmp	r2, #37	; 0x25
 801b010:	d1f9      	bne.n	801b006 <_vfiprintf_r+0x96>
 801b012:	ebba 0b04 	subs.w	fp, sl, r4
 801b016:	d00b      	beq.n	801b030 <_vfiprintf_r+0xc0>
 801b018:	465b      	mov	r3, fp
 801b01a:	4622      	mov	r2, r4
 801b01c:	4629      	mov	r1, r5
 801b01e:	4630      	mov	r0, r6
 801b020:	f7ff ff93 	bl	801af4a <__sfputs_r>
 801b024:	3001      	adds	r0, #1
 801b026:	f000 80aa 	beq.w	801b17e <_vfiprintf_r+0x20e>
 801b02a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b02c:	445a      	add	r2, fp
 801b02e:	9209      	str	r2, [sp, #36]	; 0x24
 801b030:	f89a 3000 	ldrb.w	r3, [sl]
 801b034:	2b00      	cmp	r3, #0
 801b036:	f000 80a2 	beq.w	801b17e <_vfiprintf_r+0x20e>
 801b03a:	2300      	movs	r3, #0
 801b03c:	f04f 32ff 	mov.w	r2, #4294967295
 801b040:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b044:	f10a 0a01 	add.w	sl, sl, #1
 801b048:	9304      	str	r3, [sp, #16]
 801b04a:	9307      	str	r3, [sp, #28]
 801b04c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b050:	931a      	str	r3, [sp, #104]	; 0x68
 801b052:	4654      	mov	r4, sl
 801b054:	2205      	movs	r2, #5
 801b056:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b05a:	4858      	ldr	r0, [pc, #352]	; (801b1bc <_vfiprintf_r+0x24c>)
 801b05c:	f7ed f958 	bl	8008310 <memchr>
 801b060:	9a04      	ldr	r2, [sp, #16]
 801b062:	b9d8      	cbnz	r0, 801b09c <_vfiprintf_r+0x12c>
 801b064:	06d1      	lsls	r1, r2, #27
 801b066:	bf44      	itt	mi
 801b068:	2320      	movmi	r3, #32
 801b06a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b06e:	0713      	lsls	r3, r2, #28
 801b070:	bf44      	itt	mi
 801b072:	232b      	movmi	r3, #43	; 0x2b
 801b074:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b078:	f89a 3000 	ldrb.w	r3, [sl]
 801b07c:	2b2a      	cmp	r3, #42	; 0x2a
 801b07e:	d015      	beq.n	801b0ac <_vfiprintf_r+0x13c>
 801b080:	9a07      	ldr	r2, [sp, #28]
 801b082:	4654      	mov	r4, sl
 801b084:	2000      	movs	r0, #0
 801b086:	f04f 0c0a 	mov.w	ip, #10
 801b08a:	4621      	mov	r1, r4
 801b08c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b090:	3b30      	subs	r3, #48	; 0x30
 801b092:	2b09      	cmp	r3, #9
 801b094:	d94e      	bls.n	801b134 <_vfiprintf_r+0x1c4>
 801b096:	b1b0      	cbz	r0, 801b0c6 <_vfiprintf_r+0x156>
 801b098:	9207      	str	r2, [sp, #28]
 801b09a:	e014      	b.n	801b0c6 <_vfiprintf_r+0x156>
 801b09c:	eba0 0308 	sub.w	r3, r0, r8
 801b0a0:	fa09 f303 	lsl.w	r3, r9, r3
 801b0a4:	4313      	orrs	r3, r2
 801b0a6:	9304      	str	r3, [sp, #16]
 801b0a8:	46a2      	mov	sl, r4
 801b0aa:	e7d2      	b.n	801b052 <_vfiprintf_r+0xe2>
 801b0ac:	9b03      	ldr	r3, [sp, #12]
 801b0ae:	1d19      	adds	r1, r3, #4
 801b0b0:	681b      	ldr	r3, [r3, #0]
 801b0b2:	9103      	str	r1, [sp, #12]
 801b0b4:	2b00      	cmp	r3, #0
 801b0b6:	bfbb      	ittet	lt
 801b0b8:	425b      	neglt	r3, r3
 801b0ba:	f042 0202 	orrlt.w	r2, r2, #2
 801b0be:	9307      	strge	r3, [sp, #28]
 801b0c0:	9307      	strlt	r3, [sp, #28]
 801b0c2:	bfb8      	it	lt
 801b0c4:	9204      	strlt	r2, [sp, #16]
 801b0c6:	7823      	ldrb	r3, [r4, #0]
 801b0c8:	2b2e      	cmp	r3, #46	; 0x2e
 801b0ca:	d10c      	bne.n	801b0e6 <_vfiprintf_r+0x176>
 801b0cc:	7863      	ldrb	r3, [r4, #1]
 801b0ce:	2b2a      	cmp	r3, #42	; 0x2a
 801b0d0:	d135      	bne.n	801b13e <_vfiprintf_r+0x1ce>
 801b0d2:	9b03      	ldr	r3, [sp, #12]
 801b0d4:	1d1a      	adds	r2, r3, #4
 801b0d6:	681b      	ldr	r3, [r3, #0]
 801b0d8:	9203      	str	r2, [sp, #12]
 801b0da:	2b00      	cmp	r3, #0
 801b0dc:	bfb8      	it	lt
 801b0de:	f04f 33ff 	movlt.w	r3, #4294967295
 801b0e2:	3402      	adds	r4, #2
 801b0e4:	9305      	str	r3, [sp, #20]
 801b0e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801b1cc <_vfiprintf_r+0x25c>
 801b0ea:	7821      	ldrb	r1, [r4, #0]
 801b0ec:	2203      	movs	r2, #3
 801b0ee:	4650      	mov	r0, sl
 801b0f0:	f7ed f90e 	bl	8008310 <memchr>
 801b0f4:	b140      	cbz	r0, 801b108 <_vfiprintf_r+0x198>
 801b0f6:	2340      	movs	r3, #64	; 0x40
 801b0f8:	eba0 000a 	sub.w	r0, r0, sl
 801b0fc:	fa03 f000 	lsl.w	r0, r3, r0
 801b100:	9b04      	ldr	r3, [sp, #16]
 801b102:	4303      	orrs	r3, r0
 801b104:	3401      	adds	r4, #1
 801b106:	9304      	str	r3, [sp, #16]
 801b108:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b10c:	482c      	ldr	r0, [pc, #176]	; (801b1c0 <_vfiprintf_r+0x250>)
 801b10e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b112:	2206      	movs	r2, #6
 801b114:	f7ed f8fc 	bl	8008310 <memchr>
 801b118:	2800      	cmp	r0, #0
 801b11a:	d03f      	beq.n	801b19c <_vfiprintf_r+0x22c>
 801b11c:	4b29      	ldr	r3, [pc, #164]	; (801b1c4 <_vfiprintf_r+0x254>)
 801b11e:	bb1b      	cbnz	r3, 801b168 <_vfiprintf_r+0x1f8>
 801b120:	9b03      	ldr	r3, [sp, #12]
 801b122:	3307      	adds	r3, #7
 801b124:	f023 0307 	bic.w	r3, r3, #7
 801b128:	3308      	adds	r3, #8
 801b12a:	9303      	str	r3, [sp, #12]
 801b12c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b12e:	443b      	add	r3, r7
 801b130:	9309      	str	r3, [sp, #36]	; 0x24
 801b132:	e767      	b.n	801b004 <_vfiprintf_r+0x94>
 801b134:	fb0c 3202 	mla	r2, ip, r2, r3
 801b138:	460c      	mov	r4, r1
 801b13a:	2001      	movs	r0, #1
 801b13c:	e7a5      	b.n	801b08a <_vfiprintf_r+0x11a>
 801b13e:	2300      	movs	r3, #0
 801b140:	3401      	adds	r4, #1
 801b142:	9305      	str	r3, [sp, #20]
 801b144:	4619      	mov	r1, r3
 801b146:	f04f 0c0a 	mov.w	ip, #10
 801b14a:	4620      	mov	r0, r4
 801b14c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b150:	3a30      	subs	r2, #48	; 0x30
 801b152:	2a09      	cmp	r2, #9
 801b154:	d903      	bls.n	801b15e <_vfiprintf_r+0x1ee>
 801b156:	2b00      	cmp	r3, #0
 801b158:	d0c5      	beq.n	801b0e6 <_vfiprintf_r+0x176>
 801b15a:	9105      	str	r1, [sp, #20]
 801b15c:	e7c3      	b.n	801b0e6 <_vfiprintf_r+0x176>
 801b15e:	fb0c 2101 	mla	r1, ip, r1, r2
 801b162:	4604      	mov	r4, r0
 801b164:	2301      	movs	r3, #1
 801b166:	e7f0      	b.n	801b14a <_vfiprintf_r+0x1da>
 801b168:	ab03      	add	r3, sp, #12
 801b16a:	9300      	str	r3, [sp, #0]
 801b16c:	462a      	mov	r2, r5
 801b16e:	4b16      	ldr	r3, [pc, #88]	; (801b1c8 <_vfiprintf_r+0x258>)
 801b170:	a904      	add	r1, sp, #16
 801b172:	4630      	mov	r0, r6
 801b174:	f7fc f93c 	bl	80173f0 <_printf_float>
 801b178:	4607      	mov	r7, r0
 801b17a:	1c78      	adds	r0, r7, #1
 801b17c:	d1d6      	bne.n	801b12c <_vfiprintf_r+0x1bc>
 801b17e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b180:	07d9      	lsls	r1, r3, #31
 801b182:	d405      	bmi.n	801b190 <_vfiprintf_r+0x220>
 801b184:	89ab      	ldrh	r3, [r5, #12]
 801b186:	059a      	lsls	r2, r3, #22
 801b188:	d402      	bmi.n	801b190 <_vfiprintf_r+0x220>
 801b18a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b18c:	f000 faa1 	bl	801b6d2 <__retarget_lock_release_recursive>
 801b190:	89ab      	ldrh	r3, [r5, #12]
 801b192:	065b      	lsls	r3, r3, #25
 801b194:	f53f af12 	bmi.w	801afbc <_vfiprintf_r+0x4c>
 801b198:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b19a:	e711      	b.n	801afc0 <_vfiprintf_r+0x50>
 801b19c:	ab03      	add	r3, sp, #12
 801b19e:	9300      	str	r3, [sp, #0]
 801b1a0:	462a      	mov	r2, r5
 801b1a2:	4b09      	ldr	r3, [pc, #36]	; (801b1c8 <_vfiprintf_r+0x258>)
 801b1a4:	a904      	add	r1, sp, #16
 801b1a6:	4630      	mov	r0, r6
 801b1a8:	f7fc fbae 	bl	8017908 <_printf_i>
 801b1ac:	e7e4      	b.n	801b178 <_vfiprintf_r+0x208>
 801b1ae:	bf00      	nop
 801b1b0:	0802866c 	.word	0x0802866c
 801b1b4:	0802868c 	.word	0x0802868c
 801b1b8:	0802864c 	.word	0x0802864c
 801b1bc:	080285fc 	.word	0x080285fc
 801b1c0:	08028606 	.word	0x08028606
 801b1c4:	080173f1 	.word	0x080173f1
 801b1c8:	0801af4b 	.word	0x0801af4b
 801b1cc:	08028602 	.word	0x08028602

0801b1d0 <__swbuf_r>:
 801b1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b1d2:	460e      	mov	r6, r1
 801b1d4:	4614      	mov	r4, r2
 801b1d6:	4605      	mov	r5, r0
 801b1d8:	b118      	cbz	r0, 801b1e2 <__swbuf_r+0x12>
 801b1da:	6983      	ldr	r3, [r0, #24]
 801b1dc:	b90b      	cbnz	r3, 801b1e2 <__swbuf_r+0x12>
 801b1de:	f000 f9d9 	bl	801b594 <__sinit>
 801b1e2:	4b21      	ldr	r3, [pc, #132]	; (801b268 <__swbuf_r+0x98>)
 801b1e4:	429c      	cmp	r4, r3
 801b1e6:	d12b      	bne.n	801b240 <__swbuf_r+0x70>
 801b1e8:	686c      	ldr	r4, [r5, #4]
 801b1ea:	69a3      	ldr	r3, [r4, #24]
 801b1ec:	60a3      	str	r3, [r4, #8]
 801b1ee:	89a3      	ldrh	r3, [r4, #12]
 801b1f0:	071a      	lsls	r2, r3, #28
 801b1f2:	d52f      	bpl.n	801b254 <__swbuf_r+0x84>
 801b1f4:	6923      	ldr	r3, [r4, #16]
 801b1f6:	b36b      	cbz	r3, 801b254 <__swbuf_r+0x84>
 801b1f8:	6923      	ldr	r3, [r4, #16]
 801b1fa:	6820      	ldr	r0, [r4, #0]
 801b1fc:	1ac0      	subs	r0, r0, r3
 801b1fe:	6963      	ldr	r3, [r4, #20]
 801b200:	b2f6      	uxtb	r6, r6
 801b202:	4283      	cmp	r3, r0
 801b204:	4637      	mov	r7, r6
 801b206:	dc04      	bgt.n	801b212 <__swbuf_r+0x42>
 801b208:	4621      	mov	r1, r4
 801b20a:	4628      	mov	r0, r5
 801b20c:	f000 f92e 	bl	801b46c <_fflush_r>
 801b210:	bb30      	cbnz	r0, 801b260 <__swbuf_r+0x90>
 801b212:	68a3      	ldr	r3, [r4, #8]
 801b214:	3b01      	subs	r3, #1
 801b216:	60a3      	str	r3, [r4, #8]
 801b218:	6823      	ldr	r3, [r4, #0]
 801b21a:	1c5a      	adds	r2, r3, #1
 801b21c:	6022      	str	r2, [r4, #0]
 801b21e:	701e      	strb	r6, [r3, #0]
 801b220:	6963      	ldr	r3, [r4, #20]
 801b222:	3001      	adds	r0, #1
 801b224:	4283      	cmp	r3, r0
 801b226:	d004      	beq.n	801b232 <__swbuf_r+0x62>
 801b228:	89a3      	ldrh	r3, [r4, #12]
 801b22a:	07db      	lsls	r3, r3, #31
 801b22c:	d506      	bpl.n	801b23c <__swbuf_r+0x6c>
 801b22e:	2e0a      	cmp	r6, #10
 801b230:	d104      	bne.n	801b23c <__swbuf_r+0x6c>
 801b232:	4621      	mov	r1, r4
 801b234:	4628      	mov	r0, r5
 801b236:	f000 f919 	bl	801b46c <_fflush_r>
 801b23a:	b988      	cbnz	r0, 801b260 <__swbuf_r+0x90>
 801b23c:	4638      	mov	r0, r7
 801b23e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b240:	4b0a      	ldr	r3, [pc, #40]	; (801b26c <__swbuf_r+0x9c>)
 801b242:	429c      	cmp	r4, r3
 801b244:	d101      	bne.n	801b24a <__swbuf_r+0x7a>
 801b246:	68ac      	ldr	r4, [r5, #8]
 801b248:	e7cf      	b.n	801b1ea <__swbuf_r+0x1a>
 801b24a:	4b09      	ldr	r3, [pc, #36]	; (801b270 <__swbuf_r+0xa0>)
 801b24c:	429c      	cmp	r4, r3
 801b24e:	bf08      	it	eq
 801b250:	68ec      	ldreq	r4, [r5, #12]
 801b252:	e7ca      	b.n	801b1ea <__swbuf_r+0x1a>
 801b254:	4621      	mov	r1, r4
 801b256:	4628      	mov	r0, r5
 801b258:	f000 f80c 	bl	801b274 <__swsetup_r>
 801b25c:	2800      	cmp	r0, #0
 801b25e:	d0cb      	beq.n	801b1f8 <__swbuf_r+0x28>
 801b260:	f04f 37ff 	mov.w	r7, #4294967295
 801b264:	e7ea      	b.n	801b23c <__swbuf_r+0x6c>
 801b266:	bf00      	nop
 801b268:	0802866c 	.word	0x0802866c
 801b26c:	0802868c 	.word	0x0802868c
 801b270:	0802864c 	.word	0x0802864c

0801b274 <__swsetup_r>:
 801b274:	4b32      	ldr	r3, [pc, #200]	; (801b340 <__swsetup_r+0xcc>)
 801b276:	b570      	push	{r4, r5, r6, lr}
 801b278:	681d      	ldr	r5, [r3, #0]
 801b27a:	4606      	mov	r6, r0
 801b27c:	460c      	mov	r4, r1
 801b27e:	b125      	cbz	r5, 801b28a <__swsetup_r+0x16>
 801b280:	69ab      	ldr	r3, [r5, #24]
 801b282:	b913      	cbnz	r3, 801b28a <__swsetup_r+0x16>
 801b284:	4628      	mov	r0, r5
 801b286:	f000 f985 	bl	801b594 <__sinit>
 801b28a:	4b2e      	ldr	r3, [pc, #184]	; (801b344 <__swsetup_r+0xd0>)
 801b28c:	429c      	cmp	r4, r3
 801b28e:	d10f      	bne.n	801b2b0 <__swsetup_r+0x3c>
 801b290:	686c      	ldr	r4, [r5, #4]
 801b292:	89a3      	ldrh	r3, [r4, #12]
 801b294:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b298:	0719      	lsls	r1, r3, #28
 801b29a:	d42c      	bmi.n	801b2f6 <__swsetup_r+0x82>
 801b29c:	06dd      	lsls	r5, r3, #27
 801b29e:	d411      	bmi.n	801b2c4 <__swsetup_r+0x50>
 801b2a0:	2309      	movs	r3, #9
 801b2a2:	6033      	str	r3, [r6, #0]
 801b2a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b2a8:	81a3      	strh	r3, [r4, #12]
 801b2aa:	f04f 30ff 	mov.w	r0, #4294967295
 801b2ae:	e03e      	b.n	801b32e <__swsetup_r+0xba>
 801b2b0:	4b25      	ldr	r3, [pc, #148]	; (801b348 <__swsetup_r+0xd4>)
 801b2b2:	429c      	cmp	r4, r3
 801b2b4:	d101      	bne.n	801b2ba <__swsetup_r+0x46>
 801b2b6:	68ac      	ldr	r4, [r5, #8]
 801b2b8:	e7eb      	b.n	801b292 <__swsetup_r+0x1e>
 801b2ba:	4b24      	ldr	r3, [pc, #144]	; (801b34c <__swsetup_r+0xd8>)
 801b2bc:	429c      	cmp	r4, r3
 801b2be:	bf08      	it	eq
 801b2c0:	68ec      	ldreq	r4, [r5, #12]
 801b2c2:	e7e6      	b.n	801b292 <__swsetup_r+0x1e>
 801b2c4:	0758      	lsls	r0, r3, #29
 801b2c6:	d512      	bpl.n	801b2ee <__swsetup_r+0x7a>
 801b2c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b2ca:	b141      	cbz	r1, 801b2de <__swsetup_r+0x6a>
 801b2cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b2d0:	4299      	cmp	r1, r3
 801b2d2:	d002      	beq.n	801b2da <__swsetup_r+0x66>
 801b2d4:	4630      	mov	r0, r6
 801b2d6:	f7ff fb77 	bl	801a9c8 <_free_r>
 801b2da:	2300      	movs	r3, #0
 801b2dc:	6363      	str	r3, [r4, #52]	; 0x34
 801b2de:	89a3      	ldrh	r3, [r4, #12]
 801b2e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b2e4:	81a3      	strh	r3, [r4, #12]
 801b2e6:	2300      	movs	r3, #0
 801b2e8:	6063      	str	r3, [r4, #4]
 801b2ea:	6923      	ldr	r3, [r4, #16]
 801b2ec:	6023      	str	r3, [r4, #0]
 801b2ee:	89a3      	ldrh	r3, [r4, #12]
 801b2f0:	f043 0308 	orr.w	r3, r3, #8
 801b2f4:	81a3      	strh	r3, [r4, #12]
 801b2f6:	6923      	ldr	r3, [r4, #16]
 801b2f8:	b94b      	cbnz	r3, 801b30e <__swsetup_r+0x9a>
 801b2fa:	89a3      	ldrh	r3, [r4, #12]
 801b2fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b304:	d003      	beq.n	801b30e <__swsetup_r+0x9a>
 801b306:	4621      	mov	r1, r4
 801b308:	4630      	mov	r0, r6
 801b30a:	f000 fa07 	bl	801b71c <__smakebuf_r>
 801b30e:	89a0      	ldrh	r0, [r4, #12]
 801b310:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b314:	f010 0301 	ands.w	r3, r0, #1
 801b318:	d00a      	beq.n	801b330 <__swsetup_r+0xbc>
 801b31a:	2300      	movs	r3, #0
 801b31c:	60a3      	str	r3, [r4, #8]
 801b31e:	6963      	ldr	r3, [r4, #20]
 801b320:	425b      	negs	r3, r3
 801b322:	61a3      	str	r3, [r4, #24]
 801b324:	6923      	ldr	r3, [r4, #16]
 801b326:	b943      	cbnz	r3, 801b33a <__swsetup_r+0xc6>
 801b328:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b32c:	d1ba      	bne.n	801b2a4 <__swsetup_r+0x30>
 801b32e:	bd70      	pop	{r4, r5, r6, pc}
 801b330:	0781      	lsls	r1, r0, #30
 801b332:	bf58      	it	pl
 801b334:	6963      	ldrpl	r3, [r4, #20]
 801b336:	60a3      	str	r3, [r4, #8]
 801b338:	e7f4      	b.n	801b324 <__swsetup_r+0xb0>
 801b33a:	2000      	movs	r0, #0
 801b33c:	e7f7      	b.n	801b32e <__swsetup_r+0xba>
 801b33e:	bf00      	nop
 801b340:	20000028 	.word	0x20000028
 801b344:	0802866c 	.word	0x0802866c
 801b348:	0802868c 	.word	0x0802868c
 801b34c:	0802864c 	.word	0x0802864c

0801b350 <abort>:
 801b350:	b508      	push	{r3, lr}
 801b352:	2006      	movs	r0, #6
 801b354:	f000 fa52 	bl	801b7fc <raise>
 801b358:	2001      	movs	r0, #1
 801b35a:	f7f3 ff79 	bl	800f250 <_exit>
	...

0801b360 <__sflush_r>:
 801b360:	898a      	ldrh	r2, [r1, #12]
 801b362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b366:	4605      	mov	r5, r0
 801b368:	0710      	lsls	r0, r2, #28
 801b36a:	460c      	mov	r4, r1
 801b36c:	d458      	bmi.n	801b420 <__sflush_r+0xc0>
 801b36e:	684b      	ldr	r3, [r1, #4]
 801b370:	2b00      	cmp	r3, #0
 801b372:	dc05      	bgt.n	801b380 <__sflush_r+0x20>
 801b374:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b376:	2b00      	cmp	r3, #0
 801b378:	dc02      	bgt.n	801b380 <__sflush_r+0x20>
 801b37a:	2000      	movs	r0, #0
 801b37c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b380:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b382:	2e00      	cmp	r6, #0
 801b384:	d0f9      	beq.n	801b37a <__sflush_r+0x1a>
 801b386:	2300      	movs	r3, #0
 801b388:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b38c:	682f      	ldr	r7, [r5, #0]
 801b38e:	602b      	str	r3, [r5, #0]
 801b390:	d032      	beq.n	801b3f8 <__sflush_r+0x98>
 801b392:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b394:	89a3      	ldrh	r3, [r4, #12]
 801b396:	075a      	lsls	r2, r3, #29
 801b398:	d505      	bpl.n	801b3a6 <__sflush_r+0x46>
 801b39a:	6863      	ldr	r3, [r4, #4]
 801b39c:	1ac0      	subs	r0, r0, r3
 801b39e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b3a0:	b10b      	cbz	r3, 801b3a6 <__sflush_r+0x46>
 801b3a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b3a4:	1ac0      	subs	r0, r0, r3
 801b3a6:	2300      	movs	r3, #0
 801b3a8:	4602      	mov	r2, r0
 801b3aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b3ac:	6a21      	ldr	r1, [r4, #32]
 801b3ae:	4628      	mov	r0, r5
 801b3b0:	47b0      	blx	r6
 801b3b2:	1c43      	adds	r3, r0, #1
 801b3b4:	89a3      	ldrh	r3, [r4, #12]
 801b3b6:	d106      	bne.n	801b3c6 <__sflush_r+0x66>
 801b3b8:	6829      	ldr	r1, [r5, #0]
 801b3ba:	291d      	cmp	r1, #29
 801b3bc:	d82c      	bhi.n	801b418 <__sflush_r+0xb8>
 801b3be:	4a2a      	ldr	r2, [pc, #168]	; (801b468 <__sflush_r+0x108>)
 801b3c0:	40ca      	lsrs	r2, r1
 801b3c2:	07d6      	lsls	r6, r2, #31
 801b3c4:	d528      	bpl.n	801b418 <__sflush_r+0xb8>
 801b3c6:	2200      	movs	r2, #0
 801b3c8:	6062      	str	r2, [r4, #4]
 801b3ca:	04d9      	lsls	r1, r3, #19
 801b3cc:	6922      	ldr	r2, [r4, #16]
 801b3ce:	6022      	str	r2, [r4, #0]
 801b3d0:	d504      	bpl.n	801b3dc <__sflush_r+0x7c>
 801b3d2:	1c42      	adds	r2, r0, #1
 801b3d4:	d101      	bne.n	801b3da <__sflush_r+0x7a>
 801b3d6:	682b      	ldr	r3, [r5, #0]
 801b3d8:	b903      	cbnz	r3, 801b3dc <__sflush_r+0x7c>
 801b3da:	6560      	str	r0, [r4, #84]	; 0x54
 801b3dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b3de:	602f      	str	r7, [r5, #0]
 801b3e0:	2900      	cmp	r1, #0
 801b3e2:	d0ca      	beq.n	801b37a <__sflush_r+0x1a>
 801b3e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b3e8:	4299      	cmp	r1, r3
 801b3ea:	d002      	beq.n	801b3f2 <__sflush_r+0x92>
 801b3ec:	4628      	mov	r0, r5
 801b3ee:	f7ff faeb 	bl	801a9c8 <_free_r>
 801b3f2:	2000      	movs	r0, #0
 801b3f4:	6360      	str	r0, [r4, #52]	; 0x34
 801b3f6:	e7c1      	b.n	801b37c <__sflush_r+0x1c>
 801b3f8:	6a21      	ldr	r1, [r4, #32]
 801b3fa:	2301      	movs	r3, #1
 801b3fc:	4628      	mov	r0, r5
 801b3fe:	47b0      	blx	r6
 801b400:	1c41      	adds	r1, r0, #1
 801b402:	d1c7      	bne.n	801b394 <__sflush_r+0x34>
 801b404:	682b      	ldr	r3, [r5, #0]
 801b406:	2b00      	cmp	r3, #0
 801b408:	d0c4      	beq.n	801b394 <__sflush_r+0x34>
 801b40a:	2b1d      	cmp	r3, #29
 801b40c:	d001      	beq.n	801b412 <__sflush_r+0xb2>
 801b40e:	2b16      	cmp	r3, #22
 801b410:	d101      	bne.n	801b416 <__sflush_r+0xb6>
 801b412:	602f      	str	r7, [r5, #0]
 801b414:	e7b1      	b.n	801b37a <__sflush_r+0x1a>
 801b416:	89a3      	ldrh	r3, [r4, #12]
 801b418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b41c:	81a3      	strh	r3, [r4, #12]
 801b41e:	e7ad      	b.n	801b37c <__sflush_r+0x1c>
 801b420:	690f      	ldr	r7, [r1, #16]
 801b422:	2f00      	cmp	r7, #0
 801b424:	d0a9      	beq.n	801b37a <__sflush_r+0x1a>
 801b426:	0793      	lsls	r3, r2, #30
 801b428:	680e      	ldr	r6, [r1, #0]
 801b42a:	bf08      	it	eq
 801b42c:	694b      	ldreq	r3, [r1, #20]
 801b42e:	600f      	str	r7, [r1, #0]
 801b430:	bf18      	it	ne
 801b432:	2300      	movne	r3, #0
 801b434:	eba6 0807 	sub.w	r8, r6, r7
 801b438:	608b      	str	r3, [r1, #8]
 801b43a:	f1b8 0f00 	cmp.w	r8, #0
 801b43e:	dd9c      	ble.n	801b37a <__sflush_r+0x1a>
 801b440:	6a21      	ldr	r1, [r4, #32]
 801b442:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b444:	4643      	mov	r3, r8
 801b446:	463a      	mov	r2, r7
 801b448:	4628      	mov	r0, r5
 801b44a:	47b0      	blx	r6
 801b44c:	2800      	cmp	r0, #0
 801b44e:	dc06      	bgt.n	801b45e <__sflush_r+0xfe>
 801b450:	89a3      	ldrh	r3, [r4, #12]
 801b452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b456:	81a3      	strh	r3, [r4, #12]
 801b458:	f04f 30ff 	mov.w	r0, #4294967295
 801b45c:	e78e      	b.n	801b37c <__sflush_r+0x1c>
 801b45e:	4407      	add	r7, r0
 801b460:	eba8 0800 	sub.w	r8, r8, r0
 801b464:	e7e9      	b.n	801b43a <__sflush_r+0xda>
 801b466:	bf00      	nop
 801b468:	20400001 	.word	0x20400001

0801b46c <_fflush_r>:
 801b46c:	b538      	push	{r3, r4, r5, lr}
 801b46e:	690b      	ldr	r3, [r1, #16]
 801b470:	4605      	mov	r5, r0
 801b472:	460c      	mov	r4, r1
 801b474:	b913      	cbnz	r3, 801b47c <_fflush_r+0x10>
 801b476:	2500      	movs	r5, #0
 801b478:	4628      	mov	r0, r5
 801b47a:	bd38      	pop	{r3, r4, r5, pc}
 801b47c:	b118      	cbz	r0, 801b486 <_fflush_r+0x1a>
 801b47e:	6983      	ldr	r3, [r0, #24]
 801b480:	b90b      	cbnz	r3, 801b486 <_fflush_r+0x1a>
 801b482:	f000 f887 	bl	801b594 <__sinit>
 801b486:	4b14      	ldr	r3, [pc, #80]	; (801b4d8 <_fflush_r+0x6c>)
 801b488:	429c      	cmp	r4, r3
 801b48a:	d11b      	bne.n	801b4c4 <_fflush_r+0x58>
 801b48c:	686c      	ldr	r4, [r5, #4]
 801b48e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b492:	2b00      	cmp	r3, #0
 801b494:	d0ef      	beq.n	801b476 <_fflush_r+0xa>
 801b496:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b498:	07d0      	lsls	r0, r2, #31
 801b49a:	d404      	bmi.n	801b4a6 <_fflush_r+0x3a>
 801b49c:	0599      	lsls	r1, r3, #22
 801b49e:	d402      	bmi.n	801b4a6 <_fflush_r+0x3a>
 801b4a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b4a2:	f000 f915 	bl	801b6d0 <__retarget_lock_acquire_recursive>
 801b4a6:	4628      	mov	r0, r5
 801b4a8:	4621      	mov	r1, r4
 801b4aa:	f7ff ff59 	bl	801b360 <__sflush_r>
 801b4ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b4b0:	07da      	lsls	r2, r3, #31
 801b4b2:	4605      	mov	r5, r0
 801b4b4:	d4e0      	bmi.n	801b478 <_fflush_r+0xc>
 801b4b6:	89a3      	ldrh	r3, [r4, #12]
 801b4b8:	059b      	lsls	r3, r3, #22
 801b4ba:	d4dd      	bmi.n	801b478 <_fflush_r+0xc>
 801b4bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b4be:	f000 f908 	bl	801b6d2 <__retarget_lock_release_recursive>
 801b4c2:	e7d9      	b.n	801b478 <_fflush_r+0xc>
 801b4c4:	4b05      	ldr	r3, [pc, #20]	; (801b4dc <_fflush_r+0x70>)
 801b4c6:	429c      	cmp	r4, r3
 801b4c8:	d101      	bne.n	801b4ce <_fflush_r+0x62>
 801b4ca:	68ac      	ldr	r4, [r5, #8]
 801b4cc:	e7df      	b.n	801b48e <_fflush_r+0x22>
 801b4ce:	4b04      	ldr	r3, [pc, #16]	; (801b4e0 <_fflush_r+0x74>)
 801b4d0:	429c      	cmp	r4, r3
 801b4d2:	bf08      	it	eq
 801b4d4:	68ec      	ldreq	r4, [r5, #12]
 801b4d6:	e7da      	b.n	801b48e <_fflush_r+0x22>
 801b4d8:	0802866c 	.word	0x0802866c
 801b4dc:	0802868c 	.word	0x0802868c
 801b4e0:	0802864c 	.word	0x0802864c

0801b4e4 <std>:
 801b4e4:	2300      	movs	r3, #0
 801b4e6:	b510      	push	{r4, lr}
 801b4e8:	4604      	mov	r4, r0
 801b4ea:	e9c0 3300 	strd	r3, r3, [r0]
 801b4ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b4f2:	6083      	str	r3, [r0, #8]
 801b4f4:	8181      	strh	r1, [r0, #12]
 801b4f6:	6643      	str	r3, [r0, #100]	; 0x64
 801b4f8:	81c2      	strh	r2, [r0, #14]
 801b4fa:	6183      	str	r3, [r0, #24]
 801b4fc:	4619      	mov	r1, r3
 801b4fe:	2208      	movs	r2, #8
 801b500:	305c      	adds	r0, #92	; 0x5c
 801b502:	f7fb fedd 	bl	80172c0 <memset>
 801b506:	4b05      	ldr	r3, [pc, #20]	; (801b51c <std+0x38>)
 801b508:	6263      	str	r3, [r4, #36]	; 0x24
 801b50a:	4b05      	ldr	r3, [pc, #20]	; (801b520 <std+0x3c>)
 801b50c:	62a3      	str	r3, [r4, #40]	; 0x28
 801b50e:	4b05      	ldr	r3, [pc, #20]	; (801b524 <std+0x40>)
 801b510:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b512:	4b05      	ldr	r3, [pc, #20]	; (801b528 <std+0x44>)
 801b514:	6224      	str	r4, [r4, #32]
 801b516:	6323      	str	r3, [r4, #48]	; 0x30
 801b518:	bd10      	pop	{r4, pc}
 801b51a:	bf00      	nop
 801b51c:	0801b835 	.word	0x0801b835
 801b520:	0801b857 	.word	0x0801b857
 801b524:	0801b88f 	.word	0x0801b88f
 801b528:	0801b8b3 	.word	0x0801b8b3

0801b52c <_cleanup_r>:
 801b52c:	4901      	ldr	r1, [pc, #4]	; (801b534 <_cleanup_r+0x8>)
 801b52e:	f000 b8af 	b.w	801b690 <_fwalk_reent>
 801b532:	bf00      	nop
 801b534:	0801b46d 	.word	0x0801b46d

0801b538 <__sfmoreglue>:
 801b538:	b570      	push	{r4, r5, r6, lr}
 801b53a:	1e4a      	subs	r2, r1, #1
 801b53c:	2568      	movs	r5, #104	; 0x68
 801b53e:	4355      	muls	r5, r2
 801b540:	460e      	mov	r6, r1
 801b542:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801b546:	f7ff fa8f 	bl	801aa68 <_malloc_r>
 801b54a:	4604      	mov	r4, r0
 801b54c:	b140      	cbz	r0, 801b560 <__sfmoreglue+0x28>
 801b54e:	2100      	movs	r1, #0
 801b550:	e9c0 1600 	strd	r1, r6, [r0]
 801b554:	300c      	adds	r0, #12
 801b556:	60a0      	str	r0, [r4, #8]
 801b558:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801b55c:	f7fb feb0 	bl	80172c0 <memset>
 801b560:	4620      	mov	r0, r4
 801b562:	bd70      	pop	{r4, r5, r6, pc}

0801b564 <__sfp_lock_acquire>:
 801b564:	4801      	ldr	r0, [pc, #4]	; (801b56c <__sfp_lock_acquire+0x8>)
 801b566:	f000 b8b3 	b.w	801b6d0 <__retarget_lock_acquire_recursive>
 801b56a:	bf00      	nop
 801b56c:	2006c58c 	.word	0x2006c58c

0801b570 <__sfp_lock_release>:
 801b570:	4801      	ldr	r0, [pc, #4]	; (801b578 <__sfp_lock_release+0x8>)
 801b572:	f000 b8ae 	b.w	801b6d2 <__retarget_lock_release_recursive>
 801b576:	bf00      	nop
 801b578:	2006c58c 	.word	0x2006c58c

0801b57c <__sinit_lock_acquire>:
 801b57c:	4801      	ldr	r0, [pc, #4]	; (801b584 <__sinit_lock_acquire+0x8>)
 801b57e:	f000 b8a7 	b.w	801b6d0 <__retarget_lock_acquire_recursive>
 801b582:	bf00      	nop
 801b584:	2006c587 	.word	0x2006c587

0801b588 <__sinit_lock_release>:
 801b588:	4801      	ldr	r0, [pc, #4]	; (801b590 <__sinit_lock_release+0x8>)
 801b58a:	f000 b8a2 	b.w	801b6d2 <__retarget_lock_release_recursive>
 801b58e:	bf00      	nop
 801b590:	2006c587 	.word	0x2006c587

0801b594 <__sinit>:
 801b594:	b510      	push	{r4, lr}
 801b596:	4604      	mov	r4, r0
 801b598:	f7ff fff0 	bl	801b57c <__sinit_lock_acquire>
 801b59c:	69a3      	ldr	r3, [r4, #24]
 801b59e:	b11b      	cbz	r3, 801b5a8 <__sinit+0x14>
 801b5a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b5a4:	f7ff bff0 	b.w	801b588 <__sinit_lock_release>
 801b5a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801b5ac:	6523      	str	r3, [r4, #80]	; 0x50
 801b5ae:	4b13      	ldr	r3, [pc, #76]	; (801b5fc <__sinit+0x68>)
 801b5b0:	4a13      	ldr	r2, [pc, #76]	; (801b600 <__sinit+0x6c>)
 801b5b2:	681b      	ldr	r3, [r3, #0]
 801b5b4:	62a2      	str	r2, [r4, #40]	; 0x28
 801b5b6:	42a3      	cmp	r3, r4
 801b5b8:	bf04      	itt	eq
 801b5ba:	2301      	moveq	r3, #1
 801b5bc:	61a3      	streq	r3, [r4, #24]
 801b5be:	4620      	mov	r0, r4
 801b5c0:	f000 f820 	bl	801b604 <__sfp>
 801b5c4:	6060      	str	r0, [r4, #4]
 801b5c6:	4620      	mov	r0, r4
 801b5c8:	f000 f81c 	bl	801b604 <__sfp>
 801b5cc:	60a0      	str	r0, [r4, #8]
 801b5ce:	4620      	mov	r0, r4
 801b5d0:	f000 f818 	bl	801b604 <__sfp>
 801b5d4:	2200      	movs	r2, #0
 801b5d6:	60e0      	str	r0, [r4, #12]
 801b5d8:	2104      	movs	r1, #4
 801b5da:	6860      	ldr	r0, [r4, #4]
 801b5dc:	f7ff ff82 	bl	801b4e4 <std>
 801b5e0:	68a0      	ldr	r0, [r4, #8]
 801b5e2:	2201      	movs	r2, #1
 801b5e4:	2109      	movs	r1, #9
 801b5e6:	f7ff ff7d 	bl	801b4e4 <std>
 801b5ea:	68e0      	ldr	r0, [r4, #12]
 801b5ec:	2202      	movs	r2, #2
 801b5ee:	2112      	movs	r1, #18
 801b5f0:	f7ff ff78 	bl	801b4e4 <std>
 801b5f4:	2301      	movs	r3, #1
 801b5f6:	61a3      	str	r3, [r4, #24]
 801b5f8:	e7d2      	b.n	801b5a0 <__sinit+0xc>
 801b5fa:	bf00      	nop
 801b5fc:	080281f8 	.word	0x080281f8
 801b600:	0801b52d 	.word	0x0801b52d

0801b604 <__sfp>:
 801b604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b606:	4607      	mov	r7, r0
 801b608:	f7ff ffac 	bl	801b564 <__sfp_lock_acquire>
 801b60c:	4b1e      	ldr	r3, [pc, #120]	; (801b688 <__sfp+0x84>)
 801b60e:	681e      	ldr	r6, [r3, #0]
 801b610:	69b3      	ldr	r3, [r6, #24]
 801b612:	b913      	cbnz	r3, 801b61a <__sfp+0x16>
 801b614:	4630      	mov	r0, r6
 801b616:	f7ff ffbd 	bl	801b594 <__sinit>
 801b61a:	3648      	adds	r6, #72	; 0x48
 801b61c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801b620:	3b01      	subs	r3, #1
 801b622:	d503      	bpl.n	801b62c <__sfp+0x28>
 801b624:	6833      	ldr	r3, [r6, #0]
 801b626:	b30b      	cbz	r3, 801b66c <__sfp+0x68>
 801b628:	6836      	ldr	r6, [r6, #0]
 801b62a:	e7f7      	b.n	801b61c <__sfp+0x18>
 801b62c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801b630:	b9d5      	cbnz	r5, 801b668 <__sfp+0x64>
 801b632:	4b16      	ldr	r3, [pc, #88]	; (801b68c <__sfp+0x88>)
 801b634:	60e3      	str	r3, [r4, #12]
 801b636:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b63a:	6665      	str	r5, [r4, #100]	; 0x64
 801b63c:	f000 f847 	bl	801b6ce <__retarget_lock_init_recursive>
 801b640:	f7ff ff96 	bl	801b570 <__sfp_lock_release>
 801b644:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801b648:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801b64c:	6025      	str	r5, [r4, #0]
 801b64e:	61a5      	str	r5, [r4, #24]
 801b650:	2208      	movs	r2, #8
 801b652:	4629      	mov	r1, r5
 801b654:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801b658:	f7fb fe32 	bl	80172c0 <memset>
 801b65c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801b660:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801b664:	4620      	mov	r0, r4
 801b666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b668:	3468      	adds	r4, #104	; 0x68
 801b66a:	e7d9      	b.n	801b620 <__sfp+0x1c>
 801b66c:	2104      	movs	r1, #4
 801b66e:	4638      	mov	r0, r7
 801b670:	f7ff ff62 	bl	801b538 <__sfmoreglue>
 801b674:	4604      	mov	r4, r0
 801b676:	6030      	str	r0, [r6, #0]
 801b678:	2800      	cmp	r0, #0
 801b67a:	d1d5      	bne.n	801b628 <__sfp+0x24>
 801b67c:	f7ff ff78 	bl	801b570 <__sfp_lock_release>
 801b680:	230c      	movs	r3, #12
 801b682:	603b      	str	r3, [r7, #0]
 801b684:	e7ee      	b.n	801b664 <__sfp+0x60>
 801b686:	bf00      	nop
 801b688:	080281f8 	.word	0x080281f8
 801b68c:	ffff0001 	.word	0xffff0001

0801b690 <_fwalk_reent>:
 801b690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b694:	4606      	mov	r6, r0
 801b696:	4688      	mov	r8, r1
 801b698:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801b69c:	2700      	movs	r7, #0
 801b69e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b6a2:	f1b9 0901 	subs.w	r9, r9, #1
 801b6a6:	d505      	bpl.n	801b6b4 <_fwalk_reent+0x24>
 801b6a8:	6824      	ldr	r4, [r4, #0]
 801b6aa:	2c00      	cmp	r4, #0
 801b6ac:	d1f7      	bne.n	801b69e <_fwalk_reent+0xe>
 801b6ae:	4638      	mov	r0, r7
 801b6b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b6b4:	89ab      	ldrh	r3, [r5, #12]
 801b6b6:	2b01      	cmp	r3, #1
 801b6b8:	d907      	bls.n	801b6ca <_fwalk_reent+0x3a>
 801b6ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b6be:	3301      	adds	r3, #1
 801b6c0:	d003      	beq.n	801b6ca <_fwalk_reent+0x3a>
 801b6c2:	4629      	mov	r1, r5
 801b6c4:	4630      	mov	r0, r6
 801b6c6:	47c0      	blx	r8
 801b6c8:	4307      	orrs	r7, r0
 801b6ca:	3568      	adds	r5, #104	; 0x68
 801b6cc:	e7e9      	b.n	801b6a2 <_fwalk_reent+0x12>

0801b6ce <__retarget_lock_init_recursive>:
 801b6ce:	4770      	bx	lr

0801b6d0 <__retarget_lock_acquire_recursive>:
 801b6d0:	4770      	bx	lr

0801b6d2 <__retarget_lock_release_recursive>:
 801b6d2:	4770      	bx	lr

0801b6d4 <__swhatbuf_r>:
 801b6d4:	b570      	push	{r4, r5, r6, lr}
 801b6d6:	460e      	mov	r6, r1
 801b6d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b6dc:	2900      	cmp	r1, #0
 801b6de:	b096      	sub	sp, #88	; 0x58
 801b6e0:	4614      	mov	r4, r2
 801b6e2:	461d      	mov	r5, r3
 801b6e4:	da07      	bge.n	801b6f6 <__swhatbuf_r+0x22>
 801b6e6:	2300      	movs	r3, #0
 801b6e8:	602b      	str	r3, [r5, #0]
 801b6ea:	89b3      	ldrh	r3, [r6, #12]
 801b6ec:	061a      	lsls	r2, r3, #24
 801b6ee:	d410      	bmi.n	801b712 <__swhatbuf_r+0x3e>
 801b6f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b6f4:	e00e      	b.n	801b714 <__swhatbuf_r+0x40>
 801b6f6:	466a      	mov	r2, sp
 801b6f8:	f000 f902 	bl	801b900 <_fstat_r>
 801b6fc:	2800      	cmp	r0, #0
 801b6fe:	dbf2      	blt.n	801b6e6 <__swhatbuf_r+0x12>
 801b700:	9a01      	ldr	r2, [sp, #4]
 801b702:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801b706:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801b70a:	425a      	negs	r2, r3
 801b70c:	415a      	adcs	r2, r3
 801b70e:	602a      	str	r2, [r5, #0]
 801b710:	e7ee      	b.n	801b6f0 <__swhatbuf_r+0x1c>
 801b712:	2340      	movs	r3, #64	; 0x40
 801b714:	2000      	movs	r0, #0
 801b716:	6023      	str	r3, [r4, #0]
 801b718:	b016      	add	sp, #88	; 0x58
 801b71a:	bd70      	pop	{r4, r5, r6, pc}

0801b71c <__smakebuf_r>:
 801b71c:	898b      	ldrh	r3, [r1, #12]
 801b71e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b720:	079d      	lsls	r5, r3, #30
 801b722:	4606      	mov	r6, r0
 801b724:	460c      	mov	r4, r1
 801b726:	d507      	bpl.n	801b738 <__smakebuf_r+0x1c>
 801b728:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b72c:	6023      	str	r3, [r4, #0]
 801b72e:	6123      	str	r3, [r4, #16]
 801b730:	2301      	movs	r3, #1
 801b732:	6163      	str	r3, [r4, #20]
 801b734:	b002      	add	sp, #8
 801b736:	bd70      	pop	{r4, r5, r6, pc}
 801b738:	ab01      	add	r3, sp, #4
 801b73a:	466a      	mov	r2, sp
 801b73c:	f7ff ffca 	bl	801b6d4 <__swhatbuf_r>
 801b740:	9900      	ldr	r1, [sp, #0]
 801b742:	4605      	mov	r5, r0
 801b744:	4630      	mov	r0, r6
 801b746:	f7ff f98f 	bl	801aa68 <_malloc_r>
 801b74a:	b948      	cbnz	r0, 801b760 <__smakebuf_r+0x44>
 801b74c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b750:	059a      	lsls	r2, r3, #22
 801b752:	d4ef      	bmi.n	801b734 <__smakebuf_r+0x18>
 801b754:	f023 0303 	bic.w	r3, r3, #3
 801b758:	f043 0302 	orr.w	r3, r3, #2
 801b75c:	81a3      	strh	r3, [r4, #12]
 801b75e:	e7e3      	b.n	801b728 <__smakebuf_r+0xc>
 801b760:	4b0d      	ldr	r3, [pc, #52]	; (801b798 <__smakebuf_r+0x7c>)
 801b762:	62b3      	str	r3, [r6, #40]	; 0x28
 801b764:	89a3      	ldrh	r3, [r4, #12]
 801b766:	6020      	str	r0, [r4, #0]
 801b768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b76c:	81a3      	strh	r3, [r4, #12]
 801b76e:	9b00      	ldr	r3, [sp, #0]
 801b770:	6163      	str	r3, [r4, #20]
 801b772:	9b01      	ldr	r3, [sp, #4]
 801b774:	6120      	str	r0, [r4, #16]
 801b776:	b15b      	cbz	r3, 801b790 <__smakebuf_r+0x74>
 801b778:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b77c:	4630      	mov	r0, r6
 801b77e:	f000 f8d1 	bl	801b924 <_isatty_r>
 801b782:	b128      	cbz	r0, 801b790 <__smakebuf_r+0x74>
 801b784:	89a3      	ldrh	r3, [r4, #12]
 801b786:	f023 0303 	bic.w	r3, r3, #3
 801b78a:	f043 0301 	orr.w	r3, r3, #1
 801b78e:	81a3      	strh	r3, [r4, #12]
 801b790:	89a0      	ldrh	r0, [r4, #12]
 801b792:	4305      	orrs	r5, r0
 801b794:	81a5      	strh	r5, [r4, #12]
 801b796:	e7cd      	b.n	801b734 <__smakebuf_r+0x18>
 801b798:	0801b52d 	.word	0x0801b52d

0801b79c <_malloc_usable_size_r>:
 801b79c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b7a0:	1f18      	subs	r0, r3, #4
 801b7a2:	2b00      	cmp	r3, #0
 801b7a4:	bfbc      	itt	lt
 801b7a6:	580b      	ldrlt	r3, [r1, r0]
 801b7a8:	18c0      	addlt	r0, r0, r3
 801b7aa:	4770      	bx	lr

0801b7ac <_raise_r>:
 801b7ac:	291f      	cmp	r1, #31
 801b7ae:	b538      	push	{r3, r4, r5, lr}
 801b7b0:	4604      	mov	r4, r0
 801b7b2:	460d      	mov	r5, r1
 801b7b4:	d904      	bls.n	801b7c0 <_raise_r+0x14>
 801b7b6:	2316      	movs	r3, #22
 801b7b8:	6003      	str	r3, [r0, #0]
 801b7ba:	f04f 30ff 	mov.w	r0, #4294967295
 801b7be:	bd38      	pop	{r3, r4, r5, pc}
 801b7c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801b7c2:	b112      	cbz	r2, 801b7ca <_raise_r+0x1e>
 801b7c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b7c8:	b94b      	cbnz	r3, 801b7de <_raise_r+0x32>
 801b7ca:	4620      	mov	r0, r4
 801b7cc:	f000 f830 	bl	801b830 <_getpid_r>
 801b7d0:	462a      	mov	r2, r5
 801b7d2:	4601      	mov	r1, r0
 801b7d4:	4620      	mov	r0, r4
 801b7d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b7da:	f000 b817 	b.w	801b80c <_kill_r>
 801b7de:	2b01      	cmp	r3, #1
 801b7e0:	d00a      	beq.n	801b7f8 <_raise_r+0x4c>
 801b7e2:	1c59      	adds	r1, r3, #1
 801b7e4:	d103      	bne.n	801b7ee <_raise_r+0x42>
 801b7e6:	2316      	movs	r3, #22
 801b7e8:	6003      	str	r3, [r0, #0]
 801b7ea:	2001      	movs	r0, #1
 801b7ec:	e7e7      	b.n	801b7be <_raise_r+0x12>
 801b7ee:	2400      	movs	r4, #0
 801b7f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b7f4:	4628      	mov	r0, r5
 801b7f6:	4798      	blx	r3
 801b7f8:	2000      	movs	r0, #0
 801b7fa:	e7e0      	b.n	801b7be <_raise_r+0x12>

0801b7fc <raise>:
 801b7fc:	4b02      	ldr	r3, [pc, #8]	; (801b808 <raise+0xc>)
 801b7fe:	4601      	mov	r1, r0
 801b800:	6818      	ldr	r0, [r3, #0]
 801b802:	f7ff bfd3 	b.w	801b7ac <_raise_r>
 801b806:	bf00      	nop
 801b808:	20000028 	.word	0x20000028

0801b80c <_kill_r>:
 801b80c:	b538      	push	{r3, r4, r5, lr}
 801b80e:	4d07      	ldr	r5, [pc, #28]	; (801b82c <_kill_r+0x20>)
 801b810:	2300      	movs	r3, #0
 801b812:	4604      	mov	r4, r0
 801b814:	4608      	mov	r0, r1
 801b816:	4611      	mov	r1, r2
 801b818:	602b      	str	r3, [r5, #0]
 801b81a:	f7f3 fd09 	bl	800f230 <_kill>
 801b81e:	1c43      	adds	r3, r0, #1
 801b820:	d102      	bne.n	801b828 <_kill_r+0x1c>
 801b822:	682b      	ldr	r3, [r5, #0]
 801b824:	b103      	cbz	r3, 801b828 <_kill_r+0x1c>
 801b826:	6023      	str	r3, [r4, #0]
 801b828:	bd38      	pop	{r3, r4, r5, pc}
 801b82a:	bf00      	nop
 801b82c:	2006c580 	.word	0x2006c580

0801b830 <_getpid_r>:
 801b830:	f7f3 bcf6 	b.w	800f220 <_getpid>

0801b834 <__sread>:
 801b834:	b510      	push	{r4, lr}
 801b836:	460c      	mov	r4, r1
 801b838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b83c:	f000 f894 	bl	801b968 <_read_r>
 801b840:	2800      	cmp	r0, #0
 801b842:	bfab      	itete	ge
 801b844:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b846:	89a3      	ldrhlt	r3, [r4, #12]
 801b848:	181b      	addge	r3, r3, r0
 801b84a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b84e:	bfac      	ite	ge
 801b850:	6563      	strge	r3, [r4, #84]	; 0x54
 801b852:	81a3      	strhlt	r3, [r4, #12]
 801b854:	bd10      	pop	{r4, pc}

0801b856 <__swrite>:
 801b856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b85a:	461f      	mov	r7, r3
 801b85c:	898b      	ldrh	r3, [r1, #12]
 801b85e:	05db      	lsls	r3, r3, #23
 801b860:	4605      	mov	r5, r0
 801b862:	460c      	mov	r4, r1
 801b864:	4616      	mov	r6, r2
 801b866:	d505      	bpl.n	801b874 <__swrite+0x1e>
 801b868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b86c:	2302      	movs	r3, #2
 801b86e:	2200      	movs	r2, #0
 801b870:	f000 f868 	bl	801b944 <_lseek_r>
 801b874:	89a3      	ldrh	r3, [r4, #12]
 801b876:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b87a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b87e:	81a3      	strh	r3, [r4, #12]
 801b880:	4632      	mov	r2, r6
 801b882:	463b      	mov	r3, r7
 801b884:	4628      	mov	r0, r5
 801b886:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b88a:	f000 b817 	b.w	801b8bc <_write_r>

0801b88e <__sseek>:
 801b88e:	b510      	push	{r4, lr}
 801b890:	460c      	mov	r4, r1
 801b892:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b896:	f000 f855 	bl	801b944 <_lseek_r>
 801b89a:	1c43      	adds	r3, r0, #1
 801b89c:	89a3      	ldrh	r3, [r4, #12]
 801b89e:	bf15      	itete	ne
 801b8a0:	6560      	strne	r0, [r4, #84]	; 0x54
 801b8a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b8a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b8aa:	81a3      	strheq	r3, [r4, #12]
 801b8ac:	bf18      	it	ne
 801b8ae:	81a3      	strhne	r3, [r4, #12]
 801b8b0:	bd10      	pop	{r4, pc}

0801b8b2 <__sclose>:
 801b8b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b8b6:	f000 b813 	b.w	801b8e0 <_close_r>
	...

0801b8bc <_write_r>:
 801b8bc:	b538      	push	{r3, r4, r5, lr}
 801b8be:	4d07      	ldr	r5, [pc, #28]	; (801b8dc <_write_r+0x20>)
 801b8c0:	4604      	mov	r4, r0
 801b8c2:	4608      	mov	r0, r1
 801b8c4:	4611      	mov	r1, r2
 801b8c6:	2200      	movs	r2, #0
 801b8c8:	602a      	str	r2, [r5, #0]
 801b8ca:	461a      	mov	r2, r3
 801b8cc:	f7f3 fce7 	bl	800f29e <_write>
 801b8d0:	1c43      	adds	r3, r0, #1
 801b8d2:	d102      	bne.n	801b8da <_write_r+0x1e>
 801b8d4:	682b      	ldr	r3, [r5, #0]
 801b8d6:	b103      	cbz	r3, 801b8da <_write_r+0x1e>
 801b8d8:	6023      	str	r3, [r4, #0]
 801b8da:	bd38      	pop	{r3, r4, r5, pc}
 801b8dc:	2006c580 	.word	0x2006c580

0801b8e0 <_close_r>:
 801b8e0:	b538      	push	{r3, r4, r5, lr}
 801b8e2:	4d06      	ldr	r5, [pc, #24]	; (801b8fc <_close_r+0x1c>)
 801b8e4:	2300      	movs	r3, #0
 801b8e6:	4604      	mov	r4, r0
 801b8e8:	4608      	mov	r0, r1
 801b8ea:	602b      	str	r3, [r5, #0]
 801b8ec:	f7f3 fcf3 	bl	800f2d6 <_close>
 801b8f0:	1c43      	adds	r3, r0, #1
 801b8f2:	d102      	bne.n	801b8fa <_close_r+0x1a>
 801b8f4:	682b      	ldr	r3, [r5, #0]
 801b8f6:	b103      	cbz	r3, 801b8fa <_close_r+0x1a>
 801b8f8:	6023      	str	r3, [r4, #0]
 801b8fa:	bd38      	pop	{r3, r4, r5, pc}
 801b8fc:	2006c580 	.word	0x2006c580

0801b900 <_fstat_r>:
 801b900:	b538      	push	{r3, r4, r5, lr}
 801b902:	4d07      	ldr	r5, [pc, #28]	; (801b920 <_fstat_r+0x20>)
 801b904:	2300      	movs	r3, #0
 801b906:	4604      	mov	r4, r0
 801b908:	4608      	mov	r0, r1
 801b90a:	4611      	mov	r1, r2
 801b90c:	602b      	str	r3, [r5, #0]
 801b90e:	f7f3 fcee 	bl	800f2ee <_fstat>
 801b912:	1c43      	adds	r3, r0, #1
 801b914:	d102      	bne.n	801b91c <_fstat_r+0x1c>
 801b916:	682b      	ldr	r3, [r5, #0]
 801b918:	b103      	cbz	r3, 801b91c <_fstat_r+0x1c>
 801b91a:	6023      	str	r3, [r4, #0]
 801b91c:	bd38      	pop	{r3, r4, r5, pc}
 801b91e:	bf00      	nop
 801b920:	2006c580 	.word	0x2006c580

0801b924 <_isatty_r>:
 801b924:	b538      	push	{r3, r4, r5, lr}
 801b926:	4d06      	ldr	r5, [pc, #24]	; (801b940 <_isatty_r+0x1c>)
 801b928:	2300      	movs	r3, #0
 801b92a:	4604      	mov	r4, r0
 801b92c:	4608      	mov	r0, r1
 801b92e:	602b      	str	r3, [r5, #0]
 801b930:	f7f3 fced 	bl	800f30e <_isatty>
 801b934:	1c43      	adds	r3, r0, #1
 801b936:	d102      	bne.n	801b93e <_isatty_r+0x1a>
 801b938:	682b      	ldr	r3, [r5, #0]
 801b93a:	b103      	cbz	r3, 801b93e <_isatty_r+0x1a>
 801b93c:	6023      	str	r3, [r4, #0]
 801b93e:	bd38      	pop	{r3, r4, r5, pc}
 801b940:	2006c580 	.word	0x2006c580

0801b944 <_lseek_r>:
 801b944:	b538      	push	{r3, r4, r5, lr}
 801b946:	4d07      	ldr	r5, [pc, #28]	; (801b964 <_lseek_r+0x20>)
 801b948:	4604      	mov	r4, r0
 801b94a:	4608      	mov	r0, r1
 801b94c:	4611      	mov	r1, r2
 801b94e:	2200      	movs	r2, #0
 801b950:	602a      	str	r2, [r5, #0]
 801b952:	461a      	mov	r2, r3
 801b954:	f7f3 fce6 	bl	800f324 <_lseek>
 801b958:	1c43      	adds	r3, r0, #1
 801b95a:	d102      	bne.n	801b962 <_lseek_r+0x1e>
 801b95c:	682b      	ldr	r3, [r5, #0]
 801b95e:	b103      	cbz	r3, 801b962 <_lseek_r+0x1e>
 801b960:	6023      	str	r3, [r4, #0]
 801b962:	bd38      	pop	{r3, r4, r5, pc}
 801b964:	2006c580 	.word	0x2006c580

0801b968 <_read_r>:
 801b968:	b538      	push	{r3, r4, r5, lr}
 801b96a:	4d07      	ldr	r5, [pc, #28]	; (801b988 <_read_r+0x20>)
 801b96c:	4604      	mov	r4, r0
 801b96e:	4608      	mov	r0, r1
 801b970:	4611      	mov	r1, r2
 801b972:	2200      	movs	r2, #0
 801b974:	602a      	str	r2, [r5, #0]
 801b976:	461a      	mov	r2, r3
 801b978:	f7f3 fc74 	bl	800f264 <_read>
 801b97c:	1c43      	adds	r3, r0, #1
 801b97e:	d102      	bne.n	801b986 <_read_r+0x1e>
 801b980:	682b      	ldr	r3, [r5, #0]
 801b982:	b103      	cbz	r3, 801b986 <_read_r+0x1e>
 801b984:	6023      	str	r3, [r4, #0]
 801b986:	bd38      	pop	{r3, r4, r5, pc}
 801b988:	2006c580 	.word	0x2006c580

0801b98c <checkint>:
 801b98c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801b990:	f240 33fe 	movw	r3, #1022	; 0x3fe
 801b994:	429a      	cmp	r2, r3
 801b996:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b998:	dd2b      	ble.n	801b9f2 <checkint+0x66>
 801b99a:	f240 4333 	movw	r3, #1075	; 0x433
 801b99e:	429a      	cmp	r2, r3
 801b9a0:	dc25      	bgt.n	801b9ee <checkint+0x62>
 801b9a2:	1a9b      	subs	r3, r3, r2
 801b9a4:	f1a3 0620 	sub.w	r6, r3, #32
 801b9a8:	f04f 32ff 	mov.w	r2, #4294967295
 801b9ac:	fa02 f606 	lsl.w	r6, r2, r6
 801b9b0:	fa02 f403 	lsl.w	r4, r2, r3
 801b9b4:	f1c3 0520 	rsb	r5, r3, #32
 801b9b8:	4334      	orrs	r4, r6
 801b9ba:	fa22 f505 	lsr.w	r5, r2, r5
 801b9be:	432c      	orrs	r4, r5
 801b9c0:	409a      	lsls	r2, r3
 801b9c2:	ea20 0602 	bic.w	r6, r0, r2
 801b9c6:	ea21 0704 	bic.w	r7, r1, r4
 801b9ca:	ea56 0207 	orrs.w	r2, r6, r7
 801b9ce:	f1a3 0420 	sub.w	r4, r3, #32
 801b9d2:	f1c3 0220 	rsb	r2, r3, #32
 801b9d6:	d10c      	bne.n	801b9f2 <checkint+0x66>
 801b9d8:	40d8      	lsrs	r0, r3
 801b9da:	fa01 f302 	lsl.w	r3, r1, r2
 801b9de:	4318      	orrs	r0, r3
 801b9e0:	40e1      	lsrs	r1, r4
 801b9e2:	4308      	orrs	r0, r1
 801b9e4:	f000 0301 	and.w	r3, r0, #1
 801b9e8:	f1c3 0002 	rsb	r0, r3, #2
 801b9ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b9ee:	2002      	movs	r0, #2
 801b9f0:	e7fc      	b.n	801b9ec <checkint+0x60>
 801b9f2:	2000      	movs	r0, #0
 801b9f4:	e7fa      	b.n	801b9ec <checkint+0x60>
	...

0801b9f8 <pow>:
 801b9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9fc:	ed2d 8b0a 	vpush	{d8-d12}
 801ba00:	b09b      	sub	sp, #108	; 0x6c
 801ba02:	ed8d 0b02 	vstr	d0, [sp, #8]
 801ba06:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801ba0a:	ed8d 1b00 	vstr	d1, [sp]
 801ba0e:	ea4f 5915 	mov.w	r9, r5, lsr #20
 801ba12:	e9dd 6700 	ldrd	r6, r7, [sp]
 801ba16:	f109 30ff 	add.w	r0, r9, #4294967295
 801ba1a:	f240 71fd 	movw	r1, #2045	; 0x7fd
 801ba1e:	4288      	cmp	r0, r1
 801ba20:	46cc      	mov	ip, r9
 801ba22:	ea4f 5817 	mov.w	r8, r7, lsr #20
 801ba26:	d806      	bhi.n	801ba36 <pow+0x3e>
 801ba28:	f3c8 010a 	ubfx	r1, r8, #0, #11
 801ba2c:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 801ba30:	297f      	cmp	r1, #127	; 0x7f
 801ba32:	f240 81ab 	bls.w	801bd8c <pow+0x394>
 801ba36:	19b1      	adds	r1, r6, r6
 801ba38:	9104      	str	r1, [sp, #16]
 801ba3a:	eb47 0107 	adc.w	r1, r7, r7
 801ba3e:	9105      	str	r1, [sp, #20]
 801ba40:	9904      	ldr	r1, [sp, #16]
 801ba42:	f111 31ff 	adds.w	r1, r1, #4294967295
 801ba46:	460a      	mov	r2, r1
 801ba48:	9905      	ldr	r1, [sp, #20]
 801ba4a:	f141 31ff 	adc.w	r1, r1, #4294967295
 801ba4e:	460b      	mov	r3, r1
 801ba50:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 801ba54:	f06f 0001 	mvn.w	r0, #1
 801ba58:	4299      	cmp	r1, r3
 801ba5a:	bf08      	it	eq
 801ba5c:	4290      	cmpeq	r0, r2
 801ba5e:	d260      	bcs.n	801bb22 <pow+0x12a>
 801ba60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ba64:	4313      	orrs	r3, r2
 801ba66:	d11a      	bne.n	801ba9e <pow+0xa6>
 801ba68:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 801ba6c:	1923      	adds	r3, r4, r4
 801ba6e:	930c      	str	r3, [sp, #48]	; 0x30
 801ba70:	eb42 0302 	adc.w	r3, r2, r2
 801ba74:	930d      	str	r3, [sp, #52]	; 0x34
 801ba76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801ba7a:	4bcf      	ldr	r3, [pc, #828]	; (801bdb8 <pow+0x3c0>)
 801ba7c:	2200      	movs	r2, #0
 801ba7e:	428b      	cmp	r3, r1
 801ba80:	bf08      	it	eq
 801ba82:	4282      	cmpeq	r2, r0
 801ba84:	f080 8265 	bcs.w	801bf52 <pow+0x55a>
 801ba88:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ba8c:	ed9d 6b00 	vldr	d6, [sp]
 801ba90:	ee37 0b06 	vadd.f64	d0, d7, d6
 801ba94:	b01b      	add	sp, #108	; 0x6c
 801ba96:	ecbd 8b0a 	vpop	{d8-d12}
 801ba9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba9e:	49c7      	ldr	r1, [pc, #796]	; (801bdbc <pow+0x3c4>)
 801baa0:	2000      	movs	r0, #0
 801baa2:	428d      	cmp	r5, r1
 801baa4:	bf08      	it	eq
 801baa6:	4284      	cmpeq	r4, r0
 801baa8:	d10b      	bne.n	801bac2 <pow+0xca>
 801baaa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801baae:	19b3      	adds	r3, r6, r6
 801bab0:	930e      	str	r3, [sp, #56]	; 0x38
 801bab2:	eb42 0302 	adc.w	r3, r2, r2
 801bab6:	930f      	str	r3, [sp, #60]	; 0x3c
 801bab8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801babc:	4bbe      	ldr	r3, [pc, #760]	; (801bdb8 <pow+0x3c0>)
 801babe:	2200      	movs	r2, #0
 801bac0:	e7dd      	b.n	801ba7e <pow+0x86>
 801bac2:	1921      	adds	r1, r4, r4
 801bac4:	9106      	str	r1, [sp, #24]
 801bac6:	eb45 0105 	adc.w	r1, r5, r5
 801baca:	9107      	str	r1, [sp, #28]
 801bacc:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 801bad0:	49bb      	ldr	r1, [pc, #748]	; (801bdc0 <pow+0x3c8>)
 801bad2:	2000      	movs	r0, #0
 801bad4:	42a1      	cmp	r1, r4
 801bad6:	bf08      	it	eq
 801bad8:	4298      	cmpeq	r0, r3
 801bada:	d3d5      	bcc.n	801ba88 <pow+0x90>
 801badc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801bae0:	428c      	cmp	r4, r1
 801bae2:	bf08      	it	eq
 801bae4:	4283      	cmpeq	r3, r0
 801bae6:	d1cf      	bne.n	801ba88 <pow+0x90>
 801bae8:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 801baec:	49b5      	ldr	r1, [pc, #724]	; (801bdc4 <pow+0x3cc>)
 801baee:	2000      	movs	r0, #0
 801baf0:	428c      	cmp	r4, r1
 801baf2:	bf08      	it	eq
 801baf4:	4283      	cmpeq	r3, r0
 801baf6:	f000 822c 	beq.w	801bf52 <pow+0x55a>
 801bafa:	49b3      	ldr	r1, [pc, #716]	; (801bdc8 <pow+0x3d0>)
 801bafc:	f04f 30ff 	mov.w	r0, #4294967295
 801bb00:	42a1      	cmp	r1, r4
 801bb02:	bf08      	it	eq
 801bb04:	4298      	cmpeq	r0, r3
 801bb06:	ea6f 0307 	mvn.w	r3, r7
 801bb0a:	bf34      	ite	cc
 801bb0c:	2201      	movcc	r2, #1
 801bb0e:	2200      	movcs	r2, #0
 801bb10:	0fdb      	lsrs	r3, r3, #31
 801bb12:	429a      	cmp	r2, r3
 801bb14:	f040 821a 	bne.w	801bf4c <pow+0x554>
 801bb18:	ed9d 7b00 	vldr	d7, [sp]
 801bb1c:	ee27 0b07 	vmul.f64	d0, d7, d7
 801bb20:	e7b8      	b.n	801ba94 <pow+0x9c>
 801bb22:	1923      	adds	r3, r4, r4
 801bb24:	9308      	str	r3, [sp, #32]
 801bb26:	eb45 0305 	adc.w	r3, r5, r5
 801bb2a:	9309      	str	r3, [sp, #36]	; 0x24
 801bb2c:	9b08      	ldr	r3, [sp, #32]
 801bb2e:	f113 33ff 	adds.w	r3, r3, #4294967295
 801bb32:	9310      	str	r3, [sp, #64]	; 0x40
 801bb34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bb36:	f143 33ff 	adc.w	r3, r3, #4294967295
 801bb3a:	9311      	str	r3, [sp, #68]	; 0x44
 801bb3c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801bb40:	4299      	cmp	r1, r3
 801bb42:	bf08      	it	eq
 801bb44:	4290      	cmpeq	r0, r2
 801bb46:	d22d      	bcs.n	801bba4 <pow+0x1ac>
 801bb48:	ed9d 7b02 	vldr	d7, [sp, #8]
 801bb4c:	2c00      	cmp	r4, #0
 801bb4e:	f175 0300 	sbcs.w	r3, r5, #0
 801bb52:	ee27 0b07 	vmul.f64	d0, d7, d7
 801bb56:	da16      	bge.n	801bb86 <pow+0x18e>
 801bb58:	4630      	mov	r0, r6
 801bb5a:	4639      	mov	r1, r7
 801bb5c:	f7ff ff16 	bl	801b98c <checkint>
 801bb60:	2801      	cmp	r0, #1
 801bb62:	d110      	bne.n	801bb86 <pow+0x18e>
 801bb64:	eeb1 0b40 	vneg.f64	d0, d0
 801bb68:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 801bb6c:	4323      	orrs	r3, r4
 801bb6e:	d10c      	bne.n	801bb8a <pow+0x192>
 801bb70:	2e00      	cmp	r6, #0
 801bb72:	f177 0300 	sbcs.w	r3, r7, #0
 801bb76:	da8d      	bge.n	801ba94 <pow+0x9c>
 801bb78:	b01b      	add	sp, #108	; 0x6c
 801bb7a:	ecbd 8b0a 	vpop	{d8-d12}
 801bb7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb82:	f000 ba81 	b.w	801c088 <__math_divzero>
 801bb86:	2000      	movs	r0, #0
 801bb88:	e7ee      	b.n	801bb68 <pow+0x170>
 801bb8a:	2e00      	cmp	r6, #0
 801bb8c:	f177 0300 	sbcs.w	r3, r7, #0
 801bb90:	da80      	bge.n	801ba94 <pow+0x9c>
 801bb92:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801bb96:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801bb9a:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 801bb9e:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 801bba2:	e777      	b.n	801ba94 <pow+0x9c>
 801bba4:	2c00      	cmp	r4, #0
 801bba6:	f175 0300 	sbcs.w	r3, r5, #0
 801bbaa:	da35      	bge.n	801bc18 <pow+0x220>
 801bbac:	4630      	mov	r0, r6
 801bbae:	4639      	mov	r1, r7
 801bbb0:	f7ff feec 	bl	801b98c <checkint>
 801bbb4:	b940      	cbnz	r0, 801bbc8 <pow+0x1d0>
 801bbb6:	ed9d 0b02 	vldr	d0, [sp, #8]
 801bbba:	b01b      	add	sp, #108	; 0x6c
 801bbbc:	ecbd 8b0a 	vpop	{d8-d12}
 801bbc0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bbc4:	f000 ba78 	b.w	801c0b8 <__math_invalid>
 801bbc8:	2801      	cmp	r0, #1
 801bbca:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801bbce:	bf14      	ite	ne
 801bbd0:	2000      	movne	r0, #0
 801bbd2:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 801bbd6:	461d      	mov	r5, r3
 801bbd8:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 801bbdc:	f3c8 030a 	ubfx	r3, r8, #0, #11
 801bbe0:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 801bbe4:	2a7f      	cmp	r2, #127	; 0x7f
 801bbe6:	d933      	bls.n	801bc50 <pow+0x258>
 801bbe8:	4974      	ldr	r1, [pc, #464]	; (801bdbc <pow+0x3c4>)
 801bbea:	2000      	movs	r0, #0
 801bbec:	428d      	cmp	r5, r1
 801bbee:	bf08      	it	eq
 801bbf0:	4284      	cmpeq	r4, r0
 801bbf2:	f000 81ae 	beq.w	801bf52 <pow+0x55a>
 801bbf6:	f240 32bd 	movw	r2, #957	; 0x3bd
 801bbfa:	4293      	cmp	r3, r2
 801bbfc:	d80e      	bhi.n	801bc1c <pow+0x224>
 801bbfe:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801bc02:	ed9d 7b00 	vldr	d7, [sp]
 801bc06:	42a9      	cmp	r1, r5
 801bc08:	bf08      	it	eq
 801bc0a:	42a0      	cmpeq	r0, r4
 801bc0c:	bf34      	ite	cc
 801bc0e:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 801bc12:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 801bc16:	e73d      	b.n	801ba94 <pow+0x9c>
 801bc18:	2000      	movs	r0, #0
 801bc1a:	e7df      	b.n	801bbdc <pow+0x1e4>
 801bc1c:	42a9      	cmp	r1, r5
 801bc1e:	bf08      	it	eq
 801bc20:	42a0      	cmpeq	r0, r4
 801bc22:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801bc26:	bf2c      	ite	cs
 801bc28:	2301      	movcs	r3, #1
 801bc2a:	2300      	movcc	r3, #0
 801bc2c:	4590      	cmp	r8, r2
 801bc2e:	bf8c      	ite	hi
 801bc30:	f04f 0800 	movhi.w	r8, #0
 801bc34:	f04f 0801 	movls.w	r8, #1
 801bc38:	4543      	cmp	r3, r8
 801bc3a:	f04f 0000 	mov.w	r0, #0
 801bc3e:	f000 80af 	beq.w	801bda0 <pow+0x3a8>
 801bc42:	b01b      	add	sp, #108	; 0x6c
 801bc44:	ecbd 8b0a 	vpop	{d8-d12}
 801bc48:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc4c:	f000 ba14 	b.w	801c078 <__math_oflow>
 801bc50:	f1bc 0f00 	cmp.w	ip, #0
 801bc54:	d10e      	bne.n	801bc74 <pow+0x27c>
 801bc56:	ed9f 7b56 	vldr	d7, [pc, #344]	; 801bdb0 <pow+0x3b8>
 801bc5a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801bc5e:	ee26 7b07 	vmul.f64	d7, d6, d7
 801bc62:	ec57 6b17 	vmov	r6, r7, d7
 801bc66:	4b59      	ldr	r3, [pc, #356]	; (801bdcc <pow+0x3d4>)
 801bc68:	2100      	movs	r1, #0
 801bc6a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801bc6e:	1874      	adds	r4, r6, r1
 801bc70:	eb42 0503 	adc.w	r5, r2, r3
 801bc74:	2300      	movs	r3, #0
 801bc76:	18e3      	adds	r3, r4, r3
 801bc78:	4b55      	ldr	r3, [pc, #340]	; (801bdd0 <pow+0x3d8>)
 801bc7a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 801bc7e:	eb45 0303 	adc.w	r3, r5, r3
 801bc82:	1519      	asrs	r1, r3, #20
 801bc84:	ee03 1a10 	vmov	s6, r1
 801bc88:	0d1e      	lsrs	r6, r3, #20
 801bc8a:	2100      	movs	r1, #0
 801bc8c:	f3c3 3246 	ubfx	r2, r3, #13, #7
 801bc90:	0536      	lsls	r6, r6, #20
 801bc92:	1a63      	subs	r3, r4, r1
 801bc94:	9312      	str	r3, [sp, #72]	; 0x48
 801bc96:	eb65 0306 	sbc.w	r3, r5, r6
 801bc9a:	9313      	str	r3, [sp, #76]	; 0x4c
 801bc9c:	4b4d      	ldr	r3, [pc, #308]	; (801bdd4 <pow+0x3dc>)
 801bc9e:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 801bca2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801bca6:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 801bcaa:	eea5 6b07 	vfma.f64	d6, d5, d7
 801bcae:	ed93 7b00 	vldr	d7, [r3]
 801bcb2:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 801bcb6:	ed93 4b02 	vldr	d4, [r3, #8]
 801bcba:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 801bcbe:	eea3 5b07 	vfma.f64	d5, d3, d7
 801bcc2:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 801bcc6:	ee36 9b05 	vadd.f64	d9, d6, d5
 801bcca:	ee35 5b49 	vsub.f64	d5, d5, d9
 801bcce:	eea3 7b04 	vfma.f64	d7, d3, d4
 801bcd2:	ed93 4b04 	vldr	d4, [r3, #16]
 801bcd6:	ee35 5b06 	vadd.f64	d5, d5, d6
 801bcda:	ee37 7b05 	vadd.f64	d7, d7, d5
 801bcde:	ee26 4b04 	vmul.f64	d4, d6, d4
 801bce2:	ed93 3b08 	vldr	d3, [r3, #32]
 801bce6:	ee26 0b04 	vmul.f64	d0, d6, d4
 801bcea:	eeb0 8b40 	vmov.f64	d8, d0
 801bcee:	ee94 8b06 	vfnms.f64	d8, d4, d6
 801bcf2:	ed93 4b06 	vldr	d4, [r3, #24]
 801bcf6:	ee26 ab00 	vmul.f64	d10, d6, d0
 801bcfa:	ee39 1b00 	vadd.f64	d1, d9, d0
 801bcfe:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 801bd02:	eea6 4b03 	vfma.f64	d4, d6, d3
 801bd06:	ee39 9b41 	vsub.f64	d9, d9, d1
 801bd0a:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 801bd0e:	ee37 8b08 	vadd.f64	d8, d7, d8
 801bd12:	ee39 9b00 	vadd.f64	d9, d9, d0
 801bd16:	eea6 3b02 	vfma.f64	d3, d6, d2
 801bd1a:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 801bd1e:	ee38 9b09 	vadd.f64	d9, d8, d9
 801bd22:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 801bd26:	eea6 2b0c 	vfma.f64	d2, d6, d12
 801bd2a:	ed9d 6b00 	vldr	d6, [sp]
 801bd2e:	eea0 3b02 	vfma.f64	d3, d0, d2
 801bd32:	eea0 4b03 	vfma.f64	d4, d0, d3
 801bd36:	eeaa 9b04 	vfma.f64	d9, d10, d4
 801bd3a:	ee31 7b09 	vadd.f64	d7, d1, d9
 801bd3e:	ee26 6b07 	vmul.f64	d6, d6, d7
 801bd42:	ed8d 6b02 	vstr	d6, [sp, #8]
 801bd46:	eeb0 3b46 	vmov.f64	d3, d6
 801bd4a:	ee31 1b47 	vsub.f64	d1, d1, d7
 801bd4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bd52:	ee31 9b09 	vadd.f64	d9, d1, d9
 801bd56:	ed9d 6b00 	vldr	d6, [sp]
 801bd5a:	f3c3 570a 	ubfx	r7, r3, #20, #11
 801bd5e:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 801bd62:	193c      	adds	r4, r7, r4
 801bd64:	2c3e      	cmp	r4, #62	; 0x3e
 801bd66:	ee96 3b07 	vfnms.f64	d3, d6, d7
 801bd6a:	eea6 3b09 	vfma.f64	d3, d6, d9
 801bd6e:	d934      	bls.n	801bdda <pow+0x3e2>
 801bd70:	428c      	cmp	r4, r1
 801bd72:	da0d      	bge.n	801bd90 <pow+0x398>
 801bd74:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801bd78:	ed9d 7b02 	vldr	d7, [sp, #8]
 801bd7c:	ee37 0b00 	vadd.f64	d0, d7, d0
 801bd80:	2800      	cmp	r0, #0
 801bd82:	f43f ae87 	beq.w	801ba94 <pow+0x9c>
 801bd86:	eeb1 0b40 	vneg.f64	d0, d0
 801bd8a:	e683      	b.n	801ba94 <pow+0x9c>
 801bd8c:	2000      	movs	r0, #0
 801bd8e:	e771      	b.n	801bc74 <pow+0x27c>
 801bd90:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 801bd94:	d920      	bls.n	801bdd8 <pow+0x3e0>
 801bd96:	2a00      	cmp	r2, #0
 801bd98:	f173 0300 	sbcs.w	r3, r3, #0
 801bd9c:	f6bf af51 	bge.w	801bc42 <pow+0x24a>
 801bda0:	b01b      	add	sp, #108	; 0x6c
 801bda2:	ecbd 8b0a 	vpop	{d8-d12}
 801bda6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bdaa:	f000 b95d 	b.w	801c068 <__math_uflow>
 801bdae:	bf00      	nop
 801bdb0:	00000000 	.word	0x00000000
 801bdb4:	43300000 	.word	0x43300000
 801bdb8:	fff00000 	.word	0xfff00000
 801bdbc:	3ff00000 	.word	0x3ff00000
 801bdc0:	ffe00000 	.word	0xffe00000
 801bdc4:	7fe00000 	.word	0x7fe00000
 801bdc8:	7fdfffff 	.word	0x7fdfffff
 801bdcc:	fcc00000 	.word	0xfcc00000
 801bdd0:	c0196aab 	.word	0xc0196aab
 801bdd4:	080286b0 	.word	0x080286b0
 801bdd8:	460f      	mov	r7, r1
 801bdda:	4e65      	ldr	r6, [pc, #404]	; (801bf70 <pow+0x578>)
 801bddc:	ed9d 4b02 	vldr	d4, [sp, #8]
 801bde0:	ed96 6b02 	vldr	d6, [r6, #8]
 801bde4:	ed96 7b00 	vldr	d7, [r6]
 801bde8:	eeb0 5b46 	vmov.f64	d5, d6
 801bdec:	eea4 5b07 	vfma.f64	d5, d4, d7
 801bdf0:	ed8d 5b00 	vstr	d5, [sp]
 801bdf4:	ee35 6b46 	vsub.f64	d6, d5, d6
 801bdf8:	eeb0 5b44 	vmov.f64	d5, d4
 801bdfc:	e9dd 2300 	ldrd	r2, r3, [sp]
 801be00:	ed96 7b04 	vldr	d7, [r6, #16]
 801be04:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 801be08:	eea6 5b07 	vfma.f64	d5, d6, d7
 801be0c:	eeb0 7b45 	vmov.f64	d7, d5
 801be10:	ed96 5b06 	vldr	d5, [r6, #24]
 801be14:	1849      	adds	r1, r1, r1
 801be16:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 801be1a:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 801be1e:	eea6 7b05 	vfma.f64	d7, d6, d5
 801be22:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 801be26:	ee33 3b07 	vadd.f64	d3, d3, d7
 801be2a:	ee23 6b03 	vmul.f64	d6, d3, d3
 801be2e:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 801be32:	ed96 5b08 	vldr	d5, [r6, #32]
 801be36:	ee33 7b07 	vadd.f64	d7, d3, d7
 801be3a:	1814      	adds	r4, r2, r0
 801be3c:	0365      	lsls	r5, r4, #13
 801be3e:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 801be42:	eea3 5b04 	vfma.f64	d5, d3, d4
 801be46:	eea6 7b05 	vfma.f64	d7, d6, d5
 801be4a:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 801be4e:	ee26 6b06 	vmul.f64	d6, d6, d6
 801be52:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 801be56:	2000      	movs	r0, #0
 801be58:	eb10 0a04 	adds.w	sl, r0, r4
 801be5c:	eea3 5b04 	vfma.f64	d5, d3, d4
 801be60:	eb45 0b0c 	adc.w	fp, r5, ip
 801be64:	eea6 7b05 	vfma.f64	d7, d6, d5
 801be68:	2f00      	cmp	r7, #0
 801be6a:	d16a      	bne.n	801bf42 <pow+0x54a>
 801be6c:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 801be70:	4639      	mov	r1, r7
 801be72:	ea50 0301 	orrs.w	r3, r0, r1
 801be76:	f04f 0300 	mov.w	r3, #0
 801be7a:	d115      	bne.n	801bea8 <pow+0x4b0>
 801be7c:	eb1a 0303 	adds.w	r3, sl, r3
 801be80:	ee0b 3a10 	vmov	s22, r3
 801be84:	4b3b      	ldr	r3, [pc, #236]	; (801bf74 <pow+0x57c>)
 801be86:	ed9f 0b34 	vldr	d0, [pc, #208]	; 801bf58 <pow+0x560>
 801be8a:	eb4b 0303 	adc.w	r3, fp, r3
 801be8e:	ee0b 3a90 	vmov	s23, r3
 801be92:	eea7 bb0b 	vfma.f64	d11, d7, d11
 801be96:	ee2b 0b00 	vmul.f64	d0, d11, d0
 801be9a:	b01b      	add	sp, #108	; 0x6c
 801be9c:	ecbd 8b0a 	vpop	{d8-d12}
 801bea0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bea4:	f000 b920 	b.w	801c0e8 <__math_check_oflow>
 801bea8:	eb1a 0303 	adds.w	r3, sl, r3
 801beac:	930a      	str	r3, [sp, #40]	; 0x28
 801beae:	4b32      	ldr	r3, [pc, #200]	; (801bf78 <pow+0x580>)
 801beb0:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801beb4:	eb4b 0303 	adc.w	r3, fp, r3
 801beb8:	930b      	str	r3, [sp, #44]	; 0x2c
 801beba:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 801bebe:	ee27 6b05 	vmul.f64	d6, d7, d5
 801bec2:	ee35 7b06 	vadd.f64	d7, d5, d6
 801bec6:	eeb0 3bc7 	vabs.f64	d3, d7
 801beca:	eeb4 3bc4 	vcmpe.f64	d3, d4
 801bece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bed2:	ed9f 0b23 	vldr	d0, [pc, #140]	; 801bf60 <pow+0x568>
 801bed6:	d52b      	bpl.n	801bf30 <pow+0x538>
 801bed8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801bedc:	ee35 5b47 	vsub.f64	d5, d5, d7
 801bee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bee4:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 801bee8:	ee35 6b06 	vadd.f64	d6, d5, d6
 801beec:	bf48      	it	mi
 801beee:	eeb0 4b43 	vmovmi.f64	d4, d3
 801bef2:	ee37 3b04 	vadd.f64	d3, d7, d4
 801bef6:	ee34 5b43 	vsub.f64	d5, d4, d3
 801befa:	ee35 7b07 	vadd.f64	d7, d5, d7
 801befe:	ee37 7b06 	vadd.f64	d7, d7, d6
 801bf02:	ee37 7b03 	vadd.f64	d7, d7, d3
 801bf06:	ee37 7b44 	vsub.f64	d7, d7, d4
 801bf0a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801bf0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bf12:	d105      	bne.n	801bf20 <pow+0x528>
 801bf14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801bf16:	463a      	mov	r2, r7
 801bf18:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 801bf1c:	ec43 2b17 	vmov	d7, r2, r3
 801bf20:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 801bf24:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 801bf28:	ee26 6b00 	vmul.f64	d6, d6, d0
 801bf2c:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 801bf30:	ee27 0b00 	vmul.f64	d0, d7, d0
 801bf34:	b01b      	add	sp, #108	; 0x6c
 801bf36:	ecbd 8b0a 	vpop	{d8-d12}
 801bf3a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf3e:	f000 b8ca 	b.w	801c0d6 <__math_check_uflow>
 801bf42:	ec4b ab10 	vmov	d0, sl, fp
 801bf46:	eea7 0b00 	vfma.f64	d0, d7, d0
 801bf4a:	e5a3      	b.n	801ba94 <pow+0x9c>
 801bf4c:	ed9f 0b06 	vldr	d0, [pc, #24]	; 801bf68 <pow+0x570>
 801bf50:	e5a0      	b.n	801ba94 <pow+0x9c>
 801bf52:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801bf56:	e59d      	b.n	801ba94 <pow+0x9c>
 801bf58:	00000000 	.word	0x00000000
 801bf5c:	7f000000 	.word	0x7f000000
 801bf60:	00000000 	.word	0x00000000
 801bf64:	00100000 	.word	0x00100000
	...
 801bf70:	080296f8 	.word	0x080296f8
 801bf74:	c0f00000 	.word	0xc0f00000
 801bf78:	3fe00000 	.word	0x3fe00000
 801bf7c:	00000000 	.word	0x00000000

0801bf80 <sqrt>:
 801bf80:	b508      	push	{r3, lr}
 801bf82:	ed2d 8b04 	vpush	{d8-d9}
 801bf86:	eeb0 8b40 	vmov.f64	d8, d0
 801bf8a:	f000 f849 	bl	801c020 <__ieee754_sqrt>
 801bf8e:	4b10      	ldr	r3, [pc, #64]	; (801bfd0 <sqrt+0x50>)
 801bf90:	f993 3000 	ldrsb.w	r3, [r3]
 801bf94:	3301      	adds	r3, #1
 801bf96:	d011      	beq.n	801bfbc <sqrt+0x3c>
 801bf98:	eeb4 8b48 	vcmp.f64	d8, d8
 801bf9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bfa0:	d60c      	bvs.n	801bfbc <sqrt+0x3c>
 801bfa2:	ed9f 9b09 	vldr	d9, [pc, #36]	; 801bfc8 <sqrt+0x48>
 801bfa6:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801bfaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bfae:	d505      	bpl.n	801bfbc <sqrt+0x3c>
 801bfb0:	f7fb f94e 	bl	8017250 <__errno>
 801bfb4:	ee89 0b09 	vdiv.f64	d0, d9, d9
 801bfb8:	2321      	movs	r3, #33	; 0x21
 801bfba:	6003      	str	r3, [r0, #0]
 801bfbc:	ecbd 8b04 	vpop	{d8-d9}
 801bfc0:	bd08      	pop	{r3, pc}
 801bfc2:	bf00      	nop
 801bfc4:	f3af 8000 	nop.w
	...
 801bfd0:	200001fc 	.word	0x200001fc

0801bfd4 <sqrtf>:
 801bfd4:	b508      	push	{r3, lr}
 801bfd6:	ed2d 8b02 	vpush	{d8}
 801bfda:	eeb0 8a40 	vmov.f32	s16, s0
 801bfde:	f000 f822 	bl	801c026 <__ieee754_sqrtf>
 801bfe2:	4b0d      	ldr	r3, [pc, #52]	; (801c018 <sqrtf+0x44>)
 801bfe4:	f993 3000 	ldrsb.w	r3, [r3]
 801bfe8:	3301      	adds	r3, #1
 801bfea:	d011      	beq.n	801c010 <sqrtf+0x3c>
 801bfec:	eeb4 8a48 	vcmp.f32	s16, s16
 801bff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bff4:	d60c      	bvs.n	801c010 <sqrtf+0x3c>
 801bff6:	eddf 8a09 	vldr	s17, [pc, #36]	; 801c01c <sqrtf+0x48>
 801bffa:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801bffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c002:	d505      	bpl.n	801c010 <sqrtf+0x3c>
 801c004:	f7fb f924 	bl	8017250 <__errno>
 801c008:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801c00c:	2321      	movs	r3, #33	; 0x21
 801c00e:	6003      	str	r3, [r0, #0]
 801c010:	ecbd 8b02 	vpop	{d8}
 801c014:	bd08      	pop	{r3, pc}
 801c016:	bf00      	nop
 801c018:	200001fc 	.word	0x200001fc
 801c01c:	00000000 	.word	0x00000000

0801c020 <__ieee754_sqrt>:
 801c020:	eeb1 0bc0 	vsqrt.f64	d0, d0
 801c024:	4770      	bx	lr

0801c026 <__ieee754_sqrtf>:
 801c026:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801c02a:	4770      	bx	lr

0801c02c <with_errno>:
 801c02c:	b513      	push	{r0, r1, r4, lr}
 801c02e:	4604      	mov	r4, r0
 801c030:	ed8d 0b00 	vstr	d0, [sp]
 801c034:	f7fb f90c 	bl	8017250 <__errno>
 801c038:	ed9d 0b00 	vldr	d0, [sp]
 801c03c:	6004      	str	r4, [r0, #0]
 801c03e:	b002      	add	sp, #8
 801c040:	bd10      	pop	{r4, pc}

0801c042 <xflow>:
 801c042:	b082      	sub	sp, #8
 801c044:	b158      	cbz	r0, 801c05e <xflow+0x1c>
 801c046:	eeb1 7b40 	vneg.f64	d7, d0
 801c04a:	ed8d 7b00 	vstr	d7, [sp]
 801c04e:	ed9d 7b00 	vldr	d7, [sp]
 801c052:	2022      	movs	r0, #34	; 0x22
 801c054:	ee20 0b07 	vmul.f64	d0, d0, d7
 801c058:	b002      	add	sp, #8
 801c05a:	f7ff bfe7 	b.w	801c02c <with_errno>
 801c05e:	eeb0 7b40 	vmov.f64	d7, d0
 801c062:	e7f2      	b.n	801c04a <xflow+0x8>
 801c064:	0000      	movs	r0, r0
	...

0801c068 <__math_uflow>:
 801c068:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801c070 <__math_uflow+0x8>
 801c06c:	f7ff bfe9 	b.w	801c042 <xflow>
 801c070:	00000000 	.word	0x00000000
 801c074:	10000000 	.word	0x10000000

0801c078 <__math_oflow>:
 801c078:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801c080 <__math_oflow+0x8>
 801c07c:	f7ff bfe1 	b.w	801c042 <xflow>
 801c080:	00000000 	.word	0x00000000
 801c084:	70000000 	.word	0x70000000

0801c088 <__math_divzero>:
 801c088:	b082      	sub	sp, #8
 801c08a:	2800      	cmp	r0, #0
 801c08c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801c090:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 801c094:	fe06 7b07 	vseleq.f64	d7, d6, d7
 801c098:	ed8d 7b00 	vstr	d7, [sp]
 801c09c:	ed9d 0b00 	vldr	d0, [sp]
 801c0a0:	ed9f 7b03 	vldr	d7, [pc, #12]	; 801c0b0 <__math_divzero+0x28>
 801c0a4:	2022      	movs	r0, #34	; 0x22
 801c0a6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801c0aa:	b002      	add	sp, #8
 801c0ac:	f7ff bfbe 	b.w	801c02c <with_errno>
	...

0801c0b8 <__math_invalid>:
 801c0b8:	eeb0 7b40 	vmov.f64	d7, d0
 801c0bc:	eeb4 7b47 	vcmp.f64	d7, d7
 801c0c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c0c4:	ee30 6b40 	vsub.f64	d6, d0, d0
 801c0c8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801c0cc:	d602      	bvs.n	801c0d4 <__math_invalid+0x1c>
 801c0ce:	2021      	movs	r0, #33	; 0x21
 801c0d0:	f7ff bfac 	b.w	801c02c <with_errno>
 801c0d4:	4770      	bx	lr

0801c0d6 <__math_check_uflow>:
 801c0d6:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801c0da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c0de:	d102      	bne.n	801c0e6 <__math_check_uflow+0x10>
 801c0e0:	2022      	movs	r0, #34	; 0x22
 801c0e2:	f7ff bfa3 	b.w	801c02c <with_errno>
 801c0e6:	4770      	bx	lr

0801c0e8 <__math_check_oflow>:
 801c0e8:	ed9f 6b07 	vldr	d6, [pc, #28]	; 801c108 <__math_check_oflow+0x20>
 801c0ec:	eeb0 7bc0 	vabs.f64	d7, d0
 801c0f0:	eeb4 7b46 	vcmp.f64	d7, d6
 801c0f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c0f8:	dd02      	ble.n	801c100 <__math_check_oflow+0x18>
 801c0fa:	2022      	movs	r0, #34	; 0x22
 801c0fc:	f7ff bf96 	b.w	801c02c <with_errno>
 801c100:	4770      	bx	lr
 801c102:	bf00      	nop
 801c104:	f3af 8000 	nop.w
 801c108:	ffffffff 	.word	0xffffffff
 801c10c:	7fefffff 	.word	0x7fefffff

0801c110 <_init>:
 801c110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c112:	bf00      	nop
 801c114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c116:	bc08      	pop	{r3}
 801c118:	469e      	mov	lr, r3
 801c11a:	4770      	bx	lr

0801c11c <_fini>:
 801c11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c11e:	bf00      	nop
 801c120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c122:	bc08      	pop	{r3}
 801c124:	469e      	mov	lr, r3
 801c126:	4770      	bx	lr
