
STM32F7_IEPEHighSpeed_V2q1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015530  08008200  08008200  00008200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000fe48  0801d730  0801d730  0001d730  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802d578  0802d578  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  0802d578  0802d578  0002d578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802d580  0802d580  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802d580  0802d580  0002d580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802d584  0802d584  0002d584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0802d588  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0006cb10  20000200  0802d784  00030200  2**5
                  ALLOC
 10 ._user_heap_stack 00000600  2006cd10  0802d784  0003cd10  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002022a  00000000  00000000  0003022a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f21  00000000  00000000  00050454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001868  00000000  00000000  00055378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002bf82  00000000  00000000  00056be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00023ca7  00000000  00000000  00082b62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00102dda  00000000  00000000  000a6809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  001a95e3  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000015b0  00000000  00000000  001a9638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007740  00000000  00000000  001aabe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008200 <__do_global_dtors_aux>:
 8008200:	b510      	push	{r4, lr}
 8008202:	4c05      	ldr	r4, [pc, #20]	; (8008218 <__do_global_dtors_aux+0x18>)
 8008204:	7823      	ldrb	r3, [r4, #0]
 8008206:	b933      	cbnz	r3, 8008216 <__do_global_dtors_aux+0x16>
 8008208:	4b04      	ldr	r3, [pc, #16]	; (800821c <__do_global_dtors_aux+0x1c>)
 800820a:	b113      	cbz	r3, 8008212 <__do_global_dtors_aux+0x12>
 800820c:	4804      	ldr	r0, [pc, #16]	; (8008220 <__do_global_dtors_aux+0x20>)
 800820e:	f3af 8000 	nop.w
 8008212:	2301      	movs	r3, #1
 8008214:	7023      	strb	r3, [r4, #0]
 8008216:	bd10      	pop	{r4, pc}
 8008218:	20000200 	.word	0x20000200
 800821c:	00000000 	.word	0x00000000
 8008220:	0801d718 	.word	0x0801d718

08008224 <frame_dummy>:
 8008224:	b508      	push	{r3, lr}
 8008226:	4b03      	ldr	r3, [pc, #12]	; (8008234 <frame_dummy+0x10>)
 8008228:	b11b      	cbz	r3, 8008232 <frame_dummy+0xe>
 800822a:	4903      	ldr	r1, [pc, #12]	; (8008238 <frame_dummy+0x14>)
 800822c:	4803      	ldr	r0, [pc, #12]	; (800823c <frame_dummy+0x18>)
 800822e:	f3af 8000 	nop.w
 8008232:	bd08      	pop	{r3, pc}
 8008234:	00000000 	.word	0x00000000
 8008238:	20000204 	.word	0x20000204
 800823c:	0801d718 	.word	0x0801d718

08008240 <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 8008240:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 8008242:	2b01      	cmp	r3, #1
	IT       LS
 8008244:	bf98      	it	ls
	BXLS     lr
 8008246:	4770      	bxls	lr
	PUSH     {r4-r9}
 8008248:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 800824c:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 800824e:	089b      	lsrs	r3, r3, #2

08008250 <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 8008250:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 8008254:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8008258:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 800825a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 800825e:	4480      	add	r8, r0
	ADD      r9,r0,r9
 8008260:	4481      	add	r9, r0
	ADD      r2,r0,r2
 8008262:	4402      	add	r2, r0
	ADD      r12,r0,r12
 8008264:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 8008266:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800826a:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 800826e:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8008270:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8008274:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8008278:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800827c:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8008280:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 8008282:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 8008286:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 800828a:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 800828c:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 8008290:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 8008294:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 8008298:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 800829c:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 800829e:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 80082a0:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 80082a2:	d1d5      	bne.n	8008250 <arm_bitreversal_32_0>
	POP      {r4-r9}
 80082a4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 80082a8:	4770      	bx	lr

080082aa <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 80082aa:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 80082ac:	2b01      	cmp	r3, #1
	IT       LS
 80082ae:	bf98      	it	ls
	BXLS     lr
 80082b0:	4770      	bxls	lr
	PUSH     {r4-r9}
 80082b2:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 80082b6:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 80082b8:	089b      	lsrs	r3, r3, #2

080082ba <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 80082ba:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 80082be:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 80082c2:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 80082c4:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 80082c8:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 80082cc:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 80082d0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 80082d4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 80082d8:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 80082dc:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 80082e0:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 80082e2:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 80082e6:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 80082ea:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 80082ee:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 80082f2:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 80082f4:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 80082f6:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 80082f8:	d1df      	bne.n	80082ba <arm_bitreversal_16_0>
	POP      {r4-r9}
 80082fa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 80082fe:	4770      	bx	lr

08008300 <strlen>:
 8008300:	4603      	mov	r3, r0
 8008302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008306:	2a00      	cmp	r2, #0
 8008308:	d1fb      	bne.n	8008302 <strlen+0x2>
 800830a:	1a18      	subs	r0, r3, r0
 800830c:	3801      	subs	r0, #1
 800830e:	4770      	bx	lr

08008310 <memchr>:
 8008310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008314:	2a10      	cmp	r2, #16
 8008316:	db2b      	blt.n	8008370 <memchr+0x60>
 8008318:	f010 0f07 	tst.w	r0, #7
 800831c:	d008      	beq.n	8008330 <memchr+0x20>
 800831e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008322:	3a01      	subs	r2, #1
 8008324:	428b      	cmp	r3, r1
 8008326:	d02d      	beq.n	8008384 <memchr+0x74>
 8008328:	f010 0f07 	tst.w	r0, #7
 800832c:	b342      	cbz	r2, 8008380 <memchr+0x70>
 800832e:	d1f6      	bne.n	800831e <memchr+0xe>
 8008330:	b4f0      	push	{r4, r5, r6, r7}
 8008332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800833a:	f022 0407 	bic.w	r4, r2, #7
 800833e:	f07f 0700 	mvns.w	r7, #0
 8008342:	2300      	movs	r3, #0
 8008344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008348:	3c08      	subs	r4, #8
 800834a:	ea85 0501 	eor.w	r5, r5, r1
 800834e:	ea86 0601 	eor.w	r6, r6, r1
 8008352:	fa85 f547 	uadd8	r5, r5, r7
 8008356:	faa3 f587 	sel	r5, r3, r7
 800835a:	fa86 f647 	uadd8	r6, r6, r7
 800835e:	faa5 f687 	sel	r6, r5, r7
 8008362:	b98e      	cbnz	r6, 8008388 <memchr+0x78>
 8008364:	d1ee      	bne.n	8008344 <memchr+0x34>
 8008366:	bcf0      	pop	{r4, r5, r6, r7}
 8008368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800836c:	f002 0207 	and.w	r2, r2, #7
 8008370:	b132      	cbz	r2, 8008380 <memchr+0x70>
 8008372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008376:	3a01      	subs	r2, #1
 8008378:	ea83 0301 	eor.w	r3, r3, r1
 800837c:	b113      	cbz	r3, 8008384 <memchr+0x74>
 800837e:	d1f8      	bne.n	8008372 <memchr+0x62>
 8008380:	2000      	movs	r0, #0
 8008382:	4770      	bx	lr
 8008384:	3801      	subs	r0, #1
 8008386:	4770      	bx	lr
 8008388:	2d00      	cmp	r5, #0
 800838a:	bf06      	itte	eq
 800838c:	4635      	moveq	r5, r6
 800838e:	3803      	subeq	r0, #3
 8008390:	3807      	subne	r0, #7
 8008392:	f015 0f01 	tst.w	r5, #1
 8008396:	d107      	bne.n	80083a8 <memchr+0x98>
 8008398:	3001      	adds	r0, #1
 800839a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800839e:	bf02      	ittt	eq
 80083a0:	3001      	addeq	r0, #1
 80083a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80083a6:	3001      	addeq	r0, #1
 80083a8:	bcf0      	pop	{r4, r5, r6, r7}
 80083aa:	3801      	subs	r0, #1
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop

080083b0 <__aeabi_drsub>:
 80083b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80083b4:	e002      	b.n	80083bc <__adddf3>
 80083b6:	bf00      	nop

080083b8 <__aeabi_dsub>:
 80083b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080083bc <__adddf3>:
 80083bc:	b530      	push	{r4, r5, lr}
 80083be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80083c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80083c6:	ea94 0f05 	teq	r4, r5
 80083ca:	bf08      	it	eq
 80083cc:	ea90 0f02 	teqeq	r0, r2
 80083d0:	bf1f      	itttt	ne
 80083d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80083d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80083da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80083de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80083e2:	f000 80e2 	beq.w	80085aa <__adddf3+0x1ee>
 80083e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80083ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80083ee:	bfb8      	it	lt
 80083f0:	426d      	neglt	r5, r5
 80083f2:	dd0c      	ble.n	800840e <__adddf3+0x52>
 80083f4:	442c      	add	r4, r5
 80083f6:	ea80 0202 	eor.w	r2, r0, r2
 80083fa:	ea81 0303 	eor.w	r3, r1, r3
 80083fe:	ea82 0000 	eor.w	r0, r2, r0
 8008402:	ea83 0101 	eor.w	r1, r3, r1
 8008406:	ea80 0202 	eor.w	r2, r0, r2
 800840a:	ea81 0303 	eor.w	r3, r1, r3
 800840e:	2d36      	cmp	r5, #54	; 0x36
 8008410:	bf88      	it	hi
 8008412:	bd30      	pophi	{r4, r5, pc}
 8008414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800841c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008424:	d002      	beq.n	800842c <__adddf3+0x70>
 8008426:	4240      	negs	r0, r0
 8008428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800842c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008438:	d002      	beq.n	8008440 <__adddf3+0x84>
 800843a:	4252      	negs	r2, r2
 800843c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008440:	ea94 0f05 	teq	r4, r5
 8008444:	f000 80a7 	beq.w	8008596 <__adddf3+0x1da>
 8008448:	f1a4 0401 	sub.w	r4, r4, #1
 800844c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008450:	db0d      	blt.n	800846e <__adddf3+0xb2>
 8008452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008456:	fa22 f205 	lsr.w	r2, r2, r5
 800845a:	1880      	adds	r0, r0, r2
 800845c:	f141 0100 	adc.w	r1, r1, #0
 8008460:	fa03 f20e 	lsl.w	r2, r3, lr
 8008464:	1880      	adds	r0, r0, r2
 8008466:	fa43 f305 	asr.w	r3, r3, r5
 800846a:	4159      	adcs	r1, r3
 800846c:	e00e      	b.n	800848c <__adddf3+0xd0>
 800846e:	f1a5 0520 	sub.w	r5, r5, #32
 8008472:	f10e 0e20 	add.w	lr, lr, #32
 8008476:	2a01      	cmp	r2, #1
 8008478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800847c:	bf28      	it	cs
 800847e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8008482:	fa43 f305 	asr.w	r3, r3, r5
 8008486:	18c0      	adds	r0, r0, r3
 8008488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800848c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008490:	d507      	bpl.n	80084a2 <__adddf3+0xe6>
 8008492:	f04f 0e00 	mov.w	lr, #0
 8008496:	f1dc 0c00 	rsbs	ip, ip, #0
 800849a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800849e:	eb6e 0101 	sbc.w	r1, lr, r1
 80084a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80084a6:	d31b      	bcc.n	80084e0 <__adddf3+0x124>
 80084a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80084ac:	d30c      	bcc.n	80084c8 <__adddf3+0x10c>
 80084ae:	0849      	lsrs	r1, r1, #1
 80084b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80084b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80084b8:	f104 0401 	add.w	r4, r4, #1
 80084bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80084c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80084c4:	f080 809a 	bcs.w	80085fc <__adddf3+0x240>
 80084c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80084cc:	bf08      	it	eq
 80084ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80084d2:	f150 0000 	adcs.w	r0, r0, #0
 80084d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80084da:	ea41 0105 	orr.w	r1, r1, r5
 80084de:	bd30      	pop	{r4, r5, pc}
 80084e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80084e4:	4140      	adcs	r0, r0
 80084e6:	eb41 0101 	adc.w	r1, r1, r1
 80084ea:	3c01      	subs	r4, #1
 80084ec:	bf28      	it	cs
 80084ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80084f2:	d2e9      	bcs.n	80084c8 <__adddf3+0x10c>
 80084f4:	f091 0f00 	teq	r1, #0
 80084f8:	bf04      	itt	eq
 80084fa:	4601      	moveq	r1, r0
 80084fc:	2000      	moveq	r0, #0
 80084fe:	fab1 f381 	clz	r3, r1
 8008502:	bf08      	it	eq
 8008504:	3320      	addeq	r3, #32
 8008506:	f1a3 030b 	sub.w	r3, r3, #11
 800850a:	f1b3 0220 	subs.w	r2, r3, #32
 800850e:	da0c      	bge.n	800852a <__adddf3+0x16e>
 8008510:	320c      	adds	r2, #12
 8008512:	dd08      	ble.n	8008526 <__adddf3+0x16a>
 8008514:	f102 0c14 	add.w	ip, r2, #20
 8008518:	f1c2 020c 	rsb	r2, r2, #12
 800851c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008520:	fa21 f102 	lsr.w	r1, r1, r2
 8008524:	e00c      	b.n	8008540 <__adddf3+0x184>
 8008526:	f102 0214 	add.w	r2, r2, #20
 800852a:	bfd8      	it	le
 800852c:	f1c2 0c20 	rsble	ip, r2, #32
 8008530:	fa01 f102 	lsl.w	r1, r1, r2
 8008534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008538:	bfdc      	itt	le
 800853a:	ea41 010c 	orrle.w	r1, r1, ip
 800853e:	4090      	lslle	r0, r2
 8008540:	1ae4      	subs	r4, r4, r3
 8008542:	bfa2      	ittt	ge
 8008544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008548:	4329      	orrge	r1, r5
 800854a:	bd30      	popge	{r4, r5, pc}
 800854c:	ea6f 0404 	mvn.w	r4, r4
 8008550:	3c1f      	subs	r4, #31
 8008552:	da1c      	bge.n	800858e <__adddf3+0x1d2>
 8008554:	340c      	adds	r4, #12
 8008556:	dc0e      	bgt.n	8008576 <__adddf3+0x1ba>
 8008558:	f104 0414 	add.w	r4, r4, #20
 800855c:	f1c4 0220 	rsb	r2, r4, #32
 8008560:	fa20 f004 	lsr.w	r0, r0, r4
 8008564:	fa01 f302 	lsl.w	r3, r1, r2
 8008568:	ea40 0003 	orr.w	r0, r0, r3
 800856c:	fa21 f304 	lsr.w	r3, r1, r4
 8008570:	ea45 0103 	orr.w	r1, r5, r3
 8008574:	bd30      	pop	{r4, r5, pc}
 8008576:	f1c4 040c 	rsb	r4, r4, #12
 800857a:	f1c4 0220 	rsb	r2, r4, #32
 800857e:	fa20 f002 	lsr.w	r0, r0, r2
 8008582:	fa01 f304 	lsl.w	r3, r1, r4
 8008586:	ea40 0003 	orr.w	r0, r0, r3
 800858a:	4629      	mov	r1, r5
 800858c:	bd30      	pop	{r4, r5, pc}
 800858e:	fa21 f004 	lsr.w	r0, r1, r4
 8008592:	4629      	mov	r1, r5
 8008594:	bd30      	pop	{r4, r5, pc}
 8008596:	f094 0f00 	teq	r4, #0
 800859a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800859e:	bf06      	itte	eq
 80085a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80085a4:	3401      	addeq	r4, #1
 80085a6:	3d01      	subne	r5, #1
 80085a8:	e74e      	b.n	8008448 <__adddf3+0x8c>
 80085aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80085ae:	bf18      	it	ne
 80085b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80085b4:	d029      	beq.n	800860a <__adddf3+0x24e>
 80085b6:	ea94 0f05 	teq	r4, r5
 80085ba:	bf08      	it	eq
 80085bc:	ea90 0f02 	teqeq	r0, r2
 80085c0:	d005      	beq.n	80085ce <__adddf3+0x212>
 80085c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80085c6:	bf04      	itt	eq
 80085c8:	4619      	moveq	r1, r3
 80085ca:	4610      	moveq	r0, r2
 80085cc:	bd30      	pop	{r4, r5, pc}
 80085ce:	ea91 0f03 	teq	r1, r3
 80085d2:	bf1e      	ittt	ne
 80085d4:	2100      	movne	r1, #0
 80085d6:	2000      	movne	r0, #0
 80085d8:	bd30      	popne	{r4, r5, pc}
 80085da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80085de:	d105      	bne.n	80085ec <__adddf3+0x230>
 80085e0:	0040      	lsls	r0, r0, #1
 80085e2:	4149      	adcs	r1, r1
 80085e4:	bf28      	it	cs
 80085e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80085ea:	bd30      	pop	{r4, r5, pc}
 80085ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80085f0:	bf3c      	itt	cc
 80085f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80085f6:	bd30      	popcc	{r4, r5, pc}
 80085f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80085fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008604:	f04f 0000 	mov.w	r0, #0
 8008608:	bd30      	pop	{r4, r5, pc}
 800860a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800860e:	bf1a      	itte	ne
 8008610:	4619      	movne	r1, r3
 8008612:	4610      	movne	r0, r2
 8008614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008618:	bf1c      	itt	ne
 800861a:	460b      	movne	r3, r1
 800861c:	4602      	movne	r2, r0
 800861e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008622:	bf06      	itte	eq
 8008624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008628:	ea91 0f03 	teqeq	r1, r3
 800862c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008630:	bd30      	pop	{r4, r5, pc}
 8008632:	bf00      	nop

08008634 <__aeabi_ui2d>:
 8008634:	f090 0f00 	teq	r0, #0
 8008638:	bf04      	itt	eq
 800863a:	2100      	moveq	r1, #0
 800863c:	4770      	bxeq	lr
 800863e:	b530      	push	{r4, r5, lr}
 8008640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008648:	f04f 0500 	mov.w	r5, #0
 800864c:	f04f 0100 	mov.w	r1, #0
 8008650:	e750      	b.n	80084f4 <__adddf3+0x138>
 8008652:	bf00      	nop

08008654 <__aeabi_i2d>:
 8008654:	f090 0f00 	teq	r0, #0
 8008658:	bf04      	itt	eq
 800865a:	2100      	moveq	r1, #0
 800865c:	4770      	bxeq	lr
 800865e:	b530      	push	{r4, r5, lr}
 8008660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800866c:	bf48      	it	mi
 800866e:	4240      	negmi	r0, r0
 8008670:	f04f 0100 	mov.w	r1, #0
 8008674:	e73e      	b.n	80084f4 <__adddf3+0x138>
 8008676:	bf00      	nop

08008678 <__aeabi_f2d>:
 8008678:	0042      	lsls	r2, r0, #1
 800867a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800867e:	ea4f 0131 	mov.w	r1, r1, rrx
 8008682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8008686:	bf1f      	itttt	ne
 8008688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800868c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8008694:	4770      	bxne	lr
 8008696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800869a:	bf08      	it	eq
 800869c:	4770      	bxeq	lr
 800869e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80086a2:	bf04      	itt	eq
 80086a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80086a8:	4770      	bxeq	lr
 80086aa:	b530      	push	{r4, r5, lr}
 80086ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80086b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80086b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80086b8:	e71c      	b.n	80084f4 <__adddf3+0x138>
 80086ba:	bf00      	nop

080086bc <__aeabi_ul2d>:
 80086bc:	ea50 0201 	orrs.w	r2, r0, r1
 80086c0:	bf08      	it	eq
 80086c2:	4770      	bxeq	lr
 80086c4:	b530      	push	{r4, r5, lr}
 80086c6:	f04f 0500 	mov.w	r5, #0
 80086ca:	e00a      	b.n	80086e2 <__aeabi_l2d+0x16>

080086cc <__aeabi_l2d>:
 80086cc:	ea50 0201 	orrs.w	r2, r0, r1
 80086d0:	bf08      	it	eq
 80086d2:	4770      	bxeq	lr
 80086d4:	b530      	push	{r4, r5, lr}
 80086d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80086da:	d502      	bpl.n	80086e2 <__aeabi_l2d+0x16>
 80086dc:	4240      	negs	r0, r0
 80086de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80086e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80086e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80086ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80086ee:	f43f aed8 	beq.w	80084a2 <__adddf3+0xe6>
 80086f2:	f04f 0203 	mov.w	r2, #3
 80086f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80086fa:	bf18      	it	ne
 80086fc:	3203      	addne	r2, #3
 80086fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008702:	bf18      	it	ne
 8008704:	3203      	addne	r2, #3
 8008706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800870a:	f1c2 0320 	rsb	r3, r2, #32
 800870e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008712:	fa20 f002 	lsr.w	r0, r0, r2
 8008716:	fa01 fe03 	lsl.w	lr, r1, r3
 800871a:	ea40 000e 	orr.w	r0, r0, lr
 800871e:	fa21 f102 	lsr.w	r1, r1, r2
 8008722:	4414      	add	r4, r2
 8008724:	e6bd      	b.n	80084a2 <__adddf3+0xe6>
 8008726:	bf00      	nop

08008728 <__aeabi_uldivmod>:
 8008728:	b953      	cbnz	r3, 8008740 <__aeabi_uldivmod+0x18>
 800872a:	b94a      	cbnz	r2, 8008740 <__aeabi_uldivmod+0x18>
 800872c:	2900      	cmp	r1, #0
 800872e:	bf08      	it	eq
 8008730:	2800      	cmpeq	r0, #0
 8008732:	bf1c      	itt	ne
 8008734:	f04f 31ff 	movne.w	r1, #4294967295
 8008738:	f04f 30ff 	movne.w	r0, #4294967295
 800873c:	f000 b9ac 	b.w	8008a98 <__aeabi_idiv0>
 8008740:	f1ad 0c08 	sub.w	ip, sp, #8
 8008744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008748:	f000 f83e 	bl	80087c8 <__udivmoddi4>
 800874c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008754:	b004      	add	sp, #16
 8008756:	4770      	bx	lr

08008758 <__aeabi_d2lz>:
 8008758:	b508      	push	{r3, lr}
 800875a:	4602      	mov	r2, r0
 800875c:	460b      	mov	r3, r1
 800875e:	ec43 2b17 	vmov	d7, r2, r3
 8008762:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800876a:	d403      	bmi.n	8008774 <__aeabi_d2lz+0x1c>
 800876c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008770:	f000 b80a 	b.w	8008788 <__aeabi_d2ulz>
 8008774:	eeb1 7b47 	vneg.f64	d7, d7
 8008778:	ec51 0b17 	vmov	r0, r1, d7
 800877c:	f000 f804 	bl	8008788 <__aeabi_d2ulz>
 8008780:	4240      	negs	r0, r0
 8008782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008786:	bd08      	pop	{r3, pc}

08008788 <__aeabi_d2ulz>:
 8008788:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80087b8 <__aeabi_d2ulz+0x30>
 800878c:	ec41 0b17 	vmov	d7, r0, r1
 8008790:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80087c0 <__aeabi_d2ulz+0x38>
 8008794:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008798:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800879c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80087a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80087a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80087a8:	ee16 1a10 	vmov	r1, s12
 80087ac:	ee17 0a90 	vmov	r0, s15
 80087b0:	4770      	bx	lr
 80087b2:	bf00      	nop
 80087b4:	f3af 8000 	nop.w
 80087b8:	00000000 	.word	0x00000000
 80087bc:	3df00000 	.word	0x3df00000
 80087c0:	00000000 	.word	0x00000000
 80087c4:	41f00000 	.word	0x41f00000

080087c8 <__udivmoddi4>:
 80087c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087cc:	9d08      	ldr	r5, [sp, #32]
 80087ce:	4604      	mov	r4, r0
 80087d0:	468e      	mov	lr, r1
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d14d      	bne.n	8008872 <__udivmoddi4+0xaa>
 80087d6:	428a      	cmp	r2, r1
 80087d8:	4694      	mov	ip, r2
 80087da:	d969      	bls.n	80088b0 <__udivmoddi4+0xe8>
 80087dc:	fab2 f282 	clz	r2, r2
 80087e0:	b152      	cbz	r2, 80087f8 <__udivmoddi4+0x30>
 80087e2:	fa01 f302 	lsl.w	r3, r1, r2
 80087e6:	f1c2 0120 	rsb	r1, r2, #32
 80087ea:	fa20 f101 	lsr.w	r1, r0, r1
 80087ee:	fa0c fc02 	lsl.w	ip, ip, r2
 80087f2:	ea41 0e03 	orr.w	lr, r1, r3
 80087f6:	4094      	lsls	r4, r2
 80087f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80087fc:	0c21      	lsrs	r1, r4, #16
 80087fe:	fbbe f6f8 	udiv	r6, lr, r8
 8008802:	fa1f f78c 	uxth.w	r7, ip
 8008806:	fb08 e316 	mls	r3, r8, r6, lr
 800880a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800880e:	fb06 f107 	mul.w	r1, r6, r7
 8008812:	4299      	cmp	r1, r3
 8008814:	d90a      	bls.n	800882c <__udivmoddi4+0x64>
 8008816:	eb1c 0303 	adds.w	r3, ip, r3
 800881a:	f106 30ff 	add.w	r0, r6, #4294967295
 800881e:	f080 811f 	bcs.w	8008a60 <__udivmoddi4+0x298>
 8008822:	4299      	cmp	r1, r3
 8008824:	f240 811c 	bls.w	8008a60 <__udivmoddi4+0x298>
 8008828:	3e02      	subs	r6, #2
 800882a:	4463      	add	r3, ip
 800882c:	1a5b      	subs	r3, r3, r1
 800882e:	b2a4      	uxth	r4, r4
 8008830:	fbb3 f0f8 	udiv	r0, r3, r8
 8008834:	fb08 3310 	mls	r3, r8, r0, r3
 8008838:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800883c:	fb00 f707 	mul.w	r7, r0, r7
 8008840:	42a7      	cmp	r7, r4
 8008842:	d90a      	bls.n	800885a <__udivmoddi4+0x92>
 8008844:	eb1c 0404 	adds.w	r4, ip, r4
 8008848:	f100 33ff 	add.w	r3, r0, #4294967295
 800884c:	f080 810a 	bcs.w	8008a64 <__udivmoddi4+0x29c>
 8008850:	42a7      	cmp	r7, r4
 8008852:	f240 8107 	bls.w	8008a64 <__udivmoddi4+0x29c>
 8008856:	4464      	add	r4, ip
 8008858:	3802      	subs	r0, #2
 800885a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800885e:	1be4      	subs	r4, r4, r7
 8008860:	2600      	movs	r6, #0
 8008862:	b11d      	cbz	r5, 800886c <__udivmoddi4+0xa4>
 8008864:	40d4      	lsrs	r4, r2
 8008866:	2300      	movs	r3, #0
 8008868:	e9c5 4300 	strd	r4, r3, [r5]
 800886c:	4631      	mov	r1, r6
 800886e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008872:	428b      	cmp	r3, r1
 8008874:	d909      	bls.n	800888a <__udivmoddi4+0xc2>
 8008876:	2d00      	cmp	r5, #0
 8008878:	f000 80ef 	beq.w	8008a5a <__udivmoddi4+0x292>
 800887c:	2600      	movs	r6, #0
 800887e:	e9c5 0100 	strd	r0, r1, [r5]
 8008882:	4630      	mov	r0, r6
 8008884:	4631      	mov	r1, r6
 8008886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800888a:	fab3 f683 	clz	r6, r3
 800888e:	2e00      	cmp	r6, #0
 8008890:	d14a      	bne.n	8008928 <__udivmoddi4+0x160>
 8008892:	428b      	cmp	r3, r1
 8008894:	d302      	bcc.n	800889c <__udivmoddi4+0xd4>
 8008896:	4282      	cmp	r2, r0
 8008898:	f200 80f9 	bhi.w	8008a8e <__udivmoddi4+0x2c6>
 800889c:	1a84      	subs	r4, r0, r2
 800889e:	eb61 0303 	sbc.w	r3, r1, r3
 80088a2:	2001      	movs	r0, #1
 80088a4:	469e      	mov	lr, r3
 80088a6:	2d00      	cmp	r5, #0
 80088a8:	d0e0      	beq.n	800886c <__udivmoddi4+0xa4>
 80088aa:	e9c5 4e00 	strd	r4, lr, [r5]
 80088ae:	e7dd      	b.n	800886c <__udivmoddi4+0xa4>
 80088b0:	b902      	cbnz	r2, 80088b4 <__udivmoddi4+0xec>
 80088b2:	deff      	udf	#255	; 0xff
 80088b4:	fab2 f282 	clz	r2, r2
 80088b8:	2a00      	cmp	r2, #0
 80088ba:	f040 8092 	bne.w	80089e2 <__udivmoddi4+0x21a>
 80088be:	eba1 010c 	sub.w	r1, r1, ip
 80088c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80088c6:	fa1f fe8c 	uxth.w	lr, ip
 80088ca:	2601      	movs	r6, #1
 80088cc:	0c20      	lsrs	r0, r4, #16
 80088ce:	fbb1 f3f7 	udiv	r3, r1, r7
 80088d2:	fb07 1113 	mls	r1, r7, r3, r1
 80088d6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80088da:	fb0e f003 	mul.w	r0, lr, r3
 80088de:	4288      	cmp	r0, r1
 80088e0:	d908      	bls.n	80088f4 <__udivmoddi4+0x12c>
 80088e2:	eb1c 0101 	adds.w	r1, ip, r1
 80088e6:	f103 38ff 	add.w	r8, r3, #4294967295
 80088ea:	d202      	bcs.n	80088f2 <__udivmoddi4+0x12a>
 80088ec:	4288      	cmp	r0, r1
 80088ee:	f200 80cb 	bhi.w	8008a88 <__udivmoddi4+0x2c0>
 80088f2:	4643      	mov	r3, r8
 80088f4:	1a09      	subs	r1, r1, r0
 80088f6:	b2a4      	uxth	r4, r4
 80088f8:	fbb1 f0f7 	udiv	r0, r1, r7
 80088fc:	fb07 1110 	mls	r1, r7, r0, r1
 8008900:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8008904:	fb0e fe00 	mul.w	lr, lr, r0
 8008908:	45a6      	cmp	lr, r4
 800890a:	d908      	bls.n	800891e <__udivmoddi4+0x156>
 800890c:	eb1c 0404 	adds.w	r4, ip, r4
 8008910:	f100 31ff 	add.w	r1, r0, #4294967295
 8008914:	d202      	bcs.n	800891c <__udivmoddi4+0x154>
 8008916:	45a6      	cmp	lr, r4
 8008918:	f200 80bb 	bhi.w	8008a92 <__udivmoddi4+0x2ca>
 800891c:	4608      	mov	r0, r1
 800891e:	eba4 040e 	sub.w	r4, r4, lr
 8008922:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8008926:	e79c      	b.n	8008862 <__udivmoddi4+0x9a>
 8008928:	f1c6 0720 	rsb	r7, r6, #32
 800892c:	40b3      	lsls	r3, r6
 800892e:	fa22 fc07 	lsr.w	ip, r2, r7
 8008932:	ea4c 0c03 	orr.w	ip, ip, r3
 8008936:	fa20 f407 	lsr.w	r4, r0, r7
 800893a:	fa01 f306 	lsl.w	r3, r1, r6
 800893e:	431c      	orrs	r4, r3
 8008940:	40f9      	lsrs	r1, r7
 8008942:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8008946:	fa00 f306 	lsl.w	r3, r0, r6
 800894a:	fbb1 f8f9 	udiv	r8, r1, r9
 800894e:	0c20      	lsrs	r0, r4, #16
 8008950:	fa1f fe8c 	uxth.w	lr, ip
 8008954:	fb09 1118 	mls	r1, r9, r8, r1
 8008958:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800895c:	fb08 f00e 	mul.w	r0, r8, lr
 8008960:	4288      	cmp	r0, r1
 8008962:	fa02 f206 	lsl.w	r2, r2, r6
 8008966:	d90b      	bls.n	8008980 <__udivmoddi4+0x1b8>
 8008968:	eb1c 0101 	adds.w	r1, ip, r1
 800896c:	f108 3aff 	add.w	sl, r8, #4294967295
 8008970:	f080 8088 	bcs.w	8008a84 <__udivmoddi4+0x2bc>
 8008974:	4288      	cmp	r0, r1
 8008976:	f240 8085 	bls.w	8008a84 <__udivmoddi4+0x2bc>
 800897a:	f1a8 0802 	sub.w	r8, r8, #2
 800897e:	4461      	add	r1, ip
 8008980:	1a09      	subs	r1, r1, r0
 8008982:	b2a4      	uxth	r4, r4
 8008984:	fbb1 f0f9 	udiv	r0, r1, r9
 8008988:	fb09 1110 	mls	r1, r9, r0, r1
 800898c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8008990:	fb00 fe0e 	mul.w	lr, r0, lr
 8008994:	458e      	cmp	lr, r1
 8008996:	d908      	bls.n	80089aa <__udivmoddi4+0x1e2>
 8008998:	eb1c 0101 	adds.w	r1, ip, r1
 800899c:	f100 34ff 	add.w	r4, r0, #4294967295
 80089a0:	d26c      	bcs.n	8008a7c <__udivmoddi4+0x2b4>
 80089a2:	458e      	cmp	lr, r1
 80089a4:	d96a      	bls.n	8008a7c <__udivmoddi4+0x2b4>
 80089a6:	3802      	subs	r0, #2
 80089a8:	4461      	add	r1, ip
 80089aa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80089ae:	fba0 9402 	umull	r9, r4, r0, r2
 80089b2:	eba1 010e 	sub.w	r1, r1, lr
 80089b6:	42a1      	cmp	r1, r4
 80089b8:	46c8      	mov	r8, r9
 80089ba:	46a6      	mov	lr, r4
 80089bc:	d356      	bcc.n	8008a6c <__udivmoddi4+0x2a4>
 80089be:	d053      	beq.n	8008a68 <__udivmoddi4+0x2a0>
 80089c0:	b15d      	cbz	r5, 80089da <__udivmoddi4+0x212>
 80089c2:	ebb3 0208 	subs.w	r2, r3, r8
 80089c6:	eb61 010e 	sbc.w	r1, r1, lr
 80089ca:	fa01 f707 	lsl.w	r7, r1, r7
 80089ce:	fa22 f306 	lsr.w	r3, r2, r6
 80089d2:	40f1      	lsrs	r1, r6
 80089d4:	431f      	orrs	r7, r3
 80089d6:	e9c5 7100 	strd	r7, r1, [r5]
 80089da:	2600      	movs	r6, #0
 80089dc:	4631      	mov	r1, r6
 80089de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089e2:	f1c2 0320 	rsb	r3, r2, #32
 80089e6:	40d8      	lsrs	r0, r3
 80089e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80089ec:	fa21 f303 	lsr.w	r3, r1, r3
 80089f0:	4091      	lsls	r1, r2
 80089f2:	4301      	orrs	r1, r0
 80089f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80089f8:	fa1f fe8c 	uxth.w	lr, ip
 80089fc:	fbb3 f0f7 	udiv	r0, r3, r7
 8008a00:	fb07 3610 	mls	r6, r7, r0, r3
 8008a04:	0c0b      	lsrs	r3, r1, #16
 8008a06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8008a0a:	fb00 f60e 	mul.w	r6, r0, lr
 8008a0e:	429e      	cmp	r6, r3
 8008a10:	fa04 f402 	lsl.w	r4, r4, r2
 8008a14:	d908      	bls.n	8008a28 <__udivmoddi4+0x260>
 8008a16:	eb1c 0303 	adds.w	r3, ip, r3
 8008a1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8008a1e:	d22f      	bcs.n	8008a80 <__udivmoddi4+0x2b8>
 8008a20:	429e      	cmp	r6, r3
 8008a22:	d92d      	bls.n	8008a80 <__udivmoddi4+0x2b8>
 8008a24:	3802      	subs	r0, #2
 8008a26:	4463      	add	r3, ip
 8008a28:	1b9b      	subs	r3, r3, r6
 8008a2a:	b289      	uxth	r1, r1
 8008a2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8008a30:	fb07 3316 	mls	r3, r7, r6, r3
 8008a34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008a38:	fb06 f30e 	mul.w	r3, r6, lr
 8008a3c:	428b      	cmp	r3, r1
 8008a3e:	d908      	bls.n	8008a52 <__udivmoddi4+0x28a>
 8008a40:	eb1c 0101 	adds.w	r1, ip, r1
 8008a44:	f106 38ff 	add.w	r8, r6, #4294967295
 8008a48:	d216      	bcs.n	8008a78 <__udivmoddi4+0x2b0>
 8008a4a:	428b      	cmp	r3, r1
 8008a4c:	d914      	bls.n	8008a78 <__udivmoddi4+0x2b0>
 8008a4e:	3e02      	subs	r6, #2
 8008a50:	4461      	add	r1, ip
 8008a52:	1ac9      	subs	r1, r1, r3
 8008a54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8008a58:	e738      	b.n	80088cc <__udivmoddi4+0x104>
 8008a5a:	462e      	mov	r6, r5
 8008a5c:	4628      	mov	r0, r5
 8008a5e:	e705      	b.n	800886c <__udivmoddi4+0xa4>
 8008a60:	4606      	mov	r6, r0
 8008a62:	e6e3      	b.n	800882c <__udivmoddi4+0x64>
 8008a64:	4618      	mov	r0, r3
 8008a66:	e6f8      	b.n	800885a <__udivmoddi4+0x92>
 8008a68:	454b      	cmp	r3, r9
 8008a6a:	d2a9      	bcs.n	80089c0 <__udivmoddi4+0x1f8>
 8008a6c:	ebb9 0802 	subs.w	r8, r9, r2
 8008a70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8008a74:	3801      	subs	r0, #1
 8008a76:	e7a3      	b.n	80089c0 <__udivmoddi4+0x1f8>
 8008a78:	4646      	mov	r6, r8
 8008a7a:	e7ea      	b.n	8008a52 <__udivmoddi4+0x28a>
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	e794      	b.n	80089aa <__udivmoddi4+0x1e2>
 8008a80:	4640      	mov	r0, r8
 8008a82:	e7d1      	b.n	8008a28 <__udivmoddi4+0x260>
 8008a84:	46d0      	mov	r8, sl
 8008a86:	e77b      	b.n	8008980 <__udivmoddi4+0x1b8>
 8008a88:	3b02      	subs	r3, #2
 8008a8a:	4461      	add	r1, ip
 8008a8c:	e732      	b.n	80088f4 <__udivmoddi4+0x12c>
 8008a8e:	4630      	mov	r0, r6
 8008a90:	e709      	b.n	80088a6 <__udivmoddi4+0xde>
 8008a92:	4464      	add	r4, ip
 8008a94:	3802      	subs	r0, #2
 8008a96:	e742      	b.n	800891e <__udivmoddi4+0x156>

08008a98 <__aeabi_idiv0>:
 8008a98:	4770      	bx	lr
 8008a9a:	bf00      	nop

08008a9c <arm_sqrt_f32>:
   * <code>in</code> is negative value and returns zero output for negative values.
   */
  static __INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	ed87 0a01 	vstr	s0, [r7, #4]
 8008aa6:	6038      	str	r0, [r7, #0]
    if(in >= 0.0f)
 8008aa8:	edd7 7a01 	vldr	s15, [r7, #4]
 8008aac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ab4:	db0a      	blt.n	8008acc <arm_sqrt_f32+0x30>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8008ab6:	ed97 0a01 	vldr	s0, [r7, #4]
 8008aba:	f014 fd99 	bl	801d5f0 <sqrtf>
 8008abe:	eef0 7a40 	vmov.f32	s15, s0
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8008ac8:	2300      	movs	r3, #0
 8008aca:	e005      	b.n	8008ad8 <arm_sqrt_f32+0x3c>
    }
    else
    {
      *pOut = 0.0f;
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	f04f 0200 	mov.w	r2, #0
 8008ad2:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8008ad4:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3708      	adds	r7, #8
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <arm_cmplx_mag_f32>:

void arm_cmplx_mag_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b088      	sub	sp, #32
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	60b9      	str	r1, [r7, #8]
 8008aea:	607a      	str	r2, [r7, #4]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  uint32_t blkCnt;                               /* loop counter */

  /*loop Unrolling */
  blkCnt = numSamples >> 2u;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	089b      	lsrs	r3, r3, #2
 8008af0:	61fb      	str	r3, [r7, #28]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8008af2:	e072      	b.n	8008bda <arm_cmplx_mag_f32+0xfa>
  {

    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	1d1a      	adds	r2, r3, #4
 8008af8:	60fa      	str	r2, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	1d1a      	adds	r2, r3, #4
 8008b02:	60fa      	str	r2, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	617b      	str	r3, [r7, #20]
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8008b08:	edd7 7a06 	vldr	s15, [r7, #24]
 8008b0c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8008b10:	edd7 7a05 	vldr	s15, [r7, #20]
 8008b14:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008b18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	1d1a      	adds	r2, r3, #4
 8008b20:	60ba      	str	r2, [r7, #8]
 8008b22:	4618      	mov	r0, r3
 8008b24:	eeb0 0a67 	vmov.f32	s0, s15
 8008b28:	f7ff ffb8 	bl	8008a9c <arm_sqrt_f32>

    realIn = *pSrc++;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	1d1a      	adds	r2, r3, #4
 8008b30:	60fa      	str	r2, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	1d1a      	adds	r2, r3, #4
 8008b3a:	60fa      	str	r2, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8008b40:	edd7 7a06 	vldr	s15, [r7, #24]
 8008b44:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8008b48:	edd7 7a05 	vldr	s15, [r7, #20]
 8008b4c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008b50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	1d1a      	adds	r2, r3, #4
 8008b58:	60ba      	str	r2, [r7, #8]
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	eeb0 0a67 	vmov.f32	s0, s15
 8008b60:	f7ff ff9c 	bl	8008a9c <arm_sqrt_f32>

    realIn = *pSrc++;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	1d1a      	adds	r2, r3, #4
 8008b68:	60fa      	str	r2, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	1d1a      	adds	r2, r3, #4
 8008b72:	60fa      	str	r2, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8008b78:	edd7 7a06 	vldr	s15, [r7, #24]
 8008b7c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8008b80:	edd7 7a05 	vldr	s15, [r7, #20]
 8008b84:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008b88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	1d1a      	adds	r2, r3, #4
 8008b90:	60ba      	str	r2, [r7, #8]
 8008b92:	4618      	mov	r0, r3
 8008b94:	eeb0 0a67 	vmov.f32	s0, s15
 8008b98:	f7ff ff80 	bl	8008a9c <arm_sqrt_f32>

    realIn = *pSrc++;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	1d1a      	adds	r2, r3, #4
 8008ba0:	60fa      	str	r2, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	1d1a      	adds	r2, r3, #4
 8008baa:	60fa      	str	r2, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8008bb0:	edd7 7a06 	vldr	s15, [r7, #24]
 8008bb4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8008bb8:	edd7 7a05 	vldr	s15, [r7, #20]
 8008bbc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008bc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	1d1a      	adds	r2, r3, #4
 8008bc8:	60ba      	str	r2, [r7, #8]
 8008bca:	4618      	mov	r0, r3
 8008bcc:	eeb0 0a67 	vmov.f32	s0, s15
 8008bd0:	f7ff ff64 	bl	8008a9c <arm_sqrt_f32>


    /* Decrement the loop counter */
    blkCnt--;
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	3b01      	subs	r3, #1
 8008bd8:	61fb      	str	r3, [r7, #28]
  while(blkCnt > 0u)
 8008bda:	69fb      	ldr	r3, [r7, #28]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d189      	bne.n	8008af4 <arm_cmplx_mag_f32+0x14>
  }

  /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = numSamples % 0x4u;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f003 0303 	and.w	r3, r3, #3
 8008be6:	61fb      	str	r3, [r7, #28]

  while(blkCnt > 0u)
 8008be8:	e01e      	b.n	8008c28 <arm_cmplx_mag_f32+0x148>
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	1d1a      	adds	r2, r3, #4
 8008bee:	60fa      	str	r2, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	1d1a      	adds	r2, r3, #4
 8008bf8:	60fa      	str	r2, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	617b      	str	r3, [r7, #20]
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8008bfe:	edd7 7a06 	vldr	s15, [r7, #24]
 8008c02:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8008c06:	edd7 7a05 	vldr	s15, [r7, #20]
 8008c0a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008c0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	1d1a      	adds	r2, r3, #4
 8008c16:	60ba      	str	r2, [r7, #8]
 8008c18:	4618      	mov	r0, r3
 8008c1a:	eeb0 0a67 	vmov.f32	s0, s15
 8008c1e:	f7ff ff3d 	bl	8008a9c <arm_sqrt_f32>

    /* Decrement the loop counter */
    blkCnt--;
 8008c22:	69fb      	ldr	r3, [r7, #28]
 8008c24:	3b01      	subs	r3, #1
 8008c26:	61fb      	str	r3, [r7, #28]
  while(blkCnt > 0u)
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d1dd      	bne.n	8008bea <arm_cmplx_mag_f32+0x10a>
    numSamples--;
  }

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 8008c2e:	bf00      	nop
 8008c30:	bf00      	nop
 8008c32:	3720      	adds	r7, #32
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <arm_max_f32>:
void arm_max_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b08b      	sub	sp, #44	; 0x2c
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	60b9      	str	r1, [r7, #8]
 8008c42:	607a      	str	r2, [r7, #4]
 8008c44:	603b      	str	r3, [r7, #0]
  /* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t maxVal1, maxVal2, out;               /* Temporary variables to store the output value. */
  uint32_t blkCnt, outIndex, count;              /* loop counter */

  /* Initialise the count value. */
  count = 0u;
 8008c46:	2300      	movs	r3, #0
 8008c48:	61bb      	str	r3, [r7, #24]
  /* Initialise the index value to zero. */
  outIndex = 0u;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	61fb      	str	r3, [r7, #28]
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	1d1a      	adds	r2, r3, #4
 8008c52:	60fa      	str	r2, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	627b      	str	r3, [r7, #36]	; 0x24

  /* Loop unrolling */
  blkCnt = (blockSize - 1u) >> 2u;
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	3b01      	subs	r3, #1
 8008c5c:	089b      	lsrs	r3, r3, #2
 8008c5e:	623b      	str	r3, [r7, #32]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  while(blkCnt > 0u)
 8008c60:	e051      	b.n	8008d06 <arm_max_f32+0xce>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	1d1a      	adds	r2, r3, #4
 8008c66:	60fa      	str	r2, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	617b      	str	r3, [r7, #20]

    maxVal2 = *pSrc++;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	1d1a      	adds	r2, r3, #4
 8008c70:	60fa      	str	r2, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if(out < maxVal1)
 8008c76:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008c7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8008c7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c86:	d504      	bpl.n	8008c92 <arm_max_f32+0x5a>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 1u;
 8008c8c:	69bb      	ldr	r3, [r7, #24]
 8008c8e:	3301      	adds	r3, #1
 8008c90:	61fb      	str	r3, [r7, #28]
    }

    maxVal1 = *pSrc++;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	1d1a      	adds	r2, r3, #4
 8008c96:	60fa      	str	r2, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if(out < maxVal2)
 8008c9c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008ca0:	edd7 7a04 	vldr	s15, [r7, #16]
 8008ca4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cac:	d504      	bpl.n	8008cb8 <arm_max_f32+0x80>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 2u;
 8008cb2:	69bb      	ldr	r3, [r7, #24]
 8008cb4:	3302      	adds	r3, #2
 8008cb6:	61fb      	str	r3, [r7, #28]
    }

    maxVal2 = *pSrc++;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	1d1a      	adds	r2, r3, #4
 8008cbc:	60fa      	str	r2, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if(out < maxVal1)
 8008cc2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008cc6:	edd7 7a05 	vldr	s15, [r7, #20]
 8008cca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cd2:	d504      	bpl.n	8008cde <arm_max_f32+0xa6>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 3u;
 8008cd8:	69bb      	ldr	r3, [r7, #24]
 8008cda:	3303      	adds	r3, #3
 8008cdc:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the maximum value */
    if(out < maxVal2)
 8008cde:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008ce2:	edd7 7a04 	vldr	s15, [r7, #16]
 8008ce6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cee:	d504      	bpl.n	8008cfa <arm_max_f32+0xc2>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 4u;
 8008cf4:	69bb      	ldr	r3, [r7, #24]
 8008cf6:	3304      	adds	r3, #4
 8008cf8:	61fb      	str	r3, [r7, #28]
    }

    count += 4u;
 8008cfa:	69bb      	ldr	r3, [r7, #24]
 8008cfc:	3304      	adds	r3, #4
 8008cfe:	61bb      	str	r3, [r7, #24]

    /* Decrement the loop counter */
    blkCnt--;
 8008d00:	6a3b      	ldr	r3, [r7, #32]
 8008d02:	3b01      	subs	r3, #1
 8008d04:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 8008d06:	6a3b      	ldr	r3, [r7, #32]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d1aa      	bne.n	8008c62 <arm_max_f32+0x2a>
  }

  /* if (blockSize - 1u) is not multiple of 4 */
  blkCnt = (blockSize - 1u) % 4u;
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	3b01      	subs	r3, #1
 8008d10:	f003 0303 	and.w	r3, r3, #3
 8008d14:	623b      	str	r3, [r7, #32]

  blkCnt = (blockSize - 1u);

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 8008d16:	e016      	b.n	8008d46 <arm_max_f32+0x10e>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	1d1a      	adds	r2, r3, #4
 8008d1c:	60fa      	str	r2, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if(out < maxVal1)
 8008d22:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008d26:	edd7 7a05 	vldr	s15, [r7, #20]
 8008d2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d32:	d505      	bpl.n	8008d40 <arm_max_f32+0x108>
    {
      /* Update the maximum value and it's index */
      out = maxVal1;
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = blockSize - blkCnt;
 8008d38:	68ba      	ldr	r2, [r7, #8]
 8008d3a:	6a3b      	ldr	r3, [r7, #32]
 8008d3c:	1ad3      	subs	r3, r2, r3
 8008d3e:	61fb      	str	r3, [r7, #28]
    }


    /* Decrement the loop counter */
    blkCnt--;
 8008d40:	6a3b      	ldr	r3, [r7, #32]
 8008d42:	3b01      	subs	r3, #1
 8008d44:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 8008d46:	6a3b      	ldr	r3, [r7, #32]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d1e5      	bne.n	8008d18 <arm_max_f32+0xe0>

  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d50:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	69fa      	ldr	r2, [r7, #28]
 8008d56:	601a      	str	r2, [r3, #0]
}
 8008d58:	bf00      	nop
 8008d5a:	372c      	adds	r7, #44	; 0x2c
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr

08008d64 <arm_mean_f32>:

void arm_mean_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b08b      	sub	sp, #44	; 0x2c
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	60f8      	str	r0, [r7, #12]
 8008d6c:	60b9      	str	r1, [r7, #8]
 8008d6e:	607a      	str	r2, [r7, #4]
  float32_t sum = 0.0f;                          /* Temporary result storage */
 8008d70:	f04f 0300 	mov.w	r3, #0
 8008d74:	627b      	str	r3, [r7, #36]	; 0x24

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t in1, in2, in3, in4;

  /*loop Unrolling */
  blkCnt = blockSize >> 2u;
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	089b      	lsrs	r3, r3, #2
 8008d7a:	623b      	str	r3, [r7, #32]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8008d7c:	e036      	b.n	8008dec <arm_mean_f32+0x88>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    in1 = *pSrc++;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	1d1a      	adds	r2, r3, #4
 8008d82:	60fa      	str	r2, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	61fb      	str	r3, [r7, #28]
    in2 = *pSrc++;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	1d1a      	adds	r2, r3, #4
 8008d8c:	60fa      	str	r2, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	61bb      	str	r3, [r7, #24]
    in3 = *pSrc++;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	1d1a      	adds	r2, r3, #4
 8008d96:	60fa      	str	r2, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	617b      	str	r3, [r7, #20]
    in4 = *pSrc++;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	1d1a      	adds	r2, r3, #4
 8008da0:	60fa      	str	r2, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	613b      	str	r3, [r7, #16]

    sum += in1;
 8008da6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008daa:	edd7 7a07 	vldr	s15, [r7, #28]
 8008dae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008db2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    sum += in2;
 8008db6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008dba:	edd7 7a06 	vldr	s15, [r7, #24]
 8008dbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008dc2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    sum += in3;
 8008dc6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008dca:	edd7 7a05 	vldr	s15, [r7, #20]
 8008dce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008dd2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    sum += in4;
 8008dd6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008dda:	edd7 7a04 	vldr	s15, [r7, #16]
 8008dde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008de2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    /* Decrement the loop counter */
    blkCnt--;
 8008de6:	6a3b      	ldr	r3, [r7, #32]
 8008de8:	3b01      	subs	r3, #1
 8008dea:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 8008dec:	6a3b      	ldr	r3, [r7, #32]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d1c5      	bne.n	8008d7e <arm_mean_f32+0x1a>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	f003 0303 	and.w	r3, r3, #3
 8008df8:	623b      	str	r3, [r7, #32]
  /* Loop over blockSize number of values */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 8008dfa:	e00d      	b.n	8008e18 <arm_mean_f32+0xb4>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    sum += *pSrc++;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	1d1a      	adds	r2, r3, #4
 8008e00:	60fa      	str	r2, [r7, #12]
 8008e02:	edd3 7a00 	vldr	s15, [r3]
 8008e06:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008e0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e0e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    /* Decrement the loop counter */
    blkCnt--;
 8008e12:	6a3b      	ldr	r3, [r7, #32]
 8008e14:	3b01      	subs	r3, #1
 8008e16:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 8008e18:	6a3b      	ldr	r3, [r7, #32]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d1ee      	bne.n	8008dfc <arm_mean_f32+0x98>
  }

  /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
  /* Store the result to the destination */
  *pResult = sum / (float32_t) blockSize;
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	ee07 3a90 	vmov	s15, r3
 8008e24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008e28:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8008e2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	edc3 7a00 	vstr	s15, [r3]
}
 8008e36:	bf00      	nop
 8008e38:	372c      	adds	r7, #44	; 0x2c
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e40:	4770      	bx	lr

08008e42 <arm_min_f32>:
void arm_min_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
 8008e42:	b480      	push	{r7}
 8008e44:	b08b      	sub	sp, #44	; 0x2c
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	60f8      	str	r0, [r7, #12]
 8008e4a:	60b9      	str	r1, [r7, #8]
 8008e4c:	607a      	str	r2, [r7, #4]
 8008e4e:	603b      	str	r3, [r7, #0]

  float32_t minVal1, minVal2, out;               /* Temporary variables to store the output value. */
  uint32_t blkCnt, outIndex, count;              /* loop counter */

  /* Initialise the count value. */
  count = 0u;
 8008e50:	2300      	movs	r3, #0
 8008e52:	61bb      	str	r3, [r7, #24]
  /* Initialise the index value to zero. */
  outIndex = 0u;
 8008e54:	2300      	movs	r3, #0
 8008e56:	61fb      	str	r3, [r7, #28]
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	1d1a      	adds	r2, r3, #4
 8008e5c:	60fa      	str	r2, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	627b      	str	r3, [r7, #36]	; 0x24

  /* Loop unrolling */
  blkCnt = (blockSize - 1u) >> 2u;
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	3b01      	subs	r3, #1
 8008e66:	089b      	lsrs	r3, r3, #2
 8008e68:	623b      	str	r3, [r7, #32]

  while(blkCnt > 0)
 8008e6a:	e051      	b.n	8008f10 <arm_min_f32+0xce>
  {
    /* Initialize minVal to the next consecutive values one by one */
    minVal1 = *pSrc++;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	1d1a      	adds	r2, r3, #4
 8008e70:	60fa      	str	r2, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	617b      	str	r3, [r7, #20]
    minVal2 = *pSrc++;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	1d1a      	adds	r2, r3, #4
 8008e7a:	60fa      	str	r2, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	613b      	str	r3, [r7, #16]

    /* compare for the minimum value */
    if(out > minVal1)
 8008e80:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008e84:	edd7 7a05 	vldr	s15, [r7, #20]
 8008e88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e90:	dd04      	ble.n	8008e9c <arm_min_f32+0x5a>
    {
      /* Update the minimum value and its index */
      out = minVal1;
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 1u;
 8008e96:	69bb      	ldr	r3, [r7, #24]
 8008e98:	3301      	adds	r3, #1
 8008e9a:	61fb      	str	r3, [r7, #28]
    }

    minVal1 = *pSrc++;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	1d1a      	adds	r2, r3, #4
 8008ea0:	60fa      	str	r2, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	617b      	str	r3, [r7, #20]

    /* compare for the minimum value */
    if(out > minVal2)
 8008ea6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008eaa:	edd7 7a04 	vldr	s15, [r7, #16]
 8008eae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eb6:	dd04      	ble.n	8008ec2 <arm_min_f32+0x80>
    {
      /* Update the minimum value and its index */
      out = minVal2;
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 2u;
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	3302      	adds	r3, #2
 8008ec0:	61fb      	str	r3, [r7, #28]
    }

    minVal2 = *pSrc++;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	1d1a      	adds	r2, r3, #4
 8008ec6:	60fa      	str	r2, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	613b      	str	r3, [r7, #16]

    /* compare for the minimum value */
    if(out > minVal1)
 8008ecc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008ed0:	edd7 7a05 	vldr	s15, [r7, #20]
 8008ed4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008edc:	dd04      	ble.n	8008ee8 <arm_min_f32+0xa6>
    {
      /* Update the minimum value and its index */
      out = minVal1;
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 3u;
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	3303      	adds	r3, #3
 8008ee6:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the minimum value */
    if(out > minVal2)
 8008ee8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008eec:	edd7 7a04 	vldr	s15, [r7, #16]
 8008ef0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ef8:	dd04      	ble.n	8008f04 <arm_min_f32+0xc2>
    {
      /* Update the minimum value and its index */
      out = minVal2;
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 4u;
 8008efe:	69bb      	ldr	r3, [r7, #24]
 8008f00:	3304      	adds	r3, #4
 8008f02:	61fb      	str	r3, [r7, #28]
    }

    count += 4u;
 8008f04:	69bb      	ldr	r3, [r7, #24]
 8008f06:	3304      	adds	r3, #4
 8008f08:	61bb      	str	r3, [r7, #24]

    blkCnt--;
 8008f0a:	6a3b      	ldr	r3, [r7, #32]
 8008f0c:	3b01      	subs	r3, #1
 8008f0e:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0)
 8008f10:	6a3b      	ldr	r3, [r7, #32]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d1aa      	bne.n	8008e6c <arm_min_f32+0x2a>
  }

  /* if (blockSize - 1u ) is not multiple of 4 */
  blkCnt = (blockSize - 1u) % 4u;
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	3b01      	subs	r3, #1
 8008f1a:	f003 0303 	and.w	r3, r3, #3
 8008f1e:	623b      	str	r3, [r7, #32]

  blkCnt = (blockSize - 1u);

#endif //      #ifndef ARM_MATH_CM0_FAMILY

  while(blkCnt > 0)
 8008f20:	e016      	b.n	8008f50 <arm_min_f32+0x10e>
  {
    /* Initialize minVal to the next consecutive values one by one */
    minVal1 = *pSrc++;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	1d1a      	adds	r2, r3, #4
 8008f26:	60fa      	str	r2, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	617b      	str	r3, [r7, #20]

    /* compare for the minimum value */
    if(out > minVal1)
 8008f2c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008f30:	edd7 7a05 	vldr	s15, [r7, #20]
 8008f34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f3c:	dd05      	ble.n	8008f4a <arm_min_f32+0x108>
    {
      /* Update the minimum value and it's index */
      out = minVal1;
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = blockSize - blkCnt;
 8008f42:	68ba      	ldr	r2, [r7, #8]
 8008f44:	6a3b      	ldr	r3, [r7, #32]
 8008f46:	1ad3      	subs	r3, r2, r3
 8008f48:	61fb      	str	r3, [r7, #28]
    }

    blkCnt--;
 8008f4a:	6a3b      	ldr	r3, [r7, #32]
 8008f4c:	3b01      	subs	r3, #1
 8008f4e:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0)
 8008f50:	6a3b      	ldr	r3, [r7, #32]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d1e5      	bne.n	8008f22 <arm_min_f32+0xe0>

  }

  /* Store the minimum value and it's index into destination pointers */
  *pResult = out;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f5a:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	69fa      	ldr	r2, [r7, #28]
 8008f60:	601a      	str	r2, [r3, #0]
}
 8008f62:	bf00      	nop
 8008f64:	372c      	adds	r7, #44	; 0x2c
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr

08008f6e <arm_sqrt_f32>:
  {
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b082      	sub	sp, #8
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	ed87 0a01 	vstr	s0, [r7, #4]
 8008f78:	6038      	str	r0, [r7, #0]
    if(in >= 0.0f)
 8008f7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8008f7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f86:	db0a      	blt.n	8008f9e <arm_sqrt_f32+0x30>
      *pOut = __builtin_sqrtf(in);
 8008f88:	ed97 0a01 	vldr	s0, [r7, #4]
 8008f8c:	f014 fb30 	bl	801d5f0 <sqrtf>
 8008f90:	eef0 7a40 	vmov.f32	s15, s0
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	e005      	b.n	8008faa <arm_sqrt_f32+0x3c>
      *pOut = 0.0f;
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	f04f 0200 	mov.w	r2, #0
 8008fa4:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8008fa6:	f04f 33ff 	mov.w	r3, #4294967295
  }
 8008faa:	4618      	mov	r0, r3
 8008fac:	3708      	adds	r7, #8
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}

08008fb2 <arm_rms_f32>:

void arm_rms_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult)
{
 8008fb2:	b580      	push	{r7, lr}
 8008fb4:	b088      	sub	sp, #32
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	60f8      	str	r0, [r7, #12]
 8008fba:	60b9      	str	r1, [r7, #8]
 8008fbc:	607a      	str	r2, [r7, #4]
  float32_t sum = 0.0f;                          /* Accumulator */
 8008fbe:	f04f 0300 	mov.w	r3, #0
 8008fc2:	61fb      	str	r3, [r7, #28]
#ifndef ARM_MATH_CM0_FAMILY

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  /* loop Unrolling */
  blkCnt = blockSize >> 2u;
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	089b      	lsrs	r3, r3, #2
 8008fc8:	61bb      	str	r3, [r7, #24]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8008fca:	e03e      	b.n	800904a <arm_rms_f32+0x98>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + A[2] * A[2] + ... + A[blockSize-1] * A[blockSize-1] */
    /* Compute sum of the squares and then store the result in a temporary variable, sum  */
    in = *pSrc++;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	1d1a      	adds	r2, r3, #4
 8008fd0:	60fa      	str	r2, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	617b      	str	r3, [r7, #20]
    sum += in * in;
 8008fd6:	edd7 7a05 	vldr	s15, [r7, #20]
 8008fda:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008fde:	ed97 7a07 	vldr	s14, [r7, #28]
 8008fe2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008fe6:	edc7 7a07 	vstr	s15, [r7, #28]
    in = *pSrc++;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	1d1a      	adds	r2, r3, #4
 8008fee:	60fa      	str	r2, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	617b      	str	r3, [r7, #20]
    sum += in * in;
 8008ff4:	edd7 7a05 	vldr	s15, [r7, #20]
 8008ff8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008ffc:	ed97 7a07 	vldr	s14, [r7, #28]
 8009000:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009004:	edc7 7a07 	vstr	s15, [r7, #28]
    in = *pSrc++;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	1d1a      	adds	r2, r3, #4
 800900c:	60fa      	str	r2, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	617b      	str	r3, [r7, #20]
    sum += in * in;
 8009012:	edd7 7a05 	vldr	s15, [r7, #20]
 8009016:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800901a:	ed97 7a07 	vldr	s14, [r7, #28]
 800901e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009022:	edc7 7a07 	vstr	s15, [r7, #28]
    in = *pSrc++;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	1d1a      	adds	r2, r3, #4
 800902a:	60fa      	str	r2, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	617b      	str	r3, [r7, #20]
    sum += in * in;
 8009030:	edd7 7a05 	vldr	s15, [r7, #20]
 8009034:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009038:	ed97 7a07 	vldr	s14, [r7, #28]
 800903c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009040:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Decrement the loop counter */
    blkCnt--;
 8009044:	69bb      	ldr	r3, [r7, #24]
 8009046:	3b01      	subs	r3, #1
 8009048:	61bb      	str	r3, [r7, #24]
  while(blkCnt > 0u)
 800904a:	69bb      	ldr	r3, [r7, #24]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d1bd      	bne.n	8008fcc <arm_rms_f32+0x1a>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	f003 0303 	and.w	r3, r3, #3
 8009056:	61bb      	str	r3, [r7, #24]
  /* Loop over blockSize number of values */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 8009058:	e011      	b.n	800907e <arm_rms_f32+0xcc>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + A[2] * A[2] + ... + A[blockSize-1] * A[blockSize-1] */
    /* Compute sum of the squares and then store the results in a temporary variable, sum  */
    in = *pSrc++;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	1d1a      	adds	r2, r3, #4
 800905e:	60fa      	str	r2, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	617b      	str	r3, [r7, #20]
    sum += in * in;
 8009064:	edd7 7a05 	vldr	s15, [r7, #20]
 8009068:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800906c:	ed97 7a07 	vldr	s14, [r7, #28]
 8009070:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009074:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Decrement the loop counter */
    blkCnt--;
 8009078:	69bb      	ldr	r3, [r7, #24]
 800907a:	3b01      	subs	r3, #1
 800907c:	61bb      	str	r3, [r7, #24]
  while(blkCnt > 0u)
 800907e:	69bb      	ldr	r3, [r7, #24]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d1ea      	bne.n	800905a <arm_rms_f32+0xa8>
  }

  /* Compute Rms and store the result in the destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	ee07 3a90 	vmov	s15, r3
 800908a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800908e:	ed97 7a07 	vldr	s14, [r7, #28]
 8009092:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	eeb0 0a66 	vmov.f32	s0, s13
 800909c:	f7ff ff67 	bl	8008f6e <arm_sqrt_f32>
}
 80090a0:	bf00      	nop
 80090a2:	3720      	adds	r7, #32
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}

080090a8 <arm_sqrt_f32>:
  {
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80090b2:	6038      	str	r0, [r7, #0]
    if(in >= 0.0f)
 80090b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80090b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80090bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090c0:	db0a      	blt.n	80090d8 <arm_sqrt_f32+0x30>
      *pOut = __builtin_sqrtf(in);
 80090c2:	ed97 0a01 	vldr	s0, [r7, #4]
 80090c6:	f014 fa93 	bl	801d5f0 <sqrtf>
 80090ca:	eef0 7a40 	vmov.f32	s15, s0
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 80090d4:	2300      	movs	r3, #0
 80090d6:	e005      	b.n	80090e4 <arm_sqrt_f32+0x3c>
      *pOut = 0.0f;
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	f04f 0200 	mov.w	r2, #0
 80090de:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 80090e0:	f04f 33ff 	mov.w	r3, #4294967295
  }
 80090e4:	4618      	mov	r0, r3
 80090e6:	3708      	adds	r7, #8
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <arm_std_f32>:

void arm_std_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b08c      	sub	sp, #48	; 0x30
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	60f8      	str	r0, [r7, #12]
 80090f4:	60b9      	str	r1, [r7, #8]
 80090f6:	607a      	str	r2, [r7, #4]
  float32_t sum = 0.0f;                          /* Temporary result storage */
 80090f8:	f04f 0300 	mov.w	r3, #0
 80090fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  float32_t sumOfSquares = 0.0f;                 /* Sum of squares */
 80090fe:	f04f 0300 	mov.w	r3, #0
 8009102:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t meanOfSquares, mean, squareOfMean;

	if(blockSize == 1)
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	2b01      	cmp	r3, #1
 8009108:	d104      	bne.n	8009114 <arm_std_f32+0x28>
	{
		*pResult = 0;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f04f 0200 	mov.w	r2, #0
 8009110:	601a      	str	r2, [r3, #0]
		return;
 8009112:	e0c4      	b.n	800929e <arm_std_f32+0x1b2>
	}

  /*loop Unrolling */
  blkCnt = blockSize >> 2u;
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	089b      	lsrs	r3, r3, #2
 8009118:	627b      	str	r3, [r7, #36]	; 0x24

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 800911a:	e05e      	b.n	80091da <arm_std_f32+0xee>
  {
    /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1])  */
    /* Compute Sum of squares of the input samples    
     * and then store the result in a temporary variable, sum. */
    in = *pSrc++;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	1d1a      	adds	r2, r3, #4
 8009120:	60fa      	str	r2, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	617b      	str	r3, [r7, #20]
    sum += in;
 8009126:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800912a:	edd7 7a05 	vldr	s15, [r7, #20]
 800912e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009132:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 8009136:	edd7 7a05 	vldr	s15, [r7, #20]
 800913a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800913e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009142:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009146:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    in = *pSrc++;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	1d1a      	adds	r2, r3, #4
 800914e:	60fa      	str	r2, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	617b      	str	r3, [r7, #20]
    sum += in;
 8009154:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8009158:	edd7 7a05 	vldr	s15, [r7, #20]
 800915c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009160:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 8009164:	edd7 7a05 	vldr	s15, [r7, #20]
 8009168:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800916c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009170:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009174:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    in = *pSrc++;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	1d1a      	adds	r2, r3, #4
 800917c:	60fa      	str	r2, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	617b      	str	r3, [r7, #20]
    sum += in;
 8009182:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8009186:	edd7 7a05 	vldr	s15, [r7, #20]
 800918a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800918e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 8009192:	edd7 7a05 	vldr	s15, [r7, #20]
 8009196:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800919a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800919e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80091a2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    in = *pSrc++;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	1d1a      	adds	r2, r3, #4
 80091aa:	60fa      	str	r2, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	617b      	str	r3, [r7, #20]
    sum += in;
 80091b0:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80091b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80091b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80091bc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 80091c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80091c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80091c8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80091cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80091d0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    /* Decrement the loop counter */
    blkCnt--;
 80091d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d6:	3b01      	subs	r3, #1
 80091d8:	627b      	str	r3, [r7, #36]	; 0x24
  while(blkCnt > 0u)
 80091da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d19d      	bne.n	800911c <arm_std_f32+0x30>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	f003 0303 	and.w	r3, r3, #3
 80091e6:	627b      	str	r3, [r7, #36]	; 0x24

  while(blkCnt > 0u)
 80091e8:	e019      	b.n	800921e <arm_std_f32+0x132>
  {
    /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1]) */
    /* Compute Sum of squares of the input samples    
     * and then store the result in a temporary variable, sum. */
    in = *pSrc++;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	1d1a      	adds	r2, r3, #4
 80091ee:	60fa      	str	r2, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	617b      	str	r3, [r7, #20]
    sum += in;
 80091f4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80091f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80091fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009200:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 8009204:	edd7 7a05 	vldr	s15, [r7, #20]
 8009208:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800920c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009210:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009214:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    /* Decrement the loop counter */
    blkCnt--;
 8009218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921a:	3b01      	subs	r3, #1
 800921c:	627b      	str	r3, [r7, #36]	; 0x24
  while(blkCnt > 0u)
 800921e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009220:	2b00      	cmp	r3, #0
 8009222:	d1e2      	bne.n	80091ea <arm_std_f32+0xfe>
  }

  /* Compute Mean of squares of the input samples    
   * and then store the result in a temporary variable, meanOfSquares. */
  meanOfSquares = sumOfSquares / ((float32_t) blockSize - 1.0f);
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	ee07 3a90 	vmov	s15, r3
 800922a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800922e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009232:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8009236:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800923a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800923e:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Compute mean of all input values */
  mean = sum / (float32_t) blockSize;
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	ee07 3a90 	vmov	s15, r3
 8009248:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800924c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8009250:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009254:	edc7 7a07 	vstr	s15, [r7, #28]

  /* Compute square of mean */
  squareOfMean = (mean * mean) * (((float32_t) blockSize) /
 8009258:	edd7 7a07 	vldr	s15, [r7, #28]
 800925c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	ee07 3a90 	vmov	s15, r3
 8009266:	eeb8 6a67 	vcvt.f32.u32	s12, s15
                                  ((float32_t) blockSize - 1.0f));
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	ee07 3a90 	vmov	s15, r3
 8009270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009274:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009278:	ee77 6ae6 	vsub.f32	s13, s15, s13
  squareOfMean = (mean * mean) * (((float32_t) blockSize) /
 800927c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8009280:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009284:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Compute standard deviation and then store the result to the destination */
  arm_sqrt_f32((meanOfSquares - squareOfMean), pResult);
 8009288:	ed97 7a08 	vldr	s14, [r7, #32]
 800928c:	edd7 7a06 	vldr	s15, [r7, #24]
 8009290:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	eeb0 0a67 	vmov.f32	s0, s15
 800929a:	f7ff ff05 	bl	80090a8 <arm_sqrt_f32>
  /* Compute standard deviation and then store the result to the destination */
  arm_sqrt_f32(var, pResult);

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 800929e:	3730      	adds	r7, #48	; 0x30
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <arm_var_f32>:

void arm_var_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b08d      	sub	sp, #52	; 0x34
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	60f8      	str	r0, [r7, #12]
 80092ac:	60b9      	str	r1, [r7, #8]
 80092ae:	607a      	str	r2, [r7, #4]

  float32_t sum = 0.0f;                          /* Temporary result storage */
 80092b0:	f04f 0300 	mov.w	r3, #0
 80092b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  float32_t sumOfSquares = 0.0f;                 /* Sum of squares */
 80092b6:	f04f 0300 	mov.w	r3, #0
 80092ba:	62bb      	str	r3, [r7, #40]	; 0x28
   
  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t meanOfSquares, mean, squareOfMean;   /* Temporary variables */

	if(blockSize == 1)
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d104      	bne.n	80092cc <arm_var_f32+0x28>
	{
		*pResult = 0;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f04f 0200 	mov.w	r2, #0
 80092c8:	601a      	str	r2, [r3, #0]
		return;
 80092ca:	e0c2      	b.n	8009452 <arm_var_f32+0x1ae>
	}

  /*loop Unrolling */
  blkCnt = blockSize >> 2u;
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	089b      	lsrs	r3, r3, #2
 80092d0:	627b      	str	r3, [r7, #36]	; 0x24

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 80092d2:	e05e      	b.n	8009392 <arm_var_f32+0xee>
  {
    /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1])  */
    /* Compute Sum of squares of the input samples    
     * and then store the result in a temporary variable, sum. */
    in = *pSrc++;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	1d1a      	adds	r2, r3, #4
 80092d8:	60fa      	str	r2, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	617b      	str	r3, [r7, #20]
    sum += in;
 80092de:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80092e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80092e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092ea:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 80092ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80092f2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80092f6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80092fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092fe:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    in = *pSrc++;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	1d1a      	adds	r2, r3, #4
 8009306:	60fa      	str	r2, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	617b      	str	r3, [r7, #20]
    sum += in;
 800930c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8009310:	edd7 7a05 	vldr	s15, [r7, #20]
 8009314:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009318:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 800931c:	edd7 7a05 	vldr	s15, [r7, #20]
 8009320:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009324:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009328:	ee77 7a27 	vadd.f32	s15, s14, s15
 800932c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    in = *pSrc++;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	1d1a      	adds	r2, r3, #4
 8009334:	60fa      	str	r2, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	617b      	str	r3, [r7, #20]
    sum += in;
 800933a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800933e:	edd7 7a05 	vldr	s15, [r7, #20]
 8009342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009346:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 800934a:	edd7 7a05 	vldr	s15, [r7, #20]
 800934e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009352:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009356:	ee77 7a27 	vadd.f32	s15, s14, s15
 800935a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    in = *pSrc++;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	1d1a      	adds	r2, r3, #4
 8009362:	60fa      	str	r2, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	617b      	str	r3, [r7, #20]
    sum += in;
 8009368:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800936c:	edd7 7a05 	vldr	s15, [r7, #20]
 8009370:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009374:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 8009378:	edd7 7a05 	vldr	s15, [r7, #20]
 800937c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009380:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009384:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009388:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    /* Decrement the loop counter */
    blkCnt--;
 800938c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938e:	3b01      	subs	r3, #1
 8009390:	627b      	str	r3, [r7, #36]	; 0x24
  while(blkCnt > 0u)
 8009392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009394:	2b00      	cmp	r3, #0
 8009396:	d19d      	bne.n	80092d4 <arm_var_f32+0x30>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	f003 0303 	and.w	r3, r3, #3
 800939e:	627b      	str	r3, [r7, #36]	; 0x24

  while(blkCnt > 0u)
 80093a0:	e019      	b.n	80093d6 <arm_var_f32+0x132>
  {
    /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1]) */
    /* Compute Sum of squares of the input samples    
     * and then store the result in a temporary variable, sum. */
    in = *pSrc++;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	1d1a      	adds	r2, r3, #4
 80093a6:	60fa      	str	r2, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	617b      	str	r3, [r7, #20]
    sum += in;
 80093ac:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80093b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80093b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80093b8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    sumOfSquares += in * in;
 80093bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80093c0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80093c4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80093c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80093cc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    /* Decrement the loop counter */
    blkCnt--;
 80093d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d2:	3b01      	subs	r3, #1
 80093d4:	627b      	str	r3, [r7, #36]	; 0x24
  while(blkCnt > 0u)
 80093d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d1e2      	bne.n	80093a2 <arm_var_f32+0xfe>
  }

  /* Compute Mean of squares of the input samples    
   * and then store the result in a temporary variable, meanOfSquares. */
  meanOfSquares = sumOfSquares / ((float32_t) blockSize - 1.0f);
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	ee07 3a90 	vmov	s15, r3
 80093e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80093ea:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80093ee:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80093f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093f6:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Compute mean of all input values */
  mean = sum / (float32_t) blockSize;
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	ee07 3a90 	vmov	s15, r3
 8009400:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009404:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8009408:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800940c:	edc7 7a07 	vstr	s15, [r7, #28]

  /* Compute square of mean */
  squareOfMean = (mean * mean) * (((float32_t) blockSize) /
 8009410:	edd7 7a07 	vldr	s15, [r7, #28]
 8009414:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	ee07 3a90 	vmov	s15, r3
 800941e:	eeb8 6a67 	vcvt.f32.u32	s12, s15
                                  ((float32_t) blockSize - 1.0f));
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	ee07 3a90 	vmov	s15, r3
 8009428:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800942c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009430:	ee77 6ae6 	vsub.f32	s13, s15, s13
  squareOfMean = (mean * mean) * (((float32_t) blockSize) /
 8009434:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8009438:	ee67 7a27 	vmul.f32	s15, s14, s15
 800943c:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Compute variance and then store the result to the destination */
  *pResult = meanOfSquares - squareOfMean;
 8009440:	ed97 7a08 	vldr	s14, [r7, #32]
 8009444:	edd7 7a06 	vldr	s15, [r7, #24]
 8009448:	ee77 7a67 	vsub.f32	s15, s14, s15
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	edc3 7a00 	vstr	s15, [r3]
  /* Compute the variance */
  *pResult = ((sumOfSquares - squareOfSum) / (float32_t) (blockSize - 1.0f));

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 8009452:	3734      	adds	r7, #52	; 0x34
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr

0800945c <arm_cfft_radix8by2_f32>:
* \endcode
* 
*/

void arm_cfft_radix8by2_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b0a0      	sub	sp, #128	; 0x80
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	881b      	ldrh	r3, [r3, #0]
 800946a:	66bb      	str	r3, [r7, #104]	; 0x68
    float32_t * pCol1, * pCol2, * pMid1, * pMid2;
    float32_t * p2 = p1 + L;
 800946c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	683a      	ldr	r2, [r7, #0]
 8009472:	4413      	add	r3, r2
 8009474:	677b      	str	r3, [r7, #116]	; 0x74
    const float32_t * tw = (float32_t *) S->pTwiddle;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	673b      	str	r3, [r7, #112]	; 0x70
    float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
    float32_t m0, m1, m2, m3;
    uint32_t l;

    pCol1 = p1;
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	667b      	str	r3, [r7, #100]	; 0x64
    pCol2 = p2;
 8009480:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009482:	663b      	str	r3, [r7, #96]	; 0x60

    //    Define new length
    L >>= 1;
 8009484:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009486:	085b      	lsrs	r3, r3, #1
 8009488:	66bb      	str	r3, [r7, #104]	; 0x68
    //    Initialize mid pointers
    pMid1 = p1 + L;
 800948a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800948c:	009b      	lsls	r3, r3, #2
 800948e:	683a      	ldr	r2, [r7, #0]
 8009490:	4413      	add	r3, r2
 8009492:	67fb      	str	r3, [r7, #124]	; 0x7c
    pMid2 = p2 + L;
 8009494:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009496:	009b      	lsls	r3, r3, #2
 8009498:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800949a:	4413      	add	r3, r2
 800949c:	67bb      	str	r3, [r7, #120]	; 0x78

    // do two dot Fourier transform
    for ( l = L >> 2; l > 0; l-- ) 
 800949e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80094a0:	089b      	lsrs	r3, r3, #2
 80094a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80094a4:	e1b6      	b.n	8009814 <arm_cfft_radix8by2_f32+0x3b8>
    {
        t1[0] = p1[0];
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	63bb      	str	r3, [r7, #56]	; 0x38
        t1[1] = p1[1];
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        t1[2] = p1[2];
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	689b      	ldr	r3, [r3, #8]
 80094b6:	643b      	str	r3, [r7, #64]	; 0x40
        t1[3] = p1[3];
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	68db      	ldr	r3, [r3, #12]
 80094bc:	647b      	str	r3, [r7, #68]	; 0x44

        t2[0] = p2[0];
 80094be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	62bb      	str	r3, [r7, #40]	; 0x28
        t2[1] = p2[1];
 80094c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        t2[2] = p2[2];
 80094ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094cc:	689b      	ldr	r3, [r3, #8]
 80094ce:	633b      	str	r3, [r7, #48]	; 0x30
        t2[3] = p2[3];
 80094d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094d2:	68db      	ldr	r3, [r3, #12]
 80094d4:	637b      	str	r3, [r7, #52]	; 0x34

        t3[0] = pMid1[0];
 80094d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	61bb      	str	r3, [r7, #24]
        t3[1] = pMid1[1];
 80094dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	61fb      	str	r3, [r7, #28]
        t3[2] = pMid1[2];
 80094e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80094e4:	689b      	ldr	r3, [r3, #8]
 80094e6:	623b      	str	r3, [r7, #32]
        t3[3] = pMid1[3];
 80094e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80094ea:	68db      	ldr	r3, [r3, #12]
 80094ec:	627b      	str	r3, [r7, #36]	; 0x24

        t4[0] = pMid2[0];
 80094ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	60bb      	str	r3, [r7, #8]
        t4[1] = pMid2[1];
 80094f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	60fb      	str	r3, [r7, #12]
        t4[2] = pMid2[2];
 80094fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094fc:	689b      	ldr	r3, [r3, #8]
 80094fe:	613b      	str	r3, [r7, #16]
        t4[3] = pMid2[3];
 8009500:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009502:	68db      	ldr	r3, [r3, #12]
 8009504:	617b      	str	r3, [r7, #20]

        *p1++ = t1[0] + t2[0];
 8009506:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800950a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	1d1a      	adds	r2, r3, #4
 8009512:	603a      	str	r2, [r7, #0]
 8009514:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009518:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[1] + t2[1];
 800951c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8009520:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	1d1a      	adds	r2, r3, #4
 8009528:	603a      	str	r2, [r7, #0]
 800952a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800952e:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[2] + t2[2];
 8009532:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009536:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	1d1a      	adds	r2, r3, #4
 800953e:	603a      	str	r2, [r7, #0]
 8009540:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009544:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[3] + t2[3];    // col 1
 8009548:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800954c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	1d1a      	adds	r2, r3, #4
 8009554:	603a      	str	r2, [r7, #0]
 8009556:	ee77 7a27 	vadd.f32	s15, s14, s15
 800955a:	edc3 7a00 	vstr	s15, [r3]

        t2[0] = t1[0] - t2[0];
 800955e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8009562:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009566:	ee77 7a67 	vsub.f32	s15, s14, s15
 800956a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        t2[1] = t1[1] - t2[1];
 800956e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8009572:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009576:	ee77 7a67 	vsub.f32	s15, s14, s15
 800957a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[2] = t1[2] - t2[2];
 800957e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009582:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009586:	ee77 7a67 	vsub.f32	s15, s14, s15
 800958a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        t2[3] = t1[3] - t2[3];    // for col 2
 800958e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8009592:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009596:	ee77 7a67 	vsub.f32	s15, s14, s15
 800959a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

        *pMid1++ = t3[0] + t4[0];
 800959e:	ed97 7a06 	vldr	s14, [r7, #24]
 80095a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80095a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80095a8:	1d1a      	adds	r2, r3, #4
 80095aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80095ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80095b0:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[1] + t4[1];
 80095b4:	ed97 7a07 	vldr	s14, [r7, #28]
 80095b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80095bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80095be:	1d1a      	adds	r2, r3, #4
 80095c0:	67fa      	str	r2, [r7, #124]	; 0x7c
 80095c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80095c6:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[2] + t4[2];
 80095ca:	ed97 7a08 	vldr	s14, [r7, #32]
 80095ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80095d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80095d4:	1d1a      	adds	r2, r3, #4
 80095d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80095d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80095dc:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[3] + t4[3]; // col 1
 80095e0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80095e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80095e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80095ea:	1d1a      	adds	r2, r3, #4
 80095ec:	67fa      	str	r2, [r7, #124]	; 0x7c
 80095ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80095f2:	edc3 7a00 	vstr	s15, [r3]

        t4[0] = t4[0] - t3[0];
 80095f6:	ed97 7a02 	vldr	s14, [r7, #8]
 80095fa:	edd7 7a06 	vldr	s15, [r7, #24]
 80095fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009602:	edc7 7a02 	vstr	s15, [r7, #8]
        t4[1] = t4[1] - t3[1];
 8009606:	ed97 7a03 	vldr	s14, [r7, #12]
 800960a:	edd7 7a07 	vldr	s15, [r7, #28]
 800960e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009612:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[2] = t4[2] - t3[2];
 8009616:	ed97 7a04 	vldr	s14, [r7, #16]
 800961a:	edd7 7a08 	vldr	s15, [r7, #32]
 800961e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009622:	edc7 7a04 	vstr	s15, [r7, #16]
        t4[3] = t4[3] - t3[3];    // for col 2
 8009626:	ed97 7a05 	vldr	s14, [r7, #20]
 800962a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800962e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009632:	edc7 7a05 	vstr	s15, [r7, #20]

        twR = *tw++;
 8009636:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009638:	1d1a      	adds	r2, r3, #4
 800963a:	673a      	str	r2, [r7, #112]	; 0x70
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 8009640:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009642:	1d1a      	adds	r2, r3, #4
 8009644:	673a      	str	r2, [r7, #112]	; 0x70
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	65bb      	str	r3, [r7, #88]	; 0x58

        // multiply by twiddle factors
        m0 = t2[0] * twR;
 800964a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800964e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8009652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009656:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[1] * twI;
 800965a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800965e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009666:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[1] * twR;
 800966a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800966e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8009672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009676:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[0] * twI;
 800967a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800967e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009686:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        // R  =  R  *  Tr - I * Ti
        *p2++ = m0 + m1;
 800968a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800968c:	1d1a      	adds	r2, r3, #4
 800968e:	677a      	str	r2, [r7, #116]	; 0x74
 8009690:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009694:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009698:	ee77 7a27 	vadd.f32	s15, s14, s15
 800969c:	edc3 7a00 	vstr	s15, [r3]
        // I  =  I  *  Tr + R * Ti
        *p2++ = m2 - m3;
 80096a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096a2:	1d1a      	adds	r2, r3, #4
 80096a4:	677a      	str	r2, [r7, #116]	; 0x74
 80096a6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80096aa:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80096ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80096b2:	edc3 7a00 	vstr	s15, [r3]
        
        // use vertical symmetry
        //  0.9988 - 0.0491i <==> -0.0491 - 0.9988i
        m0 = t4[0] * twI;
 80096b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80096ba:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80096be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096c2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[1] * twR;
 80096c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80096ca:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80096ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096d2:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[1] * twI;
 80096d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80096da:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80096de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096e2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[0] * twR;
 80096e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80096ea:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80096ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096f2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *pMid2++ = m0 - m1;
 80096f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096f8:	1d1a      	adds	r2, r3, #4
 80096fa:	67ba      	str	r2, [r7, #120]	; 0x78
 80096fc:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009700:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009704:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009708:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 800970c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800970e:	1d1a      	adds	r2, r3, #4
 8009710:	67ba      	str	r2, [r7, #120]	; 0x78
 8009712:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009716:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800971a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800971e:	edc3 7a00 	vstr	s15, [r3]

        twR = *tw++;
 8009722:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009724:	1d1a      	adds	r2, r3, #4
 8009726:	673a      	str	r2, [r7, #112]	; 0x70
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 800972c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800972e:	1d1a      	adds	r2, r3, #4
 8009730:	673a      	str	r2, [r7, #112]	; 0x70
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	65bb      	str	r3, [r7, #88]	; 0x58
        
        m0 = t2[2] * twR;
 8009736:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800973a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800973e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009742:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[3] * twI;
 8009746:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800974a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800974e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009752:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[3] * twR;
 8009756:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800975a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800975e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009762:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[2] * twI;
 8009766:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800976a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800976e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009772:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *p2++ = m0 + m1;
 8009776:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009778:	1d1a      	adds	r2, r3, #4
 800977a:	677a      	str	r2, [r7, #116]	; 0x74
 800977c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009780:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009784:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009788:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 800978c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800978e:	1d1a      	adds	r2, r3, #4
 8009790:	677a      	str	r2, [r7, #116]	; 0x74
 8009792:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009796:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800979a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800979e:	edc3 7a00 	vstr	s15, [r3]
        
        m0 = t4[2] * twI;
 80097a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80097a6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80097aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097ae:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[3] * twR;
 80097b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80097b6:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80097ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097be:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[3] * twI;
 80097c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80097c6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80097ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097ce:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[2] * twR;
 80097d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80097d6:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80097da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097de:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *pMid2++ = m0 - m1;
 80097e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80097e4:	1d1a      	adds	r2, r3, #4
 80097e6:	67ba      	str	r2, [r7, #120]	; 0x78
 80097e8:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80097ec:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80097f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80097f4:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 80097f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80097fa:	1d1a      	adds	r2, r3, #4
 80097fc:	67ba      	str	r2, [r7, #120]	; 0x78
 80097fe:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009802:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8009806:	ee77 7a27 	vadd.f32	s15, s14, s15
 800980a:	edc3 7a00 	vstr	s15, [r3]
    for ( l = L >> 2; l > 0; l-- ) 
 800980e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009810:	3b01      	subs	r3, #1
 8009812:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009816:	2b00      	cmp	r3, #0
 8009818:	f47f ae45 	bne.w	80094a6 <arm_cfft_radix8by2_f32+0x4a>
    }

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 2u);
 800981c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800981e:	b299      	uxth	r1, r3
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	685a      	ldr	r2, [r3, #4]
 8009824:	2302      	movs	r3, #2
 8009826:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8009828:	f000 fef2 	bl	800a610 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2u);
 800982c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800982e:	b299      	uxth	r1, r3
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	685a      	ldr	r2, [r3, #4]
 8009834:	2302      	movs	r3, #2
 8009836:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8009838:	f000 feea 	bl	800a610 <arm_radix8_butterfly_f32>
}
 800983c:	bf00      	nop
 800983e:	3780      	adds	r7, #128	; 0x80
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b0ac      	sub	sp, #176	; 0xb0
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	881b      	ldrh	r3, [r3, #0]
 8009852:	085b      	lsrs	r3, r3, #1
 8009854:	b29b      	uxth	r3, r3
 8009856:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 800985a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	683a      	ldr	r2, [r7, #0]
 8009862:	4413      	add	r3, r2
 8009864:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 8009868:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800986c:	009b      	lsls	r3, r3, #2
 800986e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8009872:	4413      	add	r3, r2
 8009874:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 8009878:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800987c:	009b      	lsls	r3, r3, #2
 800987e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8009882:	4413      	add	r3, r2
 8009884:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         // points to real values by default
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 800988c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009890:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 8009892:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009896:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 8009898:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800989c:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     // points to imaginary values by default
 800989e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80098a2:	3b04      	subs	r3, #4
 80098a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 80098a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80098ac:	3b04      	subs	r3, #4
 80098ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 80098b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80098b6:	3b04      	subs	r3, #4
 80098b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 80098bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80098c0:	009b      	lsls	r3, r3, #2
 80098c2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80098c6:	4413      	add	r3, r2
 80098c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	685b      	ldr	r3, [r3, #4]
 80098d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80098d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80098d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80098dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80098e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 80098e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80098e8:	085b      	lsrs	r3, r3, #1
 80098ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    // do four dot Fourier transform

    twMod2 = 2;
 80098ee:	2302      	movs	r3, #2
 80098f0:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 80098f2:	2304      	movs	r3, #4
 80098f4:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 80098f6:	2306      	movs	r3, #6
 80098f8:	667b      	str	r3, [r7, #100]	; 0x64

    // TOP
    p1ap3_0 = p1[0] + p3[0];
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	ed93 7a00 	vldr	s14, [r3]
 8009900:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009904:	edd3 7a00 	vldr	s15, [r3]
 8009908:	ee77 7a27 	vadd.f32	s15, s14, s15
 800990c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	ed93 7a00 	vldr	s14, [r3]
 8009916:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800991a:	edd3 7a00 	vldr	s15, [r3]
 800991e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009922:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	3304      	adds	r3, #4
 800992a:	ed93 7a00 	vldr	s14, [r3]
 800992e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009932:	3304      	adds	r3, #4
 8009934:	edd3 7a00 	vldr	s15, [r3]
 8009938:	ee77 7a27 	vadd.f32	s15, s14, s15
 800993c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	3304      	adds	r3, #4
 8009944:	ed93 7a00 	vldr	s14, [r3]
 8009948:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800994c:	3304      	adds	r3, #4
 800994e:	edd3 7a00 	vldr	s15, [r3]
 8009952:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009956:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800995a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800995e:	3304      	adds	r3, #4
 8009960:	ed93 7a00 	vldr	s14, [r3]
 8009964:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009968:	ee37 7a27 	vadd.f32	s14, s14, s15
 800996c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009970:	3304      	adds	r3, #4
 8009972:	edd3 7a00 	vldr	s15, [r3]
 8009976:	ee77 7a67 	vsub.f32	s15, s14, s15
 800997a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800997e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009982:	edd3 7a00 	vldr	s15, [r3]
 8009986:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800998a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800998e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009992:	edd3 7a00 	vldr	s15, [r3]
 8009996:	ee77 7a27 	vadd.f32	s15, s14, s15
 800999a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 800999e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80099a2:	edd3 7a00 	vldr	s15, [r3]
 80099a6:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80099aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80099ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80099b2:	edd3 7a00 	vldr	s15, [r3]
 80099b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80099ba:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 80099be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80099c2:	3304      	adds	r3, #4
 80099c4:	edd3 7a00 	vldr	s15, [r3]
 80099c8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80099cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80099d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80099d4:	3304      	adds	r3, #4
 80099d6:	edd3 7a00 	vldr	s15, [r3]
 80099da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80099de:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 80099e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80099e6:	3304      	adds	r3, #4
 80099e8:	edd3 7a00 	vldr	s15, [r3]
 80099ec:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80099f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80099f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80099f8:	3304      	adds	r3, #4
 80099fa:	edd3 7a00 	vldr	s15, [r3]
 80099fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a02:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8009a06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009a0a:	ed93 7a00 	vldr	s14, [r3]
 8009a0e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009a12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009a16:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009a1a:	edd3 7a00 	vldr	s15, [r3]
 8009a1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009a22:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8009a26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009a2a:	ed93 7a00 	vldr	s14, [r3]
 8009a2e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8009a32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009a36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009a3a:	edd3 7a00 	vldr	s15, [r3]
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	1d1a      	adds	r2, r3, #4
 8009a42:	603a      	str	r2, [r7, #0]
 8009a44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a48:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8009a4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009a50:	3304      	adds	r3, #4
 8009a52:	ed93 7a00 	vldr	s14, [r3]
 8009a56:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8009a5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009a5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009a62:	3304      	adds	r3, #4
 8009a64:	edd3 7a00 	vldr	s15, [r3]
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	1d1a      	adds	r2, r3, #4
 8009a6c:	603a      	str	r2, [r7, #0]
 8009a6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a72:	edc3 7a00 	vstr	s15, [r3]

    // Twiddle factors are ones
    *p2++ = t2[0];
 8009a76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009a7a:	1d1a      	adds	r2, r3, #4
 8009a7c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8009a80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a82:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 8009a84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009a88:	1d1a      	adds	r2, r3, #4
 8009a8a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8009a8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a90:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 8009a92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a96:	1d1a      	adds	r2, r3, #4
 8009a98:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009a9c:	69fa      	ldr	r2, [r7, #28]
 8009a9e:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 8009aa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009aa4:	1d1a      	adds	r2, r3, #4
 8009aa6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009aaa:	6a3a      	ldr	r2, [r7, #32]
 8009aac:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 8009aae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009ab2:	1d1a      	adds	r2, r3, #4
 8009ab4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8009ab8:	68fa      	ldr	r2, [r7, #12]
 8009aba:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 8009abc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009ac0:	1d1a      	adds	r2, r3, #4
 8009ac2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8009ac6:	693a      	ldr	r2, [r7, #16]
 8009ac8:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 8009aca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009acc:	009b      	lsls	r3, r3, #2
 8009ace:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009ad2:	4413      	add	r3, r2
 8009ad4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 8009ad8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009ada:	009b      	lsls	r3, r3, #2
 8009adc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009ae0:	4413      	add	r3, r2
 8009ae2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 8009ae6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ae8:	009b      	lsls	r3, r3, #2
 8009aea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009aee:	4413      	add	r3, r2
 8009af0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- ) 
 8009af4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009af8:	3b02      	subs	r3, #2
 8009afa:	085b      	lsrs	r3, r3, #1
 8009afc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009b00:	e31a      	b.n	800a138 <arm_cfft_radix8by4_f32+0x8f4>
    {
        // TOP
        p1ap3_0 = p1[0] + p3[0];
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	ed93 7a00 	vldr	s14, [r3]
 8009b08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009b0c:	edd3 7a00 	vldr	s15, [r3]
 8009b10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b14:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = p1[0] - p3[0];
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	ed93 7a00 	vldr	s14, [r3]
 8009b1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009b22:	edd3 7a00 	vldr	s15, [r3]
 8009b26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b2a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        p1ap3_1 = p1[1] + p3[1];
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	3304      	adds	r3, #4
 8009b32:	ed93 7a00 	vldr	s14, [r3]
 8009b36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009b3a:	3304      	adds	r3, #4
 8009b3c:	edd3 7a00 	vldr	s15, [r3]
 8009b40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b44:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = p1[1] - p3[1];
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	3304      	adds	r3, #4
 8009b4c:	ed93 7a00 	vldr	s14, [r3]
 8009b50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009b54:	3304      	adds	r3, #4
 8009b56:	edd3 7a00 	vldr	s15, [r3]
 8009b5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b5e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
 8009b62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b66:	3304      	adds	r3, #4
 8009b68:	ed93 7a00 	vldr	s14, [r3]
 8009b6c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009b70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009b74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009b78:	3304      	adds	r3, #4
 8009b7a:	edd3 7a00 	vldr	s15, [r3]
 8009b7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b82:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[1] = p1sp3_1 - p2[0] + p4[0];
 8009b86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b8a:	edd3 7a00 	vldr	s15, [r3]
 8009b8e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009b92:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009b96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009b9a:	edd3 7a00 	vldr	s15, [r3]
 8009b9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ba2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        // col 3
        t3[0] = p1ap3_0 - p2[0] - p4[0];
 8009ba6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009baa:	edd3 7a00 	vldr	s15, [r3]
 8009bae:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8009bb2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009bb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009bba:	edd3 7a00 	vldr	s15, [r3]
 8009bbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009bc2:	edc7 7a07 	vstr	s15, [r7, #28]
        t3[1] = p1ap3_1 - p2[1] - p4[1];
 8009bc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009bca:	3304      	adds	r3, #4
 8009bcc:	edd3 7a00 	vldr	s15, [r3]
 8009bd0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009bd4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009bd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009bdc:	3304      	adds	r3, #4
 8009bde:	edd3 7a00 	vldr	s15, [r3]
 8009be2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009be6:	edc7 7a08 	vstr	s15, [r7, #32]
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
 8009bea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009bee:	3304      	adds	r3, #4
 8009bf0:	edd3 7a00 	vldr	s15, [r3]
 8009bf4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8009bf8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009bfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c00:	3304      	adds	r3, #4
 8009c02:	edd3 7a00 	vldr	s15, [r3]
 8009c06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c0a:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[1] = p1sp3_1 + p2[0] - p4[0];
 8009c0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009c12:	ed93 7a00 	vldr	s14, [r3]
 8009c16:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009c1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009c1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c22:	edd3 7a00 	vldr	s15, [r3]
 8009c26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c2a:	edc7 7a04 	vstr	s15, [r7, #16]
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
 8009c2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009c32:	ed93 7a00 	vldr	s14, [r3]
 8009c36:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8009c3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009c3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c42:	edd3 7a00 	vldr	s15, [r3]
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	1d1a      	adds	r2, r3, #4
 8009c4a:	603a      	str	r2, [r7, #0]
 8009c4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c50:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = p1ap3_1 + p2[1] + p4[1];
 8009c54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009c58:	3304      	adds	r3, #4
 8009c5a:	ed93 7a00 	vldr	s14, [r3]
 8009c5e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8009c62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009c66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c6a:	3304      	adds	r3, #4
 8009c6c:	edd3 7a00 	vldr	s15, [r3]
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	1d1a      	adds	r2, r3, #4
 8009c74:	603a      	str	r2, [r7, #0]
 8009c76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c7a:	edc3 7a00 	vstr	s15, [r3]

        // BOTTOM
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8009c7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009c82:	3b04      	subs	r3, #4
 8009c84:	ed93 7a00 	vldr	s14, [r3]
 8009c88:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009c8c:	3b04      	subs	r3, #4
 8009c8e:	edd3 7a00 	vldr	s15, [r3]
 8009c92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c96:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 8009c9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009c9e:	3b04      	subs	r3, #4
 8009ca0:	ed93 7a00 	vldr	s14, [r3]
 8009ca4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009ca8:	3b04      	subs	r3, #4
 8009caa:	edd3 7a00 	vldr	s15, [r3]
 8009cae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009cb2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        p1ap3_0 = pEnd1[0] + pEnd3[0];
 8009cb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009cba:	ed93 7a00 	vldr	s14, [r3]
 8009cbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009cc2:	edd3 7a00 	vldr	s15, [r3]
 8009cc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009cca:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = pEnd1[0] - pEnd3[0];
 8009cce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009cd2:	ed93 7a00 	vldr	s14, [r3]
 8009cd6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009cda:	edd3 7a00 	vldr	s15, [r3]
 8009cde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ce2:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 8009ce6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009cea:	ed93 7a00 	vldr	s14, [r3]
 8009cee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009cf2:	edd3 7a00 	vldr	s15, [r3]
 8009cf6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009cfa:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009cfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d02:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8009d06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d0a:	ed93 7a00 	vldr	s14, [r3]
 8009d0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009d12:	edd3 7a00 	vldr	s15, [r3]
 8009d16:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009d1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009d1e:	3b04      	subs	r3, #4
 8009d20:	edd3 7a00 	vldr	s15, [r3]
 8009d24:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009d28:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d2c:	3b04      	subs	r3, #4
 8009d2e:	edd3 7a00 	vldr	s15, [r3]
 8009d32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d36:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8009d3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009d3e:	3b04      	subs	r3, #4
 8009d40:	edd3 7a00 	vldr	s15, [r3]
 8009d44:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009d48:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009d4c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d50:	3b04      	subs	r3, #4
 8009d52:	edd3 7a00 	vldr	s15, [r3]
 8009d56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d5a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
 8009d5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009d62:	edd3 7a00 	vldr	s15, [r3]
 8009d66:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8009d6a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009d6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d72:	edd3 7a00 	vldr	s15, [r3]
 8009d76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d7a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
 8009d7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009d82:	ed93 7a00 	vldr	s14, [r3]
 8009d86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d8a:	edd3 7a00 	vldr	s15, [r3]
 8009d8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009d92:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009d96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d9a:	edc7 7a05 	vstr	s15, [r7, #20]
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8009d9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009da2:	3b04      	subs	r3, #4
 8009da4:	ed93 7a00 	vldr	s14, [r3]
 8009da8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009dac:	3b04      	subs	r3, #4
 8009dae:	edd3 7a00 	vldr	s15, [r3]
 8009db2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009db6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009dba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009dbe:	edc7 7a06 	vstr	s15, [r7, #24]
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 8009dc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009dc6:	ed93 7a00 	vldr	s14, [r3]
 8009dca:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8009dce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009dd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009dd6:	edd3 7a00 	vldr	s15, [r3]
 8009dda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009dde:	1f1a      	subs	r2, r3, #4
 8009de0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009de4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009de8:	edc3 7a00 	vstr	s15, [r3]
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8009dec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009df0:	3b04      	subs	r3, #4
 8009df2:	ed93 7a00 	vldr	s14, [r3]
 8009df6:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8009dfa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009dfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009e02:	3b04      	subs	r3, #4
 8009e04:	edd3 7a00 	vldr	s15, [r3]
 8009e08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009e0c:	1f1a      	subs	r2, r3, #4
 8009e0e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009e12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e16:	edc3 7a00 	vstr	s15, [r3]

        // COL 2
        // read twiddle factors
        twR = *tw2++;
 8009e1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009e1e:	1d1a      	adds	r2, r3, #4
 8009e20:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	653b      	str	r3, [r7, #80]	; 0x50
        twI = *tw2++;
 8009e28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009e2c:	1d1a      	adds	r2, r3, #4
 8009e2e:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	64fb      	str	r3, [r7, #76]	; 0x4c
        // multiply by twiddle factors
        //  let    Z1 = a + i(b),   Z2 = c + i(d)
        //   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d)
        
        // Top
        m0 = t2[0] * twR;
 8009e36:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009e3a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e42:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[1] * twI;
 8009e46:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009e4a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e52:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[1] * twR;
 8009e56:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009e5a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e62:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[0] * twI;
 8009e66:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009e6a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e72:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p2++ = m0 + m1;
 8009e76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009e7a:	1d1a      	adds	r2, r3, #4
 8009e7c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8009e80:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009e84:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009e88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e8c:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 8009e90:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009e94:	1d1a      	adds	r2, r3, #4
 8009e96:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8009e9a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009e9e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009ea2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ea6:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 2
        // 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i
        // Bottom
        m0 = t2[3] * twI;
 8009eaa:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8009eae:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eb6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[2] * twR;
 8009eba:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009ebe:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ec6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[2] * twI;
 8009eca:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009ece:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ed6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[3] * twR;
 8009eda:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8009ede:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ee6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd2-- = m0 - m1;
 8009eea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009eee:	1f1a      	subs	r2, r3, #4
 8009ef0:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009ef4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009ef8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009efc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f00:	edc3 7a00 	vstr	s15, [r3]
        *pEnd2-- = m2 + m3;
 8009f04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009f08:	1f1a      	subs	r2, r3, #4
 8009f0a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009f0e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009f12:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009f16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f1a:	edc3 7a00 	vstr	s15, [r3]

        // COL 3
        twR = tw3[0];
 8009f1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw3[1];
 8009f26:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw3 += twMod3;
 8009f2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009f30:	009b      	lsls	r3, r3, #2
 8009f32:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009f36:	4413      	add	r3, r2
 8009f38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        // Top
        m0 = t3[0] * twR;
 8009f3c:	edd7 7a07 	vldr	s15, [r7, #28]
 8009f40:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009f44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f48:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[1] * twI;
 8009f4c:	edd7 7a08 	vldr	s15, [r7, #32]
 8009f50:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009f54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f58:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[1] * twR;
 8009f5c:	edd7 7a08 	vldr	s15, [r7, #32]
 8009f60:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009f64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f68:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[0] * twI;
 8009f6c:	edd7 7a07 	vldr	s15, [r7, #28]
 8009f70:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009f74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f78:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p3++ = m0 + m1;
 8009f7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009f80:	1d1a      	adds	r2, r3, #4
 8009f82:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009f86:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009f8a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009f8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f92:	edc3 7a00 	vstr	s15, [r3]
        *p3++ = m2 - m3;
 8009f96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009f9a:	1d1a      	adds	r2, r3, #4
 8009f9c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009fa0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009fa4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009fa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009fac:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 3
        // 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i
        // Bottom
        m0 = -t3[3] * twR;
 8009fb0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009fb4:	eef1 7a67 	vneg.f32	s15, s15
 8009fb8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009fbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fc0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[2] * twI;
 8009fc4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009fc8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009fcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fd0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[2] * twR;
 8009fd4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009fd8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009fdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fe0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[3] * twI;
 8009fe4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009fe8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009fec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ff0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd3-- = m0 - m1;
 8009ff4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009ff8:	1f1a      	subs	r2, r3, #4
 8009ffa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009ffe:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800a002:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800a006:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a00a:	edc3 7a00 	vstr	s15, [r3]
        *pEnd3-- = m3 - m2;
 800a00e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a012:	1f1a      	subs	r2, r3, #4
 800a014:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a018:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a01c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800a020:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a024:	edc3 7a00 	vstr	s15, [r3]
        
        // COL 4
        twR = tw4[0];
 800a028:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw4[1];
 800a030:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw4 += twMod4;
 800a038:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a03a:	009b      	lsls	r3, r3, #2
 800a03c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a040:	4413      	add	r3, r2
 800a042:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        // Top
        m0 = t4[0] * twR;
 800a046:	edd7 7a03 	vldr	s15, [r7, #12]
 800a04a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800a04e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a052:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[1] * twI;
 800a056:	edd7 7a04 	vldr	s15, [r7, #16]
 800a05a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a05e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a062:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[1] * twR;
 800a066:	edd7 7a04 	vldr	s15, [r7, #16]
 800a06a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800a06e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a072:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[0] * twI;
 800a076:	edd7 7a03 	vldr	s15, [r7, #12]
 800a07a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a07e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a082:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p4++ = m0 + m1;
 800a086:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a08a:	1d1a      	adds	r2, r3, #4
 800a08c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800a090:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800a094:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800a098:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a09c:	edc3 7a00 	vstr	s15, [r3]
        *p4++ = m2 - m3;
 800a0a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a0a4:	1d1a      	adds	r2, r3, #4
 800a0a6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800a0aa:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800a0ae:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a0b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a0b6:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 4
        // 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i
        // Bottom
        m0 = t4[3] * twI;
 800a0ba:	edd7 7a06 	vldr	s15, [r7, #24]
 800a0be:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a0c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0c6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[2] * twR;
 800a0ca:	edd7 7a05 	vldr	s15, [r7, #20]
 800a0ce:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800a0d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0d6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[2] * twI;
 800a0da:	edd7 7a05 	vldr	s15, [r7, #20]
 800a0de:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a0e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0e6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[3] * twR;
 800a0ea:	edd7 7a06 	vldr	s15, [r7, #24]
 800a0ee:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800a0f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0f6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd4-- = m0 - m1;
 800a0fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a0fe:	1f1a      	subs	r2, r3, #4
 800a100:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800a104:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800a108:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800a10c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a110:	edc3 7a00 	vstr	s15, [r3]
        *pEnd4-- = m2 + m3;
 800a114:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a118:	1f1a      	subs	r2, r3, #4
 800a11a:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800a11e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800a122:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a126:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a12a:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- ) 
 800a12e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a132:	3b01      	subs	r3, #1
 800a134:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a138:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	f47f ace0 	bne.w	8009b02 <arm_cfft_radix8by4_f32+0x2be>
    }

    //MIDDLE
    // Twiddle factors are 
    //  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i
    p1ap3_0 = p1[0] + p3[0];
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	ed93 7a00 	vldr	s14, [r3]
 800a148:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a14c:	edd3 7a00 	vldr	s15, [r3]
 800a150:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a154:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	ed93 7a00 	vldr	s14, [r3]
 800a15e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a162:	edd3 7a00 	vldr	s15, [r3]
 800a166:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a16a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	3304      	adds	r3, #4
 800a172:	ed93 7a00 	vldr	s14, [r3]
 800a176:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a17a:	3304      	adds	r3, #4
 800a17c:	edd3 7a00 	vldr	s15, [r3]
 800a180:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a184:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	3304      	adds	r3, #4
 800a18c:	ed93 7a00 	vldr	s14, [r3]
 800a190:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a194:	3304      	adds	r3, #4
 800a196:	edd3 7a00 	vldr	s15, [r3]
 800a19a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a19e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800a1a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a1a6:	3304      	adds	r3, #4
 800a1a8:	ed93 7a00 	vldr	s14, [r3]
 800a1ac:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800a1b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a1b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a1b8:	3304      	adds	r3, #4
 800a1ba:	edd3 7a00 	vldr	s15, [r3]
 800a1be:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a1c2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800a1c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a1ca:	edd3 7a00 	vldr	s15, [r3]
 800a1ce:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800a1d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a1d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a1da:	edd3 7a00 	vldr	s15, [r3]
 800a1de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a1e2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 800a1e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a1ea:	edd3 7a00 	vldr	s15, [r3]
 800a1ee:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800a1f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a1f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a1fa:	edd3 7a00 	vldr	s15, [r3]
 800a1fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a202:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 800a206:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a20a:	3304      	adds	r3, #4
 800a20c:	edd3 7a00 	vldr	s15, [r3]
 800a210:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800a214:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a218:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a21c:	3304      	adds	r3, #4
 800a21e:	edd3 7a00 	vldr	s15, [r3]
 800a222:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a226:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 800a22a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a22e:	3304      	adds	r3, #4
 800a230:	edd3 7a00 	vldr	s15, [r3]
 800a234:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800a238:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a23c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a240:	3304      	adds	r3, #4
 800a242:	edd3 7a00 	vldr	s15, [r3]
 800a246:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a24a:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 800a24e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a252:	ed93 7a00 	vldr	s14, [r3]
 800a256:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800a25a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a25e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a262:	edd3 7a00 	vldr	s15, [r3]
 800a266:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a26a:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800a26e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a272:	ed93 7a00 	vldr	s14, [r3]
 800a276:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800a27a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a27e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a282:	edd3 7a00 	vldr	s15, [r3]
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	1d1a      	adds	r2, r3, #4
 800a28a:	603a      	str	r2, [r7, #0]
 800a28c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a290:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800a294:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a298:	3304      	adds	r3, #4
 800a29a:	ed93 7a00 	vldr	s14, [r3]
 800a29e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800a2a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a2a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a2aa:	3304      	adds	r3, #4
 800a2ac:	edd3 7a00 	vldr	s15, [r3]
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	1d1a      	adds	r2, r3, #4
 800a2b4:	603a      	str	r2, [r7, #0]
 800a2b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a2ba:	edc3 7a00 	vstr	s15, [r3]

    // COL 2
    twR = tw2[0];
 800a2be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 800a2c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a2ca:	685b      	ldr	r3, [r3, #4]
 800a2cc:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 800a2ce:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a2d2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800a2d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2da:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 800a2de:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a2e2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a2e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2ea:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 800a2ee:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a2f2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800a2f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2fa:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 800a2fe:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a302:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a30a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 800a30e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a312:	1d1a      	adds	r2, r3, #4
 800a314:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800a318:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800a31c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800a320:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a324:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 800a328:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a32c:	1d1a      	adds	r2, r3, #4
 800a32e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800a332:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800a336:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a33a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a33e:	edc3 7a00 	vstr	s15, [r3]
    // COL 3
    twR = tw3[0];
 800a342:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 800a34a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 800a352:	edd7 7a07 	vldr	s15, [r7, #28]
 800a356:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800a35a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a35e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 800a362:	edd7 7a08 	vldr	s15, [r7, #32]
 800a366:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a36a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a36e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 800a372:	edd7 7a08 	vldr	s15, [r7, #32]
 800a376:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800a37a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a37e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 800a382:	edd7 7a07 	vldr	s15, [r7, #28]
 800a386:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a38a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a38e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 800a392:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a396:	1d1a      	adds	r2, r3, #4
 800a398:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a39c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800a3a0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800a3a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a3a8:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 800a3ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a3b0:	1d1a      	adds	r2, r3, #4
 800a3b2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a3b6:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800a3ba:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a3be:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a3c2:	edc3 7a00 	vstr	s15, [r3]
    // COL 4
    twR = tw4[0];
 800a3c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 800a3ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a3d2:	685b      	ldr	r3, [r3, #4]
 800a3d4:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 800a3d6:	edd7 7a03 	vldr	s15, [r7, #12]
 800a3da:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800a3de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3e2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 800a3e6:	edd7 7a04 	vldr	s15, [r7, #16]
 800a3ea:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a3ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3f2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 800a3f6:	edd7 7a04 	vldr	s15, [r7, #16]
 800a3fa:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800a3fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a402:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 800a406:	edd7 7a03 	vldr	s15, [r7, #12]
 800a40a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a40e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a412:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 800a416:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a41a:	1d1a      	adds	r2, r3, #4
 800a41c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800a420:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800a424:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800a428:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a42c:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 800a430:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a434:	1d1a      	adds	r2, r3, #4
 800a436:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800a43a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800a43e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a442:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a446:	edc3 7a00 	vstr	s15, [r3]

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4u);
 800a44a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a44e:	b299      	uxth	r1, r3
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	685a      	ldr	r2, [r3, #4]
 800a454:	2304      	movs	r3, #4
 800a456:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800a458:	f000 f8da 	bl	800a610 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 4u);
 800a45c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a460:	b299      	uxth	r1, r3
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	685a      	ldr	r2, [r3, #4]
 800a466:	2304      	movs	r3, #4
 800a468:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800a46a:	f000 f8d1 	bl	800a610 <arm_radix8_butterfly_f32>
    // third col
    arm_radix8_butterfly_f32( pCol3, L, (float32_t *) S->pTwiddle, 4u);
 800a46e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a472:	b299      	uxth	r1, r3
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	685a      	ldr	r2, [r3, #4]
 800a478:	2304      	movs	r3, #4
 800a47a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800a47c:	f000 f8c8 	bl	800a610 <arm_radix8_butterfly_f32>
    // fourth col
    arm_radix8_butterfly_f32( pCol4, L, (float32_t *) S->pTwiddle, 4u);
 800a480:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a484:	b299      	uxth	r1, r3
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	685a      	ldr	r2, [r3, #4]
 800a48a:	2304      	movs	r3, #4
 800a48c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800a48e:	f000 f8bf 	bl	800a610 <arm_radix8_butterfly_f32>
}
 800a492:	bf00      	nop
 800a494:	37b0      	adds	r7, #176	; 0xb0
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}

0800a49a <arm_cfft_f32>:
void arm_cfft_f32( 
    const arm_cfft_instance_f32 * S, 
    float32_t * p1,
    uint8_t ifftFlag,
    uint8_t bitReverseFlag)
{
 800a49a:	b580      	push	{r7, lr}
 800a49c:	b088      	sub	sp, #32
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	60f8      	str	r0, [r7, #12]
 800a4a2:	60b9      	str	r1, [r7, #8]
 800a4a4:	4611      	mov	r1, r2
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	460b      	mov	r3, r1
 800a4aa:	71fb      	strb	r3, [r7, #7]
 800a4ac:	4613      	mov	r3, r2
 800a4ae:	71bb      	strb	r3, [r7, #6]
    uint32_t  L = S->fftLen, l;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	881b      	ldrh	r3, [r3, #0]
 800a4b4:	617b      	str	r3, [r7, #20]
    float32_t invL, * pSrc;

    if(ifftFlag == 1u)
 800a4b6:	79fb      	ldrb	r3, [r7, #7]
 800a4b8:	2b01      	cmp	r3, #1
 800a4ba:	d117      	bne.n	800a4ec <arm_cfft_f32+0x52>
    {
        /*  Conjugate input data  */
        pSrc = p1 + 1;
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	3304      	adds	r3, #4
 800a4c0:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	61fb      	str	r3, [r7, #28]
 800a4c6:	e00d      	b.n	800a4e4 <arm_cfft_f32+0x4a>
        {
            *pSrc = -*pSrc;
 800a4c8:	69bb      	ldr	r3, [r7, #24]
 800a4ca:	edd3 7a00 	vldr	s15, [r3]
 800a4ce:	eef1 7a67 	vneg.f32	s15, s15
 800a4d2:	69bb      	ldr	r3, [r7, #24]
 800a4d4:	edc3 7a00 	vstr	s15, [r3]
            pSrc += 2;
 800a4d8:	69bb      	ldr	r3, [r7, #24]
 800a4da:	3308      	adds	r3, #8
 800a4dc:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 800a4de:	69fb      	ldr	r3, [r7, #28]
 800a4e0:	3301      	adds	r3, #1
 800a4e2:	61fb      	str	r3, [r7, #28]
 800a4e4:	69fa      	ldr	r2, [r7, #28]
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d3ed      	bcc.n	800a4c8 <arm_cfft_f32+0x2e>
        }
    }

    switch (L) 
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4f2:	d040      	beq.n	800a576 <arm_cfft_f32+0xdc>
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4fa:	d845      	bhi.n	800a588 <arm_cfft_f32+0xee>
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a502:	d033      	beq.n	800a56c <arm_cfft_f32+0xd2>
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a50a:	d83d      	bhi.n	800a588 <arm_cfft_f32+0xee>
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a512:	d026      	beq.n	800a562 <arm_cfft_f32+0xc8>
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a51a:	d835      	bhi.n	800a588 <arm_cfft_f32+0xee>
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a522:	d028      	beq.n	800a576 <arm_cfft_f32+0xdc>
 800a524:	697b      	ldr	r3, [r7, #20]
 800a526:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a52a:	d82d      	bhi.n	800a588 <arm_cfft_f32+0xee>
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a532:	d01b      	beq.n	800a56c <arm_cfft_f32+0xd2>
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a53a:	d825      	bhi.n	800a588 <arm_cfft_f32+0xee>
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	2b80      	cmp	r3, #128	; 0x80
 800a540:	d00f      	beq.n	800a562 <arm_cfft_f32+0xc8>
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	2b80      	cmp	r3, #128	; 0x80
 800a546:	d81f      	bhi.n	800a588 <arm_cfft_f32+0xee>
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	2b40      	cmp	r3, #64	; 0x40
 800a54c:	d013      	beq.n	800a576 <arm_cfft_f32+0xdc>
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	2b40      	cmp	r3, #64	; 0x40
 800a552:	d819      	bhi.n	800a588 <arm_cfft_f32+0xee>
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	2b10      	cmp	r3, #16
 800a558:	d003      	beq.n	800a562 <arm_cfft_f32+0xc8>
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	2b20      	cmp	r3, #32
 800a55e:	d005      	beq.n	800a56c <arm_cfft_f32+0xd2>
 800a560:	e012      	b.n	800a588 <arm_cfft_f32+0xee>
    {
    case 16: 
    case 128:
    case 1024:
        arm_cfft_radix8by2_f32  ( (arm_cfft_instance_f32 *) S, p1);
 800a562:	68b9      	ldr	r1, [r7, #8]
 800a564:	68f8      	ldr	r0, [r7, #12]
 800a566:	f7fe ff79 	bl	800945c <arm_cfft_radix8by2_f32>
        break;
 800a56a:	e00d      	b.n	800a588 <arm_cfft_f32+0xee>
    case 32:
    case 256:
    case 2048:
        arm_cfft_radix8by4_f32  ( (arm_cfft_instance_f32 *) S, p1);
 800a56c:	68b9      	ldr	r1, [r7, #8]
 800a56e:	68f8      	ldr	r0, [r7, #12]
 800a570:	f7ff f968 	bl	8009844 <arm_cfft_radix8by4_f32>
        break;
 800a574:	e008      	b.n	800a588 <arm_cfft_f32+0xee>
    case 64:
    case 512:
    case 4096:
        arm_radix8_butterfly_f32( p1, L, (float32_t *) S->pTwiddle, 1);
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	b299      	uxth	r1, r3
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	685a      	ldr	r2, [r3, #4]
 800a57e:	2301      	movs	r3, #1
 800a580:	68b8      	ldr	r0, [r7, #8]
 800a582:	f000 f845 	bl	800a610 <arm_radix8_butterfly_f32>
        break;
 800a586:	bf00      	nop
    }  

    if( bitReverseFlag )
 800a588:	79bb      	ldrb	r3, [r7, #6]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d007      	beq.n	800a59e <arm_cfft_f32+0x104>
        arm_bitreversal_32((uint32_t*)p1,S->bitRevLength,S->pBitRevTable);
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	8999      	ldrh	r1, [r3, #12]
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	689b      	ldr	r3, [r3, #8]
 800a596:	461a      	mov	r2, r3
 800a598:	68b8      	ldr	r0, [r7, #8]
 800a59a:	f7fd fe51 	bl	8008240 <arm_bitreversal_32>

    if(ifftFlag == 1u)
 800a59e:	79fb      	ldrb	r3, [r7, #7]
 800a5a0:	2b01      	cmp	r3, #1
 800a5a2:	d130      	bne.n	800a606 <arm_cfft_f32+0x16c>
    {
        invL = 1.0f/(float32_t)L;
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	ee07 3a90 	vmov	s15, r3
 800a5aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a5ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5b6:	edc7 7a04 	vstr	s15, [r7, #16]
        /*  Conjugate and scale output data */
        pSrc = p1;
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 800a5be:	2300      	movs	r3, #0
 800a5c0:	61fb      	str	r3, [r7, #28]
 800a5c2:	e01c      	b.n	800a5fe <arm_cfft_f32+0x164>
        {
            *pSrc++ *=   invL ;
 800a5c4:	69bb      	ldr	r3, [r7, #24]
 800a5c6:	1d1a      	adds	r2, r3, #4
 800a5c8:	61ba      	str	r2, [r7, #24]
 800a5ca:	ed93 7a00 	vldr	s14, [r3]
 800a5ce:	edd7 7a04 	vldr	s15, [r7, #16]
 800a5d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5d6:	edc3 7a00 	vstr	s15, [r3]
            *pSrc  = -(*pSrc) * invL;
 800a5da:	69bb      	ldr	r3, [r7, #24]
 800a5dc:	edd3 7a00 	vldr	s15, [r3]
 800a5e0:	eeb1 7a67 	vneg.f32	s14, s15
 800a5e4:	edd7 7a04 	vldr	s15, [r7, #16]
 800a5e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5ec:	69bb      	ldr	r3, [r7, #24]
 800a5ee:	edc3 7a00 	vstr	s15, [r3]
            pSrc++;
 800a5f2:	69bb      	ldr	r3, [r7, #24]
 800a5f4:	3304      	adds	r3, #4
 800a5f6:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 800a5f8:	69fb      	ldr	r3, [r7, #28]
 800a5fa:	3301      	adds	r3, #1
 800a5fc:	61fb      	str	r3, [r7, #28]
 800a5fe:	69fa      	ldr	r2, [r7, #28]
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	429a      	cmp	r2, r3
 800a604:	d3de      	bcc.n	800a5c4 <arm_cfft_f32+0x12a>
        }
    }
}
 800a606:	bf00      	nop
 800a608:	3720      	adds	r7, #32
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}
	...

0800a610 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
float32_t * pSrc,
uint16_t fftLen,
const float32_t * pCoef,
uint16_t twidCoefModifier)
{
 800a610:	b480      	push	{r7}
 800a612:	b0bd      	sub	sp, #244	; 0xf4
 800a614:	af00      	add	r7, sp, #0
 800a616:	60f8      	str	r0, [r7, #12]
 800a618:	607a      	str	r2, [r7, #4]
 800a61a:	461a      	mov	r2, r3
 800a61c:	460b      	mov	r3, r1
 800a61e:	817b      	strh	r3, [r7, #10]
 800a620:	4613      	mov	r3, r2
 800a622:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 800a624:	4b09      	ldr	r3, [pc, #36]	; (800a64c <arm_radix8_butterfly_f32+0x3c>)
 800a626:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 800a62a:	897b      	ldrh	r3, [r7, #10]
 800a62c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
   
   do 
   {
      n1 = n2;
 800a630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a634:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 800a638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a63c:	08db      	lsrs	r3, r3, #3
 800a63e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 800a642:	2300      	movs	r3, #0
 800a644:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a648:	e002      	b.n	800a650 <arm_radix8_butterfly_f32+0x40>
 800a64a:	bf00      	nop
 800a64c:	3f3504f3 	.word	0x3f3504f3
      
      do
      {
         i2 = i1 + n2;
 800a650:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800a654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a658:	4413      	add	r3, r2
 800a65a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 800a65e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800a662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a666:	4413      	add	r3, r2
 800a668:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 800a66c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a674:	4413      	add	r3, r2
 800a676:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 800a67a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800a67e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a682:	4413      	add	r3, r2
 800a684:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 800a688:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a68c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a690:	4413      	add	r3, r2
 800a692:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 800a696:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a69a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a69e:	4413      	add	r3, r2
 800a6a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 800a6a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a6a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6ac:	4413      	add	r3, r2
 800a6ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800a6b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a6b6:	00db      	lsls	r3, r3, #3
 800a6b8:	68fa      	ldr	r2, [r7, #12]
 800a6ba:	4413      	add	r3, r2
 800a6bc:	ed93 7a00 	vldr	s14, [r3]
 800a6c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a6c4:	00db      	lsls	r3, r3, #3
 800a6c6:	68fa      	ldr	r2, [r7, #12]
 800a6c8:	4413      	add	r3, r2
 800a6ca:	edd3 7a00 	vldr	s15, [r3]
 800a6ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a6d2:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 800a6d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a6da:	00db      	lsls	r3, r3, #3
 800a6dc:	68fa      	ldr	r2, [r7, #12]
 800a6de:	4413      	add	r3, r2
 800a6e0:	ed93 7a00 	vldr	s14, [r3]
 800a6e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a6e8:	00db      	lsls	r3, r3, #3
 800a6ea:	68fa      	ldr	r2, [r7, #12]
 800a6ec:	4413      	add	r3, r2
 800a6ee:	edd3 7a00 	vldr	s15, [r3]
 800a6f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6f6:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 800a6fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a6fe:	00db      	lsls	r3, r3, #3
 800a700:	68fa      	ldr	r2, [r7, #12]
 800a702:	4413      	add	r3, r2
 800a704:	ed93 7a00 	vldr	s14, [r3]
 800a708:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a70c:	00db      	lsls	r3, r3, #3
 800a70e:	68fa      	ldr	r2, [r7, #12]
 800a710:	4413      	add	r3, r2
 800a712:	edd3 7a00 	vldr	s15, [r3]
 800a716:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a71a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 800a71e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a722:	00db      	lsls	r3, r3, #3
 800a724:	68fa      	ldr	r2, [r7, #12]
 800a726:	4413      	add	r3, r2
 800a728:	ed93 7a00 	vldr	s14, [r3]
 800a72c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a730:	00db      	lsls	r3, r3, #3
 800a732:	68fa      	ldr	r2, [r7, #12]
 800a734:	4413      	add	r3, r2
 800a736:	edd3 7a00 	vldr	s15, [r3]
 800a73a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a73e:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800a742:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a746:	00db      	lsls	r3, r3, #3
 800a748:	68fa      	ldr	r2, [r7, #12]
 800a74a:	4413      	add	r3, r2
 800a74c:	ed93 7a00 	vldr	s14, [r3]
 800a750:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a754:	00db      	lsls	r3, r3, #3
 800a756:	68fa      	ldr	r2, [r7, #12]
 800a758:	4413      	add	r3, r2
 800a75a:	edd3 7a00 	vldr	s15, [r3]
 800a75e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a762:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800a766:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a76a:	00db      	lsls	r3, r3, #3
 800a76c:	68fa      	ldr	r2, [r7, #12]
 800a76e:	4413      	add	r3, r2
 800a770:	ed93 7a00 	vldr	s14, [r3]
 800a774:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a778:	00db      	lsls	r3, r3, #3
 800a77a:	68fa      	ldr	r2, [r7, #12]
 800a77c:	4413      	add	r3, r2
 800a77e:	edd3 7a00 	vldr	s15, [r3]
 800a782:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a786:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800a78a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a78e:	00db      	lsls	r3, r3, #3
 800a790:	68fa      	ldr	r2, [r7, #12]
 800a792:	4413      	add	r3, r2
 800a794:	ed93 7a00 	vldr	s14, [r3]
 800a798:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a79c:	00db      	lsls	r3, r3, #3
 800a79e:	68fa      	ldr	r2, [r7, #12]
 800a7a0:	4413      	add	r3, r2
 800a7a2:	edd3 7a00 	vldr	s15, [r3]
 800a7a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a7aa:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 800a7ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a7b2:	00db      	lsls	r3, r3, #3
 800a7b4:	68fa      	ldr	r2, [r7, #12]
 800a7b6:	4413      	add	r3, r2
 800a7b8:	ed93 7a00 	vldr	s14, [r3]
 800a7bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a7c0:	00db      	lsls	r3, r3, #3
 800a7c2:	68fa      	ldr	r2, [r7, #12]
 800a7c4:	4413      	add	r3, r2
 800a7c6:	edd3 7a00 	vldr	s15, [r3]
 800a7ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a7ce:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 800a7d2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a7d6:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800a7da:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a7de:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 800a7e2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a7e6:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800a7ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a7ee:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 800a7f2:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800a7f6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800a7fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a7fe:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 800a802:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800a806:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800a80a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a80e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;   
 800a812:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a816:	00db      	lsls	r3, r3, #3
 800a818:	68fa      	ldr	r2, [r7, #12]
 800a81a:	4413      	add	r3, r2
 800a81c:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a820:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800a824:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a828:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 800a82c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a830:	00db      	lsls	r3, r3, #3
 800a832:	68fa      	ldr	r2, [r7, #12]
 800a834:	4413      	add	r3, r2
 800a836:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a83a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800a83e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a842:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800a846:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a84a:	00db      	lsls	r3, r3, #3
 800a84c:	3304      	adds	r3, #4
 800a84e:	68fa      	ldr	r2, [r7, #12]
 800a850:	4413      	add	r3, r2
 800a852:	ed93 7a00 	vldr	s14, [r3]
 800a856:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a85a:	00db      	lsls	r3, r3, #3
 800a85c:	3304      	adds	r3, #4
 800a85e:	68fa      	ldr	r2, [r7, #12]
 800a860:	4413      	add	r3, r2
 800a862:	edd3 7a00 	vldr	s15, [r3]
 800a866:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a86a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 800a86e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a872:	00db      	lsls	r3, r3, #3
 800a874:	3304      	adds	r3, #4
 800a876:	68fa      	ldr	r2, [r7, #12]
 800a878:	4413      	add	r3, r2
 800a87a:	ed93 7a00 	vldr	s14, [r3]
 800a87e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a882:	00db      	lsls	r3, r3, #3
 800a884:	3304      	adds	r3, #4
 800a886:	68fa      	ldr	r2, [r7, #12]
 800a888:	4413      	add	r3, r2
 800a88a:	edd3 7a00 	vldr	s15, [r3]
 800a88e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a892:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800a896:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a89a:	00db      	lsls	r3, r3, #3
 800a89c:	3304      	adds	r3, #4
 800a89e:	68fa      	ldr	r2, [r7, #12]
 800a8a0:	4413      	add	r3, r2
 800a8a2:	ed93 7a00 	vldr	s14, [r3]
 800a8a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a8aa:	00db      	lsls	r3, r3, #3
 800a8ac:	3304      	adds	r3, #4
 800a8ae:	68fa      	ldr	r2, [r7, #12]
 800a8b0:	4413      	add	r3, r2
 800a8b2:	edd3 7a00 	vldr	s15, [r3]
 800a8b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a8ba:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 800a8be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a8c2:	00db      	lsls	r3, r3, #3
 800a8c4:	3304      	adds	r3, #4
 800a8c6:	68fa      	ldr	r2, [r7, #12]
 800a8c8:	4413      	add	r3, r2
 800a8ca:	ed93 7a00 	vldr	s14, [r3]
 800a8ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a8d2:	00db      	lsls	r3, r3, #3
 800a8d4:	3304      	adds	r3, #4
 800a8d6:	68fa      	ldr	r2, [r7, #12]
 800a8d8:	4413      	add	r3, r2
 800a8da:	edd3 7a00 	vldr	s15, [r3]
 800a8de:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a8e2:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800a8e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a8ea:	00db      	lsls	r3, r3, #3
 800a8ec:	3304      	adds	r3, #4
 800a8ee:	68fa      	ldr	r2, [r7, #12]
 800a8f0:	4413      	add	r3, r2
 800a8f2:	ed93 7a00 	vldr	s14, [r3]
 800a8f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a8fa:	00db      	lsls	r3, r3, #3
 800a8fc:	3304      	adds	r3, #4
 800a8fe:	68fa      	ldr	r2, [r7, #12]
 800a900:	4413      	add	r3, r2
 800a902:	edd3 7a00 	vldr	s15, [r3]
 800a906:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a90a:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800a90e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a912:	00db      	lsls	r3, r3, #3
 800a914:	3304      	adds	r3, #4
 800a916:	68fa      	ldr	r2, [r7, #12]
 800a918:	4413      	add	r3, r2
 800a91a:	ed93 7a00 	vldr	s14, [r3]
 800a91e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a922:	00db      	lsls	r3, r3, #3
 800a924:	3304      	adds	r3, #4
 800a926:	68fa      	ldr	r2, [r7, #12]
 800a928:	4413      	add	r3, r2
 800a92a:	edd3 7a00 	vldr	s15, [r3]
 800a92e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a932:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800a936:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a93a:	00db      	lsls	r3, r3, #3
 800a93c:	3304      	adds	r3, #4
 800a93e:	68fa      	ldr	r2, [r7, #12]
 800a940:	4413      	add	r3, r2
 800a942:	ed93 7a00 	vldr	s14, [r3]
 800a946:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a94a:	00db      	lsls	r3, r3, #3
 800a94c:	3304      	adds	r3, #4
 800a94e:	68fa      	ldr	r2, [r7, #12]
 800a950:	4413      	add	r3, r2
 800a952:	edd3 7a00 	vldr	s15, [r3]
 800a956:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a95a:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800a95e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a962:	00db      	lsls	r3, r3, #3
 800a964:	3304      	adds	r3, #4
 800a966:	68fa      	ldr	r2, [r7, #12]
 800a968:	4413      	add	r3, r2
 800a96a:	ed93 7a00 	vldr	s14, [r3]
 800a96e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a972:	00db      	lsls	r3, r3, #3
 800a974:	3304      	adds	r3, #4
 800a976:	68fa      	ldr	r2, [r7, #12]
 800a978:	4413      	add	r3, r2
 800a97a:	edd3 7a00 	vldr	s15, [r3]
 800a97e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a982:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 800a986:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a98a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800a98e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a992:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 800a996:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a99a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800a99e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a9a2:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 800a9a6:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800a9aa:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800a9ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a9b2:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 800a9b6:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800a9ba:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800a9be:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a9c2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 800a9c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a9ca:	00db      	lsls	r3, r3, #3
 800a9cc:	3304      	adds	r3, #4
 800a9ce:	68fa      	ldr	r2, [r7, #12]
 800a9d0:	4413      	add	r3, r2
 800a9d2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a9d6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800a9da:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a9de:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 800a9e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a9e6:	00db      	lsls	r3, r3, #3
 800a9e8:	3304      	adds	r3, #4
 800a9ea:	68fa      	ldr	r2, [r7, #12]
 800a9ec:	4413      	add	r3, r2
 800a9ee:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a9f2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800a9f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a9fa:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 800a9fe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800aa02:	00db      	lsls	r3, r3, #3
 800aa04:	68fa      	ldr	r2, [r7, #12]
 800aa06:	4413      	add	r3, r2
 800aa08:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800aa0c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800aa10:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa14:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 800aa18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800aa1c:	00db      	lsls	r3, r3, #3
 800aa1e:	68fa      	ldr	r2, [r7, #12]
 800aa20:	4413      	add	r3, r2
 800aa22:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800aa26:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800aa2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa2e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 800aa32:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800aa36:	00db      	lsls	r3, r3, #3
 800aa38:	3304      	adds	r3, #4
 800aa3a:	68fa      	ldr	r2, [r7, #12]
 800aa3c:	4413      	add	r3, r2
 800aa3e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800aa42:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800aa46:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa4a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 800aa4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800aa52:	00db      	lsls	r3, r3, #3
 800aa54:	3304      	adds	r3, #4
 800aa56:	68fa      	ldr	r2, [r7, #12]
 800aa58:	4413      	add	r3, r2
 800aa5a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800aa5e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800aa62:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa66:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 800aa6a:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800aa6e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800aa72:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa76:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800aa7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa7e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 800aa82:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800aa86:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800aa8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa8e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800aa92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa96:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 800aa9a:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800aa9e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800aaa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aaa6:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800aaaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaae:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 800aab2:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800aab6:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800aaba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aabe:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800aac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aac6:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 800aaca:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800aace:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800aad2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aad6:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 800aada:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800aade:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800aae2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aae6:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 800aaea:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800aaee:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800aaf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aaf6:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 800aafa:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800aafe:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800ab02:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab06:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 800ab0a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800ab0e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800ab12:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab16:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 800ab1a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800ab1e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800ab22:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab26:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 800ab2a:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800ab2e:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800ab32:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab36:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 800ab3a:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800ab3e:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800ab42:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab46:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 800ab4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ab4e:	00db      	lsls	r3, r3, #3
 800ab50:	68fa      	ldr	r2, [r7, #12]
 800ab52:	4413      	add	r3, r2
 800ab54:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800ab58:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800ab5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab60:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 800ab64:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ab68:	00db      	lsls	r3, r3, #3
 800ab6a:	68fa      	ldr	r2, [r7, #12]
 800ab6c:	4413      	add	r3, r2
 800ab6e:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800ab72:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800ab76:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab7a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 800ab7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ab82:	00db      	lsls	r3, r3, #3
 800ab84:	68fa      	ldr	r2, [r7, #12]
 800ab86:	4413      	add	r3, r2
 800ab88:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800ab8c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800ab90:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab94:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 800ab98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ab9c:	00db      	lsls	r3, r3, #3
 800ab9e:	68fa      	ldr	r2, [r7, #12]
 800aba0:	4413      	add	r3, r2
 800aba2:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800aba6:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800abaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800abae:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 800abb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800abb6:	00db      	lsls	r3, r3, #3
 800abb8:	3304      	adds	r3, #4
 800abba:	68fa      	ldr	r2, [r7, #12]
 800abbc:	4413      	add	r3, r2
 800abbe:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800abc2:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800abc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800abca:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 800abce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800abd2:	00db      	lsls	r3, r3, #3
 800abd4:	3304      	adds	r3, #4
 800abd6:	68fa      	ldr	r2, [r7, #12]
 800abd8:	4413      	add	r3, r2
 800abda:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800abde:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800abe2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800abe6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 800abea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800abee:	00db      	lsls	r3, r3, #3
 800abf0:	3304      	adds	r3, #4
 800abf2:	68fa      	ldr	r2, [r7, #12]
 800abf4:	4413      	add	r3, r2
 800abf6:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800abfa:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800abfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac02:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 800ac06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ac0a:	00db      	lsls	r3, r3, #3
 800ac0c:	3304      	adds	r3, #4
 800ac0e:	68fa      	ldr	r2, [r7, #12]
 800ac10:	4413      	add	r3, r2
 800ac12:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800ac16:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800ac1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac1e:	edc3 7a00 	vstr	s15, [r3]
         
         i1 += n1;
 800ac22:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800ac26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ac2a:	4413      	add	r3, r2
 800ac2c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while(i1 < fftLen);
 800ac30:	897b      	ldrh	r3, [r7, #10]
 800ac32:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800ac36:	429a      	cmp	r2, r3
 800ac38:	f4ff ad0a 	bcc.w	800a650 <arm_radix8_butterfly_f32+0x40>
      
      if(n2 < 8)
 800ac3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac40:	2b07      	cmp	r3, #7
 800ac42:	f240 84e3 	bls.w	800b60c <arm_radix8_butterfly_f32+0xffc>
         break;
      
      ia1 = 0;
 800ac46:	2300      	movs	r3, #0
 800ac48:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      
      do
      {      
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 800ac52:	893b      	ldrh	r3, [r7, #8]
 800ac54:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800ac58:	4413      	add	r3, r2
 800ac5a:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 800ac5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ac5e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 800ac62:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800ac66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ac68:	4413      	add	r3, r2
 800ac6a:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 800ac6c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ac6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ac70:	4413      	add	r3, r2
 800ac72:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 800ac74:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ac76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ac78:	4413      	add	r3, r2
 800ac7a:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 800ac7c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ac7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ac80:	4413      	add	r3, r2
 800ac82:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 800ac84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ac86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ac88:	4413      	add	r3, r2
 800ac8a:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 800ac8c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ac8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ac90:	4413      	add	r3, r2
 800ac92:	667b      	str	r3, [r7, #100]	; 0x64
                  
         co2 = pCoef[2 * ia1];
 800ac94:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ac98:	00db      	lsls	r3, r3, #3
 800ac9a:	687a      	ldr	r2, [r7, #4]
 800ac9c:	4413      	add	r3, r2
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 800aca2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aca4:	00db      	lsls	r3, r3, #3
 800aca6:	687a      	ldr	r2, [r7, #4]
 800aca8:	4413      	add	r3, r2
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 800acae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800acb0:	00db      	lsls	r3, r3, #3
 800acb2:	687a      	ldr	r2, [r7, #4]
 800acb4:	4413      	add	r3, r2
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 800acba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800acbc:	00db      	lsls	r3, r3, #3
 800acbe:	687a      	ldr	r2, [r7, #4]
 800acc0:	4413      	add	r3, r2
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 800acc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acc8:	00db      	lsls	r3, r3, #3
 800acca:	687a      	ldr	r2, [r7, #4]
 800accc:	4413      	add	r3, r2
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 800acd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800acd4:	00db      	lsls	r3, r3, #3
 800acd6:	687a      	ldr	r2, [r7, #4]
 800acd8:	4413      	add	r3, r2
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 800acde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ace0:	00db      	lsls	r3, r3, #3
 800ace2:	687a      	ldr	r2, [r7, #4]
 800ace4:	4413      	add	r3, r2
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 800acea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800acee:	00db      	lsls	r3, r3, #3
 800acf0:	3304      	adds	r3, #4
 800acf2:	687a      	ldr	r2, [r7, #4]
 800acf4:	4413      	add	r3, r2
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 800acfa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800acfc:	00db      	lsls	r3, r3, #3
 800acfe:	3304      	adds	r3, #4
 800ad00:	687a      	ldr	r2, [r7, #4]
 800ad02:	4413      	add	r3, r2
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 800ad08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad0a:	00db      	lsls	r3, r3, #3
 800ad0c:	3304      	adds	r3, #4
 800ad0e:	687a      	ldr	r2, [r7, #4]
 800ad10:	4413      	add	r3, r2
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 800ad16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ad18:	00db      	lsls	r3, r3, #3
 800ad1a:	3304      	adds	r3, #4
 800ad1c:	687a      	ldr	r2, [r7, #4]
 800ad1e:	4413      	add	r3, r2
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 800ad24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad26:	00db      	lsls	r3, r3, #3
 800ad28:	3304      	adds	r3, #4
 800ad2a:	687a      	ldr	r2, [r7, #4]
 800ad2c:	4413      	add	r3, r2
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 800ad32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ad34:	00db      	lsls	r3, r3, #3
 800ad36:	3304      	adds	r3, #4
 800ad38:	687a      	ldr	r2, [r7, #4]
 800ad3a:	4413      	add	r3, r2
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];         
 800ad40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad42:	00db      	lsls	r3, r3, #3
 800ad44:	3304      	adds	r3, #4
 800ad46:	687a      	ldr	r2, [r7, #4]
 800ad48:	4413      	add	r3, r2
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	62fb      	str	r3, [r7, #44]	; 0x2c
         
         i1 = j;
 800ad4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         
         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 800ad56:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800ad5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad5e:	4413      	add	r3, r2
 800ad60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 800ad64:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800ad68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad6c:	4413      	add	r3, r2
 800ad6e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 800ad72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ad76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad7a:	4413      	add	r3, r2
 800ad7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 800ad80:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800ad84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad88:	4413      	add	r3, r2
 800ad8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 800ad8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ad92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad96:	4413      	add	r3, r2
 800ad98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 800ad9c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ada0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ada4:	4413      	add	r3, r2
 800ada6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 800adaa:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800adae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adb2:	4413      	add	r3, r2
 800adb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800adb8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800adbc:	00db      	lsls	r3, r3, #3
 800adbe:	68fa      	ldr	r2, [r7, #12]
 800adc0:	4413      	add	r3, r2
 800adc2:	ed93 7a00 	vldr	s14, [r3]
 800adc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800adca:	00db      	lsls	r3, r3, #3
 800adcc:	68fa      	ldr	r2, [r7, #12]
 800adce:	4413      	add	r3, r2
 800add0:	edd3 7a00 	vldr	s15, [r3]
 800add4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800add8:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 800addc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ade0:	00db      	lsls	r3, r3, #3
 800ade2:	68fa      	ldr	r2, [r7, #12]
 800ade4:	4413      	add	r3, r2
 800ade6:	ed93 7a00 	vldr	s14, [r3]
 800adea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800adee:	00db      	lsls	r3, r3, #3
 800adf0:	68fa      	ldr	r2, [r7, #12]
 800adf2:	4413      	add	r3, r2
 800adf4:	edd3 7a00 	vldr	s15, [r3]
 800adf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800adfc:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 800ae00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ae04:	00db      	lsls	r3, r3, #3
 800ae06:	68fa      	ldr	r2, [r7, #12]
 800ae08:	4413      	add	r3, r2
 800ae0a:	ed93 7a00 	vldr	s14, [r3]
 800ae0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ae12:	00db      	lsls	r3, r3, #3
 800ae14:	68fa      	ldr	r2, [r7, #12]
 800ae16:	4413      	add	r3, r2
 800ae18:	edd3 7a00 	vldr	s15, [r3]
 800ae1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae20:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 800ae24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ae28:	00db      	lsls	r3, r3, #3
 800ae2a:	68fa      	ldr	r2, [r7, #12]
 800ae2c:	4413      	add	r3, r2
 800ae2e:	ed93 7a00 	vldr	s14, [r3]
 800ae32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ae36:	00db      	lsls	r3, r3, #3
 800ae38:	68fa      	ldr	r2, [r7, #12]
 800ae3a:	4413      	add	r3, r2
 800ae3c:	edd3 7a00 	vldr	s15, [r3]
 800ae40:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae44:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800ae48:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ae4c:	00db      	lsls	r3, r3, #3
 800ae4e:	68fa      	ldr	r2, [r7, #12]
 800ae50:	4413      	add	r3, r2
 800ae52:	ed93 7a00 	vldr	s14, [r3]
 800ae56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ae5a:	00db      	lsls	r3, r3, #3
 800ae5c:	68fa      	ldr	r2, [r7, #12]
 800ae5e:	4413      	add	r3, r2
 800ae60:	edd3 7a00 	vldr	s15, [r3]
 800ae64:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae68:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800ae6c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ae70:	00db      	lsls	r3, r3, #3
 800ae72:	68fa      	ldr	r2, [r7, #12]
 800ae74:	4413      	add	r3, r2
 800ae76:	ed93 7a00 	vldr	s14, [r3]
 800ae7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ae7e:	00db      	lsls	r3, r3, #3
 800ae80:	68fa      	ldr	r2, [r7, #12]
 800ae82:	4413      	add	r3, r2
 800ae84:	edd3 7a00 	vldr	s15, [r3]
 800ae88:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae8c:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800ae90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ae94:	00db      	lsls	r3, r3, #3
 800ae96:	68fa      	ldr	r2, [r7, #12]
 800ae98:	4413      	add	r3, r2
 800ae9a:	ed93 7a00 	vldr	s14, [r3]
 800ae9e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800aea2:	00db      	lsls	r3, r3, #3
 800aea4:	68fa      	ldr	r2, [r7, #12]
 800aea6:	4413      	add	r3, r2
 800aea8:	edd3 7a00 	vldr	s15, [r3]
 800aeac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aeb0:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 800aeb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800aeb8:	00db      	lsls	r3, r3, #3
 800aeba:	68fa      	ldr	r2, [r7, #12]
 800aebc:	4413      	add	r3, r2
 800aebe:	ed93 7a00 	vldr	s14, [r3]
 800aec2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800aec6:	00db      	lsls	r3, r3, #3
 800aec8:	68fa      	ldr	r2, [r7, #12]
 800aeca:	4413      	add	r3, r2
 800aecc:	edd3 7a00 	vldr	s15, [r3]
 800aed0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aed4:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 800aed8:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800aedc:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800aee0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aee4:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 800aee8:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800aeec:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800aef0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aef4:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 800aef8:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800aefc:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800af00:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af04:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 800af08:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800af0c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800af10:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af14:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 800af18:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800af1c:	00db      	lsls	r3, r3, #3
 800af1e:	68fa      	ldr	r2, [r7, #12]
 800af20:	4413      	add	r3, r2
 800af22:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800af26:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800af2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af2e:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 800af32:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800af36:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800af3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af3e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800af42:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800af46:	00db      	lsls	r3, r3, #3
 800af48:	3304      	adds	r3, #4
 800af4a:	68fa      	ldr	r2, [r7, #12]
 800af4c:	4413      	add	r3, r2
 800af4e:	ed93 7a00 	vldr	s14, [r3]
 800af52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800af56:	00db      	lsls	r3, r3, #3
 800af58:	3304      	adds	r3, #4
 800af5a:	68fa      	ldr	r2, [r7, #12]
 800af5c:	4413      	add	r3, r2
 800af5e:	edd3 7a00 	vldr	s15, [r3]
 800af62:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af66:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 800af6a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800af6e:	00db      	lsls	r3, r3, #3
 800af70:	3304      	adds	r3, #4
 800af72:	68fa      	ldr	r2, [r7, #12]
 800af74:	4413      	add	r3, r2
 800af76:	ed93 7a00 	vldr	s14, [r3]
 800af7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800af7e:	00db      	lsls	r3, r3, #3
 800af80:	3304      	adds	r3, #4
 800af82:	68fa      	ldr	r2, [r7, #12]
 800af84:	4413      	add	r3, r2
 800af86:	edd3 7a00 	vldr	s15, [r3]
 800af8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af8e:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800af92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800af96:	00db      	lsls	r3, r3, #3
 800af98:	3304      	adds	r3, #4
 800af9a:	68fa      	ldr	r2, [r7, #12]
 800af9c:	4413      	add	r3, r2
 800af9e:	ed93 7a00 	vldr	s14, [r3]
 800afa2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800afa6:	00db      	lsls	r3, r3, #3
 800afa8:	3304      	adds	r3, #4
 800afaa:	68fa      	ldr	r2, [r7, #12]
 800afac:	4413      	add	r3, r2
 800afae:	edd3 7a00 	vldr	s15, [r3]
 800afb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800afb6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 800afba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800afbe:	00db      	lsls	r3, r3, #3
 800afc0:	3304      	adds	r3, #4
 800afc2:	68fa      	ldr	r2, [r7, #12]
 800afc4:	4413      	add	r3, r2
 800afc6:	ed93 7a00 	vldr	s14, [r3]
 800afca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800afce:	00db      	lsls	r3, r3, #3
 800afd0:	3304      	adds	r3, #4
 800afd2:	68fa      	ldr	r2, [r7, #12]
 800afd4:	4413      	add	r3, r2
 800afd6:	edd3 7a00 	vldr	s15, [r3]
 800afda:	ee77 7a67 	vsub.f32	s15, s14, s15
 800afde:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800afe2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800afe6:	00db      	lsls	r3, r3, #3
 800afe8:	3304      	adds	r3, #4
 800afea:	68fa      	ldr	r2, [r7, #12]
 800afec:	4413      	add	r3, r2
 800afee:	ed93 7a00 	vldr	s14, [r3]
 800aff2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800aff6:	00db      	lsls	r3, r3, #3
 800aff8:	3304      	adds	r3, #4
 800affa:	68fa      	ldr	r2, [r7, #12]
 800affc:	4413      	add	r3, r2
 800affe:	edd3 7a00 	vldr	s15, [r3]
 800b002:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b006:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800b00a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b00e:	00db      	lsls	r3, r3, #3
 800b010:	3304      	adds	r3, #4
 800b012:	68fa      	ldr	r2, [r7, #12]
 800b014:	4413      	add	r3, r2
 800b016:	ed93 7a00 	vldr	s14, [r3]
 800b01a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b01e:	00db      	lsls	r3, r3, #3
 800b020:	3304      	adds	r3, #4
 800b022:	68fa      	ldr	r2, [r7, #12]
 800b024:	4413      	add	r3, r2
 800b026:	edd3 7a00 	vldr	s15, [r3]
 800b02a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b02e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800b032:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b036:	00db      	lsls	r3, r3, #3
 800b038:	3304      	adds	r3, #4
 800b03a:	68fa      	ldr	r2, [r7, #12]
 800b03c:	4413      	add	r3, r2
 800b03e:	ed93 7a00 	vldr	s14, [r3]
 800b042:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b046:	00db      	lsls	r3, r3, #3
 800b048:	3304      	adds	r3, #4
 800b04a:	68fa      	ldr	r2, [r7, #12]
 800b04c:	4413      	add	r3, r2
 800b04e:	edd3 7a00 	vldr	s15, [r3]
 800b052:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b056:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800b05a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b05e:	00db      	lsls	r3, r3, #3
 800b060:	3304      	adds	r3, #4
 800b062:	68fa      	ldr	r2, [r7, #12]
 800b064:	4413      	add	r3, r2
 800b066:	ed93 7a00 	vldr	s14, [r3]
 800b06a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b06e:	00db      	lsls	r3, r3, #3
 800b070:	3304      	adds	r3, #4
 800b072:	68fa      	ldr	r2, [r7, #12]
 800b074:	4413      	add	r3, r2
 800b076:	edd3 7a00 	vldr	s15, [r3]
 800b07a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b07e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 800b082:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b086:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800b08a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b08e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 800b092:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b096:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800b09a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b09e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 800b0a2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b0a6:	edd7 7a08 	vldr	s15, [r7, #32]
 800b0aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b0ae:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 800b0b2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b0b6:	edd7 7a08 	vldr	s15, [r7, #32]
 800b0ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b0be:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 800b0c2:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800b0c6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800b0ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b0ce:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 800b0d2:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800b0d6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800b0da:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b0de:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 800b0e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b0e6:	00db      	lsls	r3, r3, #3
 800b0e8:	3304      	adds	r3, #4
 800b0ea:	68fa      	ldr	r2, [r7, #12]
 800b0ec:	4413      	add	r3, r2
 800b0ee:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b0f2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b0f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b0fa:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 800b0fe:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b102:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b106:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b10a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 800b10e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800b112:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800b116:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b11a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 800b11e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800b122:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800b126:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b12a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 800b12e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800b132:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800b136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b13a:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 800b13e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800b142:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b14a:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 800b14e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800b152:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b15a:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 800b15e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800b162:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800b166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b16a:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 800b16e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b172:	00db      	lsls	r3, r3, #3
 800b174:	68fa      	ldr	r2, [r7, #12]
 800b176:	4413      	add	r3, r2
 800b178:	ed97 7a07 	vldr	s14, [r7, #28]
 800b17c:	edd7 7a06 	vldr	s15, [r7, #24]
 800b180:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b184:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 800b188:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b18c:	00db      	lsls	r3, r3, #3
 800b18e:	3304      	adds	r3, #4
 800b190:	68fa      	ldr	r2, [r7, #12]
 800b192:	4413      	add	r3, r2
 800b194:	ed97 7a05 	vldr	s14, [r7, #20]
 800b198:	edd7 7a04 	vldr	s15, [r7, #16]
 800b19c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b1a0:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 800b1a4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800b1a8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800b1ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1b0:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 800b1b4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800b1b8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b1bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1c0:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 800b1c4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800b1c8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b1cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1d0:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 800b1d4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800b1d8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800b1dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1e0:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 800b1e4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b1e8:	00db      	lsls	r3, r3, #3
 800b1ea:	68fa      	ldr	r2, [r7, #12]
 800b1ec:	4413      	add	r3, r2
 800b1ee:	ed97 7a07 	vldr	s14, [r7, #28]
 800b1f2:	edd7 7a06 	vldr	s15, [r7, #24]
 800b1f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b1fa:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 800b1fe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b202:	00db      	lsls	r3, r3, #3
 800b204:	3304      	adds	r3, #4
 800b206:	68fa      	ldr	r2, [r7, #12]
 800b208:	4413      	add	r3, r2
 800b20a:	ed97 7a05 	vldr	s14, [r7, #20]
 800b20e:	edd7 7a04 	vldr	s15, [r7, #16]
 800b212:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b216:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 800b21a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800b21e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800b222:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b226:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 800b22a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800b22e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800b232:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b236:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 800b23a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800b23e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800b242:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b246:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 800b24a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800b24e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800b252:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b256:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 800b25a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b25e:	00db      	lsls	r3, r3, #3
 800b260:	68fa      	ldr	r2, [r7, #12]
 800b262:	4413      	add	r3, r2
 800b264:	ed97 7a07 	vldr	s14, [r7, #28]
 800b268:	edd7 7a06 	vldr	s15, [r7, #24]
 800b26c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b270:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 800b274:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b278:	00db      	lsls	r3, r3, #3
 800b27a:	3304      	adds	r3, #4
 800b27c:	68fa      	ldr	r2, [r7, #12]
 800b27e:	4413      	add	r3, r2
 800b280:	ed97 7a05 	vldr	s14, [r7, #20]
 800b284:	edd7 7a04 	vldr	s15, [r7, #16]
 800b288:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b28c:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 800b290:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800b294:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800b298:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b29c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800b2a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2a4:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 800b2a8:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800b2ac:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800b2b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b2b4:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800b2b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2bc:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 800b2c0:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800b2c4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800b2c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b2cc:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800b2d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2d4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 800b2d8:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800b2dc:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800b2e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b2e4:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800b2e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2ec:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 800b2f0:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800b2f4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800b2f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b2fc:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 800b300:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800b304:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800b308:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b30c:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 800b310:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800b314:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800b318:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b31c:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 800b320:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800b324:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800b328:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b32c:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 800b330:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800b334:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b338:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b33c:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 800b340:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800b344:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b348:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b34c:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 800b350:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800b354:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800b358:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b35c:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 800b360:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800b364:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800b368:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b36c:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 800b370:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800b374:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800b378:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b37c:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 800b380:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800b384:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800b388:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b38c:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 800b390:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800b394:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800b398:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b39c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 800b3a0:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800b3a4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800b3a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b3ac:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 800b3b0:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800b3b4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800b3b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b3bc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 800b3c0:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800b3c4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800b3c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b3cc:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 800b3d0:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800b3d4:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800b3d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b3dc:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 800b3e0:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800b3e4:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800b3e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b3ec:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 800b3f0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800b3f4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800b3f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3fc:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 800b400:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800b404:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b408:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b40c:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 800b410:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800b414:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b41c:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 800b420:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800b424:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800b428:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b42c:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 800b430:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b434:	00db      	lsls	r3, r3, #3
 800b436:	68fa      	ldr	r2, [r7, #12]
 800b438:	4413      	add	r3, r2
 800b43a:	ed97 7a07 	vldr	s14, [r7, #28]
 800b43e:	edd7 7a06 	vldr	s15, [r7, #24]
 800b442:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b446:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 800b44a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b44e:	00db      	lsls	r3, r3, #3
 800b450:	3304      	adds	r3, #4
 800b452:	68fa      	ldr	r2, [r7, #12]
 800b454:	4413      	add	r3, r2
 800b456:	ed97 7a05 	vldr	s14, [r7, #20]
 800b45a:	edd7 7a04 	vldr	s15, [r7, #16]
 800b45e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b462:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 800b466:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800b46a:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800b46e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b472:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 800b476:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b47a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800b47e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b482:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 800b486:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800b48a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800b48e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b492:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 800b496:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b49a:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800b49e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4a2:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 800b4a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b4aa:	00db      	lsls	r3, r3, #3
 800b4ac:	68fa      	ldr	r2, [r7, #12]
 800b4ae:	4413      	add	r3, r2
 800b4b0:	ed97 7a07 	vldr	s14, [r7, #28]
 800b4b4:	edd7 7a06 	vldr	s15, [r7, #24]
 800b4b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b4bc:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 800b4c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b4c4:	00db      	lsls	r3, r3, #3
 800b4c6:	3304      	adds	r3, #4
 800b4c8:	68fa      	ldr	r2, [r7, #12]
 800b4ca:	4413      	add	r3, r2
 800b4cc:	ed97 7a05 	vldr	s14, [r7, #20]
 800b4d0:	edd7 7a04 	vldr	s15, [r7, #16]
 800b4d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b4d8:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 800b4dc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800b4e0:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800b4e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4e8:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 800b4ec:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b4f0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800b4f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4f8:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 800b4fc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800b500:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800b504:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b508:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 800b50c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b510:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800b514:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b518:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 800b51c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b520:	00db      	lsls	r3, r3, #3
 800b522:	68fa      	ldr	r2, [r7, #12]
 800b524:	4413      	add	r3, r2
 800b526:	ed97 7a07 	vldr	s14, [r7, #28]
 800b52a:	edd7 7a06 	vldr	s15, [r7, #24]
 800b52e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b532:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 800b536:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b53a:	00db      	lsls	r3, r3, #3
 800b53c:	3304      	adds	r3, #4
 800b53e:	68fa      	ldr	r2, [r7, #12]
 800b540:	4413      	add	r3, r2
 800b542:	ed97 7a05 	vldr	s14, [r7, #20]
 800b546:	edd7 7a04 	vldr	s15, [r7, #16]
 800b54a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b54e:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 800b552:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800b556:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800b55a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b55e:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 800b562:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800b566:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800b56a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b56e:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 800b572:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800b576:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800b57a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b57e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 800b582:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800b586:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800b58a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b58e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 800b592:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b596:	00db      	lsls	r3, r3, #3
 800b598:	68fa      	ldr	r2, [r7, #12]
 800b59a:	4413      	add	r3, r2
 800b59c:	ed97 7a07 	vldr	s14, [r7, #28]
 800b5a0:	edd7 7a06 	vldr	s15, [r7, #24]
 800b5a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b5a8:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 800b5ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b5b0:	00db      	lsls	r3, r3, #3
 800b5b2:	3304      	adds	r3, #4
 800b5b4:	68fa      	ldr	r2, [r7, #12]
 800b5b6:	4413      	add	r3, r2
 800b5b8:	ed97 7a05 	vldr	s14, [r7, #20]
 800b5bc:	edd7 7a04 	vldr	s15, [r7, #16]
 800b5c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b5c4:	edc3 7a00 	vstr	s15, [r3]
            
            i1 += n1;
 800b5c8:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800b5cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b5d0:	4413      	add	r3, r2
 800b5d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while(i1 < fftLen);
 800b5d6:	897b      	ldrh	r3, [r7, #10]
 800b5d8:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800b5dc:	429a      	cmp	r2, r3
 800b5de:	f4ff abba 	bcc.w	800ad56 <arm_radix8_butterfly_f32+0x746>
         
         j++;
 800b5e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5e6:	3301      	adds	r3, #1
 800b5e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while(j < n2);
 800b5ec:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b5f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5f4:	429a      	cmp	r2, r3
 800b5f6:	f4ff ab2c 	bcc.w	800ac52 <arm_radix8_butterfly_f32+0x642>
      
      twidCoefModifier <<= 3;
 800b5fa:	893b      	ldrh	r3, [r7, #8]
 800b5fc:	00db      	lsls	r3, r3, #3
 800b5fe:	813b      	strh	r3, [r7, #8]
   } while(n2 > 7);   
 800b600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b604:	2b07      	cmp	r3, #7
 800b606:	f63f a813 	bhi.w	800a630 <arm_radix8_butterfly_f32+0x20>
}
 800b60a:	e000      	b.n	800b60e <arm_radix8_butterfly_f32+0xffe>
         break;
 800b60c:	bf00      	nop
}
 800b60e:	bf00      	nop
 800b610:	37f4      	adds	r7, #244	; 0xf4
 800b612:	46bd      	mov	sp, r7
 800b614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b618:	4770      	bx	lr
 800b61a:	bf00      	nop

0800b61c <setDIFFChannel>:
*	parameter:
*	The return value: val
*********************************************************************************************************
*/
void setDIFFChannel(uint8_t positiveCh, uint8_t NegativeCh)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b082      	sub	sp, #8
 800b620:	af00      	add	r7, sp, #0
 800b622:	4603      	mov	r3, r0
 800b624:	460a      	mov	r2, r1
 800b626:	71fb      	strb	r3, [r7, #7]
 800b628:	4613      	mov	r3, r2
 800b62a:	71bb      	strb	r3, [r7, #6]
	writeByteToReg(REG_MUX, positiveCh <<4 | NegativeCh); //xxxx1000 - AINp = positiveCh, AINn = NegativeCh
 800b62c:	79fb      	ldrb	r3, [r7, #7]
 800b62e:	011b      	lsls	r3, r3, #4
 800b630:	b25a      	sxtb	r2, r3
 800b632:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b636:	4313      	orrs	r3, r2
 800b638:	b25b      	sxtb	r3, r3
 800b63a:	b2db      	uxtb	r3, r3
 800b63c:	4619      	mov	r1, r3
 800b63e:	2001      	movs	r0, #1
 800b640:	f000 f832 	bl	800b6a8 <writeByteToReg>
}
 800b644:	bf00      	nop
 800b646:	3708      	adds	r7, #8
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}

0800b64c <writeCMD>:
*	The return value: None
*********************************************************************************************************
*/

void writeCMD(uint8_t command)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b084      	sub	sp, #16
 800b650:	af00      	add	r7, sp, #0
 800b652:	4603      	mov	r3, r0
 800b654:	71fb      	strb	r3, [r7, #7]
	uint8_t Txbuffer[1];
	Txbuffer[0] = command;
 800b656:	79fb      	ldrb	r3, [r7, #7]
 800b658:	733b      	strb	r3, [r7, #12]
	CS_0();
 800b65a:	2200      	movs	r2, #0
 800b65c:	2110      	movs	r1, #16
 800b65e:	4809      	ldr	r0, [pc, #36]	; (800b684 <writeCMD+0x38>)
 800b660:	f005 fc12 	bl	8010e88 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, Txbuffer ,1,50);
 800b664:	f107 010c 	add.w	r1, r7, #12
 800b668:	2332      	movs	r3, #50	; 0x32
 800b66a:	2201      	movs	r2, #1
 800b66c:	4806      	ldr	r0, [pc, #24]	; (800b688 <writeCMD+0x3c>)
 800b66e:	f007 fb3e 	bl	8012cee <HAL_SPI_Transmit>
	CS_1();
 800b672:	2201      	movs	r2, #1
 800b674:	2110      	movs	r1, #16
 800b676:	4803      	ldr	r0, [pc, #12]	; (800b684 <writeCMD+0x38>)
 800b678:	f005 fc06 	bl	8010e88 <HAL_GPIO_WritePin>
}
 800b67c:	bf00      	nop
 800b67e:	3710      	adds	r7, #16
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}
 800b684:	40020000 	.word	0x40020000
 800b688:	20002d68 	.word	0x20002d68

0800b68c <setDataRate>:
*	parameter: pga
*	The return value: None
*********************************************************************************************************
*/
void setDataRate(uint8_t drate)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b082      	sub	sp, #8
 800b690:	af00      	add	r7, sp, #0
 800b692:	4603      	mov	r3, r0
 800b694:	71fb      	strb	r3, [r7, #7]
	writeByteToReg(REG_DRATE,drate);
 800b696:	79fb      	ldrb	r3, [r7, #7]
 800b698:	4619      	mov	r1, r3
 800b69a:	2003      	movs	r0, #3
 800b69c:	f000 f804 	bl	800b6a8 <writeByteToReg>
}
 800b6a0:	bf00      	nop
 800b6a2:	3708      	adds	r7, #8
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}

0800b6a8 <writeByteToReg>:
*	parameter: register ID
*	The return value:
*********************************************************************************************************
*/
void writeByteToReg(uint8_t registerID, uint8_t value)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b084      	sub	sp, #16
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	460a      	mov	r2, r1
 800b6b2:	71fb      	strb	r3, [r7, #7]
 800b6b4:	4613      	mov	r3, r2
 800b6b6:	71bb      	strb	r3, [r7, #6]
	uint8_t Txbuffer[3];
	Txbuffer[0] = CMD_WREG | registerID;
 800b6b8:	79fb      	ldrb	r3, [r7, #7]
 800b6ba:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800b6be:	b2db      	uxtb	r3, r3
 800b6c0:	733b      	strb	r3, [r7, #12]
	Txbuffer[1] = 0x00;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	737b      	strb	r3, [r7, #13]
	Txbuffer[2] = value;
 800b6c6:	79bb      	ldrb	r3, [r7, #6]
 800b6c8:	73bb      	strb	r3, [r7, #14]
	CS_0();
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	2110      	movs	r1, #16
 800b6ce:	4809      	ldr	r0, [pc, #36]	; (800b6f4 <writeByteToReg+0x4c>)
 800b6d0:	f005 fbda 	bl	8010e88 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, Txbuffer ,3,100);
 800b6d4:	f107 010c 	add.w	r1, r7, #12
 800b6d8:	2364      	movs	r3, #100	; 0x64
 800b6da:	2203      	movs	r2, #3
 800b6dc:	4806      	ldr	r0, [pc, #24]	; (800b6f8 <writeByteToReg+0x50>)
 800b6de:	f007 fb06 	bl	8012cee <HAL_SPI_Transmit>
	/*
	send8bit(CMD_WREG | registerID);		//1syt byte: address of the first register to write
	send8bit(0x00);							//2nd byte: number of byte to write = 1.
	send8bit(value);						//3rd byte: value to write to register
	*/
	CS_1();
 800b6e2:	2201      	movs	r2, #1
 800b6e4:	2110      	movs	r1, #16
 800b6e6:	4803      	ldr	r0, [pc, #12]	; (800b6f4 <writeByteToReg+0x4c>)
 800b6e8:	f005 fbce 	bl	8010e88 <HAL_GPIO_WritePin>

}
 800b6ec:	bf00      	nop
 800b6ee:	3710      	adds	r7, #16
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}
 800b6f4:	40020000 	.word	0x40020000
 800b6f8:	20002d68 	.word	0x20002d68

0800b6fc <setPGA>:
*	parameter: pga
*	The return value: None
*********************************************************************************************************
*/
void setPGA(uint8_t pga)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b082      	sub	sp, #8
 800b700:	af00      	add	r7, sp, #0
 800b702:	4603      	mov	r3, r0
 800b704:	71fb      	strb	r3, [r7, #7]
	writeByteToReg(REG_ADCON,pga);
 800b706:	79fb      	ldrb	r3, [r7, #7]
 800b708:	4619      	mov	r1, r3
 800b70a:	2002      	movs	r0, #2
 800b70c:	f7ff ffcc 	bl	800b6a8 <writeByteToReg>
}
 800b710:	bf00      	nop
 800b712:	3708      	adds	r7, #8
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}

0800b718 <waitDRDY>:
*	parameter: data
*	The return value: None
*********************************************************************************************************
*/
void waitDRDY(void)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b082      	sub	sp, #8
 800b71c:	af00      	add	r7, sp, #0
	uint32_t i;
		for (i = 0; i < 40000000; i++){
 800b71e:	2300      	movs	r3, #0
 800b720:	607b      	str	r3, [r7, #4]
 800b722:	e009      	b.n	800b738 <waitDRDY+0x20>
			if (DRDY_IS_LOW()){
 800b724:	2108      	movs	r1, #8
 800b726:	4809      	ldr	r0, [pc, #36]	; (800b74c <waitDRDY+0x34>)
 800b728:	f005 fb96 	bl	8010e58 <HAL_GPIO_ReadPin>
 800b72c:	4603      	mov	r3, r0
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d007      	beq.n	800b742 <waitDRDY+0x2a>
		for (i = 0; i < 40000000; i++){
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	3301      	adds	r3, #1
 800b736:	607b      	str	r3, [r7, #4]
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	4a05      	ldr	r2, [pc, #20]	; (800b750 <waitDRDY+0x38>)
 800b73c:	4293      	cmp	r3, r2
 800b73e:	d3f1      	bcc.n	800b724 <waitDRDY+0xc>
				break;
			}
		}
}
 800b740:	e000      	b.n	800b744 <waitDRDY+0x2c>
				break;
 800b742:	bf00      	nop
}
 800b744:	bf00      	nop
 800b746:	3708      	adds	r7, #8
 800b748:	46bd      	mov	sp, r7
 800b74a:	bd80      	pop	{r7, pc}
 800b74c:	40020000 	.word	0x40020000
 800b750:	02625a00 	.word	0x02625a00

0800b754 <readChipID>:
*	parameter:
*	The return value: val
*********************************************************************************************************
*/
uint8_t readChipID(void)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b082      	sub	sp, #8
 800b758:	af00      	add	r7, sp, #0
	waitDRDY();
 800b75a:	f7ff ffdd 	bl	800b718 <waitDRDY>
	volatile uint8_t id = readByteFromReg(REG_STATUS);
 800b75e:	2000      	movs	r0, #0
 800b760:	f000 f820 	bl	800b7a4 <readByteFromReg>
 800b764:	4603      	mov	r3, r0
 800b766:	71fb      	strb	r3, [r7, #7]
	return (id >> 4);
 800b768:	79fb      	ldrb	r3, [r7, #7]
 800b76a:	b2db      	uxtb	r3, r3
 800b76c:	091b      	lsrs	r3, r3, #4
 800b76e:	b2db      	uxtb	r3, r3
}
 800b770:	4618      	mov	r0, r3
 800b772:	3708      	adds	r7, #8
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}

0800b778 <receive8bit>:
*	parameter: data
*	The return value: NULL
*********************************************************************************************************
*/
uint8_t receive8bit(void)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b084      	sub	sp, #16
 800b77c:	af02      	add	r7, sp, #8
	HAL_SPI_Transmit(&hspi1, TXbuffer ,1,50);
	HAL_SPI_Receive(&hspi1, RXbuffer ,1,50);

	return RXbuffer[0];
	*/
	uint8_t send_data = 0xff;
 800b77e:	23ff      	movs	r3, #255	; 0xff
 800b780:	71fb      	strb	r3, [r7, #7]
	uint8_t read = 0;
 800b782:	2300      	movs	r3, #0
 800b784:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_TransmitReceive(&hspi1,&send_data,&read,1,50);
 800b786:	1dba      	adds	r2, r7, #6
 800b788:	1df9      	adds	r1, r7, #7
 800b78a:	2332      	movs	r3, #50	; 0x32
 800b78c:	9300      	str	r3, [sp, #0]
 800b78e:	2301      	movs	r3, #1
 800b790:	4803      	ldr	r0, [pc, #12]	; (800b7a0 <receive8bit+0x28>)
 800b792:	f007 fc1a 	bl	8012fca <HAL_SPI_TransmitReceive>
	return read;
 800b796:	79bb      	ldrb	r3, [r7, #6]



}
 800b798:	4618      	mov	r0, r3
 800b79a:	3708      	adds	r7, #8
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}
 800b7a0:	20002d68 	.word	0x20002d68

0800b7a4 <readByteFromReg>:
*	parameter: register ID
*	The return value:
*********************************************************************************************************
*/
uint8_t readByteFromReg(uint8_t registerID)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b084      	sub	sp, #16
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	71fb      	strb	r3, [r7, #7]
	uint8_t TXbuffer[2];
	TXbuffer[0] = CMD_RREG | registerID;
 800b7ae:	79fb      	ldrb	r3, [r7, #7]
 800b7b0:	f043 0310 	orr.w	r3, r3, #16
 800b7b4:	b2db      	uxtb	r3, r3
 800b7b6:	733b      	strb	r3, [r7, #12]
	TXbuffer[1] = 0x00;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	737b      	strb	r3, [r7, #13]
	CS_0();
 800b7bc:	2200      	movs	r2, #0
 800b7be:	2110      	movs	r1, #16
 800b7c0:	480d      	ldr	r0, [pc, #52]	; (800b7f8 <readByteFromReg+0x54>)
 800b7c2:	f005 fb61 	bl	8010e88 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TXbuffer ,2,50);
 800b7c6:	f107 010c 	add.w	r1, r7, #12
 800b7ca:	2332      	movs	r3, #50	; 0x32
 800b7cc:	2202      	movs	r2, #2
 800b7ce:	480b      	ldr	r0, [pc, #44]	; (800b7fc <readByteFromReg+0x58>)
 800b7d0:	f007 fa8d 	bl	8012cee <HAL_SPI_Transmit>
	delay_us(10);
 800b7d4:	200a      	movs	r0, #10
 800b7d6:	f001 fb41 	bl	800ce5c <delay_us>
	uint8_t read = receive8bit();
 800b7da:	f7ff ffcd 	bl	800b778 <receive8bit>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	73fb      	strb	r3, [r7, #15]
	CS_1();
 800b7e2:	2201      	movs	r2, #1
 800b7e4:	2110      	movs	r1, #16
 800b7e6:	4804      	ldr	r0, [pc, #16]	; (800b7f8 <readByteFromReg+0x54>)
 800b7e8:	f005 fb4e 	bl	8010e88 <HAL_GPIO_WritePin>

	return read;
 800b7ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3710      	adds	r7, #16
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	40020000 	.word	0x40020000
 800b7fc:	20002d68 	.word	0x20002d68

0800b800 <setBuffer>:
*	parameter: bool val
*	The return value: val
*********************************************************************************************************
*/
void setBuffer(void)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b082      	sub	sp, #8
 800b804:	af00      	add	r7, sp, #0
	uint8_t val = 1;
 800b806:	2301      	movs	r3, #1
 800b808:	71fb      	strb	r3, [r7, #7]
	uint8_t Txbuffer[2];
	Txbuffer[0] = CMD_WREG | REG_STATUS;
 800b80a:	2350      	movs	r3, #80	; 0x50
 800b80c:	713b      	strb	r3, [r7, #4]
	Txbuffer[1] = (0 <<3) | (1 << 2) | (val << 1);
 800b80e:	79fb      	ldrb	r3, [r7, #7]
 800b810:	005b      	lsls	r3, r3, #1
 800b812:	b25b      	sxtb	r3, r3
 800b814:	f043 0304 	orr.w	r3, r3, #4
 800b818:	b25b      	sxtb	r3, r3
 800b81a:	b2db      	uxtb	r3, r3
 800b81c:	717b      	strb	r3, [r7, #5]

	CS_0();
 800b81e:	2200      	movs	r2, #0
 800b820:	2110      	movs	r1, #16
 800b822:	4809      	ldr	r0, [pc, #36]	; (800b848 <setBuffer+0x48>)
 800b824:	f005 fb30 	bl	8010e88 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, Txbuffer ,2,50);
 800b828:	1d39      	adds	r1, r7, #4
 800b82a:	2332      	movs	r3, #50	; 0x32
 800b82c:	2202      	movs	r2, #2
 800b82e:	4807      	ldr	r0, [pc, #28]	; (800b84c <setBuffer+0x4c>)
 800b830:	f007 fa5d 	bl	8012cee <HAL_SPI_Transmit>
	//send8bit(CMD_WREG | REG_STATUS);
	//send8bit((0 <<3) | (1 << 2) | (val << 1));
	CS_1();
 800b834:	2201      	movs	r2, #1
 800b836:	2110      	movs	r1, #16
 800b838:	4803      	ldr	r0, [pc, #12]	; (800b848 <setBuffer+0x48>)
 800b83a:	f005 fb25 	bl	8010e88 <HAL_GPIO_WritePin>
}
 800b83e:	bf00      	nop
 800b840:	3708      	adds	r7, #8
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
 800b846:	bf00      	nop
 800b848:	40020000 	.word	0x40020000
 800b84c:	20002d68 	.word	0x20002d68

0800b850 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800b850:	b480      	push	{r7}
 800b852:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800b854:	f3bf 8f4f 	dsb	sy
}
 800b858:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800b85a:	4b06      	ldr	r3, [pc, #24]	; (800b874 <__NVIC_SystemReset+0x24>)
 800b85c:	68db      	ldr	r3, [r3, #12]
 800b85e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800b862:	4904      	ldr	r1, [pc, #16]	; (800b874 <__NVIC_SystemReset+0x24>)
 800b864:	4b04      	ldr	r3, [pc, #16]	; (800b878 <__NVIC_SystemReset+0x28>)
 800b866:	4313      	orrs	r3, r2
 800b868:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800b86a:	f3bf 8f4f 	dsb	sy
}
 800b86e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800b870:	bf00      	nop
 800b872:	e7fd      	b.n	800b870 <__NVIC_SystemReset+0x20>
 800b874:	e000ed00 	.word	0xe000ed00
 800b878:	05fa0004 	.word	0x05fa0004

0800b87c <BLE_USART>:
int Rawdatasize, Topdatasize, rawloop, in;
/* Private variables ---------------------------------------------------------*/


void BLE_USART(UART_HandleTypeDef *huart, Sv *sendpData, IWDG_HandleTypeDef *hiwdg )
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	ed2d 8b0c 	vpush	{d8-d13}
 800b882:	b0a0      	sub	sp, #128	; 0x80
 800b884:	af1c      	add	r7, sp, #112	; 0x70
 800b886:	60f8      	str	r0, [r7, #12]
 800b888:	60b9      	str	r1, [r7, #8]
 800b88a:	607a      	str	r2, [r7, #4]

	if( USARTBLE.IAPflag == 1)
 800b88c:	4b69      	ldr	r3, [pc, #420]	; (800ba34 <BLE_USART+0x1b8>)
 800b88e:	785b      	ldrb	r3, [r3, #1]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d008      	beq.n	800b8a6 <BLE_USART+0x2a>
	{
		USARTBLE.sendflag =0;
 800b894:	4b67      	ldr	r3, [pc, #412]	; (800ba34 <BLE_USART+0x1b8>)
 800b896:	2200      	movs	r2, #0
 800b898:	701a      	strb	r2, [r3, #0]
		TM_DelayMillis(1000);
 800b89a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b89e:	f001 fb35 	bl	800cf0c <TM_DelayMillis>
		NVIC_SystemReset();
 800b8a2:	f7ff ffd5 	bl	800b850 <__NVIC_SystemReset>

	}
	if(USARTBLE.sendflag ==1)
 800b8a6:	4b63      	ldr	r3, [pc, #396]	; (800ba34 <BLE_USART+0x1b8>)
 800b8a8:	781b      	ldrb	r3, [r3, #0]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	f000 80bb 	beq.w	800ba26 <BLE_USART+0x1aa>
	{

		//2021/0201/George
		//TODO : BLE transmission parameter number3 from var to min and
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,sendpData->Statistic_SpeedOvall*1000,
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800b8b6:	ed9f 7a60 	vldr	s14, [pc, #384]	; 800ba38 <BLE_USART+0x1bc>
 800b8ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b8be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800b8c8:	ed9f 6a5b 	vldr	s12, [pc, #364]	; 800ba38 <BLE_USART+0x1bc>
 800b8cc:	ee66 6a86 	vmul.f32	s13, s13, s12
 800b8d0:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
					sendpData->Statistic_Displacementp2p*1000,sendpData->Statistic_max*1000,sendpData->Statistic_p2p*1000,
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	edd3 5a0d 	vldr	s11, [r3, #52]	; 0x34
 800b8da:	ed9f 5a57 	vldr	s10, [pc, #348]	; 800ba38 <BLE_USART+0x1bc>
 800b8de:	ee65 5a85 	vmul.f32	s11, s11, s10
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,sendpData->Statistic_SpeedOvall*1000,
 800b8e2:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
					sendpData->Statistic_Displacementp2p*1000,sendpData->Statistic_max*1000,sendpData->Statistic_p2p*1000,
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	edd3 4a00 	vldr	s9, [r3]
 800b8ec:	ed9f 4a52 	vldr	s8, [pc, #328]	; 800ba38 <BLE_USART+0x1bc>
 800b8f0:	ee64 4a84 	vmul.f32	s9, s9, s8
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,sendpData->Statistic_SpeedOvall*1000,
 800b8f4:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
					sendpData->Statistic_Displacementp2p*1000,sendpData->Statistic_max*1000,sendpData->Statistic_p2p*1000,
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	edd3 3a06 	vldr	s7, [r3, #24]
 800b8fe:	ed9f 3a4e 	vldr	s6, [pc, #312]	; 800ba38 <BLE_USART+0x1bc>
 800b902:	ee63 3a83 	vmul.f32	s7, s7, s6
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,sendpData->Statistic_SpeedOvall*1000,
 800b906:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
					sendpData->Statistic_var*1000,sendpData->Statistic_mean*1000,sendpData->Statistic_crestFactor*1000,
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	edd3 2a02 	vldr	s5, [r3, #8]
 800b910:	ed9f 2a49 	vldr	s4, [pc, #292]	; 800ba38 <BLE_USART+0x1bc>
 800b914:	ee62 2a82 	vmul.f32	s5, s5, s4
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,sendpData->Statistic_SpeedOvall*1000,
 800b918:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
					sendpData->Statistic_var*1000,sendpData->Statistic_mean*1000,sendpData->Statistic_crestFactor*1000,
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	edd3 1a04 	vldr	s3, [r3, #16]
 800b922:	ed9f 1a45 	vldr	s2, [pc, #276]	; 800ba38 <BLE_USART+0x1bc>
 800b926:	ee61 1a81 	vmul.f32	s3, s3, s2
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,sendpData->Statistic_SpeedOvall*1000,
 800b92a:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
					sendpData->Statistic_var*1000,sendpData->Statistic_mean*1000,sendpData->Statistic_crestFactor*1000,
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	edd3 0a07 	vldr	s1, [r3, #28]
 800b934:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800ba38 <BLE_USART+0x1bc>
 800b938:	ee60 0a80 	vmul.f32	s1, s1, s0
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,sendpData->Statistic_SpeedOvall*1000,
 800b93c:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
					sendpData->Statistic_kurtosis*1000, sendpData->Statistic_skewness*1000,
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	ed93 8a08 	vldr	s16, [r3, #32]
 800b946:	eddf 8a3c 	vldr	s17, [pc, #240]	; 800ba38 <BLE_USART+0x1bc>
 800b94a:	ee28 8a28 	vmul.f32	s16, s16, s17
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,sendpData->Statistic_SpeedOvall*1000,
 800b94e:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
					sendpData->Statistic_kurtosis*1000, sendpData->Statistic_skewness*1000,
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	ed93 9a09 	vldr	s18, [r3, #36]	; 0x24
 800b958:	eddf 9a37 	vldr	s19, [pc, #220]	; 800ba38 <BLE_USART+0x1bc>
 800b95c:	ee29 9a29 	vmul.f32	s18, s18, s19
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,sendpData->Statistic_SpeedOvall*1000,
 800b960:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
					statistic_value.Statistic_FreqPeak[0]*1000,statistic_value.Statistic_FreqPeak[1]*1000,statistic_value.Statistic_FreqPeak[2]*1000,
 800b964:	4b35      	ldr	r3, [pc, #212]	; (800ba3c <BLE_USART+0x1c0>)
 800b966:	ed93 aa0e 	vldr	s20, [r3, #56]	; 0x38
 800b96a:	eddf aa33 	vldr	s21, [pc, #204]	; 800ba38 <BLE_USART+0x1bc>
 800b96e:	ee2a aa2a 	vmul.f32	s20, s20, s21
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,sendpData->Statistic_SpeedOvall*1000,
 800b972:	eeb7 aaca 	vcvt.f64.f32	d10, s20
					statistic_value.Statistic_FreqPeak[0]*1000,statistic_value.Statistic_FreqPeak[1]*1000,statistic_value.Statistic_FreqPeak[2]*1000,
 800b976:	4b31      	ldr	r3, [pc, #196]	; (800ba3c <BLE_USART+0x1c0>)
 800b978:	ed93 ba0f 	vldr	s22, [r3, #60]	; 0x3c
 800b97c:	eddf ba2e 	vldr	s23, [pc, #184]	; 800ba38 <BLE_USART+0x1bc>
 800b980:	ee2b ba2b 	vmul.f32	s22, s22, s23
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,sendpData->Statistic_SpeedOvall*1000,
 800b984:	eeb7 bacb 	vcvt.f64.f32	d11, s22
					statistic_value.Statistic_FreqPeak[0]*1000,statistic_value.Statistic_FreqPeak[1]*1000,statistic_value.Statistic_FreqPeak[2]*1000,
 800b988:	4b2c      	ldr	r3, [pc, #176]	; (800ba3c <BLE_USART+0x1c0>)
 800b98a:	ed93 ca10 	vldr	s24, [r3, #64]	; 0x40
 800b98e:	eddf ca2a 	vldr	s25, [pc, #168]	; 800ba38 <BLE_USART+0x1bc>
 800b992:	ee2c ca2c 	vmul.f32	s24, s24, s25
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,sendpData->Statistic_SpeedOvall*1000,
 800b996:	eeb7 cacc 	vcvt.f64.f32	d12, s24
					//statistic_value.Statistic_VeloccityFreqPeak[0]*1000,statistic_value.Statistic_VeloccityFreqPeak[1]*1000,statistic_value.Statistic_VeloccityFreqPeak[2]*1000);
					statistic_value.Statistic_CosSimilarity*100);
 800b99a:	4b28      	ldr	r3, [pc, #160]	; (800ba3c <BLE_USART+0x1c0>)
 800b99c:	ed93 da36 	vldr	s26, [r3, #216]	; 0xd8
 800b9a0:	eddf da27 	vldr	s27, [pc, #156]	; 800ba40 <BLE_USART+0x1c4>
 800b9a4:	ee2d da2d 	vmul.f32	s26, s26, s27
		snprintf_(USARTBLE.buffer, 128 , "%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f,%.4f", sendpData->Statistic_FreqOvall*1000,sendpData->Statistic_SpeedOvall*1000,
 800b9a8:	eeb7 dacd 	vcvt.f64.f32	d13, s26
 800b9ac:	ed8d db1a 	vstr	d13, [sp, #104]	; 0x68
 800b9b0:	ed8d cb18 	vstr	d12, [sp, #96]	; 0x60
 800b9b4:	ed8d bb16 	vstr	d11, [sp, #88]	; 0x58
 800b9b8:	ed8d ab14 	vstr	d10, [sp, #80]	; 0x50
 800b9bc:	ed8d 9b12 	vstr	d9, [sp, #72]	; 0x48
 800b9c0:	ed8d 8b10 	vstr	d8, [sp, #64]	; 0x40
 800b9c4:	ed8d 0b0e 	vstr	d0, [sp, #56]	; 0x38
 800b9c8:	ed8d 1b0c 	vstr	d1, [sp, #48]	; 0x30
 800b9cc:	ed8d 2b0a 	vstr	d2, [sp, #40]	; 0x28
 800b9d0:	ed8d 3b08 	vstr	d3, [sp, #32]
 800b9d4:	ed8d 4b06 	vstr	d4, [sp, #24]
 800b9d8:	ed8d 5b04 	vstr	d5, [sp, #16]
 800b9dc:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b9e0:	ed8d 7b00 	vstr	d7, [sp]
 800b9e4:	4a17      	ldr	r2, [pc, #92]	; (800ba44 <BLE_USART+0x1c8>)
 800b9e6:	2180      	movs	r1, #128	; 0x80
 800b9e8:	4817      	ldr	r0, [pc, #92]	; (800ba48 <BLE_USART+0x1cc>)
 800b9ea:	f003 ffdb 	bl	800f9a4 <snprintf_>
		//snprintf_(USARTBLE.buffer, 6 , "%.4f", statistic_value.Statistic_CosSimilarity );

		USARTBLE.bufferSize = min_(APP_BUFFER_SIZE, strlen(USARTBLE.buffer));
 800b9ee:	4816      	ldr	r0, [pc, #88]	; (800ba48 <BLE_USART+0x1cc>)
 800b9f0:	f7fc fc86 	bl	8008300 <strlen>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	2b80      	cmp	r3, #128	; 0x80
 800b9f8:	d804      	bhi.n	800ba04 <BLE_USART+0x188>
 800b9fa:	4813      	ldr	r0, [pc, #76]	; (800ba48 <BLE_USART+0x1cc>)
 800b9fc:	f7fc fc80 	bl	8008300 <strlen>
 800ba00:	4603      	mov	r3, r0
 800ba02:	e000      	b.n	800ba06 <BLE_USART+0x18a>
 800ba04:	2380      	movs	r3, #128	; 0x80
 800ba06:	4a0b      	ldr	r2, [pc, #44]	; (800ba34 <BLE_USART+0x1b8>)
 800ba08:	f8c2 3224 	str.w	r3, [r2, #548]	; 0x224
		while(HAL_UART_Transmit_DMA(huart, USARTBLE.buffer, USARTBLE.bufferSize)!=HAL_OK);
 800ba0c:	bf00      	nop
 800ba0e:	4b09      	ldr	r3, [pc, #36]	; (800ba34 <BLE_USART+0x1b8>)
 800ba10:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800ba14:	b29b      	uxth	r3, r3
 800ba16:	461a      	mov	r2, r3
 800ba18:	490b      	ldr	r1, [pc, #44]	; (800ba48 <BLE_USART+0x1cc>)
 800ba1a:	68f8      	ldr	r0, [r7, #12]
 800ba1c:	f008 fa20 	bl	8013e60 <HAL_UART_Transmit_DMA>
 800ba20:	4603      	mov	r3, r0
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d1f3      	bne.n	800ba0e <BLE_USART+0x192>
//			rawloop++;
//			in=i;
//		}

	}
}
 800ba26:	bf00      	nop
 800ba28:	3710      	adds	r7, #16
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	ecbd 8b0c 	vpop	{d8-d13}
 800ba30:	bd80      	pop	{r7, pc}
 800ba32:	bf00      	nop
 800ba34:	200070e0 	.word	0x200070e0
 800ba38:	447a0000 	.word	0x447a0000
 800ba3c:	2000021c 	.word	0x2000021c
 800ba40:	42c80000 	.word	0x42c80000
 800ba44:	0801d730 	.word	0x0801d730
 800ba48:	20007180 	.word	0x20007180

0800ba4c <checkBLECommandFromBLEGateway>:

_Bool checkBLECommandFromBLEGateway(char * BLEcommand,char * index, int len)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b086      	sub	sp, #24
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	60f8      	str	r0, [r7, #12]
 800ba54:	60b9      	str	r1, [r7, #8]
 800ba56:	607a      	str	r2, [r7, #4]
	if(strlen(BLEcommand) > 0)
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	781b      	ldrb	r3, [r3, #0]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d011      	beq.n	800ba84 <checkBLECommandFromBLEGateway+0x38>
	{
		   //Test 比對 function
	   char * pch;
	   /* 找尋 simple 字串 */
	   pch = strstr (BLEcommand,index);
 800ba60:	68b9      	ldr	r1, [r7, #8]
 800ba62:	68f8      	ldr	r0, [r7, #12]
 800ba64:	f00d fe2e 	bl	80196c4 <strstr>
 800ba68:	6178      	str	r0, [r7, #20]
	   if(strncmp(pch, index, len) == 0) {
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	461a      	mov	r2, r3
 800ba6e:	68b9      	ldr	r1, [r7, #8]
 800ba70:	6978      	ldr	r0, [r7, #20]
 800ba72:	f00d fe13 	bl	801969c <strncmp>
 800ba76:	4603      	mov	r3, r0
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d101      	bne.n	800ba80 <checkBLECommandFromBLEGateway+0x34>
		   return true;
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	e002      	b.n	800ba86 <checkBLECommandFromBLEGateway+0x3a>
	   }
	   else
	   {
		   return false;
 800ba80:	2300      	movs	r3, #0
 800ba82:	e000      	b.n	800ba86 <checkBLECommandFromBLEGateway+0x3a>

	}
	else
	{

		return false;
 800ba84:	2300      	movs	r3, #0
	}

}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3718      	adds	r7, #24
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}

0800ba8e <CalcluateMean>:
 *
 * Calculate Skewness & kurtosis
 *
 * */
float CalcluateMean(float *x, int n)
{
 800ba8e:	b480      	push	{r7}
 800ba90:	b085      	sub	sp, #20
 800ba92:	af00      	add	r7, sp, #0
 800ba94:	6078      	str	r0, [r7, #4]
 800ba96:	6039      	str	r1, [r7, #0]
	float sum = 0;
 800ba98:	f04f 0300 	mov.w	r3, #0
 800ba9c:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < n; i++)
 800ba9e:	2300      	movs	r3, #0
 800baa0:	60bb      	str	r3, [r7, #8]
 800baa2:	e00e      	b.n	800bac2 <CalcluateMean+0x34>
		sum += x[i];
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	009b      	lsls	r3, r3, #2
 800baa8:	687a      	ldr	r2, [r7, #4]
 800baaa:	4413      	add	r3, r2
 800baac:	edd3 7a00 	vldr	s15, [r3]
 800bab0:	ed97 7a03 	vldr	s14, [r7, #12]
 800bab4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bab8:	edc7 7a03 	vstr	s15, [r7, #12]
	for (int i = 0; i < n; i++)
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	3301      	adds	r3, #1
 800bac0:	60bb      	str	r3, [r7, #8]
 800bac2:	68ba      	ldr	r2, [r7, #8]
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	429a      	cmp	r2, r3
 800bac8:	dbec      	blt.n	800baa4 <CalcluateMean+0x16>

	return sum / n;
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	ee07 3a90 	vmov	s15, r3
 800bad0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bad4:	ed97 7a03 	vldr	s14, [r7, #12]
 800bad8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800badc:	eef0 7a66 	vmov.f32	s15, s13
}
 800bae0:	eeb0 0a67 	vmov.f32	s0, s15
 800bae4:	3714      	adds	r7, #20
 800bae6:	46bd      	mov	sp, r7
 800bae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baec:	4770      	bx	lr

0800baee <CalcluateMoment>:

float CalcluateMoment(float *x, int n, int m)
{
 800baee:	b580      	push	{r7, lr}
 800baf0:	b088      	sub	sp, #32
 800baf2:	af00      	add	r7, sp, #0
 800baf4:	60f8      	str	r0, [r7, #12]
 800baf6:	60b9      	str	r1, [r7, #8]
 800baf8:	607a      	str	r2, [r7, #4]
	float mean = CalcluateMean(x, n), sum = 0;
 800bafa:	68b9      	ldr	r1, [r7, #8]
 800bafc:	68f8      	ldr	r0, [r7, #12]
 800bafe:	f7ff ffc6 	bl	800ba8e <CalcluateMean>
 800bb02:	ed87 0a05 	vstr	s0, [r7, #20]
 800bb06:	f04f 0300 	mov.w	r3, #0
 800bb0a:	61fb      	str	r3, [r7, #28]

	for (int i = 0; i < n; i++)
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	61bb      	str	r3, [r7, #24]
 800bb10:	e025      	b.n	800bb5e <CalcluateMoment+0x70>
		sum += pow(x[i] - mean, m);
 800bb12:	69bb      	ldr	r3, [r7, #24]
 800bb14:	009b      	lsls	r3, r3, #2
 800bb16:	68fa      	ldr	r2, [r7, #12]
 800bb18:	4413      	add	r3, r2
 800bb1a:	ed93 7a00 	vldr	s14, [r3]
 800bb1e:	edd7 7a05 	vldr	s15, [r7, #20]
 800bb22:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bb26:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	ee06 3a90 	vmov	s13, r3
 800bb30:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800bb34:	eeb0 1b46 	vmov.f64	d1, d6
 800bb38:	eeb0 0b47 	vmov.f64	d0, d7
 800bb3c:	f011 fae4 	bl	801d108 <pow>
 800bb40:	eeb0 6b40 	vmov.f64	d6, d0
 800bb44:	edd7 7a07 	vldr	s15, [r7, #28]
 800bb48:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bb4c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800bb50:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800bb54:	edc7 7a07 	vstr	s15, [r7, #28]
	for (int i = 0; i < n; i++)
 800bb58:	69bb      	ldr	r3, [r7, #24]
 800bb5a:	3301      	adds	r3, #1
 800bb5c:	61bb      	str	r3, [r7, #24]
 800bb5e:	69ba      	ldr	r2, [r7, #24]
 800bb60:	68bb      	ldr	r3, [r7, #8]
 800bb62:	429a      	cmp	r2, r3
 800bb64:	dbd5      	blt.n	800bb12 <CalcluateMoment+0x24>

	return sum / n;
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	ee07 3a90 	vmov	s15, r3
 800bb6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb70:	ed97 7a07 	vldr	s14, [r7, #28]
 800bb74:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800bb78:	eef0 7a66 	vmov.f32	s15, s13
}
 800bb7c:	eeb0 0a67 	vmov.f32	s0, s15
 800bb80:	3720      	adds	r7, #32
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}

0800bb86 <CalcluateVariance>:

float CalcluateVariance(float *x, int n)
{
 800bb86:	b580      	push	{r7, lr}
 800bb88:	b086      	sub	sp, #24
 800bb8a:	af00      	add	r7, sp, #0
 800bb8c:	6078      	str	r0, [r7, #4]
 800bb8e:	6039      	str	r1, [r7, #0]
	float mean = CalcluateMean(x, n), sumSq = 0;
 800bb90:	6839      	ldr	r1, [r7, #0]
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f7ff ff7b 	bl	800ba8e <CalcluateMean>
 800bb98:	ed87 0a03 	vstr	s0, [r7, #12]
 800bb9c:	f04f 0300 	mov.w	r3, #0
 800bba0:	617b      	str	r3, [r7, #20]

	for (int i = 0; i < n; i++)
 800bba2:	2300      	movs	r3, #0
 800bba4:	613b      	str	r3, [r7, #16]
 800bba6:	e018      	b.n	800bbda <CalcluateVariance+0x54>
	{
		float delta = x[i] - mean;
 800bba8:	693b      	ldr	r3, [r7, #16]
 800bbaa:	009b      	lsls	r3, r3, #2
 800bbac:	687a      	ldr	r2, [r7, #4]
 800bbae:	4413      	add	r3, r2
 800bbb0:	ed93 7a00 	vldr	s14, [r3]
 800bbb4:	edd7 7a03 	vldr	s15, [r7, #12]
 800bbb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bbbc:	edc7 7a02 	vstr	s15, [r7, #8]

		sumSq += delta * delta;
 800bbc0:	edd7 7a02 	vldr	s15, [r7, #8]
 800bbc4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800bbc8:	ed97 7a05 	vldr	s14, [r7, #20]
 800bbcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bbd0:	edc7 7a05 	vstr	s15, [r7, #20]
	for (int i = 0; i < n; i++)
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	3301      	adds	r3, #1
 800bbd8:	613b      	str	r3, [r7, #16]
 800bbda:	693a      	ldr	r2, [r7, #16]
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	429a      	cmp	r2, r3
 800bbe0:	dbe2      	blt.n	800bba8 <CalcluateVariance+0x22>
	}

	return sumSq / (n - 1);
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	3b01      	subs	r3, #1
 800bbe6:	ee07 3a90 	vmov	s15, r3
 800bbea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bbee:	ed97 7a05 	vldr	s14, [r7, #20]
 800bbf2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800bbf6:	eef0 7a66 	vmov.f32	s15, s13
}
 800bbfa:	eeb0 0a67 	vmov.f32	s0, s15
 800bbfe:	3718      	adds	r7, #24
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}

0800bc04 <CalcluateStandardDeviation>:
float CalcluateStandardDeviation(float *x, int n)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b082      	sub	sp, #8
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
 800bc0c:	6039      	str	r1, [r7, #0]
	return sqrt(CalcluateVariance(x, n));
 800bc0e:	6839      	ldr	r1, [r7, #0]
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f7ff ffb8 	bl	800bb86 <CalcluateVariance>
 800bc16:	eef0 7a40 	vmov.f32	s15, s0
 800bc1a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bc1e:	eeb0 0b47 	vmov.f64	d0, d7
 800bc22:	f011 fcc5 	bl	801d5b0 <sqrt>
 800bc26:	eeb0 7b40 	vmov.f64	d7, d0
 800bc2a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 800bc2e:	eeb0 0a67 	vmov.f32	s0, s15
 800bc32:	3708      	adds	r7, #8
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}

0800bc38 <Calculate_skewness>:

float Calculate_skewness(float *x, int n)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	ed2d 8b02 	vpush	{d8}
 800bc3e:	b086      	sub	sp, #24
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	6039      	str	r1, [r7, #0]
	// NIST definition of adjusted Fisher-Pearson
	// coefficient of skewness
	float m3 = CalcluateMoment(x, n, 3);
 800bc46:	2203      	movs	r2, #3
 800bc48:	6839      	ldr	r1, [r7, #0]
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f7ff ff4f 	bl	800baee <CalcluateMoment>
 800bc50:	ed87 0a05 	vstr	s0, [r7, #20]
	float sx = CalcluateStandardDeviation(x, n);
 800bc54:	6839      	ldr	r1, [r7, #0]
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f7ff ffd4 	bl	800bc04 <CalcluateStandardDeviation>
 800bc5c:	ed87 0a04 	vstr	s0, [r7, #16]
	int n1 = n - 1;
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	3b01      	subs	r3, #1
 800bc64:	60fb      	str	r3, [r7, #12]
	float Skewness = (sqrt(n * n1) / n1) * m3 / pow(sx, 3);
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	68fa      	ldr	r2, [r7, #12]
 800bc6a:	fb02 f303 	mul.w	r3, r2, r3
 800bc6e:	ee07 3a90 	vmov	s15, r3
 800bc72:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bc76:	eeb0 0b47 	vmov.f64	d0, d7
 800bc7a:	f011 fc99 	bl	801d5b0 <sqrt>
 800bc7e:	eeb0 5b40 	vmov.f64	d5, d0
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	ee07 3a90 	vmov	s15, r3
 800bc88:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bc8c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800bc90:	edd7 7a05 	vldr	s15, [r7, #20]
 800bc94:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bc98:	ee26 8b07 	vmul.f64	d8, d6, d7
 800bc9c:	edd7 7a04 	vldr	s15, [r7, #16]
 800bca0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bca4:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 800bca8:	eeb0 0b47 	vmov.f64	d0, d7
 800bcac:	f011 fa2c 	bl	801d108 <pow>
 800bcb0:	eeb0 6b40 	vmov.f64	d6, d0
 800bcb4:	ee88 7b06 	vdiv.f64	d7, d8, d6
 800bcb8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800bcbc:	edc7 7a02 	vstr	s15, [r7, #8]

	return Skewness;
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	ee07 3a90 	vmov	s15, r3
}
 800bcc6:	eeb0 0a67 	vmov.f32	s0, s15
 800bcca:	3718      	adds	r7, #24
 800bccc:	46bd      	mov	sp, r7
 800bcce:	ecbd 8b02 	vpop	{d8}
 800bcd2:	bd80      	pop	{r7, pc}

0800bcd4 <Calculate_kurtosis>:
float Calculate_kurtosis(float *x, int n)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b086      	sub	sp, #24
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	6039      	str	r1, [r7, #0]
	float m2 = CalcluateMoment(x, n, 2);
 800bcde:	2202      	movs	r2, #2
 800bce0:	6839      	ldr	r1, [r7, #0]
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f7ff ff03 	bl	800baee <CalcluateMoment>
 800bce8:	ed87 0a05 	vstr	s0, [r7, #20]
	float m4 = CalcluateMoment(x, n, 4);
 800bcec:	2204      	movs	r2, #4
 800bcee:	6839      	ldr	r1, [r7, #0]
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f7ff fefc 	bl	800baee <CalcluateMoment>
 800bcf6:	ed87 0a04 	vstr	s0, [r7, #16]


	float Kurtosis = m4 / (m2 * m2) - 3.0;
 800bcfa:	edd7 7a05 	vldr	s15, [r7, #20]
 800bcfe:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800bd02:	edd7 6a04 	vldr	s13, [r7, #16]
 800bd06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd0a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800bd0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bd12:	edc7 7a03 	vstr	s15, [r7, #12]
    return Kurtosis;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	ee07 3a90 	vmov	s15, r3
}
 800bd1c:	eeb0 0a67 	vmov.f32	s0, s15
 800bd20:	3718      	adds	r7, #24
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}
	...

0800bd28 <Calculate_FreqBandRMS>:

void Calculate_FreqBandRMS(float *x,  FreqMaxMin * FreqMaxMin , int8_t freq_index)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b090      	sub	sp, #64	; 0x40
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	60f8      	str	r0, [r7, #12]
 800bd30:	60b9      	str	r1, [r7, #8]
 800bd32:	4613      	mov	r3, r2
 800bd34:	71fb      	strb	r3, [r7, #7]

	if(FreqMaxMin->Max != 0)
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	f000 80f9 	beq.w	800bf32 <Calculate_FreqBandRMS+0x20a>
	{
		float * velocityBuffer;
		velocityBuffer = pvPortMalloc(4096 * sizeof(float));
 800bd40:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800bd44:	f00c fc16 	bl	8018574 <pvPortMalloc>
 800bd48:	62f8      	str	r0, [r7, #44]	; 0x2c

		int dataRate = 15000;
 800bd4a:	f643 2398 	movw	r3, #15000	; 0x3a98
 800bd4e:	62bb      	str	r3, [r7, #40]	; 0x28
		float frequencyResolution = dataRate/(float)fftSize;
 800bd50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd52:	ee07 3a90 	vmov	s15, r3
 800bd56:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800bd5a:	4b7d      	ldr	r3, [pc, #500]	; (800bf50 <Calculate_FreqBandRMS+0x228>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	ee07 3a90 	vmov	s15, r3
 800bd62:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bd66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd6a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		float accelerationRMS = 0;
 800bd6e:	f04f 0300 	mov.w	r3, #0
 800bd72:	623b      	str	r3, [r7, #32]

		float parseRangeMax = FreqMaxMin->Max / frequencyResolution;
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	ee07 3a90 	vmov	s15, r3
 800bd7c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800bd80:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800bd84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd88:	edc7 7a07 	vstr	s15, [r7, #28]
		float parseRangeMin = FreqMaxMin->Min / frequencyResolution;
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	685b      	ldr	r3, [r3, #4]
 800bd90:	ee07 3a90 	vmov	s15, r3
 800bd94:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800bd98:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800bd9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bda0:	edc7 7a06 	vstr	s15, [r7, #24]
		float ParsevalFftPower = 0;
 800bda4:	f04f 0300 	mov.w	r3, #0
 800bda8:	63fb      	str	r3, [r7, #60]	; 0x3c
		float velocityPower = 0;
 800bdaa:	f04f 0300 	mov.w	r3, #0
 800bdae:	63bb      	str	r3, [r7, #56]	; 0x38
		float velocityRMS = 0;
 800bdb0:	f04f 0300 	mov.w	r3, #0
 800bdb4:	617b      	str	r3, [r7, #20]

		for(int i = (int)parseRangeMin; i<(int)parseRangeMax; i++)
 800bdb6:	edd7 7a06 	vldr	s15, [r7, #24]
 800bdba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bdbe:	ee17 3a90 	vmov	r3, s15
 800bdc2:	637b      	str	r3, [r7, #52]	; 0x34
 800bdc4:	e016      	b.n	800bdf4 <Calculate_FreqBandRMS+0xcc>
		{
			ParsevalFftPower += x[i] * x[i];
 800bdc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdc8:	009b      	lsls	r3, r3, #2
 800bdca:	68fa      	ldr	r2, [r7, #12]
 800bdcc:	4413      	add	r3, r2
 800bdce:	ed93 7a00 	vldr	s14, [r3]
 800bdd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdd4:	009b      	lsls	r3, r3, #2
 800bdd6:	68fa      	ldr	r2, [r7, #12]
 800bdd8:	4413      	add	r3, r2
 800bdda:	edd3 7a00 	vldr	s15, [r3]
 800bdde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bde2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800bde6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bdea:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		for(int i = (int)parseRangeMin; i<(int)parseRangeMax; i++)
 800bdee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdf0:	3301      	adds	r3, #1
 800bdf2:	637b      	str	r3, [r7, #52]	; 0x34
 800bdf4:	edd7 7a07 	vldr	s15, [r7, #28]
 800bdf8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bdfc:	ee17 2a90 	vmov	r2, s15
 800be00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be02:	4293      	cmp	r3, r2
 800be04:	dbdf      	blt.n	800bdc6 <Calculate_FreqBandRMS+0x9e>
		}

		//2021/03/09/George/Velocity target RMS
		for(int i = (int)parseRangeMin; i<(int)parseRangeMax; i++)
 800be06:	edd7 7a06 	vldr	s15, [r7, #24]
 800be0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be0e:	ee17 3a90 	vmov	r3, s15
 800be12:	633b      	str	r3, [r7, #48]	; 0x30
 800be14:	e049      	b.n	800beaa <Calculate_FreqBandRMS+0x182>
		{

			if(i ==0)
 800be16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d10a      	bne.n	800be32 <Calculate_FreqBandRMS+0x10a>
			{
				velocityBuffer[i] = x[i];
 800be1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be1e:	009b      	lsls	r3, r3, #2
 800be20:	68fa      	ldr	r2, [r7, #12]
 800be22:	441a      	add	r2, r3
 800be24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be26:	009b      	lsls	r3, r3, #2
 800be28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800be2a:	440b      	add	r3, r1
 800be2c:	6812      	ldr	r2, [r2, #0]
 800be2e:	601a      	str	r2, [r3, #0]
 800be30:	e024      	b.n	800be7c <Calculate_FreqBandRMS+0x154>
			}
			else
			{
				velocityBuffer[i] = (x[i] * 9807) / (2 * 3.1415926 * frequencyResolution * i);
 800be32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be34:	009b      	lsls	r3, r3, #2
 800be36:	68fa      	ldr	r2, [r7, #12]
 800be38:	4413      	add	r3, r2
 800be3a:	edd3 7a00 	vldr	s15, [r3]
 800be3e:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800bf54 <Calculate_FreqBandRMS+0x22c>
 800be42:	ee67 7a87 	vmul.f32	s15, s15, s14
 800be46:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800be4a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800be4e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800be52:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800bf40 <Calculate_FreqBandRMS+0x218>
 800be56:	ee27 6b06 	vmul.f64	d6, d7, d6
 800be5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be5c:	ee07 3a90 	vmov	s15, r3
 800be60:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800be64:	ee26 6b07 	vmul.f64	d6, d6, d7
 800be68:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800be6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be6e:	009b      	lsls	r3, r3, #2
 800be70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be72:	4413      	add	r3, r2
 800be74:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800be78:	edc3 7a00 	vstr	s15, [r3]

			}
			velocityPower += velocityBuffer[i] * velocityBuffer[i];
 800be7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be7e:	009b      	lsls	r3, r3, #2
 800be80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be82:	4413      	add	r3, r2
 800be84:	ed93 7a00 	vldr	s14, [r3]
 800be88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be8a:	009b      	lsls	r3, r3, #2
 800be8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be8e:	4413      	add	r3, r2
 800be90:	edd3 7a00 	vldr	s15, [r3]
 800be94:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be98:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800be9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bea0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		for(int i = (int)parseRangeMin; i<(int)parseRangeMax; i++)
 800bea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea6:	3301      	adds	r3, #1
 800bea8:	633b      	str	r3, [r7, #48]	; 0x30
 800beaa:	edd7 7a07 	vldr	s15, [r7, #28]
 800beae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800beb2:	ee17 2a90 	vmov	r2, s15
 800beb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb8:	4293      	cmp	r3, r2
 800beba:	dbac      	blt.n	800be16 <Calculate_FreqBandRMS+0xee>
		}

		accelerationRMS = sqrt(ParsevalFftPower * 2)/4096;
 800bebc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800bec0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bec4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bec8:	eeb0 0b47 	vmov.f64	d0, d7
 800becc:	f011 fb70 	bl	801d5b0 <sqrt>
 800bed0:	eeb0 6b40 	vmov.f64	d6, d0
 800bed4:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 800bf48 <Calculate_FreqBandRMS+0x220>
 800bed8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bedc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800bee0:	edc7 7a08 	vstr	s15, [r7, #32]

		//2021/0309/George/ Velocity RMS ans
		velocityRMS = sqrt(velocityPower * 2)/4096;
 800bee4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800bee8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800beec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bef0:	eeb0 0b47 	vmov.f64	d0, d7
 800bef4:	f011 fb5c 	bl	801d5b0 <sqrt>
 800bef8:	eeb0 6b40 	vmov.f64	d6, d0
 800befc:	ed9f 5b12 	vldr	d5, [pc, #72]	; 800bf48 <Calculate_FreqBandRMS+0x220>
 800bf00:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bf04:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800bf08:	edc7 7a05 	vstr	s15, [r7, #20]

		statistic_value.Statistic_FreqPeak[freq_index] = accelerationRMS;
 800bf0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf10:	4a11      	ldr	r2, [pc, #68]	; (800bf58 <Calculate_FreqBandRMS+0x230>)
 800bf12:	330e      	adds	r3, #14
 800bf14:	009b      	lsls	r3, r3, #2
 800bf16:	4413      	add	r3, r2
 800bf18:	6a3a      	ldr	r2, [r7, #32]
 800bf1a:	601a      	str	r2, [r3, #0]
		statistic_value.Statistic_VeloccityFreqPeak[freq_index] = velocityRMS;
 800bf1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf20:	4a0d      	ldr	r2, [pc, #52]	; (800bf58 <Calculate_FreqBandRMS+0x230>)
 800bf22:	3322      	adds	r3, #34	; 0x22
 800bf24:	009b      	lsls	r3, r3, #2
 800bf26:	4413      	add	r3, r2
 800bf28:	697a      	ldr	r2, [r7, #20]
 800bf2a:	601a      	str	r2, [r3, #0]

		vPortFree(velocityBuffer);
 800bf2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf2e:	f00c fbeb 	bl	8018708 <vPortFree>
	}
}
 800bf32:	bf00      	nop
 800bf34:	3740      	adds	r7, #64	; 0x40
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}
 800bf3a:	bf00      	nop
 800bf3c:	f3af 8000 	nop.w
 800bf40:	4d12d84a 	.word	0x4d12d84a
 800bf44:	401921fb 	.word	0x401921fb
 800bf48:	00000000 	.word	0x00000000
 800bf4c:	40b00000 	.word	0x40b00000
 800bf50:	2000000c 	.word	0x2000000c
 800bf54:	46193c00 	.word	0x46193c00
 800bf58:	2000021c 	.word	0x2000021c
 800bf5c:	00000000 	.word	0x00000000

0800bf60 <Calculate_FreqOverAll>:

void Calculate_FreqOverAll(float *x, int n)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b090      	sub	sp, #64	; 0x40
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
 800bf68:	6039      	str	r1, [r7, #0]
	//2021/0209/George
	//Acceleration sin(2πft) integral is Velocity cos(2πft)/2πft
	//Velocity cos(2πft)/2πft integral is cos(2πft)/(2πft)^2
	float ParsevalFftPower = 0;
 800bf6a:	f04f 0300 	mov.w	r3, #0
 800bf6e:	63fb      	str	r3, [r7, #60]	; 0x3c
	float AccelerationRMS = 0;
 800bf70:	f04f 0300 	mov.w	r3, #0
 800bf74:	62bb      	str	r3, [r7, #40]	; 0x28
	float velocityPower = 0;
 800bf76:	f04f 0300 	mov.w	r3, #0
 800bf7a:	63bb      	str	r3, [r7, #56]	; 0x38
	float displacementPower = 0;
 800bf7c:	f04f 0300 	mov.w	r3, #0
 800bf80:	637b      	str	r3, [r7, #52]	; 0x34
	float displacementP2p = 0;
 800bf82:	f04f 0300 	mov.w	r3, #0
 800bf86:	613b      	str	r3, [r7, #16]
	uint32_t displacement_index = 0;
 800bf88:	2300      	movs	r3, #0
 800bf8a:	60fb      	str	r3, [r7, #12]

	for(int i = 0; i<n/2; i++)
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	633b      	str	r3, [r7, #48]	; 0x30
 800bf90:	e016      	b.n	800bfc0 <Calculate_FreqOverAll+0x60>
	{
		ParsevalFftPower += x[i] * x[i];
 800bf92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf94:	009b      	lsls	r3, r3, #2
 800bf96:	687a      	ldr	r2, [r7, #4]
 800bf98:	4413      	add	r3, r2
 800bf9a:	ed93 7a00 	vldr	s14, [r3]
 800bf9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa0:	009b      	lsls	r3, r3, #2
 800bfa2:	687a      	ldr	r2, [r7, #4]
 800bfa4:	4413      	add	r3, r2
 800bfa6:	edd3 7a00 	vldr	s15, [r3]
 800bfaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfae:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800bfb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bfb6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	for(int i = 0; i<n/2; i++)
 800bfba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfbc:	3301      	adds	r3, #1
 800bfbe:	633b      	str	r3, [r7, #48]	; 0x30
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	da00      	bge.n	800bfc8 <Calculate_FreqOverAll+0x68>
 800bfc6:	3301      	adds	r3, #1
 800bfc8:	105b      	asrs	r3, r3, #1
 800bfca:	461a      	mov	r2, r3
 800bfcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfce:	4293      	cmp	r3, r2
 800bfd0:	dbdf      	blt.n	800bf92 <Calculate_FreqOverAll+0x32>
	}

	int fftSize = 4096;
 800bfd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bfd6:	627b      	str	r3, [r7, #36]	; 0x24
	/*
	 * 2021/0203/George
	 * Compute Speed Ovall
	 * TODO: Improve compute fftSize to fftSize/2
	 * */
	float32_t sampleCount = 4096;
 800bfd8:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 800bfdc:	623b      	str	r3, [r7, #32]
	float32_t samplingRate = 15000;
 800bfde:	4b94      	ldr	r3, [pc, #592]	; (800c230 <Calculate_FreqOverAll+0x2d0>)
 800bfe0:	61fb      	str	r3, [r7, #28]
	float32_t frequencyScale = samplingRate/sampleCount;
 800bfe2:	edd7 6a07 	vldr	s13, [r7, #28]
 800bfe6:	ed97 7a08 	vldr	s14, [r7, #32]
 800bfea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bfee:	edc7 7a06 	vstr	s15, [r7, #24]
	float SpeedparsevalFftPower = 0;
 800bff2:	f04f 0300 	mov.w	r3, #0
 800bff6:	617b      	str	r3, [r7, #20]

	//2021/0203/George
	//Calculate Velocity power
	for(uint16_t i = 0; i < fftSize / 2; i++)
 800bff8:	2300      	movs	r3, #0
 800bffa:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800bffc:	e051      	b.n	800c0a2 <Calculate_FreqOverAll+0x142>
	{
			if(i < fftSize/2)
 800bffe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c002:	2b00      	cmp	r3, #0
 800c004:	da00      	bge.n	800c008 <Calculate_FreqOverAll+0xa8>
 800c006:	3301      	adds	r3, #1
 800c008:	105b      	asrs	r3, r3, #1
 800c00a:	429a      	cmp	r2, r3
 800c00c:	da46      	bge.n	800c09c <Calculate_FreqOverAll+0x13c>
			{
				if(i ==0)
 800c00e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c010:	2b00      	cmp	r3, #0
 800c012:	d10a      	bne.n	800c02a <Calculate_FreqOverAll+0xca>
				{
					x[i] = x[i];
 800c014:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c016:	009b      	lsls	r3, r3, #2
 800c018:	687a      	ldr	r2, [r7, #4]
 800c01a:	441a      	add	r2, r3
 800c01c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c01e:	009b      	lsls	r3, r3, #2
 800c020:	6879      	ldr	r1, [r7, #4]
 800c022:	440b      	add	r3, r1
 800c024:	6812      	ldr	r2, [r2, #0]
 800c026:	601a      	str	r2, [r3, #0]
 800c028:	e024      	b.n	800c074 <Calculate_FreqOverAll+0x114>
				}
				else
				{
					x[i] = (x[i] * 9807) / (2 * 3.1415926 * frequencyScale * i);
 800c02a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c02c:	009b      	lsls	r3, r3, #2
 800c02e:	687a      	ldr	r2, [r7, #4]
 800c030:	4413      	add	r3, r2
 800c032:	edd3 7a00 	vldr	s15, [r3]
 800c036:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 800c234 <Calculate_FreqOverAll+0x2d4>
 800c03a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c03e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800c042:	edd7 7a06 	vldr	s15, [r7, #24]
 800c046:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c04a:	ed9f 6b75 	vldr	d6, [pc, #468]	; 800c220 <Calculate_FreqOverAll+0x2c0>
 800c04e:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c052:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c054:	ee07 3a90 	vmov	s15, r3
 800c058:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c05c:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c060:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800c064:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c066:	009b      	lsls	r3, r3, #2
 800c068:	687a      	ldr	r2, [r7, #4]
 800c06a:	4413      	add	r3, r2
 800c06c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800c070:	edc3 7a00 	vstr	s15, [r3]

				}
				velocityPower += x[i] * x[i];
 800c074:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c076:	009b      	lsls	r3, r3, #2
 800c078:	687a      	ldr	r2, [r7, #4]
 800c07a:	4413      	add	r3, r2
 800c07c:	ed93 7a00 	vldr	s14, [r3]
 800c080:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c082:	009b      	lsls	r3, r3, #2
 800c084:	687a      	ldr	r2, [r7, #4]
 800c086:	4413      	add	r3, r2
 800c088:	edd3 7a00 	vldr	s15, [r3]
 800c08c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c090:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800c094:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c098:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	for(uint16_t i = 0; i < fftSize / 2; i++)
 800c09c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c09e:	3301      	adds	r3, #1
 800c0a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c0a2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	da00      	bge.n	800c0ac <Calculate_FreqOverAll+0x14c>
 800c0aa:	3301      	adds	r3, #1
 800c0ac:	105b      	asrs	r3, r3, #1
 800c0ae:	429a      	cmp	r2, r3
 800c0b0:	dba5      	blt.n	800bffe <Calculate_FreqOverAll+0x9e>

	}

	//2021/0203/George
	//Calculate displacement power
	for(uint16_t i = 0; i < fftSize / 2; i++)
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800c0b6:	e04d      	b.n	800c154 <Calculate_FreqOverAll+0x1f4>
	{
			if(i < fftSize/2)
 800c0b8:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800c0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	da00      	bge.n	800c0c2 <Calculate_FreqOverAll+0x162>
 800c0c0:	3301      	adds	r3, #1
 800c0c2:	105b      	asrs	r3, r3, #1
 800c0c4:	429a      	cmp	r2, r3
 800c0c6:	da42      	bge.n	800c14e <Calculate_FreqOverAll+0x1ee>
			{
				if(i ==0)
 800c0c8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d10a      	bne.n	800c0e4 <Calculate_FreqOverAll+0x184>
				{
					x[i] = x[i];
 800c0ce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c0d0:	009b      	lsls	r3, r3, #2
 800c0d2:	687a      	ldr	r2, [r7, #4]
 800c0d4:	441a      	add	r2, r3
 800c0d6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c0d8:	009b      	lsls	r3, r3, #2
 800c0da:	6879      	ldr	r1, [r7, #4]
 800c0dc:	440b      	add	r3, r1
 800c0de:	6812      	ldr	r2, [r2, #0]
 800c0e0:	601a      	str	r2, [r3, #0]
 800c0e2:	e020      	b.n	800c126 <Calculate_FreqOverAll+0x1c6>
				}
				else
				{
					x[i] = (x[i]) / (2 * 3.1415926 * frequencyScale * i);
 800c0e4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c0e6:	009b      	lsls	r3, r3, #2
 800c0e8:	687a      	ldr	r2, [r7, #4]
 800c0ea:	4413      	add	r3, r2
 800c0ec:	edd3 7a00 	vldr	s15, [r3]
 800c0f0:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800c0f4:	edd7 7a06 	vldr	s15, [r7, #24]
 800c0f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c0fc:	ed9f 6b48 	vldr	d6, [pc, #288]	; 800c220 <Calculate_FreqOverAll+0x2c0>
 800c100:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c104:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c106:	ee07 3a90 	vmov	s15, r3
 800c10a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c10e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c112:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800c116:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c118:	009b      	lsls	r3, r3, #2
 800c11a:	687a      	ldr	r2, [r7, #4]
 800c11c:	4413      	add	r3, r2
 800c11e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800c122:	edc3 7a00 	vstr	s15, [r3]

				}
				displacementPower += x[i] * x[i];
 800c126:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c128:	009b      	lsls	r3, r3, #2
 800c12a:	687a      	ldr	r2, [r7, #4]
 800c12c:	4413      	add	r3, r2
 800c12e:	ed93 7a00 	vldr	s14, [r3]
 800c132:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c134:	009b      	lsls	r3, r3, #2
 800c136:	687a      	ldr	r2, [r7, #4]
 800c138:	4413      	add	r3, r2
 800c13a:	edd3 7a00 	vldr	s15, [r3]
 800c13e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c142:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c146:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c14a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	for(uint16_t i = 0; i < fftSize / 2; i++)
 800c14e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c150:	3301      	adds	r3, #1
 800c152:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800c154:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800c156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c158:	2b00      	cmp	r3, #0
 800c15a:	da00      	bge.n	800c15e <Calculate_FreqOverAll+0x1fe>
 800c15c:	3301      	adds	r3, #1
 800c15e:	105b      	asrs	r3, r3, #1
 800c160:	429a      	cmp	r2, r3
 800c162:	dba9      	blt.n	800c0b8 <Calculate_FreqOverAll+0x158>

	}

	//2021/0203/George2
	//TODO:calculate
	arm_max_f32(x, 2048, &displacementP2p, &displacement_index);
 800c164:	f107 030c 	add.w	r3, r7, #12
 800c168:	f107 0210 	add.w	r2, r7, #16
 800c16c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f7fc fd61 	bl	8008c38 <arm_max_f32>


	//2021/0203/George
	//TODO: improve formula from sqrt(ParsevalFftPower)/n to sqrt(2 * ParsevalFftPower)/n;
	AccelerationRMS = sqrt(2 * ParsevalFftPower)/n;
 800c176:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800c17a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c17e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c182:	eeb0 0b47 	vmov.f64	d0, d7
 800c186:	f011 fa13 	bl	801d5b0 <sqrt>
 800c18a:	eeb0 5b40 	vmov.f64	d5, d0
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	ee07 3a90 	vmov	s15, r3
 800c194:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800c198:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800c19c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800c1a0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	//2021/0203/George
	//TODO: improve formula from sqrt(velocityPower)/n to sqrt(2 * velocityPower)/n;
	statistic_value.Statistic_FreqOvall = AccelerationRMS; // unit : g
 800c1a4:	4a24      	ldr	r2, [pc, #144]	; (800c238 <Calculate_FreqOverAll+0x2d8>)
 800c1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1a8:	6293      	str	r3, [r2, #40]	; 0x28
	statistic_value.Statistic_SpeedOvall = sqrt(2 * velocityPower)/n; // unit : mm/s
 800c1aa:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800c1ae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c1b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c1b6:	eeb0 0b47 	vmov.f64	d0, d7
 800c1ba:	f011 f9f9 	bl	801d5b0 <sqrt>
 800c1be:	eeb0 5b40 	vmov.f64	d5, d0
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	ee07 3a90 	vmov	s15, r3
 800c1c8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800c1cc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800c1d0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800c1d4:	4b18      	ldr	r3, [pc, #96]	; (800c238 <Calculate_FreqOverAll+0x2d8>)
 800c1d6:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	statistic_value.Statistic_DisplacementOvall = 1000 * sqrt(2 * displacementPower)/n; // unit : um
 800c1da:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c1de:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c1e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c1e6:	eeb0 0b47 	vmov.f64	d0, d7
 800c1ea:	f011 f9e1 	bl	801d5b0 <sqrt>
 800c1ee:	eeb0 7b40 	vmov.f64	d7, d0
 800c1f2:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 800c228 <Calculate_FreqOverAll+0x2c8>
 800c1f6:	ee27 5b06 	vmul.f64	d5, d7, d6
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	ee07 3a90 	vmov	s15, r3
 800c200:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800c204:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800c208:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800c20c:	4b0a      	ldr	r3, [pc, #40]	; (800c238 <Calculate_FreqOverAll+0x2d8>)
 800c20e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	return AccelerationRMS;
 800c212:	bf00      	nop
}
 800c214:	3740      	adds	r7, #64	; 0x40
 800c216:	46bd      	mov	sp, r7
 800c218:	bd80      	pop	{r7, pc}
 800c21a:	bf00      	nop
 800c21c:	f3af 8000 	nop.w
 800c220:	4d12d84a 	.word	0x4d12d84a
 800c224:	401921fb 	.word	0x401921fb
 800c228:	00000000 	.word	0x00000000
 800c22c:	408f4000 	.word	0x408f4000
 800c230:	466a6000 	.word	0x466a6000
 800c234:	46193c00 	.word	0x46193c00
 800c238:	2000021c 	.word	0x2000021c
 800c23c:	00000000 	.word	0x00000000

0800c240 <Calculate_CosineSimilarity>:

//Wayne-- 20220419 Adj.CosineSimilarity
//void Calculate_CosineSimilarity(void)
float  Calculate_CosineSimilarity(float *Signal1, float *Signal2, uint16_t datasize)
{
 800c240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c244:	ed2d 8b02 	vpush	{d8}
 800c248:	b0bb      	sub	sp, #236	; 0xec
 800c24a:	af00      	add	r7, sp, #0
 800c24c:	6778      	str	r0, [r7, #116]	; 0x74
 800c24e:	6739      	str	r1, [r7, #112]	; 0x70
 800c250:	4613      	mov	r3, r2
 800c252:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 800c256:	466b      	mov	r3, sp
 800c258:	461e      	mov	r6, r3

	//---Reduce Signal1 and Signal2 Avg. valve for Adj. CosineSimilarity---

	float Signal1_Amp[datasize], Signal2_Amp[datasize], Signal1_fq[datasize], Signal2_fq[datasize];
 800c25a:	f8b7 106e 	ldrh.w	r1, [r7, #110]	; 0x6e
 800c25e:	460b      	mov	r3, r1
 800c260:	3b01      	subs	r3, #1
 800c262:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c266:	b28b      	uxth	r3, r1
 800c268:	2200      	movs	r2, #0
 800c26a:	461c      	mov	r4, r3
 800c26c:	4615      	mov	r5, r2
 800c26e:	f04f 0200 	mov.w	r2, #0
 800c272:	f04f 0300 	mov.w	r3, #0
 800c276:	016b      	lsls	r3, r5, #5
 800c278:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800c27c:	0162      	lsls	r2, r4, #5
 800c27e:	b28b      	uxth	r3, r1
 800c280:	2200      	movs	r2, #0
 800c282:	4698      	mov	r8, r3
 800c284:	4691      	mov	r9, r2
 800c286:	f04f 0200 	mov.w	r2, #0
 800c28a:	f04f 0300 	mov.w	r3, #0
 800c28e:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800c292:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 800c296:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800c29a:	460b      	mov	r3, r1
 800c29c:	009b      	lsls	r3, r3, #2
 800c29e:	3307      	adds	r3, #7
 800c2a0:	08db      	lsrs	r3, r3, #3
 800c2a2:	00db      	lsls	r3, r3, #3
 800c2a4:	ebad 0d03 	sub.w	sp, sp, r3
 800c2a8:	466b      	mov	r3, sp
 800c2aa:	3303      	adds	r3, #3
 800c2ac:	089b      	lsrs	r3, r3, #2
 800c2ae:	009b      	lsls	r3, r3, #2
 800c2b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c2b4:	f8b7 106e 	ldrh.w	r1, [r7, #110]	; 0x6e
 800c2b8:	460b      	mov	r3, r1
 800c2ba:	3b01      	subs	r3, #1
 800c2bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c2c0:	b28b      	uxth	r3, r1
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	469a      	mov	sl, r3
 800c2c6:	4693      	mov	fp, r2
 800c2c8:	f04f 0200 	mov.w	r2, #0
 800c2cc:	f04f 0300 	mov.w	r3, #0
 800c2d0:	ea4f 134b 	mov.w	r3, fp, lsl #5
 800c2d4:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 800c2d8:	ea4f 124a 	mov.w	r2, sl, lsl #5
 800c2dc:	b28b      	uxth	r3, r1
 800c2de:	2200      	movs	r2, #0
 800c2e0:	663b      	str	r3, [r7, #96]	; 0x60
 800c2e2:	667a      	str	r2, [r7, #100]	; 0x64
 800c2e4:	f04f 0200 	mov.w	r2, #0
 800c2e8:	f04f 0300 	mov.w	r3, #0
 800c2ec:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800c2f0:	4628      	mov	r0, r5
 800c2f2:	0143      	lsls	r3, r0, #5
 800c2f4:	4620      	mov	r0, r4
 800c2f6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c2fa:	4620      	mov	r0, r4
 800c2fc:	0142      	lsls	r2, r0, #5
 800c2fe:	460b      	mov	r3, r1
 800c300:	009b      	lsls	r3, r3, #2
 800c302:	3307      	adds	r3, #7
 800c304:	08db      	lsrs	r3, r3, #3
 800c306:	00db      	lsls	r3, r3, #3
 800c308:	ebad 0d03 	sub.w	sp, sp, r3
 800c30c:	466b      	mov	r3, sp
 800c30e:	3303      	adds	r3, #3
 800c310:	089b      	lsrs	r3, r3, #2
 800c312:	009b      	lsls	r3, r3, #2
 800c314:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c318:	f8b7 106e 	ldrh.w	r1, [r7, #110]	; 0x6e
 800c31c:	460b      	mov	r3, r1
 800c31e:	3b01      	subs	r3, #1
 800c320:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c324:	b28b      	uxth	r3, r1
 800c326:	2200      	movs	r2, #0
 800c328:	65bb      	str	r3, [r7, #88]	; 0x58
 800c32a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c32c:	f04f 0200 	mov.w	r2, #0
 800c330:	f04f 0300 	mov.w	r3, #0
 800c334:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800c338:	4628      	mov	r0, r5
 800c33a:	0143      	lsls	r3, r0, #5
 800c33c:	4620      	mov	r0, r4
 800c33e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c342:	4620      	mov	r0, r4
 800c344:	0142      	lsls	r2, r0, #5
 800c346:	b28b      	uxth	r3, r1
 800c348:	2200      	movs	r2, #0
 800c34a:	653b      	str	r3, [r7, #80]	; 0x50
 800c34c:	657a      	str	r2, [r7, #84]	; 0x54
 800c34e:	f04f 0200 	mov.w	r2, #0
 800c352:	f04f 0300 	mov.w	r3, #0
 800c356:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800c35a:	4628      	mov	r0, r5
 800c35c:	0143      	lsls	r3, r0, #5
 800c35e:	4620      	mov	r0, r4
 800c360:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c364:	4620      	mov	r0, r4
 800c366:	0142      	lsls	r2, r0, #5
 800c368:	460b      	mov	r3, r1
 800c36a:	009b      	lsls	r3, r3, #2
 800c36c:	3307      	adds	r3, #7
 800c36e:	08db      	lsrs	r3, r3, #3
 800c370:	00db      	lsls	r3, r3, #3
 800c372:	ebad 0d03 	sub.w	sp, sp, r3
 800c376:	466b      	mov	r3, sp
 800c378:	3303      	adds	r3, #3
 800c37a:	089b      	lsrs	r3, r3, #2
 800c37c:	009b      	lsls	r3, r3, #2
 800c37e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c382:	f8b7 106e 	ldrh.w	r1, [r7, #110]	; 0x6e
 800c386:	460b      	mov	r3, r1
 800c388:	3b01      	subs	r3, #1
 800c38a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c38e:	b28b      	uxth	r3, r1
 800c390:	2200      	movs	r2, #0
 800c392:	64bb      	str	r3, [r7, #72]	; 0x48
 800c394:	64fa      	str	r2, [r7, #76]	; 0x4c
 800c396:	f04f 0200 	mov.w	r2, #0
 800c39a:	f04f 0300 	mov.w	r3, #0
 800c39e:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800c3a2:	4628      	mov	r0, r5
 800c3a4:	0143      	lsls	r3, r0, #5
 800c3a6:	4620      	mov	r0, r4
 800c3a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c3ac:	4620      	mov	r0, r4
 800c3ae:	0142      	lsls	r2, r0, #5
 800c3b0:	b28b      	uxth	r3, r1
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	643b      	str	r3, [r7, #64]	; 0x40
 800c3b6:	647a      	str	r2, [r7, #68]	; 0x44
 800c3b8:	f04f 0200 	mov.w	r2, #0
 800c3bc:	f04f 0300 	mov.w	r3, #0
 800c3c0:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800c3c4:	4628      	mov	r0, r5
 800c3c6:	0143      	lsls	r3, r0, #5
 800c3c8:	4620      	mov	r0, r4
 800c3ca:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c3ce:	4620      	mov	r0, r4
 800c3d0:	0142      	lsls	r2, r0, #5
 800c3d2:	460b      	mov	r3, r1
 800c3d4:	009b      	lsls	r3, r3, #2
 800c3d6:	3307      	adds	r3, #7
 800c3d8:	08db      	lsrs	r3, r3, #3
 800c3da:	00db      	lsls	r3, r3, #3
 800c3dc:	ebad 0d03 	sub.w	sp, sp, r3
 800c3e0:	466b      	mov	r3, sp
 800c3e2:	3303      	adds	r3, #3
 800c3e4:	089b      	lsrs	r3, r3, #2
 800c3e6:	009b      	lsls	r3, r3, #2
 800c3e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	//-------TopCount Setting-----------------
	uint8_t TopCount=100;//TopCount Setting
 800c3ec:	2364      	movs	r3, #100	; 0x64
 800c3ee:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
	//-------TopCount Setting-----------------
	float Avg_Valve, Avg_Valve_f, RdAvg_Sum, RdAvg_Sum_f;
	float Signal1_Amp_Top[TopCount], Signal2_Amp_Top[TopCount], Signal1_fq_Top[TopCount], Signal2_fq_Top[TopCount];
 800c3f2:	f897 10b7 	ldrb.w	r1, [r7, #183]	; 0xb7
 800c3f6:	460b      	mov	r3, r1
 800c3f8:	3b01      	subs	r3, #1
 800c3fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c3fe:	b2cb      	uxtb	r3, r1
 800c400:	2200      	movs	r2, #0
 800c402:	63bb      	str	r3, [r7, #56]	; 0x38
 800c404:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c406:	f04f 0200 	mov.w	r2, #0
 800c40a:	f04f 0300 	mov.w	r3, #0
 800c40e:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800c412:	4628      	mov	r0, r5
 800c414:	0143      	lsls	r3, r0, #5
 800c416:	4620      	mov	r0, r4
 800c418:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c41c:	4620      	mov	r0, r4
 800c41e:	0142      	lsls	r2, r0, #5
 800c420:	b2cb      	uxtb	r3, r1
 800c422:	2200      	movs	r2, #0
 800c424:	633b      	str	r3, [r7, #48]	; 0x30
 800c426:	637a      	str	r2, [r7, #52]	; 0x34
 800c428:	f04f 0200 	mov.w	r2, #0
 800c42c:	f04f 0300 	mov.w	r3, #0
 800c430:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800c434:	4628      	mov	r0, r5
 800c436:	0143      	lsls	r3, r0, #5
 800c438:	4620      	mov	r0, r4
 800c43a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c43e:	4620      	mov	r0, r4
 800c440:	0142      	lsls	r2, r0, #5
 800c442:	460b      	mov	r3, r1
 800c444:	009b      	lsls	r3, r3, #2
 800c446:	3307      	adds	r3, #7
 800c448:	08db      	lsrs	r3, r3, #3
 800c44a:	00db      	lsls	r3, r3, #3
 800c44c:	ebad 0d03 	sub.w	sp, sp, r3
 800c450:	466b      	mov	r3, sp
 800c452:	3303      	adds	r3, #3
 800c454:	089b      	lsrs	r3, r3, #2
 800c456:	009b      	lsls	r3, r3, #2
 800c458:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c45c:	f897 10b7 	ldrb.w	r1, [r7, #183]	; 0xb7
 800c460:	460b      	mov	r3, r1
 800c462:	3b01      	subs	r3, #1
 800c464:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c468:	b2cb      	uxtb	r3, r1
 800c46a:	2200      	movs	r2, #0
 800c46c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c46e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c470:	f04f 0200 	mov.w	r2, #0
 800c474:	f04f 0300 	mov.w	r3, #0
 800c478:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800c47c:	4628      	mov	r0, r5
 800c47e:	0143      	lsls	r3, r0, #5
 800c480:	4620      	mov	r0, r4
 800c482:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c486:	4620      	mov	r0, r4
 800c488:	0142      	lsls	r2, r0, #5
 800c48a:	b2cb      	uxtb	r3, r1
 800c48c:	2200      	movs	r2, #0
 800c48e:	623b      	str	r3, [r7, #32]
 800c490:	627a      	str	r2, [r7, #36]	; 0x24
 800c492:	f04f 0200 	mov.w	r2, #0
 800c496:	f04f 0300 	mov.w	r3, #0
 800c49a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800c49e:	4628      	mov	r0, r5
 800c4a0:	0143      	lsls	r3, r0, #5
 800c4a2:	4620      	mov	r0, r4
 800c4a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c4a8:	4620      	mov	r0, r4
 800c4aa:	0142      	lsls	r2, r0, #5
 800c4ac:	460b      	mov	r3, r1
 800c4ae:	009b      	lsls	r3, r3, #2
 800c4b0:	3307      	adds	r3, #7
 800c4b2:	08db      	lsrs	r3, r3, #3
 800c4b4:	00db      	lsls	r3, r3, #3
 800c4b6:	ebad 0d03 	sub.w	sp, sp, r3
 800c4ba:	466b      	mov	r3, sp
 800c4bc:	3303      	adds	r3, #3
 800c4be:	089b      	lsrs	r3, r3, #2
 800c4c0:	009b      	lsls	r3, r3, #2
 800c4c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c4c6:	f897 10b7 	ldrb.w	r1, [r7, #183]	; 0xb7
 800c4ca:	460b      	mov	r3, r1
 800c4cc:	3b01      	subs	r3, #1
 800c4ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c4d2:	b2cb      	uxtb	r3, r1
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	61bb      	str	r3, [r7, #24]
 800c4d8:	61fa      	str	r2, [r7, #28]
 800c4da:	f04f 0200 	mov.w	r2, #0
 800c4de:	f04f 0300 	mov.w	r3, #0
 800c4e2:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800c4e6:	4628      	mov	r0, r5
 800c4e8:	0143      	lsls	r3, r0, #5
 800c4ea:	4620      	mov	r0, r4
 800c4ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c4f0:	4620      	mov	r0, r4
 800c4f2:	0142      	lsls	r2, r0, #5
 800c4f4:	b2cb      	uxtb	r3, r1
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	613b      	str	r3, [r7, #16]
 800c4fa:	617a      	str	r2, [r7, #20]
 800c4fc:	f04f 0200 	mov.w	r2, #0
 800c500:	f04f 0300 	mov.w	r3, #0
 800c504:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800c508:	4628      	mov	r0, r5
 800c50a:	0143      	lsls	r3, r0, #5
 800c50c:	4620      	mov	r0, r4
 800c50e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c512:	4620      	mov	r0, r4
 800c514:	0142      	lsls	r2, r0, #5
 800c516:	460b      	mov	r3, r1
 800c518:	009b      	lsls	r3, r3, #2
 800c51a:	3307      	adds	r3, #7
 800c51c:	08db      	lsrs	r3, r3, #3
 800c51e:	00db      	lsls	r3, r3, #3
 800c520:	ebad 0d03 	sub.w	sp, sp, r3
 800c524:	466b      	mov	r3, sp
 800c526:	3303      	adds	r3, #3
 800c528:	089b      	lsrs	r3, r3, #2
 800c52a:	009b      	lsls	r3, r3, #2
 800c52c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c530:	f897 10b7 	ldrb.w	r1, [r7, #183]	; 0xb7
 800c534:	460b      	mov	r3, r1
 800c536:	3b01      	subs	r3, #1
 800c538:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c53c:	b2cb      	uxtb	r3, r1
 800c53e:	2200      	movs	r2, #0
 800c540:	60bb      	str	r3, [r7, #8]
 800c542:	60fa      	str	r2, [r7, #12]
 800c544:	f04f 0200 	mov.w	r2, #0
 800c548:	f04f 0300 	mov.w	r3, #0
 800c54c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800c550:	4628      	mov	r0, r5
 800c552:	0143      	lsls	r3, r0, #5
 800c554:	4620      	mov	r0, r4
 800c556:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c55a:	4620      	mov	r0, r4
 800c55c:	0142      	lsls	r2, r0, #5
 800c55e:	b2cb      	uxtb	r3, r1
 800c560:	2200      	movs	r2, #0
 800c562:	603b      	str	r3, [r7, #0]
 800c564:	607a      	str	r2, [r7, #4]
 800c566:	f04f 0200 	mov.w	r2, #0
 800c56a:	f04f 0300 	mov.w	r3, #0
 800c56e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c572:	4628      	mov	r0, r5
 800c574:	0143      	lsls	r3, r0, #5
 800c576:	4620      	mov	r0, r4
 800c578:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c57c:	4620      	mov	r0, r4
 800c57e:	0142      	lsls	r2, r0, #5
 800c580:	460b      	mov	r3, r1
 800c582:	009b      	lsls	r3, r3, #2
 800c584:	3307      	adds	r3, #7
 800c586:	08db      	lsrs	r3, r3, #3
 800c588:	00db      	lsls	r3, r3, #3
 800c58a:	ebad 0d03 	sub.w	sp, sp, r3
 800c58e:	466b      	mov	r3, sp
 800c590:	3303      	adds	r3, #3
 800c592:	089b      	lsrs	r3, r3, #2
 800c594:	009b      	lsls	r3, r3, #2
 800c596:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94


	for( uint16_t i = 0; i <  datasize; i++)
 800c59a:	2300      	movs	r3, #0
 800c59c:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
 800c5a0:	e04e      	b.n	800c640 <Calculate_CosineSimilarity+0x400>
	{
		Signal1_Amp[i] = Signal1[i];
 800c5a2:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800c5a6:	009b      	lsls	r3, r3, #2
 800c5a8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c5aa:	441a      	add	r2, r3
 800c5ac:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800c5b0:	6812      	ldr	r2, [r2, #0]
 800c5b2:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800c5b6:	009b      	lsls	r3, r3, #2
 800c5b8:	440b      	add	r3, r1
 800c5ba:	601a      	str	r2, [r3, #0]
		Signal2_Amp[i] = Signal2[i];
 800c5bc:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800c5c0:	009b      	lsls	r3, r3, #2
 800c5c2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c5c4:	441a      	add	r2, r3
 800c5c6:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800c5ca:	6812      	ldr	r2, [r2, #0]
 800c5cc:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800c5d0:	009b      	lsls	r3, r3, #2
 800c5d2:	440b      	add	r3, r1
 800c5d4:	601a      	str	r2, [r3, #0]
		//---Create Frequency index----
		//fQ scale = 15000/4096 =3.66Hz
		//0:0, 1:1*fQ scale, 2:2*fQ scale
		Signal1_fq[i] = i*3.66/10;
 800c5d6:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800c5da:	ee07 3a90 	vmov	s15, r3
 800c5de:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c5e2:	ed9f 6bb1 	vldr	d6, [pc, #708]	; 800c8a8 <Calculate_CosineSimilarity+0x668>
 800c5e6:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c5ea:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 800c5ee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c5f2:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800c5f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800c5fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c5fe:	009b      	lsls	r3, r3, #2
 800c600:	4413      	add	r3, r2
 800c602:	edc3 7a00 	vstr	s15, [r3]
		Signal2_fq[i] = i*3.66/10;
 800c606:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800c60a:	ee07 3a90 	vmov	s15, r3
 800c60e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c612:	ed9f 6ba5 	vldr	d6, [pc, #660]	; 800c8a8 <Calculate_CosineSimilarity+0x668>
 800c616:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c61a:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 800c61e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c622:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800c626:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800c62a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c62e:	009b      	lsls	r3, r3, #2
 800c630:	4413      	add	r3, r2
 800c632:	edc3 7a00 	vstr	s15, [r3]
	for( uint16_t i = 0; i <  datasize; i++)
 800c636:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800c63a:	3301      	adds	r3, #1
 800c63c:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
 800c640:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 800c644:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c648:	429a      	cmp	r2, r3
 800c64a:	d3aa      	bcc.n	800c5a2 <Calculate_CosineSimilarity+0x362>
	}

	//Sort FFT Top to down
	 quick_sort(Signal1_Amp, Signal1_fq, 0, datasize-1);
 800c64c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c650:	3b01      	subs	r3, #1
 800c652:	2200      	movs	r2, #0
 800c654:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800c658:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800c65c:	f000 fa3e 	bl	800cadc <quick_sort>
	 quick_sort(Signal2_Amp, Signal2_fq, 0, datasize-1);
 800c660:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c664:	3b01      	subs	r3, #1
 800c666:	2200      	movs	r2, #0
 800c668:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800c66c:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800c670:	f000 fa34 	bl	800cadc <quick_sort>

	 //Get Amp Top valve & Computing Avg.
	 for(uint16_t i = 0; i < TopCount; i++ )//Top=100
 800c674:	2300      	movs	r3, #0
 800c676:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
 800c67a:	e06c      	b.n	800c756 <Calculate_CosineSimilarity+0x516>
	 {
		 Signal1_Amp_Top[i] = Signal1_Amp[i];
 800c67c:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 800c680:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 800c684:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800c688:	0092      	lsls	r2, r2, #2
 800c68a:	440a      	add	r2, r1
 800c68c:	6812      	ldr	r2, [r2, #0]
 800c68e:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800c692:	009b      	lsls	r3, r3, #2
 800c694:	440b      	add	r3, r1
 800c696:	601a      	str	r2, [r3, #0]
		 Signal2_Amp_Top[i] = Signal2_Amp[i];
 800c698:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 800c69c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 800c6a0:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800c6a4:	0092      	lsls	r2, r2, #2
 800c6a6:	440a      	add	r2, r1
 800c6a8:	6812      	ldr	r2, [r2, #0]
 800c6aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c6ae:	009b      	lsls	r3, r3, #2
 800c6b0:	440b      	add	r3, r1
 800c6b2:	601a      	str	r2, [r3, #0]
		 Signal1_fq_Top[i]= Signal1_fq[i];
 800c6b4:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 800c6b8:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 800c6bc:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800c6c0:	0092      	lsls	r2, r2, #2
 800c6c2:	440a      	add	r2, r1
 800c6c4:	6812      	ldr	r2, [r2, #0]
 800c6c6:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800c6ca:	009b      	lsls	r3, r3, #2
 800c6cc:	440b      	add	r3, r1
 800c6ce:	601a      	str	r2, [r3, #0]
		 Signal2_fq_Top[i]= Signal2_fq[i];
 800c6d0:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 800c6d4:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 800c6d8:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800c6dc:	0092      	lsls	r2, r2, #2
 800c6de:	440a      	add	r2, r1
 800c6e0:	6812      	ldr	r2, [r2, #0]
 800c6e2:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800c6e6:	009b      	lsls	r3, r3, #2
 800c6e8:	440b      	add	r3, r1
 800c6ea:	601a      	str	r2, [r3, #0]
		 RdAvg_Sum += (Signal1_Amp_Top[i] + Signal2_Amp_Top[i]);
 800c6ec:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 800c6f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c6f4:	009b      	lsls	r3, r3, #2
 800c6f6:	4413      	add	r3, r2
 800c6f8:	ed93 7a00 	vldr	s14, [r3]
 800c6fc:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 800c700:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800c704:	009b      	lsls	r3, r3, #2
 800c706:	4413      	add	r3, r2
 800c708:	edd3 7a00 	vldr	s15, [r3]
 800c70c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c710:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 800c714:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c718:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
		 RdAvg_Sum_f += (Signal1_fq_Top[i] + Signal2_fq_Top[i]);
 800c71c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 800c720:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c724:	009b      	lsls	r3, r3, #2
 800c726:	4413      	add	r3, r2
 800c728:	ed93 7a00 	vldr	s14, [r3]
 800c72c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 800c730:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c734:	009b      	lsls	r3, r3, #2
 800c736:	4413      	add	r3, r2
 800c738:	edd3 7a00 	vldr	s15, [r3]
 800c73c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c740:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 800c744:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c748:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
	 for(uint16_t i = 0; i < TopCount; i++ )//Top=100
 800c74c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 800c750:	3301      	adds	r3, #1
 800c752:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
 800c756:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800c75a:	b29b      	uxth	r3, r3
 800c75c:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 800c760:	429a      	cmp	r2, r3
 800c762:	d38b      	bcc.n	800c67c <Calculate_CosineSimilarity+0x43c>
	 }
	 Avg_Valve = RdAvg_Sum/(TopCount*2);
 800c764:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800c768:	005b      	lsls	r3, r3, #1
 800c76a:	ee07 3a90 	vmov	s15, r3
 800c76e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c772:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 800c776:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c77a:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
	 Avg_Valve_f = RdAvg_Sum_f/(TopCount*2);
 800c77e:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800c782:	005b      	lsls	r3, r3, #1
 800c784:	ee07 3a90 	vmov	s15, r3
 800c788:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c78c:	edd7 6a31 	vldr	s13, [r7, #196]	; 0xc4
 800c790:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c794:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c

	//reduce Avg. valve for Adj. CosineSimilarity
	for( uint16_t i = 0; i <  TopCount; i++)
 800c798:	2300      	movs	r3, #0
 800c79a:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
 800c79e:	e054      	b.n	800c84a <Calculate_CosineSimilarity+0x60a>
	{
		//---Reduce Signal1 and Signal2 Avg. valve
		Signal1_Amp_Top[i] = Signal1_Amp_Top[i] - Avg_Valve;
 800c7a0:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 800c7a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c7a8:	009b      	lsls	r3, r3, #2
 800c7aa:	4413      	add	r3, r2
 800c7ac:	ed93 7a00 	vldr	s14, [r3]
 800c7b0:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 800c7b4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800c7b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c7bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c7c0:	009b      	lsls	r3, r3, #2
 800c7c2:	4413      	add	r3, r2
 800c7c4:	edc3 7a00 	vstr	s15, [r3]
		Signal2_Amp_Top[i] = Signal2_Amp_Top[i] - Avg_Valve;
 800c7c8:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 800c7cc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800c7d0:	009b      	lsls	r3, r3, #2
 800c7d2:	4413      	add	r3, r2
 800c7d4:	ed93 7a00 	vldr	s14, [r3]
 800c7d8:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 800c7dc:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800c7e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c7e4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800c7e8:	009b      	lsls	r3, r3, #2
 800c7ea:	4413      	add	r3, r2
 800c7ec:	edc3 7a00 	vstr	s15, [r3]
		//---Reduce Signal1 and Signal2 freq. Avg. valve
		Signal1_fq_Top[i] = Signal1_fq_Top[i] - Avg_Valve_f;
 800c7f0:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 800c7f4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c7f8:	009b      	lsls	r3, r3, #2
 800c7fa:	4413      	add	r3, r2
 800c7fc:	ed93 7a00 	vldr	s14, [r3]
 800c800:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 800c804:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800c808:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c80c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c810:	009b      	lsls	r3, r3, #2
 800c812:	4413      	add	r3, r2
 800c814:	edc3 7a00 	vstr	s15, [r3]
		Signal2_fq_Top[i] = Signal2_fq_Top[i] - Avg_Valve_f;
 800c818:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 800c81c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c820:	009b      	lsls	r3, r3, #2
 800c822:	4413      	add	r3, r2
 800c824:	ed93 7a00 	vldr	s14, [r3]
 800c828:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 800c82c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800c830:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c834:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c838:	009b      	lsls	r3, r3, #2
 800c83a:	4413      	add	r3, r2
 800c83c:	edc3 7a00 	vstr	s15, [r3]
	for( uint16_t i = 0; i <  TopCount; i++)
 800c840:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 800c844:	3301      	adds	r3, #1
 800c846:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
 800c84a:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800c84e:	b29b      	uxth	r3, r3
 800c850:	f8b7 20cc 	ldrh.w	r2, [r7, #204]	; 0xcc
 800c854:	429a      	cmp	r2, r3
 800c856:	d3a3      	bcc.n	800c7a0 <Calculate_CosineSimilarity+0x560>
	}
	//
	quick_sort_ascending(Signal1_fq_Top, Signal1_Amp_Top, 0, TopCount-1);
 800c858:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800c85c:	3b01      	subs	r3, #1
 800c85e:	2200      	movs	r2, #0
 800c860:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800c864:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800c868:	f000 f9ea 	bl	800cc40 <quick_sort_ascending>
	quick_sort_ascending(Signal2_fq_Top, Signal2_Amp_Top, 0, TopCount-1);
 800c86c:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800c870:	3b01      	subs	r3, #1
 800c872:	2200      	movs	r2, #0
 800c874:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c878:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800c87c:	f000 f9e0 	bl	800cc40 <quick_sort_ascending>
//    }



    //---Adj. CosineSimilarity---
        float data1sumsqrt = 0;
 800c880:	f04f 0300 	mov.w	r3, #0
 800c884:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        float data2sumsqrt = 0;
 800c888:	f04f 0300 	mov.w	r3, #0
 800c88c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        float datasum = 0;
 800c890:	f04f 0300 	mov.w	r3, #0
 800c894:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        float datasumsqrt = 0;
 800c898:	f04f 0300 	mov.w	r3, #0
 800c89c:	67fb      	str	r3, [r7, #124]	; 0x7c
//        float ans = 0;


        //---Adj. CosineSimilarity for Top------------------------------------
    for( uint16_t i = 0; i <  TopCount; i++)
 800c89e:	2300      	movs	r3, #0
 800c8a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 800c8a4:	e0bf      	b.n	800ca26 <Calculate_CosineSimilarity+0x7e6>
 800c8a6:	bf00      	nop
 800c8a8:	147ae148 	.word	0x147ae148
 800c8ac:	400d47ae 	.word	0x400d47ae
        {
    		datasum = (Signal1_Amp_Top[i] * Signal2_Amp_Top[i]) + (Signal1_fq_Top[i] * Signal2_fq_Top[i]);
 800c8b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c8b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c8b8:	009b      	lsls	r3, r3, #2
 800c8ba:	4413      	add	r3, r2
 800c8bc:	ed93 7a00 	vldr	s14, [r3]
 800c8c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c8c4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800c8c8:	009b      	lsls	r3, r3, #2
 800c8ca:	4413      	add	r3, r2
 800c8cc:	edd3 7a00 	vldr	s15, [r3]
 800c8d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c8d8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c8dc:	009b      	lsls	r3, r3, #2
 800c8de:	4413      	add	r3, r2
 800c8e0:	edd3 6a00 	vldr	s13, [r3]
 800c8e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c8e8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c8ec:	009b      	lsls	r3, r3, #2
 800c8ee:	4413      	add	r3, r2
 800c8f0:	edd3 7a00 	vldr	s15, [r3]
 800c8f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c8f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c8fc:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            data1sumsqrt = (Signal1_Amp_Top[i] * Signal1_Amp_Top[i]) + (Signal1_fq_Top[i] * Signal1_fq_Top[i]);
 800c900:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c904:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c908:	009b      	lsls	r3, r3, #2
 800c90a:	4413      	add	r3, r2
 800c90c:	ed93 7a00 	vldr	s14, [r3]
 800c910:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c914:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c918:	009b      	lsls	r3, r3, #2
 800c91a:	4413      	add	r3, r2
 800c91c:	edd3 7a00 	vldr	s15, [r3]
 800c920:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c924:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c928:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c92c:	009b      	lsls	r3, r3, #2
 800c92e:	4413      	add	r3, r2
 800c930:	edd3 6a00 	vldr	s13, [r3]
 800c934:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c938:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c93c:	009b      	lsls	r3, r3, #2
 800c93e:	4413      	add	r3, r2
 800c940:	edd3 7a00 	vldr	s15, [r3]
 800c944:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c948:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c94c:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            data2sumsqrt = (Signal2_Amp_Top[i] * Signal2_Amp_Top[i]) + (Signal2_fq_Top[i] * Signal2_fq_Top[i]);
 800c950:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c954:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800c958:	009b      	lsls	r3, r3, #2
 800c95a:	4413      	add	r3, r2
 800c95c:	ed93 7a00 	vldr	s14, [r3]
 800c960:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c964:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800c968:	009b      	lsls	r3, r3, #2
 800c96a:	4413      	add	r3, r2
 800c96c:	edd3 7a00 	vldr	s15, [r3]
 800c970:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c974:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c978:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c97c:	009b      	lsls	r3, r3, #2
 800c97e:	4413      	add	r3, r2
 800c980:	edd3 6a00 	vldr	s13, [r3]
 800c984:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c988:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c98c:	009b      	lsls	r3, r3, #2
 800c98e:	4413      	add	r3, r2
 800c990:	edd3 7a00 	vldr	s15, [r3]
 800c994:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c998:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c99c:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            datasumsqrt = sqrt(data1sumsqrt) * sqrt(data2sumsqrt);
 800c9a0:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800c9a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c9a8:	eeb0 0b47 	vmov.f64	d0, d7
 800c9ac:	f010 fe00 	bl	801d5b0 <sqrt>
 800c9b0:	eeb0 8b40 	vmov.f64	d8, d0
 800c9b4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800c9b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c9bc:	eeb0 0b47 	vmov.f64	d0, d7
 800c9c0:	f010 fdf6 	bl	801d5b0 <sqrt>
 800c9c4:	eeb0 7b40 	vmov.f64	d7, d0
 800c9c8:	ee28 7b07 	vmul.f64	d7, d8, d7
 800c9cc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800c9d0:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
            if(datasum / datasumsqrt < 0)
 800c9d4:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 800c9d8:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800c9dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c9e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c9e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9e8:	d50a      	bpl.n	800ca00 <Calculate_CosineSimilarity+0x7c0>
            	ans_temp += 0;
 800c9ea:	4b37      	ldr	r3, [pc, #220]	; (800cac8 <Calculate_CosineSimilarity+0x888>)
 800c9ec:	edd3 7a00 	vldr	s15, [r3]
 800c9f0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800cacc <Calculate_CosineSimilarity+0x88c>
 800c9f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c9f8:	4b33      	ldr	r3, [pc, #204]	; (800cac8 <Calculate_CosineSimilarity+0x888>)
 800c9fa:	edc3 7a00 	vstr	s15, [r3]
 800c9fe:	e00d      	b.n	800ca1c <Calculate_CosineSimilarity+0x7dc>
            else
            	ans_temp += datasum / datasumsqrt;
 800ca00:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 800ca04:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800ca08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca0c:	4b2e      	ldr	r3, [pc, #184]	; (800cac8 <Calculate_CosineSimilarity+0x888>)
 800ca0e:	edd3 7a00 	vldr	s15, [r3]
 800ca12:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ca16:	4b2c      	ldr	r3, [pc, #176]	; (800cac8 <Calculate_CosineSimilarity+0x888>)
 800ca18:	edc3 7a00 	vstr	s15, [r3]
    for( uint16_t i = 0; i <  TopCount; i++)
 800ca1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ca20:	3301      	adds	r3, #1
 800ca22:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 800ca26:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800ca2a:	b29b      	uxth	r3, r3
 800ca2c:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800ca30:	429a      	cmp	r2, r3
 800ca32:	f4ff af3d 	bcc.w	800c8b0 <Calculate_CosineSimilarity+0x670>
    	}
        ans_temp = ans_temp / TopCount;
 800ca36:	4b24      	ldr	r3, [pc, #144]	; (800cac8 <Calculate_CosineSimilarity+0x888>)
 800ca38:	edd3 6a00 	vldr	s13, [r3]
 800ca3c:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800ca40:	ee07 3a90 	vmov	s15, r3
 800ca44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ca48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca4c:	4b1e      	ldr	r3, [pc, #120]	; (800cac8 <Calculate_CosineSimilarity+0x888>)
 800ca4e:	edc3 7a00 	vstr	s15, [r3]
////    ans = datasum / datasumsqrt;
//
//    ans_temp = datasum / datasumsqrt;
//==========================================================================================================================

    if(ansAvgCount  < 770)//avg. the CosineSimilarity valve at 5min to update
 800ca52:	4b1f      	ldr	r3, [pc, #124]	; (800cad0 <Calculate_CosineSimilarity+0x890>)
 800ca54:	881b      	ldrh	r3, [r3, #0]
 800ca56:	f240 3201 	movw	r2, #769	; 0x301
 800ca5a:	4293      	cmp	r3, r2
 800ca5c:	d811      	bhi.n	800ca82 <Calculate_CosineSimilarity+0x842>
//    if(ansAvgCount  < 10)//avg. the CosineSimilarity valve at 3sec to update
    {
    	ansAvgCount++;
 800ca5e:	4b1c      	ldr	r3, [pc, #112]	; (800cad0 <Calculate_CosineSimilarity+0x890>)
 800ca60:	881b      	ldrh	r3, [r3, #0]
 800ca62:	3301      	adds	r3, #1
 800ca64:	b29a      	uxth	r2, r3
 800ca66:	4b1a      	ldr	r3, [pc, #104]	; (800cad0 <Calculate_CosineSimilarity+0x890>)
 800ca68:	801a      	strh	r2, [r3, #0]
    	ans_temp_sum += ans_temp;
 800ca6a:	4b1a      	ldr	r3, [pc, #104]	; (800cad4 <Calculate_CosineSimilarity+0x894>)
 800ca6c:	ed93 7a00 	vldr	s14, [r3]
 800ca70:	4b15      	ldr	r3, [pc, #84]	; (800cac8 <Calculate_CosineSimilarity+0x888>)
 800ca72:	edd3 7a00 	vldr	s15, [r3]
 800ca76:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ca7a:	4b16      	ldr	r3, [pc, #88]	; (800cad4 <Calculate_CosineSimilarity+0x894>)
 800ca7c:	edc3 7a00 	vstr	s15, [r3]
 800ca80:	e014      	b.n	800caac <Calculate_CosineSimilarity+0x86c>
    }
    else
	{
    	ans = ans_temp_sum/ansAvgCount;
 800ca82:	4b14      	ldr	r3, [pc, #80]	; (800cad4 <Calculate_CosineSimilarity+0x894>)
 800ca84:	edd3 6a00 	vldr	s13, [r3]
 800ca88:	4b11      	ldr	r3, [pc, #68]	; (800cad0 <Calculate_CosineSimilarity+0x890>)
 800ca8a:	881b      	ldrh	r3, [r3, #0]
 800ca8c:	ee07 3a90 	vmov	s15, r3
 800ca90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ca94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca98:	4b0f      	ldr	r3, [pc, #60]	; (800cad8 <Calculate_CosineSimilarity+0x898>)
 800ca9a:	edc3 7a00 	vstr	s15, [r3]
    	ans_temp_sum = 0;
 800ca9e:	4b0d      	ldr	r3, [pc, #52]	; (800cad4 <Calculate_CosineSimilarity+0x894>)
 800caa0:	f04f 0200 	mov.w	r2, #0
 800caa4:	601a      	str	r2, [r3, #0]
    	ansAvgCount = 0;
 800caa6:	4b0a      	ldr	r3, [pc, #40]	; (800cad0 <Calculate_CosineSimilarity+0x890>)
 800caa8:	2200      	movs	r2, #0
 800caaa:	801a      	strh	r2, [r3, #0]

	}
    return ans;
 800caac:	4b0a      	ldr	r3, [pc, #40]	; (800cad8 <Calculate_CosineSimilarity+0x898>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	46b5      	mov	sp, r6
 800cab2:	ee07 3a90 	vmov	s15, r3

}
 800cab6:	eeb0 0a67 	vmov.f32	s0, s15
 800caba:	37ec      	adds	r7, #236	; 0xec
 800cabc:	46bd      	mov	sp, r7
 800cabe:	ecbd 8b02 	vpop	{d8}
 800cac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cac6:	bf00      	nop
 800cac8:	20000654 	.word	0x20000654
 800cacc:	00000000 	.word	0x00000000
 800cad0:	2000064c 	.word	0x2000064c
 800cad4:	20000658 	.word	0x20000658
 800cad8:	20000650 	.word	0x20000650

0800cadc <quick_sort>:

//Wayne-- 20220301
void quick_sort(float arr[], float arr2[], int first_index, int last_index) {
 800cadc:	b580      	push	{r7, lr}
 800cade:	b088      	sub	sp, #32
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	60f8      	str	r0, [r7, #12]
 800cae4:	60b9      	str	r1, [r7, #8]
 800cae6:	607a      	str	r2, [r7, #4]
 800cae8:	603b      	str	r3, [r7, #0]
  // 宣告索引變數
  int pivotIndex, index_a, index_b;
  float temp;
  if (first_index < last_index) {
 800caea:	687a      	ldr	r2, [r7, #4]
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	429a      	cmp	r2, r3
 800caf0:	f280 80a2 	bge.w	800cc38 <quick_sort+0x15c>
    // 以第一個元素作為基準
    pivotIndex = last_index;
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	617b      	str	r3, [r7, #20]
    index_a = first_index;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	61fb      	str	r3, [r7, #28]
    index_b = last_index;
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	61bb      	str	r3, [r7, #24]

    // 以遞減方式排序
    while (index_a < index_b) {
 800cb00:	e05c      	b.n	800cbbc <quick_sort+0xe0>
      //while (arr[index_a] >= arr[pivotIndex] && index_a < last_index) {
    	while (arr[index_a] > arr[pivotIndex] && index_a < last_index) {
        index_a++;
 800cb02:	69fb      	ldr	r3, [r7, #28]
 800cb04:	3301      	adds	r3, #1
 800cb06:	61fb      	str	r3, [r7, #28]
    	while (arr[index_a] > arr[pivotIndex] && index_a < last_index) {
 800cb08:	69fb      	ldr	r3, [r7, #28]
 800cb0a:	009b      	lsls	r3, r3, #2
 800cb0c:	68fa      	ldr	r2, [r7, #12]
 800cb0e:	4413      	add	r3, r2
 800cb10:	ed93 7a00 	vldr	s14, [r3]
 800cb14:	697b      	ldr	r3, [r7, #20]
 800cb16:	009b      	lsls	r3, r3, #2
 800cb18:	68fa      	ldr	r2, [r7, #12]
 800cb1a:	4413      	add	r3, r2
 800cb1c:	edd3 7a00 	vldr	s15, [r3]
 800cb20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cb24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb28:	dd03      	ble.n	800cb32 <quick_sort+0x56>
 800cb2a:	69fa      	ldr	r2, [r7, #28]
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	429a      	cmp	r2, r3
 800cb30:	dbe7      	blt.n	800cb02 <quick_sort+0x26>
      }
      //while (arr[index_b] < arr[pivotIndex] && index_b > index_a) {
      while (arr[index_b] <= arr[pivotIndex]) {
 800cb32:	e002      	b.n	800cb3a <quick_sort+0x5e>
//    	  if (index_b == 0)
//    	   break;

        index_b--;
 800cb34:	69bb      	ldr	r3, [r7, #24]
 800cb36:	3b01      	subs	r3, #1
 800cb38:	61bb      	str	r3, [r7, #24]
      while (arr[index_b] <= arr[pivotIndex]) {
 800cb3a:	69bb      	ldr	r3, [r7, #24]
 800cb3c:	009b      	lsls	r3, r3, #2
 800cb3e:	68fa      	ldr	r2, [r7, #12]
 800cb40:	4413      	add	r3, r2
 800cb42:	ed93 7a00 	vldr	s14, [r3]
 800cb46:	697b      	ldr	r3, [r7, #20]
 800cb48:	009b      	lsls	r3, r3, #2
 800cb4a:	68fa      	ldr	r2, [r7, #12]
 800cb4c:	4413      	add	r3, r2
 800cb4e:	edd3 7a00 	vldr	s15, [r3]
 800cb52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cb56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb5a:	d9eb      	bls.n	800cb34 <quick_sort+0x58>
      }

      if (index_a < index_b) {
 800cb5c:	69fa      	ldr	r2, [r7, #28]
 800cb5e:	69bb      	ldr	r3, [r7, #24]
 800cb60:	429a      	cmp	r2, r3
 800cb62:	da2b      	bge.n	800cbbc <quick_sort+0xe0>
        // 交換元素
        temp = arr[index_a];
 800cb64:	69fb      	ldr	r3, [r7, #28]
 800cb66:	009b      	lsls	r3, r3, #2
 800cb68:	68fa      	ldr	r2, [r7, #12]
 800cb6a:	4413      	add	r3, r2
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	613b      	str	r3, [r7, #16]
        arr[index_a] = arr[index_b];
 800cb70:	69bb      	ldr	r3, [r7, #24]
 800cb72:	009b      	lsls	r3, r3, #2
 800cb74:	68fa      	ldr	r2, [r7, #12]
 800cb76:	441a      	add	r2, r3
 800cb78:	69fb      	ldr	r3, [r7, #28]
 800cb7a:	009b      	lsls	r3, r3, #2
 800cb7c:	68f9      	ldr	r1, [r7, #12]
 800cb7e:	440b      	add	r3, r1
 800cb80:	6812      	ldr	r2, [r2, #0]
 800cb82:	601a      	str	r2, [r3, #0]
        arr[index_b] = temp;
 800cb84:	69bb      	ldr	r3, [r7, #24]
 800cb86:	009b      	lsls	r3, r3, #2
 800cb88:	68fa      	ldr	r2, [r7, #12]
 800cb8a:	4413      	add	r3, r2
 800cb8c:	693a      	ldr	r2, [r7, #16]
 800cb8e:	601a      	str	r2, [r3, #0]
        //swap arr2
        temp = arr2[index_a];
 800cb90:	69fb      	ldr	r3, [r7, #28]
 800cb92:	009b      	lsls	r3, r3, #2
 800cb94:	68ba      	ldr	r2, [r7, #8]
 800cb96:	4413      	add	r3, r2
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	613b      	str	r3, [r7, #16]
        arr2[index_a] = arr2[index_b];
 800cb9c:	69bb      	ldr	r3, [r7, #24]
 800cb9e:	009b      	lsls	r3, r3, #2
 800cba0:	68ba      	ldr	r2, [r7, #8]
 800cba2:	441a      	add	r2, r3
 800cba4:	69fb      	ldr	r3, [r7, #28]
 800cba6:	009b      	lsls	r3, r3, #2
 800cba8:	68b9      	ldr	r1, [r7, #8]
 800cbaa:	440b      	add	r3, r1
 800cbac:	6812      	ldr	r2, [r2, #0]
 800cbae:	601a      	str	r2, [r3, #0]
        arr2[index_b] = temp;
 800cbb0:	69bb      	ldr	r3, [r7, #24]
 800cbb2:	009b      	lsls	r3, r3, #2
 800cbb4:	68ba      	ldr	r2, [r7, #8]
 800cbb6:	4413      	add	r3, r2
 800cbb8:	693a      	ldr	r2, [r7, #16]
 800cbba:	601a      	str	r2, [r3, #0]
    while (index_a < index_b) {
 800cbbc:	69fa      	ldr	r2, [r7, #28]
 800cbbe:	69bb      	ldr	r3, [r7, #24]
 800cbc0:	429a      	cmp	r2, r3
 800cbc2:	dba1      	blt.n	800cb08 <quick_sort+0x2c>
      }
    }

    // 交換基準元素與 index_a 元素
    temp = arr[pivotIndex];
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	009b      	lsls	r3, r3, #2
 800cbc8:	68fa      	ldr	r2, [r7, #12]
 800cbca:	4413      	add	r3, r2
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	613b      	str	r3, [r7, #16]
    arr[pivotIndex] = arr[index_a];
 800cbd0:	69fb      	ldr	r3, [r7, #28]
 800cbd2:	009b      	lsls	r3, r3, #2
 800cbd4:	68fa      	ldr	r2, [r7, #12]
 800cbd6:	441a      	add	r2, r3
 800cbd8:	697b      	ldr	r3, [r7, #20]
 800cbda:	009b      	lsls	r3, r3, #2
 800cbdc:	68f9      	ldr	r1, [r7, #12]
 800cbde:	440b      	add	r3, r1
 800cbe0:	6812      	ldr	r2, [r2, #0]
 800cbe2:	601a      	str	r2, [r3, #0]
    arr[index_a] = temp;
 800cbe4:	69fb      	ldr	r3, [r7, #28]
 800cbe6:	009b      	lsls	r3, r3, #2
 800cbe8:	68fa      	ldr	r2, [r7, #12]
 800cbea:	4413      	add	r3, r2
 800cbec:	693a      	ldr	r2, [r7, #16]
 800cbee:	601a      	str	r2, [r3, #0]
    //swap arr2
    temp = arr2[pivotIndex];
 800cbf0:	697b      	ldr	r3, [r7, #20]
 800cbf2:	009b      	lsls	r3, r3, #2
 800cbf4:	68ba      	ldr	r2, [r7, #8]
 800cbf6:	4413      	add	r3, r2
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	613b      	str	r3, [r7, #16]
    arr2[pivotIndex] = arr2[index_a];
 800cbfc:	69fb      	ldr	r3, [r7, #28]
 800cbfe:	009b      	lsls	r3, r3, #2
 800cc00:	68ba      	ldr	r2, [r7, #8]
 800cc02:	441a      	add	r2, r3
 800cc04:	697b      	ldr	r3, [r7, #20]
 800cc06:	009b      	lsls	r3, r3, #2
 800cc08:	68b9      	ldr	r1, [r7, #8]
 800cc0a:	440b      	add	r3, r1
 800cc0c:	6812      	ldr	r2, [r2, #0]
 800cc0e:	601a      	str	r2, [r3, #0]
    arr2[index_a] = temp;
 800cc10:	69fb      	ldr	r3, [r7, #28]
 800cc12:	009b      	lsls	r3, r3, #2
 800cc14:	68ba      	ldr	r2, [r7, #8]
 800cc16:	4413      	add	r3, r2
 800cc18:	693a      	ldr	r2, [r7, #16]
 800cc1a:	601a      	str	r2, [r3, #0]

    // 遞迴呼叫快速排序法函數
    quick_sort(arr, arr2, first_index, index_a - 1);
 800cc1c:	69fb      	ldr	r3, [r7, #28]
 800cc1e:	3b01      	subs	r3, #1
 800cc20:	687a      	ldr	r2, [r7, #4]
 800cc22:	68b9      	ldr	r1, [r7, #8]
 800cc24:	68f8      	ldr	r0, [r7, #12]
 800cc26:	f7ff ff59 	bl	800cadc <quick_sort>
    quick_sort(arr, arr2, index_a + 1, last_index);
 800cc2a:	69fb      	ldr	r3, [r7, #28]
 800cc2c:	1c5a      	adds	r2, r3, #1
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	68b9      	ldr	r1, [r7, #8]
 800cc32:	68f8      	ldr	r0, [r7, #12]
 800cc34:	f7ff ff52 	bl	800cadc <quick_sort>
  }
}
 800cc38:	bf00      	nop
 800cc3a:	3720      	adds	r7, #32
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd80      	pop	{r7, pc}

0800cc40 <quick_sort_ascending>:
//Wayne-- 20220419 遞增排序
void quick_sort_ascending(float arr[], float arr2[], int first_index, int last_index) {
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b088      	sub	sp, #32
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	60f8      	str	r0, [r7, #12]
 800cc48:	60b9      	str	r1, [r7, #8]
 800cc4a:	607a      	str	r2, [r7, #4]
 800cc4c:	603b      	str	r3, [r7, #0]
  // 宣告索引變數
  int pivotIndex , index_a, index_b;
  float temp;
  if (first_index < last_index) {
 800cc4e:	687a      	ldr	r2, [r7, #4]
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	429a      	cmp	r2, r3
 800cc54:	f280 80a2 	bge.w	800cd9c <quick_sort_ascending+0x15c>
    // 以第一個元素作為基準
    pivotIndex = first_index;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	617b      	str	r3, [r7, #20]
    index_a = first_index;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	61fb      	str	r3, [r7, #28]
    index_b = last_index;
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	61bb      	str	r3, [r7, #24]

    // 以遞增方式排序
    while (index_a < index_b) {
 800cc64:	e05c      	b.n	800cd20 <quick_sort_ascending+0xe0>
      while (arr[index_a] <= arr[pivotIndex] && index_a < last_index) {
        index_a++;
 800cc66:	69fb      	ldr	r3, [r7, #28]
 800cc68:	3301      	adds	r3, #1
 800cc6a:	61fb      	str	r3, [r7, #28]
      while (arr[index_a] <= arr[pivotIndex] && index_a < last_index) {
 800cc6c:	69fb      	ldr	r3, [r7, #28]
 800cc6e:	009b      	lsls	r3, r3, #2
 800cc70:	68fa      	ldr	r2, [r7, #12]
 800cc72:	4413      	add	r3, r2
 800cc74:	ed93 7a00 	vldr	s14, [r3]
 800cc78:	697b      	ldr	r3, [r7, #20]
 800cc7a:	009b      	lsls	r3, r3, #2
 800cc7c:	68fa      	ldr	r2, [r7, #12]
 800cc7e:	4413      	add	r3, r2
 800cc80:	edd3 7a00 	vldr	s15, [r3]
 800cc84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cc88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc8c:	d803      	bhi.n	800cc96 <quick_sort_ascending+0x56>
 800cc8e:	69fa      	ldr	r2, [r7, #28]
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	429a      	cmp	r2, r3
 800cc94:	dbe7      	blt.n	800cc66 <quick_sort_ascending+0x26>
      }
      while (arr[index_b] > arr[pivotIndex]) {
 800cc96:	e002      	b.n	800cc9e <quick_sort_ascending+0x5e>
        index_b--;
 800cc98:	69bb      	ldr	r3, [r7, #24]
 800cc9a:	3b01      	subs	r3, #1
 800cc9c:	61bb      	str	r3, [r7, #24]
      while (arr[index_b] > arr[pivotIndex]) {
 800cc9e:	69bb      	ldr	r3, [r7, #24]
 800cca0:	009b      	lsls	r3, r3, #2
 800cca2:	68fa      	ldr	r2, [r7, #12]
 800cca4:	4413      	add	r3, r2
 800cca6:	ed93 7a00 	vldr	s14, [r3]
 800ccaa:	697b      	ldr	r3, [r7, #20]
 800ccac:	009b      	lsls	r3, r3, #2
 800ccae:	68fa      	ldr	r2, [r7, #12]
 800ccb0:	4413      	add	r3, r2
 800ccb2:	edd3 7a00 	vldr	s15, [r3]
 800ccb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ccba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccbe:	dceb      	bgt.n	800cc98 <quick_sort_ascending+0x58>
      }

      if (index_a < index_b) {
 800ccc0:	69fa      	ldr	r2, [r7, #28]
 800ccc2:	69bb      	ldr	r3, [r7, #24]
 800ccc4:	429a      	cmp	r2, r3
 800ccc6:	da2b      	bge.n	800cd20 <quick_sort_ascending+0xe0>
        // 交換元素
        temp = arr[index_a];
 800ccc8:	69fb      	ldr	r3, [r7, #28]
 800ccca:	009b      	lsls	r3, r3, #2
 800cccc:	68fa      	ldr	r2, [r7, #12]
 800ccce:	4413      	add	r3, r2
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	613b      	str	r3, [r7, #16]
        arr[index_a] = arr[index_b];
 800ccd4:	69bb      	ldr	r3, [r7, #24]
 800ccd6:	009b      	lsls	r3, r3, #2
 800ccd8:	68fa      	ldr	r2, [r7, #12]
 800ccda:	441a      	add	r2, r3
 800ccdc:	69fb      	ldr	r3, [r7, #28]
 800ccde:	009b      	lsls	r3, r3, #2
 800cce0:	68f9      	ldr	r1, [r7, #12]
 800cce2:	440b      	add	r3, r1
 800cce4:	6812      	ldr	r2, [r2, #0]
 800cce6:	601a      	str	r2, [r3, #0]
        arr[index_b] = temp;
 800cce8:	69bb      	ldr	r3, [r7, #24]
 800ccea:	009b      	lsls	r3, r3, #2
 800ccec:	68fa      	ldr	r2, [r7, #12]
 800ccee:	4413      	add	r3, r2
 800ccf0:	693a      	ldr	r2, [r7, #16]
 800ccf2:	601a      	str	r2, [r3, #0]
        //swap arr2
        temp = arr2[index_a];
 800ccf4:	69fb      	ldr	r3, [r7, #28]
 800ccf6:	009b      	lsls	r3, r3, #2
 800ccf8:	68ba      	ldr	r2, [r7, #8]
 800ccfa:	4413      	add	r3, r2
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	613b      	str	r3, [r7, #16]
        arr2[index_a] = arr2[index_b];
 800cd00:	69bb      	ldr	r3, [r7, #24]
 800cd02:	009b      	lsls	r3, r3, #2
 800cd04:	68ba      	ldr	r2, [r7, #8]
 800cd06:	441a      	add	r2, r3
 800cd08:	69fb      	ldr	r3, [r7, #28]
 800cd0a:	009b      	lsls	r3, r3, #2
 800cd0c:	68b9      	ldr	r1, [r7, #8]
 800cd0e:	440b      	add	r3, r1
 800cd10:	6812      	ldr	r2, [r2, #0]
 800cd12:	601a      	str	r2, [r3, #0]
        arr2[index_b] = temp;
 800cd14:	69bb      	ldr	r3, [r7, #24]
 800cd16:	009b      	lsls	r3, r3, #2
 800cd18:	68ba      	ldr	r2, [r7, #8]
 800cd1a:	4413      	add	r3, r2
 800cd1c:	693a      	ldr	r2, [r7, #16]
 800cd1e:	601a      	str	r2, [r3, #0]
    while (index_a < index_b) {
 800cd20:	69fa      	ldr	r2, [r7, #28]
 800cd22:	69bb      	ldr	r3, [r7, #24]
 800cd24:	429a      	cmp	r2, r3
 800cd26:	dba1      	blt.n	800cc6c <quick_sort_ascending+0x2c>
      }
    }

    // 交換基準元素與 index_b 元素
    temp = arr[pivotIndex];
 800cd28:	697b      	ldr	r3, [r7, #20]
 800cd2a:	009b      	lsls	r3, r3, #2
 800cd2c:	68fa      	ldr	r2, [r7, #12]
 800cd2e:	4413      	add	r3, r2
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	613b      	str	r3, [r7, #16]
    arr[pivotIndex] = arr[index_b];
 800cd34:	69bb      	ldr	r3, [r7, #24]
 800cd36:	009b      	lsls	r3, r3, #2
 800cd38:	68fa      	ldr	r2, [r7, #12]
 800cd3a:	441a      	add	r2, r3
 800cd3c:	697b      	ldr	r3, [r7, #20]
 800cd3e:	009b      	lsls	r3, r3, #2
 800cd40:	68f9      	ldr	r1, [r7, #12]
 800cd42:	440b      	add	r3, r1
 800cd44:	6812      	ldr	r2, [r2, #0]
 800cd46:	601a      	str	r2, [r3, #0]
    arr[index_b] = temp;
 800cd48:	69bb      	ldr	r3, [r7, #24]
 800cd4a:	009b      	lsls	r3, r3, #2
 800cd4c:	68fa      	ldr	r2, [r7, #12]
 800cd4e:	4413      	add	r3, r2
 800cd50:	693a      	ldr	r2, [r7, #16]
 800cd52:	601a      	str	r2, [r3, #0]
    //swap arr2
    temp = arr2[pivotIndex];
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	009b      	lsls	r3, r3, #2
 800cd58:	68ba      	ldr	r2, [r7, #8]
 800cd5a:	4413      	add	r3, r2
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	613b      	str	r3, [r7, #16]
    arr2[pivotIndex] = arr2[index_b];
 800cd60:	69bb      	ldr	r3, [r7, #24]
 800cd62:	009b      	lsls	r3, r3, #2
 800cd64:	68ba      	ldr	r2, [r7, #8]
 800cd66:	441a      	add	r2, r3
 800cd68:	697b      	ldr	r3, [r7, #20]
 800cd6a:	009b      	lsls	r3, r3, #2
 800cd6c:	68b9      	ldr	r1, [r7, #8]
 800cd6e:	440b      	add	r3, r1
 800cd70:	6812      	ldr	r2, [r2, #0]
 800cd72:	601a      	str	r2, [r3, #0]
    arr2[index_b] = temp;
 800cd74:	69bb      	ldr	r3, [r7, #24]
 800cd76:	009b      	lsls	r3, r3, #2
 800cd78:	68ba      	ldr	r2, [r7, #8]
 800cd7a:	4413      	add	r3, r2
 800cd7c:	693a      	ldr	r2, [r7, #16]
 800cd7e:	601a      	str	r2, [r3, #0]

    // 遞迴呼叫快速排序法函數
    quick_sort_ascending(arr, arr2, first_index, index_b - 1);
 800cd80:	69bb      	ldr	r3, [r7, #24]
 800cd82:	3b01      	subs	r3, #1
 800cd84:	687a      	ldr	r2, [r7, #4]
 800cd86:	68b9      	ldr	r1, [r7, #8]
 800cd88:	68f8      	ldr	r0, [r7, #12]
 800cd8a:	f7ff ff59 	bl	800cc40 <quick_sort_ascending>
    quick_sort_ascending(arr, arr2, index_b + 1, last_index);
 800cd8e:	69bb      	ldr	r3, [r7, #24]
 800cd90:	1c5a      	adds	r2, r3, #1
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	68b9      	ldr	r1, [r7, #8]
 800cd96:	68f8      	ldr	r0, [r7, #12]
 800cd98:	f7ff ff52 	bl	800cc40 <quick_sort_ascending>
  }
}
 800cd9c:	bf00      	nop
 800cd9e:	3720      	adds	r7, #32
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}

0800cda4 <delay_init>:
static uint16_t fac_ms=0;//ms延時倍乘數
//初始化延遲函式
//SYSTICK的時鐘固定為HCLK時鐘的1/8
//SYSCLK:系統時鐘
void delay_init(uint8_t SYSCLK)
{
 800cda4:	b480      	push	{r7}
 800cda6:	b083      	sub	sp, #12
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	4603      	mov	r3, r0
 800cdac:	71fb      	strb	r3, [r7, #7]
	SysTick->CTRL&=0xfffffffb;//bit2清空,選擇外部時鐘  HCLK/8
 800cdae:	4b0e      	ldr	r3, [pc, #56]	; (800cde8 <delay_init+0x44>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	4a0d      	ldr	r2, [pc, #52]	; (800cde8 <delay_init+0x44>)
 800cdb4:	f023 0304 	bic.w	r3, r3, #4
 800cdb8:	6013      	str	r3, [r2, #0]
	fac_us=SYSCLK/8;
 800cdba:	79fb      	ldrb	r3, [r7, #7]
 800cdbc:	08db      	lsrs	r3, r3, #3
 800cdbe:	b2da      	uxtb	r2, r3
 800cdc0:	4b0a      	ldr	r3, [pc, #40]	; (800cdec <delay_init+0x48>)
 800cdc2:	701a      	strb	r2, [r3, #0]
	fac_ms=(uint16_t)fac_us*1000;
 800cdc4:	4b09      	ldr	r3, [pc, #36]	; (800cdec <delay_init+0x48>)
 800cdc6:	781b      	ldrb	r3, [r3, #0]
 800cdc8:	b29b      	uxth	r3, r3
 800cdca:	461a      	mov	r2, r3
 800cdcc:	0152      	lsls	r2, r2, #5
 800cdce:	1ad2      	subs	r2, r2, r3
 800cdd0:	0092      	lsls	r2, r2, #2
 800cdd2:	4413      	add	r3, r2
 800cdd4:	00db      	lsls	r3, r3, #3
 800cdd6:	b29a      	uxth	r2, r3
 800cdd8:	4b05      	ldr	r3, [pc, #20]	; (800cdf0 <delay_init+0x4c>)
 800cdda:	801a      	strh	r2, [r3, #0]
}
 800cddc:	bf00      	nop
 800cdde:	370c      	adds	r7, #12
 800cde0:	46bd      	mov	sp, r7
 800cde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde6:	4770      	bx	lr
 800cde8:	e000e010 	.word	0xe000e010
 800cdec:	2000065c 	.word	0x2000065c
 800cdf0:	2000065e 	.word	0x2000065e

0800cdf4 <delay_ms>:

void delay_ms(uint16_t nms)
{
 800cdf4:	b480      	push	{r7}
 800cdf6:	b085      	sub	sp, #20
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	80fb      	strh	r3, [r7, #6]
	uint32_t temp;
	SysTick->LOAD=(uint32_t)nms*fac_ms;//時間載入(SysTick->LOAD為24bit)
 800cdfe:	88fb      	ldrh	r3, [r7, #6]
 800ce00:	4a14      	ldr	r2, [pc, #80]	; (800ce54 <delay_ms+0x60>)
 800ce02:	8812      	ldrh	r2, [r2, #0]
 800ce04:	4611      	mov	r1, r2
 800ce06:	4a14      	ldr	r2, [pc, #80]	; (800ce58 <delay_ms+0x64>)
 800ce08:	fb01 f303 	mul.w	r3, r1, r3
 800ce0c:	6053      	str	r3, [r2, #4]
	SysTick->VAL =0x00;           //清空計數器
 800ce0e:	4b12      	ldr	r3, [pc, #72]	; (800ce58 <delay_ms+0x64>)
 800ce10:	2200      	movs	r2, #0
 800ce12:	609a      	str	r2, [r3, #8]
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk;          //開始倒數
 800ce14:	4b10      	ldr	r3, [pc, #64]	; (800ce58 <delay_ms+0x64>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	4a0f      	ldr	r2, [pc, #60]	; (800ce58 <delay_ms+0x64>)
 800ce1a:	f043 0301 	orr.w	r3, r3, #1
 800ce1e:	6013      	str	r3, [r2, #0]
	do
	{
		temp=SysTick->CTRL;
 800ce20:	4b0d      	ldr	r3, [pc, #52]	; (800ce58 <delay_ms+0x64>)
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	60fb      	str	r3, [r7, #12]
	}
	while(temp&0x01&&!(temp&(1<<16)));//等待時間到達
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	f003 0301 	and.w	r3, r3, #1
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d004      	beq.n	800ce3a <delay_ms+0x46>
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d0f2      	beq.n	800ce20 <delay_ms+0x2c>
	SysTick->CTRL=0x00;       //關閉計數器
 800ce3a:	4b07      	ldr	r3, [pc, #28]	; (800ce58 <delay_ms+0x64>)
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	601a      	str	r2, [r3, #0]
	SysTick->VAL =0X00;       //清空計數器
 800ce40:	4b05      	ldr	r3, [pc, #20]	; (800ce58 <delay_ms+0x64>)
 800ce42:	2200      	movs	r2, #0
 800ce44:	609a      	str	r2, [r3, #8]
}
 800ce46:	bf00      	nop
 800ce48:	3714      	adds	r7, #20
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce50:	4770      	bx	lr
 800ce52:	bf00      	nop
 800ce54:	2000065e 	.word	0x2000065e
 800ce58:	e000e010 	.word	0xe000e010

0800ce5c <delay_us>:


//延時nus
//nus為要延時的us數.
void delay_us(uint32_t nus)
{
 800ce5c:	b480      	push	{r7}
 800ce5e:	b085      	sub	sp, #20
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	SysTick->LOAD=nus*fac_us; //時間載入
 800ce64:	4b14      	ldr	r3, [pc, #80]	; (800ceb8 <delay_us+0x5c>)
 800ce66:	781b      	ldrb	r3, [r3, #0]
 800ce68:	4619      	mov	r1, r3
 800ce6a:	4a14      	ldr	r2, [pc, #80]	; (800cebc <delay_us+0x60>)
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	fb01 f303 	mul.w	r3, r1, r3
 800ce72:	6053      	str	r3, [r2, #4]
	SysTick->VAL=0x00;        //清空計數器
 800ce74:	4b11      	ldr	r3, [pc, #68]	; (800cebc <delay_us+0x60>)
 800ce76:	2200      	movs	r2, #0
 800ce78:	609a      	str	r2, [r3, #8]
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk;      //開始倒數
 800ce7a:	4b10      	ldr	r3, [pc, #64]	; (800cebc <delay_us+0x60>)
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	4a0f      	ldr	r2, [pc, #60]	; (800cebc <delay_us+0x60>)
 800ce80:	f043 0301 	orr.w	r3, r3, #1
 800ce84:	6013      	str	r3, [r2, #0]
	do
	{
		temp=SysTick->CTRL;
 800ce86:	4b0d      	ldr	r3, [pc, #52]	; (800cebc <delay_us+0x60>)
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	60fb      	str	r3, [r7, #12]
	}
	while(temp&0x01&&!(temp&(1<<16)));//等待時間到達
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	f003 0301 	and.w	r3, r3, #1
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d004      	beq.n	800cea0 <delay_us+0x44>
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d0f2      	beq.n	800ce86 <delay_us+0x2a>
	SysTick->CTRL=0x00;       //關閉計數器
 800cea0:	4b06      	ldr	r3, [pc, #24]	; (800cebc <delay_us+0x60>)
 800cea2:	2200      	movs	r2, #0
 800cea4:	601a      	str	r2, [r3, #0]
	SysTick->VAL =0X00;       //清空計數器
 800cea6:	4b05      	ldr	r3, [pc, #20]	; (800cebc <delay_us+0x60>)
 800cea8:	2200      	movs	r2, #0
 800ceaa:	609a      	str	r2, [r3, #8]
}
 800ceac:	bf00      	nop
 800ceae:	3714      	adds	r7, #20
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb6:	4770      	bx	lr
 800ceb8:	2000065c 	.word	0x2000065c
 800cebc:	e000e010 	.word	0xe000e010

0800cec0 <TM_Delay_Init>:

uint32_t multiplier;

void TM_Delay_Init(void) {
 800cec0:	b480      	push	{r7}
 800cec2:	af00      	add	r7, sp, #0
	/* While loop takes 4 cycles */
	/* For 1 us delay, we need to divide with 4M */
	multiplier = 122000000 / 4000000;
 800cec4:	4b03      	ldr	r3, [pc, #12]	; (800ced4 <TM_Delay_Init+0x14>)
 800cec6:	221e      	movs	r2, #30
 800cec8:	601a      	str	r2, [r3, #0]
}
 800ceca:	bf00      	nop
 800cecc:	46bd      	mov	sp, r7
 800cece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced2:	4770      	bx	lr
 800ced4:	20000660 	.word	0x20000660

0800ced8 <TM_DelayMicros>:

void TM_DelayMicros(uint32_t micros) {
 800ced8:	b480      	push	{r7}
 800ceda:	b083      	sub	sp, #12
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
	/* Multiply micros with multipler */
	/* Substract 10 */
	micros = micros * multiplier - 10;
 800cee0:	4b09      	ldr	r3, [pc, #36]	; (800cf08 <TM_DelayMicros+0x30>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	687a      	ldr	r2, [r7, #4]
 800cee6:	fb02 f303 	mul.w	r3, r2, r3
 800ceea:	3b0a      	subs	r3, #10
 800ceec:	607b      	str	r3, [r7, #4]
	/* 4 cycles for one loop */
	while (micros--);
 800ceee:	bf00      	nop
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	1e5a      	subs	r2, r3, #1
 800cef4:	607a      	str	r2, [r7, #4]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d1fa      	bne.n	800cef0 <TM_DelayMicros+0x18>
}
 800cefa:	bf00      	nop
 800cefc:	bf00      	nop
 800cefe:	370c      	adds	r7, #12
 800cf00:	46bd      	mov	sp, r7
 800cf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf06:	4770      	bx	lr
 800cf08:	20000660 	.word	0x20000660

0800cf0c <TM_DelayMillis>:

void TM_DelayMillis(uint32_t millis) {
 800cf0c:	b480      	push	{r7}
 800cf0e:	b083      	sub	sp, #12
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
	/* Multiply millis with multipler */
	/* Substract 10 */
	millis = 1000 * millis * multiplier - 10;
 800cf14:	4b0b      	ldr	r3, [pc, #44]	; (800cf44 <TM_DelayMillis+0x38>)
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	687a      	ldr	r2, [r7, #4]
 800cf1a:	fb02 f303 	mul.w	r3, r2, r3
 800cf1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cf22:	fb02 f303 	mul.w	r3, r2, r3
 800cf26:	3b0a      	subs	r3, #10
 800cf28:	607b      	str	r3, [r7, #4]
	/* 4 cycles for one loop */
	while (millis--);
 800cf2a:	bf00      	nop
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	1e5a      	subs	r2, r3, #1
 800cf30:	607a      	str	r2, [r7, #4]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d1fa      	bne.n	800cf2c <TM_DelayMillis+0x20>
}
 800cf36:	bf00      	nop
 800cf38:	bf00      	nop
 800cf3a:	370c      	adds	r7, #12
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf42:	4770      	bx	lr
 800cf44:	20000660 	.word	0x20000660

0800cf48 <SampleWave_Init>:
#include "main.h"
 float SampleWaveFFT[2048];
// float SampleWaveFFT2[2048];

void SampleWave_Init(void)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	f5ad 4d80 	sub.w	sp, sp, #16384	; 0x4000
 800cf4e:	b082      	sub	sp, #8
 800cf50:	af00      	add	r7, sp, #0
		0.002619, 0.001596, 0.002706, 0.003671, 0.003389, 0.001447, 0.001754, 0.002996,
		0.003289, 0.001258, 0.001897, 0.003043, 0.001135, 0.000342, 0.004517, 0.007371,
		0.001422, 0.001854, 0.000736, 0.000955, 0.002947, 0.003096, 0.002992, 0.001583,
	};
	*/
	float SampleWavedata[]=
 800cf52:	f242 0308 	movw	r3, #8200	; 0x2008
 800cf56:	443b      	add	r3, r7
 800cf58:	4a25      	ldr	r2, [pc, #148]	; (800cff0 <SampleWave_Init+0xa8>)
 800cf5a:	3b04      	subs	r3, #4
 800cf5c:	4611      	mov	r1, r2
 800cf5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800cf62:	4618      	mov	r0, r3
 800cf64:	f00b fd16 	bl	8018994 <memcpy>
		0.000606, 0.003306, 0.002197, 0.004676, 0.005563, 0.001883, 0.004023, 0.005384,
		0.003728, 0.002692, 0.003466, 0.003264, 0.005057, 0.002263, 0.001583, 0.004547,
		0.000999, 0.006412, 0.002367, 0.000825, 0.002050, 0.005127, 0.004042, 0.003072,
	};*/
	//===A195 data====
	float SampleWavedata2[]=
 800cf68:	f107 0308 	add.w	r3, r7, #8
 800cf6c:	4a21      	ldr	r2, [pc, #132]	; (800cff4 <SampleWave_Init+0xac>)
 800cf6e:	3b04      	subs	r3, #4
 800cf70:	4611      	mov	r1, r2
 800cf72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800cf76:	4618      	mov	r0, r3
 800cf78:	f00b fd0c 	bl	8018994 <memcpy>
		0.003289, 0.001258, 0.001897, 0.003043, 0.001135, 0.000342, 0.004517, 0.007371,
		0.001422, 0.001854, 0.000736, 0.000955, 0.002947, 0.003096, 0.002992, 0.001583,
	};


	samplesize=sizeof(SampleWavedata)/sizeof(float);
 800cf7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cf80:	f244 0204 	movw	r2, #16388	; 0x4004
 800cf84:	443a      	add	r2, r7
 800cf86:	8013      	strh	r3, [r2, #0]
	for( uint16_t i = 0; i <  samplesize; i++)
 800cf88:	2300      	movs	r3, #0
 800cf8a:	f244 0206 	movw	r2, #16390	; 0x4006
 800cf8e:	443a      	add	r2, r7
 800cf90:	8013      	strh	r3, [r2, #0]
 800cf92:	e01b      	b.n	800cfcc <SampleWave_Init+0x84>
	{
		SampleWaveFFT[i] = SampleWavedata[i];
 800cf94:	f244 0306 	movw	r3, #16390	; 0x4006
 800cf98:	443b      	add	r3, r7
 800cf9a:	881a      	ldrh	r2, [r3, #0]
 800cf9c:	f244 0306 	movw	r3, #16390	; 0x4006
 800cfa0:	443b      	add	r3, r7
 800cfa2:	881b      	ldrh	r3, [r3, #0]
 800cfa4:	f242 0108 	movw	r1, #8200	; 0x2008
 800cfa8:	4439      	add	r1, r7
 800cfaa:	0092      	lsls	r2, r2, #2
 800cfac:	440a      	add	r2, r1
 800cfae:	3a04      	subs	r2, #4
 800cfb0:	6812      	ldr	r2, [r2, #0]
 800cfb2:	4911      	ldr	r1, [pc, #68]	; (800cff8 <SampleWave_Init+0xb0>)
 800cfb4:	009b      	lsls	r3, r3, #2
 800cfb6:	440b      	add	r3, r1
 800cfb8:	601a      	str	r2, [r3, #0]
	for( uint16_t i = 0; i <  samplesize; i++)
 800cfba:	f244 0306 	movw	r3, #16390	; 0x4006
 800cfbe:	443b      	add	r3, r7
 800cfc0:	881b      	ldrh	r3, [r3, #0]
 800cfc2:	3301      	adds	r3, #1
 800cfc4:	f244 0206 	movw	r2, #16390	; 0x4006
 800cfc8:	443a      	add	r2, r7
 800cfca:	8013      	strh	r3, [r2, #0]
 800cfcc:	f244 0306 	movw	r3, #16390	; 0x4006
 800cfd0:	443b      	add	r3, r7
 800cfd2:	881a      	ldrh	r2, [r3, #0]
 800cfd4:	f244 0304 	movw	r3, #16388	; 0x4004
 800cfd8:	443b      	add	r3, r7
 800cfda:	881b      	ldrh	r3, [r3, #0]
 800cfdc:	429a      	cmp	r2, r3
 800cfde:	d3d9      	bcc.n	800cf94 <SampleWave_Init+0x4c>
//		SampleWaveFFT2[i] = SampleWavedata2[i];
	}

}
 800cfe0:	bf00      	nop
 800cfe2:	bf00      	nop
 800cfe4:	f507 4780 	add.w	r7, r7, #16384	; 0x4000
 800cfe8:	3708      	adds	r7, #8
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd80      	pop	{r7, pc}
 800cfee:	bf00      	nop
 800cff0:	0801d778 	.word	0x0801d778
 800cff4:	0801f778 	.word	0x0801f778
 800cff8:	20000664 	.word	0x20000664

0800cffc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800cffc:	b480      	push	{r7}
 800cffe:	b085      	sub	sp, #20
 800d000:	af00      	add	r7, sp, #0
 800d002:	60f8      	str	r0, [r7, #12]
 800d004:	60b9      	str	r1, [r7, #8]
 800d006:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	4a07      	ldr	r2, [pc, #28]	; (800d028 <vApplicationGetIdleTaskMemory+0x2c>)
 800d00c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800d00e:	68bb      	ldr	r3, [r7, #8]
 800d010:	4a06      	ldr	r2, [pc, #24]	; (800d02c <vApplicationGetIdleTaskMemory+0x30>)
 800d012:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2280      	movs	r2, #128	; 0x80
 800d018:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800d01a:	bf00      	nop
 800d01c:	3714      	adds	r7, #20
 800d01e:	46bd      	mov	sp, r7
 800d020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d024:	4770      	bx	lr
 800d026:	bf00      	nop
 800d028:	20002664 	.word	0x20002664
 800d02c:	200026b8 	.word	0x200026b8

0800d030 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 800d030:	b480      	push	{r7}
 800d032:	b085      	sub	sp, #20
 800d034:	af00      	add	r7, sp, #0
 800d036:	60f8      	str	r0, [r7, #12]
 800d038:	60b9      	str	r1, [r7, #8]
 800d03a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	4a07      	ldr	r2, [pc, #28]	; (800d05c <vApplicationGetTimerTaskMemory+0x2c>)
 800d040:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800d042:	68bb      	ldr	r3, [r7, #8]
 800d044:	4a06      	ldr	r2, [pc, #24]	; (800d060 <vApplicationGetTimerTaskMemory+0x30>)
 800d046:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d04e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800d050:	bf00      	nop
 800d052:	3714      	adds	r7, #20
 800d054:	46bd      	mov	sp, r7
 800d056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05a:	4770      	bx	lr
 800d05c:	200028b8 	.word	0x200028b8
 800d060:	2000290c 	.word	0x2000290c

0800d064 <readIICEEPROM_2402C>:
 * TODO: IIC Function
 *
 *
 * */
void readIICEEPROM_2402C(void)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b084      	sub	sp, #16
 800d068:	af04      	add	r7, sp, #16
	  HAL_I2C_Mem_Read(&hi2c2, ADDR_24LCxx_Read, 0, I2C_MEMADD_SIZE_16BIT,ReadBufferEEPROM,BufferSize, 1000);
 800d06a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d06e:	9302      	str	r3, [sp, #8]
 800d070:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d074:	9301      	str	r3, [sp, #4]
 800d076:	4b05      	ldr	r3, [pc, #20]	; (800d08c <readIICEEPROM_2402C+0x28>)
 800d078:	9300      	str	r3, [sp, #0]
 800d07a:	2302      	movs	r3, #2
 800d07c:	2200      	movs	r2, #0
 800d07e:	21a1      	movs	r1, #161	; 0xa1
 800d080:	4803      	ldr	r0, [pc, #12]	; (800d090 <readIICEEPROM_2402C+0x2c>)
 800d082:	f003 ffdd 	bl	8011040 <HAL_I2C_Mem_Read>
}
 800d086:	bf00      	nop
 800d088:	46bd      	mov	sp, r7
 800d08a:	bd80      	pop	{r7, pc}
 800d08c:	20006fc8 	.word	0x20006fc8
 800d090:	20002d0c 	.word	0x20002d0c

0800d094 <initialBootloaderParameter>:


//2021/0201/George
//TODO: InitialParameter
void initialBootloaderParameter()
{
 800d094:	b580      	push	{r7, lr}
 800d096:	af00      	add	r7, sp, #0
	USARTBLE.RxCount=0;
 800d098:	4b05      	ldr	r3, [pc, #20]	; (800d0b0 <initialBootloaderParameter+0x1c>)
 800d09a:	2200      	movs	r2, #0
 800d09c:	605a      	str	r2, [r3, #4]
	HAL_UART_Receive_IT(&huart6, (uint8_t *)aRxBuffer, 1);
 800d09e:	2201      	movs	r2, #1
 800d0a0:	4904      	ldr	r1, [pc, #16]	; (800d0b4 <initialBootloaderParameter+0x20>)
 800d0a2:	4805      	ldr	r0, [pc, #20]	; (800d0b8 <initialBootloaderParameter+0x24>)
 800d0a4:	f006 fe8e 	bl	8013dc4 <HAL_UART_Receive_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 800d0a8:	b662      	cpsie	i
}
 800d0aa:	bf00      	nop
	__enable_irq();
}
 800d0ac:	bf00      	nop
 800d0ae:	bd80      	pop	{r7, pc}
 800d0b0:	200070e0 	.word	0x200070e0
 800d0b4:	20002f88 	.word	0x20002f88
 800d0b8:	20002e8c 	.word	0x20002e8c

0800d0bc <initialADS1256DataBuffer>:

//2021/0201/George
//TODO : Initialize ADS1256 data buffer size
void initialADS1256DataBuffer()
{
 800d0bc:	b480      	push	{r7}
 800d0be:	af00      	add	r7, sp, #0

	  dataLength = sizeof(dataRecive)/sizeof(float);
 800d0c0:	4b07      	ldr	r3, [pc, #28]	; (800d0e0 <initialADS1256DataBuffer+0x24>)
 800d0c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d0c6:	601a      	str	r2, [r3, #0]
	  ADS1256.data_index = 0;
 800d0c8:	4b06      	ldr	r3, [pc, #24]	; (800d0e4 <initialADS1256DataBuffer+0x28>)
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	601a      	str	r2, [r3, #0]
	  ADS1256.data_length = dataLength;
 800d0ce:	4b04      	ldr	r3, [pc, #16]	; (800d0e0 <initialADS1256DataBuffer+0x24>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	4a04      	ldr	r2, [pc, #16]	; (800d0e4 <initialADS1256DataBuffer+0x28>)
 800d0d4:	6053      	str	r3, [r2, #4]
}
 800d0d6:	bf00      	nop
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0de:	4770      	bx	lr
 800d0e0:	20002fb4 	.word	0x20002fb4
 800d0e4:	20002fbc 	.word	0x20002fbc

0800d0e8 <InitialSetFreqStatisticBand>:

//2021/0202/George
//TODO: Set freq band
void InitialSetFreqStatisticBand()
{
 800d0e8:	b480      	push	{r7}
 800d0ea:	af00      	add	r7, sp, #0
	//2021/0204/George
	//TODO:Total 3 setting frequency broadband parameter
	freqSettingValueList.range1.Max = 1000;
 800d0ec:	4b0d      	ldr	r3, [pc, #52]	; (800d124 <InitialSetFreqStatisticBand+0x3c>)
 800d0ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d0f2:	601a      	str	r2, [r3, #0]
	freqSettingValueList.range1.Min = 10;
 800d0f4:	4b0b      	ldr	r3, [pc, #44]	; (800d124 <InitialSetFreqStatisticBand+0x3c>)
 800d0f6:	220a      	movs	r2, #10
 800d0f8:	605a      	str	r2, [r3, #4]
	freqSettingValueList.range2.Max = 1000;
 800d0fa:	4b0a      	ldr	r3, [pc, #40]	; (800d124 <InitialSetFreqStatisticBand+0x3c>)
 800d0fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d100:	609a      	str	r2, [r3, #8]
	freqSettingValueList.range2.Min = 10;
 800d102:	4b08      	ldr	r3, [pc, #32]	; (800d124 <InitialSetFreqStatisticBand+0x3c>)
 800d104:	220a      	movs	r2, #10
 800d106:	60da      	str	r2, [r3, #12]
	freqSettingValueList.range3.Max = 5000;
 800d108:	4b06      	ldr	r3, [pc, #24]	; (800d124 <InitialSetFreqStatisticBand+0x3c>)
 800d10a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d10e:	611a      	str	r2, [r3, #16]
	freqSettingValueList.range3.Min = 1000;
 800d110:	4b04      	ldr	r3, [pc, #16]	; (800d124 <InitialSetFreqStatisticBand+0x3c>)
 800d112:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d116:	615a      	str	r2, [r3, #20]
}
 800d118:	bf00      	nop
 800d11a:	46bd      	mov	sp, r7
 800d11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d120:	4770      	bx	lr
 800d122:	bf00      	nop
 800d124:	20007320 	.word	0x20007320

0800d128 <InitialDelayFunction>:

//2021/0202/George
//TODO: Initialize delay systick
void InitialDelayFunction()
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	af00      	add	r7, sp, #0
	   delay_init(216);
 800d12c:	20d8      	movs	r0, #216	; 0xd8
 800d12e:	f7ff fe39 	bl	800cda4 <delay_init>
	   TM_Delay_Init();
 800d132:	f7ff fec5 	bl	800cec0 <TM_Delay_Init>
}
 800d136:	bf00      	nop
 800d138:	bd80      	pop	{r7, pc}
	...

0800d13c <InitialADS1256Register>:

//2021/0202/George
//TODO: Initialize ADS1256 parameter
void InitialADS1256Register()
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b082      	sub	sp, #8
 800d140:	af00      	add	r7, sp, #0
	//TODO: Reset ADS1256
	   writeCMD(CMD_RESET);
 800d142:	20fe      	movs	r0, #254	; 0xfe
 800d144:	f7fe fa82 	bl	800b64c <writeCMD>
	   delay_ms(10);
 800d148:	200a      	movs	r0, #10
 800d14a:	f7ff fe53 	bl	800cdf4 <delay_ms>
	   TM_DelayMicros(1);
 800d14e:	2001      	movs	r0, #1
 800d150:	f7ff fec2 	bl	800ced8 <TM_DelayMicros>

	   //TODO: Initialize ADS1256 parameter (Buffer, PGA, Sampling rate)
	   setBuffer();
 800d154:	f7fe fb54 	bl	800b800 <setBuffer>
	   setPGA(PGA_GAIN1);
 800d158:	2000      	movs	r0, #0
 800d15a:	f7fe facf 	bl	800b6fc <setPGA>
	   setDataRate(DRATE_15000);
 800d15e:	20e0      	movs	r0, #224	; 0xe0
 800d160:	f7fe fa94 	bl	800b68c <setDataRate>

	   //TODO: Read chip id
	   id = readChipID();
 800d164:	f7fe faf6 	bl	800b754 <readChipID>
 800d168:	4603      	mov	r3, r0
 800d16a:	461a      	mov	r2, r3
 800d16c:	4b1d      	ldr	r3, [pc, #116]	; (800d1e4 <InitialADS1256Register+0xa8>)
 800d16e:	701a      	strb	r2, [r3, #0]

	   delay_ms(500);// wait for initialization
 800d170:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d174:	f7ff fe3e 	bl	800cdf4 <delay_ms>

	   uint8_t  posChannels [4] = {AIN0, AIN2, AIN4, AIN6};
 800d178:	4b1b      	ldr	r3, [pc, #108]	; (800d1e8 <InitialADS1256Register+0xac>)
 800d17a:	607b      	str	r3, [r7, #4]
	   uint8_t  negChannels [4] = {AIN1, AIN3, AIN5, AIN7};
 800d17c:	4b1b      	ldr	r3, [pc, #108]	; (800d1ec <InitialADS1256Register+0xb0>)
 800d17e:	603b      	str	r3, [r7, #0]

	   //TODO: Set differential analog input channel.
	   setDIFFChannel(posChannels[0], negChannels[0]);
 800d180:	793b      	ldrb	r3, [r7, #4]
 800d182:	783a      	ldrb	r2, [r7, #0]
 800d184:	4611      	mov	r1, r2
 800d186:	4618      	mov	r0, r3
 800d188:	f7fe fa48 	bl	800b61c <setDIFFChannel>
	   delay_us(15);
 800d18c:	200f      	movs	r0, #15
 800d18e:	f7ff fe65 	bl	800ce5c <delay_us>
	   writeCMD(CMD_SYNC);    // SYNC command
 800d192:	20fc      	movs	r0, #252	; 0xfc
 800d194:	f7fe fa5a 	bl	800b64c <writeCMD>
	   delay_us(10);
 800d198:	200a      	movs	r0, #10
 800d19a:	f7ff fe5f 	bl	800ce5c <delay_us>
	   writeCMD(CMD_WAKEUP);  // WAKEUP command
 800d19e:	2000      	movs	r0, #0
 800d1a0:	f7fe fa54 	bl	800b64c <writeCMD>
	   delay_us(15); // min delay: t11 = 4 * 1 / 7,68 Mhz = 0,52 micro sec
 800d1a4:	200f      	movs	r0, #15
 800d1a6:	f7ff fe59 	bl	800ce5c <delay_us>



	   //TODO: Set continuous mode.

		waitDRDY();
 800d1aa:	f7fe fab5 	bl	800b718 <waitDRDY>
		CS_0();
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	2110      	movs	r1, #16
 800d1b2:	480f      	ldr	r0, [pc, #60]	; (800d1f0 <InitialADS1256Register+0xb4>)
 800d1b4:	f003 fe68 	bl	8010e88 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, RDATACcmdbuffer ,1,50);
 800d1b8:	2332      	movs	r3, #50	; 0x32
 800d1ba:	2201      	movs	r2, #1
 800d1bc:	490d      	ldr	r1, [pc, #52]	; (800d1f4 <InitialADS1256Register+0xb8>)
 800d1be:	480e      	ldr	r0, [pc, #56]	; (800d1f8 <InitialADS1256Register+0xbc>)
 800d1c0:	f005 fd95 	bl	8012cee <HAL_SPI_Transmit>
		delay_ms(25); // min delay: t6 = 50 * 1/7.68 MHz = 6.5 microseconds
 800d1c4:	2019      	movs	r0, #25
 800d1c6:	f7ff fe15 	bl	800cdf4 <delay_ms>
		ADS1256.data_startFlag = 1;
 800d1ca:	4b0c      	ldr	r3, [pc, #48]	; (800d1fc <InitialADS1256Register+0xc0>)
 800d1cc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800d1d0:	2201      	movs	r2, #1
 800d1d2:	721a      	strb	r2, [r3, #8]
		delay_us(1);
 800d1d4:	2001      	movs	r0, #1
 800d1d6:	f7ff fe41 	bl	800ce5c <delay_us>

}
 800d1da:	bf00      	nop
 800d1dc:	3708      	adds	r7, #8
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	bd80      	pop	{r7, pc}
 800d1e2:	bf00      	nop
 800d1e4:	20002f8e 	.word	0x20002f8e
 800d1e8:	06040200 	.word	0x06040200
 800d1ec:	07050301 	.word	0x07050301
 800d1f0:	40020000 	.word	0x40020000
 800d1f4:	20000004 	.word	0x20000004
 800d1f8:	20002d68 	.word	0x20002d68
 800d1fc:	20002fbc 	.word	0x20002fbc

0800d200 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800d200:	b5b0      	push	{r4, r5, r7, lr}
 800d202:	b098      	sub	sp, #96	; 0x60
 800d204:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800d206:	f002 ff02 	bl	801000e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800d20a:	f000 f893 	bl	800d334 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800d20e:	f000 f9fb 	bl	800d608 <MX_GPIO_Init>
  MX_DMA_Init();
 800d212:	f000 f9cb 	bl	800d5ac <MX_DMA_Init>
  MX_SPI1_Init();
 800d216:	f000 f95b 	bl	800d4d0 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 800d21a:	f000 f997 	bl	800d54c <MX_USART6_UART_Init>
  MX_I2C2_Init();
 800d21e:	f000 f8f9 	bl	800d414 <MX_I2C2_Init>
  MX_IWDG_Init();
 800d222:	f000 f937 	bl	800d494 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  //2021/0319/George/HTi
  //TODO:PB6 for IEPE output
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800d226:	2201      	movs	r2, #1
 800d228:	2140      	movs	r1, #64	; 0x40
 800d22a:	4837      	ldr	r0, [pc, #220]	; (800d308 <main+0x108>)
 800d22c:	f003 fe2c 	bl	8010e88 <HAL_GPIO_WritePin>

  //2021/0201/George
  //TODO: InitialParameter
  initialBootloaderParameter();
 800d230:	f7ff ff30 	bl	800d094 <initialBootloaderParameter>
  initialADS1256DataBuffer();
 800d234:	f7ff ff42 	bl	800d0bc <initialADS1256DataBuffer>

   //2021/0201/George
   //TODO: Initialize Frequency range to collection to feature
   InitialSetFreqStatisticBand();
 800d238:	f7ff ff56 	bl	800d0e8 <InitialSetFreqStatisticBand>

   //2021/0202/George
   //TODO: Initialize delay systick
   InitialDelayFunction();
 800d23c:	f7ff ff74 	bl	800d128 <InitialDelayFunction>

   //2021/0202/George
   //TODO: Testing EEProm
   readIICEEPROM_2402C();
 800d240:	f7ff ff10 	bl	800d064 <readIICEEPROM_2402C>

   //2021/0202/George
   //TODO: Initialize ADS1256 parameter
   InitialADS1256Register();
 800d244:	f7ff ff7a 	bl	800d13c <InitialADS1256Register>

   /*TODO: Initialize SampleWave
   20220301--by Wayne*/
   SampleWave_Init();
 800d248:	f7ff fe7e 	bl	800cf48 <SampleWave_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of adcBinarySem */
  osSemaphoreDef(adcBinarySem);
 800d24c:	2300      	movs	r3, #0
 800d24e:	65bb      	str	r3, [r7, #88]	; 0x58
 800d250:	2300      	movs	r3, #0
 800d252:	65fb      	str	r3, [r7, #92]	; 0x5c
  adcBinarySemHandle = osSemaphoreCreate(osSemaphore(adcBinarySem), 1);
 800d254:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d258:	2101      	movs	r1, #1
 800d25a:	4618      	mov	r0, r3
 800d25c:	f008 f9de 	bl	801561c <osSemaphoreCreate>
 800d260:	4603      	mov	r3, r0
 800d262:	4a2a      	ldr	r2, [pc, #168]	; (800d30c <main+0x10c>)
 800d264:	6013      	str	r3, [r2, #0]

  /* definition and creation of I2cBinarySem */
  osSemaphoreDef(I2cBinarySem);
 800d266:	2300      	movs	r3, #0
 800d268:	653b      	str	r3, [r7, #80]	; 0x50
 800d26a:	2300      	movs	r3, #0
 800d26c:	657b      	str	r3, [r7, #84]	; 0x54
  I2cBinarySemHandle = osSemaphoreCreate(osSemaphore(I2cBinarySem), 1);
 800d26e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d272:	2101      	movs	r1, #1
 800d274:	4618      	mov	r0, r3
 800d276:	f008 f9d1 	bl	801561c <osSemaphoreCreate>
 800d27a:	4603      	mov	r3, r0
 800d27c:	4a24      	ldr	r2, [pc, #144]	; (800d310 <main+0x110>)
 800d27e:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of SendInterval */
  osTimerDef(SendInterval, SendIntervalCallback);
 800d280:	4b24      	ldr	r3, [pc, #144]	; (800d314 <main+0x114>)
 800d282:	64bb      	str	r3, [r7, #72]	; 0x48
 800d284:	2300      	movs	r3, #0
 800d286:	64fb      	str	r3, [r7, #76]	; 0x4c
  SendIntervalHandle = osTimerCreate(osTimer(SendInterval), osTimerPeriodic, NULL);
 800d288:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d28c:	2200      	movs	r2, #0
 800d28e:	2101      	movs	r1, #1
 800d290:	4618      	mov	r0, r3
 800d292:	f008 f98f 	bl	80155b4 <osTimerCreate>
 800d296:	4603      	mov	r3, r0
 800d298:	4a1f      	ldr	r2, [pc, #124]	; (800d318 <main+0x118>)
 800d29a:	6013      	str	r3, [r2, #0]
//  osTimerStart(SendIntervalHandle,500);//0.5sec
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of adcQueue */
  osMessageQDef(adcQueue, 16, long);
 800d29c:	4b1f      	ldr	r3, [pc, #124]	; (800d31c <main+0x11c>)
 800d29e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800d2a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d2a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  adcQueueHandle = osMessageCreate(osMessageQ(adcQueue), NULL);
 800d2a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d2ac:	2100      	movs	r1, #0
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	f008 f9e6 	bl	8015680 <osMessageCreate>
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	4a1a      	ldr	r2, [pc, #104]	; (800d320 <main+0x120>)
 800d2b8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ADC_Task */
  osThreadDef(ADC_Task, ADC_Thread, osPriorityRealtime, 0, 200);
 800d2ba:	4b1a      	ldr	r3, [pc, #104]	; (800d324 <main+0x124>)
 800d2bc:	f107 041c 	add.w	r4, r7, #28
 800d2c0:	461d      	mov	r5, r3
 800d2c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d2c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d2c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d2ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ADC_TaskHandle = osThreadCreate(osThread(ADC_Task), NULL);
 800d2ce:	f107 031c 	add.w	r3, r7, #28
 800d2d2:	2100      	movs	r1, #0
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	f008 f920 	bl	801551a <osThreadCreate>
 800d2da:	4603      	mov	r3, r0
 800d2dc:	4a12      	ldr	r2, [pc, #72]	; (800d328 <main+0x128>)
 800d2de:	6013      	str	r3, [r2, #0]

  /* definition and creation of FFT_Task */
  osThreadDef(FFT_Task, FFT_Thread, osPriorityHigh, 0, 20500);
 800d2e0:	4b12      	ldr	r3, [pc, #72]	; (800d32c <main+0x12c>)
 800d2e2:	463c      	mov	r4, r7
 800d2e4:	461d      	mov	r5, r3
 800d2e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d2e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d2ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d2ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  FFT_TaskHandle = osThreadCreate(osThread(FFT_Task), NULL);
 800d2f2:	463b      	mov	r3, r7
 800d2f4:	2100      	movs	r1, #0
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f008 f90f 	bl	801551a <osThreadCreate>
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	4a0c      	ldr	r2, [pc, #48]	; (800d330 <main+0x130>)
 800d300:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800d302:	f008 f903 	bl	801550c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800d306:	e7fe      	b.n	800d306 <main+0x106>
 800d308:	40020400 	.word	0x40020400
 800d30c:	20002f80 	.word	0x20002f80
 800d310:	20002f84 	.word	0x20002f84
 800d314:	0800e225 	.word	0x0800e225
 800d318:	20002f7c 	.word	0x20002f7c
 800d31c:	08021790 	.word	0x08021790
 800d320:	20002f78 	.word	0x20002f78
 800d324:	080217a0 	.word	0x080217a0
 800d328:	20002f70 	.word	0x20002f70
 800d32c:	080217bc 	.word	0x080217bc
 800d330:	20002f74 	.word	0x20002f74

0800d334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b094      	sub	sp, #80	; 0x50
 800d338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d33a:	f107 031c 	add.w	r3, r7, #28
 800d33e:	2234      	movs	r2, #52	; 0x34
 800d340:	2100      	movs	r1, #0
 800d342:	4618      	mov	r0, r3
 800d344:	f00b fb34 	bl	80189b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d348:	f107 0308 	add.w	r3, r7, #8
 800d34c:	2200      	movs	r2, #0
 800d34e:	601a      	str	r2, [r3, #0]
 800d350:	605a      	str	r2, [r3, #4]
 800d352:	609a      	str	r2, [r3, #8]
 800d354:	60da      	str	r2, [r3, #12]
 800d356:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800d358:	4b2c      	ldr	r3, [pc, #176]	; (800d40c <SystemClock_Config+0xd8>)
 800d35a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d35c:	4a2b      	ldr	r2, [pc, #172]	; (800d40c <SystemClock_Config+0xd8>)
 800d35e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d362:	6413      	str	r3, [r2, #64]	; 0x40
 800d364:	4b29      	ldr	r3, [pc, #164]	; (800d40c <SystemClock_Config+0xd8>)
 800d366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d36c:	607b      	str	r3, [r7, #4]
 800d36e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d370:	4b27      	ldr	r3, [pc, #156]	; (800d410 <SystemClock_Config+0xdc>)
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	4a26      	ldr	r2, [pc, #152]	; (800d410 <SystemClock_Config+0xdc>)
 800d376:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d37a:	6013      	str	r3, [r2, #0]
 800d37c:	4b24      	ldr	r3, [pc, #144]	; (800d410 <SystemClock_Config+0xdc>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d384:	603b      	str	r3, [r7, #0]
 800d386:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800d388:	230a      	movs	r3, #10
 800d38a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800d38c:	2301      	movs	r3, #1
 800d38e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800d390:	2310      	movs	r3, #16
 800d392:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800d394:	2301      	movs	r3, #1
 800d396:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d398:	2302      	movs	r3, #2
 800d39a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800d39c:	2300      	movs	r3, #0
 800d39e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800d3a0:	2308      	movs	r3, #8
 800d3a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 800d3a4:	23d8      	movs	r3, #216	; 0xd8
 800d3a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800d3a8:	2302      	movs	r3, #2
 800d3aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800d3ac:	2302      	movs	r3, #2
 800d3ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800d3b0:	2302      	movs	r3, #2
 800d3b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d3b4:	f107 031c 	add.w	r3, r7, #28
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f004 faf3 	bl	80119a4 <HAL_RCC_OscConfig>
 800d3be:	4603      	mov	r3, r0
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d001      	beq.n	800d3c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800d3c4:	f000 ff44 	bl	800e250 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800d3c8:	f004 fa9c 	bl	8011904 <HAL_PWREx_EnableOverDrive>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d001      	beq.n	800d3d6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800d3d2:	f000 ff3d 	bl	800e250 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d3d6:	230f      	movs	r3, #15
 800d3d8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d3da:	2302      	movs	r3, #2
 800d3dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d3de:	2300      	movs	r3, #0
 800d3e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800d3e2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800d3e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800d3e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d3ec:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800d3ee:	f107 0308 	add.w	r3, r7, #8
 800d3f2:	2107      	movs	r1, #7
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	f004 fd83 	bl	8011f00 <HAL_RCC_ClockConfig>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d001      	beq.n	800d404 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800d400:	f000 ff26 	bl	800e250 <Error_Handler>
  }
}
 800d404:	bf00      	nop
 800d406:	3750      	adds	r7, #80	; 0x50
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}
 800d40c:	40023800 	.word	0x40023800
 800d410:	40007000 	.word	0x40007000

0800d414 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800d418:	4b1b      	ldr	r3, [pc, #108]	; (800d488 <MX_I2C2_Init+0x74>)
 800d41a:	4a1c      	ldr	r2, [pc, #112]	; (800d48c <MX_I2C2_Init+0x78>)
 800d41c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 800d41e:	4b1a      	ldr	r3, [pc, #104]	; (800d488 <MX_I2C2_Init+0x74>)
 800d420:	4a1b      	ldr	r2, [pc, #108]	; (800d490 <MX_I2C2_Init+0x7c>)
 800d422:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 8;
 800d424:	4b18      	ldr	r3, [pc, #96]	; (800d488 <MX_I2C2_Init+0x74>)
 800d426:	2208      	movs	r2, #8
 800d428:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800d42a:	4b17      	ldr	r3, [pc, #92]	; (800d488 <MX_I2C2_Init+0x74>)
 800d42c:	2201      	movs	r2, #1
 800d42e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800d430:	4b15      	ldr	r3, [pc, #84]	; (800d488 <MX_I2C2_Init+0x74>)
 800d432:	2200      	movs	r2, #0
 800d434:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800d436:	4b14      	ldr	r3, [pc, #80]	; (800d488 <MX_I2C2_Init+0x74>)
 800d438:	2200      	movs	r2, #0
 800d43a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800d43c:	4b12      	ldr	r3, [pc, #72]	; (800d488 <MX_I2C2_Init+0x74>)
 800d43e:	2200      	movs	r2, #0
 800d440:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 800d442:	4b11      	ldr	r3, [pc, #68]	; (800d488 <MX_I2C2_Init+0x74>)
 800d444:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800d448:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800d44a:	4b0f      	ldr	r3, [pc, #60]	; (800d488 <MX_I2C2_Init+0x74>)
 800d44c:	2200      	movs	r2, #0
 800d44e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800d450:	480d      	ldr	r0, [pc, #52]	; (800d488 <MX_I2C2_Init+0x74>)
 800d452:	f003 fd65 	bl	8010f20 <HAL_I2C_Init>
 800d456:	4603      	mov	r3, r0
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d001      	beq.n	800d460 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800d45c:	f000 fef8 	bl	800e250 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800d460:	2100      	movs	r1, #0
 800d462:	4809      	ldr	r0, [pc, #36]	; (800d488 <MX_I2C2_Init+0x74>)
 800d464:	f004 f958 	bl	8011718 <HAL_I2CEx_ConfigAnalogFilter>
 800d468:	4603      	mov	r3, r0
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d001      	beq.n	800d472 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800d46e:	f000 feef 	bl	800e250 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800d472:	2100      	movs	r1, #0
 800d474:	4804      	ldr	r0, [pc, #16]	; (800d488 <MX_I2C2_Init+0x74>)
 800d476:	f004 f99a 	bl	80117ae <HAL_I2CEx_ConfigDigitalFilter>
 800d47a:	4603      	mov	r3, r0
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d001      	beq.n	800d484 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 800d480:	f000 fee6 	bl	800e250 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800d484:	bf00      	nop
 800d486:	bd80      	pop	{r7, pc}
 800d488:	20002d0c 	.word	0x20002d0c
 800d48c:	40005800 	.word	0x40005800
 800d490:	20404768 	.word	0x20404768

0800d494 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800d498:	4b0b      	ldr	r3, [pc, #44]	; (800d4c8 <MX_IWDG_Init+0x34>)
 800d49a:	4a0c      	ldr	r2, [pc, #48]	; (800d4cc <MX_IWDG_Init+0x38>)
 800d49c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_128;
 800d49e:	4b0a      	ldr	r3, [pc, #40]	; (800d4c8 <MX_IWDG_Init+0x34>)
 800d4a0:	2205      	movs	r2, #5
 800d4a2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 800d4a4:	4b08      	ldr	r3, [pc, #32]	; (800d4c8 <MX_IWDG_Init+0x34>)
 800d4a6:	f640 72ff 	movw	r2, #4095	; 0xfff
 800d4aa:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 3096;
 800d4ac:	4b06      	ldr	r3, [pc, #24]	; (800d4c8 <MX_IWDG_Init+0x34>)
 800d4ae:	f640 4218 	movw	r2, #3096	; 0xc18
 800d4b2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800d4b4:	4804      	ldr	r0, [pc, #16]	; (800d4c8 <MX_IWDG_Init+0x34>)
 800d4b6:	f004 f9c6 	bl	8011846 <HAL_IWDG_Init>
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d001      	beq.n	800d4c4 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 800d4c0:	f000 fec6 	bl	800e250 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800d4c4:	bf00      	nop
 800d4c6:	bd80      	pop	{r7, pc}
 800d4c8:	20002d58 	.word	0x20002d58
 800d4cc:	40003000 	.word	0x40003000

0800d4d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800d4d4:	4b1b      	ldr	r3, [pc, #108]	; (800d544 <MX_SPI1_Init+0x74>)
 800d4d6:	4a1c      	ldr	r2, [pc, #112]	; (800d548 <MX_SPI1_Init+0x78>)
 800d4d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800d4da:	4b1a      	ldr	r3, [pc, #104]	; (800d544 <MX_SPI1_Init+0x74>)
 800d4dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 800d4e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800d4e2:	4b18      	ldr	r3, [pc, #96]	; (800d544 <MX_SPI1_Init+0x74>)
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800d4e8:	4b16      	ldr	r3, [pc, #88]	; (800d544 <MX_SPI1_Init+0x74>)
 800d4ea:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800d4ee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800d4f0:	4b14      	ldr	r3, [pc, #80]	; (800d544 <MX_SPI1_Init+0x74>)
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800d4f6:	4b13      	ldr	r3, [pc, #76]	; (800d544 <MX_SPI1_Init+0x74>)
 800d4f8:	2201      	movs	r2, #1
 800d4fa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800d4fc:	4b11      	ldr	r3, [pc, #68]	; (800d544 <MX_SPI1_Init+0x74>)
 800d4fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d502:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800d504:	4b0f      	ldr	r3, [pc, #60]	; (800d544 <MX_SPI1_Init+0x74>)
 800d506:	2228      	movs	r2, #40	; 0x28
 800d508:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d50a:	4b0e      	ldr	r3, [pc, #56]	; (800d544 <MX_SPI1_Init+0x74>)
 800d50c:	2200      	movs	r2, #0
 800d50e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800d510:	4b0c      	ldr	r3, [pc, #48]	; (800d544 <MX_SPI1_Init+0x74>)
 800d512:	2200      	movs	r2, #0
 800d514:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d516:	4b0b      	ldr	r3, [pc, #44]	; (800d544 <MX_SPI1_Init+0x74>)
 800d518:	2200      	movs	r2, #0
 800d51a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800d51c:	4b09      	ldr	r3, [pc, #36]	; (800d544 <MX_SPI1_Init+0x74>)
 800d51e:	2207      	movs	r2, #7
 800d520:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800d522:	4b08      	ldr	r3, [pc, #32]	; (800d544 <MX_SPI1_Init+0x74>)
 800d524:	2200      	movs	r2, #0
 800d526:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800d528:	4b06      	ldr	r3, [pc, #24]	; (800d544 <MX_SPI1_Init+0x74>)
 800d52a:	2200      	movs	r2, #0
 800d52c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800d52e:	4805      	ldr	r0, [pc, #20]	; (800d544 <MX_SPI1_Init+0x74>)
 800d530:	f005 fb32 	bl	8012b98 <HAL_SPI_Init>
 800d534:	4603      	mov	r3, r0
 800d536:	2b00      	cmp	r3, #0
 800d538:	d001      	beq.n	800d53e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800d53a:	f000 fe89 	bl	800e250 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800d53e:	bf00      	nop
 800d540:	bd80      	pop	{r7, pc}
 800d542:	bf00      	nop
 800d544:	20002d68 	.word	0x20002d68
 800d548:	40013000 	.word	0x40013000

0800d54c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800d550:	4b14      	ldr	r3, [pc, #80]	; (800d5a4 <MX_USART6_UART_Init+0x58>)
 800d552:	4a15      	ldr	r2, [pc, #84]	; (800d5a8 <MX_USART6_UART_Init+0x5c>)
 800d554:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800d556:	4b13      	ldr	r3, [pc, #76]	; (800d5a4 <MX_USART6_UART_Init+0x58>)
 800d558:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800d55c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800d55e:	4b11      	ldr	r3, [pc, #68]	; (800d5a4 <MX_USART6_UART_Init+0x58>)
 800d560:	2200      	movs	r2, #0
 800d562:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800d564:	4b0f      	ldr	r3, [pc, #60]	; (800d5a4 <MX_USART6_UART_Init+0x58>)
 800d566:	2200      	movs	r2, #0
 800d568:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800d56a:	4b0e      	ldr	r3, [pc, #56]	; (800d5a4 <MX_USART6_UART_Init+0x58>)
 800d56c:	2200      	movs	r2, #0
 800d56e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800d570:	4b0c      	ldr	r3, [pc, #48]	; (800d5a4 <MX_USART6_UART_Init+0x58>)
 800d572:	220c      	movs	r2, #12
 800d574:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d576:	4b0b      	ldr	r3, [pc, #44]	; (800d5a4 <MX_USART6_UART_Init+0x58>)
 800d578:	2200      	movs	r2, #0
 800d57a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800d57c:	4b09      	ldr	r3, [pc, #36]	; (800d5a4 <MX_USART6_UART_Init+0x58>)
 800d57e:	2200      	movs	r2, #0
 800d580:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800d582:	4b08      	ldr	r3, [pc, #32]	; (800d5a4 <MX_USART6_UART_Init+0x58>)
 800d584:	2200      	movs	r2, #0
 800d586:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d588:	4b06      	ldr	r3, [pc, #24]	; (800d5a4 <MX_USART6_UART_Init+0x58>)
 800d58a:	2200      	movs	r2, #0
 800d58c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800d58e:	4805      	ldr	r0, [pc, #20]	; (800d5a4 <MX_USART6_UART_Init+0x58>)
 800d590:	f006 fbca 	bl	8013d28 <HAL_UART_Init>
 800d594:	4603      	mov	r3, r0
 800d596:	2b00      	cmp	r3, #0
 800d598:	d001      	beq.n	800d59e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800d59a:	f000 fe59 	bl	800e250 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800d59e:	bf00      	nop
 800d5a0:	bd80      	pop	{r7, pc}
 800d5a2:	bf00      	nop
 800d5a4:	20002e8c 	.word	0x20002e8c
 800d5a8:	40011400 	.word	0x40011400

0800d5ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b082      	sub	sp, #8
 800d5b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800d5b2:	4b14      	ldr	r3, [pc, #80]	; (800d604 <MX_DMA_Init+0x58>)
 800d5b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5b6:	4a13      	ldr	r2, [pc, #76]	; (800d604 <MX_DMA_Init+0x58>)
 800d5b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d5bc:	6313      	str	r3, [r2, #48]	; 0x30
 800d5be:	4b11      	ldr	r3, [pc, #68]	; (800d604 <MX_DMA_Init+0x58>)
 800d5c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d5c6:	607b      	str	r3, [r7, #4]
 800d5c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	2105      	movs	r1, #5
 800d5ce:	2038      	movs	r0, #56	; 0x38
 800d5d0:	f002 fe55 	bl	801027e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800d5d4:	2038      	movs	r0, #56	; 0x38
 800d5d6:	f002 fe6e 	bl	80102b6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800d5da:	2200      	movs	r2, #0
 800d5dc:	2105      	movs	r1, #5
 800d5de:	203b      	movs	r0, #59	; 0x3b
 800d5e0:	f002 fe4d 	bl	801027e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800d5e4:	203b      	movs	r0, #59	; 0x3b
 800d5e6:	f002 fe66 	bl	80102b6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	2105      	movs	r1, #5
 800d5ee:	2045      	movs	r0, #69	; 0x45
 800d5f0:	f002 fe45 	bl	801027e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800d5f4:	2045      	movs	r0, #69	; 0x45
 800d5f6:	f002 fe5e 	bl	80102b6 <HAL_NVIC_EnableIRQ>

}
 800d5fa:	bf00      	nop
 800d5fc:	3708      	adds	r7, #8
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}
 800d602:	bf00      	nop
 800d604:	40023800 	.word	0x40023800

0800d608 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b08a      	sub	sp, #40	; 0x28
 800d60c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d60e:	f107 0314 	add.w	r3, r7, #20
 800d612:	2200      	movs	r2, #0
 800d614:	601a      	str	r2, [r3, #0]
 800d616:	605a      	str	r2, [r3, #4]
 800d618:	609a      	str	r2, [r3, #8]
 800d61a:	60da      	str	r2, [r3, #12]
 800d61c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d61e:	4b42      	ldr	r3, [pc, #264]	; (800d728 <MX_GPIO_Init+0x120>)
 800d620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d622:	4a41      	ldr	r2, [pc, #260]	; (800d728 <MX_GPIO_Init+0x120>)
 800d624:	f043 0301 	orr.w	r3, r3, #1
 800d628:	6313      	str	r3, [r2, #48]	; 0x30
 800d62a:	4b3f      	ldr	r3, [pc, #252]	; (800d728 <MX_GPIO_Init+0x120>)
 800d62c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d62e:	f003 0301 	and.w	r3, r3, #1
 800d632:	613b      	str	r3, [r7, #16]
 800d634:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d636:	4b3c      	ldr	r3, [pc, #240]	; (800d728 <MX_GPIO_Init+0x120>)
 800d638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d63a:	4a3b      	ldr	r2, [pc, #236]	; (800d728 <MX_GPIO_Init+0x120>)
 800d63c:	f043 0302 	orr.w	r3, r3, #2
 800d640:	6313      	str	r3, [r2, #48]	; 0x30
 800d642:	4b39      	ldr	r3, [pc, #228]	; (800d728 <MX_GPIO_Init+0x120>)
 800d644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d646:	f003 0302 	and.w	r3, r3, #2
 800d64a:	60fb      	str	r3, [r7, #12]
 800d64c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800d64e:	4b36      	ldr	r3, [pc, #216]	; (800d728 <MX_GPIO_Init+0x120>)
 800d650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d652:	4a35      	ldr	r2, [pc, #212]	; (800d728 <MX_GPIO_Init+0x120>)
 800d654:	f043 0308 	orr.w	r3, r3, #8
 800d658:	6313      	str	r3, [r2, #48]	; 0x30
 800d65a:	4b33      	ldr	r3, [pc, #204]	; (800d728 <MX_GPIO_Init+0x120>)
 800d65c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d65e:	f003 0308 	and.w	r3, r3, #8
 800d662:	60bb      	str	r3, [r7, #8]
 800d664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d666:	4b30      	ldr	r3, [pc, #192]	; (800d728 <MX_GPIO_Init+0x120>)
 800d668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d66a:	4a2f      	ldr	r2, [pc, #188]	; (800d728 <MX_GPIO_Init+0x120>)
 800d66c:	f043 0304 	orr.w	r3, r3, #4
 800d670:	6313      	str	r3, [r2, #48]	; 0x30
 800d672:	4b2d      	ldr	r3, [pc, #180]	; (800d728 <MX_GPIO_Init+0x120>)
 800d674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d676:	f003 0304 	and.w	r3, r3, #4
 800d67a:	607b      	str	r3, [r7, #4]
 800d67c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800d67e:	2200      	movs	r2, #0
 800d680:	2110      	movs	r1, #16
 800d682:	482a      	ldr	r0, [pc, #168]	; (800d72c <MX_GPIO_Init+0x124>)
 800d684:	f003 fc00 	bl	8010e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 800d688:	2200      	movs	r2, #0
 800d68a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800d68e:	4828      	ldr	r0, [pc, #160]	; (800d730 <MX_GPIO_Init+0x128>)
 800d690:	f003 fbfa 	bl	8010e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800d694:	2200      	movs	r2, #0
 800d696:	2140      	movs	r1, #64	; 0x40
 800d698:	4826      	ldr	r0, [pc, #152]	; (800d734 <MX_GPIO_Init+0x12c>)
 800d69a:	f003 fbf5 	bl	8010e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800d69e:	2308      	movs	r3, #8
 800d6a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800d6a2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800d6a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d6ac:	f107 0314 	add.w	r3, r7, #20
 800d6b0:	4619      	mov	r1, r3
 800d6b2:	481e      	ldr	r0, [pc, #120]	; (800d72c <MX_GPIO_Init+0x124>)
 800d6b4:	f003 fa24 	bl	8010b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800d6b8:	2310      	movs	r3, #16
 800d6ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d6bc:	2301      	movs	r3, #1
 800d6be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d6c0:	2301      	movs	r3, #1
 800d6c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d6c4:	2303      	movs	r3, #3
 800d6c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d6c8:	f107 0314 	add.w	r3, r7, #20
 800d6cc:	4619      	mov	r1, r3
 800d6ce:	4817      	ldr	r0, [pc, #92]	; (800d72c <MX_GPIO_Init+0x124>)
 800d6d0:	f003 fa16 	bl	8010b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800d6d4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800d6d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d6da:	2301      	movs	r3, #1
 800d6dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d6e6:	f107 0314 	add.w	r3, r7, #20
 800d6ea:	4619      	mov	r1, r3
 800d6ec:	4810      	ldr	r0, [pc, #64]	; (800d730 <MX_GPIO_Init+0x128>)
 800d6ee:	f003 fa07 	bl	8010b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800d6f2:	2340      	movs	r3, #64	; 0x40
 800d6f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d6f6:	2301      	movs	r3, #1
 800d6f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d6fe:	2300      	movs	r3, #0
 800d700:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d702:	f107 0314 	add.w	r3, r7, #20
 800d706:	4619      	mov	r1, r3
 800d708:	480a      	ldr	r0, [pc, #40]	; (800d734 <MX_GPIO_Init+0x12c>)
 800d70a:	f003 f9f9 	bl	8010b00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800d70e:	2200      	movs	r2, #0
 800d710:	2105      	movs	r1, #5
 800d712:	2009      	movs	r0, #9
 800d714:	f002 fdb3 	bl	801027e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800d718:	2009      	movs	r0, #9
 800d71a:	f002 fdcc 	bl	80102b6 <HAL_NVIC_EnableIRQ>

}
 800d71e:	bf00      	nop
 800d720:	3728      	adds	r7, #40	; 0x28
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}
 800d726:	bf00      	nop
 800d728:	40023800 	.word	0x40023800
 800d72c:	40020000 	.word	0x40020000
 800d730:	40020c00 	.word	0x40020c00
 800d734:	40020400 	.word	0x40020400

0800d738 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b084      	sub	sp, #16
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	4603      	mov	r3, r0
 800d740:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_3 && id == 3 && ADS1256.data_startFlag == 1 && I2cC.i2cRecive == 0 && stattisComputingStatus == statisticComputingNORMAL)
 800d742:	88fb      	ldrh	r3, [r7, #6]
 800d744:	2b08      	cmp	r3, #8
 800d746:	f040 8083 	bne.w	800d850 <HAL_GPIO_EXTI_Callback+0x118>
 800d74a:	4b43      	ldr	r3, [pc, #268]	; (800d858 <HAL_GPIO_EXTI_Callback+0x120>)
 800d74c:	781b      	ldrb	r3, [r3, #0]
 800d74e:	2b03      	cmp	r3, #3
 800d750:	d17e      	bne.n	800d850 <HAL_GPIO_EXTI_Callback+0x118>
 800d752:	4b42      	ldr	r3, [pc, #264]	; (800d85c <HAL_GPIO_EXTI_Callback+0x124>)
 800d754:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800d758:	7a1b      	ldrb	r3, [r3, #8]
 800d75a:	2b01      	cmp	r3, #1
 800d75c:	d178      	bne.n	800d850 <HAL_GPIO_EXTI_Callback+0x118>
 800d75e:	4b40      	ldr	r3, [pc, #256]	; (800d860 <HAL_GPIO_EXTI_Callback+0x128>)
 800d760:	781b      	ldrb	r3, [r3, #0]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d174      	bne.n	800d850 <HAL_GPIO_EXTI_Callback+0x118>
 800d766:	4b3f      	ldr	r3, [pc, #252]	; (800d864 <HAL_GPIO_EXTI_Callback+0x12c>)
 800d768:	781b      	ldrb	r3, [r3, #0]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d170      	bne.n	800d850 <HAL_GPIO_EXTI_Callback+0x118>
	{

		//2021/0201/George code from ADC Task.
		//TODO:SPI handshake from ADS1256 24 bit, 8bit(High), 8bit(Medium), 8bit(Low)
		HAL_SPI_TransmitReceive_DMA(&hspi1,RDATACsend_data,Databuffer,3);
 800d76e:	2303      	movs	r3, #3
 800d770:	4a3d      	ldr	r2, [pc, #244]	; (800d868 <HAL_GPIO_EXTI_Callback+0x130>)
 800d772:	493e      	ldr	r1, [pc, #248]	; (800d86c <HAL_GPIO_EXTI_Callback+0x134>)
 800d774:	483e      	ldr	r0, [pc, #248]	; (800d870 <HAL_GPIO_EXTI_Callback+0x138>)
 800d776:	f005 fe3b 	bl	80133f0 <HAL_SPI_TransmitReceive_DMA>

		// construct 24 bit value
		read  = ((int32_t)Databuffer[0] << 16) & 0x00FF0000; //8bit(High)
 800d77a:	4b3b      	ldr	r3, [pc, #236]	; (800d868 <HAL_GPIO_EXTI_Callback+0x130>)
 800d77c:	781b      	ldrb	r3, [r3, #0]
 800d77e:	041b      	lsls	r3, r3, #16
 800d780:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d784:	4a3b      	ldr	r2, [pc, #236]	; (800d874 <HAL_GPIO_EXTI_Callback+0x13c>)
 800d786:	6013      	str	r3, [r2, #0]
		read |= ((int32_t)Databuffer[1] << 8); //8bit(Medium)
 800d788:	4b37      	ldr	r3, [pc, #220]	; (800d868 <HAL_GPIO_EXTI_Callback+0x130>)
 800d78a:	785b      	ldrb	r3, [r3, #1]
 800d78c:	021a      	lsls	r2, r3, #8
 800d78e:	4b39      	ldr	r3, [pc, #228]	; (800d874 <HAL_GPIO_EXTI_Callback+0x13c>)
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	4313      	orrs	r3, r2
 800d794:	4a37      	ldr	r2, [pc, #220]	; (800d874 <HAL_GPIO_EXTI_Callback+0x13c>)
 800d796:	6013      	str	r3, [r2, #0]
		read |= Databuffer[2]; //8bit(Low)
 800d798:	4b33      	ldr	r3, [pc, #204]	; (800d868 <HAL_GPIO_EXTI_Callback+0x130>)
 800d79a:	789b      	ldrb	r3, [r3, #2]
 800d79c:	461a      	mov	r2, r3
 800d79e:	4b35      	ldr	r3, [pc, #212]	; (800d874 <HAL_GPIO_EXTI_Callback+0x13c>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	4313      	orrs	r3, r2
 800d7a4:	4a33      	ldr	r2, [pc, #204]	; (800d874 <HAL_GPIO_EXTI_Callback+0x13c>)
 800d7a6:	6013      	str	r3, [r2, #0]
		if (read & 0x800000){ //Determine negative value.
 800d7a8:	4b32      	ldr	r3, [pc, #200]	; (800d874 <HAL_GPIO_EXTI_Callback+0x13c>)
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d006      	beq.n	800d7c2 <HAL_GPIO_EXTI_Callback+0x8a>
			read |= 0xFF000000;
 800d7b4:	4b2f      	ldr	r3, [pc, #188]	; (800d874 <HAL_GPIO_EXTI_Callback+0x13c>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d7bc:	461a      	mov	r2, r3
 800d7be:	4b2d      	ldr	r3, [pc, #180]	; (800d874 <HAL_GPIO_EXTI_Callback+0x13c>)
 800d7c0:	601a      	str	r2, [r3, #0]
		}

		data = read;
 800d7c2:	4b2c      	ldr	r3, [pc, #176]	; (800d874 <HAL_GPIO_EXTI_Callback+0x13c>)
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	ee07 3a90 	vmov	s15, r3
 800d7ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d7ce:	4b2a      	ldr	r3, [pc, #168]	; (800d878 <HAL_GPIO_EXTI_Callback+0x140>)
 800d7d0:	edc3 7a00 	vstr	s15, [r3]
		//2021/0309/George for SMG device
		data = data / 1677721;
 800d7d4:	4b28      	ldr	r3, [pc, #160]	; (800d878 <HAL_GPIO_EXTI_Callback+0x140>)
 800d7d6:	ed93 7a00 	vldr	s14, [r3]
 800d7da:	eddf 6a28 	vldr	s13, [pc, #160]	; 800d87c <HAL_GPIO_EXTI_Callback+0x144>
 800d7de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d7e2:	4b25      	ldr	r3, [pc, #148]	; (800d878 <HAL_GPIO_EXTI_Callback+0x140>)
 800d7e4:	edc3 7a00 	vstr	s15, [r3]

		//2021/0811/George for HTi device
		//data = data / (1678043 * 0.496);
		ADS1256.data_buffer[ADS1256.data_index] = data; //plus 2 for FFT using
 800d7e8:	4b1c      	ldr	r3, [pc, #112]	; (800d85c <HAL_GPIO_EXTI_Callback+0x124>)
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	4a22      	ldr	r2, [pc, #136]	; (800d878 <HAL_GPIO_EXTI_Callback+0x140>)
 800d7ee:	6812      	ldr	r2, [r2, #0]
 800d7f0:	491a      	ldr	r1, [pc, #104]	; (800d85c <HAL_GPIO_EXTI_Callback+0x124>)
 800d7f2:	3302      	adds	r3, #2
 800d7f4:	009b      	lsls	r3, r3, #2
 800d7f6:	440b      	add	r3, r1
 800d7f8:	601a      	str	r2, [r3, #0]
		ADS1256.data_index++;
 800d7fa:	4b18      	ldr	r3, [pc, #96]	; (800d85c <HAL_GPIO_EXTI_Callback+0x124>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	3301      	adds	r3, #1
 800d800:	4a16      	ldr	r2, [pc, #88]	; (800d85c <HAL_GPIO_EXTI_Callback+0x124>)
 800d802:	6013      	str	r3, [r2, #0]

		if(ADS1256.data_index == ADS1256.data_length) //divide 2 for FFT real data equal 4096
 800d804:	4b15      	ldr	r3, [pc, #84]	; (800d85c <HAL_GPIO_EXTI_Callback+0x124>)
 800d806:	681a      	ldr	r2, [r3, #0]
 800d808:	4b14      	ldr	r3, [pc, #80]	; (800d85c <HAL_GPIO_EXTI_Callback+0x124>)
 800d80a:	685b      	ldr	r3, [r3, #4]
 800d80c:	429a      	cmp	r2, r3
 800d80e:	d11f      	bne.n	800d850 <HAL_GPIO_EXTI_Callback+0x118>
		{
		/* The xHigherPriorityTaskWoken parameter must be initialized to pdFALSE because it will get set to pdTRUE inside the interrupt-safe API function if a context switch is required. */
			BaseType_t xHigherPriorityTaskWoken;
			xHigherPriorityTaskWoken = pdFALSE;
 800d810:	2300      	movs	r3, #0
 800d812:	60fb      	str	r3, [r7, #12]
			xSemaphoreGiveFromISR(adcBinarySemHandle,&xHigherPriorityTaskWoken); //Wakeup High Priority Task
 800d814:	4b1a      	ldr	r3, [pc, #104]	; (800d880 <HAL_GPIO_EXTI_Callback+0x148>)
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	f107 020c 	add.w	r2, r7, #12
 800d81c:	4611      	mov	r1, r2
 800d81e:	4618      	mov	r0, r3
 800d820:	f008 fafe 	bl	8015e20 <xQueueGiveFromISR>

				if(xHigherPriorityTaskWoken == pdTRUE)
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	2b01      	cmp	r3, #1
 800d828:	d10a      	bne.n	800d840 <HAL_GPIO_EXTI_Callback+0x108>
				{
					portEND_SWITCHING_ISR( xHigherPriorityTaskWoken ); //Switch high priority task from ISR
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d007      	beq.n	800d840 <HAL_GPIO_EXTI_Callback+0x108>
 800d830:	4b14      	ldr	r3, [pc, #80]	; (800d884 <HAL_GPIO_EXTI_Callback+0x14c>)
 800d832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d836:	601a      	str	r2, [r3, #0]
 800d838:	f3bf 8f4f 	dsb	sy
 800d83c:	f3bf 8f6f 	isb	sy
				}

			ADS1256.data_index = 0;
 800d840:	4b06      	ldr	r3, [pc, #24]	; (800d85c <HAL_GPIO_EXTI_Callback+0x124>)
 800d842:	2200      	movs	r2, #0
 800d844:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800d846:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d84a:	480f      	ldr	r0, [pc, #60]	; (800d888 <HAL_GPIO_EXTI_Callback+0x150>)
 800d84c:	f003 fb35 	bl	8010eba <HAL_GPIO_TogglePin>
		}

	}
}
 800d850:	bf00      	nop
 800d852:	3710      	adds	r7, #16
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}
 800d858:	20002f8e 	.word	0x20002f8e
 800d85c:	20002fbc 	.word	0x20002fbc
 800d860:	20002f8c 	.word	0x20002f8c
 800d864:	2001733c 	.word	0x2001733c
 800d868:	20002f9c 	.word	0x20002f9c
 800d86c:	20000000 	.word	0x20000000
 800d870:	20002d68 	.word	0x20002d68
 800d874:	20002f94 	.word	0x20002f94
 800d878:	20002f90 	.word	0x20002f90
 800d87c:	49ccccc8 	.word	0x49ccccc8
 800d880:	20002f80 	.word	0x20002f80
 800d884:	e000ed04 	.word	0xe000ed04
 800d888:	40020c00 	.word	0x40020c00

0800d88c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b084      	sub	sp, #16
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file
   */
  USARTBLE.iapbuffer[USARTBLE.RxCount++]= aRxBuffer[0];
 800d894:	4b27      	ldr	r3, [pc, #156]	; (800d934 <HAL_UART_RxCpltCallback+0xa8>)
 800d896:	685b      	ldr	r3, [r3, #4]
 800d898:	1c5a      	adds	r2, r3, #1
 800d89a:	4926      	ldr	r1, [pc, #152]	; (800d934 <HAL_UART_RxCpltCallback+0xa8>)
 800d89c:	604a      	str	r2, [r1, #4]
 800d89e:	4a26      	ldr	r2, [pc, #152]	; (800d938 <HAL_UART_RxCpltCallback+0xac>)
 800d8a0:	7811      	ldrb	r1, [r2, #0]
 800d8a2:	4a24      	ldr	r2, [pc, #144]	; (800d934 <HAL_UART_RxCpltCallback+0xa8>)
 800d8a4:	4413      	add	r3, r2
 800d8a6:	460a      	mov	r2, r1
 800d8a8:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
  if(aRxBuffer[0]==0x0A)//when receive 0x0a("\n" Line feeds string),it is a effective command, Send a receive flag.
 800d8ac:	4b22      	ldr	r3, [pc, #136]	; (800d938 <HAL_UART_RxCpltCallback+0xac>)
 800d8ae:	781b      	ldrb	r3, [r3, #0]
 800d8b0:	2b0a      	cmp	r3, #10
 800d8b2:	d120      	bne.n	800d8f6 <HAL_UART_RxCpltCallback+0x6a>
  	{
	  USARTBLE.RxCount=0;
 800d8b4:	4b1f      	ldr	r3, [pc, #124]	; (800d934 <HAL_UART_RxCpltCallback+0xa8>)
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	605a      	str	r2, [r3, #4]
	  _Bool command = checkBLECommandFromBLEGateway(USARTBLE.iapbuffer ,"request",7);
 800d8ba:	2207      	movs	r2, #7
 800d8bc:	491f      	ldr	r1, [pc, #124]	; (800d93c <HAL_UART_RxCpltCallback+0xb0>)
 800d8be:	4820      	ldr	r0, [pc, #128]	; (800d940 <HAL_UART_RxCpltCallback+0xb4>)
 800d8c0:	f7fe f8c4 	bl	800ba4c <checkBLECommandFromBLEGateway>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	73fb      	strb	r3, [r7, #15]
	  if(command)
 800d8c8:	7bfb      	ldrb	r3, [r7, #15]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d00a      	beq.n	800d8e4 <HAL_UART_RxCpltCallback+0x58>
	  {
		  USARTBLE.IAPflag =1;
 800d8ce:	4b19      	ldr	r3, [pc, #100]	; (800d934 <HAL_UART_RxCpltCallback+0xa8>)
 800d8d0:	2201      	movs	r2, #1
 800d8d2:	705a      	strb	r2, [r3, #1]
		  USARTBLE.sendflag = 0;
 800d8d4:	4b17      	ldr	r3, [pc, #92]	; (800d934 <HAL_UART_RxCpltCallback+0xa8>)
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	701a      	strb	r2, [r3, #0]
		  BLE_USART(huart, &statistic_value);
 800d8da:	491a      	ldr	r1, [pc, #104]	; (800d944 <HAL_UART_RxCpltCallback+0xb8>)
 800d8dc:	6878      	ldr	r0, [r7, #4]
 800d8de:	f7fd ffcd 	bl	800b87c <BLE_USART>
 800d8e2:	e008      	b.n	800d8f6 <HAL_UART_RxCpltCallback+0x6a>
	  }
	  else
	  {
		  memset( USARTBLE.iapbuffer, 0, strlen(USARTBLE.iapbuffer) );
 800d8e4:	4816      	ldr	r0, [pc, #88]	; (800d940 <HAL_UART_RxCpltCallback+0xb4>)
 800d8e6:	f7fa fd0b 	bl	8008300 <strlen>
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	461a      	mov	r2, r3
 800d8ee:	2100      	movs	r1, #0
 800d8f0:	4813      	ldr	r0, [pc, #76]	; (800d940 <HAL_UART_RxCpltCallback+0xb4>)
 800d8f2:	f00b f85d 	bl	80189b0 <memset>
	  }

  	}
  	if(USARTBLE.RxCount>=15)//no  "\n" Line feeds string full over to 24 byte, clear data
 800d8f6:	4b0f      	ldr	r3, [pc, #60]	; (800d934 <HAL_UART_RxCpltCallback+0xa8>)
 800d8f8:	685b      	ldr	r3, [r3, #4]
 800d8fa:	2b0e      	cmp	r3, #14
 800d8fc:	dd0b      	ble.n	800d916 <HAL_UART_RxCpltCallback+0x8a>
  	{
  		USARTBLE.RxCount=0;
 800d8fe:	4b0d      	ldr	r3, [pc, #52]	; (800d934 <HAL_UART_RxCpltCallback+0xa8>)
 800d900:	2200      	movs	r2, #0
 800d902:	605a      	str	r2, [r3, #4]
  		memset( USARTBLE.iapbuffer, 0, strlen(USARTBLE.iapbuffer) ); //clear Receive data
 800d904:	480e      	ldr	r0, [pc, #56]	; (800d940 <HAL_UART_RxCpltCallback+0xb4>)
 800d906:	f7fa fcfb 	bl	8008300 <strlen>
 800d90a:	4603      	mov	r3, r0
 800d90c:	461a      	mov	r2, r3
 800d90e:	2100      	movs	r1, #0
 800d910:	480b      	ldr	r0, [pc, #44]	; (800d940 <HAL_UART_RxCpltCallback+0xb4>)
 800d912:	f00b f84d 	bl	80189b0 <memset>
  	}

  while(HAL_UART_Receive_IT(huart, (uint8_t *)aRxBuffer, 1)==HAL_OK);
 800d916:	bf00      	nop
 800d918:	2201      	movs	r2, #1
 800d91a:	4907      	ldr	r1, [pc, #28]	; (800d938 <HAL_UART_RxCpltCallback+0xac>)
 800d91c:	6878      	ldr	r0, [r7, #4]
 800d91e:	f006 fa51 	bl	8013dc4 <HAL_UART_Receive_IT>
 800d922:	4603      	mov	r3, r0
 800d924:	2b00      	cmp	r3, #0
 800d926:	d0f7      	beq.n	800d918 <HAL_UART_RxCpltCallback+0x8c>
}
 800d928:	bf00      	nop
 800d92a:	bf00      	nop
 800d92c:	3710      	adds	r7, #16
 800d92e:	46bd      	mov	sp, r7
 800d930:	bd80      	pop	{r7, pc}
 800d932:	bf00      	nop
 800d934:	200070e0 	.word	0x200070e0
 800d938:	20002f88 	.word	0x20002f88
 800d93c:	080217d8 	.word	0x080217d8
 800d940:	20007280 	.word	0x20007280
 800d944:	2000021c 	.word	0x2000021c

0800d948 <ADC_Thread>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_ADC_Thread */
void ADC_Thread(void const * argument)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b084      	sub	sp, #16
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  const TickType_t xMaxExpectedBlockTime = pdMS_TO_TICKS( 500 );
 800d950:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800d954:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
		 if( xSemaphoreTake( adcBinarySemHandle, xMaxExpectedBlockTime ) == pdPASS && I2cC.i2cRecive == 0){
 800d956:	4b13      	ldr	r3, [pc, #76]	; (800d9a4 <ADC_Thread+0x5c>)
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	68f9      	ldr	r1, [r7, #12]
 800d95c:	4618      	mov	r0, r3
 800d95e:	f008 fbdb 	bl	8016118 <xQueueSemaphoreTake>
 800d962:	4603      	mov	r3, r0
 800d964:	2b01      	cmp	r3, #1
 800d966:	d1f6      	bne.n	800d956 <ADC_Thread+0xe>
 800d968:	4b0f      	ldr	r3, [pc, #60]	; (800d9a8 <ADC_Thread+0x60>)
 800d96a:	781b      	ldrb	r3, [r3, #0]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d1f2      	bne.n	800d956 <ADC_Thread+0xe>

			/*TODO: send data buffer to FFT data buffer*/
			BaseType_t xStatus;
			xStatus = xQueueSendToBack(adcQueueHandle, &xdatatoSend , 0);
 800d970:	4b0e      	ldr	r3, [pc, #56]	; (800d9ac <ADC_Thread+0x64>)
 800d972:	6818      	ldr	r0, [r3, #0]
 800d974:	2300      	movs	r3, #0
 800d976:	2200      	movs	r2, #0
 800d978:	490d      	ldr	r1, [pc, #52]	; (800d9b0 <ADC_Thread+0x68>)
 800d97a:	f008 f8ab 	bl	8015ad4 <xQueueGenericSend>
 800d97e:	60b8      	str	r0, [r7, #8]
			queueCount = uxQueueMessagesWaiting(adcQueueHandle);
 800d980:	4b0a      	ldr	r3, [pc, #40]	; (800d9ac <ADC_Thread+0x64>)
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	4618      	mov	r0, r3
 800d986:	f008 fcdb 	bl	8016340 <uxQueueMessagesWaiting>
 800d98a:	4603      	mov	r3, r0
 800d98c:	4a09      	ldr	r2, [pc, #36]	; (800d9b4 <ADC_Thread+0x6c>)
 800d98e:	6013      	str	r3, [r2, #0]

			//TODO: wakeup FFT Task
			if(xStatus == pdPASS)
 800d990:	68bb      	ldr	r3, [r7, #8]
 800d992:	2b01      	cmp	r3, #1
 800d994:	d1df      	bne.n	800d956 <ADC_Thread+0xe>
			{
				vTaskResume(FFT_TaskHandle);
 800d996:	4b08      	ldr	r3, [pc, #32]	; (800d9b8 <ADC_Thread+0x70>)
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	4618      	mov	r0, r3
 800d99c:	f009 f8da 	bl	8016b54 <vTaskResume>
		 if( xSemaphoreTake( adcBinarySemHandle, xMaxExpectedBlockTime ) == pdPASS && I2cC.i2cRecive == 0){
 800d9a0:	e7d9      	b.n	800d956 <ADC_Thread+0xe>
 800d9a2:	bf00      	nop
 800d9a4:	20002f80 	.word	0x20002f80
 800d9a8:	20002f8c 	.word	0x20002f8c
 800d9ac:	20002f78 	.word	0x20002f78
 800d9b0:	20000014 	.word	0x20000014
 800d9b4:	20007338 	.word	0x20007338
 800d9b8:	20002f74 	.word	0x20002f74
 800d9bc:	00000000 	.word	0x00000000

0800d9c0 <FFT_Thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FFT_Thread */
void FFT_Thread(void const * argument)
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b08e      	sub	sp, #56	; 0x38
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FFT_Thread */
  /* Infinite loop */
  for(;;)
  {
	  BaseType_t xStatus;
	 	  queueCount = uxQueueMessagesWaiting(adcQueueHandle);
 800d9c8:	4b41      	ldr	r3, [pc, #260]	; (800dad0 <FFT_Thread+0x110>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	f008 fcb7 	bl	8016340 <uxQueueMessagesWaiting>
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	4a3f      	ldr	r2, [pc, #252]	; (800dad4 <FFT_Thread+0x114>)
 800d9d6:	6013      	str	r3, [r2, #0]
	 	  if(queueCount!=0){
 800d9d8:	4b3e      	ldr	r3, [pc, #248]	; (800dad4 <FFT_Thread+0x114>)
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	f000 840e 	beq.w	800e1fe <FFT_Thread+0x83e>
	 			  xStatus = xQueueReceive(adcQueueHandle, &dataRecive, 100);
 800d9e2:	4b3b      	ldr	r3, [pc, #236]	; (800dad0 <FFT_Thread+0x110>)
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	2264      	movs	r2, #100	; 0x64
 800d9e8:	493b      	ldr	r1, [pc, #236]	; (800dad8 <FFT_Thread+0x118>)
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	f008 faae 	bl	8015f4c <xQueueReceive>
 800d9f0:	62f8      	str	r0, [r7, #44]	; 0x2c
	 			  queueCount = uxQueueMessagesWaiting(adcQueueHandle);
 800d9f2:	4b37      	ldr	r3, [pc, #220]	; (800dad0 <FFT_Thread+0x110>)
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f008 fca2 	bl	8016340 <uxQueueMessagesWaiting>
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	4a35      	ldr	r2, [pc, #212]	; (800dad4 <FFT_Thread+0x114>)
 800da00:	6013      	str	r3, [r2, #0]

	 			HAL_IWDG_Refresh(&hiwdg);
 800da02:	4836      	ldr	r0, [pc, #216]	; (800dadc <FFT_Thread+0x11c>)
 800da04:	f003 ff6e 	bl	80118e4 <HAL_IWDG_Refresh>

	 			float32_t * rawdataBuffer;
	 			rawdataBuffer = pvPortMalloc(4096 * sizeof(float32_t));
 800da08:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800da0c:	f00a fdb2 	bl	8018574 <pvPortMalloc>
 800da10:	62b8      	str	r0, [r7, #40]	; 0x28

	 			//TODO : disable collect data flag
	 			stattisComputingStatus = statisticComputingBUSY;
 800da12:	4b33      	ldr	r3, [pc, #204]	; (800dae0 <FFT_Thread+0x120>)
 800da14:	2201      	movs	r2, #1
 800da16:	701a      	strb	r2, [r3, #0]

	 			for(uint32_t i = 0; i<dataLength; i++)
 800da18:	2300      	movs	r3, #0
 800da1a:	637b      	str	r3, [r7, #52]	; 0x34
 800da1c:	e022      	b.n	800da64 <FFT_Thread+0xa4>
	 			{
	 				//recivedata5 = *(dataRecive[0]+i);
	 				rawdataBuffer[i]=*(dataRecive[0]+i);
 800da1e:	4b2e      	ldr	r3, [pc, #184]	; (800dad8 <FFT_Thread+0x118>)
 800da20:	681a      	ldr	r2, [r3, #0]
 800da22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da24:	009b      	lsls	r3, r3, #2
 800da26:	441a      	add	r2, r3
 800da28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da2a:	009b      	lsls	r3, r3, #2
 800da2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800da2e:	440b      	add	r3, r1
 800da30:	6812      	ldr	r2, [r2, #0]
 800da32:	601a      	str	r2, [r3, #0]
	 				FFTdata[i*2] = *(dataRecive[0]+i);
 800da34:	4b28      	ldr	r3, [pc, #160]	; (800dad8 <FFT_Thread+0x118>)
 800da36:	681a      	ldr	r2, [r3, #0]
 800da38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da3a:	009b      	lsls	r3, r3, #2
 800da3c:	441a      	add	r2, r3
 800da3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da40:	005b      	lsls	r3, r3, #1
 800da42:	6812      	ldr	r2, [r2, #0]
 800da44:	4927      	ldr	r1, [pc, #156]	; (800dae4 <FFT_Thread+0x124>)
 800da46:	009b      	lsls	r3, r3, #2
 800da48:	440b      	add	r3, r1
 800da4a:	601a      	str	r2, [r3, #0]
	 				FFTdata[i*2+1] = 0; // data format like
 800da4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da4e:	005b      	lsls	r3, r3, #1
 800da50:	3301      	adds	r3, #1
 800da52:	4a24      	ldr	r2, [pc, #144]	; (800dae4 <FFT_Thread+0x124>)
 800da54:	009b      	lsls	r3, r3, #2
 800da56:	4413      	add	r3, r2
 800da58:	f04f 0200 	mov.w	r2, #0
 800da5c:	601a      	str	r2, [r3, #0]
	 			for(uint32_t i = 0; i<dataLength; i++)
 800da5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da60:	3301      	adds	r3, #1
 800da62:	637b      	str	r3, [r7, #52]	; 0x34
 800da64:	4b20      	ldr	r3, [pc, #128]	; (800dae8 <FFT_Thread+0x128>)
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da6a:	429a      	cmp	r2, r3
 800da6c:	d3d7      	bcc.n	800da1e <FFT_Thread+0x5e>
                    /*TODO:transmit rawdata by BLE
	 				20220301--by Wayne*/
//	 				BLE_RawdatatoINT[i]=rawdataBuffer[i]*1000000;
	 			}

	 			if(xStatus == pdPASS)
 800da6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da70:	2b01      	cmp	r3, #1
 800da72:	d1a9      	bne.n	800d9c8 <FFT_Thread+0x8>
	 			{

	 				/*TODO: Process the data through the CFFT/CIFFT module */
	 				arm_cfft_f32(&arm_cfft_sR_f32_len4096, FFTdata, ifftFlag, doBitReverse);
 800da74:	4b1d      	ldr	r3, [pc, #116]	; (800daec <FFT_Thread+0x12c>)
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	b2da      	uxtb	r2, r3
 800da7a:	4b1d      	ldr	r3, [pc, #116]	; (800daf0 <FFT_Thread+0x130>)
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	b2db      	uxtb	r3, r3
 800da80:	4918      	ldr	r1, [pc, #96]	; (800dae4 <FFT_Thread+0x124>)
 800da82:	481c      	ldr	r0, [pc, #112]	; (800daf4 <FFT_Thread+0x134>)
 800da84:	f7fc fd09 	bl	800a49a <arm_cfft_f32>

	 				/*TODO: Process the data through the Complex Magnitude Module for
	 				calculating the magnitude at each bin */
	 				arm_cmplx_mag_f32(FFTdata, FFTRawData, fftSize);
 800da88:	4b1b      	ldr	r3, [pc, #108]	; (800daf8 <FFT_Thread+0x138>)
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	461a      	mov	r2, r3
 800da8e:	491b      	ldr	r1, [pc, #108]	; (800dafc <FFT_Thread+0x13c>)
 800da90:	4814      	ldr	r0, [pc, #80]	; (800dae4 <FFT_Thread+0x124>)
 800da92:	f7fb f825 	bl	8008ae0 <arm_cmplx_mag_f32>

	 				/*TODO:calculating the Calculate_CosineSimilarity with sample wave
	 				  20220413--by Wayne*/
	 				uint16_t datalength = 1639;//CosineSimilarity datalength 1KHz
 800da96:	f240 6367 	movw	r3, #1639	; 0x667
 800da9a:	84fb      	strh	r3, [r7, #38]	; 0x26
//	 				statistic_value.Statistic_CosSimilarity = Calculate_CosineSimilarity(&SampleWaveFFT, &SampleWaveFFT2, datalength);
	 				statistic_value.Statistic_CosSimilarity = Calculate_CosineSimilarity(&SampleWaveFFT, &FFTRawData, datalength);
 800da9c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800da9e:	461a      	mov	r2, r3
 800daa0:	4916      	ldr	r1, [pc, #88]	; (800dafc <FFT_Thread+0x13c>)
 800daa2:	4817      	ldr	r0, [pc, #92]	; (800db00 <FFT_Thread+0x140>)
 800daa4:	f7fe fbcc 	bl	800c240 <Calculate_CosineSimilarity>
 800daa8:	eef0 7a40 	vmov.f32	s15, s0
 800daac:	4b15      	ldr	r3, [pc, #84]	; (800db04 <FFT_Thread+0x144>)
 800daae:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
//	 				statistic_value.Statistic_CosSimilarity = Calculate_CosineSimilarity(&data1, &data2, datalength);
                    
	 				/*TODO: Calculates maxValue and returns corresponding BIN value */
	 				arm_max_f32(FFTRawData, 2048, &FFTmaxValue, &FFTMaxValueIndex);
 800dab2:	4b15      	ldr	r3, [pc, #84]	; (800db08 <FFT_Thread+0x148>)
 800dab4:	4a15      	ldr	r2, [pc, #84]	; (800db0c <FFT_Thread+0x14c>)
 800dab6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800daba:	4810      	ldr	r0, [pc, #64]	; (800dafc <FFT_Thread+0x13c>)
 800dabc:	f7fb f8bc 	bl	8008c38 <arm_max_f32>
	 				 *
	 				 * */

	 				//2021/0218/George
	 				//TODO: Calculate displacement the max value condition is small than 20Hz
	 				FFTMaxValueIndex = ( FFTMaxValueIndex == 0 ) ? FFTMaxValueIndex+1 : FFTMaxValueIndex;
 800dac0:	4b11      	ldr	r3, [pc, #68]	; (800db08 <FFT_Thread+0x148>)
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d123      	bne.n	800db10 <FFT_Thread+0x150>
 800dac8:	4b0f      	ldr	r3, [pc, #60]	; (800db08 <FFT_Thread+0x148>)
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	3301      	adds	r3, #1
 800dace:	e021      	b.n	800db14 <FFT_Thread+0x154>
 800dad0:	20002f78 	.word	0x20002f78
 800dad4:	20007338 	.word	0x20007338
 800dad8:	2000b33c 	.word	0x2000b33c
 800dadc:	20002d58 	.word	0x20002d58
 800dae0:	2001733c 	.word	0x2001733c
 800dae4:	2000f33c 	.word	0x2000f33c
 800dae8:	20002fb4 	.word	0x20002fb4
 800daec:	20002fa0 	.word	0x20002fa0
 800daf0:	20000010 	.word	0x20000010
 800daf4:	0802b794 	.word	0x0802b794
 800daf8:	2000000c 	.word	0x2000000c
 800dafc:	2000733c 	.word	0x2000733c
 800db00:	20000664 	.word	0x20000664
 800db04:	2000021c 	.word	0x2000021c
 800db08:	20002fa4 	.word	0x20002fa4
 800db0c:	20002fa8 	.word	0x20002fa8
 800db10:	4ba3      	ldr	r3, [pc, #652]	; (800dda0 <FFT_Thread+0x3e0>)
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	4aa2      	ldr	r2, [pc, #648]	; (800dda0 <FFT_Thread+0x3e0>)
 800db16:	6013      	str	r3, [r2, #0]

	 				//2021/0222/George
	 				//TODO: frequency equal samplingRate / datalength
	 				float frequencyResolution = (float)samplingRate/(float)fftSize;
 800db18:	4ba2      	ldr	r3, [pc, #648]	; (800dda4 <FFT_Thread+0x3e4>)
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	ee07 3a90 	vmov	s15, r3
 800db20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db24:	4ba0      	ldr	r3, [pc, #640]	; (800dda8 <FFT_Thread+0x3e8>)
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	ee07 3a90 	vmov	s15, r3
 800db2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800db30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db34:	edc7 7a08 	vstr	s15, [r7, #32]
	 				float integral = 2 * 3.1415926 * FFTMaxValueIndex * frequencyResolution;
 800db38:	4b99      	ldr	r3, [pc, #612]	; (800dda0 <FFT_Thread+0x3e0>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	ee07 3a90 	vmov	s15, r3
 800db40:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800db44:	ed9f 6b94 	vldr	d6, [pc, #592]	; 800dd98 <FFT_Thread+0x3d8>
 800db48:	ee27 6b06 	vmul.f64	d6, d7, d6
 800db4c:	edd7 7a08 	vldr	s15, [r7, #32]
 800db50:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800db54:	ee26 7b07 	vmul.f64	d7, d6, d7
 800db58:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800db5c:	edc7 7a07 	vstr	s15, [r7, #28]

	 				//TODO: max acceleration value (peak) is frequency domain *2/datalength
	 				float AccelerationFFTmaxValue = FFTmaxValue * 2 / dataLength;
 800db60:	4b92      	ldr	r3, [pc, #584]	; (800ddac <FFT_Thread+0x3ec>)
 800db62:	edd3 7a00 	vldr	s15, [r3]
 800db66:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800db6a:	4b91      	ldr	r3, [pc, #580]	; (800ddb0 <FFT_Thread+0x3f0>)
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	ee07 3a90 	vmov	s15, r3
 800db72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800db76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db7a:	edc7 7a06 	vstr	s15, [r7, #24]

	 				//TODO: turn acceleration to velocity (peak), should acceleration * g / (2 * pi * f) unit is mm/s
	 				float VelocityFFTmaxValue = AccelerationFFTmaxValue * 9807 /(2 * 3.1415926 * FFTMaxValueIndex * frequencyResolution);
 800db7e:	edd7 7a06 	vldr	s15, [r7, #24]
 800db82:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 800ddb4 <FFT_Thread+0x3f4>
 800db86:	ee67 7a87 	vmul.f32	s15, s15, s14
 800db8a:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800db8e:	4b84      	ldr	r3, [pc, #528]	; (800dda0 <FFT_Thread+0x3e0>)
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	ee07 3a90 	vmov	s15, r3
 800db96:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800db9a:	ed9f 6b7f 	vldr	d6, [pc, #508]	; 800dd98 <FFT_Thread+0x3d8>
 800db9e:	ee27 6b06 	vmul.f64	d6, d7, d6
 800dba2:	edd7 7a08 	vldr	s15, [r7, #32]
 800dba6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800dbaa:	ee26 6b07 	vmul.f64	d6, d6, d7
 800dbae:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800dbb2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800dbb6:	edc7 7a05 	vstr	s15, [r7, #20]

	 				//TODO: turn velocity to displacement (peak), should / (2 * pi *f) unit mm
	 				float DisplacementFFTmaxValue = VelocityFFTmaxValue /(2 * 3.1415926 * FFTMaxValueIndex * frequencyResolution);
 800dbba:	edd7 7a05 	vldr	s15, [r7, #20]
 800dbbe:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800dbc2:	4b77      	ldr	r3, [pc, #476]	; (800dda0 <FFT_Thread+0x3e0>)
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	ee07 3a90 	vmov	s15, r3
 800dbca:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800dbce:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800dd98 <FFT_Thread+0x3d8>
 800dbd2:	ee27 6b06 	vmul.f64	d6, d7, d6
 800dbd6:	edd7 7a08 	vldr	s15, [r7, #32]
 800dbda:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800dbde:	ee26 6b07 	vmul.f64	d6, d6, d7
 800dbe2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800dbe6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800dbea:	edc7 7a04 	vstr	s15, [r7, #16]

	 				//TODO: turn displacement peak to (peak to peak)
	 				float DisplacementP2pFFTmaxValue = DisplacementFFTmaxValue * 2;
 800dbee:	edd7 7a04 	vldr	s15, [r7, #16]
 800dbf2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800dbf6:	edc7 7a03 	vstr	s15, [r7, #12]
	 				//FFTmaxValue = FFTmaxValue*2 / dataLength;



	 				/*TODO: Remove DC component*/
	 				FFTRawData[1] = 0;
 800dbfa:	4b6f      	ldr	r3, [pc, #444]	; (800ddb8 <FFT_Thread+0x3f8>)
 800dbfc:	f04f 0200 	mov.w	r2, #0
 800dc00:	605a      	str	r2, [r3, #4]
	 				FFTRawData[2] = 0;
 800dc02:	4b6d      	ldr	r3, [pc, #436]	; (800ddb8 <FFT_Thread+0x3f8>)
 800dc04:	f04f 0200 	mov.w	r2, #0
 800dc08:	609a      	str	r2, [r3, #8]
	 				FFTRawData[3] = 0;
 800dc0a:	4b6b      	ldr	r3, [pc, #428]	; (800ddb8 <FFT_Thread+0x3f8>)
 800dc0c:	f04f 0200 	mov.w	r2, #0
 800dc10:	60da      	str	r2, [r3, #12]
	 				FFTRawData[4] = 0;
 800dc12:	4b69      	ldr	r3, [pc, #420]	; (800ddb8 <FFT_Thread+0x3f8>)
 800dc14:	f04f 0200 	mov.w	r2, #0
 800dc18:	611a      	str	r2, [r3, #16]
	 				FFTRawData[5] = 0;
 800dc1a:	4b67      	ldr	r3, [pc, #412]	; (800ddb8 <FFT_Thread+0x3f8>)
 800dc1c:	f04f 0200 	mov.w	r2, #0
 800dc20:	615a      	str	r2, [r3, #20]
	 				FFTRawData[6] = 0;
 800dc22:	4b65      	ldr	r3, [pc, #404]	; (800ddb8 <FFT_Thread+0x3f8>)
 800dc24:	f04f 0200 	mov.w	r2, #0
 800dc28:	619a      	str	r2, [r3, #24]
	 				FFTRawData[7] = 0;
 800dc2a:	4b63      	ldr	r3, [pc, #396]	; (800ddb8 <FFT_Thread+0x3f8>)
 800dc2c:	f04f 0200 	mov.w	r2, #0
 800dc30:	61da      	str	r2, [r3, #28]
	 				FFTRawData[8] = 0;
 800dc32:	4b61      	ldr	r3, [pc, #388]	; (800ddb8 <FFT_Thread+0x3f8>)
 800dc34:	f04f 0200 	mov.w	r2, #0
 800dc38:	621a      	str	r2, [r3, #32]
	 				/*     |                                                                   |
	 				 *     |                  |                             |                  |
	 				 *     |        |         |                             |         |        |
	 				 *  FFT[10] FFT[1000] FFT[1500] FFT[2047] FFT[2048] FFT[2596] FFT[3096] FFT[4086]
	 				 * */
	 				FFTRawData[4088] = 0;
 800dc3a:	4b5f      	ldr	r3, [pc, #380]	; (800ddb8 <FFT_Thread+0x3f8>)
 800dc3c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800dc40:	f503 637e 	add.w	r3, r3, #4064	; 0xfe0
 800dc44:	f04f 0200 	mov.w	r2, #0
 800dc48:	601a      	str	r2, [r3, #0]
	 				FFTRawData[4089] = 0;
 800dc4a:	4b5b      	ldr	r3, [pc, #364]	; (800ddb8 <FFT_Thread+0x3f8>)
 800dc4c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800dc50:	f603 73e4 	addw	r3, r3, #4068	; 0xfe4
 800dc54:	f04f 0200 	mov.w	r2, #0
 800dc58:	601a      	str	r2, [r3, #0]
	 				FFTRawData[4090] = 0;
 800dc5a:	4b57      	ldr	r3, [pc, #348]	; (800ddb8 <FFT_Thread+0x3f8>)
 800dc5c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800dc60:	f603 73e8 	addw	r3, r3, #4072	; 0xfe8
 800dc64:	f04f 0200 	mov.w	r2, #0
 800dc68:	601a      	str	r2, [r3, #0]
	 				FFTRawData[4091] = 0;
 800dc6a:	4b53      	ldr	r3, [pc, #332]	; (800ddb8 <FFT_Thread+0x3f8>)
 800dc6c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800dc70:	f603 73ec 	addw	r3, r3, #4076	; 0xfec
 800dc74:	f04f 0200 	mov.w	r2, #0
 800dc78:	601a      	str	r2, [r3, #0]
	 				FFTRawData[4092] = 0;
 800dc7a:	4b4f      	ldr	r3, [pc, #316]	; (800ddb8 <FFT_Thread+0x3f8>)
 800dc7c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800dc80:	f503 637f 	add.w	r3, r3, #4080	; 0xff0
 800dc84:	f04f 0200 	mov.w	r2, #0
 800dc88:	601a      	str	r2, [r3, #0]
	 				FFTRawData[4093] = 0;
 800dc8a:	4b4b      	ldr	r3, [pc, #300]	; (800ddb8 <FFT_Thread+0x3f8>)
 800dc8c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800dc90:	f603 73f4 	addw	r3, r3, #4084	; 0xff4
 800dc94:	f04f 0200 	mov.w	r2, #0
 800dc98:	601a      	str	r2, [r3, #0]
	 				FFTRawData[4094] = 0;
 800dc9a:	4b47      	ldr	r3, [pc, #284]	; (800ddb8 <FFT_Thread+0x3f8>)
 800dc9c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800dca0:	f603 73f8 	addw	r3, r3, #4088	; 0xff8
 800dca4:	f04f 0200 	mov.w	r2, #0
 800dca8:	601a      	str	r2, [r3, #0]
	 				FFTRawData[4095] = 0;
 800dcaa:	4b43      	ldr	r3, [pc, #268]	; (800ddb8 <FFT_Thread+0x3f8>)
 800dcac:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800dcb0:	f603 73fc 	addw	r3, r3, #4092	; 0xffc
 800dcb4:	f04f 0200 	mov.w	r2, #0
 800dcb8:	601a      	str	r2, [r3, #0]


					//2021/0319/George
	 				/*TODO: Calculate time-domain math function*/
	 				arm_max_f32(rawdataBuffer, dataLength, &statistic_value.Statistic_max, &maxtestIndex);
 800dcba:	4b3d      	ldr	r3, [pc, #244]	; (800ddb0 <FFT_Thread+0x3f0>)
 800dcbc:	6819      	ldr	r1, [r3, #0]
 800dcbe:	4b3f      	ldr	r3, [pc, #252]	; (800ddbc <FFT_Thread+0x3fc>)
 800dcc0:	4a3f      	ldr	r2, [pc, #252]	; (800ddc0 <FFT_Thread+0x400>)
 800dcc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcc4:	f7fa ffb8 	bl	8008c38 <arm_max_f32>
	 				arm_min_f32(rawdataBuffer, dataLength, &statistic_value.Statistic_min, &mintestIndex);
 800dcc8:	4b39      	ldr	r3, [pc, #228]	; (800ddb0 <FFT_Thread+0x3f0>)
 800dcca:	6819      	ldr	r1, [r3, #0]
 800dccc:	4b3d      	ldr	r3, [pc, #244]	; (800ddc4 <FFT_Thread+0x404>)
 800dcce:	4a3e      	ldr	r2, [pc, #248]	; (800ddc8 <FFT_Thread+0x408>)
 800dcd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcd2:	f7fb f8b6 	bl	8008e42 <arm_min_f32>
	 				arm_var_f32(rawdataBuffer, dataLength, &statistic_value.Statistic_var);
 800dcd6:	4b36      	ldr	r3, [pc, #216]	; (800ddb0 <FFT_Thread+0x3f0>)
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	4a3c      	ldr	r2, [pc, #240]	; (800ddcc <FFT_Thread+0x40c>)
 800dcdc:	4619      	mov	r1, r3
 800dcde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dce0:	f7fb fae0 	bl	80092a4 <arm_var_f32>
	 				arm_rms_f32(rawdataBuffer, dataLength, &statistic_value.Statistic_rms);
 800dce4:	4b32      	ldr	r3, [pc, #200]	; (800ddb0 <FFT_Thread+0x3f0>)
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	4a39      	ldr	r2, [pc, #228]	; (800ddd0 <FFT_Thread+0x410>)
 800dcea:	4619      	mov	r1, r3
 800dcec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcee:	f7fb f960 	bl	8008fb2 <arm_rms_f32>
	 				arm_mean_f32(rawdataBuffer, dataLength, &statistic_value.Statistic_mean);
 800dcf2:	4b2f      	ldr	r3, [pc, #188]	; (800ddb0 <FFT_Thread+0x3f0>)
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	4a37      	ldr	r2, [pc, #220]	; (800ddd4 <FFT_Thread+0x414>)
 800dcf8:	4619      	mov	r1, r3
 800dcfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcfc:	f7fb f832 	bl	8008d64 <arm_mean_f32>
	 				arm_std_f32(rawdataBuffer, dataLength, &statistic_value.Statistic_std);
 800dd00:	4b2b      	ldr	r3, [pc, #172]	; (800ddb0 <FFT_Thread+0x3f0>)
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	4a34      	ldr	r2, [pc, #208]	; (800ddd8 <FFT_Thread+0x418>)
 800dd06:	4619      	mov	r1, r3
 800dd08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd0a:	f7fb f9ef 	bl	80090ec <arm_std_f32>
	 				statistic_value.Statistic_crestFactor = statistic_value.Statistic_max/statistic_value.Statistic_rms;
 800dd0e:	4b2c      	ldr	r3, [pc, #176]	; (800ddc0 <FFT_Thread+0x400>)
 800dd10:	edd3 6a00 	vldr	s13, [r3]
 800dd14:	4b2a      	ldr	r3, [pc, #168]	; (800ddc0 <FFT_Thread+0x400>)
 800dd16:	ed93 7a03 	vldr	s14, [r3, #12]
 800dd1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dd1e:	4b28      	ldr	r3, [pc, #160]	; (800ddc0 <FFT_Thread+0x400>)
 800dd20:	edc3 7a07 	vstr	s15, [r3, #28]
	 				statistic_value.Statistic_p2p = statistic_value.Statistic_max - statistic_value.Statistic_min;
 800dd24:	4b26      	ldr	r3, [pc, #152]	; (800ddc0 <FFT_Thread+0x400>)
 800dd26:	ed93 7a00 	vldr	s14, [r3]
 800dd2a:	4b25      	ldr	r3, [pc, #148]	; (800ddc0 <FFT_Thread+0x400>)
 800dd2c:	edd3 7a01 	vldr	s15, [r3, #4]
 800dd30:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dd34:	4b22      	ldr	r3, [pc, #136]	; (800ddc0 <FFT_Thread+0x400>)
 800dd36:	edc3 7a06 	vstr	s15, [r3, #24]

	 				//2021/03/22/George
	 				//TODO: calculate Statistic_Displacementp2p using time-domain p2p
	 				//formula : speedp2p = p2p / (2*pi*f), displacement = displacementp2p = speedp2p / (2*pi*f)
	 				statistic_value.Statistic_Displacementp2p = statistic_value.Statistic_p2p*9807 / (integral * integral);
 800dd3a:	4b21      	ldr	r3, [pc, #132]	; (800ddc0 <FFT_Thread+0x400>)
 800dd3c:	edd3 7a06 	vldr	s15, [r3, #24]
 800dd40:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800ddb4 <FFT_Thread+0x3f4>
 800dd44:	ee67 6a87 	vmul.f32	s13, s15, s14
 800dd48:	edd7 7a07 	vldr	s15, [r7, #28]
 800dd4c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800dd50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dd54:	4b1a      	ldr	r3, [pc, #104]	; (800ddc0 <FFT_Thread+0x400>)
 800dd56:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	 				//2021/02/01/George start compute
	 				/*TODO: Calculate skewness and kurtosis will cause delay*/
	 				statistic_value.Statistic_kurtosis = Calculate_kurtosis(rawdataBuffer, dataLength);
 800dd5a:	4b15      	ldr	r3, [pc, #84]	; (800ddb0 <FFT_Thread+0x3f0>)
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	4619      	mov	r1, r3
 800dd60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd62:	f7fd ffb7 	bl	800bcd4 <Calculate_kurtosis>
 800dd66:	eef0 7a40 	vmov.f32	s15, s0
 800dd6a:	4b15      	ldr	r3, [pc, #84]	; (800ddc0 <FFT_Thread+0x400>)
 800dd6c:	edc3 7a08 	vstr	s15, [r3, #32]
	 				statistic_value.Statistic_skewness = Calculate_skewness(rawdataBuffer, dataLength);
 800dd70:	4b0f      	ldr	r3, [pc, #60]	; (800ddb0 <FFT_Thread+0x3f0>)
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	4619      	mov	r1, r3
 800dd76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd78:	f7fd ff5e 	bl	800bc38 <Calculate_skewness>
 800dd7c:	eef0 7a40 	vmov.f32	s15, s0
 800dd80:	4b0f      	ldr	r3, [pc, #60]	; (800ddc0 <FFT_Thread+0x400>)
 800dd82:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	 				//2021/0319/George
	 				//TODO:free rawdataBuffer memory
	 				vPortFree(rawdataBuffer);
 800dd86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd88:	f00a fcbe 	bl	8018708 <vPortFree>

					//2021/0319/George
	 				/*TODO: Calculate frequency-domain math function*/

	 				/* focus broad band functionality */
					for(int i =0; i<sizeof(FreqSettingValueList)/sizeof(FreqMaxMin); i++)
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	633b      	str	r3, [r7, #48]	; 0x30
 800dd90:	e035      	b.n	800ddfe <FFT_Thread+0x43e>
 800dd92:	bf00      	nop
 800dd94:	f3af 8000 	nop.w
 800dd98:	4d12d84a 	.word	0x4d12d84a
 800dd9c:	401921fb 	.word	0x401921fb
 800dda0:	20002fa4 	.word	0x20002fa4
 800dda4:	20000008 	.word	0x20000008
 800dda8:	2000000c 	.word	0x2000000c
 800ddac:	20002fa8 	.word	0x20002fa8
 800ddb0:	20002fb4 	.word	0x20002fb4
 800ddb4:	46193c00 	.word	0x46193c00
 800ddb8:	2000733c 	.word	0x2000733c
 800ddbc:	20002fac 	.word	0x20002fac
 800ddc0:	2000021c 	.word	0x2000021c
 800ddc4:	20002fb0 	.word	0x20002fb0
 800ddc8:	20000220 	.word	0x20000220
 800ddcc:	20000224 	.word	0x20000224
 800ddd0:	20000228 	.word	0x20000228
 800ddd4:	2000022c 	.word	0x2000022c
 800ddd8:	20000230 	.word	0x20000230
					{
						settingValue = (&freqSettingValueList.range1+i);
 800dddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddde:	00db      	lsls	r3, r3, #3
 800dde0:	4abc      	ldr	r2, [pc, #752]	; (800e0d4 <FFT_Thread+0x714>)
 800dde2:	4413      	add	r3, r2
 800dde4:	4abc      	ldr	r2, [pc, #752]	; (800e0d8 <FFT_Thread+0x718>)
 800dde6:	6013      	str	r3, [r2, #0]
						Calculate_FreqBandRMS(FFTRawData, settingValue, i);
 800dde8:	4bbb      	ldr	r3, [pc, #748]	; (800e0d8 <FFT_Thread+0x718>)
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddee:	b252      	sxtb	r2, r2
 800ddf0:	4619      	mov	r1, r3
 800ddf2:	48ba      	ldr	r0, [pc, #744]	; (800e0dc <FFT_Thread+0x71c>)
 800ddf4:	f7fd ff98 	bl	800bd28 <Calculate_FreqBandRMS>
					for(int i =0; i<sizeof(FreqSettingValueList)/sizeof(FreqMaxMin); i++)
 800ddf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddfa:	3301      	adds	r3, #1
 800ddfc:	633b      	str	r3, [r7, #48]	; 0x30
 800ddfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de00:	2b02      	cmp	r3, #2
 800de02:	d9eb      	bls.n	800dddc <FFT_Thread+0x41c>
					}
					/* focus broad band functionality */

					//2021/0319/George
	 				/*TODO: Calculate acceleration, velocity, displacement RMS*/
	 				Calculate_FreqOverAll(FFTRawData, dataLength);
 800de04:	4bb6      	ldr	r3, [pc, #728]	; (800e0e0 <FFT_Thread+0x720>)
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	4619      	mov	r1, r3
 800de0a:	48b4      	ldr	r0, [pc, #720]	; (800e0dc <FFT_Thread+0x71c>)
 800de0c:	f7fe f8a8 	bl	800bf60 <Calculate_FreqOverAll>



	 				/*TODO: to calculate 3 times moving average*/
	 				averageTimes++;
 800de10:	4bb4      	ldr	r3, [pc, #720]	; (800e0e4 <FFT_Thread+0x724>)
 800de12:	781b      	ldrb	r3, [r3, #0]
 800de14:	3301      	adds	r3, #1
 800de16:	b2da      	uxtb	r2, r3
 800de18:	4bb2      	ldr	r3, [pc, #712]	; (800e0e4 <FFT_Thread+0x724>)
 800de1a:	701a      	strb	r2, [r3, #0]

	 				//2021/0203/George
	 				//TODO:new parameter p2p
	 				if(averageTimes == 1)
 800de1c:	4bb1      	ldr	r3, [pc, #708]	; (800e0e4 <FFT_Thread+0x724>)
 800de1e:	781b      	ldrb	r3, [r3, #0]
 800de20:	2b01      	cmp	r3, #1
 800de22:	d146      	bne.n	800deb2 <FFT_Thread+0x4f2>
	 				{
	 					statistic_value.Statistic_max_Temp = statistic_value.Statistic_max;
 800de24:	4bb0      	ldr	r3, [pc, #704]	; (800e0e8 <FFT_Thread+0x728>)
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	4aaf      	ldr	r2, [pc, #700]	; (800e0e8 <FFT_Thread+0x728>)
 800de2a:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
	 					statistic_value.Statistic_min_Temp = statistic_value.Statistic_min;
 800de2e:	4bae      	ldr	r3, [pc, #696]	; (800e0e8 <FFT_Thread+0x728>)
 800de30:	685a      	ldr	r2, [r3, #4]
 800de32:	4bad      	ldr	r3, [pc, #692]	; (800e0e8 <FFT_Thread+0x728>)
 800de34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800de38:	601a      	str	r2, [r3, #0]
	 					statistic_value.Statistic_p2p_Temp = statistic_value.Statistic_p2p;
 800de3a:	4bab      	ldr	r3, [pc, #684]	; (800e0e8 <FFT_Thread+0x728>)
 800de3c:	699a      	ldr	r2, [r3, #24]
 800de3e:	4baa      	ldr	r3, [pc, #680]	; (800e0e8 <FFT_Thread+0x728>)
 800de40:	f203 4314 	addw	r3, r3, #1044	; 0x414
 800de44:	601a      	str	r2, [r3, #0]
	 					statistic_value.Statistic_var_Temp = statistic_value.Statistic_var;
 800de46:	4ba8      	ldr	r3, [pc, #672]	; (800e0e8 <FFT_Thread+0x728>)
 800de48:	689a      	ldr	r2, [r3, #8]
 800de4a:	4ba7      	ldr	r3, [pc, #668]	; (800e0e8 <FFT_Thread+0x728>)
 800de4c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800de50:	601a      	str	r2, [r3, #0]
	 					statistic_value.Statistic_rms_Temp = statistic_value.Statistic_rms;
 800de52:	4ba5      	ldr	r3, [pc, #660]	; (800e0e8 <FFT_Thread+0x728>)
 800de54:	68da      	ldr	r2, [r3, #12]
 800de56:	4ba4      	ldr	r3, [pc, #656]	; (800e0e8 <FFT_Thread+0x728>)
 800de58:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800de5c:	601a      	str	r2, [r3, #0]
	 					statistic_value.Statistic_mean_Temp = statistic_value.Statistic_mean;
 800de5e:	4ba2      	ldr	r3, [pc, #648]	; (800e0e8 <FFT_Thread+0x728>)
 800de60:	691a      	ldr	r2, [r3, #16]
 800de62:	4ba1      	ldr	r3, [pc, #644]	; (800e0e8 <FFT_Thread+0x728>)
 800de64:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800de68:	601a      	str	r2, [r3, #0]
	 					statistic_value.Statistic_std_Temp = statistic_value.Statistic_std;
 800de6a:	4b9f      	ldr	r3, [pc, #636]	; (800e0e8 <FFT_Thread+0x728>)
 800de6c:	695a      	ldr	r2, [r3, #20]
 800de6e:	4b9e      	ldr	r3, [pc, #632]	; (800e0e8 <FFT_Thread+0x728>)
 800de70:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800de74:	601a      	str	r2, [r3, #0]
	 					statistic_value.Statistic_FreqOvall_Temp = statistic_value.Statistic_FreqOvall;
 800de76:	4b9c      	ldr	r3, [pc, #624]	; (800e0e8 <FFT_Thread+0x728>)
 800de78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800de7a:	4b9b      	ldr	r3, [pc, #620]	; (800e0e8 <FFT_Thread+0x728>)
 800de7c:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800de80:	601a      	str	r2, [r3, #0]
	 					statistic_value.Statistic_crestFactor_Temp = statistic_value.Statistic_crestFactor;
 800de82:	4b99      	ldr	r3, [pc, #612]	; (800e0e8 <FFT_Thread+0x728>)
 800de84:	69da      	ldr	r2, [r3, #28]
 800de86:	4b98      	ldr	r3, [pc, #608]	; (800e0e8 <FFT_Thread+0x728>)
 800de88:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800de8c:	601a      	str	r2, [r3, #0]
	 					statistic_value.Statistic_SpeedOvall_Temp = statistic_value.Statistic_SpeedOvall;
 800de8e:	4b96      	ldr	r3, [pc, #600]	; (800e0e8 <FFT_Thread+0x728>)
 800de90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de92:	4b95      	ldr	r3, [pc, #596]	; (800e0e8 <FFT_Thread+0x728>)
 800de94:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 800de98:	601a      	str	r2, [r3, #0]
	 					statistic_value.Statistic_kurtosis_Temp = statistic_value.Statistic_kurtosis;
 800de9a:	4b93      	ldr	r3, [pc, #588]	; (800e0e8 <FFT_Thread+0x728>)
 800de9c:	6a1a      	ldr	r2, [r3, #32]
 800de9e:	4b92      	ldr	r3, [pc, #584]	; (800e0e8 <FFT_Thread+0x728>)
 800dea0:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800dea4:	601a      	str	r2, [r3, #0]
	 					statistic_value.Statistic_skewness_Temp = statistic_value.Statistic_skewness;
 800dea6:	4b90      	ldr	r3, [pc, #576]	; (800e0e8 <FFT_Thread+0x728>)
 800dea8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800deaa:	4b8f      	ldr	r3, [pc, #572]	; (800e0e8 <FFT_Thread+0x728>)
 800deac:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 800deb0:	601a      	str	r2, [r3, #0]
	 				}
	 				if(averageTimes == 2)
 800deb2:	4b8c      	ldr	r3, [pc, #560]	; (800e0e4 <FFT_Thread+0x724>)
 800deb4:	781b      	ldrb	r3, [r3, #0]
 800deb6:	2b02      	cmp	r3, #2
 800deb8:	f040 80b0 	bne.w	800e01c <FFT_Thread+0x65c>
	 				{
	 					statistic_value.Statistic_max_Temp += statistic_value.Statistic_max;
 800debc:	4b8a      	ldr	r3, [pc, #552]	; (800e0e8 <FFT_Thread+0x728>)
 800debe:	ed93 7aff 	vldr	s14, [r3, #1020]	; 0x3fc
 800dec2:	4b89      	ldr	r3, [pc, #548]	; (800e0e8 <FFT_Thread+0x728>)
 800dec4:	edd3 7a00 	vldr	s15, [r3]
 800dec8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800decc:	4b86      	ldr	r3, [pc, #536]	; (800e0e8 <FFT_Thread+0x728>)
 800dece:	edc3 7aff 	vstr	s15, [r3, #1020]	; 0x3fc
	 					statistic_value.Statistic_min_Temp += statistic_value.Statistic_min;
 800ded2:	4b85      	ldr	r3, [pc, #532]	; (800e0e8 <FFT_Thread+0x728>)
 800ded4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ded8:	ed93 7a00 	vldr	s14, [r3]
 800dedc:	4b82      	ldr	r3, [pc, #520]	; (800e0e8 <FFT_Thread+0x728>)
 800dede:	edd3 7a01 	vldr	s15, [r3, #4]
 800dee2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dee6:	4b80      	ldr	r3, [pc, #512]	; (800e0e8 <FFT_Thread+0x728>)
 800dee8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800deec:	edc3 7a00 	vstr	s15, [r3]
	 					statistic_value.Statistic_p2p_Temp += statistic_value.Statistic_p2p;
 800def0:	4b7d      	ldr	r3, [pc, #500]	; (800e0e8 <FFT_Thread+0x728>)
 800def2:	f203 4314 	addw	r3, r3, #1044	; 0x414
 800def6:	ed93 7a00 	vldr	s14, [r3]
 800defa:	4b7b      	ldr	r3, [pc, #492]	; (800e0e8 <FFT_Thread+0x728>)
 800defc:	edd3 7a06 	vldr	s15, [r3, #24]
 800df00:	ee77 7a27 	vadd.f32	s15, s14, s15
 800df04:	4b78      	ldr	r3, [pc, #480]	; (800e0e8 <FFT_Thread+0x728>)
 800df06:	f203 4314 	addw	r3, r3, #1044	; 0x414
 800df0a:	edc3 7a00 	vstr	s15, [r3]
	 					statistic_value.Statistic_var_Temp += statistic_value.Statistic_var;
 800df0e:	4b76      	ldr	r3, [pc, #472]	; (800e0e8 <FFT_Thread+0x728>)
 800df10:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800df14:	ed93 7a00 	vldr	s14, [r3]
 800df18:	4b73      	ldr	r3, [pc, #460]	; (800e0e8 <FFT_Thread+0x728>)
 800df1a:	edd3 7a02 	vldr	s15, [r3, #8]
 800df1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800df22:	4b71      	ldr	r3, [pc, #452]	; (800e0e8 <FFT_Thread+0x728>)
 800df24:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800df28:	edc3 7a00 	vstr	s15, [r3]
	 					statistic_value.Statistic_rms_Temp += statistic_value.Statistic_rms;
 800df2c:	4b6e      	ldr	r3, [pc, #440]	; (800e0e8 <FFT_Thread+0x728>)
 800df2e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800df32:	ed93 7a00 	vldr	s14, [r3]
 800df36:	4b6c      	ldr	r3, [pc, #432]	; (800e0e8 <FFT_Thread+0x728>)
 800df38:	edd3 7a03 	vldr	s15, [r3, #12]
 800df3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800df40:	4b69      	ldr	r3, [pc, #420]	; (800e0e8 <FFT_Thread+0x728>)
 800df42:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800df46:	edc3 7a00 	vstr	s15, [r3]
	 					statistic_value.Statistic_mean_Temp += statistic_value.Statistic_mean;
 800df4a:	4b67      	ldr	r3, [pc, #412]	; (800e0e8 <FFT_Thread+0x728>)
 800df4c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800df50:	ed93 7a00 	vldr	s14, [r3]
 800df54:	4b64      	ldr	r3, [pc, #400]	; (800e0e8 <FFT_Thread+0x728>)
 800df56:	edd3 7a04 	vldr	s15, [r3, #16]
 800df5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800df5e:	4b62      	ldr	r3, [pc, #392]	; (800e0e8 <FFT_Thread+0x728>)
 800df60:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800df64:	edc3 7a00 	vstr	s15, [r3]
	 					statistic_value.Statistic_std_Temp += statistic_value.Statistic_std;
 800df68:	4b5f      	ldr	r3, [pc, #380]	; (800e0e8 <FFT_Thread+0x728>)
 800df6a:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800df6e:	ed93 7a00 	vldr	s14, [r3]
 800df72:	4b5d      	ldr	r3, [pc, #372]	; (800e0e8 <FFT_Thread+0x728>)
 800df74:	edd3 7a05 	vldr	s15, [r3, #20]
 800df78:	ee77 7a27 	vadd.f32	s15, s14, s15
 800df7c:	4b5a      	ldr	r3, [pc, #360]	; (800e0e8 <FFT_Thread+0x728>)
 800df7e:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800df82:	edc3 7a00 	vstr	s15, [r3]
	 					statistic_value.Statistic_FreqOvall_Temp += statistic_value.Statistic_FreqOvall;
 800df86:	4b58      	ldr	r3, [pc, #352]	; (800e0e8 <FFT_Thread+0x728>)
 800df88:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800df8c:	ed93 7a00 	vldr	s14, [r3]
 800df90:	4b55      	ldr	r3, [pc, #340]	; (800e0e8 <FFT_Thread+0x728>)
 800df92:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800df96:	ee77 7a27 	vadd.f32	s15, s14, s15
 800df9a:	4b53      	ldr	r3, [pc, #332]	; (800e0e8 <FFT_Thread+0x728>)
 800df9c:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800dfa0:	edc3 7a00 	vstr	s15, [r3]
	 					statistic_value.Statistic_crestFactor_Temp += statistic_value.Statistic_crestFactor;
 800dfa4:	4b50      	ldr	r3, [pc, #320]	; (800e0e8 <FFT_Thread+0x728>)
 800dfa6:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800dfaa:	ed93 7a00 	vldr	s14, [r3]
 800dfae:	4b4e      	ldr	r3, [pc, #312]	; (800e0e8 <FFT_Thread+0x728>)
 800dfb0:	edd3 7a07 	vldr	s15, [r3, #28]
 800dfb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dfb8:	4b4b      	ldr	r3, [pc, #300]	; (800e0e8 <FFT_Thread+0x728>)
 800dfba:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800dfbe:	edc3 7a00 	vstr	s15, [r3]
	 					statistic_value.Statistic_SpeedOvall_Temp += statistic_value.Statistic_SpeedOvall;
 800dfc2:	4b49      	ldr	r3, [pc, #292]	; (800e0e8 <FFT_Thread+0x728>)
 800dfc4:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 800dfc8:	ed93 7a00 	vldr	s14, [r3]
 800dfcc:	4b46      	ldr	r3, [pc, #280]	; (800e0e8 <FFT_Thread+0x728>)
 800dfce:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800dfd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dfd6:	4b44      	ldr	r3, [pc, #272]	; (800e0e8 <FFT_Thread+0x728>)
 800dfd8:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 800dfdc:	edc3 7a00 	vstr	s15, [r3]
	 					statistic_value.Statistic_kurtosis_Temp += statistic_value.Statistic_kurtosis;
 800dfe0:	4b41      	ldr	r3, [pc, #260]	; (800e0e8 <FFT_Thread+0x728>)
 800dfe2:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800dfe6:	ed93 7a00 	vldr	s14, [r3]
 800dfea:	4b3f      	ldr	r3, [pc, #252]	; (800e0e8 <FFT_Thread+0x728>)
 800dfec:	edd3 7a08 	vldr	s15, [r3, #32]
 800dff0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dff4:	4b3c      	ldr	r3, [pc, #240]	; (800e0e8 <FFT_Thread+0x728>)
 800dff6:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800dffa:	edc3 7a00 	vstr	s15, [r3]
	 					statistic_value.Statistic_skewness_Temp += statistic_value.Statistic_skewness;
 800dffe:	4b3a      	ldr	r3, [pc, #232]	; (800e0e8 <FFT_Thread+0x728>)
 800e000:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 800e004:	ed93 7a00 	vldr	s14, [r3]
 800e008:	4b37      	ldr	r3, [pc, #220]	; (800e0e8 <FFT_Thread+0x728>)
 800e00a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800e00e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e012:	4b35      	ldr	r3, [pc, #212]	; (800e0e8 <FFT_Thread+0x728>)
 800e014:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 800e018:	edc3 7a00 	vstr	s15, [r3]
	 				}
	 				if(averageTimes == 3)
 800e01c:	4b31      	ldr	r3, [pc, #196]	; (800e0e4 <FFT_Thread+0x724>)
 800e01e:	781b      	ldrb	r3, [r3, #0]
 800e020:	2b03      	cmp	r3, #3
 800e022:	f040 80e2 	bne.w	800e1ea <FFT_Thread+0x82a>
	 				{
	 					statistic_value.Statistic_max = (statistic_value.Statistic_max_Temp +
 800e026:	4b30      	ldr	r3, [pc, #192]	; (800e0e8 <FFT_Thread+0x728>)
 800e028:	ed93 7aff 	vldr	s14, [r3, #1020]	; 0x3fc
	 							statistic_value.Statistic_max) / 3;
 800e02c:	4b2e      	ldr	r3, [pc, #184]	; (800e0e8 <FFT_Thread+0x728>)
 800e02e:	edd3 7a00 	vldr	s15, [r3]
	 					statistic_value.Statistic_max = (statistic_value.Statistic_max_Temp +
 800e032:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_max) / 3;
 800e036:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800e03a:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_max = (statistic_value.Statistic_max_Temp +
 800e03e:	4b2a      	ldr	r3, [pc, #168]	; (800e0e8 <FFT_Thread+0x728>)
 800e040:	edc3 7a00 	vstr	s15, [r3]
	 					statistic_value.Statistic_min = (statistic_value.Statistic_min_Temp +
 800e044:	4b28      	ldr	r3, [pc, #160]	; (800e0e8 <FFT_Thread+0x728>)
 800e046:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e04a:	ed93 7a00 	vldr	s14, [r3]
	 							statistic_value.Statistic_min) / 3;
 800e04e:	4b26      	ldr	r3, [pc, #152]	; (800e0e8 <FFT_Thread+0x728>)
 800e050:	edd3 7a01 	vldr	s15, [r3, #4]
	 					statistic_value.Statistic_min = (statistic_value.Statistic_min_Temp +
 800e054:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_min) / 3;
 800e058:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800e05c:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_min = (statistic_value.Statistic_min_Temp +
 800e060:	4b21      	ldr	r3, [pc, #132]	; (800e0e8 <FFT_Thread+0x728>)
 800e062:	edc3 7a01 	vstr	s15, [r3, #4]
	 					statistic_value.Statistic_p2p = (statistic_value.Statistic_p2p_Temp +
 800e066:	4b20      	ldr	r3, [pc, #128]	; (800e0e8 <FFT_Thread+0x728>)
 800e068:	f203 4314 	addw	r3, r3, #1044	; 0x414
 800e06c:	ed93 7a00 	vldr	s14, [r3]
								statistic_value.Statistic_p2p) / 3;
 800e070:	4b1d      	ldr	r3, [pc, #116]	; (800e0e8 <FFT_Thread+0x728>)
 800e072:	edd3 7a06 	vldr	s15, [r3, #24]
	 					statistic_value.Statistic_p2p = (statistic_value.Statistic_p2p_Temp +
 800e076:	ee37 7a27 	vadd.f32	s14, s14, s15
								statistic_value.Statistic_p2p) / 3;
 800e07a:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800e07e:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_p2p = (statistic_value.Statistic_p2p_Temp +
 800e082:	4b19      	ldr	r3, [pc, #100]	; (800e0e8 <FFT_Thread+0x728>)
 800e084:	edc3 7a06 	vstr	s15, [r3, #24]
	 					statistic_value.Statistic_var = (statistic_value.Statistic_var_Temp +
 800e088:	4b17      	ldr	r3, [pc, #92]	; (800e0e8 <FFT_Thread+0x728>)
 800e08a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e08e:	ed93 7a00 	vldr	s14, [r3]
	 							statistic_value.Statistic_var) / 3;
 800e092:	4b15      	ldr	r3, [pc, #84]	; (800e0e8 <FFT_Thread+0x728>)
 800e094:	edd3 7a02 	vldr	s15, [r3, #8]
	 					statistic_value.Statistic_var = (statistic_value.Statistic_var_Temp +
 800e098:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_var) / 3;
 800e09c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800e0a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_var = (statistic_value.Statistic_var_Temp +
 800e0a4:	4b10      	ldr	r3, [pc, #64]	; (800e0e8 <FFT_Thread+0x728>)
 800e0a6:	edc3 7a02 	vstr	s15, [r3, #8]
	 					statistic_value.Statistic_rms = (statistic_value.Statistic_rms_Temp +
 800e0aa:	4b0f      	ldr	r3, [pc, #60]	; (800e0e8 <FFT_Thread+0x728>)
 800e0ac:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800e0b0:	ed93 7a00 	vldr	s14, [r3]
	 							statistic_value.Statistic_rms) / 3;
 800e0b4:	4b0c      	ldr	r3, [pc, #48]	; (800e0e8 <FFT_Thread+0x728>)
 800e0b6:	edd3 7a03 	vldr	s15, [r3, #12]
	 					statistic_value.Statistic_rms = (statistic_value.Statistic_rms_Temp +
 800e0ba:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_rms) / 3;
 800e0be:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800e0c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_rms = (statistic_value.Statistic_rms_Temp +
 800e0c6:	4b08      	ldr	r3, [pc, #32]	; (800e0e8 <FFT_Thread+0x728>)
 800e0c8:	edc3 7a03 	vstr	s15, [r3, #12]
	 					statistic_value.Statistic_mean = (statistic_value.Statistic_mean_Temp +
 800e0cc:	4b06      	ldr	r3, [pc, #24]	; (800e0e8 <FFT_Thread+0x728>)
 800e0ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e0d2:	e00b      	b.n	800e0ec <FFT_Thread+0x72c>
 800e0d4:	20007320 	.word	0x20007320
 800e0d8:	20002fb8 	.word	0x20002fb8
 800e0dc:	2000733c 	.word	0x2000733c
 800e0e0:	20002fb4 	.word	0x20002fb4
 800e0e4:	20002f98 	.word	0x20002f98
 800e0e8:	2000021c 	.word	0x2000021c
 800e0ec:	ed93 7a00 	vldr	s14, [r3]
	 							statistic_value.Statistic_mean) / 3;
 800e0f0:	4b45      	ldr	r3, [pc, #276]	; (800e208 <FFT_Thread+0x848>)
 800e0f2:	edd3 7a04 	vldr	s15, [r3, #16]
	 					statistic_value.Statistic_mean = (statistic_value.Statistic_mean_Temp +
 800e0f6:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_mean) / 3;
 800e0fa:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800e0fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_mean = (statistic_value.Statistic_mean_Temp +
 800e102:	4b41      	ldr	r3, [pc, #260]	; (800e208 <FFT_Thread+0x848>)
 800e104:	edc3 7a04 	vstr	s15, [r3, #16]
	 					statistic_value.Statistic_std = (statistic_value.Statistic_std_Temp +
 800e108:	4b3f      	ldr	r3, [pc, #252]	; (800e208 <FFT_Thread+0x848>)
 800e10a:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800e10e:	ed93 7a00 	vldr	s14, [r3]
	 							statistic_value.Statistic_std) / 3;
 800e112:	4b3d      	ldr	r3, [pc, #244]	; (800e208 <FFT_Thread+0x848>)
 800e114:	edd3 7a05 	vldr	s15, [r3, #20]
	 					statistic_value.Statistic_std = (statistic_value.Statistic_std_Temp +
 800e118:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_std) / 3;
 800e11c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800e120:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_std = (statistic_value.Statistic_std_Temp +
 800e124:	4b38      	ldr	r3, [pc, #224]	; (800e208 <FFT_Thread+0x848>)
 800e126:	edc3 7a05 	vstr	s15, [r3, #20]
	 					statistic_value.Statistic_FreqOvall = (statistic_value.Statistic_FreqOvall_Temp +
 800e12a:	4b37      	ldr	r3, [pc, #220]	; (800e208 <FFT_Thread+0x848>)
 800e12c:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800e130:	ed93 7a00 	vldr	s14, [r3]
	 							statistic_value.Statistic_FreqOvall) / 3;
 800e134:	4b34      	ldr	r3, [pc, #208]	; (800e208 <FFT_Thread+0x848>)
 800e136:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
	 					statistic_value.Statistic_FreqOvall = (statistic_value.Statistic_FreqOvall_Temp +
 800e13a:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_FreqOvall) / 3;
 800e13e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800e142:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_FreqOvall = (statistic_value.Statistic_FreqOvall_Temp +
 800e146:	4b30      	ldr	r3, [pc, #192]	; (800e208 <FFT_Thread+0x848>)
 800e148:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	 					statistic_value.Statistic_crestFactor = (statistic_value.Statistic_crestFactor_Temp +
 800e14c:	4b2e      	ldr	r3, [pc, #184]	; (800e208 <FFT_Thread+0x848>)
 800e14e:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800e152:	ed93 7a00 	vldr	s14, [r3]
	 							statistic_value.Statistic_crestFactor) / 3;
 800e156:	4b2c      	ldr	r3, [pc, #176]	; (800e208 <FFT_Thread+0x848>)
 800e158:	edd3 7a07 	vldr	s15, [r3, #28]
	 					statistic_value.Statistic_crestFactor = (statistic_value.Statistic_crestFactor_Temp +
 800e15c:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_crestFactor) / 3;
 800e160:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800e164:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_crestFactor = (statistic_value.Statistic_crestFactor_Temp +
 800e168:	4b27      	ldr	r3, [pc, #156]	; (800e208 <FFT_Thread+0x848>)
 800e16a:	edc3 7a07 	vstr	s15, [r3, #28]
	 					statistic_value.Statistic_SpeedOvall = (statistic_value.Statistic_SpeedOvall_Temp +
 800e16e:	4b26      	ldr	r3, [pc, #152]	; (800e208 <FFT_Thread+0x848>)
 800e170:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 800e174:	ed93 7a00 	vldr	s14, [r3]
	 							statistic_value.Statistic_SpeedOvall) / 3;
 800e178:	4b23      	ldr	r3, [pc, #140]	; (800e208 <FFT_Thread+0x848>)
 800e17a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
	 					statistic_value.Statistic_SpeedOvall = (statistic_value.Statistic_SpeedOvall_Temp +
 800e17e:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_SpeedOvall) / 3;
 800e182:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800e186:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_SpeedOvall = (statistic_value.Statistic_SpeedOvall_Temp +
 800e18a:	4b1f      	ldr	r3, [pc, #124]	; (800e208 <FFT_Thread+0x848>)
 800e18c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	 					statistic_value.Statistic_kurtosis = (statistic_value.Statistic_kurtosis_Temp +
 800e190:	4b1d      	ldr	r3, [pc, #116]	; (800e208 <FFT_Thread+0x848>)
 800e192:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800e196:	ed93 7a00 	vldr	s14, [r3]
	 							statistic_value.Statistic_kurtosis) / 3;
 800e19a:	4b1b      	ldr	r3, [pc, #108]	; (800e208 <FFT_Thread+0x848>)
 800e19c:	edd3 7a08 	vldr	s15, [r3, #32]
	 					statistic_value.Statistic_kurtosis = (statistic_value.Statistic_kurtosis_Temp +
 800e1a0:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_kurtosis) / 3;
 800e1a4:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800e1a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_kurtosis = (statistic_value.Statistic_kurtosis_Temp +
 800e1ac:	4b16      	ldr	r3, [pc, #88]	; (800e208 <FFT_Thread+0x848>)
 800e1ae:	edc3 7a08 	vstr	s15, [r3, #32]
	 					statistic_value.Statistic_skewness = (statistic_value.Statistic_skewness_Temp +
 800e1b2:	4b15      	ldr	r3, [pc, #84]	; (800e208 <FFT_Thread+0x848>)
 800e1b4:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 800e1b8:	ed93 7a00 	vldr	s14, [r3]
	 							statistic_value.Statistic_skewness) / 3;
 800e1bc:	4b12      	ldr	r3, [pc, #72]	; (800e208 <FFT_Thread+0x848>)
 800e1be:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
	 					statistic_value.Statistic_skewness = (statistic_value.Statistic_skewness_Temp +
 800e1c2:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_skewness) / 3;
 800e1c6:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800e1ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_skewness = (statistic_value.Statistic_skewness_Temp +
 800e1ce:	4b0e      	ldr	r3, [pc, #56]	; (800e208 <FFT_Thread+0x848>)
 800e1d0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24


	 					USARTBLE.sendflag = 1;
 800e1d4:	4b0d      	ldr	r3, [pc, #52]	; (800e20c <FFT_Thread+0x84c>)
 800e1d6:	2201      	movs	r2, #1
 800e1d8:	701a      	strb	r2, [r3, #0]
	 					averageTimes = 0;
 800e1da:	4b0d      	ldr	r3, [pc, #52]	; (800e210 <FFT_Thread+0x850>)
 800e1dc:	2200      	movs	r2, #0
 800e1de:	701a      	strb	r2, [r3, #0]

	 					/*TODO: BLE send data*/
	 					BLE_USART(&huart6, &statistic_value, &hiwdg);
 800e1e0:	4a0c      	ldr	r2, [pc, #48]	; (800e214 <FFT_Thread+0x854>)
 800e1e2:	4909      	ldr	r1, [pc, #36]	; (800e208 <FFT_Thread+0x848>)
 800e1e4:	480c      	ldr	r0, [pc, #48]	; (800e218 <FFT_Thread+0x858>)
 800e1e6:	f7fd fb49 	bl	800b87c <BLE_USART>
	 					//TODO : Initial statistic value to zero
	 					//Initial_AllStatisticValue();

	 				}

	 				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800e1ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800e1ee:	480b      	ldr	r0, [pc, #44]	; (800e21c <FFT_Thread+0x85c>)
 800e1f0:	f002 fe63 	bl	8010eba <HAL_GPIO_TogglePin>

	 				//TODO : enable collect data flag
	 				stattisComputingStatus = statisticComputingNORMAL;
 800e1f4:	4b0a      	ldr	r3, [pc, #40]	; (800e220 <FFT_Thread+0x860>)
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	701a      	strb	r2, [r3, #0]
 800e1fa:	f7ff bbe5 	b.w	800d9c8 <FFT_Thread+0x8>
	 			}
	 */
	 	  }

	 	  else{
	 		 vTaskSuspend(NULL);
 800e1fe:	2000      	movs	r0, #0
 800e200:	f008 fbe0 	bl	80169c4 <vTaskSuspend>
  {
 800e204:	f7ff bbe0 	b.w	800d9c8 <FFT_Thread+0x8>
 800e208:	2000021c 	.word	0x2000021c
 800e20c:	200070e0 	.word	0x200070e0
 800e210:	20002f98 	.word	0x20002f98
 800e214:	20002d58 	.word	0x20002d58
 800e218:	20002e8c 	.word	0x20002e8c
 800e21c:	40020c00 	.word	0x40020c00
 800e220:	2001733c 	.word	0x2001733c

0800e224 <SendIntervalCallback>:
  /* USER CODE END FFT_Thread */
}

/* SendIntervalCallback function */
void SendIntervalCallback(void const * argument)
{
 800e224:	b480      	push	{r7}
 800e226:	b083      	sub	sp, #12
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SendIntervalCallback */
    if(USARTBLE.sendRawdataflag ==0)
 800e22c:	4b07      	ldr	r3, [pc, #28]	; (800e24c <SendIntervalCallback+0x28>)
 800e22e:	789b      	ldrb	r3, [r3, #2]
 800e230:	f083 0301 	eor.w	r3, r3, #1
 800e234:	b2db      	uxtb	r3, r3
 800e236:	2b00      	cmp	r3, #0
 800e238:	d002      	beq.n	800e240 <SendIntervalCallback+0x1c>
		USARTBLE.sendRawdataflag = 1;
 800e23a:	4b04      	ldr	r3, [pc, #16]	; (800e24c <SendIntervalCallback+0x28>)
 800e23c:	2201      	movs	r2, #1
 800e23e:	709a      	strb	r2, [r3, #2]
  /* USER CODE END SendIntervalCallback */
}
 800e240:	bf00      	nop
 800e242:	370c      	adds	r7, #12
 800e244:	46bd      	mov	sp, r7
 800e246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24a:	4770      	bx	lr
 800e24c:	200070e0 	.word	0x200070e0

0800e250 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800e250:	b480      	push	{r7}
 800e252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800e254:	bf00      	nop
 800e256:	46bd      	mov	sp, r7
 800e258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25c:	4770      	bx	lr

0800e25e <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 800e25e:	b480      	push	{r7}
 800e260:	b085      	sub	sp, #20
 800e262:	af00      	add	r7, sp, #0
 800e264:	60b9      	str	r1, [r7, #8]
 800e266:	607a      	str	r2, [r7, #4]
 800e268:	603b      	str	r3, [r7, #0]
 800e26a:	4603      	mov	r3, r0
 800e26c:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 800e26e:	687a      	ldr	r2, [r7, #4]
 800e270:	683b      	ldr	r3, [r7, #0]
 800e272:	429a      	cmp	r2, r3
 800e274:	d204      	bcs.n	800e280 <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 800e276:	68ba      	ldr	r2, [r7, #8]
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	4413      	add	r3, r2
 800e27c:	7bfa      	ldrb	r2, [r7, #15]
 800e27e:	701a      	strb	r2, [r3, #0]
  }
}
 800e280:	bf00      	nop
 800e282:	3714      	adds	r7, #20
 800e284:	46bd      	mov	sp, r7
 800e286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28a:	4770      	bx	lr

0800e28c <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 800e28c:	b480      	push	{r7}
 800e28e:	b085      	sub	sp, #20
 800e290:	af00      	add	r7, sp, #0
 800e292:	60b9      	str	r1, [r7, #8]
 800e294:	607a      	str	r2, [r7, #4]
 800e296:	603b      	str	r3, [r7, #0]
 800e298:	4603      	mov	r3, r0
 800e29a:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 800e29c:	bf00      	nop
 800e29e:	3714      	adds	r7, #20
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a6:	4770      	bx	lr

0800e2a8 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 800e2a8:	b480      	push	{r7}
 800e2aa:	b085      	sub	sp, #20
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
 800e2b0:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	60fb      	str	r3, [r7, #12]
 800e2b6:	e002      	b.n	800e2be <_strnlen_s+0x16>
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	3301      	adds	r3, #1
 800e2bc:	60fb      	str	r3, [r7, #12]
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	781b      	ldrb	r3, [r3, #0]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d004      	beq.n	800e2d0 <_strnlen_s+0x28>
 800e2c6:	683b      	ldr	r3, [r7, #0]
 800e2c8:	1e5a      	subs	r2, r3, #1
 800e2ca:	603a      	str	r2, [r7, #0]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d1f3      	bne.n	800e2b8 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 800e2d0:	68fa      	ldr	r2, [r7, #12]
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	1ad3      	subs	r3, r2, r3
}
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	3714      	adds	r7, #20
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e0:	4770      	bx	lr

0800e2e2 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 800e2e2:	b480      	push	{r7}
 800e2e4:	b083      	sub	sp, #12
 800e2e6:	af00      	add	r7, sp, #0
 800e2e8:	4603      	mov	r3, r0
 800e2ea:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 800e2ec:	79fb      	ldrb	r3, [r7, #7]
 800e2ee:	2b2f      	cmp	r3, #47	; 0x2f
 800e2f0:	d904      	bls.n	800e2fc <_is_digit+0x1a>
 800e2f2:	79fb      	ldrb	r3, [r7, #7]
 800e2f4:	2b39      	cmp	r3, #57	; 0x39
 800e2f6:	d801      	bhi.n	800e2fc <_is_digit+0x1a>
 800e2f8:	2301      	movs	r3, #1
 800e2fa:	e000      	b.n	800e2fe <_is_digit+0x1c>
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	f003 0301 	and.w	r3, r3, #1
 800e302:	b2db      	uxtb	r3, r3
}
 800e304:	4618      	mov	r0, r3
 800e306:	370c      	adds	r7, #12
 800e308:	46bd      	mov	sp, r7
 800e30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30e:	4770      	bx	lr

0800e310 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b084      	sub	sp, #16
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 800e318:	2300      	movs	r3, #0
 800e31a:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800e31c:	e00e      	b.n	800e33c <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800e31e:	68fa      	ldr	r2, [r7, #12]
 800e320:	4613      	mov	r3, r2
 800e322:	009b      	lsls	r3, r3, #2
 800e324:	4413      	add	r3, r2
 800e326:	005b      	lsls	r3, r3, #1
 800e328:	4618      	mov	r0, r3
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	1c59      	adds	r1, r3, #1
 800e330:	687a      	ldr	r2, [r7, #4]
 800e332:	6011      	str	r1, [r2, #0]
 800e334:	781b      	ldrb	r3, [r3, #0]
 800e336:	4403      	add	r3, r0
 800e338:	3b30      	subs	r3, #48	; 0x30
 800e33a:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	781b      	ldrb	r3, [r3, #0]
 800e342:	4618      	mov	r0, r3
 800e344:	f7ff ffcd 	bl	800e2e2 <_is_digit>
 800e348:	4603      	mov	r3, r0
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d1e7      	bne.n	800e31e <_atoi+0xe>
  }
  return i;
 800e34e:	68fb      	ldr	r3, [r7, #12]
}
 800e350:	4618      	mov	r0, r3
 800e352:	3710      	adds	r7, #16
 800e354:	46bd      	mov	sp, r7
 800e356:	bd80      	pop	{r7, pc}

0800e358 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800e358:	b590      	push	{r4, r7, lr}
 800e35a:	b087      	sub	sp, #28
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	60f8      	str	r0, [r7, #12]
 800e360:	60b9      	str	r1, [r7, #8]
 800e362:	607a      	str	r2, [r7, #4]
 800e364:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800e36a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e36c:	f003 0302 	and.w	r3, r3, #2
 800e370:	2b00      	cmp	r3, #0
 800e372:	d125      	bne.n	800e3c0 <_out_rev+0x68>
 800e374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e376:	f003 0301 	and.w	r3, r3, #1
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d120      	bne.n	800e3c0 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 800e37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e380:	617b      	str	r3, [r7, #20]
 800e382:	e00a      	b.n	800e39a <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 800e384:	687a      	ldr	r2, [r7, #4]
 800e386:	1c53      	adds	r3, r2, #1
 800e388:	607b      	str	r3, [r7, #4]
 800e38a:	68fc      	ldr	r4, [r7, #12]
 800e38c:	683b      	ldr	r3, [r7, #0]
 800e38e:	68b9      	ldr	r1, [r7, #8]
 800e390:	2020      	movs	r0, #32
 800e392:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 800e394:	697b      	ldr	r3, [r7, #20]
 800e396:	3301      	adds	r3, #1
 800e398:	617b      	str	r3, [r7, #20]
 800e39a:	697a      	ldr	r2, [r7, #20]
 800e39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e39e:	429a      	cmp	r2, r3
 800e3a0:	d3f0      	bcc.n	800e384 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 800e3a2:	e00d      	b.n	800e3c0 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 800e3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3a6:	3b01      	subs	r3, #1
 800e3a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e3aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ae:	4413      	add	r3, r2
 800e3b0:	7818      	ldrb	r0, [r3, #0]
 800e3b2:	687a      	ldr	r2, [r7, #4]
 800e3b4:	1c53      	adds	r3, r2, #1
 800e3b6:	607b      	str	r3, [r7, #4]
 800e3b8:	68fc      	ldr	r4, [r7, #12]
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	68b9      	ldr	r1, [r7, #8]
 800e3be:	47a0      	blx	r4
  while (len) {
 800e3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d1ee      	bne.n	800e3a4 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 800e3c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3c8:	f003 0302 	and.w	r3, r3, #2
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d00e      	beq.n	800e3ee <_out_rev+0x96>
    while (idx - start_idx < width) {
 800e3d0:	e007      	b.n	800e3e2 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 800e3d2:	687a      	ldr	r2, [r7, #4]
 800e3d4:	1c53      	adds	r3, r2, #1
 800e3d6:	607b      	str	r3, [r7, #4]
 800e3d8:	68fc      	ldr	r4, [r7, #12]
 800e3da:	683b      	ldr	r3, [r7, #0]
 800e3dc:	68b9      	ldr	r1, [r7, #8]
 800e3de:	2020      	movs	r0, #32
 800e3e0:	47a0      	blx	r4
    while (idx - start_idx < width) {
 800e3e2:	687a      	ldr	r2, [r7, #4]
 800e3e4:	693b      	ldr	r3, [r7, #16]
 800e3e6:	1ad3      	subs	r3, r2, r3
 800e3e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e3ea:	429a      	cmp	r2, r3
 800e3ec:	d8f1      	bhi.n	800e3d2 <_out_rev+0x7a>
    }
  }

  return idx;
 800e3ee:	687b      	ldr	r3, [r7, #4]
}
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	371c      	adds	r7, #28
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	bd90      	pop	{r4, r7, pc}

0800e3f8 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b088      	sub	sp, #32
 800e3fc:	af04      	add	r7, sp, #16
 800e3fe:	60f8      	str	r0, [r7, #12]
 800e400:	60b9      	str	r1, [r7, #8]
 800e402:	607a      	str	r2, [r7, #4]
 800e404:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 800e406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e408:	f003 0302 	and.w	r3, r3, #2
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d136      	bne.n	800e47e <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800e410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e412:	2b00      	cmp	r3, #0
 800e414:	d018      	beq.n	800e448 <_ntoa_format+0x50>
 800e416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e418:	f003 0301 	and.w	r3, r3, #1
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d013      	beq.n	800e448 <_ntoa_format+0x50>
 800e420:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d104      	bne.n	800e432 <_ntoa_format+0x3a>
 800e428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e42a:	f003 030c 	and.w	r3, r3, #12
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d00a      	beq.n	800e448 <_ntoa_format+0x50>
      width--;
 800e432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e434:	3b01      	subs	r3, #1
 800e436:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800e438:	e006      	b.n	800e448 <_ntoa_format+0x50>
      buf[len++] = '0';
 800e43a:	69fb      	ldr	r3, [r7, #28]
 800e43c:	1c5a      	adds	r2, r3, #1
 800e43e:	61fa      	str	r2, [r7, #28]
 800e440:	69ba      	ldr	r2, [r7, #24]
 800e442:	4413      	add	r3, r2
 800e444:	2230      	movs	r2, #48	; 0x30
 800e446:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800e448:	69fa      	ldr	r2, [r7, #28]
 800e44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e44c:	429a      	cmp	r2, r3
 800e44e:	d20a      	bcs.n	800e466 <_ntoa_format+0x6e>
 800e450:	69fb      	ldr	r3, [r7, #28]
 800e452:	2b1f      	cmp	r3, #31
 800e454:	d9f1      	bls.n	800e43a <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800e456:	e006      	b.n	800e466 <_ntoa_format+0x6e>
      buf[len++] = '0';
 800e458:	69fb      	ldr	r3, [r7, #28]
 800e45a:	1c5a      	adds	r2, r3, #1
 800e45c:	61fa      	str	r2, [r7, #28]
 800e45e:	69ba      	ldr	r2, [r7, #24]
 800e460:	4413      	add	r3, r2
 800e462:	2230      	movs	r2, #48	; 0x30
 800e464:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800e466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e468:	f003 0301 	and.w	r3, r3, #1
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d006      	beq.n	800e47e <_ntoa_format+0x86>
 800e470:	69fa      	ldr	r2, [r7, #28]
 800e472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e474:	429a      	cmp	r2, r3
 800e476:	d202      	bcs.n	800e47e <_ntoa_format+0x86>
 800e478:	69fb      	ldr	r3, [r7, #28]
 800e47a:	2b1f      	cmp	r3, #31
 800e47c:	d9ec      	bls.n	800e458 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 800e47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e480:	f003 0310 	and.w	r3, r3, #16
 800e484:	2b00      	cmp	r3, #0
 800e486:	d058      	beq.n	800e53a <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800e488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e48a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d116      	bne.n	800e4c0 <_ntoa_format+0xc8>
 800e492:	69fb      	ldr	r3, [r7, #28]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d013      	beq.n	800e4c0 <_ntoa_format+0xc8>
 800e498:	69fa      	ldr	r2, [r7, #28]
 800e49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e49c:	429a      	cmp	r2, r3
 800e49e:	d003      	beq.n	800e4a8 <_ntoa_format+0xb0>
 800e4a0:	69fa      	ldr	r2, [r7, #28]
 800e4a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4a4:	429a      	cmp	r2, r3
 800e4a6:	d10b      	bne.n	800e4c0 <_ntoa_format+0xc8>
      len--;
 800e4a8:	69fb      	ldr	r3, [r7, #28]
 800e4aa:	3b01      	subs	r3, #1
 800e4ac:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 800e4ae:	69fb      	ldr	r3, [r7, #28]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d005      	beq.n	800e4c0 <_ntoa_format+0xc8>
 800e4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b6:	2b10      	cmp	r3, #16
 800e4b8:	d102      	bne.n	800e4c0 <_ntoa_format+0xc8>
        len--;
 800e4ba:	69fb      	ldr	r3, [r7, #28]
 800e4bc:	3b01      	subs	r3, #1
 800e4be:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800e4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c2:	2b10      	cmp	r3, #16
 800e4c4:	d10f      	bne.n	800e4e6 <_ntoa_format+0xee>
 800e4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4c8:	f003 0320 	and.w	r3, r3, #32
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d10a      	bne.n	800e4e6 <_ntoa_format+0xee>
 800e4d0:	69fb      	ldr	r3, [r7, #28]
 800e4d2:	2b1f      	cmp	r3, #31
 800e4d4:	d807      	bhi.n	800e4e6 <_ntoa_format+0xee>
      buf[len++] = 'x';
 800e4d6:	69fb      	ldr	r3, [r7, #28]
 800e4d8:	1c5a      	adds	r2, r3, #1
 800e4da:	61fa      	str	r2, [r7, #28]
 800e4dc:	69ba      	ldr	r2, [r7, #24]
 800e4de:	4413      	add	r3, r2
 800e4e0:	2278      	movs	r2, #120	; 0x78
 800e4e2:	701a      	strb	r2, [r3, #0]
 800e4e4:	e01f      	b.n	800e526 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800e4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e8:	2b10      	cmp	r3, #16
 800e4ea:	d10f      	bne.n	800e50c <_ntoa_format+0x114>
 800e4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4ee:	f003 0320 	and.w	r3, r3, #32
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d00a      	beq.n	800e50c <_ntoa_format+0x114>
 800e4f6:	69fb      	ldr	r3, [r7, #28]
 800e4f8:	2b1f      	cmp	r3, #31
 800e4fa:	d807      	bhi.n	800e50c <_ntoa_format+0x114>
      buf[len++] = 'X';
 800e4fc:	69fb      	ldr	r3, [r7, #28]
 800e4fe:	1c5a      	adds	r2, r3, #1
 800e500:	61fa      	str	r2, [r7, #28]
 800e502:	69ba      	ldr	r2, [r7, #24]
 800e504:	4413      	add	r3, r2
 800e506:	2258      	movs	r2, #88	; 0x58
 800e508:	701a      	strb	r2, [r3, #0]
 800e50a:	e00c      	b.n	800e526 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800e50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e50e:	2b02      	cmp	r3, #2
 800e510:	d109      	bne.n	800e526 <_ntoa_format+0x12e>
 800e512:	69fb      	ldr	r3, [r7, #28]
 800e514:	2b1f      	cmp	r3, #31
 800e516:	d806      	bhi.n	800e526 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 800e518:	69fb      	ldr	r3, [r7, #28]
 800e51a:	1c5a      	adds	r2, r3, #1
 800e51c:	61fa      	str	r2, [r7, #28]
 800e51e:	69ba      	ldr	r2, [r7, #24]
 800e520:	4413      	add	r3, r2
 800e522:	2262      	movs	r2, #98	; 0x62
 800e524:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800e526:	69fb      	ldr	r3, [r7, #28]
 800e528:	2b1f      	cmp	r3, #31
 800e52a:	d806      	bhi.n	800e53a <_ntoa_format+0x142>
      buf[len++] = '0';
 800e52c:	69fb      	ldr	r3, [r7, #28]
 800e52e:	1c5a      	adds	r2, r3, #1
 800e530:	61fa      	str	r2, [r7, #28]
 800e532:	69ba      	ldr	r2, [r7, #24]
 800e534:	4413      	add	r3, r2
 800e536:	2230      	movs	r2, #48	; 0x30
 800e538:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800e53a:	69fb      	ldr	r3, [r7, #28]
 800e53c:	2b1f      	cmp	r3, #31
 800e53e:	d824      	bhi.n	800e58a <_ntoa_format+0x192>
    if (negative) {
 800e540:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d007      	beq.n	800e558 <_ntoa_format+0x160>
      buf[len++] = '-';
 800e548:	69fb      	ldr	r3, [r7, #28]
 800e54a:	1c5a      	adds	r2, r3, #1
 800e54c:	61fa      	str	r2, [r7, #28]
 800e54e:	69ba      	ldr	r2, [r7, #24]
 800e550:	4413      	add	r3, r2
 800e552:	222d      	movs	r2, #45	; 0x2d
 800e554:	701a      	strb	r2, [r3, #0]
 800e556:	e018      	b.n	800e58a <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 800e558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e55a:	f003 0304 	and.w	r3, r3, #4
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d007      	beq.n	800e572 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800e562:	69fb      	ldr	r3, [r7, #28]
 800e564:	1c5a      	adds	r2, r3, #1
 800e566:	61fa      	str	r2, [r7, #28]
 800e568:	69ba      	ldr	r2, [r7, #24]
 800e56a:	4413      	add	r3, r2
 800e56c:	222b      	movs	r2, #43	; 0x2b
 800e56e:	701a      	strb	r2, [r3, #0]
 800e570:	e00b      	b.n	800e58a <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 800e572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e574:	f003 0308 	and.w	r3, r3, #8
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d006      	beq.n	800e58a <_ntoa_format+0x192>
      buf[len++] = ' ';
 800e57c:	69fb      	ldr	r3, [r7, #28]
 800e57e:	1c5a      	adds	r2, r3, #1
 800e580:	61fa      	str	r2, [r7, #28]
 800e582:	69ba      	ldr	r2, [r7, #24]
 800e584:	4413      	add	r3, r2
 800e586:	2220      	movs	r2, #32
 800e588:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800e58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e58c:	9303      	str	r3, [sp, #12]
 800e58e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e590:	9302      	str	r3, [sp, #8]
 800e592:	69fb      	ldr	r3, [r7, #28]
 800e594:	9301      	str	r3, [sp, #4]
 800e596:	69bb      	ldr	r3, [r7, #24]
 800e598:	9300      	str	r3, [sp, #0]
 800e59a:	683b      	ldr	r3, [r7, #0]
 800e59c:	687a      	ldr	r2, [r7, #4]
 800e59e:	68b9      	ldr	r1, [r7, #8]
 800e5a0:	68f8      	ldr	r0, [r7, #12]
 800e5a2:	f7ff fed9 	bl	800e358 <_out_rev>
 800e5a6:	4603      	mov	r3, r0
}
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	3710      	adds	r7, #16
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	bd80      	pop	{r7, pc}

0800e5b0 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b096      	sub	sp, #88	; 0x58
 800e5b4:	af08      	add	r7, sp, #32
 800e5b6:	60f8      	str	r0, [r7, #12]
 800e5b8:	60b9      	str	r1, [r7, #8]
 800e5ba:	607a      	str	r2, [r7, #4]
 800e5bc:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800e5c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d103      	bne.n	800e5d0 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 800e5c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5ca:	f023 0310 	bic.w	r3, r3, #16
 800e5ce:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800e5d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d002      	beq.n	800e5e0 <_ntoa_long+0x30>
 800e5da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d032      	beq.n	800e646 <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 800e5e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e5e4:	fbb3 f2f2 	udiv	r2, r3, r2
 800e5e8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e5ea:	fb01 f202 	mul.w	r2, r1, r2
 800e5ee:	1a9b      	subs	r3, r3, r2
 800e5f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800e5f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e5f8:	2b09      	cmp	r3, #9
 800e5fa:	d804      	bhi.n	800e606 <_ntoa_long+0x56>
 800e5fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e600:	3330      	adds	r3, #48	; 0x30
 800e602:	b2da      	uxtb	r2, r3
 800e604:	e00d      	b.n	800e622 <_ntoa_long+0x72>
 800e606:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e608:	f003 0320 	and.w	r3, r3, #32
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d001      	beq.n	800e614 <_ntoa_long+0x64>
 800e610:	2241      	movs	r2, #65	; 0x41
 800e612:	e000      	b.n	800e616 <_ntoa_long+0x66>
 800e614:	2261      	movs	r2, #97	; 0x61
 800e616:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e61a:	4413      	add	r3, r2
 800e61c:	b2db      	uxtb	r3, r3
 800e61e:	3b0a      	subs	r3, #10
 800e620:	b2da      	uxtb	r2, r3
 800e622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e624:	1c59      	adds	r1, r3, #1
 800e626:	6379      	str	r1, [r7, #52]	; 0x34
 800e628:	3338      	adds	r3, #56	; 0x38
 800e62a:	443b      	add	r3, r7
 800e62c:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800e630:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e632:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e634:	fbb2 f3f3 	udiv	r3, r2, r3
 800e638:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800e63a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d002      	beq.n	800e646 <_ntoa_long+0x96>
 800e640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e642:	2b1f      	cmp	r3, #31
 800e644:	d9cc      	bls.n	800e5e0 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800e646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e648:	9306      	str	r3, [sp, #24]
 800e64a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e64c:	9305      	str	r3, [sp, #20]
 800e64e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e650:	9304      	str	r3, [sp, #16]
 800e652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e654:	9303      	str	r3, [sp, #12]
 800e656:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800e65a:	9302      	str	r3, [sp, #8]
 800e65c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e65e:	9301      	str	r3, [sp, #4]
 800e660:	f107 0310 	add.w	r3, r7, #16
 800e664:	9300      	str	r3, [sp, #0]
 800e666:	683b      	ldr	r3, [r7, #0]
 800e668:	687a      	ldr	r2, [r7, #4]
 800e66a:	68b9      	ldr	r1, [r7, #8]
 800e66c:	68f8      	ldr	r0, [r7, #12]
 800e66e:	f7ff fec3 	bl	800e3f8 <_ntoa_format>
 800e672:	4603      	mov	r3, r0
}
 800e674:	4618      	mov	r0, r3
 800e676:	3738      	adds	r7, #56	; 0x38
 800e678:	46bd      	mov	sp, r7
 800e67a:	bd80      	pop	{r7, pc}

0800e67c <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b096      	sub	sp, #88	; 0x58
 800e680:	af08      	add	r7, sp, #32
 800e682:	60f8      	str	r0, [r7, #12]
 800e684:	60b9      	str	r1, [r7, #8]
 800e686:	607a      	str	r2, [r7, #4]
 800e688:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800e68a:	2300      	movs	r3, #0
 800e68c:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800e68e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800e692:	4313      	orrs	r3, r2
 800e694:	d103      	bne.n	800e69e <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 800e696:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e698:	f023 0310 	bic.w	r3, r3, #16
 800e69c:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800e69e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e6a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d003      	beq.n	800e6b0 <_ntoa_long_long+0x34>
 800e6a8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800e6ac:	4313      	orrs	r3, r2
 800e6ae:	d037      	beq.n	800e720 <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 800e6b0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800e6b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800e6b8:	f7fa f836 	bl	8008728 <__aeabi_uldivmod>
 800e6bc:	4613      	mov	r3, r2
 800e6be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800e6c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e6c6:	2b09      	cmp	r3, #9
 800e6c8:	d804      	bhi.n	800e6d4 <_ntoa_long_long+0x58>
 800e6ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e6ce:	3330      	adds	r3, #48	; 0x30
 800e6d0:	b2da      	uxtb	r2, r3
 800e6d2:	e00d      	b.n	800e6f0 <_ntoa_long_long+0x74>
 800e6d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e6d6:	f003 0320 	and.w	r3, r3, #32
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d001      	beq.n	800e6e2 <_ntoa_long_long+0x66>
 800e6de:	2241      	movs	r2, #65	; 0x41
 800e6e0:	e000      	b.n	800e6e4 <_ntoa_long_long+0x68>
 800e6e2:	2261      	movs	r2, #97	; 0x61
 800e6e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e6e8:	4413      	add	r3, r2
 800e6ea:	b2db      	uxtb	r3, r3
 800e6ec:	3b0a      	subs	r3, #10
 800e6ee:	b2da      	uxtb	r2, r3
 800e6f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6f2:	1c59      	adds	r1, r3, #1
 800e6f4:	6379      	str	r1, [r7, #52]	; 0x34
 800e6f6:	3338      	adds	r3, #56	; 0x38
 800e6f8:	443b      	add	r3, r7
 800e6fa:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800e6fe:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800e702:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800e706:	f7fa f80f 	bl	8008728 <__aeabi_uldivmod>
 800e70a:	4602      	mov	r2, r0
 800e70c:	460b      	mov	r3, r1
 800e70e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800e712:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800e716:	4313      	orrs	r3, r2
 800e718:	d002      	beq.n	800e720 <_ntoa_long_long+0xa4>
 800e71a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e71c:	2b1f      	cmp	r3, #31
 800e71e:	d9c7      	bls.n	800e6b0 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800e720:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e722:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e724:	9206      	str	r2, [sp, #24]
 800e726:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e728:	9205      	str	r2, [sp, #20]
 800e72a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e72c:	9204      	str	r2, [sp, #16]
 800e72e:	9303      	str	r3, [sp, #12]
 800e730:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800e734:	9302      	str	r3, [sp, #8]
 800e736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e738:	9301      	str	r3, [sp, #4]
 800e73a:	f107 0310 	add.w	r3, r7, #16
 800e73e:	9300      	str	r3, [sp, #0]
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	687a      	ldr	r2, [r7, #4]
 800e744:	68b9      	ldr	r1, [r7, #8]
 800e746:	68f8      	ldr	r0, [r7, #12]
 800e748:	f7ff fe56 	bl	800e3f8 <_ntoa_format>
 800e74c:	4603      	mov	r3, r0
}
 800e74e:	4618      	mov	r0, r3
 800e750:	3738      	adds	r7, #56	; 0x38
 800e752:	46bd      	mov	sp, r7
 800e754:	bd80      	pop	{r7, pc}
	...

0800e758 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b09c      	sub	sp, #112	; 0x70
 800e75c:	af04      	add	r7, sp, #16
 800e75e:	6178      	str	r0, [r7, #20]
 800e760:	6139      	str	r1, [r7, #16]
 800e762:	60fa      	str	r2, [r7, #12]
 800e764:	60bb      	str	r3, [r7, #8]
 800e766:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 800e76a:	2300      	movs	r3, #0
 800e76c:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 800e76e:	f04f 0200 	mov.w	r2, #0
 800e772:	f04f 0300 	mov.w	r3, #0
 800e776:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 800e77a:	ed97 6b00 	vldr	d6, [r7]
 800e77e:	ed97 7b00 	vldr	d7, [r7]
 800e782:	eeb4 6b47 	vcmp.f64	d6, d7
 800e786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e78a:	d00f      	beq.n	800e7ac <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 800e78c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e78e:	9303      	str	r3, [sp, #12]
 800e790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e792:	9302      	str	r3, [sp, #8]
 800e794:	2303      	movs	r3, #3
 800e796:	9301      	str	r3, [sp, #4]
 800e798:	4bb5      	ldr	r3, [pc, #724]	; (800ea70 <_ftoa+0x318>)
 800e79a:	9300      	str	r3, [sp, #0]
 800e79c:	68bb      	ldr	r3, [r7, #8]
 800e79e:	68fa      	ldr	r2, [r7, #12]
 800e7a0:	6939      	ldr	r1, [r7, #16]
 800e7a2:	6978      	ldr	r0, [r7, #20]
 800e7a4:	f7ff fdd8 	bl	800e358 <_out_rev>
 800e7a8:	4603      	mov	r3, r0
 800e7aa:	e215      	b.n	800ebd8 <_ftoa+0x480>
  if (value < -DBL_MAX)
 800e7ac:	ed97 7b00 	vldr	d7, [r7]
 800e7b0:	ed9f 6ba5 	vldr	d6, [pc, #660]	; 800ea48 <_ftoa+0x2f0>
 800e7b4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e7b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7bc:	d50f      	bpl.n	800e7de <_ftoa+0x86>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 800e7be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e7c0:	9303      	str	r3, [sp, #12]
 800e7c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7c4:	9302      	str	r3, [sp, #8]
 800e7c6:	2304      	movs	r3, #4
 800e7c8:	9301      	str	r3, [sp, #4]
 800e7ca:	4baa      	ldr	r3, [pc, #680]	; (800ea74 <_ftoa+0x31c>)
 800e7cc:	9300      	str	r3, [sp, #0]
 800e7ce:	68bb      	ldr	r3, [r7, #8]
 800e7d0:	68fa      	ldr	r2, [r7, #12]
 800e7d2:	6939      	ldr	r1, [r7, #16]
 800e7d4:	6978      	ldr	r0, [r7, #20]
 800e7d6:	f7ff fdbf 	bl	800e358 <_out_rev>
 800e7da:	4603      	mov	r3, r0
 800e7dc:	e1fc      	b.n	800ebd8 <_ftoa+0x480>
  if (value > DBL_MAX)
 800e7de:	ed97 7b00 	vldr	d7, [r7]
 800e7e2:	ed9f 6b9b 	vldr	d6, [pc, #620]	; 800ea50 <_ftoa+0x2f8>
 800e7e6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e7ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7ee:	dd1d      	ble.n	800e82c <_ftoa+0xd4>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 800e7f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e7f2:	f003 0304 	and.w	r3, r3, #4
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d001      	beq.n	800e7fe <_ftoa+0xa6>
 800e7fa:	4b9f      	ldr	r3, [pc, #636]	; (800ea78 <_ftoa+0x320>)
 800e7fc:	e000      	b.n	800e800 <_ftoa+0xa8>
 800e7fe:	4b9f      	ldr	r3, [pc, #636]	; (800ea7c <_ftoa+0x324>)
 800e800:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e802:	f002 0204 	and.w	r2, r2, #4
 800e806:	2a00      	cmp	r2, #0
 800e808:	d001      	beq.n	800e80e <_ftoa+0xb6>
 800e80a:	2204      	movs	r2, #4
 800e80c:	e000      	b.n	800e810 <_ftoa+0xb8>
 800e80e:	2203      	movs	r2, #3
 800e810:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e812:	9103      	str	r1, [sp, #12]
 800e814:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e816:	9102      	str	r1, [sp, #8]
 800e818:	9201      	str	r2, [sp, #4]
 800e81a:	9300      	str	r3, [sp, #0]
 800e81c:	68bb      	ldr	r3, [r7, #8]
 800e81e:	68fa      	ldr	r2, [r7, #12]
 800e820:	6939      	ldr	r1, [r7, #16]
 800e822:	6978      	ldr	r0, [r7, #20]
 800e824:	f7ff fd98 	bl	800e358 <_out_rev>
 800e828:	4603      	mov	r3, r0
 800e82a:	e1d5      	b.n	800ebd8 <_ftoa+0x480>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800e82c:	ed97 7b00 	vldr	d7, [r7]
 800e830:	ed9f 6b89 	vldr	d6, [pc, #548]	; 800ea58 <_ftoa+0x300>
 800e834:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e83c:	dc08      	bgt.n	800e850 <_ftoa+0xf8>
 800e83e:	ed97 7b00 	vldr	d7, [r7]
 800e842:	ed9f 6b87 	vldr	d6, [pc, #540]	; 800ea60 <_ftoa+0x308>
 800e846:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e84a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e84e:	d50f      	bpl.n	800e870 <_ftoa+0x118>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800e850:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e852:	9302      	str	r3, [sp, #8]
 800e854:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e856:	9301      	str	r3, [sp, #4]
 800e858:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e85a:	9300      	str	r3, [sp, #0]
 800e85c:	ed97 0b00 	vldr	d0, [r7]
 800e860:	68bb      	ldr	r3, [r7, #8]
 800e862:	68fa      	ldr	r2, [r7, #12]
 800e864:	6939      	ldr	r1, [r7, #16]
 800e866:	6978      	ldr	r0, [r7, #20]
 800e868:	f000 f9be 	bl	800ebe8 <_etoa>
 800e86c:	4603      	mov	r3, r0
 800e86e:	e1b3      	b.n	800ebd8 <_ftoa+0x480>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 800e870:	2300      	movs	r3, #0
 800e872:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 800e876:	ed97 7b00 	vldr	d7, [r7]
 800e87a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800e87e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e882:	d50a      	bpl.n	800e89a <_ftoa+0x142>
    negative = true;
 800e884:	2301      	movs	r3, #1
 800e886:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 800e88a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800ea68 <_ftoa+0x310>
 800e88e:	ed97 7b00 	vldr	d7, [r7]
 800e892:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e896:	ed87 7b00 	vstr	d7, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 800e89a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e89c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d10d      	bne.n	800e8c0 <_ftoa+0x168>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800e8a4:	2306      	movs	r3, #6
 800e8a6:	66bb      	str	r3, [r7, #104]	; 0x68
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800e8a8:	e00a      	b.n	800e8c0 <_ftoa+0x168>
    buf[len++] = '0';
 800e8aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e8ac:	1c5a      	adds	r2, r3, #1
 800e8ae:	65fa      	str	r2, [r7, #92]	; 0x5c
 800e8b0:	3360      	adds	r3, #96	; 0x60
 800e8b2:	443b      	add	r3, r7
 800e8b4:	2230      	movs	r2, #48	; 0x30
 800e8b6:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 800e8ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e8bc:	3b01      	subs	r3, #1
 800e8be:	66bb      	str	r3, [r7, #104]	; 0x68
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800e8c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e8c2:	2b1f      	cmp	r3, #31
 800e8c4:	d802      	bhi.n	800e8cc <_ftoa+0x174>
 800e8c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e8c8:	2b09      	cmp	r3, #9
 800e8ca:	d8ee      	bhi.n	800e8aa <_ftoa+0x152>
  }

  int whole = (int)value;
 800e8cc:	ed97 7b00 	vldr	d7, [r7]
 800e8d0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800e8d4:	ee17 3a90 	vmov	r3, s15
 800e8d8:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 800e8da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e8dc:	ee07 3a90 	vmov	s15, r3
 800e8e0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e8e4:	ed97 6b00 	vldr	d6, [r7]
 800e8e8:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e8ec:	4a64      	ldr	r2, [pc, #400]	; (800ea80 <_ftoa+0x328>)
 800e8ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e8f0:	00db      	lsls	r3, r3, #3
 800e8f2:	4413      	add	r3, r2
 800e8f4:	ed93 7b00 	vldr	d7, [r3]
 800e8f8:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e8fc:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 800e900:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800e904:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800e908:	ee17 3a90 	vmov	r3, s15
 800e90c:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 800e90e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e910:	ee07 3a90 	vmov	s15, r3
 800e914:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e918:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 800e91c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e920:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40

  if (diff > 0.5) {
 800e924:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800e928:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800e92c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e934:	dd18      	ble.n	800e968 <_ftoa+0x210>
    ++frac;
 800e936:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e938:	3301      	adds	r3, #1
 800e93a:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 800e93c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e93e:	ee07 3a90 	vmov	s15, r3
 800e942:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800e946:	4a4e      	ldr	r2, [pc, #312]	; (800ea80 <_ftoa+0x328>)
 800e948:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e94a:	00db      	lsls	r3, r3, #3
 800e94c:	4413      	add	r3, r2
 800e94e:	ed93 7b00 	vldr	d7, [r3]
 800e952:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e95a:	db19      	blt.n	800e990 <_ftoa+0x238>
      frac = 0;
 800e95c:	2300      	movs	r3, #0
 800e95e:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 800e960:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e962:	3301      	adds	r3, #1
 800e964:	657b      	str	r3, [r7, #84]	; 0x54
 800e966:	e013      	b.n	800e990 <_ftoa+0x238>
    }
  }
  else if (diff < 0.5) {
 800e968:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800e96c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800e970:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e978:	d40a      	bmi.n	800e990 <_ftoa+0x238>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 800e97a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d004      	beq.n	800e98a <_ftoa+0x232>
 800e980:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e982:	f003 0301 	and.w	r3, r3, #1
 800e986:	2b00      	cmp	r3, #0
 800e988:	d002      	beq.n	800e990 <_ftoa+0x238>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 800e98a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e98c:	3301      	adds	r3, #1
 800e98e:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 800e990:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e992:	2b00      	cmp	r3, #0
 800e994:	d12e      	bne.n	800e9f4 <_ftoa+0x29c>
    diff = value - (double)whole;
 800e996:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e998:	ee07 3a90 	vmov	s15, r3
 800e99c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e9a0:	ed97 6b00 	vldr	d6, [r7]
 800e9a4:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e9a8:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 800e9ac:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800e9b0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800e9b4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e9b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9bc:	bf4c      	ite	mi
 800e9be:	2301      	movmi	r3, #1
 800e9c0:	2300      	movpl	r3, #0
 800e9c2:	b2db      	uxtb	r3, r3
 800e9c4:	f083 0301 	eor.w	r3, r3, #1
 800e9c8:	b2db      	uxtb	r3, r3
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d108      	bne.n	800e9e0 <_ftoa+0x288>
 800e9ce:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800e9d2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800e9d6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e9da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9de:	dd70      	ble.n	800eac2 <_ftoa+0x36a>
 800e9e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e9e2:	f003 0301 	and.w	r3, r3, #1
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	f000 808d 	beq.w	800eb06 <_ftoa+0x3ae>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 800e9ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e9ee:	3301      	adds	r3, #1
 800e9f0:	657b      	str	r3, [r7, #84]	; 0x54
 800e9f2:	e088      	b.n	800eb06 <_ftoa+0x3ae>
    }
  }
  else {
    unsigned int count = prec;
 800e9f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e9f6:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800e9f8:	e01f      	b.n	800ea3a <_ftoa+0x2e2>
      --count;
 800e9fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9fc:	3b01      	subs	r3, #1
 800e9fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 800ea00:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ea02:	4b20      	ldr	r3, [pc, #128]	; (800ea84 <_ftoa+0x32c>)
 800ea04:	fba3 2301 	umull	r2, r3, r3, r1
 800ea08:	08da      	lsrs	r2, r3, #3
 800ea0a:	4613      	mov	r3, r2
 800ea0c:	009b      	lsls	r3, r3, #2
 800ea0e:	4413      	add	r3, r2
 800ea10:	005b      	lsls	r3, r3, #1
 800ea12:	1aca      	subs	r2, r1, r3
 800ea14:	b2d2      	uxtb	r2, r2
 800ea16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ea18:	1c59      	adds	r1, r3, #1
 800ea1a:	65f9      	str	r1, [r7, #92]	; 0x5c
 800ea1c:	3230      	adds	r2, #48	; 0x30
 800ea1e:	b2d2      	uxtb	r2, r2
 800ea20:	3360      	adds	r3, #96	; 0x60
 800ea22:	443b      	add	r3, r7
 800ea24:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 800ea28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea2a:	4a16      	ldr	r2, [pc, #88]	; (800ea84 <_ftoa+0x32c>)
 800ea2c:	fba2 2303 	umull	r2, r3, r2, r3
 800ea30:	08db      	lsrs	r3, r3, #3
 800ea32:	653b      	str	r3, [r7, #80]	; 0x50
 800ea34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d026      	beq.n	800ea88 <_ftoa+0x330>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800ea3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ea3c:	2b1f      	cmp	r3, #31
 800ea3e:	d9dc      	bls.n	800e9fa <_ftoa+0x2a2>
 800ea40:	e02c      	b.n	800ea9c <_ftoa+0x344>
 800ea42:	bf00      	nop
 800ea44:	f3af 8000 	nop.w
 800ea48:	ffffffff 	.word	0xffffffff
 800ea4c:	ffefffff 	.word	0xffefffff
 800ea50:	ffffffff 	.word	0xffffffff
 800ea54:	7fefffff 	.word	0x7fefffff
 800ea58:	00000000 	.word	0x00000000
 800ea5c:	41cdcd65 	.word	0x41cdcd65
 800ea60:	00000000 	.word	0x00000000
 800ea64:	c1cdcd65 	.word	0xc1cdcd65
	...
 800ea70:	080217e0 	.word	0x080217e0
 800ea74:	080217e4 	.word	0x080217e4
 800ea78:	080217ec 	.word	0x080217ec
 800ea7c:	080217f4 	.word	0x080217f4
 800ea80:	0802b7a8 	.word	0x0802b7a8
 800ea84:	cccccccd 	.word	0xcccccccd
        break;
 800ea88:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800ea8a:	e007      	b.n	800ea9c <_ftoa+0x344>
      buf[len++] = '0';
 800ea8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ea8e:	1c5a      	adds	r2, r3, #1
 800ea90:	65fa      	str	r2, [r7, #92]	; 0x5c
 800ea92:	3360      	adds	r3, #96	; 0x60
 800ea94:	443b      	add	r3, r7
 800ea96:	2230      	movs	r2, #48	; 0x30
 800ea98:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800ea9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ea9e:	2b1f      	cmp	r3, #31
 800eaa0:	d804      	bhi.n	800eaac <_ftoa+0x354>
 800eaa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eaa4:	1e5a      	subs	r2, r3, #1
 800eaa6:	64fa      	str	r2, [r7, #76]	; 0x4c
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d1ef      	bne.n	800ea8c <_ftoa+0x334>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800eaac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eaae:	2b1f      	cmp	r3, #31
 800eab0:	d829      	bhi.n	800eb06 <_ftoa+0x3ae>
      // add decimal
      buf[len++] = '.';
 800eab2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eab4:	1c5a      	adds	r2, r3, #1
 800eab6:	65fa      	str	r2, [r7, #92]	; 0x5c
 800eab8:	3360      	adds	r3, #96	; 0x60
 800eaba:	443b      	add	r3, r7
 800eabc:	222e      	movs	r2, #46	; 0x2e
 800eabe:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800eac2:	e020      	b.n	800eb06 <_ftoa+0x3ae>
    buf[len++] = (char)(48 + (whole % 10));
 800eac4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800eac6:	4b46      	ldr	r3, [pc, #280]	; (800ebe0 <_ftoa+0x488>)
 800eac8:	fb83 1302 	smull	r1, r3, r3, r2
 800eacc:	1099      	asrs	r1, r3, #2
 800eace:	17d3      	asrs	r3, r2, #31
 800ead0:	1ac9      	subs	r1, r1, r3
 800ead2:	460b      	mov	r3, r1
 800ead4:	009b      	lsls	r3, r3, #2
 800ead6:	440b      	add	r3, r1
 800ead8:	005b      	lsls	r3, r3, #1
 800eada:	1ad1      	subs	r1, r2, r3
 800eadc:	b2ca      	uxtb	r2, r1
 800eade:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eae0:	1c59      	adds	r1, r3, #1
 800eae2:	65f9      	str	r1, [r7, #92]	; 0x5c
 800eae4:	3230      	adds	r2, #48	; 0x30
 800eae6:	b2d2      	uxtb	r2, r2
 800eae8:	3360      	adds	r3, #96	; 0x60
 800eaea:	443b      	add	r3, r7
 800eaec:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800eaf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eaf2:	4a3b      	ldr	r2, [pc, #236]	; (800ebe0 <_ftoa+0x488>)
 800eaf4:	fb82 1203 	smull	r1, r2, r2, r3
 800eaf8:	1092      	asrs	r2, r2, #2
 800eafa:	17db      	asrs	r3, r3, #31
 800eafc:	1ad3      	subs	r3, r2, r3
 800eafe:	657b      	str	r3, [r7, #84]	; 0x54
 800eb00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d003      	beq.n	800eb0e <_ftoa+0x3b6>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800eb06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb08:	2b1f      	cmp	r3, #31
 800eb0a:	d9db      	bls.n	800eac4 <_ftoa+0x36c>
 800eb0c:	e000      	b.n	800eb10 <_ftoa+0x3b8>
      break;
 800eb0e:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800eb10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eb12:	f003 0302 	and.w	r3, r3, #2
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d123      	bne.n	800eb62 <_ftoa+0x40a>
 800eb1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eb1c:	f003 0301 	and.w	r3, r3, #1
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d01e      	beq.n	800eb62 <_ftoa+0x40a>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800eb24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d014      	beq.n	800eb54 <_ftoa+0x3fc>
 800eb2a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d104      	bne.n	800eb3c <_ftoa+0x3e4>
 800eb32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eb34:	f003 030c 	and.w	r3, r3, #12
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d00b      	beq.n	800eb54 <_ftoa+0x3fc>
      width--;
 800eb3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb3e:	3b01      	subs	r3, #1
 800eb40:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800eb42:	e007      	b.n	800eb54 <_ftoa+0x3fc>
      buf[len++] = '0';
 800eb44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb46:	1c5a      	adds	r2, r3, #1
 800eb48:	65fa      	str	r2, [r7, #92]	; 0x5c
 800eb4a:	3360      	adds	r3, #96	; 0x60
 800eb4c:	443b      	add	r3, r7
 800eb4e:	2230      	movs	r2, #48	; 0x30
 800eb50:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800eb54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800eb56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb58:	429a      	cmp	r2, r3
 800eb5a:	d202      	bcs.n	800eb62 <_ftoa+0x40a>
 800eb5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb5e:	2b1f      	cmp	r3, #31
 800eb60:	d9f0      	bls.n	800eb44 <_ftoa+0x3ec>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800eb62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb64:	2b1f      	cmp	r3, #31
 800eb66:	d827      	bhi.n	800ebb8 <_ftoa+0x460>
    if (negative) {
 800eb68:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d008      	beq.n	800eb82 <_ftoa+0x42a>
      buf[len++] = '-';
 800eb70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb72:	1c5a      	adds	r2, r3, #1
 800eb74:	65fa      	str	r2, [r7, #92]	; 0x5c
 800eb76:	3360      	adds	r3, #96	; 0x60
 800eb78:	443b      	add	r3, r7
 800eb7a:	222d      	movs	r2, #45	; 0x2d
 800eb7c:	f803 2c48 	strb.w	r2, [r3, #-72]
 800eb80:	e01a      	b.n	800ebb8 <_ftoa+0x460>
    }
    else if (flags & FLAGS_PLUS) {
 800eb82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eb84:	f003 0304 	and.w	r3, r3, #4
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d008      	beq.n	800eb9e <_ftoa+0x446>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800eb8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb8e:	1c5a      	adds	r2, r3, #1
 800eb90:	65fa      	str	r2, [r7, #92]	; 0x5c
 800eb92:	3360      	adds	r3, #96	; 0x60
 800eb94:	443b      	add	r3, r7
 800eb96:	222b      	movs	r2, #43	; 0x2b
 800eb98:	f803 2c48 	strb.w	r2, [r3, #-72]
 800eb9c:	e00c      	b.n	800ebb8 <_ftoa+0x460>
    }
    else if (flags & FLAGS_SPACE) {
 800eb9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eba0:	f003 0308 	and.w	r3, r3, #8
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d007      	beq.n	800ebb8 <_ftoa+0x460>
      buf[len++] = ' ';
 800eba8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ebaa:	1c5a      	adds	r2, r3, #1
 800ebac:	65fa      	str	r2, [r7, #92]	; 0x5c
 800ebae:	3360      	adds	r3, #96	; 0x60
 800ebb0:	443b      	add	r3, r7
 800ebb2:	2220      	movs	r2, #32
 800ebb4:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800ebb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ebba:	9303      	str	r3, [sp, #12]
 800ebbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ebbe:	9302      	str	r3, [sp, #8]
 800ebc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ebc2:	9301      	str	r3, [sp, #4]
 800ebc4:	f107 0318 	add.w	r3, r7, #24
 800ebc8:	9300      	str	r3, [sp, #0]
 800ebca:	68bb      	ldr	r3, [r7, #8]
 800ebcc:	68fa      	ldr	r2, [r7, #12]
 800ebce:	6939      	ldr	r1, [r7, #16]
 800ebd0:	6978      	ldr	r0, [r7, #20]
 800ebd2:	f7ff fbc1 	bl	800e358 <_out_rev>
 800ebd6:	4603      	mov	r3, r0
}
 800ebd8:	4618      	mov	r0, r3
 800ebda:	3760      	adds	r7, #96	; 0x60
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	bd80      	pop	{r7, pc}
 800ebe0:	66666667 	.word	0x66666667
 800ebe4:	00000000 	.word	0x00000000

0800ebe8 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800ebe8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ebec:	b09a      	sub	sp, #104	; 0x68
 800ebee:	af06      	add	r7, sp, #24
 800ebf0:	6178      	str	r0, [r7, #20]
 800ebf2:	6139      	str	r1, [r7, #16]
 800ebf4:	60fa      	str	r2, [r7, #12]
 800ebf6:	60bb      	str	r3, [r7, #8]
 800ebf8:	ed87 0b00 	vstr	d0, [r7]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 800ebfc:	ed97 6b00 	vldr	d6, [r7]
 800ec00:	ed97 7b00 	vldr	d7, [r7]
 800ec04:	eeb4 6b47 	vcmp.f64	d6, d7
 800ec08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec0c:	d111      	bne.n	800ec32 <_etoa+0x4a>
 800ec0e:	ed97 7b00 	vldr	d7, [r7]
 800ec12:	ed9f 6bb3 	vldr	d6, [pc, #716]	; 800eee0 <_etoa+0x2f8>
 800ec16:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ec1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec1e:	dc08      	bgt.n	800ec32 <_etoa+0x4a>
 800ec20:	ed97 7b00 	vldr	d7, [r7]
 800ec24:	ed9f 6bb0 	vldr	d6, [pc, #704]	; 800eee8 <_etoa+0x300>
 800ec28:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ec2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec30:	d50f      	bpl.n	800ec52 <_etoa+0x6a>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800ec32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ec34:	9302      	str	r3, [sp, #8]
 800ec36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ec38:	9301      	str	r3, [sp, #4]
 800ec3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ec3c:	9300      	str	r3, [sp, #0]
 800ec3e:	ed97 0b00 	vldr	d0, [r7]
 800ec42:	68bb      	ldr	r3, [r7, #8]
 800ec44:	68fa      	ldr	r2, [r7, #12]
 800ec46:	6939      	ldr	r1, [r7, #16]
 800ec48:	6978      	ldr	r0, [r7, #20]
 800ec4a:	f7ff fd85 	bl	800e758 <_ftoa>
 800ec4e:	4603      	mov	r3, r0
 800ec50:	e1c2      	b.n	800efd8 <_etoa+0x3f0>
  }

  // determine the sign
  const bool negative = value < 0;
 800ec52:	ed97 7b00 	vldr	d7, [r7]
 800ec56:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800ec5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec5e:	bf4c      	ite	mi
 800ec60:	2301      	movmi	r3, #1
 800ec62:	2300      	movpl	r3, #0
 800ec64:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  if (negative) {
 800ec68:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d005      	beq.n	800ec7c <_etoa+0x94>
    value = -value;
 800ec70:	ed97 7b00 	vldr	d7, [r7]
 800ec74:	eeb1 7b47 	vneg.f64	d7, d7
 800ec78:	ed87 7b00 	vstr	d7, [r7]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 800ec7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ec7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d101      	bne.n	800ec8a <_etoa+0xa2>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800ec86:	2306      	movs	r3, #6
 800ec88:	673b      	str	r3, [r7, #112]	; 0x70
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 800ec8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ec8e:	e9c7 2306 	strd	r2, r3, [r7, #24]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 800ec92:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ec96:	f04f 0200 	mov.w	r2, #0
 800ec9a:	f04f 0300 	mov.w	r3, #0
 800ec9e:	0d0a      	lsrs	r2, r1, #20
 800eca0:	2300      	movs	r3, #0
 800eca2:	4613      	mov	r3, r2
 800eca4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800eca8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ecac:	63fb      	str	r3, [r7, #60]	; 0x3c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 800ecae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ecb2:	4690      	mov	r8, r2
 800ecb4:	f3c3 0913 	ubfx	r9, r3, #0, #20
 800ecb8:	4644      	mov	r4, r8
 800ecba:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 800ecbe:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ecc2:	e9c7 4506 	strd	r4, r5, [r7, #24]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800ecc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecc8:	ee07 3a90 	vmov	s15, r3
 800eccc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ecd0:	ed9f 6b87 	vldr	d6, [pc, #540]	; 800eef0 <_etoa+0x308>
 800ecd4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ecd8:	ed9f 6b87 	vldr	d6, [pc, #540]	; 800eef8 <_etoa+0x310>
 800ecdc:	ee37 6b06 	vadd.f64	d6, d7, d6
 800ece0:	ed97 7b06 	vldr	d7, [r7, #24]
 800ece4:	eeb7 5b08 	vmov.f64	d5, #120	; 0x3fc00000  1.5
 800ece8:	ee37 7b45 	vsub.f64	d7, d7, d5
 800ecec:	ed9f 5b84 	vldr	d5, [pc, #528]	; 800ef00 <_etoa+0x318>
 800ecf0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ecf4:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ecf8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800ecfc:	ee17 3a90 	vmov	r3, s15
 800ed00:	64fb      	str	r3, [r7, #76]	; 0x4c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 800ed02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed04:	ee07 3a90 	vmov	s15, r3
 800ed08:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ed0c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 800ef08 <_etoa+0x320>
 800ed10:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ed14:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800ed18:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ed1c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800ed20:	ee17 3a90 	vmov	r3, s15
 800ed24:	63fb      	str	r3, [r7, #60]	; 0x3c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 800ed26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed28:	ee07 3a90 	vmov	s15, r3
 800ed2c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ed30:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800ef10 <_etoa+0x328>
 800ed34:	ee27 6b06 	vmul.f64	d6, d7, d6
 800ed38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed3a:	ee07 3a90 	vmov	s15, r3
 800ed3e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ed42:	ed9f 5b75 	vldr	d5, [pc, #468]	; 800ef18 <_etoa+0x330>
 800ed46:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ed4a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ed4e:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
  const double z2 = z * z;
 800ed52:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800ed56:	ee27 7b07 	vmul.f64	d7, d7, d7
 800ed5a:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 800ed5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed60:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800ed64:	17da      	asrs	r2, r3, #31
 800ed66:	469a      	mov	sl, r3
 800ed68:	4693      	mov	fp, r2
 800ed6a:	f04f 0200 	mov.w	r2, #0
 800ed6e:	f04f 0300 	mov.w	r3, #0
 800ed72:	ea4f 530a 	mov.w	r3, sl, lsl #20
 800ed76:	2200      	movs	r2, #0
 800ed78:	e9c7 2306 	strd	r2, r3, [r7, #24]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 800ed7c:	ed97 6b06 	vldr	d6, [r7, #24]
 800ed80:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800ed84:	ee37 4b07 	vadd.f64	d4, d7, d7
 800ed88:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ed8c:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800ed90:	ee35 5b47 	vsub.f64	d5, d5, d7
 800ed94:	ed97 3b0a 	vldr	d3, [r7, #40]	; 0x28
 800ed98:	eeb2 2b0c 	vmov.f64	d2, #44	; 0x41600000  14.0
 800ed9c:	ee83 7b02 	vdiv.f64	d7, d3, d2
 800eda0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800eda4:	ee37 3b03 	vadd.f64	d3, d7, d3
 800eda8:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800edac:	ee82 7b03 	vdiv.f64	d7, d2, d3
 800edb0:	eeb1 3b08 	vmov.f64	d3, #24	; 0x40c00000  6.0
 800edb4:	ee37 3b03 	vadd.f64	d3, d7, d3
 800edb8:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800edbc:	ee82 7b03 	vdiv.f64	d7, d2, d3
 800edc0:	ee35 5b07 	vadd.f64	d5, d5, d7
 800edc4:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800edc8:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800edcc:	ee37 7b05 	vadd.f64	d7, d7, d5
 800edd0:	ee26 7b07 	vmul.f64	d7, d6, d7
 800edd4:	ed87 7b06 	vstr	d7, [r7, #24]
  // correct for rounding errors
  if (value < conv.F) {
 800edd8:	ed97 7b06 	vldr	d7, [r7, #24]
 800eddc:	ed97 6b00 	vldr	d6, [r7]
 800ede0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ede4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ede8:	d50a      	bpl.n	800ee00 <_etoa+0x218>
    expval--;
 800edea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800edec:	3b01      	subs	r3, #1
 800edee:	64fb      	str	r3, [r7, #76]	; 0x4c
    conv.F /= 10;
 800edf0:	ed97 6b06 	vldr	d6, [r7, #24]
 800edf4:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 800edf8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800edfc:	ed87 7b06 	vstr	d7, [r7, #24]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 800ee00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee02:	2b63      	cmp	r3, #99	; 0x63
 800ee04:	dc05      	bgt.n	800ee12 <_etoa+0x22a>
 800ee06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee08:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800ee0c:	db01      	blt.n	800ee12 <_etoa+0x22a>
 800ee0e:	2304      	movs	r3, #4
 800ee10:	e000      	b.n	800ee14 <_etoa+0x22c>
 800ee12:	2305      	movs	r3, #5
 800ee14:	64bb      	str	r3, [r7, #72]	; 0x48

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 800ee16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ee18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d031      	beq.n	800ee84 <_etoa+0x29c>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 800ee20:	ed97 7b00 	vldr	d7, [r7]
 800ee24:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 800ef20 <_etoa+0x338>
 800ee28:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ee2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee30:	db1d      	blt.n	800ee6e <_etoa+0x286>
 800ee32:	ed97 7b00 	vldr	d7, [r7]
 800ee36:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800ef28 <_etoa+0x340>
 800ee3a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ee3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee42:	d514      	bpl.n	800ee6e <_etoa+0x286>
      if ((int)prec > expval) {
 800ee44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ee46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ee48:	429a      	cmp	r2, r3
 800ee4a:	da05      	bge.n	800ee58 <_etoa+0x270>
        prec = (unsigned)((int)prec - expval - 1);
 800ee4c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ee4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee50:	1ad3      	subs	r3, r2, r3
 800ee52:	3b01      	subs	r3, #1
 800ee54:	673b      	str	r3, [r7, #112]	; 0x70
 800ee56:	e001      	b.n	800ee5c <_etoa+0x274>
      }
      else {
        prec = 0;
 800ee58:	2300      	movs	r3, #0
 800ee5a:	673b      	str	r3, [r7, #112]	; 0x70
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 800ee5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ee5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ee62:	67bb      	str	r3, [r7, #120]	; 0x78
      // no characters in exponent
      minwidth = 0U;
 800ee64:	2300      	movs	r3, #0
 800ee66:	64bb      	str	r3, [r7, #72]	; 0x48
      expval   = 0;
 800ee68:	2300      	movs	r3, #0
 800ee6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ee6c:	e00a      	b.n	800ee84 <_etoa+0x29c>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 800ee6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d007      	beq.n	800ee84 <_etoa+0x29c>
 800ee74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ee76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d002      	beq.n	800ee84 <_etoa+0x29c>
        --prec;
 800ee7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ee80:	3b01      	subs	r3, #1
 800ee82:	673b      	str	r3, [r7, #112]	; 0x70
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 800ee84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ee86:	647b      	str	r3, [r7, #68]	; 0x44
  if (width > minwidth) {
 800ee88:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ee8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee8c:	429a      	cmp	r2, r3
 800ee8e:	d904      	bls.n	800ee9a <_etoa+0x2b2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 800ee90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ee92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee94:	1ad3      	subs	r3, r2, r3
 800ee96:	647b      	str	r3, [r7, #68]	; 0x44
 800ee98:	e001      	b.n	800ee9e <_etoa+0x2b6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	647b      	str	r3, [r7, #68]	; 0x44
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 800ee9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eea0:	f003 0302 	and.w	r3, r3, #2
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d004      	beq.n	800eeb2 <_etoa+0x2ca>
 800eea8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d001      	beq.n	800eeb2 <_etoa+0x2ca>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 800eeae:	2300      	movs	r3, #0
 800eeb0:	647b      	str	r3, [r7, #68]	; 0x44
  }

  // rescale the float value
  if (expval) {
 800eeb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d007      	beq.n	800eec8 <_etoa+0x2e0>
    value /= conv.F;
 800eeb8:	ed97 6b06 	vldr	d6, [r7, #24]
 800eebc:	ed97 5b00 	vldr	d5, [r7]
 800eec0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800eec4:	ed87 7b00 	vstr	d7, [r7]
  }

  // output the floating part
  const size_t start_idx = idx;
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	627b      	str	r3, [r7, #36]	; 0x24
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 800eecc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d02d      	beq.n	800ef30 <_etoa+0x348>
 800eed4:	ed97 7b00 	vldr	d7, [r7]
 800eed8:	eeb1 7b47 	vneg.f64	d7, d7
 800eedc:	e02a      	b.n	800ef34 <_etoa+0x34c>
 800eede:	bf00      	nop
 800eee0:	ffffffff 	.word	0xffffffff
 800eee4:	7fefffff 	.word	0x7fefffff
 800eee8:	ffffffff 	.word	0xffffffff
 800eeec:	ffefffff 	.word	0xffefffff
 800eef0:	509f79fb 	.word	0x509f79fb
 800eef4:	3fd34413 	.word	0x3fd34413
 800eef8:	8b60c8b3 	.word	0x8b60c8b3
 800eefc:	3fc68a28 	.word	0x3fc68a28
 800ef00:	636f4361 	.word	0x636f4361
 800ef04:	3fd287a7 	.word	0x3fd287a7
 800ef08:	0979a371 	.word	0x0979a371
 800ef0c:	400a934f 	.word	0x400a934f
 800ef10:	bbb55516 	.word	0xbbb55516
 800ef14:	40026bb1 	.word	0x40026bb1
 800ef18:	fefa39ef 	.word	0xfefa39ef
 800ef1c:	3fe62e42 	.word	0x3fe62e42
 800ef20:	eb1c432d 	.word	0xeb1c432d
 800ef24:	3f1a36e2 	.word	0x3f1a36e2
 800ef28:	00000000 	.word	0x00000000
 800ef2c:	412e8480 	.word	0x412e8480
 800ef30:	ed97 7b00 	vldr	d7, [r7]
 800ef34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ef3a:	9302      	str	r3, [sp, #8]
 800ef3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef3e:	9301      	str	r3, [sp, #4]
 800ef40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ef42:	9300      	str	r3, [sp, #0]
 800ef44:	eeb0 0b47 	vmov.f64	d0, d7
 800ef48:	68bb      	ldr	r3, [r7, #8]
 800ef4a:	68fa      	ldr	r2, [r7, #12]
 800ef4c:	6939      	ldr	r1, [r7, #16]
 800ef4e:	6978      	ldr	r0, [r7, #20]
 800ef50:	f7ff fc02 	bl	800e758 <_ftoa>
 800ef54:	60f8      	str	r0, [r7, #12]

  // output the exponent part
  if (minwidth) {
 800ef56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d03c      	beq.n	800efd6 <_etoa+0x3ee>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 800ef5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef5e:	f003 0320 	and.w	r3, r3, #32
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d001      	beq.n	800ef6a <_etoa+0x382>
 800ef66:	2045      	movs	r0, #69	; 0x45
 800ef68:	e000      	b.n	800ef6c <_etoa+0x384>
 800ef6a:	2065      	movs	r0, #101	; 0x65
 800ef6c:	68fa      	ldr	r2, [r7, #12]
 800ef6e:	1c53      	adds	r3, r2, #1
 800ef70:	60fb      	str	r3, [r7, #12]
 800ef72:	697c      	ldr	r4, [r7, #20]
 800ef74:	68bb      	ldr	r3, [r7, #8]
 800ef76:	6939      	ldr	r1, [r7, #16]
 800ef78:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 800ef7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	bfb8      	it	lt
 800ef80:	425b      	neglt	r3, r3
 800ef82:	4618      	mov	r0, r3
 800ef84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef86:	0fdb      	lsrs	r3, r3, #31
 800ef88:	b2db      	uxtb	r3, r3
 800ef8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ef8c:	3a01      	subs	r2, #1
 800ef8e:	2105      	movs	r1, #5
 800ef90:	9105      	str	r1, [sp, #20]
 800ef92:	9204      	str	r2, [sp, #16]
 800ef94:	2200      	movs	r2, #0
 800ef96:	9203      	str	r2, [sp, #12]
 800ef98:	220a      	movs	r2, #10
 800ef9a:	9202      	str	r2, [sp, #8]
 800ef9c:	9301      	str	r3, [sp, #4]
 800ef9e:	9000      	str	r0, [sp, #0]
 800efa0:	68bb      	ldr	r3, [r7, #8]
 800efa2:	68fa      	ldr	r2, [r7, #12]
 800efa4:	6939      	ldr	r1, [r7, #16]
 800efa6:	6978      	ldr	r0, [r7, #20]
 800efa8:	f7ff fb02 	bl	800e5b0 <_ntoa_long>
 800efac:	60f8      	str	r0, [r7, #12]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 800efae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800efb0:	f003 0302 	and.w	r3, r3, #2
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d00e      	beq.n	800efd6 <_etoa+0x3ee>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 800efb8:	e007      	b.n	800efca <_etoa+0x3e2>
 800efba:	68fa      	ldr	r2, [r7, #12]
 800efbc:	1c53      	adds	r3, r2, #1
 800efbe:	60fb      	str	r3, [r7, #12]
 800efc0:	697c      	ldr	r4, [r7, #20]
 800efc2:	68bb      	ldr	r3, [r7, #8]
 800efc4:	6939      	ldr	r1, [r7, #16]
 800efc6:	2020      	movs	r0, #32
 800efc8:	47a0      	blx	r4
 800efca:	68fa      	ldr	r2, [r7, #12]
 800efcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efce:	1ad3      	subs	r3, r2, r3
 800efd0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800efd2:	429a      	cmp	r2, r3
 800efd4:	d8f1      	bhi.n	800efba <_etoa+0x3d2>
    }
  }
  return idx;
 800efd6:	68fb      	ldr	r3, [r7, #12]
}
 800efd8:	4618      	mov	r0, r3
 800efda:	3750      	adds	r7, #80	; 0x50
 800efdc:	46bd      	mov	sp, r7
 800efde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800efe2:	bf00      	nop

0800efe4 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 800efe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efe8:	b0a3      	sub	sp, #140	; 0x8c
 800efea:	af0a      	add	r7, sp, #40	; 0x28
 800efec:	6178      	str	r0, [r7, #20]
 800efee:	6139      	str	r1, [r7, #16]
 800eff0:	60fa      	str	r2, [r7, #12]
 800eff2:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 800eff4:	2300      	movs	r3, #0
 800eff6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 800eff8:	693b      	ldr	r3, [r7, #16]
 800effa:	2b00      	cmp	r3, #0
 800effc:	f040 84ba 	bne.w	800f974 <_vsnprintf+0x990>
    // use null output function
    out = _out_null;
 800f000:	4ba3      	ldr	r3, [pc, #652]	; (800f290 <_vsnprintf+0x2ac>)
 800f002:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 800f004:	f000 bcb6 	b.w	800f974 <_vsnprintf+0x990>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 800f008:	68bb      	ldr	r3, [r7, #8]
 800f00a:	781b      	ldrb	r3, [r3, #0]
 800f00c:	2b25      	cmp	r3, #37	; 0x25
 800f00e:	d00d      	beq.n	800f02c <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 800f010:	68bb      	ldr	r3, [r7, #8]
 800f012:	7818      	ldrb	r0, [r3, #0]
 800f014:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f016:	1c53      	adds	r3, r2, #1
 800f018:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f01a:	697c      	ldr	r4, [r7, #20]
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	6939      	ldr	r1, [r7, #16]
 800f020:	47a0      	blx	r4
      format++;
 800f022:	68bb      	ldr	r3, [r7, #8]
 800f024:	3301      	adds	r3, #1
 800f026:	60bb      	str	r3, [r7, #8]
      continue;
 800f028:	f000 bca4 	b.w	800f974 <_vsnprintf+0x990>
    }
    else {
      // yes, evaluate it
      format++;
 800f02c:	68bb      	ldr	r3, [r7, #8]
 800f02e:	3301      	adds	r3, #1
 800f030:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 800f032:	2300      	movs	r3, #0
 800f034:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 800f036:	68bb      	ldr	r3, [r7, #8]
 800f038:	781b      	ldrb	r3, [r3, #0]
 800f03a:	3b20      	subs	r3, #32
 800f03c:	2b10      	cmp	r3, #16
 800f03e:	d857      	bhi.n	800f0f0 <_vsnprintf+0x10c>
 800f040:	a201      	add	r2, pc, #4	; (adr r2, 800f048 <_vsnprintf+0x64>)
 800f042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f046:	bf00      	nop
 800f048:	0800f0c9 	.word	0x0800f0c9
 800f04c:	0800f0f1 	.word	0x0800f0f1
 800f050:	0800f0f1 	.word	0x0800f0f1
 800f054:	0800f0dd 	.word	0x0800f0dd
 800f058:	0800f0f1 	.word	0x0800f0f1
 800f05c:	0800f0f1 	.word	0x0800f0f1
 800f060:	0800f0f1 	.word	0x0800f0f1
 800f064:	0800f0f1 	.word	0x0800f0f1
 800f068:	0800f0f1 	.word	0x0800f0f1
 800f06c:	0800f0f1 	.word	0x0800f0f1
 800f070:	0800f0f1 	.word	0x0800f0f1
 800f074:	0800f0b5 	.word	0x0800f0b5
 800f078:	0800f0f1 	.word	0x0800f0f1
 800f07c:	0800f0a1 	.word	0x0800f0a1
 800f080:	0800f0f1 	.word	0x0800f0f1
 800f084:	0800f0f1 	.word	0x0800f0f1
 800f088:	0800f08d 	.word	0x0800f08d
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800f08c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f08e:	f043 0301 	orr.w	r3, r3, #1
 800f092:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f094:	68bb      	ldr	r3, [r7, #8]
 800f096:	3301      	adds	r3, #1
 800f098:	60bb      	str	r3, [r7, #8]
 800f09a:	2301      	movs	r3, #1
 800f09c:	653b      	str	r3, [r7, #80]	; 0x50
 800f09e:	e02a      	b.n	800f0f6 <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 800f0a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f0a2:	f043 0302 	orr.w	r3, r3, #2
 800f0a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f0a8:	68bb      	ldr	r3, [r7, #8]
 800f0aa:	3301      	adds	r3, #1
 800f0ac:	60bb      	str	r3, [r7, #8]
 800f0ae:	2301      	movs	r3, #1
 800f0b0:	653b      	str	r3, [r7, #80]	; 0x50
 800f0b2:	e020      	b.n	800f0f6 <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 800f0b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f0b6:	f043 0304 	orr.w	r3, r3, #4
 800f0ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f0bc:	68bb      	ldr	r3, [r7, #8]
 800f0be:	3301      	adds	r3, #1
 800f0c0:	60bb      	str	r3, [r7, #8]
 800f0c2:	2301      	movs	r3, #1
 800f0c4:	653b      	str	r3, [r7, #80]	; 0x50
 800f0c6:	e016      	b.n	800f0f6 <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 800f0c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f0ca:	f043 0308 	orr.w	r3, r3, #8
 800f0ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f0d0:	68bb      	ldr	r3, [r7, #8]
 800f0d2:	3301      	adds	r3, #1
 800f0d4:	60bb      	str	r3, [r7, #8]
 800f0d6:	2301      	movs	r3, #1
 800f0d8:	653b      	str	r3, [r7, #80]	; 0x50
 800f0da:	e00c      	b.n	800f0f6 <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 800f0dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f0de:	f043 0310 	orr.w	r3, r3, #16
 800f0e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f0e4:	68bb      	ldr	r3, [r7, #8]
 800f0e6:	3301      	adds	r3, #1
 800f0e8:	60bb      	str	r3, [r7, #8]
 800f0ea:	2301      	movs	r3, #1
 800f0ec:	653b      	str	r3, [r7, #80]	; 0x50
 800f0ee:	e002      	b.n	800f0f6 <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	653b      	str	r3, [r7, #80]	; 0x50
 800f0f4:	bf00      	nop
      }
    } while (n);
 800f0f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d19c      	bne.n	800f036 <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 800f100:	68bb      	ldr	r3, [r7, #8]
 800f102:	781b      	ldrb	r3, [r3, #0]
 800f104:	4618      	mov	r0, r3
 800f106:	f7ff f8ec 	bl	800e2e2 <_is_digit>
 800f10a:	4603      	mov	r3, r0
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d006      	beq.n	800f11e <_vsnprintf+0x13a>
      width = _atoi(&format);
 800f110:	f107 0308 	add.w	r3, r7, #8
 800f114:	4618      	mov	r0, r3
 800f116:	f7ff f8fb 	bl	800e310 <_atoi>
 800f11a:	65b8      	str	r0, [r7, #88]	; 0x58
 800f11c:	e01a      	b.n	800f154 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 800f11e:	68bb      	ldr	r3, [r7, #8]
 800f120:	781b      	ldrb	r3, [r3, #0]
 800f122:	2b2a      	cmp	r3, #42	; 0x2a
 800f124:	d116      	bne.n	800f154 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 800f126:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f12a:	1d1a      	adds	r2, r3, #4
 800f12c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 800f134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f136:	2b00      	cmp	r3, #0
 800f138:	da07      	bge.n	800f14a <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 800f13a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f13c:	f043 0302 	orr.w	r3, r3, #2
 800f140:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 800f142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f144:	425b      	negs	r3, r3
 800f146:	65bb      	str	r3, [r7, #88]	; 0x58
 800f148:	e001      	b.n	800f14e <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 800f14a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f14c:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 800f14e:	68bb      	ldr	r3, [r7, #8]
 800f150:	3301      	adds	r3, #1
 800f152:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 800f154:	2300      	movs	r3, #0
 800f156:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 800f158:	68bb      	ldr	r3, [r7, #8]
 800f15a:	781b      	ldrb	r3, [r3, #0]
 800f15c:	2b2e      	cmp	r3, #46	; 0x2e
 800f15e:	d127      	bne.n	800f1b0 <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 800f160:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f162:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f166:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 800f168:	68bb      	ldr	r3, [r7, #8]
 800f16a:	3301      	adds	r3, #1
 800f16c:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 800f16e:	68bb      	ldr	r3, [r7, #8]
 800f170:	781b      	ldrb	r3, [r3, #0]
 800f172:	4618      	mov	r0, r3
 800f174:	f7ff f8b5 	bl	800e2e2 <_is_digit>
 800f178:	4603      	mov	r3, r0
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d006      	beq.n	800f18c <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 800f17e:	f107 0308 	add.w	r3, r7, #8
 800f182:	4618      	mov	r0, r3
 800f184:	f7ff f8c4 	bl	800e310 <_atoi>
 800f188:	6578      	str	r0, [r7, #84]	; 0x54
 800f18a:	e011      	b.n	800f1b0 <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 800f18c:	68bb      	ldr	r3, [r7, #8]
 800f18e:	781b      	ldrb	r3, [r3, #0]
 800f190:	2b2a      	cmp	r3, #42	; 0x2a
 800f192:	d10d      	bne.n	800f1b0 <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 800f194:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f198:	1d1a      	adds	r2, r3, #4
 800f19a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 800f1a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f1a8:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800f1aa:	68bb      	ldr	r3, [r7, #8]
 800f1ac:	3301      	adds	r3, #1
 800f1ae:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 800f1b0:	68bb      	ldr	r3, [r7, #8]
 800f1b2:	781b      	ldrb	r3, [r3, #0]
 800f1b4:	3b68      	subs	r3, #104	; 0x68
 800f1b6:	2b12      	cmp	r3, #18
 800f1b8:	d866      	bhi.n	800f288 <_vsnprintf+0x2a4>
 800f1ba:	a201      	add	r2, pc, #4	; (adr r2, 800f1c0 <_vsnprintf+0x1dc>)
 800f1bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1c0:	0800f233 	.word	0x0800f233
 800f1c4:	0800f289 	.word	0x0800f289
 800f1c8:	0800f269 	.word	0x0800f269
 800f1cc:	0800f289 	.word	0x0800f289
 800f1d0:	0800f20d 	.word	0x0800f20d
 800f1d4:	0800f289 	.word	0x0800f289
 800f1d8:	0800f289 	.word	0x0800f289
 800f1dc:	0800f289 	.word	0x0800f289
 800f1e0:	0800f289 	.word	0x0800f289
 800f1e4:	0800f289 	.word	0x0800f289
 800f1e8:	0800f289 	.word	0x0800f289
 800f1ec:	0800f289 	.word	0x0800f289
 800f1f0:	0800f259 	.word	0x0800f259
 800f1f4:	0800f289 	.word	0x0800f289
 800f1f8:	0800f289 	.word	0x0800f289
 800f1fc:	0800f289 	.word	0x0800f289
 800f200:	0800f289 	.word	0x0800f289
 800f204:	0800f289 	.word	0x0800f289
 800f208:	0800f279 	.word	0x0800f279
      case 'l' :
        flags |= FLAGS_LONG;
 800f20c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f20e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f212:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800f214:	68bb      	ldr	r3, [r7, #8]
 800f216:	3301      	adds	r3, #1
 800f218:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 800f21a:	68bb      	ldr	r3, [r7, #8]
 800f21c:	781b      	ldrb	r3, [r3, #0]
 800f21e:	2b6c      	cmp	r3, #108	; 0x6c
 800f220:	d134      	bne.n	800f28c <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 800f222:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f224:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f228:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 800f22a:	68bb      	ldr	r3, [r7, #8]
 800f22c:	3301      	adds	r3, #1
 800f22e:	60bb      	str	r3, [r7, #8]
        }
        break;
 800f230:	e02c      	b.n	800f28c <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 800f232:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f238:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800f23a:	68bb      	ldr	r3, [r7, #8]
 800f23c:	3301      	adds	r3, #1
 800f23e:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 800f240:	68bb      	ldr	r3, [r7, #8]
 800f242:	781b      	ldrb	r3, [r3, #0]
 800f244:	2b68      	cmp	r3, #104	; 0x68
 800f246:	d125      	bne.n	800f294 <_vsnprintf+0x2b0>
          flags |= FLAGS_CHAR;
 800f248:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f24a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f24e:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 800f250:	68bb      	ldr	r3, [r7, #8]
 800f252:	3301      	adds	r3, #1
 800f254:	60bb      	str	r3, [r7, #8]
        }
        break;
 800f256:	e01d      	b.n	800f294 <_vsnprintf+0x2b0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800f258:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f25a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f25e:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800f260:	68bb      	ldr	r3, [r7, #8]
 800f262:	3301      	adds	r3, #1
 800f264:	60bb      	str	r3, [r7, #8]
        break;
 800f266:	e016      	b.n	800f296 <_vsnprintf+0x2b2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800f268:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f26a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f26e:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800f270:	68bb      	ldr	r3, [r7, #8]
 800f272:	3301      	adds	r3, #1
 800f274:	60bb      	str	r3, [r7, #8]
        break;
 800f276:	e00e      	b.n	800f296 <_vsnprintf+0x2b2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800f278:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f27a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f27e:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800f280:	68bb      	ldr	r3, [r7, #8]
 800f282:	3301      	adds	r3, #1
 800f284:	60bb      	str	r3, [r7, #8]
        break;
 800f286:	e006      	b.n	800f296 <_vsnprintf+0x2b2>
      default :
        break;
 800f288:	bf00      	nop
 800f28a:	e004      	b.n	800f296 <_vsnprintf+0x2b2>
        break;
 800f28c:	bf00      	nop
 800f28e:	e002      	b.n	800f296 <_vsnprintf+0x2b2>
 800f290:	0800e28d 	.word	0x0800e28d
        break;
 800f294:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 800f296:	68bb      	ldr	r3, [r7, #8]
 800f298:	781b      	ldrb	r3, [r3, #0]
 800f29a:	3b25      	subs	r3, #37	; 0x25
 800f29c:	2b53      	cmp	r3, #83	; 0x53
 800f29e:	f200 835c 	bhi.w	800f95a <_vsnprintf+0x976>
 800f2a2:	a201      	add	r2, pc, #4	; (adr r2, 800f2a8 <_vsnprintf+0x2c4>)
 800f2a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2a8:	0800f943 	.word	0x0800f943
 800f2ac:	0800f95b 	.word	0x0800f95b
 800f2b0:	0800f95b 	.word	0x0800f95b
 800f2b4:	0800f95b 	.word	0x0800f95b
 800f2b8:	0800f95b 	.word	0x0800f95b
 800f2bc:	0800f95b 	.word	0x0800f95b
 800f2c0:	0800f95b 	.word	0x0800f95b
 800f2c4:	0800f95b 	.word	0x0800f95b
 800f2c8:	0800f95b 	.word	0x0800f95b
 800f2cc:	0800f95b 	.word	0x0800f95b
 800f2d0:	0800f95b 	.word	0x0800f95b
 800f2d4:	0800f95b 	.word	0x0800f95b
 800f2d8:	0800f95b 	.word	0x0800f95b
 800f2dc:	0800f95b 	.word	0x0800f95b
 800f2e0:	0800f95b 	.word	0x0800f95b
 800f2e4:	0800f95b 	.word	0x0800f95b
 800f2e8:	0800f95b 	.word	0x0800f95b
 800f2ec:	0800f95b 	.word	0x0800f95b
 800f2f0:	0800f95b 	.word	0x0800f95b
 800f2f4:	0800f95b 	.word	0x0800f95b
 800f2f8:	0800f95b 	.word	0x0800f95b
 800f2fc:	0800f95b 	.word	0x0800f95b
 800f300:	0800f95b 	.word	0x0800f95b
 800f304:	0800f95b 	.word	0x0800f95b
 800f308:	0800f95b 	.word	0x0800f95b
 800f30c:	0800f95b 	.word	0x0800f95b
 800f310:	0800f95b 	.word	0x0800f95b
 800f314:	0800f95b 	.word	0x0800f95b
 800f318:	0800f95b 	.word	0x0800f95b
 800f31c:	0800f95b 	.word	0x0800f95b
 800f320:	0800f95b 	.word	0x0800f95b
 800f324:	0800f95b 	.word	0x0800f95b
 800f328:	0800f6fb 	.word	0x0800f6fb
 800f32c:	0800f6af 	.word	0x0800f6af
 800f330:	0800f6fb 	.word	0x0800f6fb
 800f334:	0800f95b 	.word	0x0800f95b
 800f338:	0800f95b 	.word	0x0800f95b
 800f33c:	0800f95b 	.word	0x0800f95b
 800f340:	0800f95b 	.word	0x0800f95b
 800f344:	0800f95b 	.word	0x0800f95b
 800f348:	0800f95b 	.word	0x0800f95b
 800f34c:	0800f95b 	.word	0x0800f95b
 800f350:	0800f95b 	.word	0x0800f95b
 800f354:	0800f95b 	.word	0x0800f95b
 800f358:	0800f95b 	.word	0x0800f95b
 800f35c:	0800f95b 	.word	0x0800f95b
 800f360:	0800f95b 	.word	0x0800f95b
 800f364:	0800f95b 	.word	0x0800f95b
 800f368:	0800f95b 	.word	0x0800f95b
 800f36c:	0800f95b 	.word	0x0800f95b
 800f370:	0800f95b 	.word	0x0800f95b
 800f374:	0800f3f9 	.word	0x0800f3f9
 800f378:	0800f95b 	.word	0x0800f95b
 800f37c:	0800f95b 	.word	0x0800f95b
 800f380:	0800f95b 	.word	0x0800f95b
 800f384:	0800f95b 	.word	0x0800f95b
 800f388:	0800f95b 	.word	0x0800f95b
 800f38c:	0800f95b 	.word	0x0800f95b
 800f390:	0800f95b 	.word	0x0800f95b
 800f394:	0800f95b 	.word	0x0800f95b
 800f398:	0800f95b 	.word	0x0800f95b
 800f39c:	0800f3f9 	.word	0x0800f3f9
 800f3a0:	0800f767 	.word	0x0800f767
 800f3a4:	0800f3f9 	.word	0x0800f3f9
 800f3a8:	0800f6fb 	.word	0x0800f6fb
 800f3ac:	0800f6af 	.word	0x0800f6af
 800f3b0:	0800f6fb 	.word	0x0800f6fb
 800f3b4:	0800f95b 	.word	0x0800f95b
 800f3b8:	0800f3f9 	.word	0x0800f3f9
 800f3bc:	0800f95b 	.word	0x0800f95b
 800f3c0:	0800f95b 	.word	0x0800f95b
 800f3c4:	0800f95b 	.word	0x0800f95b
 800f3c8:	0800f95b 	.word	0x0800f95b
 800f3cc:	0800f95b 	.word	0x0800f95b
 800f3d0:	0800f3f9 	.word	0x0800f3f9
 800f3d4:	0800f8a7 	.word	0x0800f8a7
 800f3d8:	0800f95b 	.word	0x0800f95b
 800f3dc:	0800f95b 	.word	0x0800f95b
 800f3e0:	0800f7df 	.word	0x0800f7df
 800f3e4:	0800f95b 	.word	0x0800f95b
 800f3e8:	0800f3f9 	.word	0x0800f3f9
 800f3ec:	0800f95b 	.word	0x0800f95b
 800f3f0:	0800f95b 	.word	0x0800f95b
 800f3f4:	0800f3f9 	.word	0x0800f3f9
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 800f3f8:	68bb      	ldr	r3, [r7, #8]
 800f3fa:	781b      	ldrb	r3, [r3, #0]
 800f3fc:	2b78      	cmp	r3, #120	; 0x78
 800f3fe:	d003      	beq.n	800f408 <_vsnprintf+0x424>
 800f400:	68bb      	ldr	r3, [r7, #8]
 800f402:	781b      	ldrb	r3, [r3, #0]
 800f404:	2b58      	cmp	r3, #88	; 0x58
 800f406:	d102      	bne.n	800f40e <_vsnprintf+0x42a>
          base = 16U;
 800f408:	2310      	movs	r3, #16
 800f40a:	64bb      	str	r3, [r7, #72]	; 0x48
 800f40c:	e013      	b.n	800f436 <_vsnprintf+0x452>
        }
        else if (*format == 'o') {
 800f40e:	68bb      	ldr	r3, [r7, #8]
 800f410:	781b      	ldrb	r3, [r3, #0]
 800f412:	2b6f      	cmp	r3, #111	; 0x6f
 800f414:	d102      	bne.n	800f41c <_vsnprintf+0x438>
          base =  8U;
 800f416:	2308      	movs	r3, #8
 800f418:	64bb      	str	r3, [r7, #72]	; 0x48
 800f41a:	e00c      	b.n	800f436 <_vsnprintf+0x452>
        }
        else if (*format == 'b') {
 800f41c:	68bb      	ldr	r3, [r7, #8]
 800f41e:	781b      	ldrb	r3, [r3, #0]
 800f420:	2b62      	cmp	r3, #98	; 0x62
 800f422:	d102      	bne.n	800f42a <_vsnprintf+0x446>
          base =  2U;
 800f424:	2302      	movs	r3, #2
 800f426:	64bb      	str	r3, [r7, #72]	; 0x48
 800f428:	e005      	b.n	800f436 <_vsnprintf+0x452>
        }
        else {
          base = 10U;
 800f42a:	230a      	movs	r3, #10
 800f42c:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800f42e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f430:	f023 0310 	bic.w	r3, r3, #16
 800f434:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 800f436:	68bb      	ldr	r3, [r7, #8]
 800f438:	781b      	ldrb	r3, [r3, #0]
 800f43a:	2b58      	cmp	r3, #88	; 0x58
 800f43c:	d103      	bne.n	800f446 <_vsnprintf+0x462>
          flags |= FLAGS_UPPERCASE;
 800f43e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f440:	f043 0320 	orr.w	r3, r3, #32
 800f444:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 800f446:	68bb      	ldr	r3, [r7, #8]
 800f448:	781b      	ldrb	r3, [r3, #0]
 800f44a:	2b69      	cmp	r3, #105	; 0x69
 800f44c:	d007      	beq.n	800f45e <_vsnprintf+0x47a>
 800f44e:	68bb      	ldr	r3, [r7, #8]
 800f450:	781b      	ldrb	r3, [r3, #0]
 800f452:	2b64      	cmp	r3, #100	; 0x64
 800f454:	d003      	beq.n	800f45e <_vsnprintf+0x47a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800f456:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f458:	f023 030c 	bic.w	r3, r3, #12
 800f45c:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 800f45e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f464:	2b00      	cmp	r3, #0
 800f466:	d003      	beq.n	800f470 <_vsnprintf+0x48c>
          flags &= ~FLAGS_ZEROPAD;
 800f468:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f46a:	f023 0301 	bic.w	r3, r3, #1
 800f46e:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 800f470:	68bb      	ldr	r3, [r7, #8]
 800f472:	781b      	ldrb	r3, [r3, #0]
 800f474:	2b69      	cmp	r3, #105	; 0x69
 800f476:	d004      	beq.n	800f482 <_vsnprintf+0x49e>
 800f478:	68bb      	ldr	r3, [r7, #8]
 800f47a:	781b      	ldrb	r3, [r3, #0]
 800f47c:	2b64      	cmp	r3, #100	; 0x64
 800f47e:	f040 8098 	bne.w	800f5b2 <_vsnprintf+0x5ce>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 800f482:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f484:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d031      	beq.n	800f4f0 <_vsnprintf+0x50c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 800f48c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f490:	3307      	adds	r3, #7
 800f492:	f023 0307 	bic.w	r3, r3, #7
 800f496:	f103 0208 	add.w	r2, r3, #8
 800f49a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800f49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4a2:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800f4a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	da06      	bge.n	800f4bc <_vsnprintf+0x4d8>
 800f4ae:	2100      	movs	r1, #0
 800f4b0:	f1d2 0800 	rsbs	r8, r2, #0
 800f4b4:	eb61 0903 	sbc.w	r9, r1, r3
 800f4b8:	4642      	mov	r2, r8
 800f4ba:	464b      	mov	r3, r9
 800f4bc:	69f9      	ldr	r1, [r7, #28]
 800f4be:	0fc9      	lsrs	r1, r1, #31
 800f4c0:	b2c9      	uxtb	r1, r1
 800f4c2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800f4c4:	2400      	movs	r4, #0
 800f4c6:	4682      	mov	sl, r0
 800f4c8:	46a3      	mov	fp, r4
 800f4ca:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f4cc:	9008      	str	r0, [sp, #32]
 800f4ce:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f4d0:	9007      	str	r0, [sp, #28]
 800f4d2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f4d4:	9006      	str	r0, [sp, #24]
 800f4d6:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800f4da:	9102      	str	r1, [sp, #8]
 800f4dc:	e9cd 2300 	strd	r2, r3, [sp]
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f4e4:	6939      	ldr	r1, [r7, #16]
 800f4e6:	6978      	ldr	r0, [r7, #20]
 800f4e8:	f7ff f8c8 	bl	800e67c <_ntoa_long_long>
 800f4ec:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 800f4ee:	e0da      	b.n	800f6a6 <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800f4f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f4f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d020      	beq.n	800f53c <_vsnprintf+0x558>
            const long value = va_arg(va, long);
 800f4fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f4fe:	1d1a      	adds	r2, r3, #4
 800f500:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800f508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	bfb8      	it	lt
 800f50e:	425b      	neglt	r3, r3
 800f510:	4619      	mov	r1, r3
 800f512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f514:	0fdb      	lsrs	r3, r3, #31
 800f516:	b2db      	uxtb	r3, r3
 800f518:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f51a:	9205      	str	r2, [sp, #20]
 800f51c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f51e:	9204      	str	r2, [sp, #16]
 800f520:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f522:	9203      	str	r2, [sp, #12]
 800f524:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f526:	9202      	str	r2, [sp, #8]
 800f528:	9301      	str	r3, [sp, #4]
 800f52a:	9100      	str	r1, [sp, #0]
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f530:	6939      	ldr	r1, [r7, #16]
 800f532:	6978      	ldr	r0, [r7, #20]
 800f534:	f7ff f83c 	bl	800e5b0 <_ntoa_long>
 800f538:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 800f53a:	e0b4      	b.n	800f6a6 <_vsnprintf+0x6c2>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800f53c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f53e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f542:	2b00      	cmp	r3, #0
 800f544:	d007      	beq.n	800f556 <_vsnprintf+0x572>
 800f546:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f54a:	1d1a      	adds	r2, r3, #4
 800f54c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	b2db      	uxtb	r3, r3
 800f554:	e012      	b.n	800f57c <_vsnprintf+0x598>
 800f556:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d007      	beq.n	800f570 <_vsnprintf+0x58c>
 800f560:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f564:	1d1a      	adds	r2, r3, #4
 800f566:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	b21b      	sxth	r3, r3
 800f56e:	e005      	b.n	800f57c <_vsnprintf+0x598>
 800f570:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f574:	1d1a      	adds	r2, r3, #4
 800f576:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800f57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f580:	2b00      	cmp	r3, #0
 800f582:	bfb8      	it	lt
 800f584:	425b      	neglt	r3, r3
 800f586:	4619      	mov	r1, r3
 800f588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f58a:	0fdb      	lsrs	r3, r3, #31
 800f58c:	b2db      	uxtb	r3, r3
 800f58e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f590:	9205      	str	r2, [sp, #20]
 800f592:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f594:	9204      	str	r2, [sp, #16]
 800f596:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f598:	9203      	str	r2, [sp, #12]
 800f59a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f59c:	9202      	str	r2, [sp, #8]
 800f59e:	9301      	str	r3, [sp, #4]
 800f5a0:	9100      	str	r1, [sp, #0]
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f5a6:	6939      	ldr	r1, [r7, #16]
 800f5a8:	6978      	ldr	r0, [r7, #20]
 800f5aa:	f7ff f801 	bl	800e5b0 <_ntoa_long>
 800f5ae:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 800f5b0:	e079      	b.n	800f6a6 <_vsnprintf+0x6c2>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 800f5b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f5b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d022      	beq.n	800f602 <_vsnprintf+0x61e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 800f5bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f5c0:	3307      	adds	r3, #7
 800f5c2:	f023 0307 	bic.w	r3, r3, #7
 800f5c6:	f103 0208 	add.w	r2, r3, #8
 800f5ca:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800f5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5d2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f5d4:	2000      	movs	r0, #0
 800f5d6:	460d      	mov	r5, r1
 800f5d8:	4606      	mov	r6, r0
 800f5da:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800f5dc:	9108      	str	r1, [sp, #32]
 800f5de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f5e0:	9107      	str	r1, [sp, #28]
 800f5e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f5e4:	9106      	str	r1, [sp, #24]
 800f5e6:	e9cd 5604 	strd	r5, r6, [sp, #16]
 800f5ea:	2100      	movs	r1, #0
 800f5ec:	9102      	str	r1, [sp, #8]
 800f5ee:	e9cd 2300 	strd	r2, r3, [sp]
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f5f6:	6939      	ldr	r1, [r7, #16]
 800f5f8:	6978      	ldr	r0, [r7, #20]
 800f5fa:	f7ff f83f 	bl	800e67c <_ntoa_long_long>
 800f5fe:	64f8      	str	r0, [r7, #76]	; 0x4c
 800f600:	e051      	b.n	800f6a6 <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800f602:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d018      	beq.n	800f63e <_vsnprintf+0x65a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 800f60c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f610:	1d1a      	adds	r2, r3, #4
 800f612:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f61a:	9205      	str	r2, [sp, #20]
 800f61c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f61e:	9204      	str	r2, [sp, #16]
 800f620:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f622:	9203      	str	r2, [sp, #12]
 800f624:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f626:	9202      	str	r2, [sp, #8]
 800f628:	2200      	movs	r2, #0
 800f62a:	9201      	str	r2, [sp, #4]
 800f62c:	9300      	str	r3, [sp, #0]
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f632:	6939      	ldr	r1, [r7, #16]
 800f634:	6978      	ldr	r0, [r7, #20]
 800f636:	f7fe ffbb 	bl	800e5b0 <_ntoa_long>
 800f63a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800f63c:	e033      	b.n	800f6a6 <_vsnprintf+0x6c2>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800f63e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f644:	2b00      	cmp	r3, #0
 800f646:	d007      	beq.n	800f658 <_vsnprintf+0x674>
 800f648:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f64c:	1d1a      	adds	r2, r3, #4
 800f64e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	b2db      	uxtb	r3, r3
 800f656:	e012      	b.n	800f67e <_vsnprintf+0x69a>
 800f658:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f65a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d007      	beq.n	800f672 <_vsnprintf+0x68e>
 800f662:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f666:	1d1a      	adds	r2, r3, #4
 800f668:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	b29b      	uxth	r3, r3
 800f670:	e005      	b.n	800f67e <_vsnprintf+0x69a>
 800f672:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f676:	1d1a      	adds	r2, r3, #4
 800f678:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800f680:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f682:	9305      	str	r3, [sp, #20]
 800f684:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f686:	9304      	str	r3, [sp, #16]
 800f688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f68a:	9303      	str	r3, [sp, #12]
 800f68c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f68e:	9302      	str	r3, [sp, #8]
 800f690:	2300      	movs	r3, #0
 800f692:	9301      	str	r3, [sp, #4]
 800f694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f696:	9300      	str	r3, [sp, #0]
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f69c:	6939      	ldr	r1, [r7, #16]
 800f69e:	6978      	ldr	r0, [r7, #20]
 800f6a0:	f7fe ff86 	bl	800e5b0 <_ntoa_long>
 800f6a4:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 800f6a6:	68bb      	ldr	r3, [r7, #8]
 800f6a8:	3301      	adds	r3, #1
 800f6aa:	60bb      	str	r3, [r7, #8]
        break;
 800f6ac:	e162      	b.n	800f974 <_vsnprintf+0x990>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 800f6ae:	68bb      	ldr	r3, [r7, #8]
 800f6b0:	781b      	ldrb	r3, [r3, #0]
 800f6b2:	2b46      	cmp	r3, #70	; 0x46
 800f6b4:	d103      	bne.n	800f6be <_vsnprintf+0x6da>
 800f6b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f6b8:	f043 0320 	orr.w	r3, r3, #32
 800f6bc:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800f6be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f6c2:	3307      	adds	r3, #7
 800f6c4:	f023 0307 	bic.w	r3, r3, #7
 800f6c8:	f103 0208 	add.w	r2, r3, #8
 800f6cc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800f6d0:	ed93 7b00 	vldr	d7, [r3]
 800f6d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f6d6:	9302      	str	r3, [sp, #8]
 800f6d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f6da:	9301      	str	r3, [sp, #4]
 800f6dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f6de:	9300      	str	r3, [sp, #0]
 800f6e0:	eeb0 0b47 	vmov.f64	d0, d7
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f6e8:	6939      	ldr	r1, [r7, #16]
 800f6ea:	6978      	ldr	r0, [r7, #20]
 800f6ec:	f7ff f834 	bl	800e758 <_ftoa>
 800f6f0:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 800f6f2:	68bb      	ldr	r3, [r7, #8]
 800f6f4:	3301      	adds	r3, #1
 800f6f6:	60bb      	str	r3, [r7, #8]
        break;
 800f6f8:	e13c      	b.n	800f974 <_vsnprintf+0x990>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800f6fa:	68bb      	ldr	r3, [r7, #8]
 800f6fc:	781b      	ldrb	r3, [r3, #0]
 800f6fe:	2b67      	cmp	r3, #103	; 0x67
 800f700:	d003      	beq.n	800f70a <_vsnprintf+0x726>
 800f702:	68bb      	ldr	r3, [r7, #8]
 800f704:	781b      	ldrb	r3, [r3, #0]
 800f706:	2b47      	cmp	r3, #71	; 0x47
 800f708:	d103      	bne.n	800f712 <_vsnprintf+0x72e>
 800f70a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f70c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800f710:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 800f712:	68bb      	ldr	r3, [r7, #8]
 800f714:	781b      	ldrb	r3, [r3, #0]
 800f716:	2b45      	cmp	r3, #69	; 0x45
 800f718:	d003      	beq.n	800f722 <_vsnprintf+0x73e>
 800f71a:	68bb      	ldr	r3, [r7, #8]
 800f71c:	781b      	ldrb	r3, [r3, #0]
 800f71e:	2b47      	cmp	r3, #71	; 0x47
 800f720:	d103      	bne.n	800f72a <_vsnprintf+0x746>
 800f722:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f724:	f043 0320 	orr.w	r3, r3, #32
 800f728:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800f72a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f72e:	3307      	adds	r3, #7
 800f730:	f023 0307 	bic.w	r3, r3, #7
 800f734:	f103 0208 	add.w	r2, r3, #8
 800f738:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800f73c:	ed93 7b00 	vldr	d7, [r3]
 800f740:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f742:	9302      	str	r3, [sp, #8]
 800f744:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f746:	9301      	str	r3, [sp, #4]
 800f748:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f74a:	9300      	str	r3, [sp, #0]
 800f74c:	eeb0 0b47 	vmov.f64	d0, d7
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f754:	6939      	ldr	r1, [r7, #16]
 800f756:	6978      	ldr	r0, [r7, #20]
 800f758:	f7ff fa46 	bl	800ebe8 <_etoa>
 800f75c:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 800f75e:	68bb      	ldr	r3, [r7, #8]
 800f760:	3301      	adds	r3, #1
 800f762:	60bb      	str	r3, [r7, #8]
        break;
 800f764:	e106      	b.n	800f974 <_vsnprintf+0x990>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 800f766:	2301      	movs	r3, #1
 800f768:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 800f76a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f76c:	f003 0302 	and.w	r3, r3, #2
 800f770:	2b00      	cmp	r3, #0
 800f772:	d10e      	bne.n	800f792 <_vsnprintf+0x7ae>
          while (l++ < width) {
 800f774:	e007      	b.n	800f786 <_vsnprintf+0x7a2>
            out(' ', buffer, idx++, maxlen);
 800f776:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f778:	1c53      	adds	r3, r2, #1
 800f77a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f77c:	697c      	ldr	r4, [r7, #20]
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	6939      	ldr	r1, [r7, #16]
 800f782:	2020      	movs	r0, #32
 800f784:	47a0      	blx	r4
          while (l++ < width) {
 800f786:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f788:	1c5a      	adds	r2, r3, #1
 800f78a:	647a      	str	r2, [r7, #68]	; 0x44
 800f78c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f78e:	429a      	cmp	r2, r3
 800f790:	d8f1      	bhi.n	800f776 <_vsnprintf+0x792>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 800f792:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f796:	1d1a      	adds	r2, r3, #4
 800f798:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	b2d8      	uxtb	r0, r3
 800f7a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f7a2:	1c53      	adds	r3, r2, #1
 800f7a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f7a6:	697c      	ldr	r4, [r7, #20]
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	6939      	ldr	r1, [r7, #16]
 800f7ac:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 800f7ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f7b0:	f003 0302 	and.w	r3, r3, #2
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d00e      	beq.n	800f7d6 <_vsnprintf+0x7f2>
          while (l++ < width) {
 800f7b8:	e007      	b.n	800f7ca <_vsnprintf+0x7e6>
            out(' ', buffer, idx++, maxlen);
 800f7ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f7bc:	1c53      	adds	r3, r2, #1
 800f7be:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f7c0:	697c      	ldr	r4, [r7, #20]
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	6939      	ldr	r1, [r7, #16]
 800f7c6:	2020      	movs	r0, #32
 800f7c8:	47a0      	blx	r4
          while (l++ < width) {
 800f7ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f7cc:	1c5a      	adds	r2, r3, #1
 800f7ce:	647a      	str	r2, [r7, #68]	; 0x44
 800f7d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f7d2:	429a      	cmp	r2, r3
 800f7d4:	d8f1      	bhi.n	800f7ba <_vsnprintf+0x7d6>
          }
        }
        format++;
 800f7d6:	68bb      	ldr	r3, [r7, #8]
 800f7d8:	3301      	adds	r3, #1
 800f7da:	60bb      	str	r3, [r7, #8]
        break;
 800f7dc:	e0ca      	b.n	800f974 <_vsnprintf+0x990>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 800f7de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f7e2:	1d1a      	adds	r2, r3, #4
 800f7e4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 800f7ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d001      	beq.n	800f7f6 <_vsnprintf+0x812>
 800f7f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f7f4:	e001      	b.n	800f7fa <_vsnprintf+0x816>
 800f7f6:	f04f 33ff 	mov.w	r3, #4294967295
 800f7fa:	4619      	mov	r1, r3
 800f7fc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800f7fe:	f7fe fd53 	bl	800e2a8 <_strnlen_s>
 800f802:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 800f804:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d005      	beq.n	800f81a <_vsnprintf+0x836>
          l = (l < precision ? l : precision);
 800f80e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f810:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f812:	4293      	cmp	r3, r2
 800f814:	bf28      	it	cs
 800f816:	4613      	movcs	r3, r2
 800f818:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 800f81a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f81c:	f003 0302 	and.w	r3, r3, #2
 800f820:	2b00      	cmp	r3, #0
 800f822:	d11a      	bne.n	800f85a <_vsnprintf+0x876>
          while (l++ < width) {
 800f824:	e007      	b.n	800f836 <_vsnprintf+0x852>
            out(' ', buffer, idx++, maxlen);
 800f826:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f828:	1c53      	adds	r3, r2, #1
 800f82a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f82c:	697c      	ldr	r4, [r7, #20]
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	6939      	ldr	r1, [r7, #16]
 800f832:	2020      	movs	r0, #32
 800f834:	47a0      	blx	r4
          while (l++ < width) {
 800f836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f838:	1c5a      	adds	r2, r3, #1
 800f83a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f83c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f83e:	429a      	cmp	r2, r3
 800f840:	d8f1      	bhi.n	800f826 <_vsnprintf+0x842>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800f842:	e00a      	b.n	800f85a <_vsnprintf+0x876>
          out(*(p++), buffer, idx++, maxlen);
 800f844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f846:	1c5a      	adds	r2, r3, #1
 800f848:	643a      	str	r2, [r7, #64]	; 0x40
 800f84a:	7818      	ldrb	r0, [r3, #0]
 800f84c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f84e:	1c53      	adds	r3, r2, #1
 800f850:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f852:	697c      	ldr	r4, [r7, #20]
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	6939      	ldr	r1, [r7, #16]
 800f858:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800f85a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f85c:	781b      	ldrb	r3, [r3, #0]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d009      	beq.n	800f876 <_vsnprintf+0x892>
 800f862:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d0eb      	beq.n	800f844 <_vsnprintf+0x860>
 800f86c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f86e:	1e5a      	subs	r2, r3, #1
 800f870:	657a      	str	r2, [r7, #84]	; 0x54
 800f872:	2b00      	cmp	r3, #0
 800f874:	d1e6      	bne.n	800f844 <_vsnprintf+0x860>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 800f876:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f878:	f003 0302 	and.w	r3, r3, #2
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d00e      	beq.n	800f89e <_vsnprintf+0x8ba>
          while (l++ < width) {
 800f880:	e007      	b.n	800f892 <_vsnprintf+0x8ae>
            out(' ', buffer, idx++, maxlen);
 800f882:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f884:	1c53      	adds	r3, r2, #1
 800f886:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f888:	697c      	ldr	r4, [r7, #20]
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	6939      	ldr	r1, [r7, #16]
 800f88e:	2020      	movs	r0, #32
 800f890:	47a0      	blx	r4
          while (l++ < width) {
 800f892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f894:	1c5a      	adds	r2, r3, #1
 800f896:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f898:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f89a:	429a      	cmp	r2, r3
 800f89c:	d8f1      	bhi.n	800f882 <_vsnprintf+0x89e>
          }
        }
        format++;
 800f89e:	68bb      	ldr	r3, [r7, #8]
 800f8a0:	3301      	adds	r3, #1
 800f8a2:	60bb      	str	r3, [r7, #8]
        break;
 800f8a4:	e066      	b.n	800f974 <_vsnprintf+0x990>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 800f8a6:	2308      	movs	r3, #8
 800f8a8:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 800f8aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f8ac:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 800f8b0:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 800f8b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d023      	beq.n	800f908 <_vsnprintf+0x924>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 800f8c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f8c4:	1d1a      	adds	r2, r3, #4
 800f8c6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	461a      	mov	r2, r3
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	603a      	str	r2, [r7, #0]
 800f8d2:	607b      	str	r3, [r7, #4]
 800f8d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f8d6:	9308      	str	r3, [sp, #32]
 800f8d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f8da:	9307      	str	r3, [sp, #28]
 800f8dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f8de:	9306      	str	r3, [sp, #24]
 800f8e0:	f04f 0210 	mov.w	r2, #16
 800f8e4:	f04f 0300 	mov.w	r3, #0
 800f8e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	9302      	str	r3, [sp, #8]
 800f8f0:	e9d7 3400 	ldrd	r3, r4, [r7]
 800f8f4:	e9cd 3400 	strd	r3, r4, [sp]
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f8fc:	6939      	ldr	r1, [r7, #16]
 800f8fe:	6978      	ldr	r0, [r7, #20]
 800f900:	f7fe febc 	bl	800e67c <_ntoa_long_long>
 800f904:	64f8      	str	r0, [r7, #76]	; 0x4c
 800f906:	e018      	b.n	800f93a <_vsnprintf+0x956>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800f908:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f90c:	1d1a      	adds	r2, r3, #4
 800f90e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	461a      	mov	r2, r3
 800f916:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f918:	9305      	str	r3, [sp, #20]
 800f91a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f91c:	9304      	str	r3, [sp, #16]
 800f91e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f920:	9303      	str	r3, [sp, #12]
 800f922:	2310      	movs	r3, #16
 800f924:	9302      	str	r3, [sp, #8]
 800f926:	2300      	movs	r3, #0
 800f928:	9301      	str	r3, [sp, #4]
 800f92a:	9200      	str	r2, [sp, #0]
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f930:	6939      	ldr	r1, [r7, #16]
 800f932:	6978      	ldr	r0, [r7, #20]
 800f934:	f7fe fe3c 	bl	800e5b0 <_ntoa_long>
 800f938:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 800f93a:	68bb      	ldr	r3, [r7, #8]
 800f93c:	3301      	adds	r3, #1
 800f93e:	60bb      	str	r3, [r7, #8]
        break;
 800f940:	e018      	b.n	800f974 <_vsnprintf+0x990>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 800f942:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f944:	1c53      	adds	r3, r2, #1
 800f946:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f948:	697c      	ldr	r4, [r7, #20]
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	6939      	ldr	r1, [r7, #16]
 800f94e:	2025      	movs	r0, #37	; 0x25
 800f950:	47a0      	blx	r4
        format++;
 800f952:	68bb      	ldr	r3, [r7, #8]
 800f954:	3301      	adds	r3, #1
 800f956:	60bb      	str	r3, [r7, #8]
        break;
 800f958:	e00c      	b.n	800f974 <_vsnprintf+0x990>

      default :
        out(*format, buffer, idx++, maxlen);
 800f95a:	68bb      	ldr	r3, [r7, #8]
 800f95c:	7818      	ldrb	r0, [r3, #0]
 800f95e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f960:	1c53      	adds	r3, r2, #1
 800f962:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f964:	697c      	ldr	r4, [r7, #20]
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	6939      	ldr	r1, [r7, #16]
 800f96a:	47a0      	blx	r4
        format++;
 800f96c:	68bb      	ldr	r3, [r7, #8]
 800f96e:	3301      	adds	r3, #1
 800f970:	60bb      	str	r3, [r7, #8]
        break;
 800f972:	bf00      	nop
  while (*format)
 800f974:	68bb      	ldr	r3, [r7, #8]
 800f976:	781b      	ldrb	r3, [r3, #0]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	f47f ab45 	bne.w	800f008 <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800f97e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	429a      	cmp	r2, r3
 800f984:	d302      	bcc.n	800f98c <_vsnprintf+0x9a8>
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	1e5a      	subs	r2, r3, #1
 800f98a:	e000      	b.n	800f98e <_vsnprintf+0x9aa>
 800f98c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f98e:	697c      	ldr	r4, [r7, #20]
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	6939      	ldr	r1, [r7, #16]
 800f994:	2000      	movs	r0, #0
 800f996:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 800f998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800f99a:	4618      	mov	r0, r3
 800f99c:	3764      	adds	r7, #100	; 0x64
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f9a4 <snprintf_>:
  return ret;
}


int snprintf_(char* buffer, size_t count, const char* format, ...)
{
 800f9a4:	b40c      	push	{r2, r3}
 800f9a6:	b580      	push	{r7, lr}
 800f9a8:	b086      	sub	sp, #24
 800f9aa:	af02      	add	r7, sp, #8
 800f9ac:	6078      	str	r0, [r7, #4]
 800f9ae:	6039      	str	r1, [r7, #0]
  va_list va;
  va_start(va, format);
 800f9b0:	f107 031c 	add.w	r3, r7, #28
 800f9b4:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
 800f9b6:	68bb      	ldr	r3, [r7, #8]
 800f9b8:	9300      	str	r3, [sp, #0]
 800f9ba:	69bb      	ldr	r3, [r7, #24]
 800f9bc:	683a      	ldr	r2, [r7, #0]
 800f9be:	6879      	ldr	r1, [r7, #4]
 800f9c0:	4805      	ldr	r0, [pc, #20]	; (800f9d8 <snprintf_+0x34>)
 800f9c2:	f7ff fb0f 	bl	800efe4 <_vsnprintf>
 800f9c6:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 800f9c8:	68fb      	ldr	r3, [r7, #12]
}
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	3710      	adds	r7, #16
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f9d4:	b002      	add	sp, #8
 800f9d6:	4770      	bx	lr
 800f9d8:	0800e25f 	.word	0x0800e25f

0800f9dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b082      	sub	sp, #8
 800f9e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800f9e2:	4b11      	ldr	r3, [pc, #68]	; (800fa28 <HAL_MspInit+0x4c>)
 800f9e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9e6:	4a10      	ldr	r2, [pc, #64]	; (800fa28 <HAL_MspInit+0x4c>)
 800f9e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f9ec:	6413      	str	r3, [r2, #64]	; 0x40
 800f9ee:	4b0e      	ldr	r3, [pc, #56]	; (800fa28 <HAL_MspInit+0x4c>)
 800f9f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f9f6:	607b      	str	r3, [r7, #4]
 800f9f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f9fa:	4b0b      	ldr	r3, [pc, #44]	; (800fa28 <HAL_MspInit+0x4c>)
 800f9fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f9fe:	4a0a      	ldr	r2, [pc, #40]	; (800fa28 <HAL_MspInit+0x4c>)
 800fa00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fa04:	6453      	str	r3, [r2, #68]	; 0x44
 800fa06:	4b08      	ldr	r3, [pc, #32]	; (800fa28 <HAL_MspInit+0x4c>)
 800fa08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fa0e:	603b      	str	r3, [r7, #0]
 800fa10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800fa12:	2200      	movs	r2, #0
 800fa14:	210f      	movs	r1, #15
 800fa16:	f06f 0001 	mvn.w	r0, #1
 800fa1a:	f000 fc30 	bl	801027e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800fa1e:	bf00      	nop
 800fa20:	3708      	adds	r7, #8
 800fa22:	46bd      	mov	sp, r7
 800fa24:	bd80      	pop	{r7, pc}
 800fa26:	bf00      	nop
 800fa28:	40023800 	.word	0x40023800

0800fa2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800fa2c:	b580      	push	{r7, lr}
 800fa2e:	b0ae      	sub	sp, #184	; 0xb8
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fa34:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fa38:	2200      	movs	r2, #0
 800fa3a:	601a      	str	r2, [r3, #0]
 800fa3c:	605a      	str	r2, [r3, #4]
 800fa3e:	609a      	str	r2, [r3, #8]
 800fa40:	60da      	str	r2, [r3, #12]
 800fa42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800fa44:	f107 0314 	add.w	r3, r7, #20
 800fa48:	2290      	movs	r2, #144	; 0x90
 800fa4a:	2100      	movs	r1, #0
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	f008 ffaf 	bl	80189b0 <memset>
  if(hi2c->Instance==I2C2)
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	4a22      	ldr	r2, [pc, #136]	; (800fae0 <HAL_I2C_MspInit+0xb4>)
 800fa58:	4293      	cmp	r3, r2
 800fa5a:	d13c      	bne.n	800fad6 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800fa5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fa60:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800fa62:	2300      	movs	r3, #0
 800fa64:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800fa66:	f107 0314 	add.w	r3, r7, #20
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	f002 fc6c 	bl	8012348 <HAL_RCCEx_PeriphCLKConfig>
 800fa70:	4603      	mov	r3, r0
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d001      	beq.n	800fa7a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800fa76:	f7fe fbeb 	bl	800e250 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800fa7a:	4b1a      	ldr	r3, [pc, #104]	; (800fae4 <HAL_I2C_MspInit+0xb8>)
 800fa7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa7e:	4a19      	ldr	r2, [pc, #100]	; (800fae4 <HAL_I2C_MspInit+0xb8>)
 800fa80:	f043 0302 	orr.w	r3, r3, #2
 800fa84:	6313      	str	r3, [r2, #48]	; 0x30
 800fa86:	4b17      	ldr	r3, [pc, #92]	; (800fae4 <HAL_I2C_MspInit+0xb8>)
 800fa88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa8a:	f003 0302 	and.w	r3, r3, #2
 800fa8e:	613b      	str	r3, [r7, #16]
 800fa90:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800fa92:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800fa96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800fa9a:	2312      	movs	r3, #18
 800fa9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800faa0:	2301      	movs	r3, #1
 800faa2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800faa6:	2303      	movs	r3, #3
 800faa8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800faac:	2304      	movs	r3, #4
 800faae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800fab2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fab6:	4619      	mov	r1, r3
 800fab8:	480b      	ldr	r0, [pc, #44]	; (800fae8 <HAL_I2C_MspInit+0xbc>)
 800faba:	f001 f821 	bl	8010b00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800fabe:	4b09      	ldr	r3, [pc, #36]	; (800fae4 <HAL_I2C_MspInit+0xb8>)
 800fac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fac2:	4a08      	ldr	r2, [pc, #32]	; (800fae4 <HAL_I2C_MspInit+0xb8>)
 800fac4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800fac8:	6413      	str	r3, [r2, #64]	; 0x40
 800faca:	4b06      	ldr	r3, [pc, #24]	; (800fae4 <HAL_I2C_MspInit+0xb8>)
 800facc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800face:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fad2:	60fb      	str	r3, [r7, #12]
 800fad4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800fad6:	bf00      	nop
 800fad8:	37b8      	adds	r7, #184	; 0xb8
 800fada:	46bd      	mov	sp, r7
 800fadc:	bd80      	pop	{r7, pc}
 800fade:	bf00      	nop
 800fae0:	40005800 	.word	0x40005800
 800fae4:	40023800 	.word	0x40023800
 800fae8:	40020400 	.word	0x40020400

0800faec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800faec:	b580      	push	{r7, lr}
 800faee:	b08a      	sub	sp, #40	; 0x28
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800faf4:	f107 0314 	add.w	r3, r7, #20
 800faf8:	2200      	movs	r2, #0
 800fafa:	601a      	str	r2, [r3, #0]
 800fafc:	605a      	str	r2, [r3, #4]
 800fafe:	609a      	str	r2, [r3, #8]
 800fb00:	60da      	str	r2, [r3, #12]
 800fb02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	4a45      	ldr	r2, [pc, #276]	; (800fc20 <HAL_SPI_MspInit+0x134>)
 800fb0a:	4293      	cmp	r3, r2
 800fb0c:	f040 8084 	bne.w	800fc18 <HAL_SPI_MspInit+0x12c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800fb10:	4b44      	ldr	r3, [pc, #272]	; (800fc24 <HAL_SPI_MspInit+0x138>)
 800fb12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb14:	4a43      	ldr	r2, [pc, #268]	; (800fc24 <HAL_SPI_MspInit+0x138>)
 800fb16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800fb1a:	6453      	str	r3, [r2, #68]	; 0x44
 800fb1c:	4b41      	ldr	r3, [pc, #260]	; (800fc24 <HAL_SPI_MspInit+0x138>)
 800fb1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800fb24:	613b      	str	r3, [r7, #16]
 800fb26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fb28:	4b3e      	ldr	r3, [pc, #248]	; (800fc24 <HAL_SPI_MspInit+0x138>)
 800fb2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb2c:	4a3d      	ldr	r2, [pc, #244]	; (800fc24 <HAL_SPI_MspInit+0x138>)
 800fb2e:	f043 0301 	orr.w	r3, r3, #1
 800fb32:	6313      	str	r3, [r2, #48]	; 0x30
 800fb34:	4b3b      	ldr	r3, [pc, #236]	; (800fc24 <HAL_SPI_MspInit+0x138>)
 800fb36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb38:	f003 0301 	and.w	r3, r3, #1
 800fb3c:	60fb      	str	r3, [r7, #12]
 800fb3e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800fb40:	23e0      	movs	r3, #224	; 0xe0
 800fb42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fb44:	2302      	movs	r3, #2
 800fb46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fb48:	2300      	movs	r3, #0
 800fb4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fb4c:	2303      	movs	r3, #3
 800fb4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800fb50:	2305      	movs	r3, #5
 800fb52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fb54:	f107 0314 	add.w	r3, r7, #20
 800fb58:	4619      	mov	r1, r3
 800fb5a:	4833      	ldr	r0, [pc, #204]	; (800fc28 <HAL_SPI_MspInit+0x13c>)
 800fb5c:	f000 ffd0 	bl	8010b00 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 800fb60:	4b32      	ldr	r3, [pc, #200]	; (800fc2c <HAL_SPI_MspInit+0x140>)
 800fb62:	4a33      	ldr	r2, [pc, #204]	; (800fc30 <HAL_SPI_MspInit+0x144>)
 800fb64:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800fb66:	4b31      	ldr	r3, [pc, #196]	; (800fc2c <HAL_SPI_MspInit+0x140>)
 800fb68:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800fb6c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800fb6e:	4b2f      	ldr	r3, [pc, #188]	; (800fc2c <HAL_SPI_MspInit+0x140>)
 800fb70:	2200      	movs	r2, #0
 800fb72:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800fb74:	4b2d      	ldr	r3, [pc, #180]	; (800fc2c <HAL_SPI_MspInit+0x140>)
 800fb76:	2200      	movs	r2, #0
 800fb78:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800fb7a:	4b2c      	ldr	r3, [pc, #176]	; (800fc2c <HAL_SPI_MspInit+0x140>)
 800fb7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fb80:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800fb82:	4b2a      	ldr	r3, [pc, #168]	; (800fc2c <HAL_SPI_MspInit+0x140>)
 800fb84:	2200      	movs	r2, #0
 800fb86:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800fb88:	4b28      	ldr	r3, [pc, #160]	; (800fc2c <HAL_SPI_MspInit+0x140>)
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800fb8e:	4b27      	ldr	r3, [pc, #156]	; (800fc2c <HAL_SPI_MspInit+0x140>)
 800fb90:	2200      	movs	r2, #0
 800fb92:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800fb94:	4b25      	ldr	r3, [pc, #148]	; (800fc2c <HAL_SPI_MspInit+0x140>)
 800fb96:	2200      	movs	r2, #0
 800fb98:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800fb9a:	4b24      	ldr	r3, [pc, #144]	; (800fc2c <HAL_SPI_MspInit+0x140>)
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800fba0:	4822      	ldr	r0, [pc, #136]	; (800fc2c <HAL_SPI_MspInit+0x140>)
 800fba2:	f000 fba3 	bl	80102ec <HAL_DMA_Init>
 800fba6:	4603      	mov	r3, r0
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d001      	beq.n	800fbb0 <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 800fbac:	f7fe fb50 	bl	800e250 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	4a1e      	ldr	r2, [pc, #120]	; (800fc2c <HAL_SPI_MspInit+0x140>)
 800fbb4:	659a      	str	r2, [r3, #88]	; 0x58
 800fbb6:	4a1d      	ldr	r2, [pc, #116]	; (800fc2c <HAL_SPI_MspInit+0x140>)
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800fbbc:	4b1d      	ldr	r3, [pc, #116]	; (800fc34 <HAL_SPI_MspInit+0x148>)
 800fbbe:	4a1e      	ldr	r2, [pc, #120]	; (800fc38 <HAL_SPI_MspInit+0x14c>)
 800fbc0:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800fbc2:	4b1c      	ldr	r3, [pc, #112]	; (800fc34 <HAL_SPI_MspInit+0x148>)
 800fbc4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800fbc8:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800fbca:	4b1a      	ldr	r3, [pc, #104]	; (800fc34 <HAL_SPI_MspInit+0x148>)
 800fbcc:	2240      	movs	r2, #64	; 0x40
 800fbce:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800fbd0:	4b18      	ldr	r3, [pc, #96]	; (800fc34 <HAL_SPI_MspInit+0x148>)
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800fbd6:	4b17      	ldr	r3, [pc, #92]	; (800fc34 <HAL_SPI_MspInit+0x148>)
 800fbd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fbdc:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800fbde:	4b15      	ldr	r3, [pc, #84]	; (800fc34 <HAL_SPI_MspInit+0x148>)
 800fbe0:	2200      	movs	r2, #0
 800fbe2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800fbe4:	4b13      	ldr	r3, [pc, #76]	; (800fc34 <HAL_SPI_MspInit+0x148>)
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800fbea:	4b12      	ldr	r3, [pc, #72]	; (800fc34 <HAL_SPI_MspInit+0x148>)
 800fbec:	2200      	movs	r2, #0
 800fbee:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800fbf0:	4b10      	ldr	r3, [pc, #64]	; (800fc34 <HAL_SPI_MspInit+0x148>)
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800fbf6:	4b0f      	ldr	r3, [pc, #60]	; (800fc34 <HAL_SPI_MspInit+0x148>)
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800fbfc:	480d      	ldr	r0, [pc, #52]	; (800fc34 <HAL_SPI_MspInit+0x148>)
 800fbfe:	f000 fb75 	bl	80102ec <HAL_DMA_Init>
 800fc02:	4603      	mov	r3, r0
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d001      	beq.n	800fc0c <HAL_SPI_MspInit+0x120>
    {
      Error_Handler();
 800fc08:	f7fe fb22 	bl	800e250 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	4a09      	ldr	r2, [pc, #36]	; (800fc34 <HAL_SPI_MspInit+0x148>)
 800fc10:	655a      	str	r2, [r3, #84]	; 0x54
 800fc12:	4a08      	ldr	r2, [pc, #32]	; (800fc34 <HAL_SPI_MspInit+0x148>)
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800fc18:	bf00      	nop
 800fc1a:	3728      	adds	r7, #40	; 0x28
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	bd80      	pop	{r7, pc}
 800fc20:	40013000 	.word	0x40013000
 800fc24:	40023800 	.word	0x40023800
 800fc28:	40020000 	.word	0x40020000
 800fc2c:	20002dcc 	.word	0x20002dcc
 800fc30:	40026410 	.word	0x40026410
 800fc34:	20002e2c 	.word	0x20002e2c
 800fc38:	40026458 	.word	0x40026458

0800fc3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b0ae      	sub	sp, #184	; 0xb8
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fc44:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fc48:	2200      	movs	r2, #0
 800fc4a:	601a      	str	r2, [r3, #0]
 800fc4c:	605a      	str	r2, [r3, #4]
 800fc4e:	609a      	str	r2, [r3, #8]
 800fc50:	60da      	str	r2, [r3, #12]
 800fc52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800fc54:	f107 0314 	add.w	r3, r7, #20
 800fc58:	2290      	movs	r2, #144	; 0x90
 800fc5a:	2100      	movs	r1, #0
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	f008 fea7 	bl	80189b0 <memset>
  if(huart->Instance==USART6)
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	4a3c      	ldr	r2, [pc, #240]	; (800fd58 <HAL_UART_MspInit+0x11c>)
 800fc68:	4293      	cmp	r3, r2
 800fc6a:	d171      	bne.n	800fd50 <HAL_UART_MspInit+0x114>

  /* USER CODE END USART6_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800fc6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fc70:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800fc72:	2300      	movs	r3, #0
 800fc74:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800fc76:	f107 0314 	add.w	r3, r7, #20
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	f002 fb64 	bl	8012348 <HAL_RCCEx_PeriphCLKConfig>
 800fc80:	4603      	mov	r3, r0
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d001      	beq.n	800fc8a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800fc86:	f7fe fae3 	bl	800e250 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800fc8a:	4b34      	ldr	r3, [pc, #208]	; (800fd5c <HAL_UART_MspInit+0x120>)
 800fc8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc8e:	4a33      	ldr	r2, [pc, #204]	; (800fd5c <HAL_UART_MspInit+0x120>)
 800fc90:	f043 0320 	orr.w	r3, r3, #32
 800fc94:	6453      	str	r3, [r2, #68]	; 0x44
 800fc96:	4b31      	ldr	r3, [pc, #196]	; (800fd5c <HAL_UART_MspInit+0x120>)
 800fc98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc9a:	f003 0320 	and.w	r3, r3, #32
 800fc9e:	613b      	str	r3, [r7, #16]
 800fca0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800fca2:	4b2e      	ldr	r3, [pc, #184]	; (800fd5c <HAL_UART_MspInit+0x120>)
 800fca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fca6:	4a2d      	ldr	r2, [pc, #180]	; (800fd5c <HAL_UART_MspInit+0x120>)
 800fca8:	f043 0304 	orr.w	r3, r3, #4
 800fcac:	6313      	str	r3, [r2, #48]	; 0x30
 800fcae:	4b2b      	ldr	r3, [pc, #172]	; (800fd5c <HAL_UART_MspInit+0x120>)
 800fcb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcb2:	f003 0304 	and.w	r3, r3, #4
 800fcb6:	60fb      	str	r3, [r7, #12]
 800fcb8:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800fcba:	23c0      	movs	r3, #192	; 0xc0
 800fcbc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fcc0:	2302      	movs	r3, #2
 800fcc2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fccc:	2303      	movs	r3, #3
 800fcce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800fcd2:	2308      	movs	r3, #8
 800fcd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800fcd8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fcdc:	4619      	mov	r1, r3
 800fcde:	4820      	ldr	r0, [pc, #128]	; (800fd60 <HAL_UART_MspInit+0x124>)
 800fce0:	f000 ff0e 	bl	8010b00 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
 800fce4:	4b1f      	ldr	r3, [pc, #124]	; (800fd64 <HAL_UART_MspInit+0x128>)
 800fce6:	4a20      	ldr	r2, [pc, #128]	; (800fd68 <HAL_UART_MspInit+0x12c>)
 800fce8:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800fcea:	4b1e      	ldr	r3, [pc, #120]	; (800fd64 <HAL_UART_MspInit+0x128>)
 800fcec:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800fcf0:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800fcf2:	4b1c      	ldr	r3, [pc, #112]	; (800fd64 <HAL_UART_MspInit+0x128>)
 800fcf4:	2240      	movs	r2, #64	; 0x40
 800fcf6:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800fcf8:	4b1a      	ldr	r3, [pc, #104]	; (800fd64 <HAL_UART_MspInit+0x128>)
 800fcfa:	2200      	movs	r2, #0
 800fcfc:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800fcfe:	4b19      	ldr	r3, [pc, #100]	; (800fd64 <HAL_UART_MspInit+0x128>)
 800fd00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fd04:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800fd06:	4b17      	ldr	r3, [pc, #92]	; (800fd64 <HAL_UART_MspInit+0x128>)
 800fd08:	2200      	movs	r2, #0
 800fd0a:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800fd0c:	4b15      	ldr	r3, [pc, #84]	; (800fd64 <HAL_UART_MspInit+0x128>)
 800fd0e:	2200      	movs	r2, #0
 800fd10:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800fd12:	4b14      	ldr	r3, [pc, #80]	; (800fd64 <HAL_UART_MspInit+0x128>)
 800fd14:	2200      	movs	r2, #0
 800fd16:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 800fd18:	4b12      	ldr	r3, [pc, #72]	; (800fd64 <HAL_UART_MspInit+0x128>)
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800fd1e:	4b11      	ldr	r3, [pc, #68]	; (800fd64 <HAL_UART_MspInit+0x128>)
 800fd20:	2200      	movs	r2, #0
 800fd22:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 800fd24:	480f      	ldr	r0, [pc, #60]	; (800fd64 <HAL_UART_MspInit+0x128>)
 800fd26:	f000 fae1 	bl	80102ec <HAL_DMA_Init>
 800fd2a:	4603      	mov	r3, r0
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d001      	beq.n	800fd34 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 800fd30:	f7fe fa8e 	bl	800e250 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	4a0b      	ldr	r2, [pc, #44]	; (800fd64 <HAL_UART_MspInit+0x128>)
 800fd38:	66da      	str	r2, [r3, #108]	; 0x6c
 800fd3a:	4a0a      	ldr	r2, [pc, #40]	; (800fd64 <HAL_UART_MspInit+0x128>)
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 3, 0);
 800fd40:	2200      	movs	r2, #0
 800fd42:	2103      	movs	r1, #3
 800fd44:	2047      	movs	r0, #71	; 0x47
 800fd46:	f000 fa9a 	bl	801027e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800fd4a:	2047      	movs	r0, #71	; 0x47
 800fd4c:	f000 fab3 	bl	80102b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800fd50:	bf00      	nop
 800fd52:	37b8      	adds	r7, #184	; 0xb8
 800fd54:	46bd      	mov	sp, r7
 800fd56:	bd80      	pop	{r7, pc}
 800fd58:	40011400 	.word	0x40011400
 800fd5c:	40023800 	.word	0x40023800
 800fd60:	40020800 	.word	0x40020800
 800fd64:	20002f10 	.word	0x20002f10
 800fd68:	400264a0 	.word	0x400264a0

0800fd6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800fd6c:	b480      	push	{r7}
 800fd6e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800fd70:	bf00      	nop
 800fd72:	46bd      	mov	sp, r7
 800fd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd78:	4770      	bx	lr

0800fd7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800fd7a:	b480      	push	{r7}
 800fd7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800fd7e:	e7fe      	b.n	800fd7e <HardFault_Handler+0x4>

0800fd80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800fd80:	b480      	push	{r7}
 800fd82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800fd84:	e7fe      	b.n	800fd84 <MemManage_Handler+0x4>

0800fd86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800fd86:	b480      	push	{r7}
 800fd88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800fd8a:	e7fe      	b.n	800fd8a <BusFault_Handler+0x4>

0800fd8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800fd8c:	b480      	push	{r7}
 800fd8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800fd90:	e7fe      	b.n	800fd90 <UsageFault_Handler+0x4>

0800fd92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800fd92:	b480      	push	{r7}
 800fd94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800fd96:	bf00      	nop
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9e:	4770      	bx	lr

0800fda0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800fda0:	b580      	push	{r7, lr}
 800fda2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800fda4:	f000 f970 	bl	8010088 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800fda8:	f007 fb8a 	bl	80174c0 <xTaskGetSchedulerState>
 800fdac:	4603      	mov	r3, r0
 800fdae:	2b01      	cmp	r3, #1
 800fdb0:	d001      	beq.n	800fdb6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800fdb2:	f008 fb49 	bl	8018448 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800fdb6:	bf00      	nop
 800fdb8:	bd80      	pop	{r7, pc}

0800fdba <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800fdba:	b580      	push	{r7, lr}
 800fdbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800fdbe:	2008      	movs	r0, #8
 800fdc0:	f001 f896 	bl	8010ef0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800fdc4:	bf00      	nop
 800fdc6:	bd80      	pop	{r7, pc}

0800fdc8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800fdcc:	4802      	ldr	r0, [pc, #8]	; (800fdd8 <DMA2_Stream0_IRQHandler+0x10>)
 800fdce:	f000 fc2d 	bl	801062c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800fdd2:	bf00      	nop
 800fdd4:	bd80      	pop	{r7, pc}
 800fdd6:	bf00      	nop
 800fdd8:	20002dcc 	.word	0x20002dcc

0800fddc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800fddc:	b580      	push	{r7, lr}
 800fdde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800fde0:	4802      	ldr	r0, [pc, #8]	; (800fdec <DMA2_Stream3_IRQHandler+0x10>)
 800fde2:	f000 fc23 	bl	801062c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800fde6:	bf00      	nop
 800fde8:	bd80      	pop	{r7, pc}
 800fdea:	bf00      	nop
 800fdec:	20002e2c 	.word	0x20002e2c

0800fdf0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800fdf4:	4802      	ldr	r0, [pc, #8]	; (800fe00 <DMA2_Stream6_IRQHandler+0x10>)
 800fdf6:	f000 fc19 	bl	801062c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800fdfa:	bf00      	nop
 800fdfc:	bd80      	pop	{r7, pc}
 800fdfe:	bf00      	nop
 800fe00:	20002f10 	.word	0x20002f10

0800fe04 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800fe04:	b580      	push	{r7, lr}
 800fe06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800fe08:	4802      	ldr	r0, [pc, #8]	; (800fe14 <USART6_IRQHandler+0x10>)
 800fe0a:	f004 f8b9 	bl	8013f80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800fe0e:	bf00      	nop
 800fe10:	bd80      	pop	{r7, pc}
 800fe12:	bf00      	nop
 800fe14:	20002e8c 	.word	0x20002e8c

0800fe18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800fe18:	b480      	push	{r7}
 800fe1a:	af00      	add	r7, sp, #0
	return 1;
 800fe1c:	2301      	movs	r3, #1
}
 800fe1e:	4618      	mov	r0, r3
 800fe20:	46bd      	mov	sp, r7
 800fe22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe26:	4770      	bx	lr

0800fe28 <_kill>:

int _kill(int pid, int sig)
{
 800fe28:	b580      	push	{r7, lr}
 800fe2a:	b082      	sub	sp, #8
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	6078      	str	r0, [r7, #4]
 800fe30:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800fe32:	f008 fd85 	bl	8018940 <__errno>
 800fe36:	4603      	mov	r3, r0
 800fe38:	2216      	movs	r2, #22
 800fe3a:	601a      	str	r2, [r3, #0]
	return -1;
 800fe3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fe40:	4618      	mov	r0, r3
 800fe42:	3708      	adds	r7, #8
 800fe44:	46bd      	mov	sp, r7
 800fe46:	bd80      	pop	{r7, pc}

0800fe48 <_exit>:

void _exit (int status)
{
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b082      	sub	sp, #8
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800fe50:	f04f 31ff 	mov.w	r1, #4294967295
 800fe54:	6878      	ldr	r0, [r7, #4]
 800fe56:	f7ff ffe7 	bl	800fe28 <_kill>
	while (1) {}		/* Make sure we hang here */
 800fe5a:	e7fe      	b.n	800fe5a <_exit+0x12>

0800fe5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b086      	sub	sp, #24
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	60f8      	str	r0, [r7, #12]
 800fe64:	60b9      	str	r1, [r7, #8]
 800fe66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800fe68:	2300      	movs	r3, #0
 800fe6a:	617b      	str	r3, [r7, #20]
 800fe6c:	e00a      	b.n	800fe84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800fe6e:	f3af 8000 	nop.w
 800fe72:	4601      	mov	r1, r0
 800fe74:	68bb      	ldr	r3, [r7, #8]
 800fe76:	1c5a      	adds	r2, r3, #1
 800fe78:	60ba      	str	r2, [r7, #8]
 800fe7a:	b2ca      	uxtb	r2, r1
 800fe7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800fe7e:	697b      	ldr	r3, [r7, #20]
 800fe80:	3301      	adds	r3, #1
 800fe82:	617b      	str	r3, [r7, #20]
 800fe84:	697a      	ldr	r2, [r7, #20]
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	429a      	cmp	r2, r3
 800fe8a:	dbf0      	blt.n	800fe6e <_read+0x12>
	}

return len;
 800fe8c:	687b      	ldr	r3, [r7, #4]
}
 800fe8e:	4618      	mov	r0, r3
 800fe90:	3718      	adds	r7, #24
 800fe92:	46bd      	mov	sp, r7
 800fe94:	bd80      	pop	{r7, pc}

0800fe96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800fe96:	b580      	push	{r7, lr}
 800fe98:	b086      	sub	sp, #24
 800fe9a:	af00      	add	r7, sp, #0
 800fe9c:	60f8      	str	r0, [r7, #12]
 800fe9e:	60b9      	str	r1, [r7, #8]
 800fea0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800fea2:	2300      	movs	r3, #0
 800fea4:	617b      	str	r3, [r7, #20]
 800fea6:	e009      	b.n	800febc <_write+0x26>
	{
		__io_putchar(*ptr++);
 800fea8:	68bb      	ldr	r3, [r7, #8]
 800feaa:	1c5a      	adds	r2, r3, #1
 800feac:	60ba      	str	r2, [r7, #8]
 800feae:	781b      	ldrb	r3, [r3, #0]
 800feb0:	4618      	mov	r0, r3
 800feb2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800feb6:	697b      	ldr	r3, [r7, #20]
 800feb8:	3301      	adds	r3, #1
 800feba:	617b      	str	r3, [r7, #20]
 800febc:	697a      	ldr	r2, [r7, #20]
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	429a      	cmp	r2, r3
 800fec2:	dbf1      	blt.n	800fea8 <_write+0x12>
	}
	return len;
 800fec4:	687b      	ldr	r3, [r7, #4]
}
 800fec6:	4618      	mov	r0, r3
 800fec8:	3718      	adds	r7, #24
 800feca:	46bd      	mov	sp, r7
 800fecc:	bd80      	pop	{r7, pc}

0800fece <_close>:

int _close(int file)
{
 800fece:	b480      	push	{r7}
 800fed0:	b083      	sub	sp, #12
 800fed2:	af00      	add	r7, sp, #0
 800fed4:	6078      	str	r0, [r7, #4]
	return -1;
 800fed6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800feda:	4618      	mov	r0, r3
 800fedc:	370c      	adds	r7, #12
 800fede:	46bd      	mov	sp, r7
 800fee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee4:	4770      	bx	lr

0800fee6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800fee6:	b480      	push	{r7}
 800fee8:	b083      	sub	sp, #12
 800feea:	af00      	add	r7, sp, #0
 800feec:	6078      	str	r0, [r7, #4]
 800feee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800fef0:	683b      	ldr	r3, [r7, #0]
 800fef2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800fef6:	605a      	str	r2, [r3, #4]
	return 0;
 800fef8:	2300      	movs	r3, #0
}
 800fefa:	4618      	mov	r0, r3
 800fefc:	370c      	adds	r7, #12
 800fefe:	46bd      	mov	sp, r7
 800ff00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff04:	4770      	bx	lr

0800ff06 <_isatty>:

int _isatty(int file)
{
 800ff06:	b480      	push	{r7}
 800ff08:	b083      	sub	sp, #12
 800ff0a:	af00      	add	r7, sp, #0
 800ff0c:	6078      	str	r0, [r7, #4]
	return 1;
 800ff0e:	2301      	movs	r3, #1
}
 800ff10:	4618      	mov	r0, r3
 800ff12:	370c      	adds	r7, #12
 800ff14:	46bd      	mov	sp, r7
 800ff16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1a:	4770      	bx	lr

0800ff1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800ff1c:	b480      	push	{r7}
 800ff1e:	b085      	sub	sp, #20
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	60f8      	str	r0, [r7, #12]
 800ff24:	60b9      	str	r1, [r7, #8]
 800ff26:	607a      	str	r2, [r7, #4]
	return 0;
 800ff28:	2300      	movs	r3, #0
}
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	3714      	adds	r7, #20
 800ff2e:	46bd      	mov	sp, r7
 800ff30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff34:	4770      	bx	lr
	...

0800ff38 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b084      	sub	sp, #16
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800ff40:	4b11      	ldr	r3, [pc, #68]	; (800ff88 <_sbrk+0x50>)
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d102      	bne.n	800ff4e <_sbrk+0x16>
		heap_end = &end;
 800ff48:	4b0f      	ldr	r3, [pc, #60]	; (800ff88 <_sbrk+0x50>)
 800ff4a:	4a10      	ldr	r2, [pc, #64]	; (800ff8c <_sbrk+0x54>)
 800ff4c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800ff4e:	4b0e      	ldr	r3, [pc, #56]	; (800ff88 <_sbrk+0x50>)
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800ff54:	4b0c      	ldr	r3, [pc, #48]	; (800ff88 <_sbrk+0x50>)
 800ff56:	681a      	ldr	r2, [r3, #0]
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	4413      	add	r3, r2
 800ff5c:	466a      	mov	r2, sp
 800ff5e:	4293      	cmp	r3, r2
 800ff60:	d907      	bls.n	800ff72 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800ff62:	f008 fced 	bl	8018940 <__errno>
 800ff66:	4603      	mov	r3, r0
 800ff68:	220c      	movs	r2, #12
 800ff6a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800ff6c:	f04f 33ff 	mov.w	r3, #4294967295
 800ff70:	e006      	b.n	800ff80 <_sbrk+0x48>
	}

	heap_end += incr;
 800ff72:	4b05      	ldr	r3, [pc, #20]	; (800ff88 <_sbrk+0x50>)
 800ff74:	681a      	ldr	r2, [r3, #0]
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	4413      	add	r3, r2
 800ff7a:	4a03      	ldr	r2, [pc, #12]	; (800ff88 <_sbrk+0x50>)
 800ff7c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800ff7e:	68fb      	ldr	r3, [r7, #12]
}
 800ff80:	4618      	mov	r0, r3
 800ff82:	3710      	adds	r7, #16
 800ff84:	46bd      	mov	sp, r7
 800ff86:	bd80      	pop	{r7, pc}
 800ff88:	20017340 	.word	0x20017340
 800ff8c:	2006cd10 	.word	0x2006cd10

0800ff90 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ff90:	b480      	push	{r7}
 800ff92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ff94:	4b07      	ldr	r3, [pc, #28]	; (800ffb4 <SystemInit+0x24>)
 800ff96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ff9a:	4a06      	ldr	r2, [pc, #24]	; (800ffb4 <SystemInit+0x24>)
 800ff9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ffa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | 0x8000; /* Vector Table Relocation in Internal FLASH */
 800ffa4:	4b03      	ldr	r3, [pc, #12]	; (800ffb4 <SystemInit+0x24>)
 800ffa6:	4a04      	ldr	r2, [pc, #16]	; (800ffb8 <SystemInit+0x28>)
 800ffa8:	609a      	str	r2, [r3, #8]
#endif
}
 800ffaa:	bf00      	nop
 800ffac:	46bd      	mov	sp, r7
 800ffae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb2:	4770      	bx	lr
 800ffb4:	e000ed00 	.word	0xe000ed00
 800ffb8:	08008000 	.word	0x08008000

0800ffbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800ffbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 800fff4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800ffc0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800ffc2:	e003      	b.n	800ffcc <LoopCopyDataInit>

0800ffc4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800ffc4:	4b0c      	ldr	r3, [pc, #48]	; (800fff8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800ffc6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800ffc8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800ffca:	3104      	adds	r1, #4

0800ffcc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800ffcc:	480b      	ldr	r0, [pc, #44]	; (800fffc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800ffce:	4b0c      	ldr	r3, [pc, #48]	; (8010000 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800ffd0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800ffd2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800ffd4:	d3f6      	bcc.n	800ffc4 <CopyDataInit>
  ldr  r2, =_sbss
 800ffd6:	4a0b      	ldr	r2, [pc, #44]	; (8010004 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800ffd8:	e002      	b.n	800ffe0 <LoopFillZerobss>

0800ffda <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800ffda:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800ffdc:	f842 3b04 	str.w	r3, [r2], #4

0800ffe0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800ffe0:	4b09      	ldr	r3, [pc, #36]	; (8010008 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800ffe2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800ffe4:	d3f9      	bcc.n	800ffda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800ffe6:	f7ff ffd3 	bl	800ff90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ffea:	f008 fcaf 	bl	801894c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ffee:	f7fd f907 	bl	800d200 <main>
  bx  lr    
 800fff2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800fff4:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800fff8:	0802d588 	.word	0x0802d588
  ldr  r0, =_sdata
 800fffc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8010000:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 8010004:	20000200 	.word	0x20000200
  ldr  r3, = _ebss
 8010008:	2006cd10 	.word	0x2006cd10

0801000c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801000c:	e7fe      	b.n	801000c <ADC_IRQHandler>

0801000e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801000e:	b580      	push	{r7, lr}
 8010010:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010012:	2003      	movs	r0, #3
 8010014:	f000 f928 	bl	8010268 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8010018:	200f      	movs	r0, #15
 801001a:	f000 f805 	bl	8010028 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801001e:	f7ff fcdd 	bl	800f9dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8010022:	2300      	movs	r3, #0
}
 8010024:	4618      	mov	r0, r3
 8010026:	bd80      	pop	{r7, pc}

08010028 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010028:	b580      	push	{r7, lr}
 801002a:	b082      	sub	sp, #8
 801002c:	af00      	add	r7, sp, #0
 801002e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8010030:	4b12      	ldr	r3, [pc, #72]	; (801007c <HAL_InitTick+0x54>)
 8010032:	681a      	ldr	r2, [r3, #0]
 8010034:	4b12      	ldr	r3, [pc, #72]	; (8010080 <HAL_InitTick+0x58>)
 8010036:	781b      	ldrb	r3, [r3, #0]
 8010038:	4619      	mov	r1, r3
 801003a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801003e:	fbb3 f3f1 	udiv	r3, r3, r1
 8010042:	fbb2 f3f3 	udiv	r3, r2, r3
 8010046:	4618      	mov	r0, r3
 8010048:	f000 f943 	bl	80102d2 <HAL_SYSTICK_Config>
 801004c:	4603      	mov	r3, r0
 801004e:	2b00      	cmp	r3, #0
 8010050:	d001      	beq.n	8010056 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8010052:	2301      	movs	r3, #1
 8010054:	e00e      	b.n	8010074 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	2b0f      	cmp	r3, #15
 801005a:	d80a      	bhi.n	8010072 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801005c:	2200      	movs	r2, #0
 801005e:	6879      	ldr	r1, [r7, #4]
 8010060:	f04f 30ff 	mov.w	r0, #4294967295
 8010064:	f000 f90b 	bl	801027e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8010068:	4a06      	ldr	r2, [pc, #24]	; (8010084 <HAL_InitTick+0x5c>)
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801006e:	2300      	movs	r3, #0
 8010070:	e000      	b.n	8010074 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8010072:	2301      	movs	r3, #1
}
 8010074:	4618      	mov	r0, r3
 8010076:	3708      	adds	r7, #8
 8010078:	46bd      	mov	sp, r7
 801007a:	bd80      	pop	{r7, pc}
 801007c:	20000018 	.word	0x20000018
 8010080:	20000020 	.word	0x20000020
 8010084:	2000001c 	.word	0x2000001c

08010088 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8010088:	b480      	push	{r7}
 801008a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 801008c:	4b06      	ldr	r3, [pc, #24]	; (80100a8 <HAL_IncTick+0x20>)
 801008e:	781b      	ldrb	r3, [r3, #0]
 8010090:	461a      	mov	r2, r3
 8010092:	4b06      	ldr	r3, [pc, #24]	; (80100ac <HAL_IncTick+0x24>)
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	4413      	add	r3, r2
 8010098:	4a04      	ldr	r2, [pc, #16]	; (80100ac <HAL_IncTick+0x24>)
 801009a:	6013      	str	r3, [r2, #0]
}
 801009c:	bf00      	nop
 801009e:	46bd      	mov	sp, r7
 80100a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a4:	4770      	bx	lr
 80100a6:	bf00      	nop
 80100a8:	20000020 	.word	0x20000020
 80100ac:	20017344 	.word	0x20017344

080100b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80100b0:	b480      	push	{r7}
 80100b2:	af00      	add	r7, sp, #0
  return uwTick;
 80100b4:	4b03      	ldr	r3, [pc, #12]	; (80100c4 <HAL_GetTick+0x14>)
 80100b6:	681b      	ldr	r3, [r3, #0]
}
 80100b8:	4618      	mov	r0, r3
 80100ba:	46bd      	mov	sp, r7
 80100bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c0:	4770      	bx	lr
 80100c2:	bf00      	nop
 80100c4:	20017344 	.word	0x20017344

080100c8 <__NVIC_SetPriorityGrouping>:
{
 80100c8:	b480      	push	{r7}
 80100ca:	b085      	sub	sp, #20
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	f003 0307 	and.w	r3, r3, #7
 80100d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80100d8:	4b0b      	ldr	r3, [pc, #44]	; (8010108 <__NVIC_SetPriorityGrouping+0x40>)
 80100da:	68db      	ldr	r3, [r3, #12]
 80100dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80100de:	68ba      	ldr	r2, [r7, #8]
 80100e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80100e4:	4013      	ands	r3, r2
 80100e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80100ec:	68bb      	ldr	r3, [r7, #8]
 80100ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80100f0:	4b06      	ldr	r3, [pc, #24]	; (801010c <__NVIC_SetPriorityGrouping+0x44>)
 80100f2:	4313      	orrs	r3, r2
 80100f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80100f6:	4a04      	ldr	r2, [pc, #16]	; (8010108 <__NVIC_SetPriorityGrouping+0x40>)
 80100f8:	68bb      	ldr	r3, [r7, #8]
 80100fa:	60d3      	str	r3, [r2, #12]
}
 80100fc:	bf00      	nop
 80100fe:	3714      	adds	r7, #20
 8010100:	46bd      	mov	sp, r7
 8010102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010106:	4770      	bx	lr
 8010108:	e000ed00 	.word	0xe000ed00
 801010c:	05fa0000 	.word	0x05fa0000

08010110 <__NVIC_GetPriorityGrouping>:
{
 8010110:	b480      	push	{r7}
 8010112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010114:	4b04      	ldr	r3, [pc, #16]	; (8010128 <__NVIC_GetPriorityGrouping+0x18>)
 8010116:	68db      	ldr	r3, [r3, #12]
 8010118:	0a1b      	lsrs	r3, r3, #8
 801011a:	f003 0307 	and.w	r3, r3, #7
}
 801011e:	4618      	mov	r0, r3
 8010120:	46bd      	mov	sp, r7
 8010122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010126:	4770      	bx	lr
 8010128:	e000ed00 	.word	0xe000ed00

0801012c <__NVIC_EnableIRQ>:
{
 801012c:	b480      	push	{r7}
 801012e:	b083      	sub	sp, #12
 8010130:	af00      	add	r7, sp, #0
 8010132:	4603      	mov	r3, r0
 8010134:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801013a:	2b00      	cmp	r3, #0
 801013c:	db0b      	blt.n	8010156 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801013e:	79fb      	ldrb	r3, [r7, #7]
 8010140:	f003 021f 	and.w	r2, r3, #31
 8010144:	4907      	ldr	r1, [pc, #28]	; (8010164 <__NVIC_EnableIRQ+0x38>)
 8010146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801014a:	095b      	lsrs	r3, r3, #5
 801014c:	2001      	movs	r0, #1
 801014e:	fa00 f202 	lsl.w	r2, r0, r2
 8010152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8010156:	bf00      	nop
 8010158:	370c      	adds	r7, #12
 801015a:	46bd      	mov	sp, r7
 801015c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010160:	4770      	bx	lr
 8010162:	bf00      	nop
 8010164:	e000e100 	.word	0xe000e100

08010168 <__NVIC_SetPriority>:
{
 8010168:	b480      	push	{r7}
 801016a:	b083      	sub	sp, #12
 801016c:	af00      	add	r7, sp, #0
 801016e:	4603      	mov	r3, r0
 8010170:	6039      	str	r1, [r7, #0]
 8010172:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010178:	2b00      	cmp	r3, #0
 801017a:	db0a      	blt.n	8010192 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801017c:	683b      	ldr	r3, [r7, #0]
 801017e:	b2da      	uxtb	r2, r3
 8010180:	490c      	ldr	r1, [pc, #48]	; (80101b4 <__NVIC_SetPriority+0x4c>)
 8010182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010186:	0112      	lsls	r2, r2, #4
 8010188:	b2d2      	uxtb	r2, r2
 801018a:	440b      	add	r3, r1
 801018c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8010190:	e00a      	b.n	80101a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010192:	683b      	ldr	r3, [r7, #0]
 8010194:	b2da      	uxtb	r2, r3
 8010196:	4908      	ldr	r1, [pc, #32]	; (80101b8 <__NVIC_SetPriority+0x50>)
 8010198:	79fb      	ldrb	r3, [r7, #7]
 801019a:	f003 030f 	and.w	r3, r3, #15
 801019e:	3b04      	subs	r3, #4
 80101a0:	0112      	lsls	r2, r2, #4
 80101a2:	b2d2      	uxtb	r2, r2
 80101a4:	440b      	add	r3, r1
 80101a6:	761a      	strb	r2, [r3, #24]
}
 80101a8:	bf00      	nop
 80101aa:	370c      	adds	r7, #12
 80101ac:	46bd      	mov	sp, r7
 80101ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b2:	4770      	bx	lr
 80101b4:	e000e100 	.word	0xe000e100
 80101b8:	e000ed00 	.word	0xe000ed00

080101bc <NVIC_EncodePriority>:
{
 80101bc:	b480      	push	{r7}
 80101be:	b089      	sub	sp, #36	; 0x24
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	60f8      	str	r0, [r7, #12]
 80101c4:	60b9      	str	r1, [r7, #8]
 80101c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	f003 0307 	and.w	r3, r3, #7
 80101ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80101d0:	69fb      	ldr	r3, [r7, #28]
 80101d2:	f1c3 0307 	rsb	r3, r3, #7
 80101d6:	2b04      	cmp	r3, #4
 80101d8:	bf28      	it	cs
 80101da:	2304      	movcs	r3, #4
 80101dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80101de:	69fb      	ldr	r3, [r7, #28]
 80101e0:	3304      	adds	r3, #4
 80101e2:	2b06      	cmp	r3, #6
 80101e4:	d902      	bls.n	80101ec <NVIC_EncodePriority+0x30>
 80101e6:	69fb      	ldr	r3, [r7, #28]
 80101e8:	3b03      	subs	r3, #3
 80101ea:	e000      	b.n	80101ee <NVIC_EncodePriority+0x32>
 80101ec:	2300      	movs	r3, #0
 80101ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80101f0:	f04f 32ff 	mov.w	r2, #4294967295
 80101f4:	69bb      	ldr	r3, [r7, #24]
 80101f6:	fa02 f303 	lsl.w	r3, r2, r3
 80101fa:	43da      	mvns	r2, r3
 80101fc:	68bb      	ldr	r3, [r7, #8]
 80101fe:	401a      	ands	r2, r3
 8010200:	697b      	ldr	r3, [r7, #20]
 8010202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010204:	f04f 31ff 	mov.w	r1, #4294967295
 8010208:	697b      	ldr	r3, [r7, #20]
 801020a:	fa01 f303 	lsl.w	r3, r1, r3
 801020e:	43d9      	mvns	r1, r3
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010214:	4313      	orrs	r3, r2
}
 8010216:	4618      	mov	r0, r3
 8010218:	3724      	adds	r7, #36	; 0x24
 801021a:	46bd      	mov	sp, r7
 801021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010220:	4770      	bx	lr
	...

08010224 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8010224:	b580      	push	{r7, lr}
 8010226:	b082      	sub	sp, #8
 8010228:	af00      	add	r7, sp, #0
 801022a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	3b01      	subs	r3, #1
 8010230:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010234:	d301      	bcc.n	801023a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8010236:	2301      	movs	r3, #1
 8010238:	e00f      	b.n	801025a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801023a:	4a0a      	ldr	r2, [pc, #40]	; (8010264 <SysTick_Config+0x40>)
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	3b01      	subs	r3, #1
 8010240:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8010242:	210f      	movs	r1, #15
 8010244:	f04f 30ff 	mov.w	r0, #4294967295
 8010248:	f7ff ff8e 	bl	8010168 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801024c:	4b05      	ldr	r3, [pc, #20]	; (8010264 <SysTick_Config+0x40>)
 801024e:	2200      	movs	r2, #0
 8010250:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8010252:	4b04      	ldr	r3, [pc, #16]	; (8010264 <SysTick_Config+0x40>)
 8010254:	2207      	movs	r2, #7
 8010256:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010258:	2300      	movs	r3, #0
}
 801025a:	4618      	mov	r0, r3
 801025c:	3708      	adds	r7, #8
 801025e:	46bd      	mov	sp, r7
 8010260:	bd80      	pop	{r7, pc}
 8010262:	bf00      	nop
 8010264:	e000e010 	.word	0xe000e010

08010268 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010268:	b580      	push	{r7, lr}
 801026a:	b082      	sub	sp, #8
 801026c:	af00      	add	r7, sp, #0
 801026e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8010270:	6878      	ldr	r0, [r7, #4]
 8010272:	f7ff ff29 	bl	80100c8 <__NVIC_SetPriorityGrouping>
}
 8010276:	bf00      	nop
 8010278:	3708      	adds	r7, #8
 801027a:	46bd      	mov	sp, r7
 801027c:	bd80      	pop	{r7, pc}

0801027e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801027e:	b580      	push	{r7, lr}
 8010280:	b086      	sub	sp, #24
 8010282:	af00      	add	r7, sp, #0
 8010284:	4603      	mov	r3, r0
 8010286:	60b9      	str	r1, [r7, #8]
 8010288:	607a      	str	r2, [r7, #4]
 801028a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 801028c:	2300      	movs	r3, #0
 801028e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8010290:	f7ff ff3e 	bl	8010110 <__NVIC_GetPriorityGrouping>
 8010294:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8010296:	687a      	ldr	r2, [r7, #4]
 8010298:	68b9      	ldr	r1, [r7, #8]
 801029a:	6978      	ldr	r0, [r7, #20]
 801029c:	f7ff ff8e 	bl	80101bc <NVIC_EncodePriority>
 80102a0:	4602      	mov	r2, r0
 80102a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80102a6:	4611      	mov	r1, r2
 80102a8:	4618      	mov	r0, r3
 80102aa:	f7ff ff5d 	bl	8010168 <__NVIC_SetPriority>
}
 80102ae:	bf00      	nop
 80102b0:	3718      	adds	r7, #24
 80102b2:	46bd      	mov	sp, r7
 80102b4:	bd80      	pop	{r7, pc}

080102b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80102b6:	b580      	push	{r7, lr}
 80102b8:	b082      	sub	sp, #8
 80102ba:	af00      	add	r7, sp, #0
 80102bc:	4603      	mov	r3, r0
 80102be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80102c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80102c4:	4618      	mov	r0, r3
 80102c6:	f7ff ff31 	bl	801012c <__NVIC_EnableIRQ>
}
 80102ca:	bf00      	nop
 80102cc:	3708      	adds	r7, #8
 80102ce:	46bd      	mov	sp, r7
 80102d0:	bd80      	pop	{r7, pc}

080102d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80102d2:	b580      	push	{r7, lr}
 80102d4:	b082      	sub	sp, #8
 80102d6:	af00      	add	r7, sp, #0
 80102d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80102da:	6878      	ldr	r0, [r7, #4]
 80102dc:	f7ff ffa2 	bl	8010224 <SysTick_Config>
 80102e0:	4603      	mov	r3, r0
}
 80102e2:	4618      	mov	r0, r3
 80102e4:	3708      	adds	r7, #8
 80102e6:	46bd      	mov	sp, r7
 80102e8:	bd80      	pop	{r7, pc}
	...

080102ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80102ec:	b580      	push	{r7, lr}
 80102ee:	b086      	sub	sp, #24
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80102f4:	2300      	movs	r3, #0
 80102f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80102f8:	f7ff feda 	bl	80100b0 <HAL_GetTick>
 80102fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	2b00      	cmp	r3, #0
 8010302:	d101      	bne.n	8010308 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8010304:	2301      	movs	r3, #1
 8010306:	e099      	b.n	801043c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	2202      	movs	r2, #2
 801030c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	2200      	movs	r2, #0
 8010314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	681a      	ldr	r2, [r3, #0]
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	f022 0201 	bic.w	r2, r2, #1
 8010326:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8010328:	e00f      	b.n	801034a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801032a:	f7ff fec1 	bl	80100b0 <HAL_GetTick>
 801032e:	4602      	mov	r2, r0
 8010330:	693b      	ldr	r3, [r7, #16]
 8010332:	1ad3      	subs	r3, r2, r3
 8010334:	2b05      	cmp	r3, #5
 8010336:	d908      	bls.n	801034a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	2220      	movs	r2, #32
 801033c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	2203      	movs	r2, #3
 8010342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8010346:	2303      	movs	r3, #3
 8010348:	e078      	b.n	801043c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	f003 0301 	and.w	r3, r3, #1
 8010354:	2b00      	cmp	r3, #0
 8010356:	d1e8      	bne.n	801032a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8010360:	697a      	ldr	r2, [r7, #20]
 8010362:	4b38      	ldr	r3, [pc, #224]	; (8010444 <HAL_DMA_Init+0x158>)
 8010364:	4013      	ands	r3, r2
 8010366:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	685a      	ldr	r2, [r3, #4]
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	689b      	ldr	r3, [r3, #8]
 8010370:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8010376:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	691b      	ldr	r3, [r3, #16]
 801037c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010382:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	699b      	ldr	r3, [r3, #24]
 8010388:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801038e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	6a1b      	ldr	r3, [r3, #32]
 8010394:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8010396:	697a      	ldr	r2, [r7, #20]
 8010398:	4313      	orrs	r3, r2
 801039a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103a0:	2b04      	cmp	r3, #4
 80103a2:	d107      	bne.n	80103b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103ac:	4313      	orrs	r3, r2
 80103ae:	697a      	ldr	r2, [r7, #20]
 80103b0:	4313      	orrs	r3, r2
 80103b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	697a      	ldr	r2, [r7, #20]
 80103ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	695b      	ldr	r3, [r3, #20]
 80103c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80103c4:	697b      	ldr	r3, [r7, #20]
 80103c6:	f023 0307 	bic.w	r3, r3, #7
 80103ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103d0:	697a      	ldr	r2, [r7, #20]
 80103d2:	4313      	orrs	r3, r2
 80103d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103da:	2b04      	cmp	r3, #4
 80103dc:	d117      	bne.n	801040e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103e2:	697a      	ldr	r2, [r7, #20]
 80103e4:	4313      	orrs	r3, r2
 80103e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d00e      	beq.n	801040e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80103f0:	6878      	ldr	r0, [r7, #4]
 80103f2:	f000 fb09 	bl	8010a08 <DMA_CheckFifoParam>
 80103f6:	4603      	mov	r3, r0
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d008      	beq.n	801040e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	2240      	movs	r2, #64	; 0x40
 8010400:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	2201      	movs	r2, #1
 8010406:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 801040a:	2301      	movs	r3, #1
 801040c:	e016      	b.n	801043c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	697a      	ldr	r2, [r7, #20]
 8010414:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8010416:	6878      	ldr	r0, [r7, #4]
 8010418:	f000 fac0 	bl	801099c <DMA_CalcBaseAndBitshift>
 801041c:	4603      	mov	r3, r0
 801041e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010424:	223f      	movs	r2, #63	; 0x3f
 8010426:	409a      	lsls	r2, r3
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	2200      	movs	r2, #0
 8010430:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	2201      	movs	r2, #1
 8010436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 801043a:	2300      	movs	r3, #0
}
 801043c:	4618      	mov	r0, r3
 801043e:	3718      	adds	r7, #24
 8010440:	46bd      	mov	sp, r7
 8010442:	bd80      	pop	{r7, pc}
 8010444:	e010803f 	.word	0xe010803f

08010448 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b086      	sub	sp, #24
 801044c:	af00      	add	r7, sp, #0
 801044e:	60f8      	str	r0, [r7, #12]
 8010450:	60b9      	str	r1, [r7, #8]
 8010452:	607a      	str	r2, [r7, #4]
 8010454:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010456:	2300      	movs	r3, #0
 8010458:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801045e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010466:	2b01      	cmp	r3, #1
 8010468:	d101      	bne.n	801046e <HAL_DMA_Start_IT+0x26>
 801046a:	2302      	movs	r3, #2
 801046c:	e048      	b.n	8010500 <HAL_DMA_Start_IT+0xb8>
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	2201      	movs	r2, #1
 8010472:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801047c:	b2db      	uxtb	r3, r3
 801047e:	2b01      	cmp	r3, #1
 8010480:	d137      	bne.n	80104f2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	2202      	movs	r2, #2
 8010486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	2200      	movs	r2, #0
 801048e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8010490:	683b      	ldr	r3, [r7, #0]
 8010492:	687a      	ldr	r2, [r7, #4]
 8010494:	68b9      	ldr	r1, [r7, #8]
 8010496:	68f8      	ldr	r0, [r7, #12]
 8010498:	f000 fa52 	bl	8010940 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80104a0:	223f      	movs	r2, #63	; 0x3f
 80104a2:	409a      	lsls	r2, r3
 80104a4:	693b      	ldr	r3, [r7, #16]
 80104a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	681a      	ldr	r2, [r3, #0]
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	f042 0216 	orr.w	r2, r2, #22
 80104b6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	695a      	ldr	r2, [r3, #20]
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80104c6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d007      	beq.n	80104e0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	681a      	ldr	r2, [r3, #0]
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	f042 0208 	orr.w	r2, r2, #8
 80104de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	681a      	ldr	r2, [r3, #0]
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	f042 0201 	orr.w	r2, r2, #1
 80104ee:	601a      	str	r2, [r3, #0]
 80104f0:	e005      	b.n	80104fe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	2200      	movs	r2, #0
 80104f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80104fa:	2302      	movs	r3, #2
 80104fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80104fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8010500:	4618      	mov	r0, r3
 8010502:	3718      	adds	r7, #24
 8010504:	46bd      	mov	sp, r7
 8010506:	bd80      	pop	{r7, pc}

08010508 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8010508:	b580      	push	{r7, lr}
 801050a:	b084      	sub	sp, #16
 801050c:	af00      	add	r7, sp, #0
 801050e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010514:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8010516:	f7ff fdcb 	bl	80100b0 <HAL_GetTick>
 801051a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010522:	b2db      	uxtb	r3, r3
 8010524:	2b02      	cmp	r3, #2
 8010526:	d008      	beq.n	801053a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	2280      	movs	r2, #128	; 0x80
 801052c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	2200      	movs	r2, #0
 8010532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8010536:	2301      	movs	r3, #1
 8010538:	e052      	b.n	80105e0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	681a      	ldr	r2, [r3, #0]
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	f022 0216 	bic.w	r2, r2, #22
 8010548:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	695a      	ldr	r2, [r3, #20]
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010558:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801055e:	2b00      	cmp	r3, #0
 8010560:	d103      	bne.n	801056a <HAL_DMA_Abort+0x62>
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010566:	2b00      	cmp	r3, #0
 8010568:	d007      	beq.n	801057a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	681a      	ldr	r2, [r3, #0]
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	f022 0208 	bic.w	r2, r2, #8
 8010578:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	681a      	ldr	r2, [r3, #0]
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	f022 0201 	bic.w	r2, r2, #1
 8010588:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801058a:	e013      	b.n	80105b4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801058c:	f7ff fd90 	bl	80100b0 <HAL_GetTick>
 8010590:	4602      	mov	r2, r0
 8010592:	68bb      	ldr	r3, [r7, #8]
 8010594:	1ad3      	subs	r3, r2, r3
 8010596:	2b05      	cmp	r3, #5
 8010598:	d90c      	bls.n	80105b4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	2220      	movs	r2, #32
 801059e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	2203      	movs	r2, #3
 80105a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	2200      	movs	r2, #0
 80105ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80105b0:	2303      	movs	r3, #3
 80105b2:	e015      	b.n	80105e0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	f003 0301 	and.w	r3, r3, #1
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d1e4      	bne.n	801058c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80105c6:	223f      	movs	r2, #63	; 0x3f
 80105c8:	409a      	lsls	r2, r3
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	2201      	movs	r2, #1
 80105d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	2200      	movs	r2, #0
 80105da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80105de:	2300      	movs	r3, #0
}
 80105e0:	4618      	mov	r0, r3
 80105e2:	3710      	adds	r7, #16
 80105e4:	46bd      	mov	sp, r7
 80105e6:	bd80      	pop	{r7, pc}

080105e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80105e8:	b480      	push	{r7}
 80105ea:	b083      	sub	sp, #12
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80105f6:	b2db      	uxtb	r3, r3
 80105f8:	2b02      	cmp	r3, #2
 80105fa:	d004      	beq.n	8010606 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	2280      	movs	r2, #128	; 0x80
 8010600:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8010602:	2301      	movs	r3, #1
 8010604:	e00c      	b.n	8010620 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	2205      	movs	r2, #5
 801060a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	681a      	ldr	r2, [r3, #0]
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	f022 0201 	bic.w	r2, r2, #1
 801061c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801061e:	2300      	movs	r3, #0
}
 8010620:	4618      	mov	r0, r3
 8010622:	370c      	adds	r7, #12
 8010624:	46bd      	mov	sp, r7
 8010626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062a:	4770      	bx	lr

0801062c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801062c:	b580      	push	{r7, lr}
 801062e:	b086      	sub	sp, #24
 8010630:	af00      	add	r7, sp, #0
 8010632:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8010634:	2300      	movs	r3, #0
 8010636:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8010638:	4b8e      	ldr	r3, [pc, #568]	; (8010874 <HAL_DMA_IRQHandler+0x248>)
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	4a8e      	ldr	r2, [pc, #568]	; (8010878 <HAL_DMA_IRQHandler+0x24c>)
 801063e:	fba2 2303 	umull	r2, r3, r2, r3
 8010642:	0a9b      	lsrs	r3, r3, #10
 8010644:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801064a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 801064c:	693b      	ldr	r3, [r7, #16]
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010656:	2208      	movs	r2, #8
 8010658:	409a      	lsls	r2, r3
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	4013      	ands	r3, r2
 801065e:	2b00      	cmp	r3, #0
 8010660:	d01a      	beq.n	8010698 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	f003 0304 	and.w	r3, r3, #4
 801066c:	2b00      	cmp	r3, #0
 801066e:	d013      	beq.n	8010698 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	681a      	ldr	r2, [r3, #0]
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	f022 0204 	bic.w	r2, r2, #4
 801067e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010684:	2208      	movs	r2, #8
 8010686:	409a      	lsls	r2, r3
 8010688:	693b      	ldr	r3, [r7, #16]
 801068a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010690:	f043 0201 	orr.w	r2, r3, #1
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801069c:	2201      	movs	r2, #1
 801069e:	409a      	lsls	r2, r3
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	4013      	ands	r3, r2
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d012      	beq.n	80106ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	695b      	ldr	r3, [r3, #20]
 80106ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d00b      	beq.n	80106ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80106ba:	2201      	movs	r2, #1
 80106bc:	409a      	lsls	r2, r3
 80106be:	693b      	ldr	r3, [r7, #16]
 80106c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80106c6:	f043 0202 	orr.w	r2, r3, #2
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80106d2:	2204      	movs	r2, #4
 80106d4:	409a      	lsls	r2, r3
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	4013      	ands	r3, r2
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d012      	beq.n	8010704 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	f003 0302 	and.w	r3, r3, #2
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d00b      	beq.n	8010704 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80106f0:	2204      	movs	r2, #4
 80106f2:	409a      	lsls	r2, r3
 80106f4:	693b      	ldr	r3, [r7, #16]
 80106f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80106fc:	f043 0204 	orr.w	r2, r3, #4
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010708:	2210      	movs	r2, #16
 801070a:	409a      	lsls	r2, r3
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	4013      	ands	r3, r2
 8010710:	2b00      	cmp	r3, #0
 8010712:	d043      	beq.n	801079c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	f003 0308 	and.w	r3, r3, #8
 801071e:	2b00      	cmp	r3, #0
 8010720:	d03c      	beq.n	801079c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010726:	2210      	movs	r2, #16
 8010728:	409a      	lsls	r2, r3
 801072a:	693b      	ldr	r3, [r7, #16]
 801072c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010738:	2b00      	cmp	r3, #0
 801073a:	d018      	beq.n	801076e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010746:	2b00      	cmp	r3, #0
 8010748:	d108      	bne.n	801075c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801074e:	2b00      	cmp	r3, #0
 8010750:	d024      	beq.n	801079c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010756:	6878      	ldr	r0, [r7, #4]
 8010758:	4798      	blx	r3
 801075a:	e01f      	b.n	801079c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010760:	2b00      	cmp	r3, #0
 8010762:	d01b      	beq.n	801079c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010768:	6878      	ldr	r0, [r7, #4]
 801076a:	4798      	blx	r3
 801076c:	e016      	b.n	801079c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010778:	2b00      	cmp	r3, #0
 801077a:	d107      	bne.n	801078c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	681a      	ldr	r2, [r3, #0]
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	f022 0208 	bic.w	r2, r2, #8
 801078a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010790:	2b00      	cmp	r3, #0
 8010792:	d003      	beq.n	801079c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010798:	6878      	ldr	r0, [r7, #4]
 801079a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80107a0:	2220      	movs	r2, #32
 80107a2:	409a      	lsls	r2, r3
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	4013      	ands	r3, r2
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	f000 808f 	beq.w	80108cc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	f003 0310 	and.w	r3, r3, #16
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	f000 8087 	beq.w	80108cc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80107c2:	2220      	movs	r2, #32
 80107c4:	409a      	lsls	r2, r3
 80107c6:	693b      	ldr	r3, [r7, #16]
 80107c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80107d0:	b2db      	uxtb	r3, r3
 80107d2:	2b05      	cmp	r3, #5
 80107d4:	d136      	bne.n	8010844 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	681a      	ldr	r2, [r3, #0]
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	f022 0216 	bic.w	r2, r2, #22
 80107e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	695a      	ldr	r2, [r3, #20]
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80107f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d103      	bne.n	8010806 <HAL_DMA_IRQHandler+0x1da>
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010802:	2b00      	cmp	r3, #0
 8010804:	d007      	beq.n	8010816 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	681a      	ldr	r2, [r3, #0]
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	f022 0208 	bic.w	r2, r2, #8
 8010814:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801081a:	223f      	movs	r2, #63	; 0x3f
 801081c:	409a      	lsls	r2, r3
 801081e:	693b      	ldr	r3, [r7, #16]
 8010820:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	2201      	movs	r2, #1
 8010826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	2200      	movs	r2, #0
 801082e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010836:	2b00      	cmp	r3, #0
 8010838:	d07e      	beq.n	8010938 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801083e:	6878      	ldr	r0, [r7, #4]
 8010840:	4798      	blx	r3
        }
        return;
 8010842:	e079      	b.n	8010938 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801084e:	2b00      	cmp	r3, #0
 8010850:	d01d      	beq.n	801088e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801085c:	2b00      	cmp	r3, #0
 801085e:	d10d      	bne.n	801087c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010864:	2b00      	cmp	r3, #0
 8010866:	d031      	beq.n	80108cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801086c:	6878      	ldr	r0, [r7, #4]
 801086e:	4798      	blx	r3
 8010870:	e02c      	b.n	80108cc <HAL_DMA_IRQHandler+0x2a0>
 8010872:	bf00      	nop
 8010874:	20000018 	.word	0x20000018
 8010878:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010880:	2b00      	cmp	r3, #0
 8010882:	d023      	beq.n	80108cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010888:	6878      	ldr	r0, [r7, #4]
 801088a:	4798      	blx	r3
 801088c:	e01e      	b.n	80108cc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010898:	2b00      	cmp	r3, #0
 801089a:	d10f      	bne.n	80108bc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	681a      	ldr	r2, [r3, #0]
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	f022 0210 	bic.w	r2, r2, #16
 80108aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	2201      	movs	r2, #1
 80108b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	2200      	movs	r2, #0
 80108b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d003      	beq.n	80108cc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80108c8:	6878      	ldr	r0, [r7, #4]
 80108ca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d032      	beq.n	801093a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80108d8:	f003 0301 	and.w	r3, r3, #1
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d022      	beq.n	8010926 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	2205      	movs	r2, #5
 80108e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	681a      	ldr	r2, [r3, #0]
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	f022 0201 	bic.w	r2, r2, #1
 80108f6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80108f8:	68bb      	ldr	r3, [r7, #8]
 80108fa:	3301      	adds	r3, #1
 80108fc:	60bb      	str	r3, [r7, #8]
 80108fe:	697a      	ldr	r2, [r7, #20]
 8010900:	429a      	cmp	r2, r3
 8010902:	d307      	bcc.n	8010914 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	f003 0301 	and.w	r3, r3, #1
 801090e:	2b00      	cmp	r3, #0
 8010910:	d1f2      	bne.n	80108f8 <HAL_DMA_IRQHandler+0x2cc>
 8010912:	e000      	b.n	8010916 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8010914:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	2201      	movs	r2, #1
 801091a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	2200      	movs	r2, #0
 8010922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801092a:	2b00      	cmp	r3, #0
 801092c:	d005      	beq.n	801093a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010932:	6878      	ldr	r0, [r7, #4]
 8010934:	4798      	blx	r3
 8010936:	e000      	b.n	801093a <HAL_DMA_IRQHandler+0x30e>
        return;
 8010938:	bf00      	nop
    }
  }
}
 801093a:	3718      	adds	r7, #24
 801093c:	46bd      	mov	sp, r7
 801093e:	bd80      	pop	{r7, pc}

08010940 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8010940:	b480      	push	{r7}
 8010942:	b085      	sub	sp, #20
 8010944:	af00      	add	r7, sp, #0
 8010946:	60f8      	str	r0, [r7, #12]
 8010948:	60b9      	str	r1, [r7, #8]
 801094a:	607a      	str	r2, [r7, #4]
 801094c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	681a      	ldr	r2, [r3, #0]
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801095c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	683a      	ldr	r2, [r7, #0]
 8010964:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	689b      	ldr	r3, [r3, #8]
 801096a:	2b40      	cmp	r3, #64	; 0x40
 801096c:	d108      	bne.n	8010980 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	687a      	ldr	r2, [r7, #4]
 8010974:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	68ba      	ldr	r2, [r7, #8]
 801097c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 801097e:	e007      	b.n	8010990 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	68ba      	ldr	r2, [r7, #8]
 8010986:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	687a      	ldr	r2, [r7, #4]
 801098e:	60da      	str	r2, [r3, #12]
}
 8010990:	bf00      	nop
 8010992:	3714      	adds	r7, #20
 8010994:	46bd      	mov	sp, r7
 8010996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801099a:	4770      	bx	lr

0801099c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 801099c:	b480      	push	{r7}
 801099e:	b085      	sub	sp, #20
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	b2db      	uxtb	r3, r3
 80109aa:	3b10      	subs	r3, #16
 80109ac:	4a13      	ldr	r2, [pc, #76]	; (80109fc <DMA_CalcBaseAndBitshift+0x60>)
 80109ae:	fba2 2303 	umull	r2, r3, r2, r3
 80109b2:	091b      	lsrs	r3, r3, #4
 80109b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80109b6:	4a12      	ldr	r2, [pc, #72]	; (8010a00 <DMA_CalcBaseAndBitshift+0x64>)
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	4413      	add	r3, r2
 80109bc:	781b      	ldrb	r3, [r3, #0]
 80109be:	461a      	mov	r2, r3
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	2b03      	cmp	r3, #3
 80109c8:	d908      	bls.n	80109dc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	461a      	mov	r2, r3
 80109d0:	4b0c      	ldr	r3, [pc, #48]	; (8010a04 <DMA_CalcBaseAndBitshift+0x68>)
 80109d2:	4013      	ands	r3, r2
 80109d4:	1d1a      	adds	r2, r3, #4
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	659a      	str	r2, [r3, #88]	; 0x58
 80109da:	e006      	b.n	80109ea <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	461a      	mov	r2, r3
 80109e2:	4b08      	ldr	r3, [pc, #32]	; (8010a04 <DMA_CalcBaseAndBitshift+0x68>)
 80109e4:	4013      	ands	r3, r2
 80109e6:	687a      	ldr	r2, [r7, #4]
 80109e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80109ee:	4618      	mov	r0, r3
 80109f0:	3714      	adds	r7, #20
 80109f2:	46bd      	mov	sp, r7
 80109f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f8:	4770      	bx	lr
 80109fa:	bf00      	nop
 80109fc:	aaaaaaab 	.word	0xaaaaaaab
 8010a00:	0802b810 	.word	0x0802b810
 8010a04:	fffffc00 	.word	0xfffffc00

08010a08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8010a08:	b480      	push	{r7}
 8010a0a:	b085      	sub	sp, #20
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010a10:	2300      	movs	r3, #0
 8010a12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	699b      	ldr	r3, [r3, #24]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d11f      	bne.n	8010a62 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8010a22:	68bb      	ldr	r3, [r7, #8]
 8010a24:	2b03      	cmp	r3, #3
 8010a26:	d856      	bhi.n	8010ad6 <DMA_CheckFifoParam+0xce>
 8010a28:	a201      	add	r2, pc, #4	; (adr r2, 8010a30 <DMA_CheckFifoParam+0x28>)
 8010a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a2e:	bf00      	nop
 8010a30:	08010a41 	.word	0x08010a41
 8010a34:	08010a53 	.word	0x08010a53
 8010a38:	08010a41 	.word	0x08010a41
 8010a3c:	08010ad7 	.word	0x08010ad7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d046      	beq.n	8010ada <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8010a4c:	2301      	movs	r3, #1
 8010a4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010a50:	e043      	b.n	8010ada <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8010a5a:	d140      	bne.n	8010ade <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8010a5c:	2301      	movs	r3, #1
 8010a5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010a60:	e03d      	b.n	8010ade <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	699b      	ldr	r3, [r3, #24]
 8010a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010a6a:	d121      	bne.n	8010ab0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8010a6c:	68bb      	ldr	r3, [r7, #8]
 8010a6e:	2b03      	cmp	r3, #3
 8010a70:	d837      	bhi.n	8010ae2 <DMA_CheckFifoParam+0xda>
 8010a72:	a201      	add	r2, pc, #4	; (adr r2, 8010a78 <DMA_CheckFifoParam+0x70>)
 8010a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a78:	08010a89 	.word	0x08010a89
 8010a7c:	08010a8f 	.word	0x08010a8f
 8010a80:	08010a89 	.word	0x08010a89
 8010a84:	08010aa1 	.word	0x08010aa1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8010a88:	2301      	movs	r3, #1
 8010a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8010a8c:	e030      	b.n	8010af0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d025      	beq.n	8010ae6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8010a9a:	2301      	movs	r3, #1
 8010a9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010a9e:	e022      	b.n	8010ae6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010aa4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8010aa8:	d11f      	bne.n	8010aea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8010aaa:	2301      	movs	r3, #1
 8010aac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8010aae:	e01c      	b.n	8010aea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8010ab0:	68bb      	ldr	r3, [r7, #8]
 8010ab2:	2b02      	cmp	r3, #2
 8010ab4:	d903      	bls.n	8010abe <DMA_CheckFifoParam+0xb6>
 8010ab6:	68bb      	ldr	r3, [r7, #8]
 8010ab8:	2b03      	cmp	r3, #3
 8010aba:	d003      	beq.n	8010ac4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8010abc:	e018      	b.n	8010af0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8010abe:	2301      	movs	r3, #1
 8010ac0:	73fb      	strb	r3, [r7, #15]
      break;
 8010ac2:	e015      	b.n	8010af0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ac8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d00e      	beq.n	8010aee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8010ad0:	2301      	movs	r3, #1
 8010ad2:	73fb      	strb	r3, [r7, #15]
      break;
 8010ad4:	e00b      	b.n	8010aee <DMA_CheckFifoParam+0xe6>
      break;
 8010ad6:	bf00      	nop
 8010ad8:	e00a      	b.n	8010af0 <DMA_CheckFifoParam+0xe8>
      break;
 8010ada:	bf00      	nop
 8010adc:	e008      	b.n	8010af0 <DMA_CheckFifoParam+0xe8>
      break;
 8010ade:	bf00      	nop
 8010ae0:	e006      	b.n	8010af0 <DMA_CheckFifoParam+0xe8>
      break;
 8010ae2:	bf00      	nop
 8010ae4:	e004      	b.n	8010af0 <DMA_CheckFifoParam+0xe8>
      break;
 8010ae6:	bf00      	nop
 8010ae8:	e002      	b.n	8010af0 <DMA_CheckFifoParam+0xe8>
      break;   
 8010aea:	bf00      	nop
 8010aec:	e000      	b.n	8010af0 <DMA_CheckFifoParam+0xe8>
      break;
 8010aee:	bf00      	nop
    }
  } 
  
  return status; 
 8010af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010af2:	4618      	mov	r0, r3
 8010af4:	3714      	adds	r7, #20
 8010af6:	46bd      	mov	sp, r7
 8010af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010afc:	4770      	bx	lr
 8010afe:	bf00      	nop

08010b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8010b00:	b480      	push	{r7}
 8010b02:	b089      	sub	sp, #36	; 0x24
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	6078      	str	r0, [r7, #4]
 8010b08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8010b0e:	2300      	movs	r3, #0
 8010b10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8010b12:	2300      	movs	r3, #0
 8010b14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8010b16:	2300      	movs	r3, #0
 8010b18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	61fb      	str	r3, [r7, #28]
 8010b1e:	e175      	b.n	8010e0c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8010b20:	2201      	movs	r2, #1
 8010b22:	69fb      	ldr	r3, [r7, #28]
 8010b24:	fa02 f303 	lsl.w	r3, r2, r3
 8010b28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8010b2a:	683b      	ldr	r3, [r7, #0]
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	697a      	ldr	r2, [r7, #20]
 8010b30:	4013      	ands	r3, r2
 8010b32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8010b34:	693a      	ldr	r2, [r7, #16]
 8010b36:	697b      	ldr	r3, [r7, #20]
 8010b38:	429a      	cmp	r2, r3
 8010b3a:	f040 8164 	bne.w	8010e06 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8010b3e:	683b      	ldr	r3, [r7, #0]
 8010b40:	685b      	ldr	r3, [r3, #4]
 8010b42:	f003 0303 	and.w	r3, r3, #3
 8010b46:	2b01      	cmp	r3, #1
 8010b48:	d005      	beq.n	8010b56 <HAL_GPIO_Init+0x56>
 8010b4a:	683b      	ldr	r3, [r7, #0]
 8010b4c:	685b      	ldr	r3, [r3, #4]
 8010b4e:	f003 0303 	and.w	r3, r3, #3
 8010b52:	2b02      	cmp	r3, #2
 8010b54:	d130      	bne.n	8010bb8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	689b      	ldr	r3, [r3, #8]
 8010b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8010b5c:	69fb      	ldr	r3, [r7, #28]
 8010b5e:	005b      	lsls	r3, r3, #1
 8010b60:	2203      	movs	r2, #3
 8010b62:	fa02 f303 	lsl.w	r3, r2, r3
 8010b66:	43db      	mvns	r3, r3
 8010b68:	69ba      	ldr	r2, [r7, #24]
 8010b6a:	4013      	ands	r3, r2
 8010b6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8010b6e:	683b      	ldr	r3, [r7, #0]
 8010b70:	68da      	ldr	r2, [r3, #12]
 8010b72:	69fb      	ldr	r3, [r7, #28]
 8010b74:	005b      	lsls	r3, r3, #1
 8010b76:	fa02 f303 	lsl.w	r3, r2, r3
 8010b7a:	69ba      	ldr	r2, [r7, #24]
 8010b7c:	4313      	orrs	r3, r2
 8010b7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	69ba      	ldr	r2, [r7, #24]
 8010b84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	685b      	ldr	r3, [r3, #4]
 8010b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8010b8c:	2201      	movs	r2, #1
 8010b8e:	69fb      	ldr	r3, [r7, #28]
 8010b90:	fa02 f303 	lsl.w	r3, r2, r3
 8010b94:	43db      	mvns	r3, r3
 8010b96:	69ba      	ldr	r2, [r7, #24]
 8010b98:	4013      	ands	r3, r2
 8010b9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8010b9c:	683b      	ldr	r3, [r7, #0]
 8010b9e:	685b      	ldr	r3, [r3, #4]
 8010ba0:	091b      	lsrs	r3, r3, #4
 8010ba2:	f003 0201 	and.w	r2, r3, #1
 8010ba6:	69fb      	ldr	r3, [r7, #28]
 8010ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8010bac:	69ba      	ldr	r2, [r7, #24]
 8010bae:	4313      	orrs	r3, r2
 8010bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	69ba      	ldr	r2, [r7, #24]
 8010bb6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8010bb8:	683b      	ldr	r3, [r7, #0]
 8010bba:	685b      	ldr	r3, [r3, #4]
 8010bbc:	f003 0303 	and.w	r3, r3, #3
 8010bc0:	2b03      	cmp	r3, #3
 8010bc2:	d017      	beq.n	8010bf4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	68db      	ldr	r3, [r3, #12]
 8010bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8010bca:	69fb      	ldr	r3, [r7, #28]
 8010bcc:	005b      	lsls	r3, r3, #1
 8010bce:	2203      	movs	r2, #3
 8010bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8010bd4:	43db      	mvns	r3, r3
 8010bd6:	69ba      	ldr	r2, [r7, #24]
 8010bd8:	4013      	ands	r3, r2
 8010bda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8010bdc:	683b      	ldr	r3, [r7, #0]
 8010bde:	689a      	ldr	r2, [r3, #8]
 8010be0:	69fb      	ldr	r3, [r7, #28]
 8010be2:	005b      	lsls	r3, r3, #1
 8010be4:	fa02 f303 	lsl.w	r3, r2, r3
 8010be8:	69ba      	ldr	r2, [r7, #24]
 8010bea:	4313      	orrs	r3, r2
 8010bec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	69ba      	ldr	r2, [r7, #24]
 8010bf2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8010bf4:	683b      	ldr	r3, [r7, #0]
 8010bf6:	685b      	ldr	r3, [r3, #4]
 8010bf8:	f003 0303 	and.w	r3, r3, #3
 8010bfc:	2b02      	cmp	r3, #2
 8010bfe:	d123      	bne.n	8010c48 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8010c00:	69fb      	ldr	r3, [r7, #28]
 8010c02:	08da      	lsrs	r2, r3, #3
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	3208      	adds	r2, #8
 8010c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8010c0e:	69fb      	ldr	r3, [r7, #28]
 8010c10:	f003 0307 	and.w	r3, r3, #7
 8010c14:	009b      	lsls	r3, r3, #2
 8010c16:	220f      	movs	r2, #15
 8010c18:	fa02 f303 	lsl.w	r3, r2, r3
 8010c1c:	43db      	mvns	r3, r3
 8010c1e:	69ba      	ldr	r2, [r7, #24]
 8010c20:	4013      	ands	r3, r2
 8010c22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8010c24:	683b      	ldr	r3, [r7, #0]
 8010c26:	691a      	ldr	r2, [r3, #16]
 8010c28:	69fb      	ldr	r3, [r7, #28]
 8010c2a:	f003 0307 	and.w	r3, r3, #7
 8010c2e:	009b      	lsls	r3, r3, #2
 8010c30:	fa02 f303 	lsl.w	r3, r2, r3
 8010c34:	69ba      	ldr	r2, [r7, #24]
 8010c36:	4313      	orrs	r3, r2
 8010c38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8010c3a:	69fb      	ldr	r3, [r7, #28]
 8010c3c:	08da      	lsrs	r2, r3, #3
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	3208      	adds	r2, #8
 8010c42:	69b9      	ldr	r1, [r7, #24]
 8010c44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8010c4e:	69fb      	ldr	r3, [r7, #28]
 8010c50:	005b      	lsls	r3, r3, #1
 8010c52:	2203      	movs	r2, #3
 8010c54:	fa02 f303 	lsl.w	r3, r2, r3
 8010c58:	43db      	mvns	r3, r3
 8010c5a:	69ba      	ldr	r2, [r7, #24]
 8010c5c:	4013      	ands	r3, r2
 8010c5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8010c60:	683b      	ldr	r3, [r7, #0]
 8010c62:	685b      	ldr	r3, [r3, #4]
 8010c64:	f003 0203 	and.w	r2, r3, #3
 8010c68:	69fb      	ldr	r3, [r7, #28]
 8010c6a:	005b      	lsls	r3, r3, #1
 8010c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8010c70:	69ba      	ldr	r2, [r7, #24]
 8010c72:	4313      	orrs	r3, r2
 8010c74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	69ba      	ldr	r2, [r7, #24]
 8010c7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8010c7c:	683b      	ldr	r3, [r7, #0]
 8010c7e:	685b      	ldr	r3, [r3, #4]
 8010c80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	f000 80be 	beq.w	8010e06 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010c8a:	4b66      	ldr	r3, [pc, #408]	; (8010e24 <HAL_GPIO_Init+0x324>)
 8010c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c8e:	4a65      	ldr	r2, [pc, #404]	; (8010e24 <HAL_GPIO_Init+0x324>)
 8010c90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010c94:	6453      	str	r3, [r2, #68]	; 0x44
 8010c96:	4b63      	ldr	r3, [pc, #396]	; (8010e24 <HAL_GPIO_Init+0x324>)
 8010c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010c9e:	60fb      	str	r3, [r7, #12]
 8010ca0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8010ca2:	4a61      	ldr	r2, [pc, #388]	; (8010e28 <HAL_GPIO_Init+0x328>)
 8010ca4:	69fb      	ldr	r3, [r7, #28]
 8010ca6:	089b      	lsrs	r3, r3, #2
 8010ca8:	3302      	adds	r3, #2
 8010caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8010cb0:	69fb      	ldr	r3, [r7, #28]
 8010cb2:	f003 0303 	and.w	r3, r3, #3
 8010cb6:	009b      	lsls	r3, r3, #2
 8010cb8:	220f      	movs	r2, #15
 8010cba:	fa02 f303 	lsl.w	r3, r2, r3
 8010cbe:	43db      	mvns	r3, r3
 8010cc0:	69ba      	ldr	r2, [r7, #24]
 8010cc2:	4013      	ands	r3, r2
 8010cc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	4a58      	ldr	r2, [pc, #352]	; (8010e2c <HAL_GPIO_Init+0x32c>)
 8010cca:	4293      	cmp	r3, r2
 8010ccc:	d037      	beq.n	8010d3e <HAL_GPIO_Init+0x23e>
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	4a57      	ldr	r2, [pc, #348]	; (8010e30 <HAL_GPIO_Init+0x330>)
 8010cd2:	4293      	cmp	r3, r2
 8010cd4:	d031      	beq.n	8010d3a <HAL_GPIO_Init+0x23a>
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	4a56      	ldr	r2, [pc, #344]	; (8010e34 <HAL_GPIO_Init+0x334>)
 8010cda:	4293      	cmp	r3, r2
 8010cdc:	d02b      	beq.n	8010d36 <HAL_GPIO_Init+0x236>
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	4a55      	ldr	r2, [pc, #340]	; (8010e38 <HAL_GPIO_Init+0x338>)
 8010ce2:	4293      	cmp	r3, r2
 8010ce4:	d025      	beq.n	8010d32 <HAL_GPIO_Init+0x232>
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	4a54      	ldr	r2, [pc, #336]	; (8010e3c <HAL_GPIO_Init+0x33c>)
 8010cea:	4293      	cmp	r3, r2
 8010cec:	d01f      	beq.n	8010d2e <HAL_GPIO_Init+0x22e>
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	4a53      	ldr	r2, [pc, #332]	; (8010e40 <HAL_GPIO_Init+0x340>)
 8010cf2:	4293      	cmp	r3, r2
 8010cf4:	d019      	beq.n	8010d2a <HAL_GPIO_Init+0x22a>
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	4a52      	ldr	r2, [pc, #328]	; (8010e44 <HAL_GPIO_Init+0x344>)
 8010cfa:	4293      	cmp	r3, r2
 8010cfc:	d013      	beq.n	8010d26 <HAL_GPIO_Init+0x226>
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	4a51      	ldr	r2, [pc, #324]	; (8010e48 <HAL_GPIO_Init+0x348>)
 8010d02:	4293      	cmp	r3, r2
 8010d04:	d00d      	beq.n	8010d22 <HAL_GPIO_Init+0x222>
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	4a50      	ldr	r2, [pc, #320]	; (8010e4c <HAL_GPIO_Init+0x34c>)
 8010d0a:	4293      	cmp	r3, r2
 8010d0c:	d007      	beq.n	8010d1e <HAL_GPIO_Init+0x21e>
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	4a4f      	ldr	r2, [pc, #316]	; (8010e50 <HAL_GPIO_Init+0x350>)
 8010d12:	4293      	cmp	r3, r2
 8010d14:	d101      	bne.n	8010d1a <HAL_GPIO_Init+0x21a>
 8010d16:	2309      	movs	r3, #9
 8010d18:	e012      	b.n	8010d40 <HAL_GPIO_Init+0x240>
 8010d1a:	230a      	movs	r3, #10
 8010d1c:	e010      	b.n	8010d40 <HAL_GPIO_Init+0x240>
 8010d1e:	2308      	movs	r3, #8
 8010d20:	e00e      	b.n	8010d40 <HAL_GPIO_Init+0x240>
 8010d22:	2307      	movs	r3, #7
 8010d24:	e00c      	b.n	8010d40 <HAL_GPIO_Init+0x240>
 8010d26:	2306      	movs	r3, #6
 8010d28:	e00a      	b.n	8010d40 <HAL_GPIO_Init+0x240>
 8010d2a:	2305      	movs	r3, #5
 8010d2c:	e008      	b.n	8010d40 <HAL_GPIO_Init+0x240>
 8010d2e:	2304      	movs	r3, #4
 8010d30:	e006      	b.n	8010d40 <HAL_GPIO_Init+0x240>
 8010d32:	2303      	movs	r3, #3
 8010d34:	e004      	b.n	8010d40 <HAL_GPIO_Init+0x240>
 8010d36:	2302      	movs	r3, #2
 8010d38:	e002      	b.n	8010d40 <HAL_GPIO_Init+0x240>
 8010d3a:	2301      	movs	r3, #1
 8010d3c:	e000      	b.n	8010d40 <HAL_GPIO_Init+0x240>
 8010d3e:	2300      	movs	r3, #0
 8010d40:	69fa      	ldr	r2, [r7, #28]
 8010d42:	f002 0203 	and.w	r2, r2, #3
 8010d46:	0092      	lsls	r2, r2, #2
 8010d48:	4093      	lsls	r3, r2
 8010d4a:	69ba      	ldr	r2, [r7, #24]
 8010d4c:	4313      	orrs	r3, r2
 8010d4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8010d50:	4935      	ldr	r1, [pc, #212]	; (8010e28 <HAL_GPIO_Init+0x328>)
 8010d52:	69fb      	ldr	r3, [r7, #28]
 8010d54:	089b      	lsrs	r3, r3, #2
 8010d56:	3302      	adds	r3, #2
 8010d58:	69ba      	ldr	r2, [r7, #24]
 8010d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8010d5e:	4b3d      	ldr	r3, [pc, #244]	; (8010e54 <HAL_GPIO_Init+0x354>)
 8010d60:	689b      	ldr	r3, [r3, #8]
 8010d62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010d64:	693b      	ldr	r3, [r7, #16]
 8010d66:	43db      	mvns	r3, r3
 8010d68:	69ba      	ldr	r2, [r7, #24]
 8010d6a:	4013      	ands	r3, r2
 8010d6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8010d6e:	683b      	ldr	r3, [r7, #0]
 8010d70:	685b      	ldr	r3, [r3, #4]
 8010d72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d003      	beq.n	8010d82 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8010d7a:	69ba      	ldr	r2, [r7, #24]
 8010d7c:	693b      	ldr	r3, [r7, #16]
 8010d7e:	4313      	orrs	r3, r2
 8010d80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8010d82:	4a34      	ldr	r2, [pc, #208]	; (8010e54 <HAL_GPIO_Init+0x354>)
 8010d84:	69bb      	ldr	r3, [r7, #24]
 8010d86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8010d88:	4b32      	ldr	r3, [pc, #200]	; (8010e54 <HAL_GPIO_Init+0x354>)
 8010d8a:	68db      	ldr	r3, [r3, #12]
 8010d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010d8e:	693b      	ldr	r3, [r7, #16]
 8010d90:	43db      	mvns	r3, r3
 8010d92:	69ba      	ldr	r2, [r7, #24]
 8010d94:	4013      	ands	r3, r2
 8010d96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8010d98:	683b      	ldr	r3, [r7, #0]
 8010d9a:	685b      	ldr	r3, [r3, #4]
 8010d9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d003      	beq.n	8010dac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8010da4:	69ba      	ldr	r2, [r7, #24]
 8010da6:	693b      	ldr	r3, [r7, #16]
 8010da8:	4313      	orrs	r3, r2
 8010daa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8010dac:	4a29      	ldr	r2, [pc, #164]	; (8010e54 <HAL_GPIO_Init+0x354>)
 8010dae:	69bb      	ldr	r3, [r7, #24]
 8010db0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8010db2:	4b28      	ldr	r3, [pc, #160]	; (8010e54 <HAL_GPIO_Init+0x354>)
 8010db4:	685b      	ldr	r3, [r3, #4]
 8010db6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010db8:	693b      	ldr	r3, [r7, #16]
 8010dba:	43db      	mvns	r3, r3
 8010dbc:	69ba      	ldr	r2, [r7, #24]
 8010dbe:	4013      	ands	r3, r2
 8010dc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8010dc2:	683b      	ldr	r3, [r7, #0]
 8010dc4:	685b      	ldr	r3, [r3, #4]
 8010dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d003      	beq.n	8010dd6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8010dce:	69ba      	ldr	r2, [r7, #24]
 8010dd0:	693b      	ldr	r3, [r7, #16]
 8010dd2:	4313      	orrs	r3, r2
 8010dd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8010dd6:	4a1f      	ldr	r2, [pc, #124]	; (8010e54 <HAL_GPIO_Init+0x354>)
 8010dd8:	69bb      	ldr	r3, [r7, #24]
 8010dda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8010ddc:	4b1d      	ldr	r3, [pc, #116]	; (8010e54 <HAL_GPIO_Init+0x354>)
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010de2:	693b      	ldr	r3, [r7, #16]
 8010de4:	43db      	mvns	r3, r3
 8010de6:	69ba      	ldr	r2, [r7, #24]
 8010de8:	4013      	ands	r3, r2
 8010dea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8010dec:	683b      	ldr	r3, [r7, #0]
 8010dee:	685b      	ldr	r3, [r3, #4]
 8010df0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d003      	beq.n	8010e00 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8010df8:	69ba      	ldr	r2, [r7, #24]
 8010dfa:	693b      	ldr	r3, [r7, #16]
 8010dfc:	4313      	orrs	r3, r2
 8010dfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8010e00:	4a14      	ldr	r2, [pc, #80]	; (8010e54 <HAL_GPIO_Init+0x354>)
 8010e02:	69bb      	ldr	r3, [r7, #24]
 8010e04:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8010e06:	69fb      	ldr	r3, [r7, #28]
 8010e08:	3301      	adds	r3, #1
 8010e0a:	61fb      	str	r3, [r7, #28]
 8010e0c:	69fb      	ldr	r3, [r7, #28]
 8010e0e:	2b0f      	cmp	r3, #15
 8010e10:	f67f ae86 	bls.w	8010b20 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8010e14:	bf00      	nop
 8010e16:	bf00      	nop
 8010e18:	3724      	adds	r7, #36	; 0x24
 8010e1a:	46bd      	mov	sp, r7
 8010e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e20:	4770      	bx	lr
 8010e22:	bf00      	nop
 8010e24:	40023800 	.word	0x40023800
 8010e28:	40013800 	.word	0x40013800
 8010e2c:	40020000 	.word	0x40020000
 8010e30:	40020400 	.word	0x40020400
 8010e34:	40020800 	.word	0x40020800
 8010e38:	40020c00 	.word	0x40020c00
 8010e3c:	40021000 	.word	0x40021000
 8010e40:	40021400 	.word	0x40021400
 8010e44:	40021800 	.word	0x40021800
 8010e48:	40021c00 	.word	0x40021c00
 8010e4c:	40022000 	.word	0x40022000
 8010e50:	40022400 	.word	0x40022400
 8010e54:	40013c00 	.word	0x40013c00

08010e58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8010e58:	b480      	push	{r7}
 8010e5a:	b085      	sub	sp, #20
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	6078      	str	r0, [r7, #4]
 8010e60:	460b      	mov	r3, r1
 8010e62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	691a      	ldr	r2, [r3, #16]
 8010e68:	887b      	ldrh	r3, [r7, #2]
 8010e6a:	4013      	ands	r3, r2
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d002      	beq.n	8010e76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8010e70:	2301      	movs	r3, #1
 8010e72:	73fb      	strb	r3, [r7, #15]
 8010e74:	e001      	b.n	8010e7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8010e76:	2300      	movs	r3, #0
 8010e78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8010e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	3714      	adds	r7, #20
 8010e80:	46bd      	mov	sp, r7
 8010e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e86:	4770      	bx	lr

08010e88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8010e88:	b480      	push	{r7}
 8010e8a:	b083      	sub	sp, #12
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	6078      	str	r0, [r7, #4]
 8010e90:	460b      	mov	r3, r1
 8010e92:	807b      	strh	r3, [r7, #2]
 8010e94:	4613      	mov	r3, r2
 8010e96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8010e98:	787b      	ldrb	r3, [r7, #1]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d003      	beq.n	8010ea6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8010e9e:	887a      	ldrh	r2, [r7, #2]
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8010ea4:	e003      	b.n	8010eae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8010ea6:	887b      	ldrh	r3, [r7, #2]
 8010ea8:	041a      	lsls	r2, r3, #16
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	619a      	str	r2, [r3, #24]
}
 8010eae:	bf00      	nop
 8010eb0:	370c      	adds	r7, #12
 8010eb2:	46bd      	mov	sp, r7
 8010eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb8:	4770      	bx	lr

08010eba <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8010eba:	b480      	push	{r7}
 8010ebc:	b085      	sub	sp, #20
 8010ebe:	af00      	add	r7, sp, #0
 8010ec0:	6078      	str	r0, [r7, #4]
 8010ec2:	460b      	mov	r3, r1
 8010ec4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	695b      	ldr	r3, [r3, #20]
 8010eca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8010ecc:	887a      	ldrh	r2, [r7, #2]
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	4013      	ands	r3, r2
 8010ed2:	041a      	lsls	r2, r3, #16
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	43d9      	mvns	r1, r3
 8010ed8:	887b      	ldrh	r3, [r7, #2]
 8010eda:	400b      	ands	r3, r1
 8010edc:	431a      	orrs	r2, r3
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	619a      	str	r2, [r3, #24]
}
 8010ee2:	bf00      	nop
 8010ee4:	3714      	adds	r7, #20
 8010ee6:	46bd      	mov	sp, r7
 8010ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eec:	4770      	bx	lr
	...

08010ef0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	b082      	sub	sp, #8
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	4603      	mov	r3, r0
 8010ef8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8010efa:	4b08      	ldr	r3, [pc, #32]	; (8010f1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8010efc:	695a      	ldr	r2, [r3, #20]
 8010efe:	88fb      	ldrh	r3, [r7, #6]
 8010f00:	4013      	ands	r3, r2
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d006      	beq.n	8010f14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8010f06:	4a05      	ldr	r2, [pc, #20]	; (8010f1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8010f08:	88fb      	ldrh	r3, [r7, #6]
 8010f0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8010f0c:	88fb      	ldrh	r3, [r7, #6]
 8010f0e:	4618      	mov	r0, r3
 8010f10:	f7fc fc12 	bl	800d738 <HAL_GPIO_EXTI_Callback>
  }
}
 8010f14:	bf00      	nop
 8010f16:	3708      	adds	r7, #8
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	bd80      	pop	{r7, pc}
 8010f1c:	40013c00 	.word	0x40013c00

08010f20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8010f20:	b580      	push	{r7, lr}
 8010f22:	b082      	sub	sp, #8
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d101      	bne.n	8010f32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8010f2e:	2301      	movs	r3, #1
 8010f30:	e07f      	b.n	8011032 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010f38:	b2db      	uxtb	r3, r3
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d106      	bne.n	8010f4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	2200      	movs	r2, #0
 8010f42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8010f46:	6878      	ldr	r0, [r7, #4]
 8010f48:	f7fe fd70 	bl	800fa2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	2224      	movs	r2, #36	; 0x24
 8010f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	681a      	ldr	r2, [r3, #0]
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	f022 0201 	bic.w	r2, r2, #1
 8010f62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	685a      	ldr	r2, [r3, #4]
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8010f70:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	689a      	ldr	r2, [r3, #8]
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8010f80:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	68db      	ldr	r3, [r3, #12]
 8010f86:	2b01      	cmp	r3, #1
 8010f88:	d107      	bne.n	8010f9a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	689a      	ldr	r2, [r3, #8]
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010f96:	609a      	str	r2, [r3, #8]
 8010f98:	e006      	b.n	8010fa8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	689a      	ldr	r2, [r3, #8]
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8010fa6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	68db      	ldr	r3, [r3, #12]
 8010fac:	2b02      	cmp	r3, #2
 8010fae:	d104      	bne.n	8010fba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010fb8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	6859      	ldr	r1, [r3, #4]
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	681a      	ldr	r2, [r3, #0]
 8010fc4:	4b1d      	ldr	r3, [pc, #116]	; (801103c <HAL_I2C_Init+0x11c>)
 8010fc6:	430b      	orrs	r3, r1
 8010fc8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	68da      	ldr	r2, [r3, #12]
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8010fd8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	691a      	ldr	r2, [r3, #16]
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	695b      	ldr	r3, [r3, #20]
 8010fe2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	699b      	ldr	r3, [r3, #24]
 8010fea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	430a      	orrs	r2, r1
 8010ff2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	69d9      	ldr	r1, [r3, #28]
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	6a1a      	ldr	r2, [r3, #32]
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	430a      	orrs	r2, r1
 8011002:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	681a      	ldr	r2, [r3, #0]
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	f042 0201 	orr.w	r2, r2, #1
 8011012:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	2200      	movs	r2, #0
 8011018:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	2220      	movs	r2, #32
 801101e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	2200      	movs	r2, #0
 8011026:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	2200      	movs	r2, #0
 801102c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8011030:	2300      	movs	r3, #0
}
 8011032:	4618      	mov	r0, r3
 8011034:	3708      	adds	r7, #8
 8011036:	46bd      	mov	sp, r7
 8011038:	bd80      	pop	{r7, pc}
 801103a:	bf00      	nop
 801103c:	02008000 	.word	0x02008000

08011040 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011040:	b580      	push	{r7, lr}
 8011042:	b088      	sub	sp, #32
 8011044:	af02      	add	r7, sp, #8
 8011046:	60f8      	str	r0, [r7, #12]
 8011048:	4608      	mov	r0, r1
 801104a:	4611      	mov	r1, r2
 801104c:	461a      	mov	r2, r3
 801104e:	4603      	mov	r3, r0
 8011050:	817b      	strh	r3, [r7, #10]
 8011052:	460b      	mov	r3, r1
 8011054:	813b      	strh	r3, [r7, #8]
 8011056:	4613      	mov	r3, r2
 8011058:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011060:	b2db      	uxtb	r3, r3
 8011062:	2b20      	cmp	r3, #32
 8011064:	f040 80fd 	bne.w	8011262 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8011068:	6a3b      	ldr	r3, [r7, #32]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d002      	beq.n	8011074 <HAL_I2C_Mem_Read+0x34>
 801106e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011070:	2b00      	cmp	r3, #0
 8011072:	d105      	bne.n	8011080 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	f44f 7200 	mov.w	r2, #512	; 0x200
 801107a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 801107c:	2301      	movs	r3, #1
 801107e:	e0f1      	b.n	8011264 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011086:	2b01      	cmp	r3, #1
 8011088:	d101      	bne.n	801108e <HAL_I2C_Mem_Read+0x4e>
 801108a:	2302      	movs	r3, #2
 801108c:	e0ea      	b.n	8011264 <HAL_I2C_Mem_Read+0x224>
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	2201      	movs	r2, #1
 8011092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8011096:	f7ff f80b 	bl	80100b0 <HAL_GetTick>
 801109a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801109c:	697b      	ldr	r3, [r7, #20]
 801109e:	9300      	str	r3, [sp, #0]
 80110a0:	2319      	movs	r3, #25
 80110a2:	2201      	movs	r2, #1
 80110a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80110a8:	68f8      	ldr	r0, [r7, #12]
 80110aa:	f000 f95b 	bl	8011364 <I2C_WaitOnFlagUntilTimeout>
 80110ae:	4603      	mov	r3, r0
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d001      	beq.n	80110b8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80110b4:	2301      	movs	r3, #1
 80110b6:	e0d5      	b.n	8011264 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	2222      	movs	r2, #34	; 0x22
 80110bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	2240      	movs	r2, #64	; 0x40
 80110c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	2200      	movs	r2, #0
 80110cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	6a3a      	ldr	r2, [r7, #32]
 80110d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80110d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	2200      	movs	r2, #0
 80110de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80110e0:	88f8      	ldrh	r0, [r7, #6]
 80110e2:	893a      	ldrh	r2, [r7, #8]
 80110e4:	8979      	ldrh	r1, [r7, #10]
 80110e6:	697b      	ldr	r3, [r7, #20]
 80110e8:	9301      	str	r3, [sp, #4]
 80110ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110ec:	9300      	str	r3, [sp, #0]
 80110ee:	4603      	mov	r3, r0
 80110f0:	68f8      	ldr	r0, [r7, #12]
 80110f2:	f000 f8bf 	bl	8011274 <I2C_RequestMemoryRead>
 80110f6:	4603      	mov	r3, r0
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d005      	beq.n	8011108 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	2200      	movs	r2, #0
 8011100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8011104:	2301      	movs	r3, #1
 8011106:	e0ad      	b.n	8011264 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801110c:	b29b      	uxth	r3, r3
 801110e:	2bff      	cmp	r3, #255	; 0xff
 8011110:	d90e      	bls.n	8011130 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	22ff      	movs	r2, #255	; 0xff
 8011116:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801111c:	b2da      	uxtb	r2, r3
 801111e:	8979      	ldrh	r1, [r7, #10]
 8011120:	4b52      	ldr	r3, [pc, #328]	; (801126c <HAL_I2C_Mem_Read+0x22c>)
 8011122:	9300      	str	r3, [sp, #0]
 8011124:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8011128:	68f8      	ldr	r0, [r7, #12]
 801112a:	f000 fac3 	bl	80116b4 <I2C_TransferConfig>
 801112e:	e00f      	b.n	8011150 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011134:	b29a      	uxth	r2, r3
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801113e:	b2da      	uxtb	r2, r3
 8011140:	8979      	ldrh	r1, [r7, #10]
 8011142:	4b4a      	ldr	r3, [pc, #296]	; (801126c <HAL_I2C_Mem_Read+0x22c>)
 8011144:	9300      	str	r3, [sp, #0]
 8011146:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801114a:	68f8      	ldr	r0, [r7, #12]
 801114c:	f000 fab2 	bl	80116b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8011150:	697b      	ldr	r3, [r7, #20]
 8011152:	9300      	str	r3, [sp, #0]
 8011154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011156:	2200      	movs	r2, #0
 8011158:	2104      	movs	r1, #4
 801115a:	68f8      	ldr	r0, [r7, #12]
 801115c:	f000 f902 	bl	8011364 <I2C_WaitOnFlagUntilTimeout>
 8011160:	4603      	mov	r3, r0
 8011162:	2b00      	cmp	r3, #0
 8011164:	d001      	beq.n	801116a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8011166:	2301      	movs	r3, #1
 8011168:	e07c      	b.n	8011264 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011174:	b2d2      	uxtb	r2, r2
 8011176:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801117c:	1c5a      	adds	r2, r3, #1
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011186:	3b01      	subs	r3, #1
 8011188:	b29a      	uxth	r2, r3
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011192:	b29b      	uxth	r3, r3
 8011194:	3b01      	subs	r3, #1
 8011196:	b29a      	uxth	r2, r3
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80111a0:	b29b      	uxth	r3, r3
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d034      	beq.n	8011210 <HAL_I2C_Mem_Read+0x1d0>
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d130      	bne.n	8011210 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80111ae:	697b      	ldr	r3, [r7, #20]
 80111b0:	9300      	str	r3, [sp, #0]
 80111b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111b4:	2200      	movs	r2, #0
 80111b6:	2180      	movs	r1, #128	; 0x80
 80111b8:	68f8      	ldr	r0, [r7, #12]
 80111ba:	f000 f8d3 	bl	8011364 <I2C_WaitOnFlagUntilTimeout>
 80111be:	4603      	mov	r3, r0
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d001      	beq.n	80111c8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80111c4:	2301      	movs	r3, #1
 80111c6:	e04d      	b.n	8011264 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80111cc:	b29b      	uxth	r3, r3
 80111ce:	2bff      	cmp	r3, #255	; 0xff
 80111d0:	d90e      	bls.n	80111f0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	22ff      	movs	r2, #255	; 0xff
 80111d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80111dc:	b2da      	uxtb	r2, r3
 80111de:	8979      	ldrh	r1, [r7, #10]
 80111e0:	2300      	movs	r3, #0
 80111e2:	9300      	str	r3, [sp, #0]
 80111e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80111e8:	68f8      	ldr	r0, [r7, #12]
 80111ea:	f000 fa63 	bl	80116b4 <I2C_TransferConfig>
 80111ee:	e00f      	b.n	8011210 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80111f4:	b29a      	uxth	r2, r3
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80111fe:	b2da      	uxtb	r2, r3
 8011200:	8979      	ldrh	r1, [r7, #10]
 8011202:	2300      	movs	r3, #0
 8011204:	9300      	str	r3, [sp, #0]
 8011206:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801120a:	68f8      	ldr	r0, [r7, #12]
 801120c:	f000 fa52 	bl	80116b4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011214:	b29b      	uxth	r3, r3
 8011216:	2b00      	cmp	r3, #0
 8011218:	d19a      	bne.n	8011150 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801121a:	697a      	ldr	r2, [r7, #20]
 801121c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801121e:	68f8      	ldr	r0, [r7, #12]
 8011220:	f000 f920 	bl	8011464 <I2C_WaitOnSTOPFlagUntilTimeout>
 8011224:	4603      	mov	r3, r0
 8011226:	2b00      	cmp	r3, #0
 8011228:	d001      	beq.n	801122e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 801122a:	2301      	movs	r3, #1
 801122c:	e01a      	b.n	8011264 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	2220      	movs	r2, #32
 8011234:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	6859      	ldr	r1, [r3, #4]
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	681a      	ldr	r2, [r3, #0]
 8011240:	4b0b      	ldr	r3, [pc, #44]	; (8011270 <HAL_I2C_Mem_Read+0x230>)
 8011242:	400b      	ands	r3, r1
 8011244:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	2220      	movs	r2, #32
 801124a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	2200      	movs	r2, #0
 8011252:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	2200      	movs	r2, #0
 801125a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801125e:	2300      	movs	r3, #0
 8011260:	e000      	b.n	8011264 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8011262:	2302      	movs	r3, #2
  }
}
 8011264:	4618      	mov	r0, r3
 8011266:	3718      	adds	r7, #24
 8011268:	46bd      	mov	sp, r7
 801126a:	bd80      	pop	{r7, pc}
 801126c:	80002400 	.word	0x80002400
 8011270:	fe00e800 	.word	0xfe00e800

08011274 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8011274:	b580      	push	{r7, lr}
 8011276:	b086      	sub	sp, #24
 8011278:	af02      	add	r7, sp, #8
 801127a:	60f8      	str	r0, [r7, #12]
 801127c:	4608      	mov	r0, r1
 801127e:	4611      	mov	r1, r2
 8011280:	461a      	mov	r2, r3
 8011282:	4603      	mov	r3, r0
 8011284:	817b      	strh	r3, [r7, #10]
 8011286:	460b      	mov	r3, r1
 8011288:	813b      	strh	r3, [r7, #8]
 801128a:	4613      	mov	r3, r2
 801128c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 801128e:	88fb      	ldrh	r3, [r7, #6]
 8011290:	b2da      	uxtb	r2, r3
 8011292:	8979      	ldrh	r1, [r7, #10]
 8011294:	4b20      	ldr	r3, [pc, #128]	; (8011318 <I2C_RequestMemoryRead+0xa4>)
 8011296:	9300      	str	r3, [sp, #0]
 8011298:	2300      	movs	r3, #0
 801129a:	68f8      	ldr	r0, [r7, #12]
 801129c:	f000 fa0a 	bl	80116b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80112a0:	69fa      	ldr	r2, [r7, #28]
 80112a2:	69b9      	ldr	r1, [r7, #24]
 80112a4:	68f8      	ldr	r0, [r7, #12]
 80112a6:	f000 f89d 	bl	80113e4 <I2C_WaitOnTXISFlagUntilTimeout>
 80112aa:	4603      	mov	r3, r0
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d001      	beq.n	80112b4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80112b0:	2301      	movs	r3, #1
 80112b2:	e02c      	b.n	801130e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80112b4:	88fb      	ldrh	r3, [r7, #6]
 80112b6:	2b01      	cmp	r3, #1
 80112b8:	d105      	bne.n	80112c6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80112ba:	893b      	ldrh	r3, [r7, #8]
 80112bc:	b2da      	uxtb	r2, r3
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	629a      	str	r2, [r3, #40]	; 0x28
 80112c4:	e015      	b.n	80112f2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80112c6:	893b      	ldrh	r3, [r7, #8]
 80112c8:	0a1b      	lsrs	r3, r3, #8
 80112ca:	b29b      	uxth	r3, r3
 80112cc:	b2da      	uxtb	r2, r3
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80112d4:	69fa      	ldr	r2, [r7, #28]
 80112d6:	69b9      	ldr	r1, [r7, #24]
 80112d8:	68f8      	ldr	r0, [r7, #12]
 80112da:	f000 f883 	bl	80113e4 <I2C_WaitOnTXISFlagUntilTimeout>
 80112de:	4603      	mov	r3, r0
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d001      	beq.n	80112e8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80112e4:	2301      	movs	r3, #1
 80112e6:	e012      	b.n	801130e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80112e8:	893b      	ldrh	r3, [r7, #8]
 80112ea:	b2da      	uxtb	r2, r3
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80112f2:	69fb      	ldr	r3, [r7, #28]
 80112f4:	9300      	str	r3, [sp, #0]
 80112f6:	69bb      	ldr	r3, [r7, #24]
 80112f8:	2200      	movs	r2, #0
 80112fa:	2140      	movs	r1, #64	; 0x40
 80112fc:	68f8      	ldr	r0, [r7, #12]
 80112fe:	f000 f831 	bl	8011364 <I2C_WaitOnFlagUntilTimeout>
 8011302:	4603      	mov	r3, r0
 8011304:	2b00      	cmp	r3, #0
 8011306:	d001      	beq.n	801130c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8011308:	2301      	movs	r3, #1
 801130a:	e000      	b.n	801130e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 801130c:	2300      	movs	r3, #0
}
 801130e:	4618      	mov	r0, r3
 8011310:	3710      	adds	r7, #16
 8011312:	46bd      	mov	sp, r7
 8011314:	bd80      	pop	{r7, pc}
 8011316:	bf00      	nop
 8011318:	80002000 	.word	0x80002000

0801131c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 801131c:	b480      	push	{r7}
 801131e:	b083      	sub	sp, #12
 8011320:	af00      	add	r7, sp, #0
 8011322:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	699b      	ldr	r3, [r3, #24]
 801132a:	f003 0302 	and.w	r3, r3, #2
 801132e:	2b02      	cmp	r3, #2
 8011330:	d103      	bne.n	801133a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	2200      	movs	r2, #0
 8011338:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	699b      	ldr	r3, [r3, #24]
 8011340:	f003 0301 	and.w	r3, r3, #1
 8011344:	2b01      	cmp	r3, #1
 8011346:	d007      	beq.n	8011358 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	699a      	ldr	r2, [r3, #24]
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	f042 0201 	orr.w	r2, r2, #1
 8011356:	619a      	str	r2, [r3, #24]
  }
}
 8011358:	bf00      	nop
 801135a:	370c      	adds	r7, #12
 801135c:	46bd      	mov	sp, r7
 801135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011362:	4770      	bx	lr

08011364 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8011364:	b580      	push	{r7, lr}
 8011366:	b084      	sub	sp, #16
 8011368:	af00      	add	r7, sp, #0
 801136a:	60f8      	str	r0, [r7, #12]
 801136c:	60b9      	str	r1, [r7, #8]
 801136e:	603b      	str	r3, [r7, #0]
 8011370:	4613      	mov	r3, r2
 8011372:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8011374:	e022      	b.n	80113bc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011376:	683b      	ldr	r3, [r7, #0]
 8011378:	f1b3 3fff 	cmp.w	r3, #4294967295
 801137c:	d01e      	beq.n	80113bc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801137e:	f7fe fe97 	bl	80100b0 <HAL_GetTick>
 8011382:	4602      	mov	r2, r0
 8011384:	69bb      	ldr	r3, [r7, #24]
 8011386:	1ad3      	subs	r3, r2, r3
 8011388:	683a      	ldr	r2, [r7, #0]
 801138a:	429a      	cmp	r2, r3
 801138c:	d302      	bcc.n	8011394 <I2C_WaitOnFlagUntilTimeout+0x30>
 801138e:	683b      	ldr	r3, [r7, #0]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d113      	bne.n	80113bc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011398:	f043 0220 	orr.w	r2, r3, #32
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	2220      	movs	r2, #32
 80113a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	2200      	movs	r2, #0
 80113ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	2200      	movs	r2, #0
 80113b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80113b8:	2301      	movs	r3, #1
 80113ba:	e00f      	b.n	80113dc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	699a      	ldr	r2, [r3, #24]
 80113c2:	68bb      	ldr	r3, [r7, #8]
 80113c4:	4013      	ands	r3, r2
 80113c6:	68ba      	ldr	r2, [r7, #8]
 80113c8:	429a      	cmp	r2, r3
 80113ca:	bf0c      	ite	eq
 80113cc:	2301      	moveq	r3, #1
 80113ce:	2300      	movne	r3, #0
 80113d0:	b2db      	uxtb	r3, r3
 80113d2:	461a      	mov	r2, r3
 80113d4:	79fb      	ldrb	r3, [r7, #7]
 80113d6:	429a      	cmp	r2, r3
 80113d8:	d0cd      	beq.n	8011376 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80113da:	2300      	movs	r3, #0
}
 80113dc:	4618      	mov	r0, r3
 80113de:	3710      	adds	r7, #16
 80113e0:	46bd      	mov	sp, r7
 80113e2:	bd80      	pop	{r7, pc}

080113e4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80113e4:	b580      	push	{r7, lr}
 80113e6:	b084      	sub	sp, #16
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	60f8      	str	r0, [r7, #12]
 80113ec:	60b9      	str	r1, [r7, #8]
 80113ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80113f0:	e02c      	b.n	801144c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80113f2:	687a      	ldr	r2, [r7, #4]
 80113f4:	68b9      	ldr	r1, [r7, #8]
 80113f6:	68f8      	ldr	r0, [r7, #12]
 80113f8:	f000 f870 	bl	80114dc <I2C_IsErrorOccurred>
 80113fc:	4603      	mov	r3, r0
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d001      	beq.n	8011406 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8011402:	2301      	movs	r3, #1
 8011404:	e02a      	b.n	801145c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011406:	68bb      	ldr	r3, [r7, #8]
 8011408:	f1b3 3fff 	cmp.w	r3, #4294967295
 801140c:	d01e      	beq.n	801144c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801140e:	f7fe fe4f 	bl	80100b0 <HAL_GetTick>
 8011412:	4602      	mov	r2, r0
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	1ad3      	subs	r3, r2, r3
 8011418:	68ba      	ldr	r2, [r7, #8]
 801141a:	429a      	cmp	r2, r3
 801141c:	d302      	bcc.n	8011424 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 801141e:	68bb      	ldr	r3, [r7, #8]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d113      	bne.n	801144c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011428:	f043 0220 	orr.w	r2, r3, #32
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	2220      	movs	r2, #32
 8011434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	2200      	movs	r2, #0
 801143c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	2200      	movs	r2, #0
 8011444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8011448:	2301      	movs	r3, #1
 801144a:	e007      	b.n	801145c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	699b      	ldr	r3, [r3, #24]
 8011452:	f003 0302 	and.w	r3, r3, #2
 8011456:	2b02      	cmp	r3, #2
 8011458:	d1cb      	bne.n	80113f2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801145a:	2300      	movs	r3, #0
}
 801145c:	4618      	mov	r0, r3
 801145e:	3710      	adds	r7, #16
 8011460:	46bd      	mov	sp, r7
 8011462:	bd80      	pop	{r7, pc}

08011464 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8011464:	b580      	push	{r7, lr}
 8011466:	b084      	sub	sp, #16
 8011468:	af00      	add	r7, sp, #0
 801146a:	60f8      	str	r0, [r7, #12]
 801146c:	60b9      	str	r1, [r7, #8]
 801146e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011470:	e028      	b.n	80114c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8011472:	687a      	ldr	r2, [r7, #4]
 8011474:	68b9      	ldr	r1, [r7, #8]
 8011476:	68f8      	ldr	r0, [r7, #12]
 8011478:	f000 f830 	bl	80114dc <I2C_IsErrorOccurred>
 801147c:	4603      	mov	r3, r0
 801147e:	2b00      	cmp	r3, #0
 8011480:	d001      	beq.n	8011486 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8011482:	2301      	movs	r3, #1
 8011484:	e026      	b.n	80114d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011486:	f7fe fe13 	bl	80100b0 <HAL_GetTick>
 801148a:	4602      	mov	r2, r0
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	1ad3      	subs	r3, r2, r3
 8011490:	68ba      	ldr	r2, [r7, #8]
 8011492:	429a      	cmp	r2, r3
 8011494:	d302      	bcc.n	801149c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8011496:	68bb      	ldr	r3, [r7, #8]
 8011498:	2b00      	cmp	r3, #0
 801149a:	d113      	bne.n	80114c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80114a0:	f043 0220 	orr.w	r2, r3, #32
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	2220      	movs	r2, #32
 80114ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	2200      	movs	r2, #0
 80114b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	2200      	movs	r2, #0
 80114bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80114c0:	2301      	movs	r3, #1
 80114c2:	e007      	b.n	80114d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	699b      	ldr	r3, [r3, #24]
 80114ca:	f003 0320 	and.w	r3, r3, #32
 80114ce:	2b20      	cmp	r3, #32
 80114d0:	d1cf      	bne.n	8011472 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80114d2:	2300      	movs	r3, #0
}
 80114d4:	4618      	mov	r0, r3
 80114d6:	3710      	adds	r7, #16
 80114d8:	46bd      	mov	sp, r7
 80114da:	bd80      	pop	{r7, pc}

080114dc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80114dc:	b580      	push	{r7, lr}
 80114de:	b08a      	sub	sp, #40	; 0x28
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	60f8      	str	r0, [r7, #12]
 80114e4:	60b9      	str	r1, [r7, #8]
 80114e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80114e8:	2300      	movs	r3, #0
 80114ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	699b      	ldr	r3, [r3, #24]
 80114f4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80114f6:	2300      	movs	r3, #0
 80114f8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80114fe:	69bb      	ldr	r3, [r7, #24]
 8011500:	f003 0310 	and.w	r3, r3, #16
 8011504:	2b00      	cmp	r3, #0
 8011506:	d075      	beq.n	80115f4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	2210      	movs	r2, #16
 801150e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8011510:	e056      	b.n	80115c0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8011512:	68bb      	ldr	r3, [r7, #8]
 8011514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011518:	d052      	beq.n	80115c0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801151a:	f7fe fdc9 	bl	80100b0 <HAL_GetTick>
 801151e:	4602      	mov	r2, r0
 8011520:	69fb      	ldr	r3, [r7, #28]
 8011522:	1ad3      	subs	r3, r2, r3
 8011524:	68ba      	ldr	r2, [r7, #8]
 8011526:	429a      	cmp	r2, r3
 8011528:	d302      	bcc.n	8011530 <I2C_IsErrorOccurred+0x54>
 801152a:	68bb      	ldr	r3, [r7, #8]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d147      	bne.n	80115c0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	685b      	ldr	r3, [r3, #4]
 8011536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801153a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011542:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	699b      	ldr	r3, [r3, #24]
 801154a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801154e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011552:	d12e      	bne.n	80115b2 <I2C_IsErrorOccurred+0xd6>
 8011554:	697b      	ldr	r3, [r7, #20]
 8011556:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801155a:	d02a      	beq.n	80115b2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 801155c:	7cfb      	ldrb	r3, [r7, #19]
 801155e:	2b20      	cmp	r3, #32
 8011560:	d027      	beq.n	80115b2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	685a      	ldr	r2, [r3, #4]
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011570:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8011572:	f7fe fd9d 	bl	80100b0 <HAL_GetTick>
 8011576:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011578:	e01b      	b.n	80115b2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 801157a:	f7fe fd99 	bl	80100b0 <HAL_GetTick>
 801157e:	4602      	mov	r2, r0
 8011580:	69fb      	ldr	r3, [r7, #28]
 8011582:	1ad3      	subs	r3, r2, r3
 8011584:	2b19      	cmp	r3, #25
 8011586:	d914      	bls.n	80115b2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801158c:	f043 0220 	orr.w	r2, r3, #32
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	2220      	movs	r2, #32
 8011598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	2200      	movs	r2, #0
 80115a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	2200      	movs	r2, #0
 80115a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80115ac:	2301      	movs	r3, #1
 80115ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	699b      	ldr	r3, [r3, #24]
 80115b8:	f003 0320 	and.w	r3, r3, #32
 80115bc:	2b20      	cmp	r3, #32
 80115be:	d1dc      	bne.n	801157a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	699b      	ldr	r3, [r3, #24]
 80115c6:	f003 0320 	and.w	r3, r3, #32
 80115ca:	2b20      	cmp	r3, #32
 80115cc:	d003      	beq.n	80115d6 <I2C_IsErrorOccurred+0xfa>
 80115ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d09d      	beq.n	8011512 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80115d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d103      	bne.n	80115e6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	2220      	movs	r2, #32
 80115e4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80115e6:	6a3b      	ldr	r3, [r7, #32]
 80115e8:	f043 0304 	orr.w	r3, r3, #4
 80115ec:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80115ee:	2301      	movs	r3, #1
 80115f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	699b      	ldr	r3, [r3, #24]
 80115fa:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80115fc:	69bb      	ldr	r3, [r7, #24]
 80115fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011602:	2b00      	cmp	r3, #0
 8011604:	d00b      	beq.n	801161e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8011606:	6a3b      	ldr	r3, [r7, #32]
 8011608:	f043 0301 	orr.w	r3, r3, #1
 801160c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011616:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8011618:	2301      	movs	r3, #1
 801161a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 801161e:	69bb      	ldr	r3, [r7, #24]
 8011620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011624:	2b00      	cmp	r3, #0
 8011626:	d00b      	beq.n	8011640 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8011628:	6a3b      	ldr	r3, [r7, #32]
 801162a:	f043 0308 	orr.w	r3, r3, #8
 801162e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011638:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801163a:	2301      	movs	r3, #1
 801163c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8011640:	69bb      	ldr	r3, [r7, #24]
 8011642:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011646:	2b00      	cmp	r3, #0
 8011648:	d00b      	beq.n	8011662 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 801164a:	6a3b      	ldr	r3, [r7, #32]
 801164c:	f043 0302 	orr.w	r3, r3, #2
 8011650:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	f44f 7200 	mov.w	r2, #512	; 0x200
 801165a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801165c:	2301      	movs	r3, #1
 801165e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8011662:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011666:	2b00      	cmp	r3, #0
 8011668:	d01c      	beq.n	80116a4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801166a:	68f8      	ldr	r0, [r7, #12]
 801166c:	f7ff fe56 	bl	801131c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	6859      	ldr	r1, [r3, #4]
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	681a      	ldr	r2, [r3, #0]
 801167a:	4b0d      	ldr	r3, [pc, #52]	; (80116b0 <I2C_IsErrorOccurred+0x1d4>)
 801167c:	400b      	ands	r3, r1
 801167e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011684:	6a3b      	ldr	r3, [r7, #32]
 8011686:	431a      	orrs	r2, r3
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	2220      	movs	r2, #32
 8011690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	2200      	movs	r2, #0
 8011698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	2200      	movs	r2, #0
 80116a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80116a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80116a8:	4618      	mov	r0, r3
 80116aa:	3728      	adds	r7, #40	; 0x28
 80116ac:	46bd      	mov	sp, r7
 80116ae:	bd80      	pop	{r7, pc}
 80116b0:	fe00e800 	.word	0xfe00e800

080116b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80116b4:	b480      	push	{r7}
 80116b6:	b087      	sub	sp, #28
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	60f8      	str	r0, [r7, #12]
 80116bc:	607b      	str	r3, [r7, #4]
 80116be:	460b      	mov	r3, r1
 80116c0:	817b      	strh	r3, [r7, #10]
 80116c2:	4613      	mov	r3, r2
 80116c4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80116c6:	897b      	ldrh	r3, [r7, #10]
 80116c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80116cc:	7a7b      	ldrb	r3, [r7, #9]
 80116ce:	041b      	lsls	r3, r3, #16
 80116d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80116d4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80116da:	6a3b      	ldr	r3, [r7, #32]
 80116dc:	4313      	orrs	r3, r2
 80116de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80116e2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	685a      	ldr	r2, [r3, #4]
 80116ea:	6a3b      	ldr	r3, [r7, #32]
 80116ec:	0d5b      	lsrs	r3, r3, #21
 80116ee:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80116f2:	4b08      	ldr	r3, [pc, #32]	; (8011714 <I2C_TransferConfig+0x60>)
 80116f4:	430b      	orrs	r3, r1
 80116f6:	43db      	mvns	r3, r3
 80116f8:	ea02 0103 	and.w	r1, r2, r3
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	697a      	ldr	r2, [r7, #20]
 8011702:	430a      	orrs	r2, r1
 8011704:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8011706:	bf00      	nop
 8011708:	371c      	adds	r7, #28
 801170a:	46bd      	mov	sp, r7
 801170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011710:	4770      	bx	lr
 8011712:	bf00      	nop
 8011714:	03ff63ff 	.word	0x03ff63ff

08011718 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8011718:	b480      	push	{r7}
 801171a:	b083      	sub	sp, #12
 801171c:	af00      	add	r7, sp, #0
 801171e:	6078      	str	r0, [r7, #4]
 8011720:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011728:	b2db      	uxtb	r3, r3
 801172a:	2b20      	cmp	r3, #32
 801172c:	d138      	bne.n	80117a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011734:	2b01      	cmp	r3, #1
 8011736:	d101      	bne.n	801173c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8011738:	2302      	movs	r3, #2
 801173a:	e032      	b.n	80117a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	2201      	movs	r2, #1
 8011740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	2224      	movs	r2, #36	; 0x24
 8011748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	681a      	ldr	r2, [r3, #0]
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	f022 0201 	bic.w	r2, r2, #1
 801175a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	681a      	ldr	r2, [r3, #0]
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801176a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	6819      	ldr	r1, [r3, #0]
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	683a      	ldr	r2, [r7, #0]
 8011778:	430a      	orrs	r2, r1
 801177a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	681a      	ldr	r2, [r3, #0]
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	f042 0201 	orr.w	r2, r2, #1
 801178a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	2220      	movs	r2, #32
 8011790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	2200      	movs	r2, #0
 8011798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801179c:	2300      	movs	r3, #0
 801179e:	e000      	b.n	80117a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80117a0:	2302      	movs	r3, #2
  }
}
 80117a2:	4618      	mov	r0, r3
 80117a4:	370c      	adds	r7, #12
 80117a6:	46bd      	mov	sp, r7
 80117a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ac:	4770      	bx	lr

080117ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80117ae:	b480      	push	{r7}
 80117b0:	b085      	sub	sp, #20
 80117b2:	af00      	add	r7, sp, #0
 80117b4:	6078      	str	r0, [r7, #4]
 80117b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80117be:	b2db      	uxtb	r3, r3
 80117c0:	2b20      	cmp	r3, #32
 80117c2:	d139      	bne.n	8011838 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80117ca:	2b01      	cmp	r3, #1
 80117cc:	d101      	bne.n	80117d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80117ce:	2302      	movs	r3, #2
 80117d0:	e033      	b.n	801183a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	2201      	movs	r2, #1
 80117d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	2224      	movs	r2, #36	; 0x24
 80117de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	681a      	ldr	r2, [r3, #0]
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	f022 0201 	bic.w	r2, r2, #1
 80117f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8011800:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8011802:	683b      	ldr	r3, [r7, #0]
 8011804:	021b      	lsls	r3, r3, #8
 8011806:	68fa      	ldr	r2, [r7, #12]
 8011808:	4313      	orrs	r3, r2
 801180a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	68fa      	ldr	r2, [r7, #12]
 8011812:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	681a      	ldr	r2, [r3, #0]
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	f042 0201 	orr.w	r2, r2, #1
 8011822:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	2220      	movs	r2, #32
 8011828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	2200      	movs	r2, #0
 8011830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8011834:	2300      	movs	r3, #0
 8011836:	e000      	b.n	801183a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8011838:	2302      	movs	r3, #2
  }
}
 801183a:	4618      	mov	r0, r3
 801183c:	3714      	adds	r7, #20
 801183e:	46bd      	mov	sp, r7
 8011840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011844:	4770      	bx	lr

08011846 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8011846:	b580      	push	{r7, lr}
 8011848:	b084      	sub	sp, #16
 801184a:	af00      	add	r7, sp, #0
 801184c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	2b00      	cmp	r3, #0
 8011852:	d101      	bne.n	8011858 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8011854:	2301      	movs	r3, #1
 8011856:	e041      	b.n	80118dc <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8011860:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	f245 5255 	movw	r2, #21845	; 0x5555
 801186a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	687a      	ldr	r2, [r7, #4]
 8011872:	6852      	ldr	r2, [r2, #4]
 8011874:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	687a      	ldr	r2, [r7, #4]
 801187c:	6892      	ldr	r2, [r2, #8]
 801187e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8011880:	f7fe fc16 	bl	80100b0 <HAL_GetTick>
 8011884:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8011886:	e00f      	b.n	80118a8 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8011888:	f7fe fc12 	bl	80100b0 <HAL_GetTick>
 801188c:	4602      	mov	r2, r0
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	1ad3      	subs	r3, r2, r3
 8011892:	2b31      	cmp	r3, #49	; 0x31
 8011894:	d908      	bls.n	80118a8 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	68db      	ldr	r3, [r3, #12]
 801189c:	f003 0307 	and.w	r3, r3, #7
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d001      	beq.n	80118a8 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80118a4:	2303      	movs	r3, #3
 80118a6:	e019      	b.n	80118dc <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	68db      	ldr	r3, [r3, #12]
 80118ae:	f003 0307 	and.w	r3, r3, #7
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d1e8      	bne.n	8011888 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	691a      	ldr	r2, [r3, #16]
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	68db      	ldr	r3, [r3, #12]
 80118c0:	429a      	cmp	r2, r3
 80118c2:	d005      	beq.n	80118d0 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	687a      	ldr	r2, [r7, #4]
 80118ca:	68d2      	ldr	r2, [r2, #12]
 80118cc:	611a      	str	r2, [r3, #16]
 80118ce:	e004      	b.n	80118da <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80118d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80118da:	2300      	movs	r3, #0
}
 80118dc:	4618      	mov	r0, r3
 80118de:	3710      	adds	r7, #16
 80118e0:	46bd      	mov	sp, r7
 80118e2:	bd80      	pop	{r7, pc}

080118e4 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80118e4:	b480      	push	{r7}
 80118e6:	b083      	sub	sp, #12
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80118f4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80118f6:	2300      	movs	r3, #0
}
 80118f8:	4618      	mov	r0, r3
 80118fa:	370c      	adds	r7, #12
 80118fc:	46bd      	mov	sp, r7
 80118fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011902:	4770      	bx	lr

08011904 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8011904:	b580      	push	{r7, lr}
 8011906:	b082      	sub	sp, #8
 8011908:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 801190a:	2300      	movs	r3, #0
 801190c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 801190e:	4b23      	ldr	r3, [pc, #140]	; (801199c <HAL_PWREx_EnableOverDrive+0x98>)
 8011910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011912:	4a22      	ldr	r2, [pc, #136]	; (801199c <HAL_PWREx_EnableOverDrive+0x98>)
 8011914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011918:	6413      	str	r3, [r2, #64]	; 0x40
 801191a:	4b20      	ldr	r3, [pc, #128]	; (801199c <HAL_PWREx_EnableOverDrive+0x98>)
 801191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801191e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011922:	603b      	str	r3, [r7, #0]
 8011924:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8011926:	4b1e      	ldr	r3, [pc, #120]	; (80119a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	4a1d      	ldr	r2, [pc, #116]	; (80119a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 801192c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011930:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8011932:	f7fe fbbd 	bl	80100b0 <HAL_GetTick>
 8011936:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8011938:	e009      	b.n	801194e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 801193a:	f7fe fbb9 	bl	80100b0 <HAL_GetTick>
 801193e:	4602      	mov	r2, r0
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	1ad3      	subs	r3, r2, r3
 8011944:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011948:	d901      	bls.n	801194e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 801194a:	2303      	movs	r3, #3
 801194c:	e022      	b.n	8011994 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 801194e:	4b14      	ldr	r3, [pc, #80]	; (80119a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8011950:	685b      	ldr	r3, [r3, #4]
 8011952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801195a:	d1ee      	bne.n	801193a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 801195c:	4b10      	ldr	r3, [pc, #64]	; (80119a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	4a0f      	ldr	r2, [pc, #60]	; (80119a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8011962:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011966:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8011968:	f7fe fba2 	bl	80100b0 <HAL_GetTick>
 801196c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 801196e:	e009      	b.n	8011984 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8011970:	f7fe fb9e 	bl	80100b0 <HAL_GetTick>
 8011974:	4602      	mov	r2, r0
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	1ad3      	subs	r3, r2, r3
 801197a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801197e:	d901      	bls.n	8011984 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8011980:	2303      	movs	r3, #3
 8011982:	e007      	b.n	8011994 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8011984:	4b06      	ldr	r3, [pc, #24]	; (80119a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8011986:	685b      	ldr	r3, [r3, #4]
 8011988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801198c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011990:	d1ee      	bne.n	8011970 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8011992:	2300      	movs	r3, #0
}
 8011994:	4618      	mov	r0, r3
 8011996:	3708      	adds	r7, #8
 8011998:	46bd      	mov	sp, r7
 801199a:	bd80      	pop	{r7, pc}
 801199c:	40023800 	.word	0x40023800
 80119a0:	40007000 	.word	0x40007000

080119a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80119a4:	b580      	push	{r7, lr}
 80119a6:	b086      	sub	sp, #24
 80119a8:	af00      	add	r7, sp, #0
 80119aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80119ac:	2300      	movs	r3, #0
 80119ae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d101      	bne.n	80119ba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80119b6:	2301      	movs	r3, #1
 80119b8:	e29b      	b.n	8011ef2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	f003 0301 	and.w	r3, r3, #1
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	f000 8087 	beq.w	8011ad6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80119c8:	4b96      	ldr	r3, [pc, #600]	; (8011c24 <HAL_RCC_OscConfig+0x280>)
 80119ca:	689b      	ldr	r3, [r3, #8]
 80119cc:	f003 030c 	and.w	r3, r3, #12
 80119d0:	2b04      	cmp	r3, #4
 80119d2:	d00c      	beq.n	80119ee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80119d4:	4b93      	ldr	r3, [pc, #588]	; (8011c24 <HAL_RCC_OscConfig+0x280>)
 80119d6:	689b      	ldr	r3, [r3, #8]
 80119d8:	f003 030c 	and.w	r3, r3, #12
 80119dc:	2b08      	cmp	r3, #8
 80119de:	d112      	bne.n	8011a06 <HAL_RCC_OscConfig+0x62>
 80119e0:	4b90      	ldr	r3, [pc, #576]	; (8011c24 <HAL_RCC_OscConfig+0x280>)
 80119e2:	685b      	ldr	r3, [r3, #4]
 80119e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80119e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80119ec:	d10b      	bne.n	8011a06 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80119ee:	4b8d      	ldr	r3, [pc, #564]	; (8011c24 <HAL_RCC_OscConfig+0x280>)
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d06c      	beq.n	8011ad4 <HAL_RCC_OscConfig+0x130>
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	685b      	ldr	r3, [r3, #4]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d168      	bne.n	8011ad4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8011a02:	2301      	movs	r3, #1
 8011a04:	e275      	b.n	8011ef2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	685b      	ldr	r3, [r3, #4]
 8011a0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011a0e:	d106      	bne.n	8011a1e <HAL_RCC_OscConfig+0x7a>
 8011a10:	4b84      	ldr	r3, [pc, #528]	; (8011c24 <HAL_RCC_OscConfig+0x280>)
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	4a83      	ldr	r2, [pc, #524]	; (8011c24 <HAL_RCC_OscConfig+0x280>)
 8011a16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011a1a:	6013      	str	r3, [r2, #0]
 8011a1c:	e02e      	b.n	8011a7c <HAL_RCC_OscConfig+0xd8>
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	685b      	ldr	r3, [r3, #4]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d10c      	bne.n	8011a40 <HAL_RCC_OscConfig+0x9c>
 8011a26:	4b7f      	ldr	r3, [pc, #508]	; (8011c24 <HAL_RCC_OscConfig+0x280>)
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	4a7e      	ldr	r2, [pc, #504]	; (8011c24 <HAL_RCC_OscConfig+0x280>)
 8011a2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011a30:	6013      	str	r3, [r2, #0]
 8011a32:	4b7c      	ldr	r3, [pc, #496]	; (8011c24 <HAL_RCC_OscConfig+0x280>)
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	4a7b      	ldr	r2, [pc, #492]	; (8011c24 <HAL_RCC_OscConfig+0x280>)
 8011a38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011a3c:	6013      	str	r3, [r2, #0]
 8011a3e:	e01d      	b.n	8011a7c <HAL_RCC_OscConfig+0xd8>
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	685b      	ldr	r3, [r3, #4]
 8011a44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011a48:	d10c      	bne.n	8011a64 <HAL_RCC_OscConfig+0xc0>
 8011a4a:	4b76      	ldr	r3, [pc, #472]	; (8011c24 <HAL_RCC_OscConfig+0x280>)
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	4a75      	ldr	r2, [pc, #468]	; (8011c24 <HAL_RCC_OscConfig+0x280>)
 8011a50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8011a54:	6013      	str	r3, [r2, #0]
 8011a56:	4b73      	ldr	r3, [pc, #460]	; (8011c24 <HAL_RCC_OscConfig+0x280>)
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	4a72      	ldr	r2, [pc, #456]	; (8011c24 <HAL_RCC_OscConfig+0x280>)
 8011a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011a60:	6013      	str	r3, [r2, #0]
 8011a62:	e00b      	b.n	8011a7c <HAL_RCC_OscConfig+0xd8>
 8011a64:	4b6f      	ldr	r3, [pc, #444]	; (8011c24 <HAL_RCC_OscConfig+0x280>)
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	4a6e      	ldr	r2, [pc, #440]	; (8011c24 <HAL_RCC_OscConfig+0x280>)
 8011a6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011a6e:	6013      	str	r3, [r2, #0]
 8011a70:	4b6c      	ldr	r3, [pc, #432]	; (8011c24 <HAL_RCC_OscConfig+0x280>)
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	4a6b      	ldr	r2, [pc, #428]	; (8011c24 <HAL_RCC_OscConfig+0x280>)
 8011a76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011a7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	685b      	ldr	r3, [r3, #4]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d013      	beq.n	8011aac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011a84:	f7fe fb14 	bl	80100b0 <HAL_GetTick>
 8011a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011a8a:	e008      	b.n	8011a9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8011a8c:	f7fe fb10 	bl	80100b0 <HAL_GetTick>
 8011a90:	4602      	mov	r2, r0
 8011a92:	693b      	ldr	r3, [r7, #16]
 8011a94:	1ad3      	subs	r3, r2, r3
 8011a96:	2b64      	cmp	r3, #100	; 0x64
 8011a98:	d901      	bls.n	8011a9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8011a9a:	2303      	movs	r3, #3
 8011a9c:	e229      	b.n	8011ef2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011a9e:	4b61      	ldr	r3, [pc, #388]	; (8011c24 <HAL_RCC_OscConfig+0x280>)
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d0f0      	beq.n	8011a8c <HAL_RCC_OscConfig+0xe8>
 8011aaa:	e014      	b.n	8011ad6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011aac:	f7fe fb00 	bl	80100b0 <HAL_GetTick>
 8011ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011ab2:	e008      	b.n	8011ac6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8011ab4:	f7fe fafc 	bl	80100b0 <HAL_GetTick>
 8011ab8:	4602      	mov	r2, r0
 8011aba:	693b      	ldr	r3, [r7, #16]
 8011abc:	1ad3      	subs	r3, r2, r3
 8011abe:	2b64      	cmp	r3, #100	; 0x64
 8011ac0:	d901      	bls.n	8011ac6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8011ac2:	2303      	movs	r3, #3
 8011ac4:	e215      	b.n	8011ef2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011ac6:	4b57      	ldr	r3, [pc, #348]	; (8011c24 <HAL_RCC_OscConfig+0x280>)
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d1f0      	bne.n	8011ab4 <HAL_RCC_OscConfig+0x110>
 8011ad2:	e000      	b.n	8011ad6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011ad4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	f003 0302 	and.w	r3, r3, #2
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d069      	beq.n	8011bb6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8011ae2:	4b50      	ldr	r3, [pc, #320]	; (8011c24 <HAL_RCC_OscConfig+0x280>)
 8011ae4:	689b      	ldr	r3, [r3, #8]
 8011ae6:	f003 030c 	and.w	r3, r3, #12
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d00b      	beq.n	8011b06 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8011aee:	4b4d      	ldr	r3, [pc, #308]	; (8011c24 <HAL_RCC_OscConfig+0x280>)
 8011af0:	689b      	ldr	r3, [r3, #8]
 8011af2:	f003 030c 	and.w	r3, r3, #12
 8011af6:	2b08      	cmp	r3, #8
 8011af8:	d11c      	bne.n	8011b34 <HAL_RCC_OscConfig+0x190>
 8011afa:	4b4a      	ldr	r3, [pc, #296]	; (8011c24 <HAL_RCC_OscConfig+0x280>)
 8011afc:	685b      	ldr	r3, [r3, #4]
 8011afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d116      	bne.n	8011b34 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011b06:	4b47      	ldr	r3, [pc, #284]	; (8011c24 <HAL_RCC_OscConfig+0x280>)
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	f003 0302 	and.w	r3, r3, #2
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d005      	beq.n	8011b1e <HAL_RCC_OscConfig+0x17a>
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	68db      	ldr	r3, [r3, #12]
 8011b16:	2b01      	cmp	r3, #1
 8011b18:	d001      	beq.n	8011b1e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8011b1a:	2301      	movs	r3, #1
 8011b1c:	e1e9      	b.n	8011ef2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011b1e:	4b41      	ldr	r3, [pc, #260]	; (8011c24 <HAL_RCC_OscConfig+0x280>)
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	691b      	ldr	r3, [r3, #16]
 8011b2a:	00db      	lsls	r3, r3, #3
 8011b2c:	493d      	ldr	r1, [pc, #244]	; (8011c24 <HAL_RCC_OscConfig+0x280>)
 8011b2e:	4313      	orrs	r3, r2
 8011b30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011b32:	e040      	b.n	8011bb6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	68db      	ldr	r3, [r3, #12]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d023      	beq.n	8011b84 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8011b3c:	4b39      	ldr	r3, [pc, #228]	; (8011c24 <HAL_RCC_OscConfig+0x280>)
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	4a38      	ldr	r2, [pc, #224]	; (8011c24 <HAL_RCC_OscConfig+0x280>)
 8011b42:	f043 0301 	orr.w	r3, r3, #1
 8011b46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011b48:	f7fe fab2 	bl	80100b0 <HAL_GetTick>
 8011b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011b4e:	e008      	b.n	8011b62 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8011b50:	f7fe faae 	bl	80100b0 <HAL_GetTick>
 8011b54:	4602      	mov	r2, r0
 8011b56:	693b      	ldr	r3, [r7, #16]
 8011b58:	1ad3      	subs	r3, r2, r3
 8011b5a:	2b02      	cmp	r3, #2
 8011b5c:	d901      	bls.n	8011b62 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8011b5e:	2303      	movs	r3, #3
 8011b60:	e1c7      	b.n	8011ef2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011b62:	4b30      	ldr	r3, [pc, #192]	; (8011c24 <HAL_RCC_OscConfig+0x280>)
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	f003 0302 	and.w	r3, r3, #2
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d0f0      	beq.n	8011b50 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011b6e:	4b2d      	ldr	r3, [pc, #180]	; (8011c24 <HAL_RCC_OscConfig+0x280>)
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	691b      	ldr	r3, [r3, #16]
 8011b7a:	00db      	lsls	r3, r3, #3
 8011b7c:	4929      	ldr	r1, [pc, #164]	; (8011c24 <HAL_RCC_OscConfig+0x280>)
 8011b7e:	4313      	orrs	r3, r2
 8011b80:	600b      	str	r3, [r1, #0]
 8011b82:	e018      	b.n	8011bb6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8011b84:	4b27      	ldr	r3, [pc, #156]	; (8011c24 <HAL_RCC_OscConfig+0x280>)
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	4a26      	ldr	r2, [pc, #152]	; (8011c24 <HAL_RCC_OscConfig+0x280>)
 8011b8a:	f023 0301 	bic.w	r3, r3, #1
 8011b8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011b90:	f7fe fa8e 	bl	80100b0 <HAL_GetTick>
 8011b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011b96:	e008      	b.n	8011baa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8011b98:	f7fe fa8a 	bl	80100b0 <HAL_GetTick>
 8011b9c:	4602      	mov	r2, r0
 8011b9e:	693b      	ldr	r3, [r7, #16]
 8011ba0:	1ad3      	subs	r3, r2, r3
 8011ba2:	2b02      	cmp	r3, #2
 8011ba4:	d901      	bls.n	8011baa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8011ba6:	2303      	movs	r3, #3
 8011ba8:	e1a3      	b.n	8011ef2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011baa:	4b1e      	ldr	r3, [pc, #120]	; (8011c24 <HAL_RCC_OscConfig+0x280>)
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	f003 0302 	and.w	r3, r3, #2
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d1f0      	bne.n	8011b98 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	f003 0308 	and.w	r3, r3, #8
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d038      	beq.n	8011c34 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	695b      	ldr	r3, [r3, #20]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d019      	beq.n	8011bfe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8011bca:	4b16      	ldr	r3, [pc, #88]	; (8011c24 <HAL_RCC_OscConfig+0x280>)
 8011bcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011bce:	4a15      	ldr	r2, [pc, #84]	; (8011c24 <HAL_RCC_OscConfig+0x280>)
 8011bd0:	f043 0301 	orr.w	r3, r3, #1
 8011bd4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011bd6:	f7fe fa6b 	bl	80100b0 <HAL_GetTick>
 8011bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011bdc:	e008      	b.n	8011bf0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8011bde:	f7fe fa67 	bl	80100b0 <HAL_GetTick>
 8011be2:	4602      	mov	r2, r0
 8011be4:	693b      	ldr	r3, [r7, #16]
 8011be6:	1ad3      	subs	r3, r2, r3
 8011be8:	2b02      	cmp	r3, #2
 8011bea:	d901      	bls.n	8011bf0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8011bec:	2303      	movs	r3, #3
 8011bee:	e180      	b.n	8011ef2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011bf0:	4b0c      	ldr	r3, [pc, #48]	; (8011c24 <HAL_RCC_OscConfig+0x280>)
 8011bf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011bf4:	f003 0302 	and.w	r3, r3, #2
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d0f0      	beq.n	8011bde <HAL_RCC_OscConfig+0x23a>
 8011bfc:	e01a      	b.n	8011c34 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8011bfe:	4b09      	ldr	r3, [pc, #36]	; (8011c24 <HAL_RCC_OscConfig+0x280>)
 8011c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011c02:	4a08      	ldr	r2, [pc, #32]	; (8011c24 <HAL_RCC_OscConfig+0x280>)
 8011c04:	f023 0301 	bic.w	r3, r3, #1
 8011c08:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011c0a:	f7fe fa51 	bl	80100b0 <HAL_GetTick>
 8011c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011c10:	e00a      	b.n	8011c28 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8011c12:	f7fe fa4d 	bl	80100b0 <HAL_GetTick>
 8011c16:	4602      	mov	r2, r0
 8011c18:	693b      	ldr	r3, [r7, #16]
 8011c1a:	1ad3      	subs	r3, r2, r3
 8011c1c:	2b02      	cmp	r3, #2
 8011c1e:	d903      	bls.n	8011c28 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8011c20:	2303      	movs	r3, #3
 8011c22:	e166      	b.n	8011ef2 <HAL_RCC_OscConfig+0x54e>
 8011c24:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011c28:	4b92      	ldr	r3, [pc, #584]	; (8011e74 <HAL_RCC_OscConfig+0x4d0>)
 8011c2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011c2c:	f003 0302 	and.w	r3, r3, #2
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d1ee      	bne.n	8011c12 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	f003 0304 	and.w	r3, r3, #4
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	f000 80a4 	beq.w	8011d8a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8011c42:	4b8c      	ldr	r3, [pc, #560]	; (8011e74 <HAL_RCC_OscConfig+0x4d0>)
 8011c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d10d      	bne.n	8011c6a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8011c4e:	4b89      	ldr	r3, [pc, #548]	; (8011e74 <HAL_RCC_OscConfig+0x4d0>)
 8011c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c52:	4a88      	ldr	r2, [pc, #544]	; (8011e74 <HAL_RCC_OscConfig+0x4d0>)
 8011c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011c58:	6413      	str	r3, [r2, #64]	; 0x40
 8011c5a:	4b86      	ldr	r3, [pc, #536]	; (8011e74 <HAL_RCC_OscConfig+0x4d0>)
 8011c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011c62:	60bb      	str	r3, [r7, #8]
 8011c64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8011c66:	2301      	movs	r3, #1
 8011c68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8011c6a:	4b83      	ldr	r3, [pc, #524]	; (8011e78 <HAL_RCC_OscConfig+0x4d4>)
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d118      	bne.n	8011ca8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8011c76:	4b80      	ldr	r3, [pc, #512]	; (8011e78 <HAL_RCC_OscConfig+0x4d4>)
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	4a7f      	ldr	r2, [pc, #508]	; (8011e78 <HAL_RCC_OscConfig+0x4d4>)
 8011c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011c80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8011c82:	f7fe fa15 	bl	80100b0 <HAL_GetTick>
 8011c86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8011c88:	e008      	b.n	8011c9c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011c8a:	f7fe fa11 	bl	80100b0 <HAL_GetTick>
 8011c8e:	4602      	mov	r2, r0
 8011c90:	693b      	ldr	r3, [r7, #16]
 8011c92:	1ad3      	subs	r3, r2, r3
 8011c94:	2b64      	cmp	r3, #100	; 0x64
 8011c96:	d901      	bls.n	8011c9c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8011c98:	2303      	movs	r3, #3
 8011c9a:	e12a      	b.n	8011ef2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8011c9c:	4b76      	ldr	r3, [pc, #472]	; (8011e78 <HAL_RCC_OscConfig+0x4d4>)
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d0f0      	beq.n	8011c8a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	689b      	ldr	r3, [r3, #8]
 8011cac:	2b01      	cmp	r3, #1
 8011cae:	d106      	bne.n	8011cbe <HAL_RCC_OscConfig+0x31a>
 8011cb0:	4b70      	ldr	r3, [pc, #448]	; (8011e74 <HAL_RCC_OscConfig+0x4d0>)
 8011cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011cb4:	4a6f      	ldr	r2, [pc, #444]	; (8011e74 <HAL_RCC_OscConfig+0x4d0>)
 8011cb6:	f043 0301 	orr.w	r3, r3, #1
 8011cba:	6713      	str	r3, [r2, #112]	; 0x70
 8011cbc:	e02d      	b.n	8011d1a <HAL_RCC_OscConfig+0x376>
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	689b      	ldr	r3, [r3, #8]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d10c      	bne.n	8011ce0 <HAL_RCC_OscConfig+0x33c>
 8011cc6:	4b6b      	ldr	r3, [pc, #428]	; (8011e74 <HAL_RCC_OscConfig+0x4d0>)
 8011cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011cca:	4a6a      	ldr	r2, [pc, #424]	; (8011e74 <HAL_RCC_OscConfig+0x4d0>)
 8011ccc:	f023 0301 	bic.w	r3, r3, #1
 8011cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8011cd2:	4b68      	ldr	r3, [pc, #416]	; (8011e74 <HAL_RCC_OscConfig+0x4d0>)
 8011cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011cd6:	4a67      	ldr	r2, [pc, #412]	; (8011e74 <HAL_RCC_OscConfig+0x4d0>)
 8011cd8:	f023 0304 	bic.w	r3, r3, #4
 8011cdc:	6713      	str	r3, [r2, #112]	; 0x70
 8011cde:	e01c      	b.n	8011d1a <HAL_RCC_OscConfig+0x376>
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	689b      	ldr	r3, [r3, #8]
 8011ce4:	2b05      	cmp	r3, #5
 8011ce6:	d10c      	bne.n	8011d02 <HAL_RCC_OscConfig+0x35e>
 8011ce8:	4b62      	ldr	r3, [pc, #392]	; (8011e74 <HAL_RCC_OscConfig+0x4d0>)
 8011cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011cec:	4a61      	ldr	r2, [pc, #388]	; (8011e74 <HAL_RCC_OscConfig+0x4d0>)
 8011cee:	f043 0304 	orr.w	r3, r3, #4
 8011cf2:	6713      	str	r3, [r2, #112]	; 0x70
 8011cf4:	4b5f      	ldr	r3, [pc, #380]	; (8011e74 <HAL_RCC_OscConfig+0x4d0>)
 8011cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011cf8:	4a5e      	ldr	r2, [pc, #376]	; (8011e74 <HAL_RCC_OscConfig+0x4d0>)
 8011cfa:	f043 0301 	orr.w	r3, r3, #1
 8011cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8011d00:	e00b      	b.n	8011d1a <HAL_RCC_OscConfig+0x376>
 8011d02:	4b5c      	ldr	r3, [pc, #368]	; (8011e74 <HAL_RCC_OscConfig+0x4d0>)
 8011d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d06:	4a5b      	ldr	r2, [pc, #364]	; (8011e74 <HAL_RCC_OscConfig+0x4d0>)
 8011d08:	f023 0301 	bic.w	r3, r3, #1
 8011d0c:	6713      	str	r3, [r2, #112]	; 0x70
 8011d0e:	4b59      	ldr	r3, [pc, #356]	; (8011e74 <HAL_RCC_OscConfig+0x4d0>)
 8011d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d12:	4a58      	ldr	r2, [pc, #352]	; (8011e74 <HAL_RCC_OscConfig+0x4d0>)
 8011d14:	f023 0304 	bic.w	r3, r3, #4
 8011d18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	689b      	ldr	r3, [r3, #8]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d015      	beq.n	8011d4e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011d22:	f7fe f9c5 	bl	80100b0 <HAL_GetTick>
 8011d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011d28:	e00a      	b.n	8011d40 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011d2a:	f7fe f9c1 	bl	80100b0 <HAL_GetTick>
 8011d2e:	4602      	mov	r2, r0
 8011d30:	693b      	ldr	r3, [r7, #16]
 8011d32:	1ad3      	subs	r3, r2, r3
 8011d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8011d38:	4293      	cmp	r3, r2
 8011d3a:	d901      	bls.n	8011d40 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8011d3c:	2303      	movs	r3, #3
 8011d3e:	e0d8      	b.n	8011ef2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011d40:	4b4c      	ldr	r3, [pc, #304]	; (8011e74 <HAL_RCC_OscConfig+0x4d0>)
 8011d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d44:	f003 0302 	and.w	r3, r3, #2
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d0ee      	beq.n	8011d2a <HAL_RCC_OscConfig+0x386>
 8011d4c:	e014      	b.n	8011d78 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011d4e:	f7fe f9af 	bl	80100b0 <HAL_GetTick>
 8011d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011d54:	e00a      	b.n	8011d6c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011d56:	f7fe f9ab 	bl	80100b0 <HAL_GetTick>
 8011d5a:	4602      	mov	r2, r0
 8011d5c:	693b      	ldr	r3, [r7, #16]
 8011d5e:	1ad3      	subs	r3, r2, r3
 8011d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8011d64:	4293      	cmp	r3, r2
 8011d66:	d901      	bls.n	8011d6c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8011d68:	2303      	movs	r3, #3
 8011d6a:	e0c2      	b.n	8011ef2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011d6c:	4b41      	ldr	r3, [pc, #260]	; (8011e74 <HAL_RCC_OscConfig+0x4d0>)
 8011d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d70:	f003 0302 	and.w	r3, r3, #2
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d1ee      	bne.n	8011d56 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8011d78:	7dfb      	ldrb	r3, [r7, #23]
 8011d7a:	2b01      	cmp	r3, #1
 8011d7c:	d105      	bne.n	8011d8a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011d7e:	4b3d      	ldr	r3, [pc, #244]	; (8011e74 <HAL_RCC_OscConfig+0x4d0>)
 8011d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d82:	4a3c      	ldr	r2, [pc, #240]	; (8011e74 <HAL_RCC_OscConfig+0x4d0>)
 8011d84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011d88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	699b      	ldr	r3, [r3, #24]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	f000 80ae 	beq.w	8011ef0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011d94:	4b37      	ldr	r3, [pc, #220]	; (8011e74 <HAL_RCC_OscConfig+0x4d0>)
 8011d96:	689b      	ldr	r3, [r3, #8]
 8011d98:	f003 030c 	and.w	r3, r3, #12
 8011d9c:	2b08      	cmp	r3, #8
 8011d9e:	d06d      	beq.n	8011e7c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	699b      	ldr	r3, [r3, #24]
 8011da4:	2b02      	cmp	r3, #2
 8011da6:	d14b      	bne.n	8011e40 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011da8:	4b32      	ldr	r3, [pc, #200]	; (8011e74 <HAL_RCC_OscConfig+0x4d0>)
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	4a31      	ldr	r2, [pc, #196]	; (8011e74 <HAL_RCC_OscConfig+0x4d0>)
 8011dae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8011db2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011db4:	f7fe f97c 	bl	80100b0 <HAL_GetTick>
 8011db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011dba:	e008      	b.n	8011dce <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011dbc:	f7fe f978 	bl	80100b0 <HAL_GetTick>
 8011dc0:	4602      	mov	r2, r0
 8011dc2:	693b      	ldr	r3, [r7, #16]
 8011dc4:	1ad3      	subs	r3, r2, r3
 8011dc6:	2b02      	cmp	r3, #2
 8011dc8:	d901      	bls.n	8011dce <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8011dca:	2303      	movs	r3, #3
 8011dcc:	e091      	b.n	8011ef2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011dce:	4b29      	ldr	r3, [pc, #164]	; (8011e74 <HAL_RCC_OscConfig+0x4d0>)
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d1f0      	bne.n	8011dbc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	69da      	ldr	r2, [r3, #28]
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	6a1b      	ldr	r3, [r3, #32]
 8011de2:	431a      	orrs	r2, r3
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011de8:	019b      	lsls	r3, r3, #6
 8011dea:	431a      	orrs	r2, r3
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011df0:	085b      	lsrs	r3, r3, #1
 8011df2:	3b01      	subs	r3, #1
 8011df4:	041b      	lsls	r3, r3, #16
 8011df6:	431a      	orrs	r2, r3
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dfc:	061b      	lsls	r3, r3, #24
 8011dfe:	431a      	orrs	r2, r3
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e04:	071b      	lsls	r3, r3, #28
 8011e06:	491b      	ldr	r1, [pc, #108]	; (8011e74 <HAL_RCC_OscConfig+0x4d0>)
 8011e08:	4313      	orrs	r3, r2
 8011e0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8011e0c:	4b19      	ldr	r3, [pc, #100]	; (8011e74 <HAL_RCC_OscConfig+0x4d0>)
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	4a18      	ldr	r2, [pc, #96]	; (8011e74 <HAL_RCC_OscConfig+0x4d0>)
 8011e12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011e16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011e18:	f7fe f94a 	bl	80100b0 <HAL_GetTick>
 8011e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011e1e:	e008      	b.n	8011e32 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011e20:	f7fe f946 	bl	80100b0 <HAL_GetTick>
 8011e24:	4602      	mov	r2, r0
 8011e26:	693b      	ldr	r3, [r7, #16]
 8011e28:	1ad3      	subs	r3, r2, r3
 8011e2a:	2b02      	cmp	r3, #2
 8011e2c:	d901      	bls.n	8011e32 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8011e2e:	2303      	movs	r3, #3
 8011e30:	e05f      	b.n	8011ef2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011e32:	4b10      	ldr	r3, [pc, #64]	; (8011e74 <HAL_RCC_OscConfig+0x4d0>)
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d0f0      	beq.n	8011e20 <HAL_RCC_OscConfig+0x47c>
 8011e3e:	e057      	b.n	8011ef0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011e40:	4b0c      	ldr	r3, [pc, #48]	; (8011e74 <HAL_RCC_OscConfig+0x4d0>)
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	4a0b      	ldr	r2, [pc, #44]	; (8011e74 <HAL_RCC_OscConfig+0x4d0>)
 8011e46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8011e4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011e4c:	f7fe f930 	bl	80100b0 <HAL_GetTick>
 8011e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011e52:	e008      	b.n	8011e66 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011e54:	f7fe f92c 	bl	80100b0 <HAL_GetTick>
 8011e58:	4602      	mov	r2, r0
 8011e5a:	693b      	ldr	r3, [r7, #16]
 8011e5c:	1ad3      	subs	r3, r2, r3
 8011e5e:	2b02      	cmp	r3, #2
 8011e60:	d901      	bls.n	8011e66 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8011e62:	2303      	movs	r3, #3
 8011e64:	e045      	b.n	8011ef2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011e66:	4b03      	ldr	r3, [pc, #12]	; (8011e74 <HAL_RCC_OscConfig+0x4d0>)
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d1f0      	bne.n	8011e54 <HAL_RCC_OscConfig+0x4b0>
 8011e72:	e03d      	b.n	8011ef0 <HAL_RCC_OscConfig+0x54c>
 8011e74:	40023800 	.word	0x40023800
 8011e78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8011e7c:	4b1f      	ldr	r3, [pc, #124]	; (8011efc <HAL_RCC_OscConfig+0x558>)
 8011e7e:	685b      	ldr	r3, [r3, #4]
 8011e80:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	699b      	ldr	r3, [r3, #24]
 8011e86:	2b01      	cmp	r3, #1
 8011e88:	d030      	beq.n	8011eec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011e94:	429a      	cmp	r2, r3
 8011e96:	d129      	bne.n	8011eec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011ea2:	429a      	cmp	r2, r3
 8011ea4:	d122      	bne.n	8011eec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8011ea6:	68fa      	ldr	r2, [r7, #12]
 8011ea8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8011eac:	4013      	ands	r3, r2
 8011eae:	687a      	ldr	r2, [r7, #4]
 8011eb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8011eb2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8011eb4:	4293      	cmp	r3, r2
 8011eb6:	d119      	bne.n	8011eec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ec2:	085b      	lsrs	r3, r3, #1
 8011ec4:	3b01      	subs	r3, #1
 8011ec6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8011ec8:	429a      	cmp	r2, r3
 8011eca:	d10f      	bne.n	8011eec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ed6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8011ed8:	429a      	cmp	r2, r3
 8011eda:	d107      	bne.n	8011eec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ee6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8011ee8:	429a      	cmp	r2, r3
 8011eea:	d001      	beq.n	8011ef0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8011eec:	2301      	movs	r3, #1
 8011eee:	e000      	b.n	8011ef2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8011ef0:	2300      	movs	r3, #0
}
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	3718      	adds	r7, #24
 8011ef6:	46bd      	mov	sp, r7
 8011ef8:	bd80      	pop	{r7, pc}
 8011efa:	bf00      	nop
 8011efc:	40023800 	.word	0x40023800

08011f00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011f00:	b580      	push	{r7, lr}
 8011f02:	b084      	sub	sp, #16
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	6078      	str	r0, [r7, #4]
 8011f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8011f0a:	2300      	movs	r3, #0
 8011f0c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d101      	bne.n	8011f18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8011f14:	2301      	movs	r3, #1
 8011f16:	e0d0      	b.n	80120ba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8011f18:	4b6a      	ldr	r3, [pc, #424]	; (80120c4 <HAL_RCC_ClockConfig+0x1c4>)
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	f003 030f 	and.w	r3, r3, #15
 8011f20:	683a      	ldr	r2, [r7, #0]
 8011f22:	429a      	cmp	r2, r3
 8011f24:	d910      	bls.n	8011f48 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011f26:	4b67      	ldr	r3, [pc, #412]	; (80120c4 <HAL_RCC_ClockConfig+0x1c4>)
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	f023 020f 	bic.w	r2, r3, #15
 8011f2e:	4965      	ldr	r1, [pc, #404]	; (80120c4 <HAL_RCC_ClockConfig+0x1c4>)
 8011f30:	683b      	ldr	r3, [r7, #0]
 8011f32:	4313      	orrs	r3, r2
 8011f34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011f36:	4b63      	ldr	r3, [pc, #396]	; (80120c4 <HAL_RCC_ClockConfig+0x1c4>)
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	f003 030f 	and.w	r3, r3, #15
 8011f3e:	683a      	ldr	r2, [r7, #0]
 8011f40:	429a      	cmp	r2, r3
 8011f42:	d001      	beq.n	8011f48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8011f44:	2301      	movs	r3, #1
 8011f46:	e0b8      	b.n	80120ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	f003 0302 	and.w	r3, r3, #2
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d020      	beq.n	8011f96 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	f003 0304 	and.w	r3, r3, #4
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d005      	beq.n	8011f6c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8011f60:	4b59      	ldr	r3, [pc, #356]	; (80120c8 <HAL_RCC_ClockConfig+0x1c8>)
 8011f62:	689b      	ldr	r3, [r3, #8]
 8011f64:	4a58      	ldr	r2, [pc, #352]	; (80120c8 <HAL_RCC_ClockConfig+0x1c8>)
 8011f66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8011f6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	f003 0308 	and.w	r3, r3, #8
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d005      	beq.n	8011f84 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8011f78:	4b53      	ldr	r3, [pc, #332]	; (80120c8 <HAL_RCC_ClockConfig+0x1c8>)
 8011f7a:	689b      	ldr	r3, [r3, #8]
 8011f7c:	4a52      	ldr	r2, [pc, #328]	; (80120c8 <HAL_RCC_ClockConfig+0x1c8>)
 8011f7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8011f82:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011f84:	4b50      	ldr	r3, [pc, #320]	; (80120c8 <HAL_RCC_ClockConfig+0x1c8>)
 8011f86:	689b      	ldr	r3, [r3, #8]
 8011f88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	689b      	ldr	r3, [r3, #8]
 8011f90:	494d      	ldr	r1, [pc, #308]	; (80120c8 <HAL_RCC_ClockConfig+0x1c8>)
 8011f92:	4313      	orrs	r3, r2
 8011f94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	f003 0301 	and.w	r3, r3, #1
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d040      	beq.n	8012024 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	685b      	ldr	r3, [r3, #4]
 8011fa6:	2b01      	cmp	r3, #1
 8011fa8:	d107      	bne.n	8011fba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011faa:	4b47      	ldr	r3, [pc, #284]	; (80120c8 <HAL_RCC_ClockConfig+0x1c8>)
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d115      	bne.n	8011fe2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8011fb6:	2301      	movs	r3, #1
 8011fb8:	e07f      	b.n	80120ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	685b      	ldr	r3, [r3, #4]
 8011fbe:	2b02      	cmp	r3, #2
 8011fc0:	d107      	bne.n	8011fd2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011fc2:	4b41      	ldr	r3, [pc, #260]	; (80120c8 <HAL_RCC_ClockConfig+0x1c8>)
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d109      	bne.n	8011fe2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8011fce:	2301      	movs	r3, #1
 8011fd0:	e073      	b.n	80120ba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011fd2:	4b3d      	ldr	r3, [pc, #244]	; (80120c8 <HAL_RCC_ClockConfig+0x1c8>)
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	f003 0302 	and.w	r3, r3, #2
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d101      	bne.n	8011fe2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8011fde:	2301      	movs	r3, #1
 8011fe0:	e06b      	b.n	80120ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8011fe2:	4b39      	ldr	r3, [pc, #228]	; (80120c8 <HAL_RCC_ClockConfig+0x1c8>)
 8011fe4:	689b      	ldr	r3, [r3, #8]
 8011fe6:	f023 0203 	bic.w	r2, r3, #3
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	685b      	ldr	r3, [r3, #4]
 8011fee:	4936      	ldr	r1, [pc, #216]	; (80120c8 <HAL_RCC_ClockConfig+0x1c8>)
 8011ff0:	4313      	orrs	r3, r2
 8011ff2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011ff4:	f7fe f85c 	bl	80100b0 <HAL_GetTick>
 8011ff8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011ffa:	e00a      	b.n	8012012 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011ffc:	f7fe f858 	bl	80100b0 <HAL_GetTick>
 8012000:	4602      	mov	r2, r0
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	1ad3      	subs	r3, r2, r3
 8012006:	f241 3288 	movw	r2, #5000	; 0x1388
 801200a:	4293      	cmp	r3, r2
 801200c:	d901      	bls.n	8012012 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 801200e:	2303      	movs	r3, #3
 8012010:	e053      	b.n	80120ba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012012:	4b2d      	ldr	r3, [pc, #180]	; (80120c8 <HAL_RCC_ClockConfig+0x1c8>)
 8012014:	689b      	ldr	r3, [r3, #8]
 8012016:	f003 020c 	and.w	r2, r3, #12
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	685b      	ldr	r3, [r3, #4]
 801201e:	009b      	lsls	r3, r3, #2
 8012020:	429a      	cmp	r2, r3
 8012022:	d1eb      	bne.n	8011ffc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8012024:	4b27      	ldr	r3, [pc, #156]	; (80120c4 <HAL_RCC_ClockConfig+0x1c4>)
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	f003 030f 	and.w	r3, r3, #15
 801202c:	683a      	ldr	r2, [r7, #0]
 801202e:	429a      	cmp	r2, r3
 8012030:	d210      	bcs.n	8012054 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012032:	4b24      	ldr	r3, [pc, #144]	; (80120c4 <HAL_RCC_ClockConfig+0x1c4>)
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	f023 020f 	bic.w	r2, r3, #15
 801203a:	4922      	ldr	r1, [pc, #136]	; (80120c4 <HAL_RCC_ClockConfig+0x1c4>)
 801203c:	683b      	ldr	r3, [r7, #0]
 801203e:	4313      	orrs	r3, r2
 8012040:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8012042:	4b20      	ldr	r3, [pc, #128]	; (80120c4 <HAL_RCC_ClockConfig+0x1c4>)
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	f003 030f 	and.w	r3, r3, #15
 801204a:	683a      	ldr	r2, [r7, #0]
 801204c:	429a      	cmp	r2, r3
 801204e:	d001      	beq.n	8012054 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8012050:	2301      	movs	r3, #1
 8012052:	e032      	b.n	80120ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	f003 0304 	and.w	r3, r3, #4
 801205c:	2b00      	cmp	r3, #0
 801205e:	d008      	beq.n	8012072 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8012060:	4b19      	ldr	r3, [pc, #100]	; (80120c8 <HAL_RCC_ClockConfig+0x1c8>)
 8012062:	689b      	ldr	r3, [r3, #8]
 8012064:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	68db      	ldr	r3, [r3, #12]
 801206c:	4916      	ldr	r1, [pc, #88]	; (80120c8 <HAL_RCC_ClockConfig+0x1c8>)
 801206e:	4313      	orrs	r3, r2
 8012070:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	f003 0308 	and.w	r3, r3, #8
 801207a:	2b00      	cmp	r3, #0
 801207c:	d009      	beq.n	8012092 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801207e:	4b12      	ldr	r3, [pc, #72]	; (80120c8 <HAL_RCC_ClockConfig+0x1c8>)
 8012080:	689b      	ldr	r3, [r3, #8]
 8012082:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	691b      	ldr	r3, [r3, #16]
 801208a:	00db      	lsls	r3, r3, #3
 801208c:	490e      	ldr	r1, [pc, #56]	; (80120c8 <HAL_RCC_ClockConfig+0x1c8>)
 801208e:	4313      	orrs	r3, r2
 8012090:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8012092:	f000 f821 	bl	80120d8 <HAL_RCC_GetSysClockFreq>
 8012096:	4602      	mov	r2, r0
 8012098:	4b0b      	ldr	r3, [pc, #44]	; (80120c8 <HAL_RCC_ClockConfig+0x1c8>)
 801209a:	689b      	ldr	r3, [r3, #8]
 801209c:	091b      	lsrs	r3, r3, #4
 801209e:	f003 030f 	and.w	r3, r3, #15
 80120a2:	490a      	ldr	r1, [pc, #40]	; (80120cc <HAL_RCC_ClockConfig+0x1cc>)
 80120a4:	5ccb      	ldrb	r3, [r1, r3]
 80120a6:	fa22 f303 	lsr.w	r3, r2, r3
 80120aa:	4a09      	ldr	r2, [pc, #36]	; (80120d0 <HAL_RCC_ClockConfig+0x1d0>)
 80120ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80120ae:	4b09      	ldr	r3, [pc, #36]	; (80120d4 <HAL_RCC_ClockConfig+0x1d4>)
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	4618      	mov	r0, r3
 80120b4:	f7fd ffb8 	bl	8010028 <HAL_InitTick>

  return HAL_OK;
 80120b8:	2300      	movs	r3, #0
}
 80120ba:	4618      	mov	r0, r3
 80120bc:	3710      	adds	r7, #16
 80120be:	46bd      	mov	sp, r7
 80120c0:	bd80      	pop	{r7, pc}
 80120c2:	bf00      	nop
 80120c4:	40023c00 	.word	0x40023c00
 80120c8:	40023800 	.word	0x40023800
 80120cc:	0802b7f8 	.word	0x0802b7f8
 80120d0:	20000018 	.word	0x20000018
 80120d4:	2000001c 	.word	0x2000001c

080120d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80120d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80120dc:	b094      	sub	sp, #80	; 0x50
 80120de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80120e0:	2300      	movs	r3, #0
 80120e2:	647b      	str	r3, [r7, #68]	; 0x44
 80120e4:	2300      	movs	r3, #0
 80120e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80120e8:	2300      	movs	r3, #0
 80120ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80120ec:	2300      	movs	r3, #0
 80120ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80120f0:	4b79      	ldr	r3, [pc, #484]	; (80122d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80120f2:	689b      	ldr	r3, [r3, #8]
 80120f4:	f003 030c 	and.w	r3, r3, #12
 80120f8:	2b08      	cmp	r3, #8
 80120fa:	d00d      	beq.n	8012118 <HAL_RCC_GetSysClockFreq+0x40>
 80120fc:	2b08      	cmp	r3, #8
 80120fe:	f200 80e1 	bhi.w	80122c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8012102:	2b00      	cmp	r3, #0
 8012104:	d002      	beq.n	801210c <HAL_RCC_GetSysClockFreq+0x34>
 8012106:	2b04      	cmp	r3, #4
 8012108:	d003      	beq.n	8012112 <HAL_RCC_GetSysClockFreq+0x3a>
 801210a:	e0db      	b.n	80122c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801210c:	4b73      	ldr	r3, [pc, #460]	; (80122dc <HAL_RCC_GetSysClockFreq+0x204>)
 801210e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8012110:	e0db      	b.n	80122ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8012112:	4b72      	ldr	r3, [pc, #456]	; (80122dc <HAL_RCC_GetSysClockFreq+0x204>)
 8012114:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8012116:	e0d8      	b.n	80122ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8012118:	4b6f      	ldr	r3, [pc, #444]	; (80122d8 <HAL_RCC_GetSysClockFreq+0x200>)
 801211a:	685b      	ldr	r3, [r3, #4]
 801211c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012120:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8012122:	4b6d      	ldr	r3, [pc, #436]	; (80122d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8012124:	685b      	ldr	r3, [r3, #4]
 8012126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801212a:	2b00      	cmp	r3, #0
 801212c:	d063      	beq.n	80121f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801212e:	4b6a      	ldr	r3, [pc, #424]	; (80122d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8012130:	685b      	ldr	r3, [r3, #4]
 8012132:	099b      	lsrs	r3, r3, #6
 8012134:	2200      	movs	r2, #0
 8012136:	63bb      	str	r3, [r7, #56]	; 0x38
 8012138:	63fa      	str	r2, [r7, #60]	; 0x3c
 801213a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801213c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012140:	633b      	str	r3, [r7, #48]	; 0x30
 8012142:	2300      	movs	r3, #0
 8012144:	637b      	str	r3, [r7, #52]	; 0x34
 8012146:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 801214a:	4622      	mov	r2, r4
 801214c:	462b      	mov	r3, r5
 801214e:	f04f 0000 	mov.w	r0, #0
 8012152:	f04f 0100 	mov.w	r1, #0
 8012156:	0159      	lsls	r1, r3, #5
 8012158:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801215c:	0150      	lsls	r0, r2, #5
 801215e:	4602      	mov	r2, r0
 8012160:	460b      	mov	r3, r1
 8012162:	4621      	mov	r1, r4
 8012164:	1a51      	subs	r1, r2, r1
 8012166:	6139      	str	r1, [r7, #16]
 8012168:	4629      	mov	r1, r5
 801216a:	eb63 0301 	sbc.w	r3, r3, r1
 801216e:	617b      	str	r3, [r7, #20]
 8012170:	f04f 0200 	mov.w	r2, #0
 8012174:	f04f 0300 	mov.w	r3, #0
 8012178:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801217c:	4659      	mov	r1, fp
 801217e:	018b      	lsls	r3, r1, #6
 8012180:	4651      	mov	r1, sl
 8012182:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8012186:	4651      	mov	r1, sl
 8012188:	018a      	lsls	r2, r1, #6
 801218a:	4651      	mov	r1, sl
 801218c:	ebb2 0801 	subs.w	r8, r2, r1
 8012190:	4659      	mov	r1, fp
 8012192:	eb63 0901 	sbc.w	r9, r3, r1
 8012196:	f04f 0200 	mov.w	r2, #0
 801219a:	f04f 0300 	mov.w	r3, #0
 801219e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80121a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80121a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80121aa:	4690      	mov	r8, r2
 80121ac:	4699      	mov	r9, r3
 80121ae:	4623      	mov	r3, r4
 80121b0:	eb18 0303 	adds.w	r3, r8, r3
 80121b4:	60bb      	str	r3, [r7, #8]
 80121b6:	462b      	mov	r3, r5
 80121b8:	eb49 0303 	adc.w	r3, r9, r3
 80121bc:	60fb      	str	r3, [r7, #12]
 80121be:	f04f 0200 	mov.w	r2, #0
 80121c2:	f04f 0300 	mov.w	r3, #0
 80121c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80121ca:	4629      	mov	r1, r5
 80121cc:	028b      	lsls	r3, r1, #10
 80121ce:	4621      	mov	r1, r4
 80121d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80121d4:	4621      	mov	r1, r4
 80121d6:	028a      	lsls	r2, r1, #10
 80121d8:	4610      	mov	r0, r2
 80121da:	4619      	mov	r1, r3
 80121dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80121de:	2200      	movs	r2, #0
 80121e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80121e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80121e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80121e8:	f7f6 fa9e 	bl	8008728 <__aeabi_uldivmod>
 80121ec:	4602      	mov	r2, r0
 80121ee:	460b      	mov	r3, r1
 80121f0:	4613      	mov	r3, r2
 80121f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80121f4:	e058      	b.n	80122a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80121f6:	4b38      	ldr	r3, [pc, #224]	; (80122d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80121f8:	685b      	ldr	r3, [r3, #4]
 80121fa:	099b      	lsrs	r3, r3, #6
 80121fc:	2200      	movs	r2, #0
 80121fe:	4618      	mov	r0, r3
 8012200:	4611      	mov	r1, r2
 8012202:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8012206:	623b      	str	r3, [r7, #32]
 8012208:	2300      	movs	r3, #0
 801220a:	627b      	str	r3, [r7, #36]	; 0x24
 801220c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8012210:	4642      	mov	r2, r8
 8012212:	464b      	mov	r3, r9
 8012214:	f04f 0000 	mov.w	r0, #0
 8012218:	f04f 0100 	mov.w	r1, #0
 801221c:	0159      	lsls	r1, r3, #5
 801221e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8012222:	0150      	lsls	r0, r2, #5
 8012224:	4602      	mov	r2, r0
 8012226:	460b      	mov	r3, r1
 8012228:	4641      	mov	r1, r8
 801222a:	ebb2 0a01 	subs.w	sl, r2, r1
 801222e:	4649      	mov	r1, r9
 8012230:	eb63 0b01 	sbc.w	fp, r3, r1
 8012234:	f04f 0200 	mov.w	r2, #0
 8012238:	f04f 0300 	mov.w	r3, #0
 801223c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8012240:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8012244:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8012248:	ebb2 040a 	subs.w	r4, r2, sl
 801224c:	eb63 050b 	sbc.w	r5, r3, fp
 8012250:	f04f 0200 	mov.w	r2, #0
 8012254:	f04f 0300 	mov.w	r3, #0
 8012258:	00eb      	lsls	r3, r5, #3
 801225a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801225e:	00e2      	lsls	r2, r4, #3
 8012260:	4614      	mov	r4, r2
 8012262:	461d      	mov	r5, r3
 8012264:	4643      	mov	r3, r8
 8012266:	18e3      	adds	r3, r4, r3
 8012268:	603b      	str	r3, [r7, #0]
 801226a:	464b      	mov	r3, r9
 801226c:	eb45 0303 	adc.w	r3, r5, r3
 8012270:	607b      	str	r3, [r7, #4]
 8012272:	f04f 0200 	mov.w	r2, #0
 8012276:	f04f 0300 	mov.w	r3, #0
 801227a:	e9d7 4500 	ldrd	r4, r5, [r7]
 801227e:	4629      	mov	r1, r5
 8012280:	028b      	lsls	r3, r1, #10
 8012282:	4621      	mov	r1, r4
 8012284:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8012288:	4621      	mov	r1, r4
 801228a:	028a      	lsls	r2, r1, #10
 801228c:	4610      	mov	r0, r2
 801228e:	4619      	mov	r1, r3
 8012290:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012292:	2200      	movs	r2, #0
 8012294:	61bb      	str	r3, [r7, #24]
 8012296:	61fa      	str	r2, [r7, #28]
 8012298:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801229c:	f7f6 fa44 	bl	8008728 <__aeabi_uldivmod>
 80122a0:	4602      	mov	r2, r0
 80122a2:	460b      	mov	r3, r1
 80122a4:	4613      	mov	r3, r2
 80122a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80122a8:	4b0b      	ldr	r3, [pc, #44]	; (80122d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80122aa:	685b      	ldr	r3, [r3, #4]
 80122ac:	0c1b      	lsrs	r3, r3, #16
 80122ae:	f003 0303 	and.w	r3, r3, #3
 80122b2:	3301      	adds	r3, #1
 80122b4:	005b      	lsls	r3, r3, #1
 80122b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80122b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80122ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80122bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80122c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80122c2:	e002      	b.n	80122ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80122c4:	4b05      	ldr	r3, [pc, #20]	; (80122dc <HAL_RCC_GetSysClockFreq+0x204>)
 80122c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80122c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80122ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80122cc:	4618      	mov	r0, r3
 80122ce:	3750      	adds	r7, #80	; 0x50
 80122d0:	46bd      	mov	sp, r7
 80122d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80122d6:	bf00      	nop
 80122d8:	40023800 	.word	0x40023800
 80122dc:	00f42400 	.word	0x00f42400

080122e0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80122e0:	b480      	push	{r7}
 80122e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80122e4:	4b03      	ldr	r3, [pc, #12]	; (80122f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80122e6:	681b      	ldr	r3, [r3, #0]
}
 80122e8:	4618      	mov	r0, r3
 80122ea:	46bd      	mov	sp, r7
 80122ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f0:	4770      	bx	lr
 80122f2:	bf00      	nop
 80122f4:	20000018 	.word	0x20000018

080122f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80122f8:	b580      	push	{r7, lr}
 80122fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80122fc:	f7ff fff0 	bl	80122e0 <HAL_RCC_GetHCLKFreq>
 8012300:	4602      	mov	r2, r0
 8012302:	4b05      	ldr	r3, [pc, #20]	; (8012318 <HAL_RCC_GetPCLK1Freq+0x20>)
 8012304:	689b      	ldr	r3, [r3, #8]
 8012306:	0a9b      	lsrs	r3, r3, #10
 8012308:	f003 0307 	and.w	r3, r3, #7
 801230c:	4903      	ldr	r1, [pc, #12]	; (801231c <HAL_RCC_GetPCLK1Freq+0x24>)
 801230e:	5ccb      	ldrb	r3, [r1, r3]
 8012310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8012314:	4618      	mov	r0, r3
 8012316:	bd80      	pop	{r7, pc}
 8012318:	40023800 	.word	0x40023800
 801231c:	0802b808 	.word	0x0802b808

08012320 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8012320:	b580      	push	{r7, lr}
 8012322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8012324:	f7ff ffdc 	bl	80122e0 <HAL_RCC_GetHCLKFreq>
 8012328:	4602      	mov	r2, r0
 801232a:	4b05      	ldr	r3, [pc, #20]	; (8012340 <HAL_RCC_GetPCLK2Freq+0x20>)
 801232c:	689b      	ldr	r3, [r3, #8]
 801232e:	0b5b      	lsrs	r3, r3, #13
 8012330:	f003 0307 	and.w	r3, r3, #7
 8012334:	4903      	ldr	r1, [pc, #12]	; (8012344 <HAL_RCC_GetPCLK2Freq+0x24>)
 8012336:	5ccb      	ldrb	r3, [r1, r3]
 8012338:	fa22 f303 	lsr.w	r3, r2, r3
}
 801233c:	4618      	mov	r0, r3
 801233e:	bd80      	pop	{r7, pc}
 8012340:	40023800 	.word	0x40023800
 8012344:	0802b808 	.word	0x0802b808

08012348 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8012348:	b580      	push	{r7, lr}
 801234a:	b088      	sub	sp, #32
 801234c:	af00      	add	r7, sp, #0
 801234e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8012350:	2300      	movs	r3, #0
 8012352:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8012354:	2300      	movs	r3, #0
 8012356:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8012358:	2300      	movs	r3, #0
 801235a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 801235c:	2300      	movs	r3, #0
 801235e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8012360:	2300      	movs	r3, #0
 8012362:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	f003 0301 	and.w	r3, r3, #1
 801236c:	2b00      	cmp	r3, #0
 801236e:	d012      	beq.n	8012396 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8012370:	4b69      	ldr	r3, [pc, #420]	; (8012518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8012372:	689b      	ldr	r3, [r3, #8]
 8012374:	4a68      	ldr	r2, [pc, #416]	; (8012518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8012376:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801237a:	6093      	str	r3, [r2, #8]
 801237c:	4b66      	ldr	r3, [pc, #408]	; (8012518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801237e:	689a      	ldr	r2, [r3, #8]
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012384:	4964      	ldr	r1, [pc, #400]	; (8012518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8012386:	4313      	orrs	r3, r2
 8012388:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801238e:	2b00      	cmp	r3, #0
 8012390:	d101      	bne.n	8012396 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8012392:	2301      	movs	r3, #1
 8012394:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d017      	beq.n	80123d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80123a2:	4b5d      	ldr	r3, [pc, #372]	; (8012518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80123a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80123a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80123b0:	4959      	ldr	r1, [pc, #356]	; (8012518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80123b2:	4313      	orrs	r3, r2
 80123b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80123bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80123c0:	d101      	bne.n	80123c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80123c2:	2301      	movs	r3, #1
 80123c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d101      	bne.n	80123d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80123ce:	2301      	movs	r3, #1
 80123d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d017      	beq.n	801240e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80123de:	4b4e      	ldr	r3, [pc, #312]	; (8012518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80123e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80123e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80123ec:	494a      	ldr	r1, [pc, #296]	; (8012518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80123ee:	4313      	orrs	r3, r2
 80123f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80123f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80123fc:	d101      	bne.n	8012402 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80123fe:	2301      	movs	r3, #1
 8012400:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012406:	2b00      	cmp	r3, #0
 8012408:	d101      	bne.n	801240e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 801240a:	2301      	movs	r3, #1
 801240c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012416:	2b00      	cmp	r3, #0
 8012418:	d001      	beq.n	801241e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 801241a:	2301      	movs	r3, #1
 801241c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	f003 0320 	and.w	r3, r3, #32
 8012426:	2b00      	cmp	r3, #0
 8012428:	f000 808b 	beq.w	8012542 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 801242c:	4b3a      	ldr	r3, [pc, #232]	; (8012518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801242e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012430:	4a39      	ldr	r2, [pc, #228]	; (8012518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8012432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012436:	6413      	str	r3, [r2, #64]	; 0x40
 8012438:	4b37      	ldr	r3, [pc, #220]	; (8012518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801243a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801243c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012440:	60bb      	str	r3, [r7, #8]
 8012442:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8012444:	4b35      	ldr	r3, [pc, #212]	; (801251c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	4a34      	ldr	r2, [pc, #208]	; (801251c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801244a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801244e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012450:	f7fd fe2e 	bl	80100b0 <HAL_GetTick>
 8012454:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8012456:	e008      	b.n	801246a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012458:	f7fd fe2a 	bl	80100b0 <HAL_GetTick>
 801245c:	4602      	mov	r2, r0
 801245e:	697b      	ldr	r3, [r7, #20]
 8012460:	1ad3      	subs	r3, r2, r3
 8012462:	2b64      	cmp	r3, #100	; 0x64
 8012464:	d901      	bls.n	801246a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8012466:	2303      	movs	r3, #3
 8012468:	e38f      	b.n	8012b8a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 801246a:	4b2c      	ldr	r3, [pc, #176]	; (801251c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012472:	2b00      	cmp	r3, #0
 8012474:	d0f0      	beq.n	8012458 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8012476:	4b28      	ldr	r3, [pc, #160]	; (8012518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8012478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801247a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801247e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8012480:	693b      	ldr	r3, [r7, #16]
 8012482:	2b00      	cmp	r3, #0
 8012484:	d035      	beq.n	80124f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801248a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801248e:	693a      	ldr	r2, [r7, #16]
 8012490:	429a      	cmp	r2, r3
 8012492:	d02e      	beq.n	80124f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8012494:	4b20      	ldr	r3, [pc, #128]	; (8012518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8012496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801249c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801249e:	4b1e      	ldr	r3, [pc, #120]	; (8012518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80124a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124a2:	4a1d      	ldr	r2, [pc, #116]	; (8012518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80124a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80124a8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80124aa:	4b1b      	ldr	r3, [pc, #108]	; (8012518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80124ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124ae:	4a1a      	ldr	r2, [pc, #104]	; (8012518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80124b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80124b4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80124b6:	4a18      	ldr	r2, [pc, #96]	; (8012518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80124b8:	693b      	ldr	r3, [r7, #16]
 80124ba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80124bc:	4b16      	ldr	r3, [pc, #88]	; (8012518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80124be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124c0:	f003 0301 	and.w	r3, r3, #1
 80124c4:	2b01      	cmp	r3, #1
 80124c6:	d114      	bne.n	80124f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80124c8:	f7fd fdf2 	bl	80100b0 <HAL_GetTick>
 80124cc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80124ce:	e00a      	b.n	80124e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80124d0:	f7fd fdee 	bl	80100b0 <HAL_GetTick>
 80124d4:	4602      	mov	r2, r0
 80124d6:	697b      	ldr	r3, [r7, #20]
 80124d8:	1ad3      	subs	r3, r2, r3
 80124da:	f241 3288 	movw	r2, #5000	; 0x1388
 80124de:	4293      	cmp	r3, r2
 80124e0:	d901      	bls.n	80124e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80124e2:	2303      	movs	r3, #3
 80124e4:	e351      	b.n	8012b8a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80124e6:	4b0c      	ldr	r3, [pc, #48]	; (8012518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80124e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124ea:	f003 0302 	and.w	r3, r3, #2
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d0ee      	beq.n	80124d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80124f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80124fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80124fe:	d111      	bne.n	8012524 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8012500:	4b05      	ldr	r3, [pc, #20]	; (8012518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8012502:	689b      	ldr	r3, [r3, #8]
 8012504:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801250c:	4b04      	ldr	r3, [pc, #16]	; (8012520 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 801250e:	400b      	ands	r3, r1
 8012510:	4901      	ldr	r1, [pc, #4]	; (8012518 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8012512:	4313      	orrs	r3, r2
 8012514:	608b      	str	r3, [r1, #8]
 8012516:	e00b      	b.n	8012530 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8012518:	40023800 	.word	0x40023800
 801251c:	40007000 	.word	0x40007000
 8012520:	0ffffcff 	.word	0x0ffffcff
 8012524:	4bac      	ldr	r3, [pc, #688]	; (80127d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8012526:	689b      	ldr	r3, [r3, #8]
 8012528:	4aab      	ldr	r2, [pc, #684]	; (80127d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801252a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 801252e:	6093      	str	r3, [r2, #8]
 8012530:	4ba9      	ldr	r3, [pc, #676]	; (80127d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8012532:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012538:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801253c:	49a6      	ldr	r1, [pc, #664]	; (80127d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801253e:	4313      	orrs	r3, r2
 8012540:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	f003 0310 	and.w	r3, r3, #16
 801254a:	2b00      	cmp	r3, #0
 801254c:	d010      	beq.n	8012570 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801254e:	4ba2      	ldr	r3, [pc, #648]	; (80127d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8012550:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012554:	4aa0      	ldr	r2, [pc, #640]	; (80127d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8012556:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801255a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 801255e:	4b9e      	ldr	r3, [pc, #632]	; (80127d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8012560:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012568:	499b      	ldr	r1, [pc, #620]	; (80127d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801256a:	4313      	orrs	r3, r2
 801256c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012578:	2b00      	cmp	r3, #0
 801257a:	d00a      	beq.n	8012592 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801257c:	4b96      	ldr	r3, [pc, #600]	; (80127d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801257e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012582:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801258a:	4993      	ldr	r1, [pc, #588]	; (80127d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801258c:	4313      	orrs	r3, r2
 801258e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801259a:	2b00      	cmp	r3, #0
 801259c:	d00a      	beq.n	80125b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801259e:	4b8e      	ldr	r3, [pc, #568]	; (80127d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80125a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80125a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80125ac:	498a      	ldr	r1, [pc, #552]	; (80127d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80125ae:	4313      	orrs	r3, r2
 80125b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d00a      	beq.n	80125d6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80125c0:	4b85      	ldr	r3, [pc, #532]	; (80127d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80125c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80125c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125ce:	4982      	ldr	r1, [pc, #520]	; (80127d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80125d0:	4313      	orrs	r3, r2
 80125d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d00a      	beq.n	80125f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80125e2:	4b7d      	ldr	r3, [pc, #500]	; (80127d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80125e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80125e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80125f0:	4979      	ldr	r1, [pc, #484]	; (80127d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80125f2:	4313      	orrs	r3, r2
 80125f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012600:	2b00      	cmp	r3, #0
 8012602:	d00a      	beq.n	801261a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8012604:	4b74      	ldr	r3, [pc, #464]	; (80127d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8012606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801260a:	f023 0203 	bic.w	r2, r3, #3
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012612:	4971      	ldr	r1, [pc, #452]	; (80127d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8012614:	4313      	orrs	r3, r2
 8012616:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012622:	2b00      	cmp	r3, #0
 8012624:	d00a      	beq.n	801263c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8012626:	4b6c      	ldr	r3, [pc, #432]	; (80127d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8012628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801262c:	f023 020c 	bic.w	r2, r3, #12
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012634:	4968      	ldr	r1, [pc, #416]	; (80127d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8012636:	4313      	orrs	r3, r2
 8012638:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012644:	2b00      	cmp	r3, #0
 8012646:	d00a      	beq.n	801265e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8012648:	4b63      	ldr	r3, [pc, #396]	; (80127d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801264a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801264e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012656:	4960      	ldr	r1, [pc, #384]	; (80127d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8012658:	4313      	orrs	r3, r2
 801265a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012666:	2b00      	cmp	r3, #0
 8012668:	d00a      	beq.n	8012680 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 801266a:	4b5b      	ldr	r3, [pc, #364]	; (80127d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801266c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012670:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012678:	4957      	ldr	r1, [pc, #348]	; (80127d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801267a:	4313      	orrs	r3, r2
 801267c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012688:	2b00      	cmp	r3, #0
 801268a:	d00a      	beq.n	80126a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 801268c:	4b52      	ldr	r3, [pc, #328]	; (80127d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801268e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012692:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801269a:	494f      	ldr	r1, [pc, #316]	; (80127d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801269c:	4313      	orrs	r3, r2
 801269e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d00a      	beq.n	80126c4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80126ae:	4b4a      	ldr	r3, [pc, #296]	; (80127d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80126b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80126b4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80126bc:	4946      	ldr	r1, [pc, #280]	; (80127d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80126be:	4313      	orrs	r3, r2
 80126c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d00a      	beq.n	80126e6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80126d0:	4b41      	ldr	r3, [pc, #260]	; (80127d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80126d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80126d6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80126de:	493e      	ldr	r1, [pc, #248]	; (80127d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80126e0:	4313      	orrs	r3, r2
 80126e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d00a      	beq.n	8012708 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80126f2:	4b39      	ldr	r3, [pc, #228]	; (80127d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80126f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80126f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012700:	4935      	ldr	r1, [pc, #212]	; (80127d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8012702:	4313      	orrs	r3, r2
 8012704:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012710:	2b00      	cmp	r3, #0
 8012712:	d00a      	beq.n	801272a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8012714:	4b30      	ldr	r3, [pc, #192]	; (80127d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8012716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801271a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012722:	492d      	ldr	r1, [pc, #180]	; (80127d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8012724:	4313      	orrs	r3, r2
 8012726:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012732:	2b00      	cmp	r3, #0
 8012734:	d011      	beq.n	801275a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8012736:	4b28      	ldr	r3, [pc, #160]	; (80127d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8012738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801273c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012744:	4924      	ldr	r1, [pc, #144]	; (80127d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8012746:	4313      	orrs	r3, r2
 8012748:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012750:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8012754:	d101      	bne.n	801275a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8012756:	2301      	movs	r3, #1
 8012758:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	f003 0308 	and.w	r3, r3, #8
 8012762:	2b00      	cmp	r3, #0
 8012764:	d001      	beq.n	801276a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8012766:	2301      	movs	r3, #1
 8012768:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	681b      	ldr	r3, [r3, #0]
 801276e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012772:	2b00      	cmp	r3, #0
 8012774:	d00a      	beq.n	801278c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8012776:	4b18      	ldr	r3, [pc, #96]	; (80127d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8012778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801277c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012784:	4914      	ldr	r1, [pc, #80]	; (80127d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8012786:	4313      	orrs	r3, r2
 8012788:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012794:	2b00      	cmp	r3, #0
 8012796:	d00b      	beq.n	80127b0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8012798:	4b0f      	ldr	r3, [pc, #60]	; (80127d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801279a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801279e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80127a8:	490b      	ldr	r1, [pc, #44]	; (80127d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80127aa:	4313      	orrs	r3, r2
 80127ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d00f      	beq.n	80127dc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80127bc:	4b06      	ldr	r3, [pc, #24]	; (80127d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80127be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80127c2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80127cc:	4902      	ldr	r1, [pc, #8]	; (80127d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80127ce:	4313      	orrs	r3, r2
 80127d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80127d4:	e002      	b.n	80127dc <HAL_RCCEx_PeriphCLKConfig+0x494>
 80127d6:	bf00      	nop
 80127d8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d00b      	beq.n	8012800 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80127e8:	4b8a      	ldr	r3, [pc, #552]	; (8012a14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80127ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80127ee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80127f8:	4986      	ldr	r1, [pc, #536]	; (8012a14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80127fa:	4313      	orrs	r3, r2
 80127fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012808:	2b00      	cmp	r3, #0
 801280a:	d00b      	beq.n	8012824 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 801280c:	4b81      	ldr	r3, [pc, #516]	; (8012a14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801280e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012812:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801281c:	497d      	ldr	r1, [pc, #500]	; (8012a14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801281e:	4313      	orrs	r3, r2
 8012820:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8012824:	69fb      	ldr	r3, [r7, #28]
 8012826:	2b01      	cmp	r3, #1
 8012828:	d006      	beq.n	8012838 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012832:	2b00      	cmp	r3, #0
 8012834:	f000 80d6 	beq.w	80129e4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8012838:	4b76      	ldr	r3, [pc, #472]	; (8012a14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	4a75      	ldr	r2, [pc, #468]	; (8012a14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801283e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012842:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012844:	f7fd fc34 	bl	80100b0 <HAL_GetTick>
 8012848:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801284a:	e008      	b.n	801285e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 801284c:	f7fd fc30 	bl	80100b0 <HAL_GetTick>
 8012850:	4602      	mov	r2, r0
 8012852:	697b      	ldr	r3, [r7, #20]
 8012854:	1ad3      	subs	r3, r2, r3
 8012856:	2b64      	cmp	r3, #100	; 0x64
 8012858:	d901      	bls.n	801285e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801285a:	2303      	movs	r3, #3
 801285c:	e195      	b.n	8012b8a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801285e:	4b6d      	ldr	r3, [pc, #436]	; (8012a14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012866:	2b00      	cmp	r3, #0
 8012868:	d1f0      	bne.n	801284c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	f003 0301 	and.w	r3, r3, #1
 8012872:	2b00      	cmp	r3, #0
 8012874:	d021      	beq.n	80128ba <HAL_RCCEx_PeriphCLKConfig+0x572>
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801287a:	2b00      	cmp	r3, #0
 801287c:	d11d      	bne.n	80128ba <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 801287e:	4b65      	ldr	r3, [pc, #404]	; (8012a14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8012880:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012884:	0c1b      	lsrs	r3, r3, #16
 8012886:	f003 0303 	and.w	r3, r3, #3
 801288a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 801288c:	4b61      	ldr	r3, [pc, #388]	; (8012a14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801288e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012892:	0e1b      	lsrs	r3, r3, #24
 8012894:	f003 030f 	and.w	r3, r3, #15
 8012898:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	685b      	ldr	r3, [r3, #4]
 801289e:	019a      	lsls	r2, r3, #6
 80128a0:	693b      	ldr	r3, [r7, #16]
 80128a2:	041b      	lsls	r3, r3, #16
 80128a4:	431a      	orrs	r2, r3
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	061b      	lsls	r3, r3, #24
 80128aa:	431a      	orrs	r2, r3
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	689b      	ldr	r3, [r3, #8]
 80128b0:	071b      	lsls	r3, r3, #28
 80128b2:	4958      	ldr	r1, [pc, #352]	; (8012a14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80128b4:	4313      	orrs	r3, r2
 80128b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d004      	beq.n	80128d0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80128ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80128ce:	d00a      	beq.n	80128e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d02e      	beq.n	801293a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80128e4:	d129      	bne.n	801293a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80128e6:	4b4b      	ldr	r3, [pc, #300]	; (8012a14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80128e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80128ec:	0c1b      	lsrs	r3, r3, #16
 80128ee:	f003 0303 	and.w	r3, r3, #3
 80128f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80128f4:	4b47      	ldr	r3, [pc, #284]	; (8012a14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80128f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80128fa:	0f1b      	lsrs	r3, r3, #28
 80128fc:	f003 0307 	and.w	r3, r3, #7
 8012900:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	685b      	ldr	r3, [r3, #4]
 8012906:	019a      	lsls	r2, r3, #6
 8012908:	693b      	ldr	r3, [r7, #16]
 801290a:	041b      	lsls	r3, r3, #16
 801290c:	431a      	orrs	r2, r3
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	68db      	ldr	r3, [r3, #12]
 8012912:	061b      	lsls	r3, r3, #24
 8012914:	431a      	orrs	r2, r3
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	071b      	lsls	r3, r3, #28
 801291a:	493e      	ldr	r1, [pc, #248]	; (8012a14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801291c:	4313      	orrs	r3, r2
 801291e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8012922:	4b3c      	ldr	r3, [pc, #240]	; (8012a14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8012924:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012928:	f023 021f 	bic.w	r2, r3, #31
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012930:	3b01      	subs	r3, #1
 8012932:	4938      	ldr	r1, [pc, #224]	; (8012a14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8012934:	4313      	orrs	r3, r2
 8012936:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012942:	2b00      	cmp	r3, #0
 8012944:	d01d      	beq.n	8012982 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8012946:	4b33      	ldr	r3, [pc, #204]	; (8012a14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8012948:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801294c:	0e1b      	lsrs	r3, r3, #24
 801294e:	f003 030f 	and.w	r3, r3, #15
 8012952:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8012954:	4b2f      	ldr	r3, [pc, #188]	; (8012a14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8012956:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801295a:	0f1b      	lsrs	r3, r3, #28
 801295c:	f003 0307 	and.w	r3, r3, #7
 8012960:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	685b      	ldr	r3, [r3, #4]
 8012966:	019a      	lsls	r2, r3, #6
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	691b      	ldr	r3, [r3, #16]
 801296c:	041b      	lsls	r3, r3, #16
 801296e:	431a      	orrs	r2, r3
 8012970:	693b      	ldr	r3, [r7, #16]
 8012972:	061b      	lsls	r3, r3, #24
 8012974:	431a      	orrs	r2, r3
 8012976:	68fb      	ldr	r3, [r7, #12]
 8012978:	071b      	lsls	r3, r3, #28
 801297a:	4926      	ldr	r1, [pc, #152]	; (8012a14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801297c:	4313      	orrs	r3, r2
 801297e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801298a:	2b00      	cmp	r3, #0
 801298c:	d011      	beq.n	80129b2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	685b      	ldr	r3, [r3, #4]
 8012992:	019a      	lsls	r2, r3, #6
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	691b      	ldr	r3, [r3, #16]
 8012998:	041b      	lsls	r3, r3, #16
 801299a:	431a      	orrs	r2, r3
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	68db      	ldr	r3, [r3, #12]
 80129a0:	061b      	lsls	r3, r3, #24
 80129a2:	431a      	orrs	r2, r3
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	689b      	ldr	r3, [r3, #8]
 80129a8:	071b      	lsls	r3, r3, #28
 80129aa:	491a      	ldr	r1, [pc, #104]	; (8012a14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80129ac:	4313      	orrs	r3, r2
 80129ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80129b2:	4b18      	ldr	r3, [pc, #96]	; (8012a14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80129b4:	681b      	ldr	r3, [r3, #0]
 80129b6:	4a17      	ldr	r2, [pc, #92]	; (8012a14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80129b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80129bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80129be:	f7fd fb77 	bl	80100b0 <HAL_GetTick>
 80129c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80129c4:	e008      	b.n	80129d8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80129c6:	f7fd fb73 	bl	80100b0 <HAL_GetTick>
 80129ca:	4602      	mov	r2, r0
 80129cc:	697b      	ldr	r3, [r7, #20]
 80129ce:	1ad3      	subs	r3, r2, r3
 80129d0:	2b64      	cmp	r3, #100	; 0x64
 80129d2:	d901      	bls.n	80129d8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80129d4:	2303      	movs	r3, #3
 80129d6:	e0d8      	b.n	8012b8a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80129d8:	4b0e      	ldr	r3, [pc, #56]	; (8012a14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d0f0      	beq.n	80129c6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80129e4:	69bb      	ldr	r3, [r7, #24]
 80129e6:	2b01      	cmp	r3, #1
 80129e8:	f040 80ce 	bne.w	8012b88 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80129ec:	4b09      	ldr	r3, [pc, #36]	; (8012a14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	4a08      	ldr	r2, [pc, #32]	; (8012a14 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80129f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80129f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80129f8:	f7fd fb5a 	bl	80100b0 <HAL_GetTick>
 80129fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80129fe:	e00b      	b.n	8012a18 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8012a00:	f7fd fb56 	bl	80100b0 <HAL_GetTick>
 8012a04:	4602      	mov	r2, r0
 8012a06:	697b      	ldr	r3, [r7, #20]
 8012a08:	1ad3      	subs	r3, r2, r3
 8012a0a:	2b64      	cmp	r3, #100	; 0x64
 8012a0c:	d904      	bls.n	8012a18 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8012a0e:	2303      	movs	r3, #3
 8012a10:	e0bb      	b.n	8012b8a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8012a12:	bf00      	nop
 8012a14:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8012a18:	4b5e      	ldr	r3, [pc, #376]	; (8012b94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012a20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012a24:	d0ec      	beq.n	8012a00 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	681b      	ldr	r3, [r3, #0]
 8012a2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d003      	beq.n	8012a3a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d009      	beq.n	8012a4e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d02e      	beq.n	8012aa4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d12a      	bne.n	8012aa4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8012a4e:	4b51      	ldr	r3, [pc, #324]	; (8012b94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8012a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012a54:	0c1b      	lsrs	r3, r3, #16
 8012a56:	f003 0303 	and.w	r3, r3, #3
 8012a5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8012a5c:	4b4d      	ldr	r3, [pc, #308]	; (8012b94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8012a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012a62:	0f1b      	lsrs	r3, r3, #28
 8012a64:	f003 0307 	and.w	r3, r3, #7
 8012a68:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	695b      	ldr	r3, [r3, #20]
 8012a6e:	019a      	lsls	r2, r3, #6
 8012a70:	693b      	ldr	r3, [r7, #16]
 8012a72:	041b      	lsls	r3, r3, #16
 8012a74:	431a      	orrs	r2, r3
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	699b      	ldr	r3, [r3, #24]
 8012a7a:	061b      	lsls	r3, r3, #24
 8012a7c:	431a      	orrs	r2, r3
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	071b      	lsls	r3, r3, #28
 8012a82:	4944      	ldr	r1, [pc, #272]	; (8012b94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8012a84:	4313      	orrs	r3, r2
 8012a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8012a8a:	4b42      	ldr	r3, [pc, #264]	; (8012b94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8012a8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012a90:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a98:	3b01      	subs	r3, #1
 8012a9a:	021b      	lsls	r3, r3, #8
 8012a9c:	493d      	ldr	r1, [pc, #244]	; (8012b94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8012a9e:	4313      	orrs	r3, r2
 8012aa0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d022      	beq.n	8012af6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012ab4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8012ab8:	d11d      	bne.n	8012af6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8012aba:	4b36      	ldr	r3, [pc, #216]	; (8012b94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8012abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012ac0:	0e1b      	lsrs	r3, r3, #24
 8012ac2:	f003 030f 	and.w	r3, r3, #15
 8012ac6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8012ac8:	4b32      	ldr	r3, [pc, #200]	; (8012b94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8012aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012ace:	0f1b      	lsrs	r3, r3, #28
 8012ad0:	f003 0307 	and.w	r3, r3, #7
 8012ad4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	695b      	ldr	r3, [r3, #20]
 8012ada:	019a      	lsls	r2, r3, #6
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	6a1b      	ldr	r3, [r3, #32]
 8012ae0:	041b      	lsls	r3, r3, #16
 8012ae2:	431a      	orrs	r2, r3
 8012ae4:	693b      	ldr	r3, [r7, #16]
 8012ae6:	061b      	lsls	r3, r3, #24
 8012ae8:	431a      	orrs	r2, r3
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	071b      	lsls	r3, r3, #28
 8012aee:	4929      	ldr	r1, [pc, #164]	; (8012b94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8012af0:	4313      	orrs	r3, r2
 8012af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	f003 0308 	and.w	r3, r3, #8
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d028      	beq.n	8012b54 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8012b02:	4b24      	ldr	r3, [pc, #144]	; (8012b94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8012b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012b08:	0e1b      	lsrs	r3, r3, #24
 8012b0a:	f003 030f 	and.w	r3, r3, #15
 8012b0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8012b10:	4b20      	ldr	r3, [pc, #128]	; (8012b94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8012b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012b16:	0c1b      	lsrs	r3, r3, #16
 8012b18:	f003 0303 	and.w	r3, r3, #3
 8012b1c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	695b      	ldr	r3, [r3, #20]
 8012b22:	019a      	lsls	r2, r3, #6
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	041b      	lsls	r3, r3, #16
 8012b28:	431a      	orrs	r2, r3
 8012b2a:	693b      	ldr	r3, [r7, #16]
 8012b2c:	061b      	lsls	r3, r3, #24
 8012b2e:	431a      	orrs	r2, r3
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	69db      	ldr	r3, [r3, #28]
 8012b34:	071b      	lsls	r3, r3, #28
 8012b36:	4917      	ldr	r1, [pc, #92]	; (8012b94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8012b38:	4313      	orrs	r3, r2
 8012b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8012b3e:	4b15      	ldr	r3, [pc, #84]	; (8012b94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8012b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012b44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b4c:	4911      	ldr	r1, [pc, #68]	; (8012b94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8012b4e:	4313      	orrs	r3, r2
 8012b50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8012b54:	4b0f      	ldr	r3, [pc, #60]	; (8012b94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	4a0e      	ldr	r2, [pc, #56]	; (8012b94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8012b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012b5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012b60:	f7fd faa6 	bl	80100b0 <HAL_GetTick>
 8012b64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8012b66:	e008      	b.n	8012b7a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8012b68:	f7fd faa2 	bl	80100b0 <HAL_GetTick>
 8012b6c:	4602      	mov	r2, r0
 8012b6e:	697b      	ldr	r3, [r7, #20]
 8012b70:	1ad3      	subs	r3, r2, r3
 8012b72:	2b64      	cmp	r3, #100	; 0x64
 8012b74:	d901      	bls.n	8012b7a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8012b76:	2303      	movs	r3, #3
 8012b78:	e007      	b.n	8012b8a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8012b7a:	4b06      	ldr	r3, [pc, #24]	; (8012b94 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012b82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012b86:	d1ef      	bne.n	8012b68 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8012b88:	2300      	movs	r3, #0
}
 8012b8a:	4618      	mov	r0, r3
 8012b8c:	3720      	adds	r7, #32
 8012b8e:	46bd      	mov	sp, r7
 8012b90:	bd80      	pop	{r7, pc}
 8012b92:	bf00      	nop
 8012b94:	40023800 	.word	0x40023800

08012b98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8012b98:	b580      	push	{r7, lr}
 8012b9a:	b084      	sub	sp, #16
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d101      	bne.n	8012baa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8012ba6:	2301      	movs	r3, #1
 8012ba8:	e09d      	b.n	8012ce6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d108      	bne.n	8012bc4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	685b      	ldr	r3, [r3, #4]
 8012bb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012bba:	d009      	beq.n	8012bd0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	2200      	movs	r2, #0
 8012bc0:	61da      	str	r2, [r3, #28]
 8012bc2:	e005      	b.n	8012bd0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	2200      	movs	r2, #0
 8012bc8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	2200      	movs	r2, #0
 8012bce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	2200      	movs	r2, #0
 8012bd4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8012bdc:	b2db      	uxtb	r3, r3
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d106      	bne.n	8012bf0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	2200      	movs	r2, #0
 8012be6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8012bea:	6878      	ldr	r0, [r7, #4]
 8012bec:	f7fc ff7e 	bl	800faec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	2202      	movs	r2, #2
 8012bf4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	681a      	ldr	r2, [r3, #0]
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012c06:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	68db      	ldr	r3, [r3, #12]
 8012c0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8012c10:	d902      	bls.n	8012c18 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8012c12:	2300      	movs	r3, #0
 8012c14:	60fb      	str	r3, [r7, #12]
 8012c16:	e002      	b.n	8012c1e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8012c18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012c1c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	68db      	ldr	r3, [r3, #12]
 8012c22:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8012c26:	d007      	beq.n	8012c38 <HAL_SPI_Init+0xa0>
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	68db      	ldr	r3, [r3, #12]
 8012c2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8012c30:	d002      	beq.n	8012c38 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	2200      	movs	r2, #0
 8012c36:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	685b      	ldr	r3, [r3, #4]
 8012c3c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	689b      	ldr	r3, [r3, #8]
 8012c44:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8012c48:	431a      	orrs	r2, r3
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	691b      	ldr	r3, [r3, #16]
 8012c4e:	f003 0302 	and.w	r3, r3, #2
 8012c52:	431a      	orrs	r2, r3
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	695b      	ldr	r3, [r3, #20]
 8012c58:	f003 0301 	and.w	r3, r3, #1
 8012c5c:	431a      	orrs	r2, r3
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	699b      	ldr	r3, [r3, #24]
 8012c62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012c66:	431a      	orrs	r2, r3
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	69db      	ldr	r3, [r3, #28]
 8012c6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012c70:	431a      	orrs	r2, r3
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	6a1b      	ldr	r3, [r3, #32]
 8012c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012c7a:	ea42 0103 	orr.w	r1, r2, r3
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c82:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	430a      	orrs	r2, r1
 8012c8c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	699b      	ldr	r3, [r3, #24]
 8012c92:	0c1b      	lsrs	r3, r3, #16
 8012c94:	f003 0204 	and.w	r2, r3, #4
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c9c:	f003 0310 	and.w	r3, r3, #16
 8012ca0:	431a      	orrs	r2, r3
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ca6:	f003 0308 	and.w	r3, r3, #8
 8012caa:	431a      	orrs	r2, r3
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	68db      	ldr	r3, [r3, #12]
 8012cb0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8012cb4:	ea42 0103 	orr.w	r1, r2, r3
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	430a      	orrs	r2, r1
 8012cc4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	69da      	ldr	r2, [r3, #28]
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012cd4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	2200      	movs	r2, #0
 8012cda:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	2201      	movs	r2, #1
 8012ce0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8012ce4:	2300      	movs	r3, #0
}
 8012ce6:	4618      	mov	r0, r3
 8012ce8:	3710      	adds	r7, #16
 8012cea:	46bd      	mov	sp, r7
 8012cec:	bd80      	pop	{r7, pc}

08012cee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012cee:	b580      	push	{r7, lr}
 8012cf0:	b088      	sub	sp, #32
 8012cf2:	af00      	add	r7, sp, #0
 8012cf4:	60f8      	str	r0, [r7, #12]
 8012cf6:	60b9      	str	r1, [r7, #8]
 8012cf8:	603b      	str	r3, [r7, #0]
 8012cfa:	4613      	mov	r3, r2
 8012cfc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012cfe:	2300      	movs	r3, #0
 8012d00:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8012d02:	68fb      	ldr	r3, [r7, #12]
 8012d04:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8012d08:	2b01      	cmp	r3, #1
 8012d0a:	d101      	bne.n	8012d10 <HAL_SPI_Transmit+0x22>
 8012d0c:	2302      	movs	r3, #2
 8012d0e:	e158      	b.n	8012fc2 <HAL_SPI_Transmit+0x2d4>
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	2201      	movs	r2, #1
 8012d14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8012d18:	f7fd f9ca 	bl	80100b0 <HAL_GetTick>
 8012d1c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8012d1e:	88fb      	ldrh	r3, [r7, #6]
 8012d20:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8012d28:	b2db      	uxtb	r3, r3
 8012d2a:	2b01      	cmp	r3, #1
 8012d2c:	d002      	beq.n	8012d34 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8012d2e:	2302      	movs	r3, #2
 8012d30:	77fb      	strb	r3, [r7, #31]
    goto error;
 8012d32:	e13d      	b.n	8012fb0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8012d34:	68bb      	ldr	r3, [r7, #8]
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d002      	beq.n	8012d40 <HAL_SPI_Transmit+0x52>
 8012d3a:	88fb      	ldrh	r3, [r7, #6]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d102      	bne.n	8012d46 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8012d40:	2301      	movs	r3, #1
 8012d42:	77fb      	strb	r3, [r7, #31]
    goto error;
 8012d44:	e134      	b.n	8012fb0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8012d46:	68fb      	ldr	r3, [r7, #12]
 8012d48:	2203      	movs	r2, #3
 8012d4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	2200      	movs	r2, #0
 8012d52:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	68ba      	ldr	r2, [r7, #8]
 8012d58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	88fa      	ldrh	r2, [r7, #6]
 8012d5e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	88fa      	ldrh	r2, [r7, #6]
 8012d64:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8012d66:	68fb      	ldr	r3, [r7, #12]
 8012d68:	2200      	movs	r2, #0
 8012d6a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	2200      	movs	r2, #0
 8012d70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8012d74:	68fb      	ldr	r3, [r7, #12]
 8012d76:	2200      	movs	r2, #0
 8012d78:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8012d7c:	68fb      	ldr	r3, [r7, #12]
 8012d7e:	2200      	movs	r2, #0
 8012d80:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	2200      	movs	r2, #0
 8012d86:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	689b      	ldr	r3, [r3, #8]
 8012d8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012d90:	d10f      	bne.n	8012db2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	681a      	ldr	r2, [r3, #0]
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012da0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	681a      	ldr	r2, [r3, #0]
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012db0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012db2:	68fb      	ldr	r3, [r7, #12]
 8012db4:	681b      	ldr	r3, [r3, #0]
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012dbc:	2b40      	cmp	r3, #64	; 0x40
 8012dbe:	d007      	beq.n	8012dd0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	681a      	ldr	r2, [r3, #0]
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012dce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	68db      	ldr	r3, [r3, #12]
 8012dd4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8012dd8:	d94b      	bls.n	8012e72 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	685b      	ldr	r3, [r3, #4]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d002      	beq.n	8012de8 <HAL_SPI_Transmit+0xfa>
 8012de2:	8afb      	ldrh	r3, [r7, #22]
 8012de4:	2b01      	cmp	r3, #1
 8012de6:	d13e      	bne.n	8012e66 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012dec:	881a      	ldrh	r2, [r3, #0]
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012df8:	1c9a      	adds	r2, r3, #2
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8012dfe:	68fb      	ldr	r3, [r7, #12]
 8012e00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012e02:	b29b      	uxth	r3, r3
 8012e04:	3b01      	subs	r3, #1
 8012e06:	b29a      	uxth	r2, r3
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8012e0c:	e02b      	b.n	8012e66 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	689b      	ldr	r3, [r3, #8]
 8012e14:	f003 0302 	and.w	r3, r3, #2
 8012e18:	2b02      	cmp	r3, #2
 8012e1a:	d112      	bne.n	8012e42 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e20:	881a      	ldrh	r2, [r3, #0]
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e2c:	1c9a      	adds	r2, r3, #2
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012e36:	b29b      	uxth	r3, r3
 8012e38:	3b01      	subs	r3, #1
 8012e3a:	b29a      	uxth	r2, r3
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8012e40:	e011      	b.n	8012e66 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012e42:	f7fd f935 	bl	80100b0 <HAL_GetTick>
 8012e46:	4602      	mov	r2, r0
 8012e48:	69bb      	ldr	r3, [r7, #24]
 8012e4a:	1ad3      	subs	r3, r2, r3
 8012e4c:	683a      	ldr	r2, [r7, #0]
 8012e4e:	429a      	cmp	r2, r3
 8012e50:	d803      	bhi.n	8012e5a <HAL_SPI_Transmit+0x16c>
 8012e52:	683b      	ldr	r3, [r7, #0]
 8012e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e58:	d102      	bne.n	8012e60 <HAL_SPI_Transmit+0x172>
 8012e5a:	683b      	ldr	r3, [r7, #0]
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d102      	bne.n	8012e66 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8012e60:	2303      	movs	r3, #3
 8012e62:	77fb      	strb	r3, [r7, #31]
          goto error;
 8012e64:	e0a4      	b.n	8012fb0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8012e66:	68fb      	ldr	r3, [r7, #12]
 8012e68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012e6a:	b29b      	uxth	r3, r3
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d1ce      	bne.n	8012e0e <HAL_SPI_Transmit+0x120>
 8012e70:	e07c      	b.n	8012f6c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	685b      	ldr	r3, [r3, #4]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d002      	beq.n	8012e80 <HAL_SPI_Transmit+0x192>
 8012e7a:	8afb      	ldrh	r3, [r7, #22]
 8012e7c:	2b01      	cmp	r3, #1
 8012e7e:	d170      	bne.n	8012f62 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012e84:	b29b      	uxth	r3, r3
 8012e86:	2b01      	cmp	r3, #1
 8012e88:	d912      	bls.n	8012eb0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e8e:	881a      	ldrh	r2, [r3, #0]
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e9a:	1c9a      	adds	r2, r3, #2
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012ea4:	b29b      	uxth	r3, r3
 8012ea6:	3b02      	subs	r3, #2
 8012ea8:	b29a      	uxth	r2, r3
 8012eaa:	68fb      	ldr	r3, [r7, #12]
 8012eac:	87da      	strh	r2, [r3, #62]	; 0x3e
 8012eae:	e058      	b.n	8012f62 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	330c      	adds	r3, #12
 8012eba:	7812      	ldrb	r2, [r2, #0]
 8012ebc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ec2:	1c5a      	adds	r2, r3, #1
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012ecc:	b29b      	uxth	r3, r3
 8012ece:	3b01      	subs	r3, #1
 8012ed0:	b29a      	uxth	r2, r3
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8012ed6:	e044      	b.n	8012f62 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	689b      	ldr	r3, [r3, #8]
 8012ede:	f003 0302 	and.w	r3, r3, #2
 8012ee2:	2b02      	cmp	r3, #2
 8012ee4:	d12b      	bne.n	8012f3e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012eea:	b29b      	uxth	r3, r3
 8012eec:	2b01      	cmp	r3, #1
 8012eee:	d912      	bls.n	8012f16 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ef4:	881a      	ldrh	r2, [r3, #0]
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f00:	1c9a      	adds	r2, r3, #2
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012f0a:	b29b      	uxth	r3, r3
 8012f0c:	3b02      	subs	r3, #2
 8012f0e:	b29a      	uxth	r2, r3
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	87da      	strh	r2, [r3, #62]	; 0x3e
 8012f14:	e025      	b.n	8012f62 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	330c      	adds	r3, #12
 8012f20:	7812      	ldrb	r2, [r2, #0]
 8012f22:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f28:	1c5a      	adds	r2, r3, #1
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012f32:	b29b      	uxth	r3, r3
 8012f34:	3b01      	subs	r3, #1
 8012f36:	b29a      	uxth	r2, r3
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8012f3c:	e011      	b.n	8012f62 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012f3e:	f7fd f8b7 	bl	80100b0 <HAL_GetTick>
 8012f42:	4602      	mov	r2, r0
 8012f44:	69bb      	ldr	r3, [r7, #24]
 8012f46:	1ad3      	subs	r3, r2, r3
 8012f48:	683a      	ldr	r2, [r7, #0]
 8012f4a:	429a      	cmp	r2, r3
 8012f4c:	d803      	bhi.n	8012f56 <HAL_SPI_Transmit+0x268>
 8012f4e:	683b      	ldr	r3, [r7, #0]
 8012f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f54:	d102      	bne.n	8012f5c <HAL_SPI_Transmit+0x26e>
 8012f56:	683b      	ldr	r3, [r7, #0]
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d102      	bne.n	8012f62 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8012f5c:	2303      	movs	r3, #3
 8012f5e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8012f60:	e026      	b.n	8012fb0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012f66:	b29b      	uxth	r3, r3
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d1b5      	bne.n	8012ed8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8012f6c:	69ba      	ldr	r2, [r7, #24]
 8012f6e:	6839      	ldr	r1, [r7, #0]
 8012f70:	68f8      	ldr	r0, [r7, #12]
 8012f72:	f000 fe6f 	bl	8013c54 <SPI_EndRxTxTransaction>
 8012f76:	4603      	mov	r3, r0
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d002      	beq.n	8012f82 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	2220      	movs	r2, #32
 8012f80:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	689b      	ldr	r3, [r3, #8]
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d10a      	bne.n	8012fa0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012f8a:	2300      	movs	r3, #0
 8012f8c:	613b      	str	r3, [r7, #16]
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	68db      	ldr	r3, [r3, #12]
 8012f94:	613b      	str	r3, [r7, #16]
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	689b      	ldr	r3, [r3, #8]
 8012f9c:	613b      	str	r3, [r7, #16]
 8012f9e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d002      	beq.n	8012fae <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8012fa8:	2301      	movs	r3, #1
 8012faa:	77fb      	strb	r3, [r7, #31]
 8012fac:	e000      	b.n	8012fb0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8012fae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	2201      	movs	r2, #1
 8012fb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	2200      	movs	r2, #0
 8012fbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8012fc0:	7ffb      	ldrb	r3, [r7, #31]
}
 8012fc2:	4618      	mov	r0, r3
 8012fc4:	3720      	adds	r7, #32
 8012fc6:	46bd      	mov	sp, r7
 8012fc8:	bd80      	pop	{r7, pc}

08012fca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8012fca:	b580      	push	{r7, lr}
 8012fcc:	b08a      	sub	sp, #40	; 0x28
 8012fce:	af00      	add	r7, sp, #0
 8012fd0:	60f8      	str	r0, [r7, #12]
 8012fd2:	60b9      	str	r1, [r7, #8]
 8012fd4:	607a      	str	r2, [r7, #4]
 8012fd6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8012fd8:	2301      	movs	r3, #1
 8012fda:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8012fdc:	2300      	movs	r3, #0
 8012fde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8012fe8:	2b01      	cmp	r3, #1
 8012fea:	d101      	bne.n	8012ff0 <HAL_SPI_TransmitReceive+0x26>
 8012fec:	2302      	movs	r3, #2
 8012fee:	e1fb      	b.n	80133e8 <HAL_SPI_TransmitReceive+0x41e>
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	2201      	movs	r2, #1
 8012ff4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8012ff8:	f7fd f85a 	bl	80100b0 <HAL_GetTick>
 8012ffc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8013004:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	685b      	ldr	r3, [r3, #4]
 801300a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 801300c:	887b      	ldrh	r3, [r7, #2]
 801300e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8013010:	887b      	ldrh	r3, [r7, #2]
 8013012:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8013014:	7efb      	ldrb	r3, [r7, #27]
 8013016:	2b01      	cmp	r3, #1
 8013018:	d00e      	beq.n	8013038 <HAL_SPI_TransmitReceive+0x6e>
 801301a:	697b      	ldr	r3, [r7, #20]
 801301c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013020:	d106      	bne.n	8013030 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	689b      	ldr	r3, [r3, #8]
 8013026:	2b00      	cmp	r3, #0
 8013028:	d102      	bne.n	8013030 <HAL_SPI_TransmitReceive+0x66>
 801302a:	7efb      	ldrb	r3, [r7, #27]
 801302c:	2b04      	cmp	r3, #4
 801302e:	d003      	beq.n	8013038 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8013030:	2302      	movs	r3, #2
 8013032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8013036:	e1cd      	b.n	80133d4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8013038:	68bb      	ldr	r3, [r7, #8]
 801303a:	2b00      	cmp	r3, #0
 801303c:	d005      	beq.n	801304a <HAL_SPI_TransmitReceive+0x80>
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d002      	beq.n	801304a <HAL_SPI_TransmitReceive+0x80>
 8013044:	887b      	ldrh	r3, [r7, #2]
 8013046:	2b00      	cmp	r3, #0
 8013048:	d103      	bne.n	8013052 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 801304a:	2301      	movs	r3, #1
 801304c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8013050:	e1c0      	b.n	80133d4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8013058:	b2db      	uxtb	r3, r3
 801305a:	2b04      	cmp	r3, #4
 801305c:	d003      	beq.n	8013066 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	2205      	movs	r2, #5
 8013062:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	2200      	movs	r2, #0
 801306a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	687a      	ldr	r2, [r7, #4]
 8013070:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	887a      	ldrh	r2, [r7, #2]
 8013076:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	887a      	ldrh	r2, [r7, #2]
 801307e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	68ba      	ldr	r2, [r7, #8]
 8013086:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	887a      	ldrh	r2, [r7, #2]
 801308c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	887a      	ldrh	r2, [r7, #2]
 8013092:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	2200      	movs	r2, #0
 8013098:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	2200      	movs	r2, #0
 801309e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	68db      	ldr	r3, [r3, #12]
 80130a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80130a8:	d802      	bhi.n	80130b0 <HAL_SPI_TransmitReceive+0xe6>
 80130aa:	8a3b      	ldrh	r3, [r7, #16]
 80130ac:	2b01      	cmp	r3, #1
 80130ae:	d908      	bls.n	80130c2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	685a      	ldr	r2, [r3, #4]
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80130be:	605a      	str	r2, [r3, #4]
 80130c0:	e007      	b.n	80130d2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	685a      	ldr	r2, [r3, #4]
 80130c8:	68fb      	ldr	r3, [r7, #12]
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80130d0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	681b      	ldr	r3, [r3, #0]
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80130dc:	2b40      	cmp	r3, #64	; 0x40
 80130de:	d007      	beq.n	80130f0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	681a      	ldr	r2, [r3, #0]
 80130e6:	68fb      	ldr	r3, [r7, #12]
 80130e8:	681b      	ldr	r3, [r3, #0]
 80130ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80130ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	68db      	ldr	r3, [r3, #12]
 80130f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80130f8:	d97c      	bls.n	80131f4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	685b      	ldr	r3, [r3, #4]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d002      	beq.n	8013108 <HAL_SPI_TransmitReceive+0x13e>
 8013102:	8a7b      	ldrh	r3, [r7, #18]
 8013104:	2b01      	cmp	r3, #1
 8013106:	d169      	bne.n	80131dc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801310c:	881a      	ldrh	r2, [r3, #0]
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013118:	1c9a      	adds	r2, r3, #2
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801311e:	68fb      	ldr	r3, [r7, #12]
 8013120:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013122:	b29b      	uxth	r3, r3
 8013124:	3b01      	subs	r3, #1
 8013126:	b29a      	uxth	r2, r3
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801312c:	e056      	b.n	80131dc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	689b      	ldr	r3, [r3, #8]
 8013134:	f003 0302 	and.w	r3, r3, #2
 8013138:	2b02      	cmp	r3, #2
 801313a:	d11b      	bne.n	8013174 <HAL_SPI_TransmitReceive+0x1aa>
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013140:	b29b      	uxth	r3, r3
 8013142:	2b00      	cmp	r3, #0
 8013144:	d016      	beq.n	8013174 <HAL_SPI_TransmitReceive+0x1aa>
 8013146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013148:	2b01      	cmp	r3, #1
 801314a:	d113      	bne.n	8013174 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013150:	881a      	ldrh	r2, [r3, #0]
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801315c:	1c9a      	adds	r2, r3, #2
 801315e:	68fb      	ldr	r3, [r7, #12]
 8013160:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013166:	b29b      	uxth	r3, r3
 8013168:	3b01      	subs	r3, #1
 801316a:	b29a      	uxth	r2, r3
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8013170:	2300      	movs	r3, #0
 8013172:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	689b      	ldr	r3, [r3, #8]
 801317a:	f003 0301 	and.w	r3, r3, #1
 801317e:	2b01      	cmp	r3, #1
 8013180:	d11c      	bne.n	80131bc <HAL_SPI_TransmitReceive+0x1f2>
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8013188:	b29b      	uxth	r3, r3
 801318a:	2b00      	cmp	r3, #0
 801318c:	d016      	beq.n	80131bc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	68da      	ldr	r2, [r3, #12]
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013198:	b292      	uxth	r2, r2
 801319a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80131a0:	1c9a      	adds	r2, r3, #2
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80131ac:	b29b      	uxth	r3, r3
 80131ae:	3b01      	subs	r3, #1
 80131b0:	b29a      	uxth	r2, r3
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80131b8:	2301      	movs	r3, #1
 80131ba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80131bc:	f7fc ff78 	bl	80100b0 <HAL_GetTick>
 80131c0:	4602      	mov	r2, r0
 80131c2:	69fb      	ldr	r3, [r7, #28]
 80131c4:	1ad3      	subs	r3, r2, r3
 80131c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80131c8:	429a      	cmp	r2, r3
 80131ca:	d807      	bhi.n	80131dc <HAL_SPI_TransmitReceive+0x212>
 80131cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131d2:	d003      	beq.n	80131dc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80131d4:	2303      	movs	r3, #3
 80131d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80131da:	e0fb      	b.n	80133d4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80131e0:	b29b      	uxth	r3, r3
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d1a3      	bne.n	801312e <HAL_SPI_TransmitReceive+0x164>
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80131ec:	b29b      	uxth	r3, r3
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d19d      	bne.n	801312e <HAL_SPI_TransmitReceive+0x164>
 80131f2:	e0df      	b.n	80133b4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80131f4:	68fb      	ldr	r3, [r7, #12]
 80131f6:	685b      	ldr	r3, [r3, #4]
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d003      	beq.n	8013204 <HAL_SPI_TransmitReceive+0x23a>
 80131fc:	8a7b      	ldrh	r3, [r7, #18]
 80131fe:	2b01      	cmp	r3, #1
 8013200:	f040 80cb 	bne.w	801339a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013208:	b29b      	uxth	r3, r3
 801320a:	2b01      	cmp	r3, #1
 801320c:	d912      	bls.n	8013234 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801320e:	68fb      	ldr	r3, [r7, #12]
 8013210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013212:	881a      	ldrh	r2, [r3, #0]
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801321a:	68fb      	ldr	r3, [r7, #12]
 801321c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801321e:	1c9a      	adds	r2, r3, #2
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013228:	b29b      	uxth	r3, r3
 801322a:	3b02      	subs	r3, #2
 801322c:	b29a      	uxth	r2, r3
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	87da      	strh	r2, [r3, #62]	; 0x3e
 8013232:	e0b2      	b.n	801339a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	330c      	adds	r3, #12
 801323e:	7812      	ldrb	r2, [r2, #0]
 8013240:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013246:	1c5a      	adds	r2, r3, #1
 8013248:	68fb      	ldr	r3, [r7, #12]
 801324a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013250:	b29b      	uxth	r3, r3
 8013252:	3b01      	subs	r3, #1
 8013254:	b29a      	uxth	r2, r3
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801325a:	e09e      	b.n	801339a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	689b      	ldr	r3, [r3, #8]
 8013262:	f003 0302 	and.w	r3, r3, #2
 8013266:	2b02      	cmp	r3, #2
 8013268:	d134      	bne.n	80132d4 <HAL_SPI_TransmitReceive+0x30a>
 801326a:	68fb      	ldr	r3, [r7, #12]
 801326c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801326e:	b29b      	uxth	r3, r3
 8013270:	2b00      	cmp	r3, #0
 8013272:	d02f      	beq.n	80132d4 <HAL_SPI_TransmitReceive+0x30a>
 8013274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013276:	2b01      	cmp	r3, #1
 8013278:	d12c      	bne.n	80132d4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801327e:	b29b      	uxth	r3, r3
 8013280:	2b01      	cmp	r3, #1
 8013282:	d912      	bls.n	80132aa <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013288:	881a      	ldrh	r2, [r3, #0]
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013294:	1c9a      	adds	r2, r3, #2
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801329e:	b29b      	uxth	r3, r3
 80132a0:	3b02      	subs	r3, #2
 80132a2:	b29a      	uxth	r2, r3
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80132a8:	e012      	b.n	80132d0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	681b      	ldr	r3, [r3, #0]
 80132b2:	330c      	adds	r3, #12
 80132b4:	7812      	ldrb	r2, [r2, #0]
 80132b6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132bc:	1c5a      	adds	r2, r3, #1
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80132c6:	b29b      	uxth	r3, r3
 80132c8:	3b01      	subs	r3, #1
 80132ca:	b29a      	uxth	r2, r3
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80132d0:	2300      	movs	r3, #0
 80132d2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	681b      	ldr	r3, [r3, #0]
 80132d8:	689b      	ldr	r3, [r3, #8]
 80132da:	f003 0301 	and.w	r3, r3, #1
 80132de:	2b01      	cmp	r3, #1
 80132e0:	d148      	bne.n	8013374 <HAL_SPI_TransmitReceive+0x3aa>
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80132e8:	b29b      	uxth	r3, r3
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d042      	beq.n	8013374 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80132f4:	b29b      	uxth	r3, r3
 80132f6:	2b01      	cmp	r3, #1
 80132f8:	d923      	bls.n	8013342 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	681b      	ldr	r3, [r3, #0]
 80132fe:	68da      	ldr	r2, [r3, #12]
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013304:	b292      	uxth	r2, r2
 8013306:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801330c:	1c9a      	adds	r2, r3, #2
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8013318:	b29b      	uxth	r3, r3
 801331a:	3b02      	subs	r3, #2
 801331c:	b29a      	uxth	r2, r3
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801332a:	b29b      	uxth	r3, r3
 801332c:	2b01      	cmp	r3, #1
 801332e:	d81f      	bhi.n	8013370 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	681b      	ldr	r3, [r3, #0]
 8013334:	685a      	ldr	r2, [r3, #4]
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801333e:	605a      	str	r2, [r3, #4]
 8013340:	e016      	b.n	8013370 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	f103 020c 	add.w	r2, r3, #12
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801334e:	7812      	ldrb	r2, [r2, #0]
 8013350:	b2d2      	uxtb	r2, r2
 8013352:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013358:	1c5a      	adds	r2, r3, #1
 801335a:	68fb      	ldr	r3, [r7, #12]
 801335c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8013364:	b29b      	uxth	r3, r3
 8013366:	3b01      	subs	r3, #1
 8013368:	b29a      	uxth	r2, r3
 801336a:	68fb      	ldr	r3, [r7, #12]
 801336c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8013370:	2301      	movs	r3, #1
 8013372:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8013374:	f7fc fe9c 	bl	80100b0 <HAL_GetTick>
 8013378:	4602      	mov	r2, r0
 801337a:	69fb      	ldr	r3, [r7, #28]
 801337c:	1ad3      	subs	r3, r2, r3
 801337e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013380:	429a      	cmp	r2, r3
 8013382:	d803      	bhi.n	801338c <HAL_SPI_TransmitReceive+0x3c2>
 8013384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013386:	f1b3 3fff 	cmp.w	r3, #4294967295
 801338a:	d102      	bne.n	8013392 <HAL_SPI_TransmitReceive+0x3c8>
 801338c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801338e:	2b00      	cmp	r3, #0
 8013390:	d103      	bne.n	801339a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8013392:	2303      	movs	r3, #3
 8013394:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8013398:	e01c      	b.n	80133d4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801339e:	b29b      	uxth	r3, r3
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	f47f af5b 	bne.w	801325c <HAL_SPI_TransmitReceive+0x292>
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80133ac:	b29b      	uxth	r3, r3
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	f47f af54 	bne.w	801325c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80133b4:	69fa      	ldr	r2, [r7, #28]
 80133b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80133b8:	68f8      	ldr	r0, [r7, #12]
 80133ba:	f000 fc4b 	bl	8013c54 <SPI_EndRxTxTransaction>
 80133be:	4603      	mov	r3, r0
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d006      	beq.n	80133d2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80133c4:	2301      	movs	r3, #1
 80133c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	2220      	movs	r2, #32
 80133ce:	661a      	str	r2, [r3, #96]	; 0x60
 80133d0:	e000      	b.n	80133d4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80133d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	2201      	movs	r2, #1
 80133d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	2200      	movs	r2, #0
 80133e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80133e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80133e8:	4618      	mov	r0, r3
 80133ea:	3728      	adds	r7, #40	; 0x28
 80133ec:	46bd      	mov	sp, r7
 80133ee:	bd80      	pop	{r7, pc}

080133f0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80133f0:	b580      	push	{r7, lr}
 80133f2:	b086      	sub	sp, #24
 80133f4:	af00      	add	r7, sp, #0
 80133f6:	60f8      	str	r0, [r7, #12]
 80133f8:	60b9      	str	r1, [r7, #8]
 80133fa:	607a      	str	r2, [r7, #4]
 80133fc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80133fe:	2300      	movs	r3, #0
 8013400:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8013402:	68fb      	ldr	r3, [r7, #12]
 8013404:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8013408:	2b01      	cmp	r3, #1
 801340a:	d101      	bne.n	8013410 <HAL_SPI_TransmitReceive_DMA+0x20>
 801340c:	2302      	movs	r3, #2
 801340e:	e16c      	b.n	80136ea <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8013410:	68fb      	ldr	r3, [r7, #12]
 8013412:	2201      	movs	r2, #1
 8013414:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8013418:	68fb      	ldr	r3, [r7, #12]
 801341a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801341e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	685b      	ldr	r3, [r3, #4]
 8013424:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8013426:	7dbb      	ldrb	r3, [r7, #22]
 8013428:	2b01      	cmp	r3, #1
 801342a:	d00d      	beq.n	8013448 <HAL_SPI_TransmitReceive_DMA+0x58>
 801342c:	693b      	ldr	r3, [r7, #16]
 801342e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013432:	d106      	bne.n	8013442 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	689b      	ldr	r3, [r3, #8]
 8013438:	2b00      	cmp	r3, #0
 801343a:	d102      	bne.n	8013442 <HAL_SPI_TransmitReceive_DMA+0x52>
 801343c:	7dbb      	ldrb	r3, [r7, #22]
 801343e:	2b04      	cmp	r3, #4
 8013440:	d002      	beq.n	8013448 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8013442:	2302      	movs	r3, #2
 8013444:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013446:	e14b      	b.n	80136e0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8013448:	68bb      	ldr	r3, [r7, #8]
 801344a:	2b00      	cmp	r3, #0
 801344c:	d005      	beq.n	801345a <HAL_SPI_TransmitReceive_DMA+0x6a>
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	2b00      	cmp	r3, #0
 8013452:	d002      	beq.n	801345a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8013454:	887b      	ldrh	r3, [r7, #2]
 8013456:	2b00      	cmp	r3, #0
 8013458:	d102      	bne.n	8013460 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 801345a:	2301      	movs	r3, #1
 801345c:	75fb      	strb	r3, [r7, #23]
    goto error;
 801345e:	e13f      	b.n	80136e0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8013466:	b2db      	uxtb	r3, r3
 8013468:	2b04      	cmp	r3, #4
 801346a:	d003      	beq.n	8013474 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801346c:	68fb      	ldr	r3, [r7, #12]
 801346e:	2205      	movs	r2, #5
 8013470:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013474:	68fb      	ldr	r3, [r7, #12]
 8013476:	2200      	movs	r2, #0
 8013478:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	68ba      	ldr	r2, [r7, #8]
 801347e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	887a      	ldrh	r2, [r7, #2]
 8013484:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	887a      	ldrh	r2, [r7, #2]
 801348a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	687a      	ldr	r2, [r7, #4]
 8013490:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	887a      	ldrh	r2, [r7, #2]
 8013496:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	887a      	ldrh	r2, [r7, #2]
 801349e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	2200      	movs	r2, #0
 80134a6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	2200      	movs	r2, #0
 80134ac:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	681b      	ldr	r3, [r3, #0]
 80134b2:	685a      	ldr	r2, [r3, #4]
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 80134bc:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	68db      	ldr	r3, [r3, #12]
 80134c2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80134c6:	d908      	bls.n	80134da <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	685a      	ldr	r2, [r3, #4]
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80134d6:	605a      	str	r2, [r3, #4]
 80134d8:	e06f      	b.n	80135ba <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	685a      	ldr	r2, [r3, #4]
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80134e8:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80134ee:	699b      	ldr	r3, [r3, #24]
 80134f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80134f4:	d126      	bne.n	8013544 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80134fa:	f003 0301 	and.w	r3, r3, #1
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d10f      	bne.n	8013522 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8013502:	68fb      	ldr	r3, [r7, #12]
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	685a      	ldr	r2, [r3, #4]
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8013510:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013516:	b29b      	uxth	r3, r3
 8013518:	085b      	lsrs	r3, r3, #1
 801351a:	b29a      	uxth	r2, r3
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8013520:	e010      	b.n	8013544 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	685a      	ldr	r2, [r3, #4]
 8013528:	68fb      	ldr	r3, [r7, #12]
 801352a:	681b      	ldr	r3, [r3, #0]
 801352c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013530:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013536:	b29b      	uxth	r3, r3
 8013538:	085b      	lsrs	r3, r3, #1
 801353a:	b29b      	uxth	r3, r3
 801353c:	3301      	adds	r3, #1
 801353e:	b29a      	uxth	r2, r3
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013548:	699b      	ldr	r3, [r3, #24]
 801354a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801354e:	d134      	bne.n	80135ba <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	681b      	ldr	r3, [r3, #0]
 8013554:	685a      	ldr	r2, [r3, #4]
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801355e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8013566:	b29b      	uxth	r3, r3
 8013568:	f003 0301 	and.w	r3, r3, #1
 801356c:	2b00      	cmp	r3, #0
 801356e:	d111      	bne.n	8013594 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	685a      	ldr	r2, [r3, #4]
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801357e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8013580:	68fb      	ldr	r3, [r7, #12]
 8013582:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8013586:	b29b      	uxth	r3, r3
 8013588:	085b      	lsrs	r3, r3, #1
 801358a:	b29a      	uxth	r2, r3
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8013592:	e012      	b.n	80135ba <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	685a      	ldr	r2, [r3, #4]
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80135a2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80135aa:	b29b      	uxth	r3, r3
 80135ac:	085b      	lsrs	r3, r3, #1
 80135ae:	b29b      	uxth	r3, r3
 80135b0:	3301      	adds	r3, #1
 80135b2:	b29a      	uxth	r2, r3
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80135ba:	68fb      	ldr	r3, [r7, #12]
 80135bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80135c0:	b2db      	uxtb	r3, r3
 80135c2:	2b04      	cmp	r3, #4
 80135c4:	d108      	bne.n	80135d8 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80135ca:	4a4a      	ldr	r2, [pc, #296]	; (80136f4 <HAL_SPI_TransmitReceive_DMA+0x304>)
 80135cc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80135d2:	4a49      	ldr	r2, [pc, #292]	; (80136f8 <HAL_SPI_TransmitReceive_DMA+0x308>)
 80135d4:	63da      	str	r2, [r3, #60]	; 0x3c
 80135d6:	e007      	b.n	80135e8 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80135dc:	4a47      	ldr	r2, [pc, #284]	; (80136fc <HAL_SPI_TransmitReceive_DMA+0x30c>)
 80135de:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80135e4:	4a46      	ldr	r2, [pc, #280]	; (8013700 <HAL_SPI_TransmitReceive_DMA+0x310>)
 80135e6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80135ec:	4a45      	ldr	r2, [pc, #276]	; (8013704 <HAL_SPI_TransmitReceive_DMA+0x314>)
 80135ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80135f4:	2200      	movs	r2, #0
 80135f6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80135f8:	68fb      	ldr	r3, [r7, #12]
 80135fa:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80135fc:	68fb      	ldr	r3, [r7, #12]
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	330c      	adds	r3, #12
 8013602:	4619      	mov	r1, r3
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013608:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8013610:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8013612:	f7fc ff19 	bl	8010448 <HAL_DMA_Start_IT>
 8013616:	4603      	mov	r3, r0
 8013618:	2b00      	cmp	r3, #0
 801361a:	d00c      	beq.n	8013636 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013620:	f043 0210 	orr.w	r2, r3, #16
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8013628:	2301      	movs	r3, #1
 801362a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	2201      	movs	r2, #1
 8013630:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8013634:	e054      	b.n	80136e0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	685a      	ldr	r2, [r3, #4]
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	f042 0201 	orr.w	r2, r2, #1
 8013644:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801364a:	2200      	movs	r2, #0
 801364c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013652:	2200      	movs	r2, #0
 8013654:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801365a:	2200      	movs	r2, #0
 801365c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 801365e:	68fb      	ldr	r3, [r7, #12]
 8013660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013662:	2200      	movs	r2, #0
 8013664:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	6d58      	ldr	r0, [r3, #84]	; 0x54
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801366e:	4619      	mov	r1, r3
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	330c      	adds	r3, #12
 8013676:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801367c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 801367e:	f7fc fee3 	bl	8010448 <HAL_DMA_Start_IT>
 8013682:	4603      	mov	r3, r0
 8013684:	2b00      	cmp	r3, #0
 8013686:	d00c      	beq.n	80136a2 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801368c:	f043 0210 	orr.w	r2, r3, #16
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8013694:	2301      	movs	r3, #1
 8013696:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	2201      	movs	r2, #1
 801369c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80136a0:	e01e      	b.n	80136e0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80136a2:	68fb      	ldr	r3, [r7, #12]
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80136ac:	2b40      	cmp	r3, #64	; 0x40
 80136ae:	d007      	beq.n	80136c0 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	681b      	ldr	r3, [r3, #0]
 80136b4:	681a      	ldr	r2, [r3, #0]
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	681b      	ldr	r3, [r3, #0]
 80136ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80136be:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	681b      	ldr	r3, [r3, #0]
 80136c4:	685a      	ldr	r2, [r3, #4]
 80136c6:	68fb      	ldr	r3, [r7, #12]
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	f042 0220 	orr.w	r2, r2, #32
 80136ce:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	685a      	ldr	r2, [r3, #4]
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	f042 0202 	orr.w	r2, r2, #2
 80136de:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	2200      	movs	r2, #0
 80136e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80136e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80136ea:	4618      	mov	r0, r3
 80136ec:	3718      	adds	r7, #24
 80136ee:	46bd      	mov	sp, r7
 80136f0:	bd80      	pop	{r7, pc}
 80136f2:	bf00      	nop
 80136f4:	080138a9 	.word	0x080138a9
 80136f8:	0801376d 	.word	0x0801376d
 80136fc:	080138c5 	.word	0x080138c5
 8013700:	08013817 	.word	0x08013817
 8013704:	080138e1 	.word	0x080138e1

08013708 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8013708:	b480      	push	{r7}
 801370a:	b083      	sub	sp, #12
 801370c:	af00      	add	r7, sp, #0
 801370e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8013710:	bf00      	nop
 8013712:	370c      	adds	r7, #12
 8013714:	46bd      	mov	sp, r7
 8013716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801371a:	4770      	bx	lr

0801371c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 801371c:	b480      	push	{r7}
 801371e:	b083      	sub	sp, #12
 8013720:	af00      	add	r7, sp, #0
 8013722:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8013724:	bf00      	nop
 8013726:	370c      	adds	r7, #12
 8013728:	46bd      	mov	sp, r7
 801372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801372e:	4770      	bx	lr

08013730 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8013730:	b480      	push	{r7}
 8013732:	b083      	sub	sp, #12
 8013734:	af00      	add	r7, sp, #0
 8013736:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8013738:	bf00      	nop
 801373a:	370c      	adds	r7, #12
 801373c:	46bd      	mov	sp, r7
 801373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013742:	4770      	bx	lr

08013744 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8013744:	b480      	push	{r7}
 8013746:	b083      	sub	sp, #12
 8013748:	af00      	add	r7, sp, #0
 801374a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 801374c:	bf00      	nop
 801374e:	370c      	adds	r7, #12
 8013750:	46bd      	mov	sp, r7
 8013752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013756:	4770      	bx	lr

08013758 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8013758:	b480      	push	{r7}
 801375a:	b083      	sub	sp, #12
 801375c:	af00      	add	r7, sp, #0
 801375e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8013760:	bf00      	nop
 8013762:	370c      	adds	r7, #12
 8013764:	46bd      	mov	sp, r7
 8013766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801376a:	4770      	bx	lr

0801376c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801376c:	b580      	push	{r7, lr}
 801376e:	b084      	sub	sp, #16
 8013770:	af00      	add	r7, sp, #0
 8013772:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013778:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801377a:	f7fc fc99 	bl	80100b0 <HAL_GetTick>
 801377e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	681b      	ldr	r3, [r3, #0]
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801378a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801378e:	d03c      	beq.n	801380a <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8013790:	68fb      	ldr	r3, [r7, #12]
 8013792:	681b      	ldr	r3, [r3, #0]
 8013794:	685a      	ldr	r2, [r3, #4]
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	681b      	ldr	r3, [r3, #0]
 801379a:	f022 0220 	bic.w	r2, r2, #32
 801379e:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	689b      	ldr	r3, [r3, #8]
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d10d      	bne.n	80137c4 <SPI_DMAReceiveCplt+0x58>
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	685b      	ldr	r3, [r3, #4]
 80137ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80137b0:	d108      	bne.n	80137c4 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80137b2:	68fb      	ldr	r3, [r7, #12]
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	685a      	ldr	r2, [r3, #4]
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	681b      	ldr	r3, [r3, #0]
 80137bc:	f022 0203 	bic.w	r2, r2, #3
 80137c0:	605a      	str	r2, [r3, #4]
 80137c2:	e007      	b.n	80137d4 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80137c4:	68fb      	ldr	r3, [r7, #12]
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	685a      	ldr	r2, [r3, #4]
 80137ca:	68fb      	ldr	r3, [r7, #12]
 80137cc:	681b      	ldr	r3, [r3, #0]
 80137ce:	f022 0201 	bic.w	r2, r2, #1
 80137d2:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80137d4:	68ba      	ldr	r2, [r7, #8]
 80137d6:	2164      	movs	r1, #100	; 0x64
 80137d8:	68f8      	ldr	r0, [r7, #12]
 80137da:	f000 f9bf 	bl	8013b5c <SPI_EndRxTransaction>
 80137de:	4603      	mov	r3, r0
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d002      	beq.n	80137ea <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	2220      	movs	r2, #32
 80137e8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	2200      	movs	r2, #0
 80137ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80137f2:	68fb      	ldr	r3, [r7, #12]
 80137f4:	2201      	movs	r2, #1
 80137f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80137fa:	68fb      	ldr	r3, [r7, #12]
 80137fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d003      	beq.n	801380a <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8013802:	68f8      	ldr	r0, [r7, #12]
 8013804:	f7ff ffa8 	bl	8013758 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8013808:	e002      	b.n	8013810 <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 801380a:	68f8      	ldr	r0, [r7, #12]
 801380c:	f7ff ff7c 	bl	8013708 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8013810:	3710      	adds	r7, #16
 8013812:	46bd      	mov	sp, r7
 8013814:	bd80      	pop	{r7, pc}

08013816 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8013816:	b580      	push	{r7, lr}
 8013818:	b084      	sub	sp, #16
 801381a:	af00      	add	r7, sp, #0
 801381c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013822:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013824:	f7fc fc44 	bl	80100b0 <HAL_GetTick>
 8013828:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	681b      	ldr	r3, [r3, #0]
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013834:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013838:	d030      	beq.n	801389c <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	685a      	ldr	r2, [r3, #4]
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	f022 0220 	bic.w	r2, r2, #32
 8013848:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 801384a:	68ba      	ldr	r2, [r7, #8]
 801384c:	2164      	movs	r1, #100	; 0x64
 801384e:	68f8      	ldr	r0, [r7, #12]
 8013850:	f000 fa00 	bl	8013c54 <SPI_EndRxTxTransaction>
 8013854:	4603      	mov	r3, r0
 8013856:	2b00      	cmp	r3, #0
 8013858:	d005      	beq.n	8013866 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801385e:	f043 0220 	orr.w	r2, r3, #32
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	685a      	ldr	r2, [r3, #4]
 801386c:	68fb      	ldr	r3, [r7, #12]
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	f022 0203 	bic.w	r2, r2, #3
 8013874:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	2200      	movs	r2, #0
 801387a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	2200      	movs	r2, #0
 8013880:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	2201      	movs	r2, #1
 8013888:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013890:	2b00      	cmp	r3, #0
 8013892:	d003      	beq.n	801389c <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8013894:	68f8      	ldr	r0, [r7, #12]
 8013896:	f7ff ff5f 	bl	8013758 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 801389a:	e002      	b.n	80138a2 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 801389c:	68f8      	ldr	r0, [r7, #12]
 801389e:	f7ff ff3d 	bl	801371c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80138a2:	3710      	adds	r7, #16
 80138a4:	46bd      	mov	sp, r7
 80138a6:	bd80      	pop	{r7, pc}

080138a8 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80138a8:	b580      	push	{r7, lr}
 80138aa:	b084      	sub	sp, #16
 80138ac:	af00      	add	r7, sp, #0
 80138ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80138b4:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80138b6:	68f8      	ldr	r0, [r7, #12]
 80138b8:	f7ff ff3a 	bl	8013730 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80138bc:	bf00      	nop
 80138be:	3710      	adds	r7, #16
 80138c0:	46bd      	mov	sp, r7
 80138c2:	bd80      	pop	{r7, pc}

080138c4 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80138c4:	b580      	push	{r7, lr}
 80138c6:	b084      	sub	sp, #16
 80138c8:	af00      	add	r7, sp, #0
 80138ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80138d0:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80138d2:	68f8      	ldr	r0, [r7, #12]
 80138d4:	f7ff ff36 	bl	8013744 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80138d8:	bf00      	nop
 80138da:	3710      	adds	r7, #16
 80138dc:	46bd      	mov	sp, r7
 80138de:	bd80      	pop	{r7, pc}

080138e0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80138e0:	b580      	push	{r7, lr}
 80138e2:	b084      	sub	sp, #16
 80138e4:	af00      	add	r7, sp, #0
 80138e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80138ec:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	685a      	ldr	r2, [r3, #4]
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	681b      	ldr	r3, [r3, #0]
 80138f8:	f022 0203 	bic.w	r2, r2, #3
 80138fc:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80138fe:	68fb      	ldr	r3, [r7, #12]
 8013900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013902:	f043 0210 	orr.w	r2, r3, #16
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 801390a:	68fb      	ldr	r3, [r7, #12]
 801390c:	2201      	movs	r2, #1
 801390e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8013912:	68f8      	ldr	r0, [r7, #12]
 8013914:	f7ff ff20 	bl	8013758 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8013918:	bf00      	nop
 801391a:	3710      	adds	r7, #16
 801391c:	46bd      	mov	sp, r7
 801391e:	bd80      	pop	{r7, pc}

08013920 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8013920:	b580      	push	{r7, lr}
 8013922:	b088      	sub	sp, #32
 8013924:	af00      	add	r7, sp, #0
 8013926:	60f8      	str	r0, [r7, #12]
 8013928:	60b9      	str	r1, [r7, #8]
 801392a:	603b      	str	r3, [r7, #0]
 801392c:	4613      	mov	r3, r2
 801392e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8013930:	f7fc fbbe 	bl	80100b0 <HAL_GetTick>
 8013934:	4602      	mov	r2, r0
 8013936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013938:	1a9b      	subs	r3, r3, r2
 801393a:	683a      	ldr	r2, [r7, #0]
 801393c:	4413      	add	r3, r2
 801393e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8013940:	f7fc fbb6 	bl	80100b0 <HAL_GetTick>
 8013944:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8013946:	4b39      	ldr	r3, [pc, #228]	; (8013a2c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	015b      	lsls	r3, r3, #5
 801394c:	0d1b      	lsrs	r3, r3, #20
 801394e:	69fa      	ldr	r2, [r7, #28]
 8013950:	fb02 f303 	mul.w	r3, r2, r3
 8013954:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8013956:	e054      	b.n	8013a02 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8013958:	683b      	ldr	r3, [r7, #0]
 801395a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801395e:	d050      	beq.n	8013a02 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8013960:	f7fc fba6 	bl	80100b0 <HAL_GetTick>
 8013964:	4602      	mov	r2, r0
 8013966:	69bb      	ldr	r3, [r7, #24]
 8013968:	1ad3      	subs	r3, r2, r3
 801396a:	69fa      	ldr	r2, [r7, #28]
 801396c:	429a      	cmp	r2, r3
 801396e:	d902      	bls.n	8013976 <SPI_WaitFlagStateUntilTimeout+0x56>
 8013970:	69fb      	ldr	r3, [r7, #28]
 8013972:	2b00      	cmp	r3, #0
 8013974:	d13d      	bne.n	80139f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	685a      	ldr	r2, [r3, #4]
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8013984:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013986:	68fb      	ldr	r3, [r7, #12]
 8013988:	685b      	ldr	r3, [r3, #4]
 801398a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801398e:	d111      	bne.n	80139b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	689b      	ldr	r3, [r3, #8]
 8013994:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013998:	d004      	beq.n	80139a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	689b      	ldr	r3, [r3, #8]
 801399e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80139a2:	d107      	bne.n	80139b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	681a      	ldr	r2, [r3, #0]
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80139b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80139b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80139bc:	d10f      	bne.n	80139de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	681b      	ldr	r3, [r3, #0]
 80139c2:	681a      	ldr	r2, [r3, #0]
 80139c4:	68fb      	ldr	r3, [r7, #12]
 80139c6:	681b      	ldr	r3, [r3, #0]
 80139c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80139cc:	601a      	str	r2, [r3, #0]
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	681a      	ldr	r2, [r3, #0]
 80139d4:	68fb      	ldr	r3, [r7, #12]
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80139dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	2201      	movs	r2, #1
 80139e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	2200      	movs	r2, #0
 80139ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80139ee:	2303      	movs	r3, #3
 80139f0:	e017      	b.n	8013a22 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80139f2:	697b      	ldr	r3, [r7, #20]
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d101      	bne.n	80139fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80139f8:	2300      	movs	r3, #0
 80139fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80139fc:	697b      	ldr	r3, [r7, #20]
 80139fe:	3b01      	subs	r3, #1
 8013a00:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8013a02:	68fb      	ldr	r3, [r7, #12]
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	689a      	ldr	r2, [r3, #8]
 8013a08:	68bb      	ldr	r3, [r7, #8]
 8013a0a:	4013      	ands	r3, r2
 8013a0c:	68ba      	ldr	r2, [r7, #8]
 8013a0e:	429a      	cmp	r2, r3
 8013a10:	bf0c      	ite	eq
 8013a12:	2301      	moveq	r3, #1
 8013a14:	2300      	movne	r3, #0
 8013a16:	b2db      	uxtb	r3, r3
 8013a18:	461a      	mov	r2, r3
 8013a1a:	79fb      	ldrb	r3, [r7, #7]
 8013a1c:	429a      	cmp	r2, r3
 8013a1e:	d19b      	bne.n	8013958 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8013a20:	2300      	movs	r3, #0
}
 8013a22:	4618      	mov	r0, r3
 8013a24:	3720      	adds	r7, #32
 8013a26:	46bd      	mov	sp, r7
 8013a28:	bd80      	pop	{r7, pc}
 8013a2a:	bf00      	nop
 8013a2c:	20000018 	.word	0x20000018

08013a30 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8013a30:	b580      	push	{r7, lr}
 8013a32:	b08a      	sub	sp, #40	; 0x28
 8013a34:	af00      	add	r7, sp, #0
 8013a36:	60f8      	str	r0, [r7, #12]
 8013a38:	60b9      	str	r1, [r7, #8]
 8013a3a:	607a      	str	r2, [r7, #4]
 8013a3c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8013a3e:	2300      	movs	r3, #0
 8013a40:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8013a42:	f7fc fb35 	bl	80100b0 <HAL_GetTick>
 8013a46:	4602      	mov	r2, r0
 8013a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a4a:	1a9b      	subs	r3, r3, r2
 8013a4c:	683a      	ldr	r2, [r7, #0]
 8013a4e:	4413      	add	r3, r2
 8013a50:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8013a52:	f7fc fb2d 	bl	80100b0 <HAL_GetTick>
 8013a56:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	681b      	ldr	r3, [r3, #0]
 8013a5c:	330c      	adds	r3, #12
 8013a5e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8013a60:	4b3d      	ldr	r3, [pc, #244]	; (8013b58 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8013a62:	681a      	ldr	r2, [r3, #0]
 8013a64:	4613      	mov	r3, r2
 8013a66:	009b      	lsls	r3, r3, #2
 8013a68:	4413      	add	r3, r2
 8013a6a:	00da      	lsls	r2, r3, #3
 8013a6c:	1ad3      	subs	r3, r2, r3
 8013a6e:	0d1b      	lsrs	r3, r3, #20
 8013a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a72:	fb02 f303 	mul.w	r3, r2, r3
 8013a76:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8013a78:	e060      	b.n	8013b3c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8013a7a:	68bb      	ldr	r3, [r7, #8]
 8013a7c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8013a80:	d107      	bne.n	8013a92 <SPI_WaitFifoStateUntilTimeout+0x62>
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d104      	bne.n	8013a92 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8013a88:	69fb      	ldr	r3, [r7, #28]
 8013a8a:	781b      	ldrb	r3, [r3, #0]
 8013a8c:	b2db      	uxtb	r3, r3
 8013a8e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8013a90:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8013a92:	683b      	ldr	r3, [r7, #0]
 8013a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a98:	d050      	beq.n	8013b3c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8013a9a:	f7fc fb09 	bl	80100b0 <HAL_GetTick>
 8013a9e:	4602      	mov	r2, r0
 8013aa0:	6a3b      	ldr	r3, [r7, #32]
 8013aa2:	1ad3      	subs	r3, r2, r3
 8013aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013aa6:	429a      	cmp	r2, r3
 8013aa8:	d902      	bls.n	8013ab0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8013aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d13d      	bne.n	8013b2c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8013ab0:	68fb      	ldr	r3, [r7, #12]
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	685a      	ldr	r2, [r3, #4]
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8013abe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	685b      	ldr	r3, [r3, #4]
 8013ac4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013ac8:	d111      	bne.n	8013aee <SPI_WaitFifoStateUntilTimeout+0xbe>
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	689b      	ldr	r3, [r3, #8]
 8013ace:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013ad2:	d004      	beq.n	8013ade <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8013ad4:	68fb      	ldr	r3, [r7, #12]
 8013ad6:	689b      	ldr	r3, [r3, #8]
 8013ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013adc:	d107      	bne.n	8013aee <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8013ade:	68fb      	ldr	r3, [r7, #12]
 8013ae0:	681b      	ldr	r3, [r3, #0]
 8013ae2:	681a      	ldr	r2, [r3, #0]
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013aec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8013aee:	68fb      	ldr	r3, [r7, #12]
 8013af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013af2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013af6:	d10f      	bne.n	8013b18 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8013af8:	68fb      	ldr	r3, [r7, #12]
 8013afa:	681b      	ldr	r3, [r3, #0]
 8013afc:	681a      	ldr	r2, [r3, #0]
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8013b06:	601a      	str	r2, [r3, #0]
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	681b      	ldr	r3, [r3, #0]
 8013b0c:	681a      	ldr	r2, [r3, #0]
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8013b16:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	2201      	movs	r2, #1
 8013b1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	2200      	movs	r2, #0
 8013b24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8013b28:	2303      	movs	r3, #3
 8013b2a:	e010      	b.n	8013b4e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8013b2c:	69bb      	ldr	r3, [r7, #24]
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d101      	bne.n	8013b36 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8013b32:	2300      	movs	r3, #0
 8013b34:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8013b36:	69bb      	ldr	r3, [r7, #24]
 8013b38:	3b01      	subs	r3, #1
 8013b3a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	681b      	ldr	r3, [r3, #0]
 8013b40:	689a      	ldr	r2, [r3, #8]
 8013b42:	68bb      	ldr	r3, [r7, #8]
 8013b44:	4013      	ands	r3, r2
 8013b46:	687a      	ldr	r2, [r7, #4]
 8013b48:	429a      	cmp	r2, r3
 8013b4a:	d196      	bne.n	8013a7a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8013b4c:	2300      	movs	r3, #0
}
 8013b4e:	4618      	mov	r0, r3
 8013b50:	3728      	adds	r7, #40	; 0x28
 8013b52:	46bd      	mov	sp, r7
 8013b54:	bd80      	pop	{r7, pc}
 8013b56:	bf00      	nop
 8013b58:	20000018 	.word	0x20000018

08013b5c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8013b5c:	b580      	push	{r7, lr}
 8013b5e:	b088      	sub	sp, #32
 8013b60:	af02      	add	r7, sp, #8
 8013b62:	60f8      	str	r0, [r7, #12]
 8013b64:	60b9      	str	r1, [r7, #8]
 8013b66:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	685b      	ldr	r3, [r3, #4]
 8013b6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013b70:	d111      	bne.n	8013b96 <SPI_EndRxTransaction+0x3a>
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	689b      	ldr	r3, [r3, #8]
 8013b76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013b7a:	d004      	beq.n	8013b86 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8013b7c:	68fb      	ldr	r3, [r7, #12]
 8013b7e:	689b      	ldr	r3, [r3, #8]
 8013b80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013b84:	d107      	bne.n	8013b96 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	681b      	ldr	r3, [r3, #0]
 8013b8a:	681a      	ldr	r2, [r3, #0]
 8013b8c:	68fb      	ldr	r3, [r7, #12]
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013b94:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	685b      	ldr	r3, [r3, #4]
 8013b9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013b9e:	d112      	bne.n	8013bc6 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	9300      	str	r3, [sp, #0]
 8013ba4:	68bb      	ldr	r3, [r7, #8]
 8013ba6:	2200      	movs	r2, #0
 8013ba8:	2180      	movs	r1, #128	; 0x80
 8013baa:	68f8      	ldr	r0, [r7, #12]
 8013bac:	f7ff feb8 	bl	8013920 <SPI_WaitFlagStateUntilTimeout>
 8013bb0:	4603      	mov	r3, r0
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d021      	beq.n	8013bfa <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013bba:	f043 0220 	orr.w	r2, r3, #32
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8013bc2:	2303      	movs	r3, #3
 8013bc4:	e03d      	b.n	8013c42 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8013bc6:	4b21      	ldr	r3, [pc, #132]	; (8013c4c <SPI_EndRxTransaction+0xf0>)
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	4a21      	ldr	r2, [pc, #132]	; (8013c50 <SPI_EndRxTransaction+0xf4>)
 8013bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8013bd0:	0d5b      	lsrs	r3, r3, #21
 8013bd2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013bd6:	fb02 f303 	mul.w	r3, r2, r3
 8013bda:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8013bdc:	697b      	ldr	r3, [r7, #20]
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d00a      	beq.n	8013bf8 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8013be2:	697b      	ldr	r3, [r7, #20]
 8013be4:	3b01      	subs	r3, #1
 8013be6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	689b      	ldr	r3, [r3, #8]
 8013bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013bf2:	2b80      	cmp	r3, #128	; 0x80
 8013bf4:	d0f2      	beq.n	8013bdc <SPI_EndRxTransaction+0x80>
 8013bf6:	e000      	b.n	8013bfa <SPI_EndRxTransaction+0x9e>
        break;
 8013bf8:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	685b      	ldr	r3, [r3, #4]
 8013bfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013c02:	d11d      	bne.n	8013c40 <SPI_EndRxTransaction+0xe4>
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	689b      	ldr	r3, [r3, #8]
 8013c08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013c0c:	d004      	beq.n	8013c18 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	689b      	ldr	r3, [r3, #8]
 8013c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013c16:	d113      	bne.n	8013c40 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	9300      	str	r3, [sp, #0]
 8013c1c:	68bb      	ldr	r3, [r7, #8]
 8013c1e:	2200      	movs	r2, #0
 8013c20:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8013c24:	68f8      	ldr	r0, [r7, #12]
 8013c26:	f7ff ff03 	bl	8013a30 <SPI_WaitFifoStateUntilTimeout>
 8013c2a:	4603      	mov	r3, r0
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d007      	beq.n	8013c40 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013c30:	68fb      	ldr	r3, [r7, #12]
 8013c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013c34:	f043 0220 	orr.w	r2, r3, #32
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8013c3c:	2303      	movs	r3, #3
 8013c3e:	e000      	b.n	8013c42 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8013c40:	2300      	movs	r3, #0
}
 8013c42:	4618      	mov	r0, r3
 8013c44:	3718      	adds	r7, #24
 8013c46:	46bd      	mov	sp, r7
 8013c48:	bd80      	pop	{r7, pc}
 8013c4a:	bf00      	nop
 8013c4c:	20000018 	.word	0x20000018
 8013c50:	165e9f81 	.word	0x165e9f81

08013c54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8013c54:	b580      	push	{r7, lr}
 8013c56:	b088      	sub	sp, #32
 8013c58:	af02      	add	r7, sp, #8
 8013c5a:	60f8      	str	r0, [r7, #12]
 8013c5c:	60b9      	str	r1, [r7, #8]
 8013c5e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	9300      	str	r3, [sp, #0]
 8013c64:	68bb      	ldr	r3, [r7, #8]
 8013c66:	2200      	movs	r2, #0
 8013c68:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8013c6c:	68f8      	ldr	r0, [r7, #12]
 8013c6e:	f7ff fedf 	bl	8013a30 <SPI_WaitFifoStateUntilTimeout>
 8013c72:	4603      	mov	r3, r0
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d007      	beq.n	8013c88 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013c78:	68fb      	ldr	r3, [r7, #12]
 8013c7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013c7c:	f043 0220 	orr.w	r2, r3, #32
 8013c80:	68fb      	ldr	r3, [r7, #12]
 8013c82:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8013c84:	2303      	movs	r3, #3
 8013c86:	e046      	b.n	8013d16 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8013c88:	4b25      	ldr	r3, [pc, #148]	; (8013d20 <SPI_EndRxTxTransaction+0xcc>)
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	4a25      	ldr	r2, [pc, #148]	; (8013d24 <SPI_EndRxTxTransaction+0xd0>)
 8013c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8013c92:	0d5b      	lsrs	r3, r3, #21
 8013c94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013c98:	fb02 f303 	mul.w	r3, r2, r3
 8013c9c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	685b      	ldr	r3, [r3, #4]
 8013ca2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013ca6:	d112      	bne.n	8013cce <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	9300      	str	r3, [sp, #0]
 8013cac:	68bb      	ldr	r3, [r7, #8]
 8013cae:	2200      	movs	r2, #0
 8013cb0:	2180      	movs	r1, #128	; 0x80
 8013cb2:	68f8      	ldr	r0, [r7, #12]
 8013cb4:	f7ff fe34 	bl	8013920 <SPI_WaitFlagStateUntilTimeout>
 8013cb8:	4603      	mov	r3, r0
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d016      	beq.n	8013cec <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013cc2:	f043 0220 	orr.w	r2, r3, #32
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8013cca:	2303      	movs	r3, #3
 8013ccc:	e023      	b.n	8013d16 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8013cce:	697b      	ldr	r3, [r7, #20]
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d00a      	beq.n	8013cea <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8013cd4:	697b      	ldr	r3, [r7, #20]
 8013cd6:	3b01      	subs	r3, #1
 8013cd8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	689b      	ldr	r3, [r3, #8]
 8013ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013ce4:	2b80      	cmp	r3, #128	; 0x80
 8013ce6:	d0f2      	beq.n	8013cce <SPI_EndRxTxTransaction+0x7a>
 8013ce8:	e000      	b.n	8013cec <SPI_EndRxTxTransaction+0x98>
        break;
 8013cea:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	9300      	str	r3, [sp, #0]
 8013cf0:	68bb      	ldr	r3, [r7, #8]
 8013cf2:	2200      	movs	r2, #0
 8013cf4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8013cf8:	68f8      	ldr	r0, [r7, #12]
 8013cfa:	f7ff fe99 	bl	8013a30 <SPI_WaitFifoStateUntilTimeout>
 8013cfe:	4603      	mov	r3, r0
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d007      	beq.n	8013d14 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013d08:	f043 0220 	orr.w	r2, r3, #32
 8013d0c:	68fb      	ldr	r3, [r7, #12]
 8013d0e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8013d10:	2303      	movs	r3, #3
 8013d12:	e000      	b.n	8013d16 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8013d14:	2300      	movs	r3, #0
}
 8013d16:	4618      	mov	r0, r3
 8013d18:	3718      	adds	r7, #24
 8013d1a:	46bd      	mov	sp, r7
 8013d1c:	bd80      	pop	{r7, pc}
 8013d1e:	bf00      	nop
 8013d20:	20000018 	.word	0x20000018
 8013d24:	165e9f81 	.word	0x165e9f81

08013d28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013d28:	b580      	push	{r7, lr}
 8013d2a:	b082      	sub	sp, #8
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d101      	bne.n	8013d3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013d36:	2301      	movs	r3, #1
 8013d38:	e040      	b.n	8013dbc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d106      	bne.n	8013d50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	2200      	movs	r2, #0
 8013d46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013d4a:	6878      	ldr	r0, [r7, #4]
 8013d4c:	f7fb ff76 	bl	800fc3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	2224      	movs	r2, #36	; 0x24
 8013d54:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	681a      	ldr	r2, [r3, #0]
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	f022 0201 	bic.w	r2, r2, #1
 8013d64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013d66:	6878      	ldr	r0, [r7, #4]
 8013d68:	f000 fc1e 	bl	80145a8 <UART_SetConfig>
 8013d6c:	4603      	mov	r3, r0
 8013d6e:	2b01      	cmp	r3, #1
 8013d70:	d101      	bne.n	8013d76 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8013d72:	2301      	movs	r3, #1
 8013d74:	e022      	b.n	8013dbc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d002      	beq.n	8013d84 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8013d7e:	6878      	ldr	r0, [r7, #4]
 8013d80:	f000 fe76 	bl	8014a70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	681b      	ldr	r3, [r3, #0]
 8013d88:	685a      	ldr	r2, [r3, #4]
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8013d92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	689a      	ldr	r2, [r3, #8]
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8013da2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	681b      	ldr	r3, [r3, #0]
 8013da8:	681a      	ldr	r2, [r3, #0]
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	681b      	ldr	r3, [r3, #0]
 8013dae:	f042 0201 	orr.w	r2, r2, #1
 8013db2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8013db4:	6878      	ldr	r0, [r7, #4]
 8013db6:	f000 fefd 	bl	8014bb4 <UART_CheckIdleState>
 8013dba:	4603      	mov	r3, r0
}
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	3708      	adds	r7, #8
 8013dc0:	46bd      	mov	sp, r7
 8013dc2:	bd80      	pop	{r7, pc}

08013dc4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013dc4:	b580      	push	{r7, lr}
 8013dc6:	b08a      	sub	sp, #40	; 0x28
 8013dc8:	af00      	add	r7, sp, #0
 8013dca:	60f8      	str	r0, [r7, #12]
 8013dcc:	60b9      	str	r1, [r7, #8]
 8013dce:	4613      	mov	r3, r2
 8013dd0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013dd6:	2b20      	cmp	r3, #32
 8013dd8:	d13d      	bne.n	8013e56 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8013dda:	68bb      	ldr	r3, [r7, #8]
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d002      	beq.n	8013de6 <HAL_UART_Receive_IT+0x22>
 8013de0:	88fb      	ldrh	r3, [r7, #6]
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d101      	bne.n	8013dea <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8013de6:	2301      	movs	r3, #1
 8013de8:	e036      	b.n	8013e58 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8013dea:	68fb      	ldr	r3, [r7, #12]
 8013dec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8013df0:	2b01      	cmp	r3, #1
 8013df2:	d101      	bne.n	8013df8 <HAL_UART_Receive_IT+0x34>
 8013df4:	2302      	movs	r3, #2
 8013df6:	e02f      	b.n	8013e58 <HAL_UART_Receive_IT+0x94>
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	2201      	movs	r2, #1
 8013dfc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013e00:	68fb      	ldr	r3, [r7, #12]
 8013e02:	2200      	movs	r2, #0
 8013e04:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	681b      	ldr	r3, [r3, #0]
 8013e0a:	685b      	ldr	r3, [r3, #4]
 8013e0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d018      	beq.n	8013e46 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8013e14:	68fb      	ldr	r3, [r7, #12]
 8013e16:	681b      	ldr	r3, [r3, #0]
 8013e18:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e1a:	697b      	ldr	r3, [r7, #20]
 8013e1c:	e853 3f00 	ldrex	r3, [r3]
 8013e20:	613b      	str	r3, [r7, #16]
   return(result);
 8013e22:	693b      	ldr	r3, [r7, #16]
 8013e24:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8013e28:	627b      	str	r3, [r7, #36]	; 0x24
 8013e2a:	68fb      	ldr	r3, [r7, #12]
 8013e2c:	681b      	ldr	r3, [r3, #0]
 8013e2e:	461a      	mov	r2, r3
 8013e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e32:	623b      	str	r3, [r7, #32]
 8013e34:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e36:	69f9      	ldr	r1, [r7, #28]
 8013e38:	6a3a      	ldr	r2, [r7, #32]
 8013e3a:	e841 2300 	strex	r3, r2, [r1]
 8013e3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8013e40:	69bb      	ldr	r3, [r7, #24]
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d1e6      	bne.n	8013e14 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8013e46:	88fb      	ldrh	r3, [r7, #6]
 8013e48:	461a      	mov	r2, r3
 8013e4a:	68b9      	ldr	r1, [r7, #8]
 8013e4c:	68f8      	ldr	r0, [r7, #12]
 8013e4e:	f000 ffbf 	bl	8014dd0 <UART_Start_Receive_IT>
 8013e52:	4603      	mov	r3, r0
 8013e54:	e000      	b.n	8013e58 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8013e56:	2302      	movs	r3, #2
  }
}
 8013e58:	4618      	mov	r0, r3
 8013e5a:	3728      	adds	r7, #40	; 0x28
 8013e5c:	46bd      	mov	sp, r7
 8013e5e:	bd80      	pop	{r7, pc}

08013e60 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8013e60:	b580      	push	{r7, lr}
 8013e62:	b08a      	sub	sp, #40	; 0x28
 8013e64:	af00      	add	r7, sp, #0
 8013e66:	60f8      	str	r0, [r7, #12]
 8013e68:	60b9      	str	r1, [r7, #8]
 8013e6a:	4613      	mov	r3, r2
 8013e6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013e72:	2b20      	cmp	r3, #32
 8013e74:	d178      	bne.n	8013f68 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8013e76:	68bb      	ldr	r3, [r7, #8]
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d002      	beq.n	8013e82 <HAL_UART_Transmit_DMA+0x22>
 8013e7c:	88fb      	ldrh	r3, [r7, #6]
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d101      	bne.n	8013e86 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8013e82:	2301      	movs	r3, #1
 8013e84:	e071      	b.n	8013f6a <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 8013e86:	68fb      	ldr	r3, [r7, #12]
 8013e88:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8013e8c:	2b01      	cmp	r3, #1
 8013e8e:	d101      	bne.n	8013e94 <HAL_UART_Transmit_DMA+0x34>
 8013e90:	2302      	movs	r3, #2
 8013e92:	e06a      	b.n	8013f6a <HAL_UART_Transmit_DMA+0x10a>
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	2201      	movs	r2, #1
 8013e98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	68ba      	ldr	r2, [r7, #8]
 8013ea0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	88fa      	ldrh	r2, [r7, #6]
 8013ea6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	88fa      	ldrh	r2, [r7, #6]
 8013eae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	2200      	movs	r2, #0
 8013eb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	2221      	movs	r2, #33	; 0x21
 8013ebe:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8013ec0:	68fb      	ldr	r3, [r7, #12]
 8013ec2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d02b      	beq.n	8013f20 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ecc:	4a29      	ldr	r2, [pc, #164]	; (8013f74 <HAL_UART_Transmit_DMA+0x114>)
 8013ece:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8013ed0:	68fb      	ldr	r3, [r7, #12]
 8013ed2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ed4:	4a28      	ldr	r2, [pc, #160]	; (8013f78 <HAL_UART_Transmit_DMA+0x118>)
 8013ed6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013edc:	4a27      	ldr	r2, [pc, #156]	; (8013f7c <HAL_UART_Transmit_DMA+0x11c>)
 8013ede:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ee4:	2200      	movs	r2, #0
 8013ee6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8013eec:	68fb      	ldr	r3, [r7, #12]
 8013eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013ef0:	4619      	mov	r1, r3
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	681b      	ldr	r3, [r3, #0]
 8013ef6:	3328      	adds	r3, #40	; 0x28
 8013ef8:	461a      	mov	r2, r3
 8013efa:	88fb      	ldrh	r3, [r7, #6]
 8013efc:	f7fc faa4 	bl	8010448 <HAL_DMA_Start_IT>
 8013f00:	4603      	mov	r3, r0
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d00c      	beq.n	8013f20 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	2210      	movs	r2, #16
 8013f0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	2200      	movs	r2, #0
 8013f12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	2220      	movs	r2, #32
 8013f1a:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8013f1c:	2301      	movs	r3, #1
 8013f1e:	e024      	b.n	8013f6a <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	2240      	movs	r2, #64	; 0x40
 8013f26:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	2200      	movs	r2, #0
 8013f2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	681b      	ldr	r3, [r3, #0]
 8013f34:	3308      	adds	r3, #8
 8013f36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013f38:	697b      	ldr	r3, [r7, #20]
 8013f3a:	e853 3f00 	ldrex	r3, [r3]
 8013f3e:	613b      	str	r3, [r7, #16]
   return(result);
 8013f40:	693b      	ldr	r3, [r7, #16]
 8013f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013f46:	627b      	str	r3, [r7, #36]	; 0x24
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	681b      	ldr	r3, [r3, #0]
 8013f4c:	3308      	adds	r3, #8
 8013f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013f50:	623a      	str	r2, [r7, #32]
 8013f52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013f54:	69f9      	ldr	r1, [r7, #28]
 8013f56:	6a3a      	ldr	r2, [r7, #32]
 8013f58:	e841 2300 	strex	r3, r2, [r1]
 8013f5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8013f5e:	69bb      	ldr	r3, [r7, #24]
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d1e5      	bne.n	8013f30 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 8013f64:	2300      	movs	r3, #0
 8013f66:	e000      	b.n	8013f6a <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8013f68:	2302      	movs	r3, #2
  }
}
 8013f6a:	4618      	mov	r0, r3
 8013f6c:	3728      	adds	r7, #40	; 0x28
 8013f6e:	46bd      	mov	sp, r7
 8013f70:	bd80      	pop	{r7, pc}
 8013f72:	bf00      	nop
 8013f74:	08015077 	.word	0x08015077
 8013f78:	0801510d 	.word	0x0801510d
 8013f7c:	08015129 	.word	0x08015129

08013f80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8013f80:	b580      	push	{r7, lr}
 8013f82:	b0ba      	sub	sp, #232	; 0xe8
 8013f84:	af00      	add	r7, sp, #0
 8013f86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	69db      	ldr	r3, [r3, #28]
 8013f8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	681b      	ldr	r3, [r3, #0]
 8013f96:	681b      	ldr	r3, [r3, #0]
 8013f98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	681b      	ldr	r3, [r3, #0]
 8013fa0:	689b      	ldr	r3, [r3, #8]
 8013fa2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8013fa6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8013faa:	f640 030f 	movw	r3, #2063	; 0x80f
 8013fae:	4013      	ands	r3, r2
 8013fb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8013fb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d115      	bne.n	8013fe8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8013fbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013fc0:	f003 0320 	and.w	r3, r3, #32
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d00f      	beq.n	8013fe8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8013fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013fcc:	f003 0320 	and.w	r3, r3, #32
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d009      	beq.n	8013fe8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	f000 82a4 	beq.w	8014526 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013fe2:	6878      	ldr	r0, [r7, #4]
 8013fe4:	4798      	blx	r3
      }
      return;
 8013fe6:	e29e      	b.n	8014526 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8013fe8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	f000 8117 	beq.w	8014220 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8013ff2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013ff6:	f003 0301 	and.w	r3, r3, #1
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d106      	bne.n	801400c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8013ffe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8014002:	4b85      	ldr	r3, [pc, #532]	; (8014218 <HAL_UART_IRQHandler+0x298>)
 8014004:	4013      	ands	r3, r2
 8014006:	2b00      	cmp	r3, #0
 8014008:	f000 810a 	beq.w	8014220 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801400c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014010:	f003 0301 	and.w	r3, r3, #1
 8014014:	2b00      	cmp	r3, #0
 8014016:	d011      	beq.n	801403c <HAL_UART_IRQHandler+0xbc>
 8014018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801401c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014020:	2b00      	cmp	r3, #0
 8014022:	d00b      	beq.n	801403c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	2201      	movs	r2, #1
 801402a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014032:	f043 0201 	orr.w	r2, r3, #1
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801403c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014040:	f003 0302 	and.w	r3, r3, #2
 8014044:	2b00      	cmp	r3, #0
 8014046:	d011      	beq.n	801406c <HAL_UART_IRQHandler+0xec>
 8014048:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801404c:	f003 0301 	and.w	r3, r3, #1
 8014050:	2b00      	cmp	r3, #0
 8014052:	d00b      	beq.n	801406c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	681b      	ldr	r3, [r3, #0]
 8014058:	2202      	movs	r2, #2
 801405a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014062:	f043 0204 	orr.w	r2, r3, #4
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801406c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014070:	f003 0304 	and.w	r3, r3, #4
 8014074:	2b00      	cmp	r3, #0
 8014076:	d011      	beq.n	801409c <HAL_UART_IRQHandler+0x11c>
 8014078:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801407c:	f003 0301 	and.w	r3, r3, #1
 8014080:	2b00      	cmp	r3, #0
 8014082:	d00b      	beq.n	801409c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	681b      	ldr	r3, [r3, #0]
 8014088:	2204      	movs	r2, #4
 801408a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014092:	f043 0202 	orr.w	r2, r3, #2
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801409c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80140a0:	f003 0308 	and.w	r3, r3, #8
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d017      	beq.n	80140d8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80140a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80140ac:	f003 0320 	and.w	r3, r3, #32
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d105      	bne.n	80140c0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80140b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80140b8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d00b      	beq.n	80140d8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	681b      	ldr	r3, [r3, #0]
 80140c4:	2208      	movs	r2, #8
 80140c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80140ce:	f043 0208 	orr.w	r2, r3, #8
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80140d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80140dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d012      	beq.n	801410a <HAL_UART_IRQHandler+0x18a>
 80140e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80140e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d00c      	beq.n	801410a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80140f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014100:	f043 0220 	orr.w	r2, r3, #32
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014110:	2b00      	cmp	r3, #0
 8014112:	f000 820a 	beq.w	801452a <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8014116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801411a:	f003 0320 	and.w	r3, r3, #32
 801411e:	2b00      	cmp	r3, #0
 8014120:	d00d      	beq.n	801413e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8014122:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014126:	f003 0320 	and.w	r3, r3, #32
 801412a:	2b00      	cmp	r3, #0
 801412c:	d007      	beq.n	801413e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014132:	2b00      	cmp	r3, #0
 8014134:	d003      	beq.n	801413e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801413a:	6878      	ldr	r0, [r7, #4]
 801413c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014144:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	689b      	ldr	r3, [r3, #8]
 801414e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014152:	2b40      	cmp	r3, #64	; 0x40
 8014154:	d005      	beq.n	8014162 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8014156:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801415a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801415e:	2b00      	cmp	r3, #0
 8014160:	d04f      	beq.n	8014202 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8014162:	6878      	ldr	r0, [r7, #4]
 8014164:	f000 ff24 	bl	8014fb0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	681b      	ldr	r3, [r3, #0]
 801416c:	689b      	ldr	r3, [r3, #8]
 801416e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014172:	2b40      	cmp	r3, #64	; 0x40
 8014174:	d141      	bne.n	80141fa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	3308      	adds	r3, #8
 801417c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014180:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014184:	e853 3f00 	ldrex	r3, [r3]
 8014188:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801418c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014190:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014194:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	3308      	adds	r3, #8
 801419e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80141a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80141a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80141aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80141ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80141b2:	e841 2300 	strex	r3, r2, [r1]
 80141b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80141ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d1d9      	bne.n	8014176 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d013      	beq.n	80141f2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80141ce:	4a13      	ldr	r2, [pc, #76]	; (801421c <HAL_UART_IRQHandler+0x29c>)
 80141d0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80141d6:	4618      	mov	r0, r3
 80141d8:	f7fc fa06 	bl	80105e8 <HAL_DMA_Abort_IT>
 80141dc:	4603      	mov	r3, r0
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d017      	beq.n	8014212 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80141e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80141e8:	687a      	ldr	r2, [r7, #4]
 80141ea:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80141ec:	4610      	mov	r0, r2
 80141ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80141f0:	e00f      	b.n	8014212 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80141f2:	6878      	ldr	r0, [r7, #4]
 80141f4:	f000 f9b8 	bl	8014568 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80141f8:	e00b      	b.n	8014212 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80141fa:	6878      	ldr	r0, [r7, #4]
 80141fc:	f000 f9b4 	bl	8014568 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014200:	e007      	b.n	8014212 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8014202:	6878      	ldr	r0, [r7, #4]
 8014204:	f000 f9b0 	bl	8014568 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	2200      	movs	r2, #0
 801420c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8014210:	e18b      	b.n	801452a <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014212:	bf00      	nop
    return;
 8014214:	e189      	b.n	801452a <HAL_UART_IRQHandler+0x5aa>
 8014216:	bf00      	nop
 8014218:	04000120 	.word	0x04000120
 801421c:	080151a5 	.word	0x080151a5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014224:	2b01      	cmp	r3, #1
 8014226:	f040 8144 	bne.w	80144b2 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801422a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801422e:	f003 0310 	and.w	r3, r3, #16
 8014232:	2b00      	cmp	r3, #0
 8014234:	f000 813d 	beq.w	80144b2 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8014238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801423c:	f003 0310 	and.w	r3, r3, #16
 8014240:	2b00      	cmp	r3, #0
 8014242:	f000 8136 	beq.w	80144b2 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	2210      	movs	r2, #16
 801424c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	689b      	ldr	r3, [r3, #8]
 8014254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014258:	2b40      	cmp	r3, #64	; 0x40
 801425a:	f040 80b2 	bne.w	80143c2 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014262:	681b      	ldr	r3, [r3, #0]
 8014264:	685b      	ldr	r3, [r3, #4]
 8014266:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801426a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801426e:	2b00      	cmp	r3, #0
 8014270:	f000 815d 	beq.w	801452e <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801427a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801427e:	429a      	cmp	r2, r3
 8014280:	f080 8155 	bcs.w	801452e <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801428a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014292:	69db      	ldr	r3, [r3, #28]
 8014294:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014298:	f000 8085 	beq.w	80143a6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80142a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80142a8:	e853 3f00 	ldrex	r3, [r3]
 80142ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80142b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80142b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80142b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	461a      	mov	r2, r3
 80142c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80142c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80142ca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80142ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80142d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80142d6:	e841 2300 	strex	r3, r2, [r1]
 80142da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80142de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d1da      	bne.n	801429c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	681b      	ldr	r3, [r3, #0]
 80142ea:	3308      	adds	r3, #8
 80142ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80142ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80142f0:	e853 3f00 	ldrex	r3, [r3]
 80142f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80142f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80142f8:	f023 0301 	bic.w	r3, r3, #1
 80142fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	681b      	ldr	r3, [r3, #0]
 8014304:	3308      	adds	r3, #8
 8014306:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801430a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801430e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014310:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8014312:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014316:	e841 2300 	strex	r3, r2, [r1]
 801431a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801431c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801431e:	2b00      	cmp	r3, #0
 8014320:	d1e1      	bne.n	80142e6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	681b      	ldr	r3, [r3, #0]
 8014326:	3308      	adds	r3, #8
 8014328:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801432a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801432c:	e853 3f00 	ldrex	r3, [r3]
 8014330:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8014332:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014334:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014338:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	681b      	ldr	r3, [r3, #0]
 8014340:	3308      	adds	r3, #8
 8014342:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8014346:	66fa      	str	r2, [r7, #108]	; 0x6c
 8014348:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801434a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801434c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801434e:	e841 2300 	strex	r3, r2, [r1]
 8014352:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8014354:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014356:	2b00      	cmp	r3, #0
 8014358:	d1e3      	bne.n	8014322 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	2220      	movs	r2, #32
 801435e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	2200      	movs	r2, #0
 8014364:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801436c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801436e:	e853 3f00 	ldrex	r3, [r3]
 8014372:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8014374:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014376:	f023 0310 	bic.w	r3, r3, #16
 801437a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	461a      	mov	r2, r3
 8014384:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014388:	65bb      	str	r3, [r7, #88]	; 0x58
 801438a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801438c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801438e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014390:	e841 2300 	strex	r3, r2, [r1]
 8014394:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8014396:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014398:	2b00      	cmp	r3, #0
 801439a:	d1e4      	bne.n	8014366 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80143a0:	4618      	mov	r0, r3
 80143a2:	f7fc f8b1 	bl	8010508 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80143b2:	b29b      	uxth	r3, r3
 80143b4:	1ad3      	subs	r3, r2, r3
 80143b6:	b29b      	uxth	r3, r3
 80143b8:	4619      	mov	r1, r3
 80143ba:	6878      	ldr	r0, [r7, #4]
 80143bc:	f000 f8de 	bl	801457c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80143c0:	e0b5      	b.n	801452e <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80143ce:	b29b      	uxth	r3, r3
 80143d0:	1ad3      	subs	r3, r2, r3
 80143d2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80143dc:	b29b      	uxth	r3, r3
 80143de:	2b00      	cmp	r3, #0
 80143e0:	f000 80a7 	beq.w	8014532 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 80143e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	f000 80a2 	beq.w	8014532 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	681b      	ldr	r3, [r3, #0]
 80143f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80143f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143f6:	e853 3f00 	ldrex	r3, [r3]
 80143fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80143fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014402:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	461a      	mov	r2, r3
 801440c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014410:	647b      	str	r3, [r7, #68]	; 0x44
 8014412:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014414:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014416:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014418:	e841 2300 	strex	r3, r2, [r1]
 801441c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801441e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014420:	2b00      	cmp	r3, #0
 8014422:	d1e4      	bne.n	80143ee <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	681b      	ldr	r3, [r3, #0]
 8014428:	3308      	adds	r3, #8
 801442a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801442c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801442e:	e853 3f00 	ldrex	r3, [r3]
 8014432:	623b      	str	r3, [r7, #32]
   return(result);
 8014434:	6a3b      	ldr	r3, [r7, #32]
 8014436:	f023 0301 	bic.w	r3, r3, #1
 801443a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	681b      	ldr	r3, [r3, #0]
 8014442:	3308      	adds	r3, #8
 8014444:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8014448:	633a      	str	r2, [r7, #48]	; 0x30
 801444a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801444c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801444e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014450:	e841 2300 	strex	r3, r2, [r1]
 8014454:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8014456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014458:	2b00      	cmp	r3, #0
 801445a:	d1e3      	bne.n	8014424 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	2220      	movs	r2, #32
 8014460:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	2200      	movs	r2, #0
 8014466:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	2200      	movs	r2, #0
 801446c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	681b      	ldr	r3, [r3, #0]
 8014472:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014474:	693b      	ldr	r3, [r7, #16]
 8014476:	e853 3f00 	ldrex	r3, [r3]
 801447a:	60fb      	str	r3, [r7, #12]
   return(result);
 801447c:	68fb      	ldr	r3, [r7, #12]
 801447e:	f023 0310 	bic.w	r3, r3, #16
 8014482:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	461a      	mov	r2, r3
 801448c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014490:	61fb      	str	r3, [r7, #28]
 8014492:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014494:	69b9      	ldr	r1, [r7, #24]
 8014496:	69fa      	ldr	r2, [r7, #28]
 8014498:	e841 2300 	strex	r3, r2, [r1]
 801449c:	617b      	str	r3, [r7, #20]
   return(result);
 801449e:	697b      	ldr	r3, [r7, #20]
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d1e4      	bne.n	801446e <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80144a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80144a8:	4619      	mov	r1, r3
 80144aa:	6878      	ldr	r0, [r7, #4]
 80144ac:	f000 f866 	bl	801457c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80144b0:	e03f      	b.n	8014532 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80144b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80144b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d00e      	beq.n	80144dc <HAL_UART_IRQHandler+0x55c>
 80144be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80144c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d008      	beq.n	80144dc <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	681b      	ldr	r3, [r3, #0]
 80144ce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80144d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80144d4:	6878      	ldr	r0, [r7, #4]
 80144d6:	f000 f85d 	bl	8014594 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80144da:	e02d      	b.n	8014538 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80144dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80144e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d00e      	beq.n	8014506 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80144e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80144ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d008      	beq.n	8014506 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d01c      	beq.n	8014536 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014500:	6878      	ldr	r0, [r7, #4]
 8014502:	4798      	blx	r3
    }
    return;
 8014504:	e017      	b.n	8014536 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8014506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801450a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801450e:	2b00      	cmp	r3, #0
 8014510:	d012      	beq.n	8014538 <HAL_UART_IRQHandler+0x5b8>
 8014512:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801451a:	2b00      	cmp	r3, #0
 801451c:	d00c      	beq.n	8014538 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 801451e:	6878      	ldr	r0, [r7, #4]
 8014520:	f000 fe56 	bl	80151d0 <UART_EndTransmit_IT>
    return;
 8014524:	e008      	b.n	8014538 <HAL_UART_IRQHandler+0x5b8>
      return;
 8014526:	bf00      	nop
 8014528:	e006      	b.n	8014538 <HAL_UART_IRQHandler+0x5b8>
    return;
 801452a:	bf00      	nop
 801452c:	e004      	b.n	8014538 <HAL_UART_IRQHandler+0x5b8>
      return;
 801452e:	bf00      	nop
 8014530:	e002      	b.n	8014538 <HAL_UART_IRQHandler+0x5b8>
      return;
 8014532:	bf00      	nop
 8014534:	e000      	b.n	8014538 <HAL_UART_IRQHandler+0x5b8>
    return;
 8014536:	bf00      	nop
  }

}
 8014538:	37e8      	adds	r7, #232	; 0xe8
 801453a:	46bd      	mov	sp, r7
 801453c:	bd80      	pop	{r7, pc}
 801453e:	bf00      	nop

08014540 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8014540:	b480      	push	{r7}
 8014542:	b083      	sub	sp, #12
 8014544:	af00      	add	r7, sp, #0
 8014546:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8014548:	bf00      	nop
 801454a:	370c      	adds	r7, #12
 801454c:	46bd      	mov	sp, r7
 801454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014552:	4770      	bx	lr

08014554 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8014554:	b480      	push	{r7}
 8014556:	b083      	sub	sp, #12
 8014558:	af00      	add	r7, sp, #0
 801455a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801455c:	bf00      	nop
 801455e:	370c      	adds	r7, #12
 8014560:	46bd      	mov	sp, r7
 8014562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014566:	4770      	bx	lr

08014568 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8014568:	b480      	push	{r7}
 801456a:	b083      	sub	sp, #12
 801456c:	af00      	add	r7, sp, #0
 801456e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8014570:	bf00      	nop
 8014572:	370c      	adds	r7, #12
 8014574:	46bd      	mov	sp, r7
 8014576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801457a:	4770      	bx	lr

0801457c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801457c:	b480      	push	{r7}
 801457e:	b083      	sub	sp, #12
 8014580:	af00      	add	r7, sp, #0
 8014582:	6078      	str	r0, [r7, #4]
 8014584:	460b      	mov	r3, r1
 8014586:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8014588:	bf00      	nop
 801458a:	370c      	adds	r7, #12
 801458c:	46bd      	mov	sp, r7
 801458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014592:	4770      	bx	lr

08014594 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8014594:	b480      	push	{r7}
 8014596:	b083      	sub	sp, #12
 8014598:	af00      	add	r7, sp, #0
 801459a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801459c:	bf00      	nop
 801459e:	370c      	adds	r7, #12
 80145a0:	46bd      	mov	sp, r7
 80145a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145a6:	4770      	bx	lr

080145a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80145a8:	b580      	push	{r7, lr}
 80145aa:	b088      	sub	sp, #32
 80145ac:	af00      	add	r7, sp, #0
 80145ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80145b0:	2300      	movs	r3, #0
 80145b2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	689a      	ldr	r2, [r3, #8]
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	691b      	ldr	r3, [r3, #16]
 80145bc:	431a      	orrs	r2, r3
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	695b      	ldr	r3, [r3, #20]
 80145c2:	431a      	orrs	r2, r3
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	69db      	ldr	r3, [r3, #28]
 80145c8:	4313      	orrs	r3, r2
 80145ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	681b      	ldr	r3, [r3, #0]
 80145d0:	681a      	ldr	r2, [r3, #0]
 80145d2:	4ba6      	ldr	r3, [pc, #664]	; (801486c <UART_SetConfig+0x2c4>)
 80145d4:	4013      	ands	r3, r2
 80145d6:	687a      	ldr	r2, [r7, #4]
 80145d8:	6812      	ldr	r2, [r2, #0]
 80145da:	6979      	ldr	r1, [r7, #20]
 80145dc:	430b      	orrs	r3, r1
 80145de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	685b      	ldr	r3, [r3, #4]
 80145e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	68da      	ldr	r2, [r3, #12]
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	430a      	orrs	r2, r1
 80145f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	699b      	ldr	r3, [r3, #24]
 80145fa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	6a1b      	ldr	r3, [r3, #32]
 8014600:	697a      	ldr	r2, [r7, #20]
 8014602:	4313      	orrs	r3, r2
 8014604:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	681b      	ldr	r3, [r3, #0]
 801460a:	689b      	ldr	r3, [r3, #8]
 801460c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	681b      	ldr	r3, [r3, #0]
 8014614:	697a      	ldr	r2, [r7, #20]
 8014616:	430a      	orrs	r2, r1
 8014618:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	681b      	ldr	r3, [r3, #0]
 801461e:	4a94      	ldr	r2, [pc, #592]	; (8014870 <UART_SetConfig+0x2c8>)
 8014620:	4293      	cmp	r3, r2
 8014622:	d120      	bne.n	8014666 <UART_SetConfig+0xbe>
 8014624:	4b93      	ldr	r3, [pc, #588]	; (8014874 <UART_SetConfig+0x2cc>)
 8014626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801462a:	f003 0303 	and.w	r3, r3, #3
 801462e:	2b03      	cmp	r3, #3
 8014630:	d816      	bhi.n	8014660 <UART_SetConfig+0xb8>
 8014632:	a201      	add	r2, pc, #4	; (adr r2, 8014638 <UART_SetConfig+0x90>)
 8014634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014638:	08014649 	.word	0x08014649
 801463c:	08014655 	.word	0x08014655
 8014640:	0801464f 	.word	0x0801464f
 8014644:	0801465b 	.word	0x0801465b
 8014648:	2301      	movs	r3, #1
 801464a:	77fb      	strb	r3, [r7, #31]
 801464c:	e150      	b.n	80148f0 <UART_SetConfig+0x348>
 801464e:	2302      	movs	r3, #2
 8014650:	77fb      	strb	r3, [r7, #31]
 8014652:	e14d      	b.n	80148f0 <UART_SetConfig+0x348>
 8014654:	2304      	movs	r3, #4
 8014656:	77fb      	strb	r3, [r7, #31]
 8014658:	e14a      	b.n	80148f0 <UART_SetConfig+0x348>
 801465a:	2308      	movs	r3, #8
 801465c:	77fb      	strb	r3, [r7, #31]
 801465e:	e147      	b.n	80148f0 <UART_SetConfig+0x348>
 8014660:	2310      	movs	r3, #16
 8014662:	77fb      	strb	r3, [r7, #31]
 8014664:	e144      	b.n	80148f0 <UART_SetConfig+0x348>
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	681b      	ldr	r3, [r3, #0]
 801466a:	4a83      	ldr	r2, [pc, #524]	; (8014878 <UART_SetConfig+0x2d0>)
 801466c:	4293      	cmp	r3, r2
 801466e:	d132      	bne.n	80146d6 <UART_SetConfig+0x12e>
 8014670:	4b80      	ldr	r3, [pc, #512]	; (8014874 <UART_SetConfig+0x2cc>)
 8014672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014676:	f003 030c 	and.w	r3, r3, #12
 801467a:	2b0c      	cmp	r3, #12
 801467c:	d828      	bhi.n	80146d0 <UART_SetConfig+0x128>
 801467e:	a201      	add	r2, pc, #4	; (adr r2, 8014684 <UART_SetConfig+0xdc>)
 8014680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014684:	080146b9 	.word	0x080146b9
 8014688:	080146d1 	.word	0x080146d1
 801468c:	080146d1 	.word	0x080146d1
 8014690:	080146d1 	.word	0x080146d1
 8014694:	080146c5 	.word	0x080146c5
 8014698:	080146d1 	.word	0x080146d1
 801469c:	080146d1 	.word	0x080146d1
 80146a0:	080146d1 	.word	0x080146d1
 80146a4:	080146bf 	.word	0x080146bf
 80146a8:	080146d1 	.word	0x080146d1
 80146ac:	080146d1 	.word	0x080146d1
 80146b0:	080146d1 	.word	0x080146d1
 80146b4:	080146cb 	.word	0x080146cb
 80146b8:	2300      	movs	r3, #0
 80146ba:	77fb      	strb	r3, [r7, #31]
 80146bc:	e118      	b.n	80148f0 <UART_SetConfig+0x348>
 80146be:	2302      	movs	r3, #2
 80146c0:	77fb      	strb	r3, [r7, #31]
 80146c2:	e115      	b.n	80148f0 <UART_SetConfig+0x348>
 80146c4:	2304      	movs	r3, #4
 80146c6:	77fb      	strb	r3, [r7, #31]
 80146c8:	e112      	b.n	80148f0 <UART_SetConfig+0x348>
 80146ca:	2308      	movs	r3, #8
 80146cc:	77fb      	strb	r3, [r7, #31]
 80146ce:	e10f      	b.n	80148f0 <UART_SetConfig+0x348>
 80146d0:	2310      	movs	r3, #16
 80146d2:	77fb      	strb	r3, [r7, #31]
 80146d4:	e10c      	b.n	80148f0 <UART_SetConfig+0x348>
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	4a68      	ldr	r2, [pc, #416]	; (801487c <UART_SetConfig+0x2d4>)
 80146dc:	4293      	cmp	r3, r2
 80146de:	d120      	bne.n	8014722 <UART_SetConfig+0x17a>
 80146e0:	4b64      	ldr	r3, [pc, #400]	; (8014874 <UART_SetConfig+0x2cc>)
 80146e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80146e6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80146ea:	2b30      	cmp	r3, #48	; 0x30
 80146ec:	d013      	beq.n	8014716 <UART_SetConfig+0x16e>
 80146ee:	2b30      	cmp	r3, #48	; 0x30
 80146f0:	d814      	bhi.n	801471c <UART_SetConfig+0x174>
 80146f2:	2b20      	cmp	r3, #32
 80146f4:	d009      	beq.n	801470a <UART_SetConfig+0x162>
 80146f6:	2b20      	cmp	r3, #32
 80146f8:	d810      	bhi.n	801471c <UART_SetConfig+0x174>
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d002      	beq.n	8014704 <UART_SetConfig+0x15c>
 80146fe:	2b10      	cmp	r3, #16
 8014700:	d006      	beq.n	8014710 <UART_SetConfig+0x168>
 8014702:	e00b      	b.n	801471c <UART_SetConfig+0x174>
 8014704:	2300      	movs	r3, #0
 8014706:	77fb      	strb	r3, [r7, #31]
 8014708:	e0f2      	b.n	80148f0 <UART_SetConfig+0x348>
 801470a:	2302      	movs	r3, #2
 801470c:	77fb      	strb	r3, [r7, #31]
 801470e:	e0ef      	b.n	80148f0 <UART_SetConfig+0x348>
 8014710:	2304      	movs	r3, #4
 8014712:	77fb      	strb	r3, [r7, #31]
 8014714:	e0ec      	b.n	80148f0 <UART_SetConfig+0x348>
 8014716:	2308      	movs	r3, #8
 8014718:	77fb      	strb	r3, [r7, #31]
 801471a:	e0e9      	b.n	80148f0 <UART_SetConfig+0x348>
 801471c:	2310      	movs	r3, #16
 801471e:	77fb      	strb	r3, [r7, #31]
 8014720:	e0e6      	b.n	80148f0 <UART_SetConfig+0x348>
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	681b      	ldr	r3, [r3, #0]
 8014726:	4a56      	ldr	r2, [pc, #344]	; (8014880 <UART_SetConfig+0x2d8>)
 8014728:	4293      	cmp	r3, r2
 801472a:	d120      	bne.n	801476e <UART_SetConfig+0x1c6>
 801472c:	4b51      	ldr	r3, [pc, #324]	; (8014874 <UART_SetConfig+0x2cc>)
 801472e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014732:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8014736:	2bc0      	cmp	r3, #192	; 0xc0
 8014738:	d013      	beq.n	8014762 <UART_SetConfig+0x1ba>
 801473a:	2bc0      	cmp	r3, #192	; 0xc0
 801473c:	d814      	bhi.n	8014768 <UART_SetConfig+0x1c0>
 801473e:	2b80      	cmp	r3, #128	; 0x80
 8014740:	d009      	beq.n	8014756 <UART_SetConfig+0x1ae>
 8014742:	2b80      	cmp	r3, #128	; 0x80
 8014744:	d810      	bhi.n	8014768 <UART_SetConfig+0x1c0>
 8014746:	2b00      	cmp	r3, #0
 8014748:	d002      	beq.n	8014750 <UART_SetConfig+0x1a8>
 801474a:	2b40      	cmp	r3, #64	; 0x40
 801474c:	d006      	beq.n	801475c <UART_SetConfig+0x1b4>
 801474e:	e00b      	b.n	8014768 <UART_SetConfig+0x1c0>
 8014750:	2300      	movs	r3, #0
 8014752:	77fb      	strb	r3, [r7, #31]
 8014754:	e0cc      	b.n	80148f0 <UART_SetConfig+0x348>
 8014756:	2302      	movs	r3, #2
 8014758:	77fb      	strb	r3, [r7, #31]
 801475a:	e0c9      	b.n	80148f0 <UART_SetConfig+0x348>
 801475c:	2304      	movs	r3, #4
 801475e:	77fb      	strb	r3, [r7, #31]
 8014760:	e0c6      	b.n	80148f0 <UART_SetConfig+0x348>
 8014762:	2308      	movs	r3, #8
 8014764:	77fb      	strb	r3, [r7, #31]
 8014766:	e0c3      	b.n	80148f0 <UART_SetConfig+0x348>
 8014768:	2310      	movs	r3, #16
 801476a:	77fb      	strb	r3, [r7, #31]
 801476c:	e0c0      	b.n	80148f0 <UART_SetConfig+0x348>
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	681b      	ldr	r3, [r3, #0]
 8014772:	4a44      	ldr	r2, [pc, #272]	; (8014884 <UART_SetConfig+0x2dc>)
 8014774:	4293      	cmp	r3, r2
 8014776:	d125      	bne.n	80147c4 <UART_SetConfig+0x21c>
 8014778:	4b3e      	ldr	r3, [pc, #248]	; (8014874 <UART_SetConfig+0x2cc>)
 801477a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801477e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8014782:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8014786:	d017      	beq.n	80147b8 <UART_SetConfig+0x210>
 8014788:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801478c:	d817      	bhi.n	80147be <UART_SetConfig+0x216>
 801478e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014792:	d00b      	beq.n	80147ac <UART_SetConfig+0x204>
 8014794:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014798:	d811      	bhi.n	80147be <UART_SetConfig+0x216>
 801479a:	2b00      	cmp	r3, #0
 801479c:	d003      	beq.n	80147a6 <UART_SetConfig+0x1fe>
 801479e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80147a2:	d006      	beq.n	80147b2 <UART_SetConfig+0x20a>
 80147a4:	e00b      	b.n	80147be <UART_SetConfig+0x216>
 80147a6:	2300      	movs	r3, #0
 80147a8:	77fb      	strb	r3, [r7, #31]
 80147aa:	e0a1      	b.n	80148f0 <UART_SetConfig+0x348>
 80147ac:	2302      	movs	r3, #2
 80147ae:	77fb      	strb	r3, [r7, #31]
 80147b0:	e09e      	b.n	80148f0 <UART_SetConfig+0x348>
 80147b2:	2304      	movs	r3, #4
 80147b4:	77fb      	strb	r3, [r7, #31]
 80147b6:	e09b      	b.n	80148f0 <UART_SetConfig+0x348>
 80147b8:	2308      	movs	r3, #8
 80147ba:	77fb      	strb	r3, [r7, #31]
 80147bc:	e098      	b.n	80148f0 <UART_SetConfig+0x348>
 80147be:	2310      	movs	r3, #16
 80147c0:	77fb      	strb	r3, [r7, #31]
 80147c2:	e095      	b.n	80148f0 <UART_SetConfig+0x348>
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	681b      	ldr	r3, [r3, #0]
 80147c8:	4a2f      	ldr	r2, [pc, #188]	; (8014888 <UART_SetConfig+0x2e0>)
 80147ca:	4293      	cmp	r3, r2
 80147cc:	d125      	bne.n	801481a <UART_SetConfig+0x272>
 80147ce:	4b29      	ldr	r3, [pc, #164]	; (8014874 <UART_SetConfig+0x2cc>)
 80147d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80147d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80147d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80147dc:	d017      	beq.n	801480e <UART_SetConfig+0x266>
 80147de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80147e2:	d817      	bhi.n	8014814 <UART_SetConfig+0x26c>
 80147e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80147e8:	d00b      	beq.n	8014802 <UART_SetConfig+0x25a>
 80147ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80147ee:	d811      	bhi.n	8014814 <UART_SetConfig+0x26c>
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d003      	beq.n	80147fc <UART_SetConfig+0x254>
 80147f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80147f8:	d006      	beq.n	8014808 <UART_SetConfig+0x260>
 80147fa:	e00b      	b.n	8014814 <UART_SetConfig+0x26c>
 80147fc:	2301      	movs	r3, #1
 80147fe:	77fb      	strb	r3, [r7, #31]
 8014800:	e076      	b.n	80148f0 <UART_SetConfig+0x348>
 8014802:	2302      	movs	r3, #2
 8014804:	77fb      	strb	r3, [r7, #31]
 8014806:	e073      	b.n	80148f0 <UART_SetConfig+0x348>
 8014808:	2304      	movs	r3, #4
 801480a:	77fb      	strb	r3, [r7, #31]
 801480c:	e070      	b.n	80148f0 <UART_SetConfig+0x348>
 801480e:	2308      	movs	r3, #8
 8014810:	77fb      	strb	r3, [r7, #31]
 8014812:	e06d      	b.n	80148f0 <UART_SetConfig+0x348>
 8014814:	2310      	movs	r3, #16
 8014816:	77fb      	strb	r3, [r7, #31]
 8014818:	e06a      	b.n	80148f0 <UART_SetConfig+0x348>
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	681b      	ldr	r3, [r3, #0]
 801481e:	4a1b      	ldr	r2, [pc, #108]	; (801488c <UART_SetConfig+0x2e4>)
 8014820:	4293      	cmp	r3, r2
 8014822:	d138      	bne.n	8014896 <UART_SetConfig+0x2ee>
 8014824:	4b13      	ldr	r3, [pc, #76]	; (8014874 <UART_SetConfig+0x2cc>)
 8014826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801482a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 801482e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8014832:	d017      	beq.n	8014864 <UART_SetConfig+0x2bc>
 8014834:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8014838:	d82a      	bhi.n	8014890 <UART_SetConfig+0x2e8>
 801483a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801483e:	d00b      	beq.n	8014858 <UART_SetConfig+0x2b0>
 8014840:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014844:	d824      	bhi.n	8014890 <UART_SetConfig+0x2e8>
 8014846:	2b00      	cmp	r3, #0
 8014848:	d003      	beq.n	8014852 <UART_SetConfig+0x2aa>
 801484a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801484e:	d006      	beq.n	801485e <UART_SetConfig+0x2b6>
 8014850:	e01e      	b.n	8014890 <UART_SetConfig+0x2e8>
 8014852:	2300      	movs	r3, #0
 8014854:	77fb      	strb	r3, [r7, #31]
 8014856:	e04b      	b.n	80148f0 <UART_SetConfig+0x348>
 8014858:	2302      	movs	r3, #2
 801485a:	77fb      	strb	r3, [r7, #31]
 801485c:	e048      	b.n	80148f0 <UART_SetConfig+0x348>
 801485e:	2304      	movs	r3, #4
 8014860:	77fb      	strb	r3, [r7, #31]
 8014862:	e045      	b.n	80148f0 <UART_SetConfig+0x348>
 8014864:	2308      	movs	r3, #8
 8014866:	77fb      	strb	r3, [r7, #31]
 8014868:	e042      	b.n	80148f0 <UART_SetConfig+0x348>
 801486a:	bf00      	nop
 801486c:	efff69f3 	.word	0xefff69f3
 8014870:	40011000 	.word	0x40011000
 8014874:	40023800 	.word	0x40023800
 8014878:	40004400 	.word	0x40004400
 801487c:	40004800 	.word	0x40004800
 8014880:	40004c00 	.word	0x40004c00
 8014884:	40005000 	.word	0x40005000
 8014888:	40011400 	.word	0x40011400
 801488c:	40007800 	.word	0x40007800
 8014890:	2310      	movs	r3, #16
 8014892:	77fb      	strb	r3, [r7, #31]
 8014894:	e02c      	b.n	80148f0 <UART_SetConfig+0x348>
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	681b      	ldr	r3, [r3, #0]
 801489a:	4a72      	ldr	r2, [pc, #456]	; (8014a64 <UART_SetConfig+0x4bc>)
 801489c:	4293      	cmp	r3, r2
 801489e:	d125      	bne.n	80148ec <UART_SetConfig+0x344>
 80148a0:	4b71      	ldr	r3, [pc, #452]	; (8014a68 <UART_SetConfig+0x4c0>)
 80148a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80148a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80148aa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80148ae:	d017      	beq.n	80148e0 <UART_SetConfig+0x338>
 80148b0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80148b4:	d817      	bhi.n	80148e6 <UART_SetConfig+0x33e>
 80148b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80148ba:	d00b      	beq.n	80148d4 <UART_SetConfig+0x32c>
 80148bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80148c0:	d811      	bhi.n	80148e6 <UART_SetConfig+0x33e>
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d003      	beq.n	80148ce <UART_SetConfig+0x326>
 80148c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80148ca:	d006      	beq.n	80148da <UART_SetConfig+0x332>
 80148cc:	e00b      	b.n	80148e6 <UART_SetConfig+0x33e>
 80148ce:	2300      	movs	r3, #0
 80148d0:	77fb      	strb	r3, [r7, #31]
 80148d2:	e00d      	b.n	80148f0 <UART_SetConfig+0x348>
 80148d4:	2302      	movs	r3, #2
 80148d6:	77fb      	strb	r3, [r7, #31]
 80148d8:	e00a      	b.n	80148f0 <UART_SetConfig+0x348>
 80148da:	2304      	movs	r3, #4
 80148dc:	77fb      	strb	r3, [r7, #31]
 80148de:	e007      	b.n	80148f0 <UART_SetConfig+0x348>
 80148e0:	2308      	movs	r3, #8
 80148e2:	77fb      	strb	r3, [r7, #31]
 80148e4:	e004      	b.n	80148f0 <UART_SetConfig+0x348>
 80148e6:	2310      	movs	r3, #16
 80148e8:	77fb      	strb	r3, [r7, #31]
 80148ea:	e001      	b.n	80148f0 <UART_SetConfig+0x348>
 80148ec:	2310      	movs	r3, #16
 80148ee:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	69db      	ldr	r3, [r3, #28]
 80148f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80148f8:	d15b      	bne.n	80149b2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80148fa:	7ffb      	ldrb	r3, [r7, #31]
 80148fc:	2b08      	cmp	r3, #8
 80148fe:	d828      	bhi.n	8014952 <UART_SetConfig+0x3aa>
 8014900:	a201      	add	r2, pc, #4	; (adr r2, 8014908 <UART_SetConfig+0x360>)
 8014902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014906:	bf00      	nop
 8014908:	0801492d 	.word	0x0801492d
 801490c:	08014935 	.word	0x08014935
 8014910:	0801493d 	.word	0x0801493d
 8014914:	08014953 	.word	0x08014953
 8014918:	08014943 	.word	0x08014943
 801491c:	08014953 	.word	0x08014953
 8014920:	08014953 	.word	0x08014953
 8014924:	08014953 	.word	0x08014953
 8014928:	0801494b 	.word	0x0801494b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801492c:	f7fd fce4 	bl	80122f8 <HAL_RCC_GetPCLK1Freq>
 8014930:	61b8      	str	r0, [r7, #24]
        break;
 8014932:	e013      	b.n	801495c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8014934:	f7fd fcf4 	bl	8012320 <HAL_RCC_GetPCLK2Freq>
 8014938:	61b8      	str	r0, [r7, #24]
        break;
 801493a:	e00f      	b.n	801495c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801493c:	4b4b      	ldr	r3, [pc, #300]	; (8014a6c <UART_SetConfig+0x4c4>)
 801493e:	61bb      	str	r3, [r7, #24]
        break;
 8014940:	e00c      	b.n	801495c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8014942:	f7fd fbc9 	bl	80120d8 <HAL_RCC_GetSysClockFreq>
 8014946:	61b8      	str	r0, [r7, #24]
        break;
 8014948:	e008      	b.n	801495c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801494a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801494e:	61bb      	str	r3, [r7, #24]
        break;
 8014950:	e004      	b.n	801495c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8014952:	2300      	movs	r3, #0
 8014954:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8014956:	2301      	movs	r3, #1
 8014958:	77bb      	strb	r3, [r7, #30]
        break;
 801495a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801495c:	69bb      	ldr	r3, [r7, #24]
 801495e:	2b00      	cmp	r3, #0
 8014960:	d074      	beq.n	8014a4c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8014962:	69bb      	ldr	r3, [r7, #24]
 8014964:	005a      	lsls	r2, r3, #1
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	685b      	ldr	r3, [r3, #4]
 801496a:	085b      	lsrs	r3, r3, #1
 801496c:	441a      	add	r2, r3
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	685b      	ldr	r3, [r3, #4]
 8014972:	fbb2 f3f3 	udiv	r3, r2, r3
 8014976:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014978:	693b      	ldr	r3, [r7, #16]
 801497a:	2b0f      	cmp	r3, #15
 801497c:	d916      	bls.n	80149ac <UART_SetConfig+0x404>
 801497e:	693b      	ldr	r3, [r7, #16]
 8014980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014984:	d212      	bcs.n	80149ac <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8014986:	693b      	ldr	r3, [r7, #16]
 8014988:	b29b      	uxth	r3, r3
 801498a:	f023 030f 	bic.w	r3, r3, #15
 801498e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8014990:	693b      	ldr	r3, [r7, #16]
 8014992:	085b      	lsrs	r3, r3, #1
 8014994:	b29b      	uxth	r3, r3
 8014996:	f003 0307 	and.w	r3, r3, #7
 801499a:	b29a      	uxth	r2, r3
 801499c:	89fb      	ldrh	r3, [r7, #14]
 801499e:	4313      	orrs	r3, r2
 80149a0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	681b      	ldr	r3, [r3, #0]
 80149a6:	89fa      	ldrh	r2, [r7, #14]
 80149a8:	60da      	str	r2, [r3, #12]
 80149aa:	e04f      	b.n	8014a4c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80149ac:	2301      	movs	r3, #1
 80149ae:	77bb      	strb	r3, [r7, #30]
 80149b0:	e04c      	b.n	8014a4c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80149b2:	7ffb      	ldrb	r3, [r7, #31]
 80149b4:	2b08      	cmp	r3, #8
 80149b6:	d828      	bhi.n	8014a0a <UART_SetConfig+0x462>
 80149b8:	a201      	add	r2, pc, #4	; (adr r2, 80149c0 <UART_SetConfig+0x418>)
 80149ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149be:	bf00      	nop
 80149c0:	080149e5 	.word	0x080149e5
 80149c4:	080149ed 	.word	0x080149ed
 80149c8:	080149f5 	.word	0x080149f5
 80149cc:	08014a0b 	.word	0x08014a0b
 80149d0:	080149fb 	.word	0x080149fb
 80149d4:	08014a0b 	.word	0x08014a0b
 80149d8:	08014a0b 	.word	0x08014a0b
 80149dc:	08014a0b 	.word	0x08014a0b
 80149e0:	08014a03 	.word	0x08014a03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80149e4:	f7fd fc88 	bl	80122f8 <HAL_RCC_GetPCLK1Freq>
 80149e8:	61b8      	str	r0, [r7, #24]
        break;
 80149ea:	e013      	b.n	8014a14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80149ec:	f7fd fc98 	bl	8012320 <HAL_RCC_GetPCLK2Freq>
 80149f0:	61b8      	str	r0, [r7, #24]
        break;
 80149f2:	e00f      	b.n	8014a14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80149f4:	4b1d      	ldr	r3, [pc, #116]	; (8014a6c <UART_SetConfig+0x4c4>)
 80149f6:	61bb      	str	r3, [r7, #24]
        break;
 80149f8:	e00c      	b.n	8014a14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80149fa:	f7fd fb6d 	bl	80120d8 <HAL_RCC_GetSysClockFreq>
 80149fe:	61b8      	str	r0, [r7, #24]
        break;
 8014a00:	e008      	b.n	8014a14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014a02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014a06:	61bb      	str	r3, [r7, #24]
        break;
 8014a08:	e004      	b.n	8014a14 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8014a0a:	2300      	movs	r3, #0
 8014a0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8014a0e:	2301      	movs	r3, #1
 8014a10:	77bb      	strb	r3, [r7, #30]
        break;
 8014a12:	bf00      	nop
    }

    if (pclk != 0U)
 8014a14:	69bb      	ldr	r3, [r7, #24]
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d018      	beq.n	8014a4c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	685b      	ldr	r3, [r3, #4]
 8014a1e:	085a      	lsrs	r2, r3, #1
 8014a20:	69bb      	ldr	r3, [r7, #24]
 8014a22:	441a      	add	r2, r3
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	685b      	ldr	r3, [r3, #4]
 8014a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8014a2c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014a2e:	693b      	ldr	r3, [r7, #16]
 8014a30:	2b0f      	cmp	r3, #15
 8014a32:	d909      	bls.n	8014a48 <UART_SetConfig+0x4a0>
 8014a34:	693b      	ldr	r3, [r7, #16]
 8014a36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014a3a:	d205      	bcs.n	8014a48 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8014a3c:	693b      	ldr	r3, [r7, #16]
 8014a3e:	b29a      	uxth	r2, r3
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	681b      	ldr	r3, [r3, #0]
 8014a44:	60da      	str	r2, [r3, #12]
 8014a46:	e001      	b.n	8014a4c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8014a48:	2301      	movs	r3, #1
 8014a4a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	2200      	movs	r2, #0
 8014a50:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	2200      	movs	r2, #0
 8014a56:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8014a58:	7fbb      	ldrb	r3, [r7, #30]
}
 8014a5a:	4618      	mov	r0, r3
 8014a5c:	3720      	adds	r7, #32
 8014a5e:	46bd      	mov	sp, r7
 8014a60:	bd80      	pop	{r7, pc}
 8014a62:	bf00      	nop
 8014a64:	40007c00 	.word	0x40007c00
 8014a68:	40023800 	.word	0x40023800
 8014a6c:	00f42400 	.word	0x00f42400

08014a70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8014a70:	b480      	push	{r7}
 8014a72:	b083      	sub	sp, #12
 8014a74:	af00      	add	r7, sp, #0
 8014a76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a7c:	f003 0301 	and.w	r3, r3, #1
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d00a      	beq.n	8014a9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	681b      	ldr	r3, [r3, #0]
 8014a88:	685b      	ldr	r3, [r3, #4]
 8014a8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	681b      	ldr	r3, [r3, #0]
 8014a96:	430a      	orrs	r2, r1
 8014a98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a9e:	f003 0302 	and.w	r3, r3, #2
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	d00a      	beq.n	8014abc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	685b      	ldr	r3, [r3, #4]
 8014aac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	430a      	orrs	r2, r1
 8014aba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ac0:	f003 0304 	and.w	r3, r3, #4
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d00a      	beq.n	8014ade <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	685b      	ldr	r3, [r3, #4]
 8014ace:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	681b      	ldr	r3, [r3, #0]
 8014ada:	430a      	orrs	r2, r1
 8014adc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ae2:	f003 0308 	and.w	r3, r3, #8
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d00a      	beq.n	8014b00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	681b      	ldr	r3, [r3, #0]
 8014aee:	685b      	ldr	r3, [r3, #4]
 8014af0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	681b      	ldr	r3, [r3, #0]
 8014afc:	430a      	orrs	r2, r1
 8014afe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b04:	f003 0310 	and.w	r3, r3, #16
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d00a      	beq.n	8014b22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	681b      	ldr	r3, [r3, #0]
 8014b10:	689b      	ldr	r3, [r3, #8]
 8014b12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	681b      	ldr	r3, [r3, #0]
 8014b1e:	430a      	orrs	r2, r1
 8014b20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b26:	f003 0320 	and.w	r3, r3, #32
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d00a      	beq.n	8014b44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	681b      	ldr	r3, [r3, #0]
 8014b32:	689b      	ldr	r3, [r3, #8]
 8014b34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	681b      	ldr	r3, [r3, #0]
 8014b40:	430a      	orrs	r2, r1
 8014b42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d01a      	beq.n	8014b86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	685b      	ldr	r3, [r3, #4]
 8014b56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	681b      	ldr	r3, [r3, #0]
 8014b62:	430a      	orrs	r2, r1
 8014b64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014b6e:	d10a      	bne.n	8014b86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	681b      	ldr	r3, [r3, #0]
 8014b74:	685b      	ldr	r3, [r3, #4]
 8014b76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	681b      	ldr	r3, [r3, #0]
 8014b82:	430a      	orrs	r2, r1
 8014b84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	d00a      	beq.n	8014ba8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	681b      	ldr	r3, [r3, #0]
 8014b96:	685b      	ldr	r3, [r3, #4]
 8014b98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	681b      	ldr	r3, [r3, #0]
 8014ba4:	430a      	orrs	r2, r1
 8014ba6:	605a      	str	r2, [r3, #4]
  }
}
 8014ba8:	bf00      	nop
 8014baa:	370c      	adds	r7, #12
 8014bac:	46bd      	mov	sp, r7
 8014bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bb2:	4770      	bx	lr

08014bb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8014bb4:	b580      	push	{r7, lr}
 8014bb6:	b086      	sub	sp, #24
 8014bb8:	af02      	add	r7, sp, #8
 8014bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	2200      	movs	r2, #0
 8014bc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8014bc4:	f7fb fa74 	bl	80100b0 <HAL_GetTick>
 8014bc8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	681b      	ldr	r3, [r3, #0]
 8014bce:	681b      	ldr	r3, [r3, #0]
 8014bd0:	f003 0308 	and.w	r3, r3, #8
 8014bd4:	2b08      	cmp	r3, #8
 8014bd6:	d10e      	bne.n	8014bf6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014bd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8014bdc:	9300      	str	r3, [sp, #0]
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	2200      	movs	r2, #0
 8014be2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8014be6:	6878      	ldr	r0, [r7, #4]
 8014be8:	f000 f82d 	bl	8014c46 <UART_WaitOnFlagUntilTimeout>
 8014bec:	4603      	mov	r3, r0
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d001      	beq.n	8014bf6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014bf2:	2303      	movs	r3, #3
 8014bf4:	e023      	b.n	8014c3e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	681b      	ldr	r3, [r3, #0]
 8014bfa:	681b      	ldr	r3, [r3, #0]
 8014bfc:	f003 0304 	and.w	r3, r3, #4
 8014c00:	2b04      	cmp	r3, #4
 8014c02:	d10e      	bne.n	8014c22 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014c04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8014c08:	9300      	str	r3, [sp, #0]
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	2200      	movs	r2, #0
 8014c0e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8014c12:	6878      	ldr	r0, [r7, #4]
 8014c14:	f000 f817 	bl	8014c46 <UART_WaitOnFlagUntilTimeout>
 8014c18:	4603      	mov	r3, r0
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d001      	beq.n	8014c22 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014c1e:	2303      	movs	r3, #3
 8014c20:	e00d      	b.n	8014c3e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	2220      	movs	r2, #32
 8014c26:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	2220      	movs	r2, #32
 8014c2c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	2200      	movs	r2, #0
 8014c32:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	2200      	movs	r2, #0
 8014c38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8014c3c:	2300      	movs	r3, #0
}
 8014c3e:	4618      	mov	r0, r3
 8014c40:	3710      	adds	r7, #16
 8014c42:	46bd      	mov	sp, r7
 8014c44:	bd80      	pop	{r7, pc}

08014c46 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8014c46:	b580      	push	{r7, lr}
 8014c48:	b09c      	sub	sp, #112	; 0x70
 8014c4a:	af00      	add	r7, sp, #0
 8014c4c:	60f8      	str	r0, [r7, #12]
 8014c4e:	60b9      	str	r1, [r7, #8]
 8014c50:	603b      	str	r3, [r7, #0]
 8014c52:	4613      	mov	r3, r2
 8014c54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014c56:	e0a5      	b.n	8014da4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014c58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c5e:	f000 80a1 	beq.w	8014da4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014c62:	f7fb fa25 	bl	80100b0 <HAL_GetTick>
 8014c66:	4602      	mov	r2, r0
 8014c68:	683b      	ldr	r3, [r7, #0]
 8014c6a:	1ad3      	subs	r3, r2, r3
 8014c6c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8014c6e:	429a      	cmp	r2, r3
 8014c70:	d302      	bcc.n	8014c78 <UART_WaitOnFlagUntilTimeout+0x32>
 8014c72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	d13e      	bne.n	8014cf6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	681b      	ldr	r3, [r3, #0]
 8014c7c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014c7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014c80:	e853 3f00 	ldrex	r3, [r3]
 8014c84:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8014c86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8014c8c:	667b      	str	r3, [r7, #100]	; 0x64
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	681b      	ldr	r3, [r3, #0]
 8014c92:	461a      	mov	r2, r3
 8014c94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014c96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014c98:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014c9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014c9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8014c9e:	e841 2300 	strex	r3, r2, [r1]
 8014ca2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8014ca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d1e6      	bne.n	8014c78 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014caa:	68fb      	ldr	r3, [r7, #12]
 8014cac:	681b      	ldr	r3, [r3, #0]
 8014cae:	3308      	adds	r3, #8
 8014cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014cb4:	e853 3f00 	ldrex	r3, [r3]
 8014cb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8014cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cbc:	f023 0301 	bic.w	r3, r3, #1
 8014cc0:	663b      	str	r3, [r7, #96]	; 0x60
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	3308      	adds	r3, #8
 8014cc8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014cca:	64ba      	str	r2, [r7, #72]	; 0x48
 8014ccc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014cce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014cd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014cd2:	e841 2300 	strex	r3, r2, [r1]
 8014cd6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8014cd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d1e5      	bne.n	8014caa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8014cde:	68fb      	ldr	r3, [r7, #12]
 8014ce0:	2220      	movs	r2, #32
 8014ce2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8014ce4:	68fb      	ldr	r3, [r7, #12]
 8014ce6:	2220      	movs	r2, #32
 8014ce8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8014cea:	68fb      	ldr	r3, [r7, #12]
 8014cec:	2200      	movs	r2, #0
 8014cee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8014cf2:	2303      	movs	r3, #3
 8014cf4:	e067      	b.n	8014dc6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8014cf6:	68fb      	ldr	r3, [r7, #12]
 8014cf8:	681b      	ldr	r3, [r3, #0]
 8014cfa:	681b      	ldr	r3, [r3, #0]
 8014cfc:	f003 0304 	and.w	r3, r3, #4
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	d04f      	beq.n	8014da4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8014d04:	68fb      	ldr	r3, [r7, #12]
 8014d06:	681b      	ldr	r3, [r3, #0]
 8014d08:	69db      	ldr	r3, [r3, #28]
 8014d0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014d0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014d12:	d147      	bne.n	8014da4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	681b      	ldr	r3, [r3, #0]
 8014d18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014d1c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8014d1e:	68fb      	ldr	r3, [r7, #12]
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d26:	e853 3f00 	ldrex	r3, [r3]
 8014d2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d2e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8014d32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8014d34:	68fb      	ldr	r3, [r7, #12]
 8014d36:	681b      	ldr	r3, [r3, #0]
 8014d38:	461a      	mov	r2, r3
 8014d3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014d3c:	637b      	str	r3, [r7, #52]	; 0x34
 8014d3e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014d40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014d42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014d44:	e841 2300 	strex	r3, r2, [r1]
 8014d48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8014d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	d1e6      	bne.n	8014d1e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014d50:	68fb      	ldr	r3, [r7, #12]
 8014d52:	681b      	ldr	r3, [r3, #0]
 8014d54:	3308      	adds	r3, #8
 8014d56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014d58:	697b      	ldr	r3, [r7, #20]
 8014d5a:	e853 3f00 	ldrex	r3, [r3]
 8014d5e:	613b      	str	r3, [r7, #16]
   return(result);
 8014d60:	693b      	ldr	r3, [r7, #16]
 8014d62:	f023 0301 	bic.w	r3, r3, #1
 8014d66:	66bb      	str	r3, [r7, #104]	; 0x68
 8014d68:	68fb      	ldr	r3, [r7, #12]
 8014d6a:	681b      	ldr	r3, [r3, #0]
 8014d6c:	3308      	adds	r3, #8
 8014d6e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8014d70:	623a      	str	r2, [r7, #32]
 8014d72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014d74:	69f9      	ldr	r1, [r7, #28]
 8014d76:	6a3a      	ldr	r2, [r7, #32]
 8014d78:	e841 2300 	strex	r3, r2, [r1]
 8014d7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8014d7e:	69bb      	ldr	r3, [r7, #24]
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	d1e5      	bne.n	8014d50 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8014d84:	68fb      	ldr	r3, [r7, #12]
 8014d86:	2220      	movs	r2, #32
 8014d88:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8014d8a:	68fb      	ldr	r3, [r7, #12]
 8014d8c:	2220      	movs	r2, #32
 8014d8e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8014d90:	68fb      	ldr	r3, [r7, #12]
 8014d92:	2220      	movs	r2, #32
 8014d94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8014d98:	68fb      	ldr	r3, [r7, #12]
 8014d9a:	2200      	movs	r2, #0
 8014d9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8014da0:	2303      	movs	r3, #3
 8014da2:	e010      	b.n	8014dc6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014da4:	68fb      	ldr	r3, [r7, #12]
 8014da6:	681b      	ldr	r3, [r3, #0]
 8014da8:	69da      	ldr	r2, [r3, #28]
 8014daa:	68bb      	ldr	r3, [r7, #8]
 8014dac:	4013      	ands	r3, r2
 8014dae:	68ba      	ldr	r2, [r7, #8]
 8014db0:	429a      	cmp	r2, r3
 8014db2:	bf0c      	ite	eq
 8014db4:	2301      	moveq	r3, #1
 8014db6:	2300      	movne	r3, #0
 8014db8:	b2db      	uxtb	r3, r3
 8014dba:	461a      	mov	r2, r3
 8014dbc:	79fb      	ldrb	r3, [r7, #7]
 8014dbe:	429a      	cmp	r2, r3
 8014dc0:	f43f af4a 	beq.w	8014c58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8014dc4:	2300      	movs	r3, #0
}
 8014dc6:	4618      	mov	r0, r3
 8014dc8:	3770      	adds	r7, #112	; 0x70
 8014dca:	46bd      	mov	sp, r7
 8014dcc:	bd80      	pop	{r7, pc}
	...

08014dd0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014dd0:	b480      	push	{r7}
 8014dd2:	b097      	sub	sp, #92	; 0x5c
 8014dd4:	af00      	add	r7, sp, #0
 8014dd6:	60f8      	str	r0, [r7, #12]
 8014dd8:	60b9      	str	r1, [r7, #8]
 8014dda:	4613      	mov	r3, r2
 8014ddc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	68ba      	ldr	r2, [r7, #8]
 8014de2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8014de4:	68fb      	ldr	r3, [r7, #12]
 8014de6:	88fa      	ldrh	r2, [r7, #6]
 8014de8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8014dec:	68fb      	ldr	r3, [r7, #12]
 8014dee:	88fa      	ldrh	r2, [r7, #6]
 8014df0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8014df4:	68fb      	ldr	r3, [r7, #12]
 8014df6:	2200      	movs	r2, #0
 8014df8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8014dfa:	68fb      	ldr	r3, [r7, #12]
 8014dfc:	689b      	ldr	r3, [r3, #8]
 8014dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014e02:	d10e      	bne.n	8014e22 <UART_Start_Receive_IT+0x52>
 8014e04:	68fb      	ldr	r3, [r7, #12]
 8014e06:	691b      	ldr	r3, [r3, #16]
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	d105      	bne.n	8014e18 <UART_Start_Receive_IT+0x48>
 8014e0c:	68fb      	ldr	r3, [r7, #12]
 8014e0e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8014e12:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8014e16:	e02d      	b.n	8014e74 <UART_Start_Receive_IT+0xa4>
 8014e18:	68fb      	ldr	r3, [r7, #12]
 8014e1a:	22ff      	movs	r2, #255	; 0xff
 8014e1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8014e20:	e028      	b.n	8014e74 <UART_Start_Receive_IT+0xa4>
 8014e22:	68fb      	ldr	r3, [r7, #12]
 8014e24:	689b      	ldr	r3, [r3, #8]
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d10d      	bne.n	8014e46 <UART_Start_Receive_IT+0x76>
 8014e2a:	68fb      	ldr	r3, [r7, #12]
 8014e2c:	691b      	ldr	r3, [r3, #16]
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	d104      	bne.n	8014e3c <UART_Start_Receive_IT+0x6c>
 8014e32:	68fb      	ldr	r3, [r7, #12]
 8014e34:	22ff      	movs	r2, #255	; 0xff
 8014e36:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8014e3a:	e01b      	b.n	8014e74 <UART_Start_Receive_IT+0xa4>
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	227f      	movs	r2, #127	; 0x7f
 8014e40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8014e44:	e016      	b.n	8014e74 <UART_Start_Receive_IT+0xa4>
 8014e46:	68fb      	ldr	r3, [r7, #12]
 8014e48:	689b      	ldr	r3, [r3, #8]
 8014e4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8014e4e:	d10d      	bne.n	8014e6c <UART_Start_Receive_IT+0x9c>
 8014e50:	68fb      	ldr	r3, [r7, #12]
 8014e52:	691b      	ldr	r3, [r3, #16]
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d104      	bne.n	8014e62 <UART_Start_Receive_IT+0x92>
 8014e58:	68fb      	ldr	r3, [r7, #12]
 8014e5a:	227f      	movs	r2, #127	; 0x7f
 8014e5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8014e60:	e008      	b.n	8014e74 <UART_Start_Receive_IT+0xa4>
 8014e62:	68fb      	ldr	r3, [r7, #12]
 8014e64:	223f      	movs	r2, #63	; 0x3f
 8014e66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8014e6a:	e003      	b.n	8014e74 <UART_Start_Receive_IT+0xa4>
 8014e6c:	68fb      	ldr	r3, [r7, #12]
 8014e6e:	2200      	movs	r2, #0
 8014e70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014e74:	68fb      	ldr	r3, [r7, #12]
 8014e76:	2200      	movs	r2, #0
 8014e78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	2222      	movs	r2, #34	; 0x22
 8014e80:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014e82:	68fb      	ldr	r3, [r7, #12]
 8014e84:	681b      	ldr	r3, [r3, #0]
 8014e86:	3308      	adds	r3, #8
 8014e88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014e8c:	e853 3f00 	ldrex	r3, [r3]
 8014e90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8014e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e94:	f043 0301 	orr.w	r3, r3, #1
 8014e98:	657b      	str	r3, [r7, #84]	; 0x54
 8014e9a:	68fb      	ldr	r3, [r7, #12]
 8014e9c:	681b      	ldr	r3, [r3, #0]
 8014e9e:	3308      	adds	r3, #8
 8014ea0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014ea2:	64ba      	str	r2, [r7, #72]	; 0x48
 8014ea4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014ea6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014ea8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014eaa:	e841 2300 	strex	r3, r2, [r1]
 8014eae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8014eb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d1e5      	bne.n	8014e82 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014eb6:	68fb      	ldr	r3, [r7, #12]
 8014eb8:	689b      	ldr	r3, [r3, #8]
 8014eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014ebe:	d107      	bne.n	8014ed0 <UART_Start_Receive_IT+0x100>
 8014ec0:	68fb      	ldr	r3, [r7, #12]
 8014ec2:	691b      	ldr	r3, [r3, #16]
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d103      	bne.n	8014ed0 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8014ec8:	68fb      	ldr	r3, [r7, #12]
 8014eca:	4a24      	ldr	r2, [pc, #144]	; (8014f5c <UART_Start_Receive_IT+0x18c>)
 8014ecc:	665a      	str	r2, [r3, #100]	; 0x64
 8014ece:	e002      	b.n	8014ed6 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8014ed0:	68fb      	ldr	r3, [r7, #12]
 8014ed2:	4a23      	ldr	r2, [pc, #140]	; (8014f60 <UART_Start_Receive_IT+0x190>)
 8014ed4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	2200      	movs	r2, #0
 8014eda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8014ede:	68fb      	ldr	r3, [r7, #12]
 8014ee0:	691b      	ldr	r3, [r3, #16]
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d019      	beq.n	8014f1a <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	681b      	ldr	r3, [r3, #0]
 8014eea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014eee:	e853 3f00 	ldrex	r3, [r3]
 8014ef2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ef6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8014efa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014efc:	68fb      	ldr	r3, [r7, #12]
 8014efe:	681b      	ldr	r3, [r3, #0]
 8014f00:	461a      	mov	r2, r3
 8014f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014f04:	637b      	str	r3, [r7, #52]	; 0x34
 8014f06:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014f08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014f0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014f0c:	e841 2300 	strex	r3, r2, [r1]
 8014f10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8014f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	d1e6      	bne.n	8014ee6 <UART_Start_Receive_IT+0x116>
 8014f18:	e018      	b.n	8014f4c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8014f1a:	68fb      	ldr	r3, [r7, #12]
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014f20:	697b      	ldr	r3, [r7, #20]
 8014f22:	e853 3f00 	ldrex	r3, [r3]
 8014f26:	613b      	str	r3, [r7, #16]
   return(result);
 8014f28:	693b      	ldr	r3, [r7, #16]
 8014f2a:	f043 0320 	orr.w	r3, r3, #32
 8014f2e:	653b      	str	r3, [r7, #80]	; 0x50
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	681b      	ldr	r3, [r3, #0]
 8014f34:	461a      	mov	r2, r3
 8014f36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f38:	623b      	str	r3, [r7, #32]
 8014f3a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014f3c:	69f9      	ldr	r1, [r7, #28]
 8014f3e:	6a3a      	ldr	r2, [r7, #32]
 8014f40:	e841 2300 	strex	r3, r2, [r1]
 8014f44:	61bb      	str	r3, [r7, #24]
   return(result);
 8014f46:	69bb      	ldr	r3, [r7, #24]
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d1e6      	bne.n	8014f1a <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8014f4c:	2300      	movs	r3, #0
}
 8014f4e:	4618      	mov	r0, r3
 8014f50:	375c      	adds	r7, #92	; 0x5c
 8014f52:	46bd      	mov	sp, r7
 8014f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f58:	4770      	bx	lr
 8014f5a:	bf00      	nop
 8014f5c:	08015381 	.word	0x08015381
 8014f60:	08015225 	.word	0x08015225

08014f64 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8014f64:	b480      	push	{r7}
 8014f66:	b089      	sub	sp, #36	; 0x24
 8014f68:	af00      	add	r7, sp, #0
 8014f6a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	681b      	ldr	r3, [r3, #0]
 8014f70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014f72:	68fb      	ldr	r3, [r7, #12]
 8014f74:	e853 3f00 	ldrex	r3, [r3]
 8014f78:	60bb      	str	r3, [r7, #8]
   return(result);
 8014f7a:	68bb      	ldr	r3, [r7, #8]
 8014f7c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8014f80:	61fb      	str	r3, [r7, #28]
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	681b      	ldr	r3, [r3, #0]
 8014f86:	461a      	mov	r2, r3
 8014f88:	69fb      	ldr	r3, [r7, #28]
 8014f8a:	61bb      	str	r3, [r7, #24]
 8014f8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014f8e:	6979      	ldr	r1, [r7, #20]
 8014f90:	69ba      	ldr	r2, [r7, #24]
 8014f92:	e841 2300 	strex	r3, r2, [r1]
 8014f96:	613b      	str	r3, [r7, #16]
   return(result);
 8014f98:	693b      	ldr	r3, [r7, #16]
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d1e6      	bne.n	8014f6c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	2220      	movs	r2, #32
 8014fa2:	679a      	str	r2, [r3, #120]	; 0x78
}
 8014fa4:	bf00      	nop
 8014fa6:	3724      	adds	r7, #36	; 0x24
 8014fa8:	46bd      	mov	sp, r7
 8014faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fae:	4770      	bx	lr

08014fb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8014fb0:	b480      	push	{r7}
 8014fb2:	b095      	sub	sp, #84	; 0x54
 8014fb4:	af00      	add	r7, sp, #0
 8014fb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	681b      	ldr	r3, [r3, #0]
 8014fbc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014fc0:	e853 3f00 	ldrex	r3, [r3]
 8014fc4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8014fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014fcc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	681b      	ldr	r3, [r3, #0]
 8014fd2:	461a      	mov	r2, r3
 8014fd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014fd6:	643b      	str	r3, [r7, #64]	; 0x40
 8014fd8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014fda:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014fdc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014fde:	e841 2300 	strex	r3, r2, [r1]
 8014fe2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8014fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d1e6      	bne.n	8014fb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	681b      	ldr	r3, [r3, #0]
 8014fee:	3308      	adds	r3, #8
 8014ff0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014ff2:	6a3b      	ldr	r3, [r7, #32]
 8014ff4:	e853 3f00 	ldrex	r3, [r3]
 8014ff8:	61fb      	str	r3, [r7, #28]
   return(result);
 8014ffa:	69fb      	ldr	r3, [r7, #28]
 8014ffc:	f023 0301 	bic.w	r3, r3, #1
 8015000:	64bb      	str	r3, [r7, #72]	; 0x48
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	681b      	ldr	r3, [r3, #0]
 8015006:	3308      	adds	r3, #8
 8015008:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801500a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801500c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801500e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015010:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015012:	e841 2300 	strex	r3, r2, [r1]
 8015016:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801501a:	2b00      	cmp	r3, #0
 801501c:	d1e5      	bne.n	8014fea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015022:	2b01      	cmp	r3, #1
 8015024:	d118      	bne.n	8015058 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	681b      	ldr	r3, [r3, #0]
 801502a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801502c:	68fb      	ldr	r3, [r7, #12]
 801502e:	e853 3f00 	ldrex	r3, [r3]
 8015032:	60bb      	str	r3, [r7, #8]
   return(result);
 8015034:	68bb      	ldr	r3, [r7, #8]
 8015036:	f023 0310 	bic.w	r3, r3, #16
 801503a:	647b      	str	r3, [r7, #68]	; 0x44
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	681b      	ldr	r3, [r3, #0]
 8015040:	461a      	mov	r2, r3
 8015042:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015044:	61bb      	str	r3, [r7, #24]
 8015046:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015048:	6979      	ldr	r1, [r7, #20]
 801504a:	69ba      	ldr	r2, [r7, #24]
 801504c:	e841 2300 	strex	r3, r2, [r1]
 8015050:	613b      	str	r3, [r7, #16]
   return(result);
 8015052:	693b      	ldr	r3, [r7, #16]
 8015054:	2b00      	cmp	r3, #0
 8015056:	d1e6      	bne.n	8015026 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	2220      	movs	r2, #32
 801505c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	2200      	movs	r2, #0
 8015062:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	2200      	movs	r2, #0
 8015068:	665a      	str	r2, [r3, #100]	; 0x64
}
 801506a:	bf00      	nop
 801506c:	3754      	adds	r7, #84	; 0x54
 801506e:	46bd      	mov	sp, r7
 8015070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015074:	4770      	bx	lr

08015076 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8015076:	b580      	push	{r7, lr}
 8015078:	b090      	sub	sp, #64	; 0x40
 801507a:	af00      	add	r7, sp, #0
 801507c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015082:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	69db      	ldr	r3, [r3, #28]
 8015088:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801508c:	d037      	beq.n	80150fe <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 801508e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015090:	2200      	movs	r2, #0
 8015092:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015096:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	3308      	adds	r3, #8
 801509c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150a0:	e853 3f00 	ldrex	r3, [r3]
 80150a4:	623b      	str	r3, [r7, #32]
   return(result);
 80150a6:	6a3b      	ldr	r3, [r7, #32]
 80150a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80150ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80150ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80150b0:	681b      	ldr	r3, [r3, #0]
 80150b2:	3308      	adds	r3, #8
 80150b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80150b6:	633a      	str	r2, [r7, #48]	; 0x30
 80150b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80150ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80150bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80150be:	e841 2300 	strex	r3, r2, [r1]
 80150c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80150c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d1e5      	bne.n	8015096 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80150ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80150cc:	681b      	ldr	r3, [r3, #0]
 80150ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80150d0:	693b      	ldr	r3, [r7, #16]
 80150d2:	e853 3f00 	ldrex	r3, [r3]
 80150d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80150de:	637b      	str	r3, [r7, #52]	; 0x34
 80150e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80150e2:	681b      	ldr	r3, [r3, #0]
 80150e4:	461a      	mov	r2, r3
 80150e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80150e8:	61fb      	str	r3, [r7, #28]
 80150ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80150ec:	69b9      	ldr	r1, [r7, #24]
 80150ee:	69fa      	ldr	r2, [r7, #28]
 80150f0:	e841 2300 	strex	r3, r2, [r1]
 80150f4:	617b      	str	r3, [r7, #20]
   return(result);
 80150f6:	697b      	ldr	r3, [r7, #20]
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d1e6      	bne.n	80150ca <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80150fc:	e002      	b.n	8015104 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 80150fe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015100:	f7ff fa1e 	bl	8014540 <HAL_UART_TxCpltCallback>
}
 8015104:	bf00      	nop
 8015106:	3740      	adds	r7, #64	; 0x40
 8015108:	46bd      	mov	sp, r7
 801510a:	bd80      	pop	{r7, pc}

0801510c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801510c:	b580      	push	{r7, lr}
 801510e:	b084      	sub	sp, #16
 8015110:	af00      	add	r7, sp, #0
 8015112:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015118:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 801511a:	68f8      	ldr	r0, [r7, #12]
 801511c:	f7ff fa1a 	bl	8014554 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015120:	bf00      	nop
 8015122:	3710      	adds	r7, #16
 8015124:	46bd      	mov	sp, r7
 8015126:	bd80      	pop	{r7, pc}

08015128 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8015128:	b580      	push	{r7, lr}
 801512a:	b086      	sub	sp, #24
 801512c:	af00      	add	r7, sp, #0
 801512e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015134:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8015136:	697b      	ldr	r3, [r7, #20]
 8015138:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801513a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801513c:	697b      	ldr	r3, [r7, #20]
 801513e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015140:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8015142:	697b      	ldr	r3, [r7, #20]
 8015144:	681b      	ldr	r3, [r3, #0]
 8015146:	689b      	ldr	r3, [r3, #8]
 8015148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801514c:	2b80      	cmp	r3, #128	; 0x80
 801514e:	d109      	bne.n	8015164 <UART_DMAError+0x3c>
 8015150:	693b      	ldr	r3, [r7, #16]
 8015152:	2b21      	cmp	r3, #33	; 0x21
 8015154:	d106      	bne.n	8015164 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8015156:	697b      	ldr	r3, [r7, #20]
 8015158:	2200      	movs	r2, #0
 801515a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 801515e:	6978      	ldr	r0, [r7, #20]
 8015160:	f7ff ff00 	bl	8014f64 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8015164:	697b      	ldr	r3, [r7, #20]
 8015166:	681b      	ldr	r3, [r3, #0]
 8015168:	689b      	ldr	r3, [r3, #8]
 801516a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801516e:	2b40      	cmp	r3, #64	; 0x40
 8015170:	d109      	bne.n	8015186 <UART_DMAError+0x5e>
 8015172:	68fb      	ldr	r3, [r7, #12]
 8015174:	2b22      	cmp	r3, #34	; 0x22
 8015176:	d106      	bne.n	8015186 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8015178:	697b      	ldr	r3, [r7, #20]
 801517a:	2200      	movs	r2, #0
 801517c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8015180:	6978      	ldr	r0, [r7, #20]
 8015182:	f7ff ff15 	bl	8014fb0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8015186:	697b      	ldr	r3, [r7, #20]
 8015188:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801518c:	f043 0210 	orr.w	r2, r3, #16
 8015190:	697b      	ldr	r3, [r7, #20]
 8015192:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8015196:	6978      	ldr	r0, [r7, #20]
 8015198:	f7ff f9e6 	bl	8014568 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801519c:	bf00      	nop
 801519e:	3718      	adds	r7, #24
 80151a0:	46bd      	mov	sp, r7
 80151a2:	bd80      	pop	{r7, pc}

080151a4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80151a4:	b580      	push	{r7, lr}
 80151a6:	b084      	sub	sp, #16
 80151a8:	af00      	add	r7, sp, #0
 80151aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80151b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80151b2:	68fb      	ldr	r3, [r7, #12]
 80151b4:	2200      	movs	r2, #0
 80151b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80151ba:	68fb      	ldr	r3, [r7, #12]
 80151bc:	2200      	movs	r2, #0
 80151be:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80151c2:	68f8      	ldr	r0, [r7, #12]
 80151c4:	f7ff f9d0 	bl	8014568 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80151c8:	bf00      	nop
 80151ca:	3710      	adds	r7, #16
 80151cc:	46bd      	mov	sp, r7
 80151ce:	bd80      	pop	{r7, pc}

080151d0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80151d0:	b580      	push	{r7, lr}
 80151d2:	b088      	sub	sp, #32
 80151d4:	af00      	add	r7, sp, #0
 80151d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	681b      	ldr	r3, [r3, #0]
 80151dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	e853 3f00 	ldrex	r3, [r3]
 80151e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80151e6:	68bb      	ldr	r3, [r7, #8]
 80151e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80151ec:	61fb      	str	r3, [r7, #28]
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	681b      	ldr	r3, [r3, #0]
 80151f2:	461a      	mov	r2, r3
 80151f4:	69fb      	ldr	r3, [r7, #28]
 80151f6:	61bb      	str	r3, [r7, #24]
 80151f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80151fa:	6979      	ldr	r1, [r7, #20]
 80151fc:	69ba      	ldr	r2, [r7, #24]
 80151fe:	e841 2300 	strex	r3, r2, [r1]
 8015202:	613b      	str	r3, [r7, #16]
   return(result);
 8015204:	693b      	ldr	r3, [r7, #16]
 8015206:	2b00      	cmp	r3, #0
 8015208:	d1e6      	bne.n	80151d8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	2220      	movs	r2, #32
 801520e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	2200      	movs	r2, #0
 8015214:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8015216:	6878      	ldr	r0, [r7, #4]
 8015218:	f7ff f992 	bl	8014540 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801521c:	bf00      	nop
 801521e:	3720      	adds	r7, #32
 8015220:	46bd      	mov	sp, r7
 8015222:	bd80      	pop	{r7, pc}

08015224 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8015224:	b580      	push	{r7, lr}
 8015226:	b096      	sub	sp, #88	; 0x58
 8015228:	af00      	add	r7, sp, #0
 801522a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015232:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801523a:	2b22      	cmp	r3, #34	; 0x22
 801523c:	f040 8094 	bne.w	8015368 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	681b      	ldr	r3, [r3, #0]
 8015244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015246:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801524a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 801524e:	b2d9      	uxtb	r1, r3
 8015250:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8015254:	b2da      	uxtb	r2, r3
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801525a:	400a      	ands	r2, r1
 801525c:	b2d2      	uxtb	r2, r2
 801525e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015264:	1c5a      	adds	r2, r3, #1
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8015270:	b29b      	uxth	r3, r3
 8015272:	3b01      	subs	r3, #1
 8015274:	b29a      	uxth	r2, r3
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8015282:	b29b      	uxth	r3, r3
 8015284:	2b00      	cmp	r3, #0
 8015286:	d177      	bne.n	8015378 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	681b      	ldr	r3, [r3, #0]
 801528c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801528e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015290:	e853 3f00 	ldrex	r3, [r3]
 8015294:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8015296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015298:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801529c:	653b      	str	r3, [r7, #80]	; 0x50
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	681b      	ldr	r3, [r3, #0]
 80152a2:	461a      	mov	r2, r3
 80152a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80152a6:	647b      	str	r3, [r7, #68]	; 0x44
 80152a8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80152aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80152ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80152ae:	e841 2300 	strex	r3, r2, [r1]
 80152b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80152b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80152b6:	2b00      	cmp	r3, #0
 80152b8:	d1e6      	bne.n	8015288 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	681b      	ldr	r3, [r3, #0]
 80152be:	3308      	adds	r3, #8
 80152c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80152c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152c4:	e853 3f00 	ldrex	r3, [r3]
 80152c8:	623b      	str	r3, [r7, #32]
   return(result);
 80152ca:	6a3b      	ldr	r3, [r7, #32]
 80152cc:	f023 0301 	bic.w	r3, r3, #1
 80152d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	681b      	ldr	r3, [r3, #0]
 80152d6:	3308      	adds	r3, #8
 80152d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80152da:	633a      	str	r2, [r7, #48]	; 0x30
 80152dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80152de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80152e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80152e2:	e841 2300 	strex	r3, r2, [r1]
 80152e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80152e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d1e5      	bne.n	80152ba <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	2220      	movs	r2, #32
 80152f2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	2200      	movs	r2, #0
 80152f8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80152fe:	2b01      	cmp	r3, #1
 8015300:	d12e      	bne.n	8015360 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	2200      	movs	r2, #0
 8015306:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	681b      	ldr	r3, [r3, #0]
 801530c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801530e:	693b      	ldr	r3, [r7, #16]
 8015310:	e853 3f00 	ldrex	r3, [r3]
 8015314:	60fb      	str	r3, [r7, #12]
   return(result);
 8015316:	68fb      	ldr	r3, [r7, #12]
 8015318:	f023 0310 	bic.w	r3, r3, #16
 801531c:	64bb      	str	r3, [r7, #72]	; 0x48
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	681b      	ldr	r3, [r3, #0]
 8015322:	461a      	mov	r2, r3
 8015324:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015326:	61fb      	str	r3, [r7, #28]
 8015328:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801532a:	69b9      	ldr	r1, [r7, #24]
 801532c:	69fa      	ldr	r2, [r7, #28]
 801532e:	e841 2300 	strex	r3, r2, [r1]
 8015332:	617b      	str	r3, [r7, #20]
   return(result);
 8015334:	697b      	ldr	r3, [r7, #20]
 8015336:	2b00      	cmp	r3, #0
 8015338:	d1e6      	bne.n	8015308 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	681b      	ldr	r3, [r3, #0]
 801533e:	69db      	ldr	r3, [r3, #28]
 8015340:	f003 0310 	and.w	r3, r3, #16
 8015344:	2b10      	cmp	r3, #16
 8015346:	d103      	bne.n	8015350 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	681b      	ldr	r3, [r3, #0]
 801534c:	2210      	movs	r2, #16
 801534e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8015356:	4619      	mov	r1, r3
 8015358:	6878      	ldr	r0, [r7, #4]
 801535a:	f7ff f90f 	bl	801457c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801535e:	e00b      	b.n	8015378 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8015360:	6878      	ldr	r0, [r7, #4]
 8015362:	f7f8 fa93 	bl	800d88c <HAL_UART_RxCpltCallback>
}
 8015366:	e007      	b.n	8015378 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	699a      	ldr	r2, [r3, #24]
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	681b      	ldr	r3, [r3, #0]
 8015372:	f042 0208 	orr.w	r2, r2, #8
 8015376:	619a      	str	r2, [r3, #24]
}
 8015378:	bf00      	nop
 801537a:	3758      	adds	r7, #88	; 0x58
 801537c:	46bd      	mov	sp, r7
 801537e:	bd80      	pop	{r7, pc}

08015380 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8015380:	b580      	push	{r7, lr}
 8015382:	b096      	sub	sp, #88	; 0x58
 8015384:	af00      	add	r7, sp, #0
 8015386:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801538e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015396:	2b22      	cmp	r3, #34	; 0x22
 8015398:	f040 8094 	bne.w	80154c4 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	681b      	ldr	r3, [r3, #0]
 80153a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153a2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80153aa:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80153ac:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80153b0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80153b4:	4013      	ands	r3, r2
 80153b6:	b29a      	uxth	r2, r3
 80153b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80153ba:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80153c0:	1c9a      	adds	r2, r3, #2
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80153cc:	b29b      	uxth	r3, r3
 80153ce:	3b01      	subs	r3, #1
 80153d0:	b29a      	uxth	r2, r3
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80153de:	b29b      	uxth	r3, r3
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	d177      	bne.n	80154d4 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	681b      	ldr	r3, [r3, #0]
 80153e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80153ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80153ec:	e853 3f00 	ldrex	r3, [r3]
 80153f0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80153f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80153f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	681b      	ldr	r3, [r3, #0]
 80153fe:	461a      	mov	r2, r3
 8015400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015402:	643b      	str	r3, [r7, #64]	; 0x40
 8015404:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015406:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015408:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801540a:	e841 2300 	strex	r3, r2, [r1]
 801540e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015412:	2b00      	cmp	r3, #0
 8015414:	d1e6      	bne.n	80153e4 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	681b      	ldr	r3, [r3, #0]
 801541a:	3308      	adds	r3, #8
 801541c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801541e:	6a3b      	ldr	r3, [r7, #32]
 8015420:	e853 3f00 	ldrex	r3, [r3]
 8015424:	61fb      	str	r3, [r7, #28]
   return(result);
 8015426:	69fb      	ldr	r3, [r7, #28]
 8015428:	f023 0301 	bic.w	r3, r3, #1
 801542c:	64bb      	str	r3, [r7, #72]	; 0x48
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	681b      	ldr	r3, [r3, #0]
 8015432:	3308      	adds	r3, #8
 8015434:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015436:	62fa      	str	r2, [r7, #44]	; 0x2c
 8015438:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801543a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801543c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801543e:	e841 2300 	strex	r3, r2, [r1]
 8015442:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015446:	2b00      	cmp	r3, #0
 8015448:	d1e5      	bne.n	8015416 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	2220      	movs	r2, #32
 801544e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	2200      	movs	r2, #0
 8015454:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801545a:	2b01      	cmp	r3, #1
 801545c:	d12e      	bne.n	80154bc <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	2200      	movs	r2, #0
 8015462:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	681b      	ldr	r3, [r3, #0]
 8015468:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801546a:	68fb      	ldr	r3, [r7, #12]
 801546c:	e853 3f00 	ldrex	r3, [r3]
 8015470:	60bb      	str	r3, [r7, #8]
   return(result);
 8015472:	68bb      	ldr	r3, [r7, #8]
 8015474:	f023 0310 	bic.w	r3, r3, #16
 8015478:	647b      	str	r3, [r7, #68]	; 0x44
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	681b      	ldr	r3, [r3, #0]
 801547e:	461a      	mov	r2, r3
 8015480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015482:	61bb      	str	r3, [r7, #24]
 8015484:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015486:	6979      	ldr	r1, [r7, #20]
 8015488:	69ba      	ldr	r2, [r7, #24]
 801548a:	e841 2300 	strex	r3, r2, [r1]
 801548e:	613b      	str	r3, [r7, #16]
   return(result);
 8015490:	693b      	ldr	r3, [r7, #16]
 8015492:	2b00      	cmp	r3, #0
 8015494:	d1e6      	bne.n	8015464 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	681b      	ldr	r3, [r3, #0]
 801549a:	69db      	ldr	r3, [r3, #28]
 801549c:	f003 0310 	and.w	r3, r3, #16
 80154a0:	2b10      	cmp	r3, #16
 80154a2:	d103      	bne.n	80154ac <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	681b      	ldr	r3, [r3, #0]
 80154a8:	2210      	movs	r2, #16
 80154aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80154b2:	4619      	mov	r1, r3
 80154b4:	6878      	ldr	r0, [r7, #4]
 80154b6:	f7ff f861 	bl	801457c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80154ba:	e00b      	b.n	80154d4 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80154bc:	6878      	ldr	r0, [r7, #4]
 80154be:	f7f8 f9e5 	bl	800d88c <HAL_UART_RxCpltCallback>
}
 80154c2:	e007      	b.n	80154d4 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	681b      	ldr	r3, [r3, #0]
 80154c8:	699a      	ldr	r2, [r3, #24]
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	681b      	ldr	r3, [r3, #0]
 80154ce:	f042 0208 	orr.w	r2, r2, #8
 80154d2:	619a      	str	r2, [r3, #24]
}
 80154d4:	bf00      	nop
 80154d6:	3758      	adds	r7, #88	; 0x58
 80154d8:	46bd      	mov	sp, r7
 80154da:	bd80      	pop	{r7, pc}

080154dc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80154dc:	b480      	push	{r7}
 80154de:	b085      	sub	sp, #20
 80154e0:	af00      	add	r7, sp, #0
 80154e2:	4603      	mov	r3, r0
 80154e4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80154e6:	2300      	movs	r3, #0
 80154e8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80154ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80154ee:	2b84      	cmp	r3, #132	; 0x84
 80154f0:	d005      	beq.n	80154fe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80154f2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80154f6:	68fb      	ldr	r3, [r7, #12]
 80154f8:	4413      	add	r3, r2
 80154fa:	3303      	adds	r3, #3
 80154fc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80154fe:	68fb      	ldr	r3, [r7, #12]
}
 8015500:	4618      	mov	r0, r3
 8015502:	3714      	adds	r7, #20
 8015504:	46bd      	mov	sp, r7
 8015506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801550a:	4770      	bx	lr

0801550c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801550c:	b580      	push	{r7, lr}
 801550e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8015510:	f001 fb80 	bl	8016c14 <vTaskStartScheduler>
  
  return osOK;
 8015514:	2300      	movs	r3, #0
}
 8015516:	4618      	mov	r0, r3
 8015518:	bd80      	pop	{r7, pc}

0801551a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 801551a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801551c:	b089      	sub	sp, #36	; 0x24
 801551e:	af04      	add	r7, sp, #16
 8015520:	6078      	str	r0, [r7, #4]
 8015522:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	695b      	ldr	r3, [r3, #20]
 8015528:	2b00      	cmp	r3, #0
 801552a:	d020      	beq.n	801556e <osThreadCreate+0x54>
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	699b      	ldr	r3, [r3, #24]
 8015530:	2b00      	cmp	r3, #0
 8015532:	d01c      	beq.n	801556e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	685c      	ldr	r4, [r3, #4]
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	681d      	ldr	r5, [r3, #0]
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	691e      	ldr	r6, [r3, #16]
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8015546:	4618      	mov	r0, r3
 8015548:	f7ff ffc8 	bl	80154dc <makeFreeRtosPriority>
 801554c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	695b      	ldr	r3, [r3, #20]
 8015552:	687a      	ldr	r2, [r7, #4]
 8015554:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015556:	9202      	str	r2, [sp, #8]
 8015558:	9301      	str	r3, [sp, #4]
 801555a:	9100      	str	r1, [sp, #0]
 801555c:	683b      	ldr	r3, [r7, #0]
 801555e:	4632      	mov	r2, r6
 8015560:	4629      	mov	r1, r5
 8015562:	4620      	mov	r0, r4
 8015564:	f001 f892 	bl	801668c <xTaskCreateStatic>
 8015568:	4603      	mov	r3, r0
 801556a:	60fb      	str	r3, [r7, #12]
 801556c:	e01c      	b.n	80155a8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	685c      	ldr	r4, [r3, #4]
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801557a:	b29e      	uxth	r6, r3
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8015582:	4618      	mov	r0, r3
 8015584:	f7ff ffaa 	bl	80154dc <makeFreeRtosPriority>
 8015588:	4602      	mov	r2, r0
 801558a:	f107 030c 	add.w	r3, r7, #12
 801558e:	9301      	str	r3, [sp, #4]
 8015590:	9200      	str	r2, [sp, #0]
 8015592:	683b      	ldr	r3, [r7, #0]
 8015594:	4632      	mov	r2, r6
 8015596:	4629      	mov	r1, r5
 8015598:	4620      	mov	r0, r4
 801559a:	f001 f8da 	bl	8016752 <xTaskCreate>
 801559e:	4603      	mov	r3, r0
 80155a0:	2b01      	cmp	r3, #1
 80155a2:	d001      	beq.n	80155a8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80155a4:	2300      	movs	r3, #0
 80155a6:	e000      	b.n	80155aa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80155a8:	68fb      	ldr	r3, [r7, #12]
}
 80155aa:	4618      	mov	r0, r3
 80155ac:	3714      	adds	r7, #20
 80155ae:	46bd      	mov	sp, r7
 80155b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080155b4 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80155b4:	b580      	push	{r7, lr}
 80155b6:	b086      	sub	sp, #24
 80155b8:	af02      	add	r7, sp, #8
 80155ba:	60f8      	str	r0, [r7, #12]
 80155bc:	460b      	mov	r3, r1
 80155be:	607a      	str	r2, [r7, #4]
 80155c0:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 80155c2:	68fb      	ldr	r3, [r7, #12]
 80155c4:	685b      	ldr	r3, [r3, #4]
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	d013      	beq.n	80155f2 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 80155ca:	7afb      	ldrb	r3, [r7, #11]
 80155cc:	2b01      	cmp	r3, #1
 80155ce:	d101      	bne.n	80155d4 <osTimerCreate+0x20>
 80155d0:	2101      	movs	r1, #1
 80155d2:	e000      	b.n	80155d6 <osTimerCreate+0x22>
 80155d4:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 80155d6:	68fb      	ldr	r3, [r7, #12]
 80155d8:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 80155da:	68fa      	ldr	r2, [r7, #12]
 80155dc:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 80155de:	9201      	str	r2, [sp, #4]
 80155e0:	9300      	str	r3, [sp, #0]
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	460a      	mov	r2, r1
 80155e6:	2101      	movs	r1, #1
 80155e8:	480b      	ldr	r0, [pc, #44]	; (8015618 <osTimerCreate+0x64>)
 80155ea:	f002 fa14 	bl	8017a16 <xTimerCreateStatic>
 80155ee:	4603      	mov	r3, r0
 80155f0:	e00e      	b.n	8015610 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 80155f2:	7afb      	ldrb	r3, [r7, #11]
 80155f4:	2b01      	cmp	r3, #1
 80155f6:	d101      	bne.n	80155fc <osTimerCreate+0x48>
 80155f8:	2201      	movs	r2, #1
 80155fa:	e000      	b.n	80155fe <osTimerCreate+0x4a>
 80155fc:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 80155fe:	68fb      	ldr	r3, [r7, #12]
 8015600:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8015602:	9300      	str	r3, [sp, #0]
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	2101      	movs	r1, #1
 8015608:	4803      	ldr	r0, [pc, #12]	; (8015618 <osTimerCreate+0x64>)
 801560a:	f002 f9e3 	bl	80179d4 <xTimerCreate>
 801560e:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8015610:	4618      	mov	r0, r3
 8015612:	3710      	adds	r7, #16
 8015614:	46bd      	mov	sp, r7
 8015616:	bd80      	pop	{r7, pc}
 8015618:	080217f8 	.word	0x080217f8

0801561c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 801561c:	b580      	push	{r7, lr}
 801561e:	b086      	sub	sp, #24
 8015620:	af02      	add	r7, sp, #8
 8015622:	6078      	str	r0, [r7, #4]
 8015624:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	685b      	ldr	r3, [r3, #4]
 801562a:	2b00      	cmp	r3, #0
 801562c:	d00f      	beq.n	801564e <osSemaphoreCreate+0x32>
    if (count == 1) {
 801562e:	683b      	ldr	r3, [r7, #0]
 8015630:	2b01      	cmp	r3, #1
 8015632:	d10a      	bne.n	801564a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	685b      	ldr	r3, [r3, #4]
 8015638:	2203      	movs	r2, #3
 801563a:	9200      	str	r2, [sp, #0]
 801563c:	2200      	movs	r2, #0
 801563e:	2100      	movs	r1, #0
 8015640:	2001      	movs	r0, #1
 8015642:	f000 f963 	bl	801590c <xQueueGenericCreateStatic>
 8015646:	4603      	mov	r3, r0
 8015648:	e016      	b.n	8015678 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 801564a:	2300      	movs	r3, #0
 801564c:	e014      	b.n	8015678 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 801564e:	683b      	ldr	r3, [r7, #0]
 8015650:	2b01      	cmp	r3, #1
 8015652:	d110      	bne.n	8015676 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8015654:	2203      	movs	r2, #3
 8015656:	2100      	movs	r1, #0
 8015658:	2001      	movs	r0, #1
 801565a:	f000 f9d9 	bl	8015a10 <xQueueGenericCreate>
 801565e:	60f8      	str	r0, [r7, #12]
 8015660:	68fb      	ldr	r3, [r7, #12]
 8015662:	2b00      	cmp	r3, #0
 8015664:	d005      	beq.n	8015672 <osSemaphoreCreate+0x56>
 8015666:	2300      	movs	r3, #0
 8015668:	2200      	movs	r2, #0
 801566a:	2100      	movs	r1, #0
 801566c:	68f8      	ldr	r0, [r7, #12]
 801566e:	f000 fa31 	bl	8015ad4 <xQueueGenericSend>
      return sema;
 8015672:	68fb      	ldr	r3, [r7, #12]
 8015674:	e000      	b.n	8015678 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8015676:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8015678:	4618      	mov	r0, r3
 801567a:	3710      	adds	r7, #16
 801567c:	46bd      	mov	sp, r7
 801567e:	bd80      	pop	{r7, pc}

08015680 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8015680:	b590      	push	{r4, r7, lr}
 8015682:	b085      	sub	sp, #20
 8015684:	af02      	add	r7, sp, #8
 8015686:	6078      	str	r0, [r7, #4]
 8015688:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	689b      	ldr	r3, [r3, #8]
 801568e:	2b00      	cmp	r3, #0
 8015690:	d011      	beq.n	80156b6 <osMessageCreate+0x36>
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	68db      	ldr	r3, [r3, #12]
 8015696:	2b00      	cmp	r3, #0
 8015698:	d00d      	beq.n	80156b6 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	6818      	ldr	r0, [r3, #0]
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	6859      	ldr	r1, [r3, #4]
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	689a      	ldr	r2, [r3, #8]
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	68db      	ldr	r3, [r3, #12]
 80156aa:	2400      	movs	r4, #0
 80156ac:	9400      	str	r4, [sp, #0]
 80156ae:	f000 f92d 	bl	801590c <xQueueGenericCreateStatic>
 80156b2:	4603      	mov	r3, r0
 80156b4:	e008      	b.n	80156c8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	6818      	ldr	r0, [r3, #0]
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	685b      	ldr	r3, [r3, #4]
 80156be:	2200      	movs	r2, #0
 80156c0:	4619      	mov	r1, r3
 80156c2:	f000 f9a5 	bl	8015a10 <xQueueGenericCreate>
 80156c6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80156c8:	4618      	mov	r0, r3
 80156ca:	370c      	adds	r7, #12
 80156cc:	46bd      	mov	sp, r7
 80156ce:	bd90      	pop	{r4, r7, pc}

080156d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80156d0:	b480      	push	{r7}
 80156d2:	b083      	sub	sp, #12
 80156d4:	af00      	add	r7, sp, #0
 80156d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	f103 0208 	add.w	r2, r3, #8
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	f04f 32ff 	mov.w	r2, #4294967295
 80156e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	f103 0208 	add.w	r2, r3, #8
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	f103 0208 	add.w	r2, r3, #8
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	2200      	movs	r2, #0
 8015702:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8015704:	bf00      	nop
 8015706:	370c      	adds	r7, #12
 8015708:	46bd      	mov	sp, r7
 801570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801570e:	4770      	bx	lr

08015710 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8015710:	b480      	push	{r7}
 8015712:	b083      	sub	sp, #12
 8015714:	af00      	add	r7, sp, #0
 8015716:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	2200      	movs	r2, #0
 801571c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801571e:	bf00      	nop
 8015720:	370c      	adds	r7, #12
 8015722:	46bd      	mov	sp, r7
 8015724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015728:	4770      	bx	lr

0801572a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801572a:	b480      	push	{r7}
 801572c:	b085      	sub	sp, #20
 801572e:	af00      	add	r7, sp, #0
 8015730:	6078      	str	r0, [r7, #4]
 8015732:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	685b      	ldr	r3, [r3, #4]
 8015738:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801573a:	683b      	ldr	r3, [r7, #0]
 801573c:	68fa      	ldr	r2, [r7, #12]
 801573e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8015740:	68fb      	ldr	r3, [r7, #12]
 8015742:	689a      	ldr	r2, [r3, #8]
 8015744:	683b      	ldr	r3, [r7, #0]
 8015746:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8015748:	68fb      	ldr	r3, [r7, #12]
 801574a:	689b      	ldr	r3, [r3, #8]
 801574c:	683a      	ldr	r2, [r7, #0]
 801574e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	683a      	ldr	r2, [r7, #0]
 8015754:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8015756:	683b      	ldr	r3, [r7, #0]
 8015758:	687a      	ldr	r2, [r7, #4]
 801575a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	681b      	ldr	r3, [r3, #0]
 8015760:	1c5a      	adds	r2, r3, #1
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	601a      	str	r2, [r3, #0]
}
 8015766:	bf00      	nop
 8015768:	3714      	adds	r7, #20
 801576a:	46bd      	mov	sp, r7
 801576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015770:	4770      	bx	lr

08015772 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015772:	b480      	push	{r7}
 8015774:	b085      	sub	sp, #20
 8015776:	af00      	add	r7, sp, #0
 8015778:	6078      	str	r0, [r7, #4]
 801577a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801577c:	683b      	ldr	r3, [r7, #0]
 801577e:	681b      	ldr	r3, [r3, #0]
 8015780:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8015782:	68bb      	ldr	r3, [r7, #8]
 8015784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015788:	d103      	bne.n	8015792 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	691b      	ldr	r3, [r3, #16]
 801578e:	60fb      	str	r3, [r7, #12]
 8015790:	e00c      	b.n	80157ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	3308      	adds	r3, #8
 8015796:	60fb      	str	r3, [r7, #12]
 8015798:	e002      	b.n	80157a0 <vListInsert+0x2e>
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	685b      	ldr	r3, [r3, #4]
 801579e:	60fb      	str	r3, [r7, #12]
 80157a0:	68fb      	ldr	r3, [r7, #12]
 80157a2:	685b      	ldr	r3, [r3, #4]
 80157a4:	681b      	ldr	r3, [r3, #0]
 80157a6:	68ba      	ldr	r2, [r7, #8]
 80157a8:	429a      	cmp	r2, r3
 80157aa:	d2f6      	bcs.n	801579a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	685a      	ldr	r2, [r3, #4]
 80157b0:	683b      	ldr	r3, [r7, #0]
 80157b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80157b4:	683b      	ldr	r3, [r7, #0]
 80157b6:	685b      	ldr	r3, [r3, #4]
 80157b8:	683a      	ldr	r2, [r7, #0]
 80157ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80157bc:	683b      	ldr	r3, [r7, #0]
 80157be:	68fa      	ldr	r2, [r7, #12]
 80157c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80157c2:	68fb      	ldr	r3, [r7, #12]
 80157c4:	683a      	ldr	r2, [r7, #0]
 80157c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80157c8:	683b      	ldr	r3, [r7, #0]
 80157ca:	687a      	ldr	r2, [r7, #4]
 80157cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	681b      	ldr	r3, [r3, #0]
 80157d2:	1c5a      	adds	r2, r3, #1
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	601a      	str	r2, [r3, #0]
}
 80157d8:	bf00      	nop
 80157da:	3714      	adds	r7, #20
 80157dc:	46bd      	mov	sp, r7
 80157de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157e2:	4770      	bx	lr

080157e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80157e4:	b480      	push	{r7}
 80157e6:	b085      	sub	sp, #20
 80157e8:	af00      	add	r7, sp, #0
 80157ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	691b      	ldr	r3, [r3, #16]
 80157f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	685b      	ldr	r3, [r3, #4]
 80157f6:	687a      	ldr	r2, [r7, #4]
 80157f8:	6892      	ldr	r2, [r2, #8]
 80157fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	689b      	ldr	r3, [r3, #8]
 8015800:	687a      	ldr	r2, [r7, #4]
 8015802:	6852      	ldr	r2, [r2, #4]
 8015804:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8015806:	68fb      	ldr	r3, [r7, #12]
 8015808:	685b      	ldr	r3, [r3, #4]
 801580a:	687a      	ldr	r2, [r7, #4]
 801580c:	429a      	cmp	r2, r3
 801580e:	d103      	bne.n	8015818 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	689a      	ldr	r2, [r3, #8]
 8015814:	68fb      	ldr	r3, [r7, #12]
 8015816:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	2200      	movs	r2, #0
 801581c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	681b      	ldr	r3, [r3, #0]
 8015822:	1e5a      	subs	r2, r3, #1
 8015824:	68fb      	ldr	r3, [r7, #12]
 8015826:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8015828:	68fb      	ldr	r3, [r7, #12]
 801582a:	681b      	ldr	r3, [r3, #0]
}
 801582c:	4618      	mov	r0, r3
 801582e:	3714      	adds	r7, #20
 8015830:	46bd      	mov	sp, r7
 8015832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015836:	4770      	bx	lr

08015838 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8015838:	b580      	push	{r7, lr}
 801583a:	b084      	sub	sp, #16
 801583c:	af00      	add	r7, sp, #0
 801583e:	6078      	str	r0, [r7, #4]
 8015840:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015846:	68fb      	ldr	r3, [r7, #12]
 8015848:	2b00      	cmp	r3, #0
 801584a:	d10c      	bne.n	8015866 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801584c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015850:	b672      	cpsid	i
 8015852:	f383 8811 	msr	BASEPRI, r3
 8015856:	f3bf 8f6f 	isb	sy
 801585a:	f3bf 8f4f 	dsb	sy
 801585e:	b662      	cpsie	i
 8015860:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8015862:	bf00      	nop
 8015864:	e7fe      	b.n	8015864 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8015866:	f002 fd59 	bl	801831c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801586a:	68fb      	ldr	r3, [r7, #12]
 801586c:	681a      	ldr	r2, [r3, #0]
 801586e:	68fb      	ldr	r3, [r7, #12]
 8015870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015872:	68f9      	ldr	r1, [r7, #12]
 8015874:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015876:	fb01 f303 	mul.w	r3, r1, r3
 801587a:	441a      	add	r2, r3
 801587c:	68fb      	ldr	r3, [r7, #12]
 801587e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8015880:	68fb      	ldr	r3, [r7, #12]
 8015882:	2200      	movs	r2, #0
 8015884:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8015886:	68fb      	ldr	r3, [r7, #12]
 8015888:	681a      	ldr	r2, [r3, #0]
 801588a:	68fb      	ldr	r3, [r7, #12]
 801588c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801588e:	68fb      	ldr	r3, [r7, #12]
 8015890:	681a      	ldr	r2, [r3, #0]
 8015892:	68fb      	ldr	r3, [r7, #12]
 8015894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015896:	3b01      	subs	r3, #1
 8015898:	68f9      	ldr	r1, [r7, #12]
 801589a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801589c:	fb01 f303 	mul.w	r3, r1, r3
 80158a0:	441a      	add	r2, r3
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80158a6:	68fb      	ldr	r3, [r7, #12]
 80158a8:	22ff      	movs	r2, #255	; 0xff
 80158aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	22ff      	movs	r2, #255	; 0xff
 80158b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80158b6:	683b      	ldr	r3, [r7, #0]
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d114      	bne.n	80158e6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80158bc:	68fb      	ldr	r3, [r7, #12]
 80158be:	691b      	ldr	r3, [r3, #16]
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d01a      	beq.n	80158fa <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80158c4:	68fb      	ldr	r3, [r7, #12]
 80158c6:	3310      	adds	r3, #16
 80158c8:	4618      	mov	r0, r3
 80158ca:	f001 fc35 	bl	8017138 <xTaskRemoveFromEventList>
 80158ce:	4603      	mov	r3, r0
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d012      	beq.n	80158fa <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80158d4:	4b0c      	ldr	r3, [pc, #48]	; (8015908 <xQueueGenericReset+0xd0>)
 80158d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80158da:	601a      	str	r2, [r3, #0]
 80158dc:	f3bf 8f4f 	dsb	sy
 80158e0:	f3bf 8f6f 	isb	sy
 80158e4:	e009      	b.n	80158fa <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80158e6:	68fb      	ldr	r3, [r7, #12]
 80158e8:	3310      	adds	r3, #16
 80158ea:	4618      	mov	r0, r3
 80158ec:	f7ff fef0 	bl	80156d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80158f0:	68fb      	ldr	r3, [r7, #12]
 80158f2:	3324      	adds	r3, #36	; 0x24
 80158f4:	4618      	mov	r0, r3
 80158f6:	f7ff feeb 	bl	80156d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80158fa:	f002 fd43 	bl	8018384 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80158fe:	2301      	movs	r3, #1
}
 8015900:	4618      	mov	r0, r3
 8015902:	3710      	adds	r7, #16
 8015904:	46bd      	mov	sp, r7
 8015906:	bd80      	pop	{r7, pc}
 8015908:	e000ed04 	.word	0xe000ed04

0801590c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801590c:	b580      	push	{r7, lr}
 801590e:	b08e      	sub	sp, #56	; 0x38
 8015910:	af02      	add	r7, sp, #8
 8015912:	60f8      	str	r0, [r7, #12]
 8015914:	60b9      	str	r1, [r7, #8]
 8015916:	607a      	str	r2, [r7, #4]
 8015918:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801591a:	68fb      	ldr	r3, [r7, #12]
 801591c:	2b00      	cmp	r3, #0
 801591e:	d10c      	bne.n	801593a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8015920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015924:	b672      	cpsid	i
 8015926:	f383 8811 	msr	BASEPRI, r3
 801592a:	f3bf 8f6f 	isb	sy
 801592e:	f3bf 8f4f 	dsb	sy
 8015932:	b662      	cpsie	i
 8015934:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015936:	bf00      	nop
 8015938:	e7fe      	b.n	8015938 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801593a:	683b      	ldr	r3, [r7, #0]
 801593c:	2b00      	cmp	r3, #0
 801593e:	d10c      	bne.n	801595a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8015940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015944:	b672      	cpsid	i
 8015946:	f383 8811 	msr	BASEPRI, r3
 801594a:	f3bf 8f6f 	isb	sy
 801594e:	f3bf 8f4f 	dsb	sy
 8015952:	b662      	cpsie	i
 8015954:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015956:	bf00      	nop
 8015958:	e7fe      	b.n	8015958 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	2b00      	cmp	r3, #0
 801595e:	d002      	beq.n	8015966 <xQueueGenericCreateStatic+0x5a>
 8015960:	68bb      	ldr	r3, [r7, #8]
 8015962:	2b00      	cmp	r3, #0
 8015964:	d001      	beq.n	801596a <xQueueGenericCreateStatic+0x5e>
 8015966:	2301      	movs	r3, #1
 8015968:	e000      	b.n	801596c <xQueueGenericCreateStatic+0x60>
 801596a:	2300      	movs	r3, #0
 801596c:	2b00      	cmp	r3, #0
 801596e:	d10c      	bne.n	801598a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8015970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015974:	b672      	cpsid	i
 8015976:	f383 8811 	msr	BASEPRI, r3
 801597a:	f3bf 8f6f 	isb	sy
 801597e:	f3bf 8f4f 	dsb	sy
 8015982:	b662      	cpsie	i
 8015984:	623b      	str	r3, [r7, #32]
}
 8015986:	bf00      	nop
 8015988:	e7fe      	b.n	8015988 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	2b00      	cmp	r3, #0
 801598e:	d102      	bne.n	8015996 <xQueueGenericCreateStatic+0x8a>
 8015990:	68bb      	ldr	r3, [r7, #8]
 8015992:	2b00      	cmp	r3, #0
 8015994:	d101      	bne.n	801599a <xQueueGenericCreateStatic+0x8e>
 8015996:	2301      	movs	r3, #1
 8015998:	e000      	b.n	801599c <xQueueGenericCreateStatic+0x90>
 801599a:	2300      	movs	r3, #0
 801599c:	2b00      	cmp	r3, #0
 801599e:	d10c      	bne.n	80159ba <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80159a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159a4:	b672      	cpsid	i
 80159a6:	f383 8811 	msr	BASEPRI, r3
 80159aa:	f3bf 8f6f 	isb	sy
 80159ae:	f3bf 8f4f 	dsb	sy
 80159b2:	b662      	cpsie	i
 80159b4:	61fb      	str	r3, [r7, #28]
}
 80159b6:	bf00      	nop
 80159b8:	e7fe      	b.n	80159b8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80159ba:	2348      	movs	r3, #72	; 0x48
 80159bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80159be:	697b      	ldr	r3, [r7, #20]
 80159c0:	2b48      	cmp	r3, #72	; 0x48
 80159c2:	d00c      	beq.n	80159de <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80159c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159c8:	b672      	cpsid	i
 80159ca:	f383 8811 	msr	BASEPRI, r3
 80159ce:	f3bf 8f6f 	isb	sy
 80159d2:	f3bf 8f4f 	dsb	sy
 80159d6:	b662      	cpsie	i
 80159d8:	61bb      	str	r3, [r7, #24]
}
 80159da:	bf00      	nop
 80159dc:	e7fe      	b.n	80159dc <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80159de:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80159e0:	683b      	ldr	r3, [r7, #0]
 80159e2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80159e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d00d      	beq.n	8015a06 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80159ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159ec:	2201      	movs	r2, #1
 80159ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80159f2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80159f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159f8:	9300      	str	r3, [sp, #0]
 80159fa:	4613      	mov	r3, r2
 80159fc:	687a      	ldr	r2, [r7, #4]
 80159fe:	68b9      	ldr	r1, [r7, #8]
 8015a00:	68f8      	ldr	r0, [r7, #12]
 8015a02:	f000 f847 	bl	8015a94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8015a08:	4618      	mov	r0, r3
 8015a0a:	3730      	adds	r7, #48	; 0x30
 8015a0c:	46bd      	mov	sp, r7
 8015a0e:	bd80      	pop	{r7, pc}

08015a10 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8015a10:	b580      	push	{r7, lr}
 8015a12:	b08a      	sub	sp, #40	; 0x28
 8015a14:	af02      	add	r7, sp, #8
 8015a16:	60f8      	str	r0, [r7, #12]
 8015a18:	60b9      	str	r1, [r7, #8]
 8015a1a:	4613      	mov	r3, r2
 8015a1c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015a1e:	68fb      	ldr	r3, [r7, #12]
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d10c      	bne.n	8015a3e <xQueueGenericCreate+0x2e>
	__asm volatile
 8015a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a28:	b672      	cpsid	i
 8015a2a:	f383 8811 	msr	BASEPRI, r3
 8015a2e:	f3bf 8f6f 	isb	sy
 8015a32:	f3bf 8f4f 	dsb	sy
 8015a36:	b662      	cpsie	i
 8015a38:	613b      	str	r3, [r7, #16]
}
 8015a3a:	bf00      	nop
 8015a3c:	e7fe      	b.n	8015a3c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8015a3e:	68bb      	ldr	r3, [r7, #8]
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	d102      	bne.n	8015a4a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8015a44:	2300      	movs	r3, #0
 8015a46:	61fb      	str	r3, [r7, #28]
 8015a48:	e004      	b.n	8015a54 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015a4a:	68fb      	ldr	r3, [r7, #12]
 8015a4c:	68ba      	ldr	r2, [r7, #8]
 8015a4e:	fb02 f303 	mul.w	r3, r2, r3
 8015a52:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015a54:	69fb      	ldr	r3, [r7, #28]
 8015a56:	3348      	adds	r3, #72	; 0x48
 8015a58:	4618      	mov	r0, r3
 8015a5a:	f002 fd8b 	bl	8018574 <pvPortMalloc>
 8015a5e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8015a60:	69bb      	ldr	r3, [r7, #24]
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d011      	beq.n	8015a8a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8015a66:	69bb      	ldr	r3, [r7, #24]
 8015a68:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015a6a:	697b      	ldr	r3, [r7, #20]
 8015a6c:	3348      	adds	r3, #72	; 0x48
 8015a6e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015a70:	69bb      	ldr	r3, [r7, #24]
 8015a72:	2200      	movs	r2, #0
 8015a74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015a78:	79fa      	ldrb	r2, [r7, #7]
 8015a7a:	69bb      	ldr	r3, [r7, #24]
 8015a7c:	9300      	str	r3, [sp, #0]
 8015a7e:	4613      	mov	r3, r2
 8015a80:	697a      	ldr	r2, [r7, #20]
 8015a82:	68b9      	ldr	r1, [r7, #8]
 8015a84:	68f8      	ldr	r0, [r7, #12]
 8015a86:	f000 f805 	bl	8015a94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015a8a:	69bb      	ldr	r3, [r7, #24]
	}
 8015a8c:	4618      	mov	r0, r3
 8015a8e:	3720      	adds	r7, #32
 8015a90:	46bd      	mov	sp, r7
 8015a92:	bd80      	pop	{r7, pc}

08015a94 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8015a94:	b580      	push	{r7, lr}
 8015a96:	b084      	sub	sp, #16
 8015a98:	af00      	add	r7, sp, #0
 8015a9a:	60f8      	str	r0, [r7, #12]
 8015a9c:	60b9      	str	r1, [r7, #8]
 8015a9e:	607a      	str	r2, [r7, #4]
 8015aa0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8015aa2:	68bb      	ldr	r3, [r7, #8]
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d103      	bne.n	8015ab0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015aa8:	69bb      	ldr	r3, [r7, #24]
 8015aaa:	69ba      	ldr	r2, [r7, #24]
 8015aac:	601a      	str	r2, [r3, #0]
 8015aae:	e002      	b.n	8015ab6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8015ab0:	69bb      	ldr	r3, [r7, #24]
 8015ab2:	687a      	ldr	r2, [r7, #4]
 8015ab4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8015ab6:	69bb      	ldr	r3, [r7, #24]
 8015ab8:	68fa      	ldr	r2, [r7, #12]
 8015aba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8015abc:	69bb      	ldr	r3, [r7, #24]
 8015abe:	68ba      	ldr	r2, [r7, #8]
 8015ac0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015ac2:	2101      	movs	r1, #1
 8015ac4:	69b8      	ldr	r0, [r7, #24]
 8015ac6:	f7ff feb7 	bl	8015838 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8015aca:	bf00      	nop
 8015acc:	3710      	adds	r7, #16
 8015ace:	46bd      	mov	sp, r7
 8015ad0:	bd80      	pop	{r7, pc}
	...

08015ad4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8015ad4:	b580      	push	{r7, lr}
 8015ad6:	b08e      	sub	sp, #56	; 0x38
 8015ad8:	af00      	add	r7, sp, #0
 8015ada:	60f8      	str	r0, [r7, #12]
 8015adc:	60b9      	str	r1, [r7, #8]
 8015ade:	607a      	str	r2, [r7, #4]
 8015ae0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8015ae2:	2300      	movs	r3, #0
 8015ae4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015ae6:	68fb      	ldr	r3, [r7, #12]
 8015ae8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d10c      	bne.n	8015b0a <xQueueGenericSend+0x36>
	__asm volatile
 8015af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015af4:	b672      	cpsid	i
 8015af6:	f383 8811 	msr	BASEPRI, r3
 8015afa:	f3bf 8f6f 	isb	sy
 8015afe:	f3bf 8f4f 	dsb	sy
 8015b02:	b662      	cpsie	i
 8015b04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015b06:	bf00      	nop
 8015b08:	e7fe      	b.n	8015b08 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015b0a:	68bb      	ldr	r3, [r7, #8]
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d103      	bne.n	8015b18 <xQueueGenericSend+0x44>
 8015b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d101      	bne.n	8015b1c <xQueueGenericSend+0x48>
 8015b18:	2301      	movs	r3, #1
 8015b1a:	e000      	b.n	8015b1e <xQueueGenericSend+0x4a>
 8015b1c:	2300      	movs	r3, #0
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d10c      	bne.n	8015b3c <xQueueGenericSend+0x68>
	__asm volatile
 8015b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b26:	b672      	cpsid	i
 8015b28:	f383 8811 	msr	BASEPRI, r3
 8015b2c:	f3bf 8f6f 	isb	sy
 8015b30:	f3bf 8f4f 	dsb	sy
 8015b34:	b662      	cpsie	i
 8015b36:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015b38:	bf00      	nop
 8015b3a:	e7fe      	b.n	8015b3a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015b3c:	683b      	ldr	r3, [r7, #0]
 8015b3e:	2b02      	cmp	r3, #2
 8015b40:	d103      	bne.n	8015b4a <xQueueGenericSend+0x76>
 8015b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015b46:	2b01      	cmp	r3, #1
 8015b48:	d101      	bne.n	8015b4e <xQueueGenericSend+0x7a>
 8015b4a:	2301      	movs	r3, #1
 8015b4c:	e000      	b.n	8015b50 <xQueueGenericSend+0x7c>
 8015b4e:	2300      	movs	r3, #0
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	d10c      	bne.n	8015b6e <xQueueGenericSend+0x9a>
	__asm volatile
 8015b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b58:	b672      	cpsid	i
 8015b5a:	f383 8811 	msr	BASEPRI, r3
 8015b5e:	f3bf 8f6f 	isb	sy
 8015b62:	f3bf 8f4f 	dsb	sy
 8015b66:	b662      	cpsie	i
 8015b68:	623b      	str	r3, [r7, #32]
}
 8015b6a:	bf00      	nop
 8015b6c:	e7fe      	b.n	8015b6c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015b6e:	f001 fca7 	bl	80174c0 <xTaskGetSchedulerState>
 8015b72:	4603      	mov	r3, r0
 8015b74:	2b00      	cmp	r3, #0
 8015b76:	d102      	bne.n	8015b7e <xQueueGenericSend+0xaa>
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d101      	bne.n	8015b82 <xQueueGenericSend+0xae>
 8015b7e:	2301      	movs	r3, #1
 8015b80:	e000      	b.n	8015b84 <xQueueGenericSend+0xb0>
 8015b82:	2300      	movs	r3, #0
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d10c      	bne.n	8015ba2 <xQueueGenericSend+0xce>
	__asm volatile
 8015b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b8c:	b672      	cpsid	i
 8015b8e:	f383 8811 	msr	BASEPRI, r3
 8015b92:	f3bf 8f6f 	isb	sy
 8015b96:	f3bf 8f4f 	dsb	sy
 8015b9a:	b662      	cpsie	i
 8015b9c:	61fb      	str	r3, [r7, #28]
}
 8015b9e:	bf00      	nop
 8015ba0:	e7fe      	b.n	8015ba0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015ba2:	f002 fbbb 	bl	801831c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ba8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015bae:	429a      	cmp	r2, r3
 8015bb0:	d302      	bcc.n	8015bb8 <xQueueGenericSend+0xe4>
 8015bb2:	683b      	ldr	r3, [r7, #0]
 8015bb4:	2b02      	cmp	r3, #2
 8015bb6:	d129      	bne.n	8015c0c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015bb8:	683a      	ldr	r2, [r7, #0]
 8015bba:	68b9      	ldr	r1, [r7, #8]
 8015bbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015bbe:	f000 fbf7 	bl	80163b0 <prvCopyDataToQueue>
 8015bc2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	d010      	beq.n	8015bee <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bce:	3324      	adds	r3, #36	; 0x24
 8015bd0:	4618      	mov	r0, r3
 8015bd2:	f001 fab1 	bl	8017138 <xTaskRemoveFromEventList>
 8015bd6:	4603      	mov	r3, r0
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	d013      	beq.n	8015c04 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8015bdc:	4b3f      	ldr	r3, [pc, #252]	; (8015cdc <xQueueGenericSend+0x208>)
 8015bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015be2:	601a      	str	r2, [r3, #0]
 8015be4:	f3bf 8f4f 	dsb	sy
 8015be8:	f3bf 8f6f 	isb	sy
 8015bec:	e00a      	b.n	8015c04 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8015bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bf0:	2b00      	cmp	r3, #0
 8015bf2:	d007      	beq.n	8015c04 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8015bf4:	4b39      	ldr	r3, [pc, #228]	; (8015cdc <xQueueGenericSend+0x208>)
 8015bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015bfa:	601a      	str	r2, [r3, #0]
 8015bfc:	f3bf 8f4f 	dsb	sy
 8015c00:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8015c04:	f002 fbbe 	bl	8018384 <vPortExitCritical>
				return pdPASS;
 8015c08:	2301      	movs	r3, #1
 8015c0a:	e063      	b.n	8015cd4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d103      	bne.n	8015c1a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015c12:	f002 fbb7 	bl	8018384 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8015c16:	2300      	movs	r3, #0
 8015c18:	e05c      	b.n	8015cd4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	d106      	bne.n	8015c2e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015c20:	f107 0314 	add.w	r3, r7, #20
 8015c24:	4618      	mov	r0, r3
 8015c26:	f001 faeb 	bl	8017200 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015c2a:	2301      	movs	r3, #1
 8015c2c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015c2e:	f002 fba9 	bl	8018384 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015c32:	f001 f859 	bl	8016ce8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015c36:	f002 fb71 	bl	801831c <vPortEnterCritical>
 8015c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015c40:	b25b      	sxtb	r3, r3
 8015c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c46:	d103      	bne.n	8015c50 <xQueueGenericSend+0x17c>
 8015c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c4a:	2200      	movs	r2, #0
 8015c4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015c56:	b25b      	sxtb	r3, r3
 8015c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c5c:	d103      	bne.n	8015c66 <xQueueGenericSend+0x192>
 8015c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c60:	2200      	movs	r2, #0
 8015c62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015c66:	f002 fb8d 	bl	8018384 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015c6a:	1d3a      	adds	r2, r7, #4
 8015c6c:	f107 0314 	add.w	r3, r7, #20
 8015c70:	4611      	mov	r1, r2
 8015c72:	4618      	mov	r0, r3
 8015c74:	f001 fada 	bl	801722c <xTaskCheckForTimeOut>
 8015c78:	4603      	mov	r3, r0
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	d124      	bne.n	8015cc8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8015c7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015c80:	f000 fc8e 	bl	80165a0 <prvIsQueueFull>
 8015c84:	4603      	mov	r3, r0
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d018      	beq.n	8015cbc <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8015c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c8c:	3310      	adds	r3, #16
 8015c8e:	687a      	ldr	r2, [r7, #4]
 8015c90:	4611      	mov	r1, r2
 8015c92:	4618      	mov	r0, r3
 8015c94:	f001 f9fc 	bl	8017090 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8015c98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015c9a:	f000 fc19 	bl	80164d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8015c9e:	f001 f831 	bl	8016d04 <xTaskResumeAll>
 8015ca2:	4603      	mov	r3, r0
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	f47f af7c 	bne.w	8015ba2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8015caa:	4b0c      	ldr	r3, [pc, #48]	; (8015cdc <xQueueGenericSend+0x208>)
 8015cac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015cb0:	601a      	str	r2, [r3, #0]
 8015cb2:	f3bf 8f4f 	dsb	sy
 8015cb6:	f3bf 8f6f 	isb	sy
 8015cba:	e772      	b.n	8015ba2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015cbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015cbe:	f000 fc07 	bl	80164d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015cc2:	f001 f81f 	bl	8016d04 <xTaskResumeAll>
 8015cc6:	e76c      	b.n	8015ba2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8015cc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015cca:	f000 fc01 	bl	80164d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015cce:	f001 f819 	bl	8016d04 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8015cd2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8015cd4:	4618      	mov	r0, r3
 8015cd6:	3738      	adds	r7, #56	; 0x38
 8015cd8:	46bd      	mov	sp, r7
 8015cda:	bd80      	pop	{r7, pc}
 8015cdc:	e000ed04 	.word	0xe000ed04

08015ce0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8015ce0:	b580      	push	{r7, lr}
 8015ce2:	b08e      	sub	sp, #56	; 0x38
 8015ce4:	af00      	add	r7, sp, #0
 8015ce6:	60f8      	str	r0, [r7, #12]
 8015ce8:	60b9      	str	r1, [r7, #8]
 8015cea:	607a      	str	r2, [r7, #4]
 8015cec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015cee:	68fb      	ldr	r3, [r7, #12]
 8015cf0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	d10c      	bne.n	8015d12 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8015cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cfc:	b672      	cpsid	i
 8015cfe:	f383 8811 	msr	BASEPRI, r3
 8015d02:	f3bf 8f6f 	isb	sy
 8015d06:	f3bf 8f4f 	dsb	sy
 8015d0a:	b662      	cpsie	i
 8015d0c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015d0e:	bf00      	nop
 8015d10:	e7fe      	b.n	8015d10 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015d12:	68bb      	ldr	r3, [r7, #8]
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	d103      	bne.n	8015d20 <xQueueGenericSendFromISR+0x40>
 8015d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d101      	bne.n	8015d24 <xQueueGenericSendFromISR+0x44>
 8015d20:	2301      	movs	r3, #1
 8015d22:	e000      	b.n	8015d26 <xQueueGenericSendFromISR+0x46>
 8015d24:	2300      	movs	r3, #0
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	d10c      	bne.n	8015d44 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8015d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d2e:	b672      	cpsid	i
 8015d30:	f383 8811 	msr	BASEPRI, r3
 8015d34:	f3bf 8f6f 	isb	sy
 8015d38:	f3bf 8f4f 	dsb	sy
 8015d3c:	b662      	cpsie	i
 8015d3e:	623b      	str	r3, [r7, #32]
}
 8015d40:	bf00      	nop
 8015d42:	e7fe      	b.n	8015d42 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015d44:	683b      	ldr	r3, [r7, #0]
 8015d46:	2b02      	cmp	r3, #2
 8015d48:	d103      	bne.n	8015d52 <xQueueGenericSendFromISR+0x72>
 8015d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015d4e:	2b01      	cmp	r3, #1
 8015d50:	d101      	bne.n	8015d56 <xQueueGenericSendFromISR+0x76>
 8015d52:	2301      	movs	r3, #1
 8015d54:	e000      	b.n	8015d58 <xQueueGenericSendFromISR+0x78>
 8015d56:	2300      	movs	r3, #0
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d10c      	bne.n	8015d76 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8015d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d60:	b672      	cpsid	i
 8015d62:	f383 8811 	msr	BASEPRI, r3
 8015d66:	f3bf 8f6f 	isb	sy
 8015d6a:	f3bf 8f4f 	dsb	sy
 8015d6e:	b662      	cpsie	i
 8015d70:	61fb      	str	r3, [r7, #28]
}
 8015d72:	bf00      	nop
 8015d74:	e7fe      	b.n	8015d74 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015d76:	f002 fbb9 	bl	80184ec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8015d7a:	f3ef 8211 	mrs	r2, BASEPRI
 8015d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d82:	b672      	cpsid	i
 8015d84:	f383 8811 	msr	BASEPRI, r3
 8015d88:	f3bf 8f6f 	isb	sy
 8015d8c:	f3bf 8f4f 	dsb	sy
 8015d90:	b662      	cpsie	i
 8015d92:	61ba      	str	r2, [r7, #24]
 8015d94:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8015d96:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015d98:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015da2:	429a      	cmp	r2, r3
 8015da4:	d302      	bcc.n	8015dac <xQueueGenericSendFromISR+0xcc>
 8015da6:	683b      	ldr	r3, [r7, #0]
 8015da8:	2b02      	cmp	r3, #2
 8015daa:	d12c      	bne.n	8015e06 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015db6:	683a      	ldr	r2, [r7, #0]
 8015db8:	68b9      	ldr	r1, [r7, #8]
 8015dba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015dbc:	f000 faf8 	bl	80163b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015dc0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8015dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015dc8:	d112      	bne.n	8015df0 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	d016      	beq.n	8015e00 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dd4:	3324      	adds	r3, #36	; 0x24
 8015dd6:	4618      	mov	r0, r3
 8015dd8:	f001 f9ae 	bl	8017138 <xTaskRemoveFromEventList>
 8015ddc:	4603      	mov	r3, r0
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d00e      	beq.n	8015e00 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d00b      	beq.n	8015e00 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	2201      	movs	r2, #1
 8015dec:	601a      	str	r2, [r3, #0]
 8015dee:	e007      	b.n	8015e00 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015df0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015df4:	3301      	adds	r3, #1
 8015df6:	b2db      	uxtb	r3, r3
 8015df8:	b25a      	sxtb	r2, r3
 8015dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015e00:	2301      	movs	r3, #1
 8015e02:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8015e04:	e001      	b.n	8015e0a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015e06:	2300      	movs	r3, #0
 8015e08:	637b      	str	r3, [r7, #52]	; 0x34
 8015e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e0c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8015e0e:	693b      	ldr	r3, [r7, #16]
 8015e10:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8015e14:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015e18:	4618      	mov	r0, r3
 8015e1a:	3738      	adds	r7, #56	; 0x38
 8015e1c:	46bd      	mov	sp, r7
 8015e1e:	bd80      	pop	{r7, pc}

08015e20 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015e20:	b580      	push	{r7, lr}
 8015e22:	b08e      	sub	sp, #56	; 0x38
 8015e24:	af00      	add	r7, sp, #0
 8015e26:	6078      	str	r0, [r7, #4]
 8015e28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8015e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e30:	2b00      	cmp	r3, #0
 8015e32:	d10c      	bne.n	8015e4e <xQueueGiveFromISR+0x2e>
	__asm volatile
 8015e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e38:	b672      	cpsid	i
 8015e3a:	f383 8811 	msr	BASEPRI, r3
 8015e3e:	f3bf 8f6f 	isb	sy
 8015e42:	f3bf 8f4f 	dsb	sy
 8015e46:	b662      	cpsie	i
 8015e48:	623b      	str	r3, [r7, #32]
}
 8015e4a:	bf00      	nop
 8015e4c:	e7fe      	b.n	8015e4c <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8015e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	d00c      	beq.n	8015e70 <xQueueGiveFromISR+0x50>
	__asm volatile
 8015e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e5a:	b672      	cpsid	i
 8015e5c:	f383 8811 	msr	BASEPRI, r3
 8015e60:	f3bf 8f6f 	isb	sy
 8015e64:	f3bf 8f4f 	dsb	sy
 8015e68:	b662      	cpsie	i
 8015e6a:	61fb      	str	r3, [r7, #28]
}
 8015e6c:	bf00      	nop
 8015e6e:	e7fe      	b.n	8015e6e <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8015e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e72:	681b      	ldr	r3, [r3, #0]
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d103      	bne.n	8015e80 <xQueueGiveFromISR+0x60>
 8015e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e7a:	689b      	ldr	r3, [r3, #8]
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d101      	bne.n	8015e84 <xQueueGiveFromISR+0x64>
 8015e80:	2301      	movs	r3, #1
 8015e82:	e000      	b.n	8015e86 <xQueueGiveFromISR+0x66>
 8015e84:	2300      	movs	r3, #0
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d10c      	bne.n	8015ea4 <xQueueGiveFromISR+0x84>
	__asm volatile
 8015e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e8e:	b672      	cpsid	i
 8015e90:	f383 8811 	msr	BASEPRI, r3
 8015e94:	f3bf 8f6f 	isb	sy
 8015e98:	f3bf 8f4f 	dsb	sy
 8015e9c:	b662      	cpsie	i
 8015e9e:	61bb      	str	r3, [r7, #24]
}
 8015ea0:	bf00      	nop
 8015ea2:	e7fe      	b.n	8015ea2 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015ea4:	f002 fb22 	bl	80184ec <vPortValidateInterruptPriority>
	__asm volatile
 8015ea8:	f3ef 8211 	mrs	r2, BASEPRI
 8015eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015eb0:	b672      	cpsid	i
 8015eb2:	f383 8811 	msr	BASEPRI, r3
 8015eb6:	f3bf 8f6f 	isb	sy
 8015eba:	f3bf 8f4f 	dsb	sy
 8015ebe:	b662      	cpsie	i
 8015ec0:	617a      	str	r2, [r7, #20]
 8015ec2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8015ec4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015ecc:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8015ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015ed2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015ed4:	429a      	cmp	r2, r3
 8015ed6:	d22b      	bcs.n	8015f30 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015eda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015ede:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ee4:	1c5a      	adds	r2, r3, #1
 8015ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ee8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015eea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ef2:	d112      	bne.n	8015f1a <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d016      	beq.n	8015f2a <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015efe:	3324      	adds	r3, #36	; 0x24
 8015f00:	4618      	mov	r0, r3
 8015f02:	f001 f919 	bl	8017138 <xTaskRemoveFromEventList>
 8015f06:	4603      	mov	r3, r0
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d00e      	beq.n	8015f2a <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015f0c:	683b      	ldr	r3, [r7, #0]
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d00b      	beq.n	8015f2a <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015f12:	683b      	ldr	r3, [r7, #0]
 8015f14:	2201      	movs	r2, #1
 8015f16:	601a      	str	r2, [r3, #0]
 8015f18:	e007      	b.n	8015f2a <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015f1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015f1e:	3301      	adds	r3, #1
 8015f20:	b2db      	uxtb	r3, r3
 8015f22:	b25a      	sxtb	r2, r3
 8015f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015f2a:	2301      	movs	r3, #1
 8015f2c:	637b      	str	r3, [r7, #52]	; 0x34
 8015f2e:	e001      	b.n	8015f34 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015f30:	2300      	movs	r3, #0
 8015f32:	637b      	str	r3, [r7, #52]	; 0x34
 8015f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f36:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8015f38:	68fb      	ldr	r3, [r7, #12]
 8015f3a:	f383 8811 	msr	BASEPRI, r3
}
 8015f3e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015f42:	4618      	mov	r0, r3
 8015f44:	3738      	adds	r7, #56	; 0x38
 8015f46:	46bd      	mov	sp, r7
 8015f48:	bd80      	pop	{r7, pc}
	...

08015f4c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8015f4c:	b580      	push	{r7, lr}
 8015f4e:	b08c      	sub	sp, #48	; 0x30
 8015f50:	af00      	add	r7, sp, #0
 8015f52:	60f8      	str	r0, [r7, #12]
 8015f54:	60b9      	str	r1, [r7, #8]
 8015f56:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8015f58:	2300      	movs	r3, #0
 8015f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015f5c:	68fb      	ldr	r3, [r7, #12]
 8015f5e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	d10c      	bne.n	8015f80 <xQueueReceive+0x34>
	__asm volatile
 8015f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f6a:	b672      	cpsid	i
 8015f6c:	f383 8811 	msr	BASEPRI, r3
 8015f70:	f3bf 8f6f 	isb	sy
 8015f74:	f3bf 8f4f 	dsb	sy
 8015f78:	b662      	cpsie	i
 8015f7a:	623b      	str	r3, [r7, #32]
}
 8015f7c:	bf00      	nop
 8015f7e:	e7fe      	b.n	8015f7e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015f80:	68bb      	ldr	r3, [r7, #8]
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	d103      	bne.n	8015f8e <xQueueReceive+0x42>
 8015f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d101      	bne.n	8015f92 <xQueueReceive+0x46>
 8015f8e:	2301      	movs	r3, #1
 8015f90:	e000      	b.n	8015f94 <xQueueReceive+0x48>
 8015f92:	2300      	movs	r3, #0
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	d10c      	bne.n	8015fb2 <xQueueReceive+0x66>
	__asm volatile
 8015f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f9c:	b672      	cpsid	i
 8015f9e:	f383 8811 	msr	BASEPRI, r3
 8015fa2:	f3bf 8f6f 	isb	sy
 8015fa6:	f3bf 8f4f 	dsb	sy
 8015faa:	b662      	cpsie	i
 8015fac:	61fb      	str	r3, [r7, #28]
}
 8015fae:	bf00      	nop
 8015fb0:	e7fe      	b.n	8015fb0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015fb2:	f001 fa85 	bl	80174c0 <xTaskGetSchedulerState>
 8015fb6:	4603      	mov	r3, r0
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d102      	bne.n	8015fc2 <xQueueReceive+0x76>
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d101      	bne.n	8015fc6 <xQueueReceive+0x7a>
 8015fc2:	2301      	movs	r3, #1
 8015fc4:	e000      	b.n	8015fc8 <xQueueReceive+0x7c>
 8015fc6:	2300      	movs	r3, #0
 8015fc8:	2b00      	cmp	r3, #0
 8015fca:	d10c      	bne.n	8015fe6 <xQueueReceive+0x9a>
	__asm volatile
 8015fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fd0:	b672      	cpsid	i
 8015fd2:	f383 8811 	msr	BASEPRI, r3
 8015fd6:	f3bf 8f6f 	isb	sy
 8015fda:	f3bf 8f4f 	dsb	sy
 8015fde:	b662      	cpsie	i
 8015fe0:	61bb      	str	r3, [r7, #24]
}
 8015fe2:	bf00      	nop
 8015fe4:	e7fe      	b.n	8015fe4 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015fe6:	f002 f999 	bl	801831c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015fee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	d01f      	beq.n	8016036 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015ff6:	68b9      	ldr	r1, [r7, #8]
 8015ff8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015ffa:	f000 fa43 	bl	8016484 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016000:	1e5a      	subs	r2, r3, #1
 8016002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016004:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016008:	691b      	ldr	r3, [r3, #16]
 801600a:	2b00      	cmp	r3, #0
 801600c:	d00f      	beq.n	801602e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801600e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016010:	3310      	adds	r3, #16
 8016012:	4618      	mov	r0, r3
 8016014:	f001 f890 	bl	8017138 <xTaskRemoveFromEventList>
 8016018:	4603      	mov	r3, r0
 801601a:	2b00      	cmp	r3, #0
 801601c:	d007      	beq.n	801602e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801601e:	4b3d      	ldr	r3, [pc, #244]	; (8016114 <xQueueReceive+0x1c8>)
 8016020:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016024:	601a      	str	r2, [r3, #0]
 8016026:	f3bf 8f4f 	dsb	sy
 801602a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801602e:	f002 f9a9 	bl	8018384 <vPortExitCritical>
				return pdPASS;
 8016032:	2301      	movs	r3, #1
 8016034:	e069      	b.n	801610a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	2b00      	cmp	r3, #0
 801603a:	d103      	bne.n	8016044 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801603c:	f002 f9a2 	bl	8018384 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016040:	2300      	movs	r3, #0
 8016042:	e062      	b.n	801610a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016046:	2b00      	cmp	r3, #0
 8016048:	d106      	bne.n	8016058 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801604a:	f107 0310 	add.w	r3, r7, #16
 801604e:	4618      	mov	r0, r3
 8016050:	f001 f8d6 	bl	8017200 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016054:	2301      	movs	r3, #1
 8016056:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016058:	f002 f994 	bl	8018384 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801605c:	f000 fe44 	bl	8016ce8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016060:	f002 f95c 	bl	801831c <vPortEnterCritical>
 8016064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016066:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801606a:	b25b      	sxtb	r3, r3
 801606c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016070:	d103      	bne.n	801607a <xQueueReceive+0x12e>
 8016072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016074:	2200      	movs	r2, #0
 8016076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801607a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801607c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016080:	b25b      	sxtb	r3, r3
 8016082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016086:	d103      	bne.n	8016090 <xQueueReceive+0x144>
 8016088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801608a:	2200      	movs	r2, #0
 801608c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016090:	f002 f978 	bl	8018384 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016094:	1d3a      	adds	r2, r7, #4
 8016096:	f107 0310 	add.w	r3, r7, #16
 801609a:	4611      	mov	r1, r2
 801609c:	4618      	mov	r0, r3
 801609e:	f001 f8c5 	bl	801722c <xTaskCheckForTimeOut>
 80160a2:	4603      	mov	r3, r0
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	d123      	bne.n	80160f0 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80160a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80160aa:	f000 fa63 	bl	8016574 <prvIsQueueEmpty>
 80160ae:	4603      	mov	r3, r0
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d017      	beq.n	80160e4 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80160b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160b6:	3324      	adds	r3, #36	; 0x24
 80160b8:	687a      	ldr	r2, [r7, #4]
 80160ba:	4611      	mov	r1, r2
 80160bc:	4618      	mov	r0, r3
 80160be:	f000 ffe7 	bl	8017090 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80160c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80160c4:	f000 fa04 	bl	80164d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80160c8:	f000 fe1c 	bl	8016d04 <xTaskResumeAll>
 80160cc:	4603      	mov	r3, r0
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	d189      	bne.n	8015fe6 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80160d2:	4b10      	ldr	r3, [pc, #64]	; (8016114 <xQueueReceive+0x1c8>)
 80160d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80160d8:	601a      	str	r2, [r3, #0]
 80160da:	f3bf 8f4f 	dsb	sy
 80160de:	f3bf 8f6f 	isb	sy
 80160e2:	e780      	b.n	8015fe6 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80160e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80160e6:	f000 f9f3 	bl	80164d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80160ea:	f000 fe0b 	bl	8016d04 <xTaskResumeAll>
 80160ee:	e77a      	b.n	8015fe6 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80160f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80160f2:	f000 f9ed 	bl	80164d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80160f6:	f000 fe05 	bl	8016d04 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80160fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80160fc:	f000 fa3a 	bl	8016574 <prvIsQueueEmpty>
 8016100:	4603      	mov	r3, r0
 8016102:	2b00      	cmp	r3, #0
 8016104:	f43f af6f 	beq.w	8015fe6 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8016108:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801610a:	4618      	mov	r0, r3
 801610c:	3730      	adds	r7, #48	; 0x30
 801610e:	46bd      	mov	sp, r7
 8016110:	bd80      	pop	{r7, pc}
 8016112:	bf00      	nop
 8016114:	e000ed04 	.word	0xe000ed04

08016118 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8016118:	b580      	push	{r7, lr}
 801611a:	b08e      	sub	sp, #56	; 0x38
 801611c:	af00      	add	r7, sp, #0
 801611e:	6078      	str	r0, [r7, #4]
 8016120:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8016122:	2300      	movs	r3, #0
 8016124:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801612a:	2300      	movs	r3, #0
 801612c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801612e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016130:	2b00      	cmp	r3, #0
 8016132:	d10c      	bne.n	801614e <xQueueSemaphoreTake+0x36>
	__asm volatile
 8016134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016138:	b672      	cpsid	i
 801613a:	f383 8811 	msr	BASEPRI, r3
 801613e:	f3bf 8f6f 	isb	sy
 8016142:	f3bf 8f4f 	dsb	sy
 8016146:	b662      	cpsie	i
 8016148:	623b      	str	r3, [r7, #32]
}
 801614a:	bf00      	nop
 801614c:	e7fe      	b.n	801614c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801614e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016152:	2b00      	cmp	r3, #0
 8016154:	d00c      	beq.n	8016170 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8016156:	f04f 0350 	mov.w	r3, #80	; 0x50
 801615a:	b672      	cpsid	i
 801615c:	f383 8811 	msr	BASEPRI, r3
 8016160:	f3bf 8f6f 	isb	sy
 8016164:	f3bf 8f4f 	dsb	sy
 8016168:	b662      	cpsie	i
 801616a:	61fb      	str	r3, [r7, #28]
}
 801616c:	bf00      	nop
 801616e:	e7fe      	b.n	801616e <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016170:	f001 f9a6 	bl	80174c0 <xTaskGetSchedulerState>
 8016174:	4603      	mov	r3, r0
 8016176:	2b00      	cmp	r3, #0
 8016178:	d102      	bne.n	8016180 <xQueueSemaphoreTake+0x68>
 801617a:	683b      	ldr	r3, [r7, #0]
 801617c:	2b00      	cmp	r3, #0
 801617e:	d101      	bne.n	8016184 <xQueueSemaphoreTake+0x6c>
 8016180:	2301      	movs	r3, #1
 8016182:	e000      	b.n	8016186 <xQueueSemaphoreTake+0x6e>
 8016184:	2300      	movs	r3, #0
 8016186:	2b00      	cmp	r3, #0
 8016188:	d10c      	bne.n	80161a4 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 801618a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801618e:	b672      	cpsid	i
 8016190:	f383 8811 	msr	BASEPRI, r3
 8016194:	f3bf 8f6f 	isb	sy
 8016198:	f3bf 8f4f 	dsb	sy
 801619c:	b662      	cpsie	i
 801619e:	61bb      	str	r3, [r7, #24]
}
 80161a0:	bf00      	nop
 80161a2:	e7fe      	b.n	80161a2 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80161a4:	f002 f8ba 	bl	801831c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80161a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80161ac:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80161ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d024      	beq.n	80161fe <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80161b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161b6:	1e5a      	subs	r2, r3, #1
 80161b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161ba:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80161bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161be:	681b      	ldr	r3, [r3, #0]
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	d104      	bne.n	80161ce <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80161c4:	f001 fb42 	bl	801784c <pvTaskIncrementMutexHeldCount>
 80161c8:	4602      	mov	r2, r0
 80161ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161cc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80161ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161d0:	691b      	ldr	r3, [r3, #16]
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	d00f      	beq.n	80161f6 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80161d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161d8:	3310      	adds	r3, #16
 80161da:	4618      	mov	r0, r3
 80161dc:	f000 ffac 	bl	8017138 <xTaskRemoveFromEventList>
 80161e0:	4603      	mov	r3, r0
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d007      	beq.n	80161f6 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80161e6:	4b55      	ldr	r3, [pc, #340]	; (801633c <xQueueSemaphoreTake+0x224>)
 80161e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80161ec:	601a      	str	r2, [r3, #0]
 80161ee:	f3bf 8f4f 	dsb	sy
 80161f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80161f6:	f002 f8c5 	bl	8018384 <vPortExitCritical>
				return pdPASS;
 80161fa:	2301      	movs	r3, #1
 80161fc:	e099      	b.n	8016332 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80161fe:	683b      	ldr	r3, [r7, #0]
 8016200:	2b00      	cmp	r3, #0
 8016202:	d113      	bne.n	801622c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8016204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016206:	2b00      	cmp	r3, #0
 8016208:	d00c      	beq.n	8016224 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 801620a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801620e:	b672      	cpsid	i
 8016210:	f383 8811 	msr	BASEPRI, r3
 8016214:	f3bf 8f6f 	isb	sy
 8016218:	f3bf 8f4f 	dsb	sy
 801621c:	b662      	cpsie	i
 801621e:	617b      	str	r3, [r7, #20]
}
 8016220:	bf00      	nop
 8016222:	e7fe      	b.n	8016222 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8016224:	f002 f8ae 	bl	8018384 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016228:	2300      	movs	r3, #0
 801622a:	e082      	b.n	8016332 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 801622c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801622e:	2b00      	cmp	r3, #0
 8016230:	d106      	bne.n	8016240 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016232:	f107 030c 	add.w	r3, r7, #12
 8016236:	4618      	mov	r0, r3
 8016238:	f000 ffe2 	bl	8017200 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801623c:	2301      	movs	r3, #1
 801623e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016240:	f002 f8a0 	bl	8018384 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016244:	f000 fd50 	bl	8016ce8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016248:	f002 f868 	bl	801831c <vPortEnterCritical>
 801624c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801624e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016252:	b25b      	sxtb	r3, r3
 8016254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016258:	d103      	bne.n	8016262 <xQueueSemaphoreTake+0x14a>
 801625a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801625c:	2200      	movs	r2, #0
 801625e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016264:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016268:	b25b      	sxtb	r3, r3
 801626a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801626e:	d103      	bne.n	8016278 <xQueueSemaphoreTake+0x160>
 8016270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016272:	2200      	movs	r2, #0
 8016274:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016278:	f002 f884 	bl	8018384 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801627c:	463a      	mov	r2, r7
 801627e:	f107 030c 	add.w	r3, r7, #12
 8016282:	4611      	mov	r1, r2
 8016284:	4618      	mov	r0, r3
 8016286:	f000 ffd1 	bl	801722c <xTaskCheckForTimeOut>
 801628a:	4603      	mov	r3, r0
 801628c:	2b00      	cmp	r3, #0
 801628e:	d132      	bne.n	80162f6 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016290:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016292:	f000 f96f 	bl	8016574 <prvIsQueueEmpty>
 8016296:	4603      	mov	r3, r0
 8016298:	2b00      	cmp	r3, #0
 801629a:	d026      	beq.n	80162ea <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801629c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801629e:	681b      	ldr	r3, [r3, #0]
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	d109      	bne.n	80162b8 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 80162a4:	f002 f83a 	bl	801831c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80162a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162aa:	689b      	ldr	r3, [r3, #8]
 80162ac:	4618      	mov	r0, r3
 80162ae:	f001 f925 	bl	80174fc <xTaskPriorityInherit>
 80162b2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80162b4:	f002 f866 	bl	8018384 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80162b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162ba:	3324      	adds	r3, #36	; 0x24
 80162bc:	683a      	ldr	r2, [r7, #0]
 80162be:	4611      	mov	r1, r2
 80162c0:	4618      	mov	r0, r3
 80162c2:	f000 fee5 	bl	8017090 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80162c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80162c8:	f000 f902 	bl	80164d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80162cc:	f000 fd1a 	bl	8016d04 <xTaskResumeAll>
 80162d0:	4603      	mov	r3, r0
 80162d2:	2b00      	cmp	r3, #0
 80162d4:	f47f af66 	bne.w	80161a4 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 80162d8:	4b18      	ldr	r3, [pc, #96]	; (801633c <xQueueSemaphoreTake+0x224>)
 80162da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80162de:	601a      	str	r2, [r3, #0]
 80162e0:	f3bf 8f4f 	dsb	sy
 80162e4:	f3bf 8f6f 	isb	sy
 80162e8:	e75c      	b.n	80161a4 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80162ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80162ec:	f000 f8f0 	bl	80164d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80162f0:	f000 fd08 	bl	8016d04 <xTaskResumeAll>
 80162f4:	e756      	b.n	80161a4 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80162f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80162f8:	f000 f8ea 	bl	80164d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80162fc:	f000 fd02 	bl	8016d04 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016300:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016302:	f000 f937 	bl	8016574 <prvIsQueueEmpty>
 8016306:	4603      	mov	r3, r0
 8016308:	2b00      	cmp	r3, #0
 801630a:	f43f af4b 	beq.w	80161a4 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801630e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016310:	2b00      	cmp	r3, #0
 8016312:	d00d      	beq.n	8016330 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8016314:	f002 f802 	bl	801831c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8016318:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801631a:	f000 f831 	bl	8016380 <prvGetDisinheritPriorityAfterTimeout>
 801631e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8016320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016322:	689b      	ldr	r3, [r3, #8]
 8016324:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016326:	4618      	mov	r0, r3
 8016328:	f001 f9f2 	bl	8017710 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801632c:	f002 f82a 	bl	8018384 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8016330:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8016332:	4618      	mov	r0, r3
 8016334:	3738      	adds	r7, #56	; 0x38
 8016336:	46bd      	mov	sp, r7
 8016338:	bd80      	pop	{r7, pc}
 801633a:	bf00      	nop
 801633c:	e000ed04 	.word	0xe000ed04

08016340 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8016340:	b580      	push	{r7, lr}
 8016342:	b084      	sub	sp, #16
 8016344:	af00      	add	r7, sp, #0
 8016346:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	2b00      	cmp	r3, #0
 801634c:	d10c      	bne.n	8016368 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 801634e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016352:	b672      	cpsid	i
 8016354:	f383 8811 	msr	BASEPRI, r3
 8016358:	f3bf 8f6f 	isb	sy
 801635c:	f3bf 8f4f 	dsb	sy
 8016360:	b662      	cpsie	i
 8016362:	60bb      	str	r3, [r7, #8]
}
 8016364:	bf00      	nop
 8016366:	e7fe      	b.n	8016366 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8016368:	f001 ffd8 	bl	801831c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016370:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8016372:	f002 f807 	bl	8018384 <vPortExitCritical>

	return uxReturn;
 8016376:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8016378:	4618      	mov	r0, r3
 801637a:	3710      	adds	r7, #16
 801637c:	46bd      	mov	sp, r7
 801637e:	bd80      	pop	{r7, pc}

08016380 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8016380:	b480      	push	{r7}
 8016382:	b085      	sub	sp, #20
 8016384:	af00      	add	r7, sp, #0
 8016386:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801638c:	2b00      	cmp	r3, #0
 801638e:	d006      	beq.n	801639e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016394:	681b      	ldr	r3, [r3, #0]
 8016396:	f1c3 0307 	rsb	r3, r3, #7
 801639a:	60fb      	str	r3, [r7, #12]
 801639c:	e001      	b.n	80163a2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801639e:	2300      	movs	r3, #0
 80163a0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80163a2:	68fb      	ldr	r3, [r7, #12]
	}
 80163a4:	4618      	mov	r0, r3
 80163a6:	3714      	adds	r7, #20
 80163a8:	46bd      	mov	sp, r7
 80163aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163ae:	4770      	bx	lr

080163b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80163b0:	b580      	push	{r7, lr}
 80163b2:	b086      	sub	sp, #24
 80163b4:	af00      	add	r7, sp, #0
 80163b6:	60f8      	str	r0, [r7, #12]
 80163b8:	60b9      	str	r1, [r7, #8]
 80163ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80163bc:	2300      	movs	r3, #0
 80163be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80163c0:	68fb      	ldr	r3, [r7, #12]
 80163c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80163c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80163c6:	68fb      	ldr	r3, [r7, #12]
 80163c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d10d      	bne.n	80163ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80163ce:	68fb      	ldr	r3, [r7, #12]
 80163d0:	681b      	ldr	r3, [r3, #0]
 80163d2:	2b00      	cmp	r3, #0
 80163d4:	d14d      	bne.n	8016472 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80163d6:	68fb      	ldr	r3, [r7, #12]
 80163d8:	689b      	ldr	r3, [r3, #8]
 80163da:	4618      	mov	r0, r3
 80163dc:	f001 f90e 	bl	80175fc <xTaskPriorityDisinherit>
 80163e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80163e2:	68fb      	ldr	r3, [r7, #12]
 80163e4:	2200      	movs	r2, #0
 80163e6:	609a      	str	r2, [r3, #8]
 80163e8:	e043      	b.n	8016472 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d119      	bne.n	8016424 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80163f0:	68fb      	ldr	r3, [r7, #12]
 80163f2:	6858      	ldr	r0, [r3, #4]
 80163f4:	68fb      	ldr	r3, [r7, #12]
 80163f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80163f8:	461a      	mov	r2, r3
 80163fa:	68b9      	ldr	r1, [r7, #8]
 80163fc:	f002 faca 	bl	8018994 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016400:	68fb      	ldr	r3, [r7, #12]
 8016402:	685a      	ldr	r2, [r3, #4]
 8016404:	68fb      	ldr	r3, [r7, #12]
 8016406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016408:	441a      	add	r2, r3
 801640a:	68fb      	ldr	r3, [r7, #12]
 801640c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801640e:	68fb      	ldr	r3, [r7, #12]
 8016410:	685a      	ldr	r2, [r3, #4]
 8016412:	68fb      	ldr	r3, [r7, #12]
 8016414:	689b      	ldr	r3, [r3, #8]
 8016416:	429a      	cmp	r2, r3
 8016418:	d32b      	bcc.n	8016472 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801641a:	68fb      	ldr	r3, [r7, #12]
 801641c:	681a      	ldr	r2, [r3, #0]
 801641e:	68fb      	ldr	r3, [r7, #12]
 8016420:	605a      	str	r2, [r3, #4]
 8016422:	e026      	b.n	8016472 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8016424:	68fb      	ldr	r3, [r7, #12]
 8016426:	68d8      	ldr	r0, [r3, #12]
 8016428:	68fb      	ldr	r3, [r7, #12]
 801642a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801642c:	461a      	mov	r2, r3
 801642e:	68b9      	ldr	r1, [r7, #8]
 8016430:	f002 fab0 	bl	8018994 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8016434:	68fb      	ldr	r3, [r7, #12]
 8016436:	68da      	ldr	r2, [r3, #12]
 8016438:	68fb      	ldr	r3, [r7, #12]
 801643a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801643c:	425b      	negs	r3, r3
 801643e:	441a      	add	r2, r3
 8016440:	68fb      	ldr	r3, [r7, #12]
 8016442:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016444:	68fb      	ldr	r3, [r7, #12]
 8016446:	68da      	ldr	r2, [r3, #12]
 8016448:	68fb      	ldr	r3, [r7, #12]
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	429a      	cmp	r2, r3
 801644e:	d207      	bcs.n	8016460 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8016450:	68fb      	ldr	r3, [r7, #12]
 8016452:	689a      	ldr	r2, [r3, #8]
 8016454:	68fb      	ldr	r3, [r7, #12]
 8016456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016458:	425b      	negs	r3, r3
 801645a:	441a      	add	r2, r3
 801645c:	68fb      	ldr	r3, [r7, #12]
 801645e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	2b02      	cmp	r3, #2
 8016464:	d105      	bne.n	8016472 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016466:	693b      	ldr	r3, [r7, #16]
 8016468:	2b00      	cmp	r3, #0
 801646a:	d002      	beq.n	8016472 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801646c:	693b      	ldr	r3, [r7, #16]
 801646e:	3b01      	subs	r3, #1
 8016470:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016472:	693b      	ldr	r3, [r7, #16]
 8016474:	1c5a      	adds	r2, r3, #1
 8016476:	68fb      	ldr	r3, [r7, #12]
 8016478:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801647a:	697b      	ldr	r3, [r7, #20]
}
 801647c:	4618      	mov	r0, r3
 801647e:	3718      	adds	r7, #24
 8016480:	46bd      	mov	sp, r7
 8016482:	bd80      	pop	{r7, pc}

08016484 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8016484:	b580      	push	{r7, lr}
 8016486:	b082      	sub	sp, #8
 8016488:	af00      	add	r7, sp, #0
 801648a:	6078      	str	r0, [r7, #4]
 801648c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016492:	2b00      	cmp	r3, #0
 8016494:	d018      	beq.n	80164c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	68da      	ldr	r2, [r3, #12]
 801649a:	687b      	ldr	r3, [r7, #4]
 801649c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801649e:	441a      	add	r2, r3
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	68da      	ldr	r2, [r3, #12]
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	689b      	ldr	r3, [r3, #8]
 80164ac:	429a      	cmp	r2, r3
 80164ae:	d303      	bcc.n	80164b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	681a      	ldr	r2, [r3, #0]
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	68d9      	ldr	r1, [r3, #12]
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80164c0:	461a      	mov	r2, r3
 80164c2:	6838      	ldr	r0, [r7, #0]
 80164c4:	f002 fa66 	bl	8018994 <memcpy>
	}
}
 80164c8:	bf00      	nop
 80164ca:	3708      	adds	r7, #8
 80164cc:	46bd      	mov	sp, r7
 80164ce:	bd80      	pop	{r7, pc}

080164d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80164d0:	b580      	push	{r7, lr}
 80164d2:	b084      	sub	sp, #16
 80164d4:	af00      	add	r7, sp, #0
 80164d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80164d8:	f001 ff20 	bl	801831c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80164e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80164e4:	e011      	b.n	801650a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d012      	beq.n	8016514 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	3324      	adds	r3, #36	; 0x24
 80164f2:	4618      	mov	r0, r3
 80164f4:	f000 fe20 	bl	8017138 <xTaskRemoveFromEventList>
 80164f8:	4603      	mov	r3, r0
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d001      	beq.n	8016502 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80164fe:	f000 fefb 	bl	80172f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8016502:	7bfb      	ldrb	r3, [r7, #15]
 8016504:	3b01      	subs	r3, #1
 8016506:	b2db      	uxtb	r3, r3
 8016508:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801650a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801650e:	2b00      	cmp	r3, #0
 8016510:	dce9      	bgt.n	80164e6 <prvUnlockQueue+0x16>
 8016512:	e000      	b.n	8016516 <prvUnlockQueue+0x46>
					break;
 8016514:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	22ff      	movs	r2, #255	; 0xff
 801651a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801651e:	f001 ff31 	bl	8018384 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8016522:	f001 fefb 	bl	801831c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801652c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801652e:	e011      	b.n	8016554 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	691b      	ldr	r3, [r3, #16]
 8016534:	2b00      	cmp	r3, #0
 8016536:	d012      	beq.n	801655e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	3310      	adds	r3, #16
 801653c:	4618      	mov	r0, r3
 801653e:	f000 fdfb 	bl	8017138 <xTaskRemoveFromEventList>
 8016542:	4603      	mov	r3, r0
 8016544:	2b00      	cmp	r3, #0
 8016546:	d001      	beq.n	801654c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8016548:	f000 fed6 	bl	80172f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801654c:	7bbb      	ldrb	r3, [r7, #14]
 801654e:	3b01      	subs	r3, #1
 8016550:	b2db      	uxtb	r3, r3
 8016552:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016554:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016558:	2b00      	cmp	r3, #0
 801655a:	dce9      	bgt.n	8016530 <prvUnlockQueue+0x60>
 801655c:	e000      	b.n	8016560 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801655e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	22ff      	movs	r2, #255	; 0xff
 8016564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8016568:	f001 ff0c 	bl	8018384 <vPortExitCritical>
}
 801656c:	bf00      	nop
 801656e:	3710      	adds	r7, #16
 8016570:	46bd      	mov	sp, r7
 8016572:	bd80      	pop	{r7, pc}

08016574 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8016574:	b580      	push	{r7, lr}
 8016576:	b084      	sub	sp, #16
 8016578:	af00      	add	r7, sp, #0
 801657a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801657c:	f001 fece 	bl	801831c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016584:	2b00      	cmp	r3, #0
 8016586:	d102      	bne.n	801658e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8016588:	2301      	movs	r3, #1
 801658a:	60fb      	str	r3, [r7, #12]
 801658c:	e001      	b.n	8016592 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801658e:	2300      	movs	r3, #0
 8016590:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016592:	f001 fef7 	bl	8018384 <vPortExitCritical>

	return xReturn;
 8016596:	68fb      	ldr	r3, [r7, #12]
}
 8016598:	4618      	mov	r0, r3
 801659a:	3710      	adds	r7, #16
 801659c:	46bd      	mov	sp, r7
 801659e:	bd80      	pop	{r7, pc}

080165a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80165a0:	b580      	push	{r7, lr}
 80165a2:	b084      	sub	sp, #16
 80165a4:	af00      	add	r7, sp, #0
 80165a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80165a8:	f001 feb8 	bl	801831c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80165b4:	429a      	cmp	r2, r3
 80165b6:	d102      	bne.n	80165be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80165b8:	2301      	movs	r3, #1
 80165ba:	60fb      	str	r3, [r7, #12]
 80165bc:	e001      	b.n	80165c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80165be:	2300      	movs	r3, #0
 80165c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80165c2:	f001 fedf 	bl	8018384 <vPortExitCritical>

	return xReturn;
 80165c6:	68fb      	ldr	r3, [r7, #12]
}
 80165c8:	4618      	mov	r0, r3
 80165ca:	3710      	adds	r7, #16
 80165cc:	46bd      	mov	sp, r7
 80165ce:	bd80      	pop	{r7, pc}

080165d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80165d0:	b480      	push	{r7}
 80165d2:	b085      	sub	sp, #20
 80165d4:	af00      	add	r7, sp, #0
 80165d6:	6078      	str	r0, [r7, #4]
 80165d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80165da:	2300      	movs	r3, #0
 80165dc:	60fb      	str	r3, [r7, #12]
 80165de:	e014      	b.n	801660a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80165e0:	4a0f      	ldr	r2, [pc, #60]	; (8016620 <vQueueAddToRegistry+0x50>)
 80165e2:	68fb      	ldr	r3, [r7, #12]
 80165e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	d10b      	bne.n	8016604 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80165ec:	490c      	ldr	r1, [pc, #48]	; (8016620 <vQueueAddToRegistry+0x50>)
 80165ee:	68fb      	ldr	r3, [r7, #12]
 80165f0:	683a      	ldr	r2, [r7, #0]
 80165f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80165f6:	4a0a      	ldr	r2, [pc, #40]	; (8016620 <vQueueAddToRegistry+0x50>)
 80165f8:	68fb      	ldr	r3, [r7, #12]
 80165fa:	00db      	lsls	r3, r3, #3
 80165fc:	4413      	add	r3, r2
 80165fe:	687a      	ldr	r2, [r7, #4]
 8016600:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8016602:	e006      	b.n	8016612 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016604:	68fb      	ldr	r3, [r7, #12]
 8016606:	3301      	adds	r3, #1
 8016608:	60fb      	str	r3, [r7, #12]
 801660a:	68fb      	ldr	r3, [r7, #12]
 801660c:	2b07      	cmp	r3, #7
 801660e:	d9e7      	bls.n	80165e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8016610:	bf00      	nop
 8016612:	bf00      	nop
 8016614:	3714      	adds	r7, #20
 8016616:	46bd      	mov	sp, r7
 8016618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801661c:	4770      	bx	lr
 801661e:	bf00      	nop
 8016620:	20017348 	.word	0x20017348

08016624 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016624:	b580      	push	{r7, lr}
 8016626:	b086      	sub	sp, #24
 8016628:	af00      	add	r7, sp, #0
 801662a:	60f8      	str	r0, [r7, #12]
 801662c:	60b9      	str	r1, [r7, #8]
 801662e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8016630:	68fb      	ldr	r3, [r7, #12]
 8016632:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8016634:	f001 fe72 	bl	801831c <vPortEnterCritical>
 8016638:	697b      	ldr	r3, [r7, #20]
 801663a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801663e:	b25b      	sxtb	r3, r3
 8016640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016644:	d103      	bne.n	801664e <vQueueWaitForMessageRestricted+0x2a>
 8016646:	697b      	ldr	r3, [r7, #20]
 8016648:	2200      	movs	r2, #0
 801664a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801664e:	697b      	ldr	r3, [r7, #20]
 8016650:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016654:	b25b      	sxtb	r3, r3
 8016656:	f1b3 3fff 	cmp.w	r3, #4294967295
 801665a:	d103      	bne.n	8016664 <vQueueWaitForMessageRestricted+0x40>
 801665c:	697b      	ldr	r3, [r7, #20]
 801665e:	2200      	movs	r2, #0
 8016660:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016664:	f001 fe8e 	bl	8018384 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8016668:	697b      	ldr	r3, [r7, #20]
 801666a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801666c:	2b00      	cmp	r3, #0
 801666e:	d106      	bne.n	801667e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8016670:	697b      	ldr	r3, [r7, #20]
 8016672:	3324      	adds	r3, #36	; 0x24
 8016674:	687a      	ldr	r2, [r7, #4]
 8016676:	68b9      	ldr	r1, [r7, #8]
 8016678:	4618      	mov	r0, r3
 801667a:	f000 fd2f 	bl	80170dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801667e:	6978      	ldr	r0, [r7, #20]
 8016680:	f7ff ff26 	bl	80164d0 <prvUnlockQueue>
	}
 8016684:	bf00      	nop
 8016686:	3718      	adds	r7, #24
 8016688:	46bd      	mov	sp, r7
 801668a:	bd80      	pop	{r7, pc}

0801668c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801668c:	b580      	push	{r7, lr}
 801668e:	b08e      	sub	sp, #56	; 0x38
 8016690:	af04      	add	r7, sp, #16
 8016692:	60f8      	str	r0, [r7, #12]
 8016694:	60b9      	str	r1, [r7, #8]
 8016696:	607a      	str	r2, [r7, #4]
 8016698:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801669a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801669c:	2b00      	cmp	r3, #0
 801669e:	d10c      	bne.n	80166ba <xTaskCreateStatic+0x2e>
	__asm volatile
 80166a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166a4:	b672      	cpsid	i
 80166a6:	f383 8811 	msr	BASEPRI, r3
 80166aa:	f3bf 8f6f 	isb	sy
 80166ae:	f3bf 8f4f 	dsb	sy
 80166b2:	b662      	cpsie	i
 80166b4:	623b      	str	r3, [r7, #32]
}
 80166b6:	bf00      	nop
 80166b8:	e7fe      	b.n	80166b8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80166ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80166bc:	2b00      	cmp	r3, #0
 80166be:	d10c      	bne.n	80166da <xTaskCreateStatic+0x4e>
	__asm volatile
 80166c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166c4:	b672      	cpsid	i
 80166c6:	f383 8811 	msr	BASEPRI, r3
 80166ca:	f3bf 8f6f 	isb	sy
 80166ce:	f3bf 8f4f 	dsb	sy
 80166d2:	b662      	cpsie	i
 80166d4:	61fb      	str	r3, [r7, #28]
}
 80166d6:	bf00      	nop
 80166d8:	e7fe      	b.n	80166d8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80166da:	2354      	movs	r3, #84	; 0x54
 80166dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80166de:	693b      	ldr	r3, [r7, #16]
 80166e0:	2b54      	cmp	r3, #84	; 0x54
 80166e2:	d00c      	beq.n	80166fe <xTaskCreateStatic+0x72>
	__asm volatile
 80166e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166e8:	b672      	cpsid	i
 80166ea:	f383 8811 	msr	BASEPRI, r3
 80166ee:	f3bf 8f6f 	isb	sy
 80166f2:	f3bf 8f4f 	dsb	sy
 80166f6:	b662      	cpsie	i
 80166f8:	61bb      	str	r3, [r7, #24]
}
 80166fa:	bf00      	nop
 80166fc:	e7fe      	b.n	80166fc <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80166fe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8016700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016702:	2b00      	cmp	r3, #0
 8016704:	d01e      	beq.n	8016744 <xTaskCreateStatic+0xb8>
 8016706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016708:	2b00      	cmp	r3, #0
 801670a:	d01b      	beq.n	8016744 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801670c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801670e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8016710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016712:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016714:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8016716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016718:	2202      	movs	r2, #2
 801671a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801671e:	2300      	movs	r3, #0
 8016720:	9303      	str	r3, [sp, #12]
 8016722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016724:	9302      	str	r3, [sp, #8]
 8016726:	f107 0314 	add.w	r3, r7, #20
 801672a:	9301      	str	r3, [sp, #4]
 801672c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801672e:	9300      	str	r3, [sp, #0]
 8016730:	683b      	ldr	r3, [r7, #0]
 8016732:	687a      	ldr	r2, [r7, #4]
 8016734:	68b9      	ldr	r1, [r7, #8]
 8016736:	68f8      	ldr	r0, [r7, #12]
 8016738:	f000 f850 	bl	80167dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801673c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801673e:	f000 f8d7 	bl	80168f0 <prvAddNewTaskToReadyList>
 8016742:	e001      	b.n	8016748 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8016744:	2300      	movs	r3, #0
 8016746:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8016748:	697b      	ldr	r3, [r7, #20]
	}
 801674a:	4618      	mov	r0, r3
 801674c:	3728      	adds	r7, #40	; 0x28
 801674e:	46bd      	mov	sp, r7
 8016750:	bd80      	pop	{r7, pc}

08016752 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8016752:	b580      	push	{r7, lr}
 8016754:	b08c      	sub	sp, #48	; 0x30
 8016756:	af04      	add	r7, sp, #16
 8016758:	60f8      	str	r0, [r7, #12]
 801675a:	60b9      	str	r1, [r7, #8]
 801675c:	603b      	str	r3, [r7, #0]
 801675e:	4613      	mov	r3, r2
 8016760:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8016762:	88fb      	ldrh	r3, [r7, #6]
 8016764:	009b      	lsls	r3, r3, #2
 8016766:	4618      	mov	r0, r3
 8016768:	f001 ff04 	bl	8018574 <pvPortMalloc>
 801676c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801676e:	697b      	ldr	r3, [r7, #20]
 8016770:	2b00      	cmp	r3, #0
 8016772:	d00e      	beq.n	8016792 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8016774:	2054      	movs	r0, #84	; 0x54
 8016776:	f001 fefd 	bl	8018574 <pvPortMalloc>
 801677a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801677c:	69fb      	ldr	r3, [r7, #28]
 801677e:	2b00      	cmp	r3, #0
 8016780:	d003      	beq.n	801678a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8016782:	69fb      	ldr	r3, [r7, #28]
 8016784:	697a      	ldr	r2, [r7, #20]
 8016786:	631a      	str	r2, [r3, #48]	; 0x30
 8016788:	e005      	b.n	8016796 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801678a:	6978      	ldr	r0, [r7, #20]
 801678c:	f001 ffbc 	bl	8018708 <vPortFree>
 8016790:	e001      	b.n	8016796 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8016792:	2300      	movs	r3, #0
 8016794:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8016796:	69fb      	ldr	r3, [r7, #28]
 8016798:	2b00      	cmp	r3, #0
 801679a:	d017      	beq.n	80167cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801679c:	69fb      	ldr	r3, [r7, #28]
 801679e:	2200      	movs	r2, #0
 80167a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80167a4:	88fa      	ldrh	r2, [r7, #6]
 80167a6:	2300      	movs	r3, #0
 80167a8:	9303      	str	r3, [sp, #12]
 80167aa:	69fb      	ldr	r3, [r7, #28]
 80167ac:	9302      	str	r3, [sp, #8]
 80167ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167b0:	9301      	str	r3, [sp, #4]
 80167b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167b4:	9300      	str	r3, [sp, #0]
 80167b6:	683b      	ldr	r3, [r7, #0]
 80167b8:	68b9      	ldr	r1, [r7, #8]
 80167ba:	68f8      	ldr	r0, [r7, #12]
 80167bc:	f000 f80e 	bl	80167dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80167c0:	69f8      	ldr	r0, [r7, #28]
 80167c2:	f000 f895 	bl	80168f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80167c6:	2301      	movs	r3, #1
 80167c8:	61bb      	str	r3, [r7, #24]
 80167ca:	e002      	b.n	80167d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80167cc:	f04f 33ff 	mov.w	r3, #4294967295
 80167d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80167d2:	69bb      	ldr	r3, [r7, #24]
	}
 80167d4:	4618      	mov	r0, r3
 80167d6:	3720      	adds	r7, #32
 80167d8:	46bd      	mov	sp, r7
 80167da:	bd80      	pop	{r7, pc}

080167dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80167dc:	b580      	push	{r7, lr}
 80167de:	b088      	sub	sp, #32
 80167e0:	af00      	add	r7, sp, #0
 80167e2:	60f8      	str	r0, [r7, #12]
 80167e4:	60b9      	str	r1, [r7, #8]
 80167e6:	607a      	str	r2, [r7, #4]
 80167e8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80167ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80167ee:	6879      	ldr	r1, [r7, #4]
 80167f0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80167f4:	440b      	add	r3, r1
 80167f6:	009b      	lsls	r3, r3, #2
 80167f8:	4413      	add	r3, r2
 80167fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80167fc:	69bb      	ldr	r3, [r7, #24]
 80167fe:	f023 0307 	bic.w	r3, r3, #7
 8016802:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8016804:	69bb      	ldr	r3, [r7, #24]
 8016806:	f003 0307 	and.w	r3, r3, #7
 801680a:	2b00      	cmp	r3, #0
 801680c:	d00c      	beq.n	8016828 <prvInitialiseNewTask+0x4c>
	__asm volatile
 801680e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016812:	b672      	cpsid	i
 8016814:	f383 8811 	msr	BASEPRI, r3
 8016818:	f3bf 8f6f 	isb	sy
 801681c:	f3bf 8f4f 	dsb	sy
 8016820:	b662      	cpsie	i
 8016822:	617b      	str	r3, [r7, #20]
}
 8016824:	bf00      	nop
 8016826:	e7fe      	b.n	8016826 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8016828:	68bb      	ldr	r3, [r7, #8]
 801682a:	2b00      	cmp	r3, #0
 801682c:	d01f      	beq.n	801686e <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801682e:	2300      	movs	r3, #0
 8016830:	61fb      	str	r3, [r7, #28]
 8016832:	e012      	b.n	801685a <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8016834:	68ba      	ldr	r2, [r7, #8]
 8016836:	69fb      	ldr	r3, [r7, #28]
 8016838:	4413      	add	r3, r2
 801683a:	7819      	ldrb	r1, [r3, #0]
 801683c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801683e:	69fb      	ldr	r3, [r7, #28]
 8016840:	4413      	add	r3, r2
 8016842:	3334      	adds	r3, #52	; 0x34
 8016844:	460a      	mov	r2, r1
 8016846:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8016848:	68ba      	ldr	r2, [r7, #8]
 801684a:	69fb      	ldr	r3, [r7, #28]
 801684c:	4413      	add	r3, r2
 801684e:	781b      	ldrb	r3, [r3, #0]
 8016850:	2b00      	cmp	r3, #0
 8016852:	d006      	beq.n	8016862 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016854:	69fb      	ldr	r3, [r7, #28]
 8016856:	3301      	adds	r3, #1
 8016858:	61fb      	str	r3, [r7, #28]
 801685a:	69fb      	ldr	r3, [r7, #28]
 801685c:	2b0f      	cmp	r3, #15
 801685e:	d9e9      	bls.n	8016834 <prvInitialiseNewTask+0x58>
 8016860:	e000      	b.n	8016864 <prvInitialiseNewTask+0x88>
			{
				break;
 8016862:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8016864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016866:	2200      	movs	r2, #0
 8016868:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801686c:	e003      	b.n	8016876 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801686e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016870:	2200      	movs	r2, #0
 8016872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8016876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016878:	2b06      	cmp	r3, #6
 801687a:	d901      	bls.n	8016880 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801687c:	2306      	movs	r3, #6
 801687e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8016880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016882:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016884:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8016886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016888:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801688a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801688c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801688e:	2200      	movs	r2, #0
 8016890:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8016892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016894:	3304      	adds	r3, #4
 8016896:	4618      	mov	r0, r3
 8016898:	f7fe ff3a 	bl	8015710 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801689c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801689e:	3318      	adds	r3, #24
 80168a0:	4618      	mov	r0, r3
 80168a2:	f7fe ff35 	bl	8015710 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80168a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80168aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80168ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168ae:	f1c3 0207 	rsb	r2, r3, #7
 80168b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80168b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80168ba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80168bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168be:	2200      	movs	r2, #0
 80168c0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80168c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168c4:	2200      	movs	r2, #0
 80168c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80168ca:	683a      	ldr	r2, [r7, #0]
 80168cc:	68f9      	ldr	r1, [r7, #12]
 80168ce:	69b8      	ldr	r0, [r7, #24]
 80168d0:	f001 fc14 	bl	80180fc <pxPortInitialiseStack>
 80168d4:	4602      	mov	r2, r0
 80168d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168d8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80168da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168dc:	2b00      	cmp	r3, #0
 80168de:	d002      	beq.n	80168e6 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80168e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80168e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80168e6:	bf00      	nop
 80168e8:	3720      	adds	r7, #32
 80168ea:	46bd      	mov	sp, r7
 80168ec:	bd80      	pop	{r7, pc}
	...

080168f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80168f0:	b580      	push	{r7, lr}
 80168f2:	b082      	sub	sp, #8
 80168f4:	af00      	add	r7, sp, #0
 80168f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80168f8:	f001 fd10 	bl	801831c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80168fc:	4b2a      	ldr	r3, [pc, #168]	; (80169a8 <prvAddNewTaskToReadyList+0xb8>)
 80168fe:	681b      	ldr	r3, [r3, #0]
 8016900:	3301      	adds	r3, #1
 8016902:	4a29      	ldr	r2, [pc, #164]	; (80169a8 <prvAddNewTaskToReadyList+0xb8>)
 8016904:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8016906:	4b29      	ldr	r3, [pc, #164]	; (80169ac <prvAddNewTaskToReadyList+0xbc>)
 8016908:	681b      	ldr	r3, [r3, #0]
 801690a:	2b00      	cmp	r3, #0
 801690c:	d109      	bne.n	8016922 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801690e:	4a27      	ldr	r2, [pc, #156]	; (80169ac <prvAddNewTaskToReadyList+0xbc>)
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8016914:	4b24      	ldr	r3, [pc, #144]	; (80169a8 <prvAddNewTaskToReadyList+0xb8>)
 8016916:	681b      	ldr	r3, [r3, #0]
 8016918:	2b01      	cmp	r3, #1
 801691a:	d110      	bne.n	801693e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801691c:	f000 fd10 	bl	8017340 <prvInitialiseTaskLists>
 8016920:	e00d      	b.n	801693e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8016922:	4b23      	ldr	r3, [pc, #140]	; (80169b0 <prvAddNewTaskToReadyList+0xc0>)
 8016924:	681b      	ldr	r3, [r3, #0]
 8016926:	2b00      	cmp	r3, #0
 8016928:	d109      	bne.n	801693e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801692a:	4b20      	ldr	r3, [pc, #128]	; (80169ac <prvAddNewTaskToReadyList+0xbc>)
 801692c:	681b      	ldr	r3, [r3, #0]
 801692e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016934:	429a      	cmp	r2, r3
 8016936:	d802      	bhi.n	801693e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8016938:	4a1c      	ldr	r2, [pc, #112]	; (80169ac <prvAddNewTaskToReadyList+0xbc>)
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801693e:	4b1d      	ldr	r3, [pc, #116]	; (80169b4 <prvAddNewTaskToReadyList+0xc4>)
 8016940:	681b      	ldr	r3, [r3, #0]
 8016942:	3301      	adds	r3, #1
 8016944:	4a1b      	ldr	r2, [pc, #108]	; (80169b4 <prvAddNewTaskToReadyList+0xc4>)
 8016946:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801694c:	2201      	movs	r2, #1
 801694e:	409a      	lsls	r2, r3
 8016950:	4b19      	ldr	r3, [pc, #100]	; (80169b8 <prvAddNewTaskToReadyList+0xc8>)
 8016952:	681b      	ldr	r3, [r3, #0]
 8016954:	4313      	orrs	r3, r2
 8016956:	4a18      	ldr	r2, [pc, #96]	; (80169b8 <prvAddNewTaskToReadyList+0xc8>)
 8016958:	6013      	str	r3, [r2, #0]
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801695e:	4613      	mov	r3, r2
 8016960:	009b      	lsls	r3, r3, #2
 8016962:	4413      	add	r3, r2
 8016964:	009b      	lsls	r3, r3, #2
 8016966:	4a15      	ldr	r2, [pc, #84]	; (80169bc <prvAddNewTaskToReadyList+0xcc>)
 8016968:	441a      	add	r2, r3
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	3304      	adds	r3, #4
 801696e:	4619      	mov	r1, r3
 8016970:	4610      	mov	r0, r2
 8016972:	f7fe feda 	bl	801572a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8016976:	f001 fd05 	bl	8018384 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801697a:	4b0d      	ldr	r3, [pc, #52]	; (80169b0 <prvAddNewTaskToReadyList+0xc0>)
 801697c:	681b      	ldr	r3, [r3, #0]
 801697e:	2b00      	cmp	r3, #0
 8016980:	d00e      	beq.n	80169a0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8016982:	4b0a      	ldr	r3, [pc, #40]	; (80169ac <prvAddNewTaskToReadyList+0xbc>)
 8016984:	681b      	ldr	r3, [r3, #0]
 8016986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801698c:	429a      	cmp	r2, r3
 801698e:	d207      	bcs.n	80169a0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8016990:	4b0b      	ldr	r3, [pc, #44]	; (80169c0 <prvAddNewTaskToReadyList+0xd0>)
 8016992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016996:	601a      	str	r2, [r3, #0]
 8016998:	f3bf 8f4f 	dsb	sy
 801699c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80169a0:	bf00      	nop
 80169a2:	3708      	adds	r7, #8
 80169a4:	46bd      	mov	sp, r7
 80169a6:	bd80      	pop	{r7, pc}
 80169a8:	20017488 	.word	0x20017488
 80169ac:	20017388 	.word	0x20017388
 80169b0:	20017494 	.word	0x20017494
 80169b4:	200174a4 	.word	0x200174a4
 80169b8:	20017490 	.word	0x20017490
 80169bc:	2001738c 	.word	0x2001738c
 80169c0:	e000ed04 	.word	0xe000ed04

080169c4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80169c4:	b580      	push	{r7, lr}
 80169c6:	b084      	sub	sp, #16
 80169c8:	af00      	add	r7, sp, #0
 80169ca:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80169cc:	f001 fca6 	bl	801831c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	d102      	bne.n	80169dc <vTaskSuspend+0x18>
 80169d6:	4b3d      	ldr	r3, [pc, #244]	; (8016acc <vTaskSuspend+0x108>)
 80169d8:	681b      	ldr	r3, [r3, #0]
 80169da:	e000      	b.n	80169de <vTaskSuspend+0x1a>
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80169e0:	68fb      	ldr	r3, [r7, #12]
 80169e2:	3304      	adds	r3, #4
 80169e4:	4618      	mov	r0, r3
 80169e6:	f7fe fefd 	bl	80157e4 <uxListRemove>
 80169ea:	4603      	mov	r3, r0
 80169ec:	2b00      	cmp	r3, #0
 80169ee:	d115      	bne.n	8016a1c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80169f0:	68fb      	ldr	r3, [r7, #12]
 80169f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80169f4:	4936      	ldr	r1, [pc, #216]	; (8016ad0 <vTaskSuspend+0x10c>)
 80169f6:	4613      	mov	r3, r2
 80169f8:	009b      	lsls	r3, r3, #2
 80169fa:	4413      	add	r3, r2
 80169fc:	009b      	lsls	r3, r3, #2
 80169fe:	440b      	add	r3, r1
 8016a00:	681b      	ldr	r3, [r3, #0]
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	d10a      	bne.n	8016a1c <vTaskSuspend+0x58>
 8016a06:	68fb      	ldr	r3, [r7, #12]
 8016a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a0a:	2201      	movs	r2, #1
 8016a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8016a10:	43da      	mvns	r2, r3
 8016a12:	4b30      	ldr	r3, [pc, #192]	; (8016ad4 <vTaskSuspend+0x110>)
 8016a14:	681b      	ldr	r3, [r3, #0]
 8016a16:	4013      	ands	r3, r2
 8016a18:	4a2e      	ldr	r2, [pc, #184]	; (8016ad4 <vTaskSuspend+0x110>)
 8016a1a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016a1c:	68fb      	ldr	r3, [r7, #12]
 8016a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016a20:	2b00      	cmp	r3, #0
 8016a22:	d004      	beq.n	8016a2e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016a24:	68fb      	ldr	r3, [r7, #12]
 8016a26:	3318      	adds	r3, #24
 8016a28:	4618      	mov	r0, r3
 8016a2a:	f7fe fedb 	bl	80157e4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8016a2e:	68fb      	ldr	r3, [r7, #12]
 8016a30:	3304      	adds	r3, #4
 8016a32:	4619      	mov	r1, r3
 8016a34:	4828      	ldr	r0, [pc, #160]	; (8016ad8 <vTaskSuspend+0x114>)
 8016a36:	f7fe fe78 	bl	801572a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8016a3a:	68fb      	ldr	r3, [r7, #12]
 8016a3c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016a40:	b2db      	uxtb	r3, r3
 8016a42:	2b01      	cmp	r3, #1
 8016a44:	d103      	bne.n	8016a4e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8016a46:	68fb      	ldr	r3, [r7, #12]
 8016a48:	2200      	movs	r2, #0
 8016a4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8016a4e:	f001 fc99 	bl	8018384 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8016a52:	4b22      	ldr	r3, [pc, #136]	; (8016adc <vTaskSuspend+0x118>)
 8016a54:	681b      	ldr	r3, [r3, #0]
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	d005      	beq.n	8016a66 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8016a5a:	f001 fc5f 	bl	801831c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8016a5e:	f000 fd0f 	bl	8017480 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8016a62:	f001 fc8f 	bl	8018384 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8016a66:	4b19      	ldr	r3, [pc, #100]	; (8016acc <vTaskSuspend+0x108>)
 8016a68:	681b      	ldr	r3, [r3, #0]
 8016a6a:	68fa      	ldr	r2, [r7, #12]
 8016a6c:	429a      	cmp	r2, r3
 8016a6e:	d129      	bne.n	8016ac4 <vTaskSuspend+0x100>
		{
			if( xSchedulerRunning != pdFALSE )
 8016a70:	4b1a      	ldr	r3, [pc, #104]	; (8016adc <vTaskSuspend+0x118>)
 8016a72:	681b      	ldr	r3, [r3, #0]
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d019      	beq.n	8016aac <vTaskSuspend+0xe8>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8016a78:	4b19      	ldr	r3, [pc, #100]	; (8016ae0 <vTaskSuspend+0x11c>)
 8016a7a:	681b      	ldr	r3, [r3, #0]
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	d00c      	beq.n	8016a9a <vTaskSuspend+0xd6>
	__asm volatile
 8016a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a84:	b672      	cpsid	i
 8016a86:	f383 8811 	msr	BASEPRI, r3
 8016a8a:	f3bf 8f6f 	isb	sy
 8016a8e:	f3bf 8f4f 	dsb	sy
 8016a92:	b662      	cpsie	i
 8016a94:	60bb      	str	r3, [r7, #8]
}
 8016a96:	bf00      	nop
 8016a98:	e7fe      	b.n	8016a98 <vTaskSuspend+0xd4>
				portYIELD_WITHIN_API();
 8016a9a:	4b12      	ldr	r3, [pc, #72]	; (8016ae4 <vTaskSuspend+0x120>)
 8016a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016aa0:	601a      	str	r2, [r3, #0]
 8016aa2:	f3bf 8f4f 	dsb	sy
 8016aa6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016aaa:	e00b      	b.n	8016ac4 <vTaskSuspend+0x100>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8016aac:	4b0a      	ldr	r3, [pc, #40]	; (8016ad8 <vTaskSuspend+0x114>)
 8016aae:	681a      	ldr	r2, [r3, #0]
 8016ab0:	4b0d      	ldr	r3, [pc, #52]	; (8016ae8 <vTaskSuspend+0x124>)
 8016ab2:	681b      	ldr	r3, [r3, #0]
 8016ab4:	429a      	cmp	r2, r3
 8016ab6:	d103      	bne.n	8016ac0 <vTaskSuspend+0xfc>
					pxCurrentTCB = NULL;
 8016ab8:	4b04      	ldr	r3, [pc, #16]	; (8016acc <vTaskSuspend+0x108>)
 8016aba:	2200      	movs	r2, #0
 8016abc:	601a      	str	r2, [r3, #0]
	}
 8016abe:	e001      	b.n	8016ac4 <vTaskSuspend+0x100>
					vTaskSwitchContext();
 8016ac0:	f000 fa88 	bl	8016fd4 <vTaskSwitchContext>
	}
 8016ac4:	bf00      	nop
 8016ac6:	3710      	adds	r7, #16
 8016ac8:	46bd      	mov	sp, r7
 8016aca:	bd80      	pop	{r7, pc}
 8016acc:	20017388 	.word	0x20017388
 8016ad0:	2001738c 	.word	0x2001738c
 8016ad4:	20017490 	.word	0x20017490
 8016ad8:	20017474 	.word	0x20017474
 8016adc:	20017494 	.word	0x20017494
 8016ae0:	200174b0 	.word	0x200174b0
 8016ae4:	e000ed04 	.word	0xe000ed04
 8016ae8:	20017488 	.word	0x20017488

08016aec <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8016aec:	b480      	push	{r7}
 8016aee:	b087      	sub	sp, #28
 8016af0:	af00      	add	r7, sp, #0
 8016af2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8016af4:	2300      	movs	r3, #0
 8016af6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d10c      	bne.n	8016b1c <prvTaskIsTaskSuspended+0x30>
	__asm volatile
 8016b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b06:	b672      	cpsid	i
 8016b08:	f383 8811 	msr	BASEPRI, r3
 8016b0c:	f3bf 8f6f 	isb	sy
 8016b10:	f3bf 8f4f 	dsb	sy
 8016b14:	b662      	cpsie	i
 8016b16:	60fb      	str	r3, [r7, #12]
}
 8016b18:	bf00      	nop
 8016b1a:	e7fe      	b.n	8016b1a <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8016b1c:	693b      	ldr	r3, [r7, #16]
 8016b1e:	695b      	ldr	r3, [r3, #20]
 8016b20:	4a0a      	ldr	r2, [pc, #40]	; (8016b4c <prvTaskIsTaskSuspended+0x60>)
 8016b22:	4293      	cmp	r3, r2
 8016b24:	d10a      	bne.n	8016b3c <prvTaskIsTaskSuspended+0x50>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8016b26:	693b      	ldr	r3, [r7, #16]
 8016b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016b2a:	4a09      	ldr	r2, [pc, #36]	; (8016b50 <prvTaskIsTaskSuspended+0x64>)
 8016b2c:	4293      	cmp	r3, r2
 8016b2e:	d005      	beq.n	8016b3c <prvTaskIsTaskSuspended+0x50>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8016b30:	693b      	ldr	r3, [r7, #16]
 8016b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	d101      	bne.n	8016b3c <prvTaskIsTaskSuspended+0x50>
				{
					xReturn = pdTRUE;
 8016b38:	2301      	movs	r3, #1
 8016b3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016b3c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8016b3e:	4618      	mov	r0, r3
 8016b40:	371c      	adds	r7, #28
 8016b42:	46bd      	mov	sp, r7
 8016b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b48:	4770      	bx	lr
 8016b4a:	bf00      	nop
 8016b4c:	20017474 	.word	0x20017474
 8016b50:	20017448 	.word	0x20017448

08016b54 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8016b54:	b580      	push	{r7, lr}
 8016b56:	b084      	sub	sp, #16
 8016b58:	af00      	add	r7, sp, #0
 8016b5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	2b00      	cmp	r3, #0
 8016b64:	d10c      	bne.n	8016b80 <vTaskResume+0x2c>
	__asm volatile
 8016b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b6a:	b672      	cpsid	i
 8016b6c:	f383 8811 	msr	BASEPRI, r3
 8016b70:	f3bf 8f6f 	isb	sy
 8016b74:	f3bf 8f4f 	dsb	sy
 8016b78:	b662      	cpsie	i
 8016b7a:	60bb      	str	r3, [r7, #8]
}
 8016b7c:	bf00      	nop
 8016b7e:	e7fe      	b.n	8016b7e <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8016b80:	4b20      	ldr	r3, [pc, #128]	; (8016c04 <vTaskResume+0xb0>)
 8016b82:	681b      	ldr	r3, [r3, #0]
 8016b84:	68fa      	ldr	r2, [r7, #12]
 8016b86:	429a      	cmp	r2, r3
 8016b88:	d037      	beq.n	8016bfa <vTaskResume+0xa6>
 8016b8a:	68fb      	ldr	r3, [r7, #12]
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	d034      	beq.n	8016bfa <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 8016b90:	f001 fbc4 	bl	801831c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8016b94:	68f8      	ldr	r0, [r7, #12]
 8016b96:	f7ff ffa9 	bl	8016aec <prvTaskIsTaskSuspended>
 8016b9a:	4603      	mov	r3, r0
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	d02a      	beq.n	8016bf6 <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8016ba0:	68fb      	ldr	r3, [r7, #12]
 8016ba2:	3304      	adds	r3, #4
 8016ba4:	4618      	mov	r0, r3
 8016ba6:	f7fe fe1d 	bl	80157e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8016baa:	68fb      	ldr	r3, [r7, #12]
 8016bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016bae:	2201      	movs	r2, #1
 8016bb0:	409a      	lsls	r2, r3
 8016bb2:	4b15      	ldr	r3, [pc, #84]	; (8016c08 <vTaskResume+0xb4>)
 8016bb4:	681b      	ldr	r3, [r3, #0]
 8016bb6:	4313      	orrs	r3, r2
 8016bb8:	4a13      	ldr	r2, [pc, #76]	; (8016c08 <vTaskResume+0xb4>)
 8016bba:	6013      	str	r3, [r2, #0]
 8016bbc:	68fb      	ldr	r3, [r7, #12]
 8016bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016bc0:	4613      	mov	r3, r2
 8016bc2:	009b      	lsls	r3, r3, #2
 8016bc4:	4413      	add	r3, r2
 8016bc6:	009b      	lsls	r3, r3, #2
 8016bc8:	4a10      	ldr	r2, [pc, #64]	; (8016c0c <vTaskResume+0xb8>)
 8016bca:	441a      	add	r2, r3
 8016bcc:	68fb      	ldr	r3, [r7, #12]
 8016bce:	3304      	adds	r3, #4
 8016bd0:	4619      	mov	r1, r3
 8016bd2:	4610      	mov	r0, r2
 8016bd4:	f7fe fda9 	bl	801572a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016bd8:	68fb      	ldr	r3, [r7, #12]
 8016bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016bdc:	4b09      	ldr	r3, [pc, #36]	; (8016c04 <vTaskResume+0xb0>)
 8016bde:	681b      	ldr	r3, [r3, #0]
 8016be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016be2:	429a      	cmp	r2, r3
 8016be4:	d307      	bcc.n	8016bf6 <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8016be6:	4b0a      	ldr	r3, [pc, #40]	; (8016c10 <vTaskResume+0xbc>)
 8016be8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016bec:	601a      	str	r2, [r3, #0]
 8016bee:	f3bf 8f4f 	dsb	sy
 8016bf2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8016bf6:	f001 fbc5 	bl	8018384 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016bfa:	bf00      	nop
 8016bfc:	3710      	adds	r7, #16
 8016bfe:	46bd      	mov	sp, r7
 8016c00:	bd80      	pop	{r7, pc}
 8016c02:	bf00      	nop
 8016c04:	20017388 	.word	0x20017388
 8016c08:	20017490 	.word	0x20017490
 8016c0c:	2001738c 	.word	0x2001738c
 8016c10:	e000ed04 	.word	0xe000ed04

08016c14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8016c14:	b580      	push	{r7, lr}
 8016c16:	b08a      	sub	sp, #40	; 0x28
 8016c18:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8016c1a:	2300      	movs	r3, #0
 8016c1c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8016c1e:	2300      	movs	r3, #0
 8016c20:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8016c22:	463a      	mov	r2, r7
 8016c24:	1d39      	adds	r1, r7, #4
 8016c26:	f107 0308 	add.w	r3, r7, #8
 8016c2a:	4618      	mov	r0, r3
 8016c2c:	f7f6 f9e6 	bl	800cffc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8016c30:	6839      	ldr	r1, [r7, #0]
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	68ba      	ldr	r2, [r7, #8]
 8016c36:	9202      	str	r2, [sp, #8]
 8016c38:	9301      	str	r3, [sp, #4]
 8016c3a:	2300      	movs	r3, #0
 8016c3c:	9300      	str	r3, [sp, #0]
 8016c3e:	2300      	movs	r3, #0
 8016c40:	460a      	mov	r2, r1
 8016c42:	4923      	ldr	r1, [pc, #140]	; (8016cd0 <vTaskStartScheduler+0xbc>)
 8016c44:	4823      	ldr	r0, [pc, #140]	; (8016cd4 <vTaskStartScheduler+0xc0>)
 8016c46:	f7ff fd21 	bl	801668c <xTaskCreateStatic>
 8016c4a:	4603      	mov	r3, r0
 8016c4c:	4a22      	ldr	r2, [pc, #136]	; (8016cd8 <vTaskStartScheduler+0xc4>)
 8016c4e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8016c50:	4b21      	ldr	r3, [pc, #132]	; (8016cd8 <vTaskStartScheduler+0xc4>)
 8016c52:	681b      	ldr	r3, [r3, #0]
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	d002      	beq.n	8016c5e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8016c58:	2301      	movs	r3, #1
 8016c5a:	617b      	str	r3, [r7, #20]
 8016c5c:	e001      	b.n	8016c62 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8016c5e:	2300      	movs	r3, #0
 8016c60:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8016c62:	697b      	ldr	r3, [r7, #20]
 8016c64:	2b01      	cmp	r3, #1
 8016c66:	d102      	bne.n	8016c6e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8016c68:	f000 fe6a 	bl	8017940 <xTimerCreateTimerTask>
 8016c6c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8016c6e:	697b      	ldr	r3, [r7, #20]
 8016c70:	2b01      	cmp	r3, #1
 8016c72:	d118      	bne.n	8016ca6 <vTaskStartScheduler+0x92>
	__asm volatile
 8016c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c78:	b672      	cpsid	i
 8016c7a:	f383 8811 	msr	BASEPRI, r3
 8016c7e:	f3bf 8f6f 	isb	sy
 8016c82:	f3bf 8f4f 	dsb	sy
 8016c86:	b662      	cpsie	i
 8016c88:	613b      	str	r3, [r7, #16]
}
 8016c8a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8016c8c:	4b13      	ldr	r3, [pc, #76]	; (8016cdc <vTaskStartScheduler+0xc8>)
 8016c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8016c92:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8016c94:	4b12      	ldr	r3, [pc, #72]	; (8016ce0 <vTaskStartScheduler+0xcc>)
 8016c96:	2201      	movs	r2, #1
 8016c98:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8016c9a:	4b12      	ldr	r3, [pc, #72]	; (8016ce4 <vTaskStartScheduler+0xd0>)
 8016c9c:	2200      	movs	r2, #0
 8016c9e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8016ca0:	f001 fabe 	bl	8018220 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8016ca4:	e010      	b.n	8016cc8 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8016ca6:	697b      	ldr	r3, [r7, #20]
 8016ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016cac:	d10c      	bne.n	8016cc8 <vTaskStartScheduler+0xb4>
	__asm volatile
 8016cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cb2:	b672      	cpsid	i
 8016cb4:	f383 8811 	msr	BASEPRI, r3
 8016cb8:	f3bf 8f6f 	isb	sy
 8016cbc:	f3bf 8f4f 	dsb	sy
 8016cc0:	b662      	cpsie	i
 8016cc2:	60fb      	str	r3, [r7, #12]
}
 8016cc4:	bf00      	nop
 8016cc6:	e7fe      	b.n	8016cc6 <vTaskStartScheduler+0xb2>
}
 8016cc8:	bf00      	nop
 8016cca:	3718      	adds	r7, #24
 8016ccc:	46bd      	mov	sp, r7
 8016cce:	bd80      	pop	{r7, pc}
 8016cd0:	080217fc 	.word	0x080217fc
 8016cd4:	08017311 	.word	0x08017311
 8016cd8:	200174ac 	.word	0x200174ac
 8016cdc:	200174a8 	.word	0x200174a8
 8016ce0:	20017494 	.word	0x20017494
 8016ce4:	2001748c 	.word	0x2001748c

08016ce8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8016ce8:	b480      	push	{r7}
 8016cea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8016cec:	4b04      	ldr	r3, [pc, #16]	; (8016d00 <vTaskSuspendAll+0x18>)
 8016cee:	681b      	ldr	r3, [r3, #0]
 8016cf0:	3301      	adds	r3, #1
 8016cf2:	4a03      	ldr	r2, [pc, #12]	; (8016d00 <vTaskSuspendAll+0x18>)
 8016cf4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8016cf6:	bf00      	nop
 8016cf8:	46bd      	mov	sp, r7
 8016cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cfe:	4770      	bx	lr
 8016d00:	200174b0 	.word	0x200174b0

08016d04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8016d04:	b580      	push	{r7, lr}
 8016d06:	b084      	sub	sp, #16
 8016d08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8016d0a:	2300      	movs	r3, #0
 8016d0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8016d0e:	2300      	movs	r3, #0
 8016d10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8016d12:	4b42      	ldr	r3, [pc, #264]	; (8016e1c <xTaskResumeAll+0x118>)
 8016d14:	681b      	ldr	r3, [r3, #0]
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	d10c      	bne.n	8016d34 <xTaskResumeAll+0x30>
	__asm volatile
 8016d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d1e:	b672      	cpsid	i
 8016d20:	f383 8811 	msr	BASEPRI, r3
 8016d24:	f3bf 8f6f 	isb	sy
 8016d28:	f3bf 8f4f 	dsb	sy
 8016d2c:	b662      	cpsie	i
 8016d2e:	603b      	str	r3, [r7, #0]
}
 8016d30:	bf00      	nop
 8016d32:	e7fe      	b.n	8016d32 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8016d34:	f001 faf2 	bl	801831c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8016d38:	4b38      	ldr	r3, [pc, #224]	; (8016e1c <xTaskResumeAll+0x118>)
 8016d3a:	681b      	ldr	r3, [r3, #0]
 8016d3c:	3b01      	subs	r3, #1
 8016d3e:	4a37      	ldr	r2, [pc, #220]	; (8016e1c <xTaskResumeAll+0x118>)
 8016d40:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016d42:	4b36      	ldr	r3, [pc, #216]	; (8016e1c <xTaskResumeAll+0x118>)
 8016d44:	681b      	ldr	r3, [r3, #0]
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	d161      	bne.n	8016e0e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8016d4a:	4b35      	ldr	r3, [pc, #212]	; (8016e20 <xTaskResumeAll+0x11c>)
 8016d4c:	681b      	ldr	r3, [r3, #0]
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	d05d      	beq.n	8016e0e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016d52:	e02e      	b.n	8016db2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016d54:	4b33      	ldr	r3, [pc, #204]	; (8016e24 <xTaskResumeAll+0x120>)
 8016d56:	68db      	ldr	r3, [r3, #12]
 8016d58:	68db      	ldr	r3, [r3, #12]
 8016d5a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016d5c:	68fb      	ldr	r3, [r7, #12]
 8016d5e:	3318      	adds	r3, #24
 8016d60:	4618      	mov	r0, r3
 8016d62:	f7fe fd3f 	bl	80157e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016d66:	68fb      	ldr	r3, [r7, #12]
 8016d68:	3304      	adds	r3, #4
 8016d6a:	4618      	mov	r0, r3
 8016d6c:	f7fe fd3a 	bl	80157e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8016d70:	68fb      	ldr	r3, [r7, #12]
 8016d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d74:	2201      	movs	r2, #1
 8016d76:	409a      	lsls	r2, r3
 8016d78:	4b2b      	ldr	r3, [pc, #172]	; (8016e28 <xTaskResumeAll+0x124>)
 8016d7a:	681b      	ldr	r3, [r3, #0]
 8016d7c:	4313      	orrs	r3, r2
 8016d7e:	4a2a      	ldr	r2, [pc, #168]	; (8016e28 <xTaskResumeAll+0x124>)
 8016d80:	6013      	str	r3, [r2, #0]
 8016d82:	68fb      	ldr	r3, [r7, #12]
 8016d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d86:	4613      	mov	r3, r2
 8016d88:	009b      	lsls	r3, r3, #2
 8016d8a:	4413      	add	r3, r2
 8016d8c:	009b      	lsls	r3, r3, #2
 8016d8e:	4a27      	ldr	r2, [pc, #156]	; (8016e2c <xTaskResumeAll+0x128>)
 8016d90:	441a      	add	r2, r3
 8016d92:	68fb      	ldr	r3, [r7, #12]
 8016d94:	3304      	adds	r3, #4
 8016d96:	4619      	mov	r1, r3
 8016d98:	4610      	mov	r0, r2
 8016d9a:	f7fe fcc6 	bl	801572a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016d9e:	68fb      	ldr	r3, [r7, #12]
 8016da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016da2:	4b23      	ldr	r3, [pc, #140]	; (8016e30 <xTaskResumeAll+0x12c>)
 8016da4:	681b      	ldr	r3, [r3, #0]
 8016da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016da8:	429a      	cmp	r2, r3
 8016daa:	d302      	bcc.n	8016db2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8016dac:	4b21      	ldr	r3, [pc, #132]	; (8016e34 <xTaskResumeAll+0x130>)
 8016dae:	2201      	movs	r2, #1
 8016db0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016db2:	4b1c      	ldr	r3, [pc, #112]	; (8016e24 <xTaskResumeAll+0x120>)
 8016db4:	681b      	ldr	r3, [r3, #0]
 8016db6:	2b00      	cmp	r3, #0
 8016db8:	d1cc      	bne.n	8016d54 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8016dba:	68fb      	ldr	r3, [r7, #12]
 8016dbc:	2b00      	cmp	r3, #0
 8016dbe:	d001      	beq.n	8016dc4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8016dc0:	f000 fb5e 	bl	8017480 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8016dc4:	4b1c      	ldr	r3, [pc, #112]	; (8016e38 <xTaskResumeAll+0x134>)
 8016dc6:	681b      	ldr	r3, [r3, #0]
 8016dc8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8016dca:	687b      	ldr	r3, [r7, #4]
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	d010      	beq.n	8016df2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8016dd0:	f000 f846 	bl	8016e60 <xTaskIncrementTick>
 8016dd4:	4603      	mov	r3, r0
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	d002      	beq.n	8016de0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8016dda:	4b16      	ldr	r3, [pc, #88]	; (8016e34 <xTaskResumeAll+0x130>)
 8016ddc:	2201      	movs	r2, #1
 8016dde:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	3b01      	subs	r3, #1
 8016de4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8016de6:	687b      	ldr	r3, [r7, #4]
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	d1f1      	bne.n	8016dd0 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8016dec:	4b12      	ldr	r3, [pc, #72]	; (8016e38 <xTaskResumeAll+0x134>)
 8016dee:	2200      	movs	r2, #0
 8016df0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8016df2:	4b10      	ldr	r3, [pc, #64]	; (8016e34 <xTaskResumeAll+0x130>)
 8016df4:	681b      	ldr	r3, [r3, #0]
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	d009      	beq.n	8016e0e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8016dfa:	2301      	movs	r3, #1
 8016dfc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8016dfe:	4b0f      	ldr	r3, [pc, #60]	; (8016e3c <xTaskResumeAll+0x138>)
 8016e00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016e04:	601a      	str	r2, [r3, #0]
 8016e06:	f3bf 8f4f 	dsb	sy
 8016e0a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016e0e:	f001 fab9 	bl	8018384 <vPortExitCritical>

	return xAlreadyYielded;
 8016e12:	68bb      	ldr	r3, [r7, #8]
}
 8016e14:	4618      	mov	r0, r3
 8016e16:	3710      	adds	r7, #16
 8016e18:	46bd      	mov	sp, r7
 8016e1a:	bd80      	pop	{r7, pc}
 8016e1c:	200174b0 	.word	0x200174b0
 8016e20:	20017488 	.word	0x20017488
 8016e24:	20017448 	.word	0x20017448
 8016e28:	20017490 	.word	0x20017490
 8016e2c:	2001738c 	.word	0x2001738c
 8016e30:	20017388 	.word	0x20017388
 8016e34:	2001749c 	.word	0x2001749c
 8016e38:	20017498 	.word	0x20017498
 8016e3c:	e000ed04 	.word	0xe000ed04

08016e40 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8016e40:	b480      	push	{r7}
 8016e42:	b083      	sub	sp, #12
 8016e44:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8016e46:	4b05      	ldr	r3, [pc, #20]	; (8016e5c <xTaskGetTickCount+0x1c>)
 8016e48:	681b      	ldr	r3, [r3, #0]
 8016e4a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8016e4c:	687b      	ldr	r3, [r7, #4]
}
 8016e4e:	4618      	mov	r0, r3
 8016e50:	370c      	adds	r7, #12
 8016e52:	46bd      	mov	sp, r7
 8016e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e58:	4770      	bx	lr
 8016e5a:	bf00      	nop
 8016e5c:	2001748c 	.word	0x2001748c

08016e60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8016e60:	b580      	push	{r7, lr}
 8016e62:	b086      	sub	sp, #24
 8016e64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8016e66:	2300      	movs	r3, #0
 8016e68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016e6a:	4b4f      	ldr	r3, [pc, #316]	; (8016fa8 <xTaskIncrementTick+0x148>)
 8016e6c:	681b      	ldr	r3, [r3, #0]
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	f040 808a 	bne.w	8016f88 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8016e74:	4b4d      	ldr	r3, [pc, #308]	; (8016fac <xTaskIncrementTick+0x14c>)
 8016e76:	681b      	ldr	r3, [r3, #0]
 8016e78:	3301      	adds	r3, #1
 8016e7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8016e7c:	4a4b      	ldr	r2, [pc, #300]	; (8016fac <xTaskIncrementTick+0x14c>)
 8016e7e:	693b      	ldr	r3, [r7, #16]
 8016e80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8016e82:	693b      	ldr	r3, [r7, #16]
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	d122      	bne.n	8016ece <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8016e88:	4b49      	ldr	r3, [pc, #292]	; (8016fb0 <xTaskIncrementTick+0x150>)
 8016e8a:	681b      	ldr	r3, [r3, #0]
 8016e8c:	681b      	ldr	r3, [r3, #0]
 8016e8e:	2b00      	cmp	r3, #0
 8016e90:	d00c      	beq.n	8016eac <xTaskIncrementTick+0x4c>
	__asm volatile
 8016e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e96:	b672      	cpsid	i
 8016e98:	f383 8811 	msr	BASEPRI, r3
 8016e9c:	f3bf 8f6f 	isb	sy
 8016ea0:	f3bf 8f4f 	dsb	sy
 8016ea4:	b662      	cpsie	i
 8016ea6:	603b      	str	r3, [r7, #0]
}
 8016ea8:	bf00      	nop
 8016eaa:	e7fe      	b.n	8016eaa <xTaskIncrementTick+0x4a>
 8016eac:	4b40      	ldr	r3, [pc, #256]	; (8016fb0 <xTaskIncrementTick+0x150>)
 8016eae:	681b      	ldr	r3, [r3, #0]
 8016eb0:	60fb      	str	r3, [r7, #12]
 8016eb2:	4b40      	ldr	r3, [pc, #256]	; (8016fb4 <xTaskIncrementTick+0x154>)
 8016eb4:	681b      	ldr	r3, [r3, #0]
 8016eb6:	4a3e      	ldr	r2, [pc, #248]	; (8016fb0 <xTaskIncrementTick+0x150>)
 8016eb8:	6013      	str	r3, [r2, #0]
 8016eba:	4a3e      	ldr	r2, [pc, #248]	; (8016fb4 <xTaskIncrementTick+0x154>)
 8016ebc:	68fb      	ldr	r3, [r7, #12]
 8016ebe:	6013      	str	r3, [r2, #0]
 8016ec0:	4b3d      	ldr	r3, [pc, #244]	; (8016fb8 <xTaskIncrementTick+0x158>)
 8016ec2:	681b      	ldr	r3, [r3, #0]
 8016ec4:	3301      	adds	r3, #1
 8016ec6:	4a3c      	ldr	r2, [pc, #240]	; (8016fb8 <xTaskIncrementTick+0x158>)
 8016ec8:	6013      	str	r3, [r2, #0]
 8016eca:	f000 fad9 	bl	8017480 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8016ece:	4b3b      	ldr	r3, [pc, #236]	; (8016fbc <xTaskIncrementTick+0x15c>)
 8016ed0:	681b      	ldr	r3, [r3, #0]
 8016ed2:	693a      	ldr	r2, [r7, #16]
 8016ed4:	429a      	cmp	r2, r3
 8016ed6:	d348      	bcc.n	8016f6a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016ed8:	4b35      	ldr	r3, [pc, #212]	; (8016fb0 <xTaskIncrementTick+0x150>)
 8016eda:	681b      	ldr	r3, [r3, #0]
 8016edc:	681b      	ldr	r3, [r3, #0]
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	d104      	bne.n	8016eec <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016ee2:	4b36      	ldr	r3, [pc, #216]	; (8016fbc <xTaskIncrementTick+0x15c>)
 8016ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8016ee8:	601a      	str	r2, [r3, #0]
					break;
 8016eea:	e03e      	b.n	8016f6a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016eec:	4b30      	ldr	r3, [pc, #192]	; (8016fb0 <xTaskIncrementTick+0x150>)
 8016eee:	681b      	ldr	r3, [r3, #0]
 8016ef0:	68db      	ldr	r3, [r3, #12]
 8016ef2:	68db      	ldr	r3, [r3, #12]
 8016ef4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8016ef6:	68bb      	ldr	r3, [r7, #8]
 8016ef8:	685b      	ldr	r3, [r3, #4]
 8016efa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8016efc:	693a      	ldr	r2, [r7, #16]
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	429a      	cmp	r2, r3
 8016f02:	d203      	bcs.n	8016f0c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8016f04:	4a2d      	ldr	r2, [pc, #180]	; (8016fbc <xTaskIncrementTick+0x15c>)
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8016f0a:	e02e      	b.n	8016f6a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016f0c:	68bb      	ldr	r3, [r7, #8]
 8016f0e:	3304      	adds	r3, #4
 8016f10:	4618      	mov	r0, r3
 8016f12:	f7fe fc67 	bl	80157e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016f16:	68bb      	ldr	r3, [r7, #8]
 8016f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016f1a:	2b00      	cmp	r3, #0
 8016f1c:	d004      	beq.n	8016f28 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016f1e:	68bb      	ldr	r3, [r7, #8]
 8016f20:	3318      	adds	r3, #24
 8016f22:	4618      	mov	r0, r3
 8016f24:	f7fe fc5e 	bl	80157e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8016f28:	68bb      	ldr	r3, [r7, #8]
 8016f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f2c:	2201      	movs	r2, #1
 8016f2e:	409a      	lsls	r2, r3
 8016f30:	4b23      	ldr	r3, [pc, #140]	; (8016fc0 <xTaskIncrementTick+0x160>)
 8016f32:	681b      	ldr	r3, [r3, #0]
 8016f34:	4313      	orrs	r3, r2
 8016f36:	4a22      	ldr	r2, [pc, #136]	; (8016fc0 <xTaskIncrementTick+0x160>)
 8016f38:	6013      	str	r3, [r2, #0]
 8016f3a:	68bb      	ldr	r3, [r7, #8]
 8016f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016f3e:	4613      	mov	r3, r2
 8016f40:	009b      	lsls	r3, r3, #2
 8016f42:	4413      	add	r3, r2
 8016f44:	009b      	lsls	r3, r3, #2
 8016f46:	4a1f      	ldr	r2, [pc, #124]	; (8016fc4 <xTaskIncrementTick+0x164>)
 8016f48:	441a      	add	r2, r3
 8016f4a:	68bb      	ldr	r3, [r7, #8]
 8016f4c:	3304      	adds	r3, #4
 8016f4e:	4619      	mov	r1, r3
 8016f50:	4610      	mov	r0, r2
 8016f52:	f7fe fbea 	bl	801572a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016f56:	68bb      	ldr	r3, [r7, #8]
 8016f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016f5a:	4b1b      	ldr	r3, [pc, #108]	; (8016fc8 <xTaskIncrementTick+0x168>)
 8016f5c:	681b      	ldr	r3, [r3, #0]
 8016f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f60:	429a      	cmp	r2, r3
 8016f62:	d3b9      	bcc.n	8016ed8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8016f64:	2301      	movs	r3, #1
 8016f66:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016f68:	e7b6      	b.n	8016ed8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8016f6a:	4b17      	ldr	r3, [pc, #92]	; (8016fc8 <xTaskIncrementTick+0x168>)
 8016f6c:	681b      	ldr	r3, [r3, #0]
 8016f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016f70:	4914      	ldr	r1, [pc, #80]	; (8016fc4 <xTaskIncrementTick+0x164>)
 8016f72:	4613      	mov	r3, r2
 8016f74:	009b      	lsls	r3, r3, #2
 8016f76:	4413      	add	r3, r2
 8016f78:	009b      	lsls	r3, r3, #2
 8016f7a:	440b      	add	r3, r1
 8016f7c:	681b      	ldr	r3, [r3, #0]
 8016f7e:	2b01      	cmp	r3, #1
 8016f80:	d907      	bls.n	8016f92 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8016f82:	2301      	movs	r3, #1
 8016f84:	617b      	str	r3, [r7, #20]
 8016f86:	e004      	b.n	8016f92 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8016f88:	4b10      	ldr	r3, [pc, #64]	; (8016fcc <xTaskIncrementTick+0x16c>)
 8016f8a:	681b      	ldr	r3, [r3, #0]
 8016f8c:	3301      	adds	r3, #1
 8016f8e:	4a0f      	ldr	r2, [pc, #60]	; (8016fcc <xTaskIncrementTick+0x16c>)
 8016f90:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8016f92:	4b0f      	ldr	r3, [pc, #60]	; (8016fd0 <xTaskIncrementTick+0x170>)
 8016f94:	681b      	ldr	r3, [r3, #0]
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	d001      	beq.n	8016f9e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8016f9a:	2301      	movs	r3, #1
 8016f9c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8016f9e:	697b      	ldr	r3, [r7, #20]
}
 8016fa0:	4618      	mov	r0, r3
 8016fa2:	3718      	adds	r7, #24
 8016fa4:	46bd      	mov	sp, r7
 8016fa6:	bd80      	pop	{r7, pc}
 8016fa8:	200174b0 	.word	0x200174b0
 8016fac:	2001748c 	.word	0x2001748c
 8016fb0:	20017440 	.word	0x20017440
 8016fb4:	20017444 	.word	0x20017444
 8016fb8:	200174a0 	.word	0x200174a0
 8016fbc:	200174a8 	.word	0x200174a8
 8016fc0:	20017490 	.word	0x20017490
 8016fc4:	2001738c 	.word	0x2001738c
 8016fc8:	20017388 	.word	0x20017388
 8016fcc:	20017498 	.word	0x20017498
 8016fd0:	2001749c 	.word	0x2001749c

08016fd4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8016fd4:	b480      	push	{r7}
 8016fd6:	b087      	sub	sp, #28
 8016fd8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8016fda:	4b28      	ldr	r3, [pc, #160]	; (801707c <vTaskSwitchContext+0xa8>)
 8016fdc:	681b      	ldr	r3, [r3, #0]
 8016fde:	2b00      	cmp	r3, #0
 8016fe0:	d003      	beq.n	8016fea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8016fe2:	4b27      	ldr	r3, [pc, #156]	; (8017080 <vTaskSwitchContext+0xac>)
 8016fe4:	2201      	movs	r2, #1
 8016fe6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8016fe8:	e041      	b.n	801706e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8016fea:	4b25      	ldr	r3, [pc, #148]	; (8017080 <vTaskSwitchContext+0xac>)
 8016fec:	2200      	movs	r2, #0
 8016fee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016ff0:	4b24      	ldr	r3, [pc, #144]	; (8017084 <vTaskSwitchContext+0xb0>)
 8016ff2:	681b      	ldr	r3, [r3, #0]
 8016ff4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8016ff6:	68fb      	ldr	r3, [r7, #12]
 8016ff8:	fab3 f383 	clz	r3, r3
 8016ffc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8016ffe:	7afb      	ldrb	r3, [r7, #11]
 8017000:	f1c3 031f 	rsb	r3, r3, #31
 8017004:	617b      	str	r3, [r7, #20]
 8017006:	4920      	ldr	r1, [pc, #128]	; (8017088 <vTaskSwitchContext+0xb4>)
 8017008:	697a      	ldr	r2, [r7, #20]
 801700a:	4613      	mov	r3, r2
 801700c:	009b      	lsls	r3, r3, #2
 801700e:	4413      	add	r3, r2
 8017010:	009b      	lsls	r3, r3, #2
 8017012:	440b      	add	r3, r1
 8017014:	681b      	ldr	r3, [r3, #0]
 8017016:	2b00      	cmp	r3, #0
 8017018:	d10c      	bne.n	8017034 <vTaskSwitchContext+0x60>
	__asm volatile
 801701a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801701e:	b672      	cpsid	i
 8017020:	f383 8811 	msr	BASEPRI, r3
 8017024:	f3bf 8f6f 	isb	sy
 8017028:	f3bf 8f4f 	dsb	sy
 801702c:	b662      	cpsie	i
 801702e:	607b      	str	r3, [r7, #4]
}
 8017030:	bf00      	nop
 8017032:	e7fe      	b.n	8017032 <vTaskSwitchContext+0x5e>
 8017034:	697a      	ldr	r2, [r7, #20]
 8017036:	4613      	mov	r3, r2
 8017038:	009b      	lsls	r3, r3, #2
 801703a:	4413      	add	r3, r2
 801703c:	009b      	lsls	r3, r3, #2
 801703e:	4a12      	ldr	r2, [pc, #72]	; (8017088 <vTaskSwitchContext+0xb4>)
 8017040:	4413      	add	r3, r2
 8017042:	613b      	str	r3, [r7, #16]
 8017044:	693b      	ldr	r3, [r7, #16]
 8017046:	685b      	ldr	r3, [r3, #4]
 8017048:	685a      	ldr	r2, [r3, #4]
 801704a:	693b      	ldr	r3, [r7, #16]
 801704c:	605a      	str	r2, [r3, #4]
 801704e:	693b      	ldr	r3, [r7, #16]
 8017050:	685a      	ldr	r2, [r3, #4]
 8017052:	693b      	ldr	r3, [r7, #16]
 8017054:	3308      	adds	r3, #8
 8017056:	429a      	cmp	r2, r3
 8017058:	d104      	bne.n	8017064 <vTaskSwitchContext+0x90>
 801705a:	693b      	ldr	r3, [r7, #16]
 801705c:	685b      	ldr	r3, [r3, #4]
 801705e:	685a      	ldr	r2, [r3, #4]
 8017060:	693b      	ldr	r3, [r7, #16]
 8017062:	605a      	str	r2, [r3, #4]
 8017064:	693b      	ldr	r3, [r7, #16]
 8017066:	685b      	ldr	r3, [r3, #4]
 8017068:	68db      	ldr	r3, [r3, #12]
 801706a:	4a08      	ldr	r2, [pc, #32]	; (801708c <vTaskSwitchContext+0xb8>)
 801706c:	6013      	str	r3, [r2, #0]
}
 801706e:	bf00      	nop
 8017070:	371c      	adds	r7, #28
 8017072:	46bd      	mov	sp, r7
 8017074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017078:	4770      	bx	lr
 801707a:	bf00      	nop
 801707c:	200174b0 	.word	0x200174b0
 8017080:	2001749c 	.word	0x2001749c
 8017084:	20017490 	.word	0x20017490
 8017088:	2001738c 	.word	0x2001738c
 801708c:	20017388 	.word	0x20017388

08017090 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8017090:	b580      	push	{r7, lr}
 8017092:	b084      	sub	sp, #16
 8017094:	af00      	add	r7, sp, #0
 8017096:	6078      	str	r0, [r7, #4]
 8017098:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	2b00      	cmp	r3, #0
 801709e:	d10c      	bne.n	80170ba <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80170a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170a4:	b672      	cpsid	i
 80170a6:	f383 8811 	msr	BASEPRI, r3
 80170aa:	f3bf 8f6f 	isb	sy
 80170ae:	f3bf 8f4f 	dsb	sy
 80170b2:	b662      	cpsie	i
 80170b4:	60fb      	str	r3, [r7, #12]
}
 80170b6:	bf00      	nop
 80170b8:	e7fe      	b.n	80170b8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80170ba:	4b07      	ldr	r3, [pc, #28]	; (80170d8 <vTaskPlaceOnEventList+0x48>)
 80170bc:	681b      	ldr	r3, [r3, #0]
 80170be:	3318      	adds	r3, #24
 80170c0:	4619      	mov	r1, r3
 80170c2:	6878      	ldr	r0, [r7, #4]
 80170c4:	f7fe fb55 	bl	8015772 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80170c8:	2101      	movs	r1, #1
 80170ca:	6838      	ldr	r0, [r7, #0]
 80170cc:	f000 fbd2 	bl	8017874 <prvAddCurrentTaskToDelayedList>
}
 80170d0:	bf00      	nop
 80170d2:	3710      	adds	r7, #16
 80170d4:	46bd      	mov	sp, r7
 80170d6:	bd80      	pop	{r7, pc}
 80170d8:	20017388 	.word	0x20017388

080170dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80170dc:	b580      	push	{r7, lr}
 80170de:	b086      	sub	sp, #24
 80170e0:	af00      	add	r7, sp, #0
 80170e2:	60f8      	str	r0, [r7, #12]
 80170e4:	60b9      	str	r1, [r7, #8]
 80170e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80170e8:	68fb      	ldr	r3, [r7, #12]
 80170ea:	2b00      	cmp	r3, #0
 80170ec:	d10c      	bne.n	8017108 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 80170ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170f2:	b672      	cpsid	i
 80170f4:	f383 8811 	msr	BASEPRI, r3
 80170f8:	f3bf 8f6f 	isb	sy
 80170fc:	f3bf 8f4f 	dsb	sy
 8017100:	b662      	cpsie	i
 8017102:	617b      	str	r3, [r7, #20]
}
 8017104:	bf00      	nop
 8017106:	e7fe      	b.n	8017106 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017108:	4b0a      	ldr	r3, [pc, #40]	; (8017134 <vTaskPlaceOnEventListRestricted+0x58>)
 801710a:	681b      	ldr	r3, [r3, #0]
 801710c:	3318      	adds	r3, #24
 801710e:	4619      	mov	r1, r3
 8017110:	68f8      	ldr	r0, [r7, #12]
 8017112:	f7fe fb0a 	bl	801572a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	2b00      	cmp	r3, #0
 801711a:	d002      	beq.n	8017122 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 801711c:	f04f 33ff 	mov.w	r3, #4294967295
 8017120:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8017122:	6879      	ldr	r1, [r7, #4]
 8017124:	68b8      	ldr	r0, [r7, #8]
 8017126:	f000 fba5 	bl	8017874 <prvAddCurrentTaskToDelayedList>
	}
 801712a:	bf00      	nop
 801712c:	3718      	adds	r7, #24
 801712e:	46bd      	mov	sp, r7
 8017130:	bd80      	pop	{r7, pc}
 8017132:	bf00      	nop
 8017134:	20017388 	.word	0x20017388

08017138 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8017138:	b580      	push	{r7, lr}
 801713a:	b086      	sub	sp, #24
 801713c:	af00      	add	r7, sp, #0
 801713e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017140:	687b      	ldr	r3, [r7, #4]
 8017142:	68db      	ldr	r3, [r3, #12]
 8017144:	68db      	ldr	r3, [r3, #12]
 8017146:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8017148:	693b      	ldr	r3, [r7, #16]
 801714a:	2b00      	cmp	r3, #0
 801714c:	d10c      	bne.n	8017168 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 801714e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017152:	b672      	cpsid	i
 8017154:	f383 8811 	msr	BASEPRI, r3
 8017158:	f3bf 8f6f 	isb	sy
 801715c:	f3bf 8f4f 	dsb	sy
 8017160:	b662      	cpsie	i
 8017162:	60fb      	str	r3, [r7, #12]
}
 8017164:	bf00      	nop
 8017166:	e7fe      	b.n	8017166 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8017168:	693b      	ldr	r3, [r7, #16]
 801716a:	3318      	adds	r3, #24
 801716c:	4618      	mov	r0, r3
 801716e:	f7fe fb39 	bl	80157e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017172:	4b1d      	ldr	r3, [pc, #116]	; (80171e8 <xTaskRemoveFromEventList+0xb0>)
 8017174:	681b      	ldr	r3, [r3, #0]
 8017176:	2b00      	cmp	r3, #0
 8017178:	d11c      	bne.n	80171b4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801717a:	693b      	ldr	r3, [r7, #16]
 801717c:	3304      	adds	r3, #4
 801717e:	4618      	mov	r0, r3
 8017180:	f7fe fb30 	bl	80157e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8017184:	693b      	ldr	r3, [r7, #16]
 8017186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017188:	2201      	movs	r2, #1
 801718a:	409a      	lsls	r2, r3
 801718c:	4b17      	ldr	r3, [pc, #92]	; (80171ec <xTaskRemoveFromEventList+0xb4>)
 801718e:	681b      	ldr	r3, [r3, #0]
 8017190:	4313      	orrs	r3, r2
 8017192:	4a16      	ldr	r2, [pc, #88]	; (80171ec <xTaskRemoveFromEventList+0xb4>)
 8017194:	6013      	str	r3, [r2, #0]
 8017196:	693b      	ldr	r3, [r7, #16]
 8017198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801719a:	4613      	mov	r3, r2
 801719c:	009b      	lsls	r3, r3, #2
 801719e:	4413      	add	r3, r2
 80171a0:	009b      	lsls	r3, r3, #2
 80171a2:	4a13      	ldr	r2, [pc, #76]	; (80171f0 <xTaskRemoveFromEventList+0xb8>)
 80171a4:	441a      	add	r2, r3
 80171a6:	693b      	ldr	r3, [r7, #16]
 80171a8:	3304      	adds	r3, #4
 80171aa:	4619      	mov	r1, r3
 80171ac:	4610      	mov	r0, r2
 80171ae:	f7fe fabc 	bl	801572a <vListInsertEnd>
 80171b2:	e005      	b.n	80171c0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80171b4:	693b      	ldr	r3, [r7, #16]
 80171b6:	3318      	adds	r3, #24
 80171b8:	4619      	mov	r1, r3
 80171ba:	480e      	ldr	r0, [pc, #56]	; (80171f4 <xTaskRemoveFromEventList+0xbc>)
 80171bc:	f7fe fab5 	bl	801572a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80171c0:	693b      	ldr	r3, [r7, #16]
 80171c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80171c4:	4b0c      	ldr	r3, [pc, #48]	; (80171f8 <xTaskRemoveFromEventList+0xc0>)
 80171c6:	681b      	ldr	r3, [r3, #0]
 80171c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171ca:	429a      	cmp	r2, r3
 80171cc:	d905      	bls.n	80171da <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80171ce:	2301      	movs	r3, #1
 80171d0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80171d2:	4b0a      	ldr	r3, [pc, #40]	; (80171fc <xTaskRemoveFromEventList+0xc4>)
 80171d4:	2201      	movs	r2, #1
 80171d6:	601a      	str	r2, [r3, #0]
 80171d8:	e001      	b.n	80171de <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80171da:	2300      	movs	r3, #0
 80171dc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80171de:	697b      	ldr	r3, [r7, #20]
}
 80171e0:	4618      	mov	r0, r3
 80171e2:	3718      	adds	r7, #24
 80171e4:	46bd      	mov	sp, r7
 80171e6:	bd80      	pop	{r7, pc}
 80171e8:	200174b0 	.word	0x200174b0
 80171ec:	20017490 	.word	0x20017490
 80171f0:	2001738c 	.word	0x2001738c
 80171f4:	20017448 	.word	0x20017448
 80171f8:	20017388 	.word	0x20017388
 80171fc:	2001749c 	.word	0x2001749c

08017200 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8017200:	b480      	push	{r7}
 8017202:	b083      	sub	sp, #12
 8017204:	af00      	add	r7, sp, #0
 8017206:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8017208:	4b06      	ldr	r3, [pc, #24]	; (8017224 <vTaskInternalSetTimeOutState+0x24>)
 801720a:	681a      	ldr	r2, [r3, #0]
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8017210:	4b05      	ldr	r3, [pc, #20]	; (8017228 <vTaskInternalSetTimeOutState+0x28>)
 8017212:	681a      	ldr	r2, [r3, #0]
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	605a      	str	r2, [r3, #4]
}
 8017218:	bf00      	nop
 801721a:	370c      	adds	r7, #12
 801721c:	46bd      	mov	sp, r7
 801721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017222:	4770      	bx	lr
 8017224:	200174a0 	.word	0x200174a0
 8017228:	2001748c 	.word	0x2001748c

0801722c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801722c:	b580      	push	{r7, lr}
 801722e:	b088      	sub	sp, #32
 8017230:	af00      	add	r7, sp, #0
 8017232:	6078      	str	r0, [r7, #4]
 8017234:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8017236:	687b      	ldr	r3, [r7, #4]
 8017238:	2b00      	cmp	r3, #0
 801723a:	d10c      	bne.n	8017256 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 801723c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017240:	b672      	cpsid	i
 8017242:	f383 8811 	msr	BASEPRI, r3
 8017246:	f3bf 8f6f 	isb	sy
 801724a:	f3bf 8f4f 	dsb	sy
 801724e:	b662      	cpsie	i
 8017250:	613b      	str	r3, [r7, #16]
}
 8017252:	bf00      	nop
 8017254:	e7fe      	b.n	8017254 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8017256:	683b      	ldr	r3, [r7, #0]
 8017258:	2b00      	cmp	r3, #0
 801725a:	d10c      	bne.n	8017276 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 801725c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017260:	b672      	cpsid	i
 8017262:	f383 8811 	msr	BASEPRI, r3
 8017266:	f3bf 8f6f 	isb	sy
 801726a:	f3bf 8f4f 	dsb	sy
 801726e:	b662      	cpsie	i
 8017270:	60fb      	str	r3, [r7, #12]
}
 8017272:	bf00      	nop
 8017274:	e7fe      	b.n	8017274 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8017276:	f001 f851 	bl	801831c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801727a:	4b1d      	ldr	r3, [pc, #116]	; (80172f0 <xTaskCheckForTimeOut+0xc4>)
 801727c:	681b      	ldr	r3, [r3, #0]
 801727e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	685b      	ldr	r3, [r3, #4]
 8017284:	69ba      	ldr	r2, [r7, #24]
 8017286:	1ad3      	subs	r3, r2, r3
 8017288:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801728a:	683b      	ldr	r3, [r7, #0]
 801728c:	681b      	ldr	r3, [r3, #0]
 801728e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017292:	d102      	bne.n	801729a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8017294:	2300      	movs	r3, #0
 8017296:	61fb      	str	r3, [r7, #28]
 8017298:	e023      	b.n	80172e2 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	681a      	ldr	r2, [r3, #0]
 801729e:	4b15      	ldr	r3, [pc, #84]	; (80172f4 <xTaskCheckForTimeOut+0xc8>)
 80172a0:	681b      	ldr	r3, [r3, #0]
 80172a2:	429a      	cmp	r2, r3
 80172a4:	d007      	beq.n	80172b6 <xTaskCheckForTimeOut+0x8a>
 80172a6:	687b      	ldr	r3, [r7, #4]
 80172a8:	685b      	ldr	r3, [r3, #4]
 80172aa:	69ba      	ldr	r2, [r7, #24]
 80172ac:	429a      	cmp	r2, r3
 80172ae:	d302      	bcc.n	80172b6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80172b0:	2301      	movs	r3, #1
 80172b2:	61fb      	str	r3, [r7, #28]
 80172b4:	e015      	b.n	80172e2 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80172b6:	683b      	ldr	r3, [r7, #0]
 80172b8:	681b      	ldr	r3, [r3, #0]
 80172ba:	697a      	ldr	r2, [r7, #20]
 80172bc:	429a      	cmp	r2, r3
 80172be:	d20b      	bcs.n	80172d8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80172c0:	683b      	ldr	r3, [r7, #0]
 80172c2:	681a      	ldr	r2, [r3, #0]
 80172c4:	697b      	ldr	r3, [r7, #20]
 80172c6:	1ad2      	subs	r2, r2, r3
 80172c8:	683b      	ldr	r3, [r7, #0]
 80172ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80172cc:	6878      	ldr	r0, [r7, #4]
 80172ce:	f7ff ff97 	bl	8017200 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80172d2:	2300      	movs	r3, #0
 80172d4:	61fb      	str	r3, [r7, #28]
 80172d6:	e004      	b.n	80172e2 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80172d8:	683b      	ldr	r3, [r7, #0]
 80172da:	2200      	movs	r2, #0
 80172dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80172de:	2301      	movs	r3, #1
 80172e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80172e2:	f001 f84f 	bl	8018384 <vPortExitCritical>

	return xReturn;
 80172e6:	69fb      	ldr	r3, [r7, #28]
}
 80172e8:	4618      	mov	r0, r3
 80172ea:	3720      	adds	r7, #32
 80172ec:	46bd      	mov	sp, r7
 80172ee:	bd80      	pop	{r7, pc}
 80172f0:	2001748c 	.word	0x2001748c
 80172f4:	200174a0 	.word	0x200174a0

080172f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80172f8:	b480      	push	{r7}
 80172fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80172fc:	4b03      	ldr	r3, [pc, #12]	; (801730c <vTaskMissedYield+0x14>)
 80172fe:	2201      	movs	r2, #1
 8017300:	601a      	str	r2, [r3, #0]
}
 8017302:	bf00      	nop
 8017304:	46bd      	mov	sp, r7
 8017306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801730a:	4770      	bx	lr
 801730c:	2001749c 	.word	0x2001749c

08017310 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8017310:	b580      	push	{r7, lr}
 8017312:	b082      	sub	sp, #8
 8017314:	af00      	add	r7, sp, #0
 8017316:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8017318:	f000 f852 	bl	80173c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801731c:	4b06      	ldr	r3, [pc, #24]	; (8017338 <prvIdleTask+0x28>)
 801731e:	681b      	ldr	r3, [r3, #0]
 8017320:	2b01      	cmp	r3, #1
 8017322:	d9f9      	bls.n	8017318 <prvIdleTask+0x8>
			{
				taskYIELD();
 8017324:	4b05      	ldr	r3, [pc, #20]	; (801733c <prvIdleTask+0x2c>)
 8017326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801732a:	601a      	str	r2, [r3, #0]
 801732c:	f3bf 8f4f 	dsb	sy
 8017330:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8017334:	e7f0      	b.n	8017318 <prvIdleTask+0x8>
 8017336:	bf00      	nop
 8017338:	2001738c 	.word	0x2001738c
 801733c:	e000ed04 	.word	0xe000ed04

08017340 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8017340:	b580      	push	{r7, lr}
 8017342:	b082      	sub	sp, #8
 8017344:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017346:	2300      	movs	r3, #0
 8017348:	607b      	str	r3, [r7, #4]
 801734a:	e00c      	b.n	8017366 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801734c:	687a      	ldr	r2, [r7, #4]
 801734e:	4613      	mov	r3, r2
 8017350:	009b      	lsls	r3, r3, #2
 8017352:	4413      	add	r3, r2
 8017354:	009b      	lsls	r3, r3, #2
 8017356:	4a12      	ldr	r2, [pc, #72]	; (80173a0 <prvInitialiseTaskLists+0x60>)
 8017358:	4413      	add	r3, r2
 801735a:	4618      	mov	r0, r3
 801735c:	f7fe f9b8 	bl	80156d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	3301      	adds	r3, #1
 8017364:	607b      	str	r3, [r7, #4]
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	2b06      	cmp	r3, #6
 801736a:	d9ef      	bls.n	801734c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801736c:	480d      	ldr	r0, [pc, #52]	; (80173a4 <prvInitialiseTaskLists+0x64>)
 801736e:	f7fe f9af 	bl	80156d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8017372:	480d      	ldr	r0, [pc, #52]	; (80173a8 <prvInitialiseTaskLists+0x68>)
 8017374:	f7fe f9ac 	bl	80156d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8017378:	480c      	ldr	r0, [pc, #48]	; (80173ac <prvInitialiseTaskLists+0x6c>)
 801737a:	f7fe f9a9 	bl	80156d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801737e:	480c      	ldr	r0, [pc, #48]	; (80173b0 <prvInitialiseTaskLists+0x70>)
 8017380:	f7fe f9a6 	bl	80156d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8017384:	480b      	ldr	r0, [pc, #44]	; (80173b4 <prvInitialiseTaskLists+0x74>)
 8017386:	f7fe f9a3 	bl	80156d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801738a:	4b0b      	ldr	r3, [pc, #44]	; (80173b8 <prvInitialiseTaskLists+0x78>)
 801738c:	4a05      	ldr	r2, [pc, #20]	; (80173a4 <prvInitialiseTaskLists+0x64>)
 801738e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8017390:	4b0a      	ldr	r3, [pc, #40]	; (80173bc <prvInitialiseTaskLists+0x7c>)
 8017392:	4a05      	ldr	r2, [pc, #20]	; (80173a8 <prvInitialiseTaskLists+0x68>)
 8017394:	601a      	str	r2, [r3, #0]
}
 8017396:	bf00      	nop
 8017398:	3708      	adds	r7, #8
 801739a:	46bd      	mov	sp, r7
 801739c:	bd80      	pop	{r7, pc}
 801739e:	bf00      	nop
 80173a0:	2001738c 	.word	0x2001738c
 80173a4:	20017418 	.word	0x20017418
 80173a8:	2001742c 	.word	0x2001742c
 80173ac:	20017448 	.word	0x20017448
 80173b0:	2001745c 	.word	0x2001745c
 80173b4:	20017474 	.word	0x20017474
 80173b8:	20017440 	.word	0x20017440
 80173bc:	20017444 	.word	0x20017444

080173c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80173c0:	b580      	push	{r7, lr}
 80173c2:	b082      	sub	sp, #8
 80173c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80173c6:	e019      	b.n	80173fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80173c8:	f000 ffa8 	bl	801831c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80173cc:	4b10      	ldr	r3, [pc, #64]	; (8017410 <prvCheckTasksWaitingTermination+0x50>)
 80173ce:	68db      	ldr	r3, [r3, #12]
 80173d0:	68db      	ldr	r3, [r3, #12]
 80173d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	3304      	adds	r3, #4
 80173d8:	4618      	mov	r0, r3
 80173da:	f7fe fa03 	bl	80157e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80173de:	4b0d      	ldr	r3, [pc, #52]	; (8017414 <prvCheckTasksWaitingTermination+0x54>)
 80173e0:	681b      	ldr	r3, [r3, #0]
 80173e2:	3b01      	subs	r3, #1
 80173e4:	4a0b      	ldr	r2, [pc, #44]	; (8017414 <prvCheckTasksWaitingTermination+0x54>)
 80173e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80173e8:	4b0b      	ldr	r3, [pc, #44]	; (8017418 <prvCheckTasksWaitingTermination+0x58>)
 80173ea:	681b      	ldr	r3, [r3, #0]
 80173ec:	3b01      	subs	r3, #1
 80173ee:	4a0a      	ldr	r2, [pc, #40]	; (8017418 <prvCheckTasksWaitingTermination+0x58>)
 80173f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80173f2:	f000 ffc7 	bl	8018384 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80173f6:	6878      	ldr	r0, [r7, #4]
 80173f8:	f000 f810 	bl	801741c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80173fc:	4b06      	ldr	r3, [pc, #24]	; (8017418 <prvCheckTasksWaitingTermination+0x58>)
 80173fe:	681b      	ldr	r3, [r3, #0]
 8017400:	2b00      	cmp	r3, #0
 8017402:	d1e1      	bne.n	80173c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8017404:	bf00      	nop
 8017406:	bf00      	nop
 8017408:	3708      	adds	r7, #8
 801740a:	46bd      	mov	sp, r7
 801740c:	bd80      	pop	{r7, pc}
 801740e:	bf00      	nop
 8017410:	2001745c 	.word	0x2001745c
 8017414:	20017488 	.word	0x20017488
 8017418:	20017470 	.word	0x20017470

0801741c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801741c:	b580      	push	{r7, lr}
 801741e:	b084      	sub	sp, #16
 8017420:	af00      	add	r7, sp, #0
 8017422:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8017424:	687b      	ldr	r3, [r7, #4]
 8017426:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801742a:	2b00      	cmp	r3, #0
 801742c:	d108      	bne.n	8017440 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017432:	4618      	mov	r0, r3
 8017434:	f001 f968 	bl	8018708 <vPortFree>
				vPortFree( pxTCB );
 8017438:	6878      	ldr	r0, [r7, #4]
 801743a:	f001 f965 	bl	8018708 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801743e:	e01a      	b.n	8017476 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8017440:	687b      	ldr	r3, [r7, #4]
 8017442:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8017446:	2b01      	cmp	r3, #1
 8017448:	d103      	bne.n	8017452 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801744a:	6878      	ldr	r0, [r7, #4]
 801744c:	f001 f95c 	bl	8018708 <vPortFree>
	}
 8017450:	e011      	b.n	8017476 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8017458:	2b02      	cmp	r3, #2
 801745a:	d00c      	beq.n	8017476 <prvDeleteTCB+0x5a>
	__asm volatile
 801745c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017460:	b672      	cpsid	i
 8017462:	f383 8811 	msr	BASEPRI, r3
 8017466:	f3bf 8f6f 	isb	sy
 801746a:	f3bf 8f4f 	dsb	sy
 801746e:	b662      	cpsie	i
 8017470:	60fb      	str	r3, [r7, #12]
}
 8017472:	bf00      	nop
 8017474:	e7fe      	b.n	8017474 <prvDeleteTCB+0x58>
	}
 8017476:	bf00      	nop
 8017478:	3710      	adds	r7, #16
 801747a:	46bd      	mov	sp, r7
 801747c:	bd80      	pop	{r7, pc}
	...

08017480 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8017480:	b480      	push	{r7}
 8017482:	b083      	sub	sp, #12
 8017484:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017486:	4b0c      	ldr	r3, [pc, #48]	; (80174b8 <prvResetNextTaskUnblockTime+0x38>)
 8017488:	681b      	ldr	r3, [r3, #0]
 801748a:	681b      	ldr	r3, [r3, #0]
 801748c:	2b00      	cmp	r3, #0
 801748e:	d104      	bne.n	801749a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8017490:	4b0a      	ldr	r3, [pc, #40]	; (80174bc <prvResetNextTaskUnblockTime+0x3c>)
 8017492:	f04f 32ff 	mov.w	r2, #4294967295
 8017496:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8017498:	e008      	b.n	80174ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801749a:	4b07      	ldr	r3, [pc, #28]	; (80174b8 <prvResetNextTaskUnblockTime+0x38>)
 801749c:	681b      	ldr	r3, [r3, #0]
 801749e:	68db      	ldr	r3, [r3, #12]
 80174a0:	68db      	ldr	r3, [r3, #12]
 80174a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80174a4:	687b      	ldr	r3, [r7, #4]
 80174a6:	685b      	ldr	r3, [r3, #4]
 80174a8:	4a04      	ldr	r2, [pc, #16]	; (80174bc <prvResetNextTaskUnblockTime+0x3c>)
 80174aa:	6013      	str	r3, [r2, #0]
}
 80174ac:	bf00      	nop
 80174ae:	370c      	adds	r7, #12
 80174b0:	46bd      	mov	sp, r7
 80174b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174b6:	4770      	bx	lr
 80174b8:	20017440 	.word	0x20017440
 80174bc:	200174a8 	.word	0x200174a8

080174c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80174c0:	b480      	push	{r7}
 80174c2:	b083      	sub	sp, #12
 80174c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80174c6:	4b0b      	ldr	r3, [pc, #44]	; (80174f4 <xTaskGetSchedulerState+0x34>)
 80174c8:	681b      	ldr	r3, [r3, #0]
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	d102      	bne.n	80174d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80174ce:	2301      	movs	r3, #1
 80174d0:	607b      	str	r3, [r7, #4]
 80174d2:	e008      	b.n	80174e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80174d4:	4b08      	ldr	r3, [pc, #32]	; (80174f8 <xTaskGetSchedulerState+0x38>)
 80174d6:	681b      	ldr	r3, [r3, #0]
 80174d8:	2b00      	cmp	r3, #0
 80174da:	d102      	bne.n	80174e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80174dc:	2302      	movs	r3, #2
 80174de:	607b      	str	r3, [r7, #4]
 80174e0:	e001      	b.n	80174e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80174e2:	2300      	movs	r3, #0
 80174e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80174e6:	687b      	ldr	r3, [r7, #4]
	}
 80174e8:	4618      	mov	r0, r3
 80174ea:	370c      	adds	r7, #12
 80174ec:	46bd      	mov	sp, r7
 80174ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174f2:	4770      	bx	lr
 80174f4:	20017494 	.word	0x20017494
 80174f8:	200174b0 	.word	0x200174b0

080174fc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80174fc:	b580      	push	{r7, lr}
 80174fe:	b084      	sub	sp, #16
 8017500:	af00      	add	r7, sp, #0
 8017502:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8017508:	2300      	movs	r3, #0
 801750a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	2b00      	cmp	r3, #0
 8017510:	d069      	beq.n	80175e6 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8017512:	68bb      	ldr	r3, [r7, #8]
 8017514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017516:	4b36      	ldr	r3, [pc, #216]	; (80175f0 <xTaskPriorityInherit+0xf4>)
 8017518:	681b      	ldr	r3, [r3, #0]
 801751a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801751c:	429a      	cmp	r2, r3
 801751e:	d259      	bcs.n	80175d4 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8017520:	68bb      	ldr	r3, [r7, #8]
 8017522:	699b      	ldr	r3, [r3, #24]
 8017524:	2b00      	cmp	r3, #0
 8017526:	db06      	blt.n	8017536 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017528:	4b31      	ldr	r3, [pc, #196]	; (80175f0 <xTaskPriorityInherit+0xf4>)
 801752a:	681b      	ldr	r3, [r3, #0]
 801752c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801752e:	f1c3 0207 	rsb	r2, r3, #7
 8017532:	68bb      	ldr	r3, [r7, #8]
 8017534:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8017536:	68bb      	ldr	r3, [r7, #8]
 8017538:	6959      	ldr	r1, [r3, #20]
 801753a:	68bb      	ldr	r3, [r7, #8]
 801753c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801753e:	4613      	mov	r3, r2
 8017540:	009b      	lsls	r3, r3, #2
 8017542:	4413      	add	r3, r2
 8017544:	009b      	lsls	r3, r3, #2
 8017546:	4a2b      	ldr	r2, [pc, #172]	; (80175f4 <xTaskPriorityInherit+0xf8>)
 8017548:	4413      	add	r3, r2
 801754a:	4299      	cmp	r1, r3
 801754c:	d13a      	bne.n	80175c4 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801754e:	68bb      	ldr	r3, [r7, #8]
 8017550:	3304      	adds	r3, #4
 8017552:	4618      	mov	r0, r3
 8017554:	f7fe f946 	bl	80157e4 <uxListRemove>
 8017558:	4603      	mov	r3, r0
 801755a:	2b00      	cmp	r3, #0
 801755c:	d115      	bne.n	801758a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 801755e:	68bb      	ldr	r3, [r7, #8]
 8017560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017562:	4924      	ldr	r1, [pc, #144]	; (80175f4 <xTaskPriorityInherit+0xf8>)
 8017564:	4613      	mov	r3, r2
 8017566:	009b      	lsls	r3, r3, #2
 8017568:	4413      	add	r3, r2
 801756a:	009b      	lsls	r3, r3, #2
 801756c:	440b      	add	r3, r1
 801756e:	681b      	ldr	r3, [r3, #0]
 8017570:	2b00      	cmp	r3, #0
 8017572:	d10a      	bne.n	801758a <xTaskPriorityInherit+0x8e>
 8017574:	68bb      	ldr	r3, [r7, #8]
 8017576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017578:	2201      	movs	r2, #1
 801757a:	fa02 f303 	lsl.w	r3, r2, r3
 801757e:	43da      	mvns	r2, r3
 8017580:	4b1d      	ldr	r3, [pc, #116]	; (80175f8 <xTaskPriorityInherit+0xfc>)
 8017582:	681b      	ldr	r3, [r3, #0]
 8017584:	4013      	ands	r3, r2
 8017586:	4a1c      	ldr	r2, [pc, #112]	; (80175f8 <xTaskPriorityInherit+0xfc>)
 8017588:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801758a:	4b19      	ldr	r3, [pc, #100]	; (80175f0 <xTaskPriorityInherit+0xf4>)
 801758c:	681b      	ldr	r3, [r3, #0]
 801758e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017590:	68bb      	ldr	r3, [r7, #8]
 8017592:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8017594:	68bb      	ldr	r3, [r7, #8]
 8017596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017598:	2201      	movs	r2, #1
 801759a:	409a      	lsls	r2, r3
 801759c:	4b16      	ldr	r3, [pc, #88]	; (80175f8 <xTaskPriorityInherit+0xfc>)
 801759e:	681b      	ldr	r3, [r3, #0]
 80175a0:	4313      	orrs	r3, r2
 80175a2:	4a15      	ldr	r2, [pc, #84]	; (80175f8 <xTaskPriorityInherit+0xfc>)
 80175a4:	6013      	str	r3, [r2, #0]
 80175a6:	68bb      	ldr	r3, [r7, #8]
 80175a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80175aa:	4613      	mov	r3, r2
 80175ac:	009b      	lsls	r3, r3, #2
 80175ae:	4413      	add	r3, r2
 80175b0:	009b      	lsls	r3, r3, #2
 80175b2:	4a10      	ldr	r2, [pc, #64]	; (80175f4 <xTaskPriorityInherit+0xf8>)
 80175b4:	441a      	add	r2, r3
 80175b6:	68bb      	ldr	r3, [r7, #8]
 80175b8:	3304      	adds	r3, #4
 80175ba:	4619      	mov	r1, r3
 80175bc:	4610      	mov	r0, r2
 80175be:	f7fe f8b4 	bl	801572a <vListInsertEnd>
 80175c2:	e004      	b.n	80175ce <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80175c4:	4b0a      	ldr	r3, [pc, #40]	; (80175f0 <xTaskPriorityInherit+0xf4>)
 80175c6:	681b      	ldr	r3, [r3, #0]
 80175c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80175ca:	68bb      	ldr	r3, [r7, #8]
 80175cc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80175ce:	2301      	movs	r3, #1
 80175d0:	60fb      	str	r3, [r7, #12]
 80175d2:	e008      	b.n	80175e6 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80175d4:	68bb      	ldr	r3, [r7, #8]
 80175d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80175d8:	4b05      	ldr	r3, [pc, #20]	; (80175f0 <xTaskPriorityInherit+0xf4>)
 80175da:	681b      	ldr	r3, [r3, #0]
 80175dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80175de:	429a      	cmp	r2, r3
 80175e0:	d201      	bcs.n	80175e6 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80175e2:	2301      	movs	r3, #1
 80175e4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80175e6:	68fb      	ldr	r3, [r7, #12]
	}
 80175e8:	4618      	mov	r0, r3
 80175ea:	3710      	adds	r7, #16
 80175ec:	46bd      	mov	sp, r7
 80175ee:	bd80      	pop	{r7, pc}
 80175f0:	20017388 	.word	0x20017388
 80175f4:	2001738c 	.word	0x2001738c
 80175f8:	20017490 	.word	0x20017490

080175fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80175fc:	b580      	push	{r7, lr}
 80175fe:	b086      	sub	sp, #24
 8017600:	af00      	add	r7, sp, #0
 8017602:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8017608:	2300      	movs	r3, #0
 801760a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801760c:	687b      	ldr	r3, [r7, #4]
 801760e:	2b00      	cmp	r3, #0
 8017610:	d072      	beq.n	80176f8 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8017612:	4b3c      	ldr	r3, [pc, #240]	; (8017704 <xTaskPriorityDisinherit+0x108>)
 8017614:	681b      	ldr	r3, [r3, #0]
 8017616:	693a      	ldr	r2, [r7, #16]
 8017618:	429a      	cmp	r2, r3
 801761a:	d00c      	beq.n	8017636 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 801761c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017620:	b672      	cpsid	i
 8017622:	f383 8811 	msr	BASEPRI, r3
 8017626:	f3bf 8f6f 	isb	sy
 801762a:	f3bf 8f4f 	dsb	sy
 801762e:	b662      	cpsie	i
 8017630:	60fb      	str	r3, [r7, #12]
}
 8017632:	bf00      	nop
 8017634:	e7fe      	b.n	8017634 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8017636:	693b      	ldr	r3, [r7, #16]
 8017638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801763a:	2b00      	cmp	r3, #0
 801763c:	d10c      	bne.n	8017658 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 801763e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017642:	b672      	cpsid	i
 8017644:	f383 8811 	msr	BASEPRI, r3
 8017648:	f3bf 8f6f 	isb	sy
 801764c:	f3bf 8f4f 	dsb	sy
 8017650:	b662      	cpsie	i
 8017652:	60bb      	str	r3, [r7, #8]
}
 8017654:	bf00      	nop
 8017656:	e7fe      	b.n	8017656 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8017658:	693b      	ldr	r3, [r7, #16]
 801765a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801765c:	1e5a      	subs	r2, r3, #1
 801765e:	693b      	ldr	r3, [r7, #16]
 8017660:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8017662:	693b      	ldr	r3, [r7, #16]
 8017664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017666:	693b      	ldr	r3, [r7, #16]
 8017668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801766a:	429a      	cmp	r2, r3
 801766c:	d044      	beq.n	80176f8 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801766e:	693b      	ldr	r3, [r7, #16]
 8017670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017672:	2b00      	cmp	r3, #0
 8017674:	d140      	bne.n	80176f8 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017676:	693b      	ldr	r3, [r7, #16]
 8017678:	3304      	adds	r3, #4
 801767a:	4618      	mov	r0, r3
 801767c:	f7fe f8b2 	bl	80157e4 <uxListRemove>
 8017680:	4603      	mov	r3, r0
 8017682:	2b00      	cmp	r3, #0
 8017684:	d115      	bne.n	80176b2 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8017686:	693b      	ldr	r3, [r7, #16]
 8017688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801768a:	491f      	ldr	r1, [pc, #124]	; (8017708 <xTaskPriorityDisinherit+0x10c>)
 801768c:	4613      	mov	r3, r2
 801768e:	009b      	lsls	r3, r3, #2
 8017690:	4413      	add	r3, r2
 8017692:	009b      	lsls	r3, r3, #2
 8017694:	440b      	add	r3, r1
 8017696:	681b      	ldr	r3, [r3, #0]
 8017698:	2b00      	cmp	r3, #0
 801769a:	d10a      	bne.n	80176b2 <xTaskPriorityDisinherit+0xb6>
 801769c:	693b      	ldr	r3, [r7, #16]
 801769e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80176a0:	2201      	movs	r2, #1
 80176a2:	fa02 f303 	lsl.w	r3, r2, r3
 80176a6:	43da      	mvns	r2, r3
 80176a8:	4b18      	ldr	r3, [pc, #96]	; (801770c <xTaskPriorityDisinherit+0x110>)
 80176aa:	681b      	ldr	r3, [r3, #0]
 80176ac:	4013      	ands	r3, r2
 80176ae:	4a17      	ldr	r2, [pc, #92]	; (801770c <xTaskPriorityDisinherit+0x110>)
 80176b0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80176b2:	693b      	ldr	r3, [r7, #16]
 80176b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80176b6:	693b      	ldr	r3, [r7, #16]
 80176b8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80176ba:	693b      	ldr	r3, [r7, #16]
 80176bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80176be:	f1c3 0207 	rsb	r2, r3, #7
 80176c2:	693b      	ldr	r3, [r7, #16]
 80176c4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80176c6:	693b      	ldr	r3, [r7, #16]
 80176c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80176ca:	2201      	movs	r2, #1
 80176cc:	409a      	lsls	r2, r3
 80176ce:	4b0f      	ldr	r3, [pc, #60]	; (801770c <xTaskPriorityDisinherit+0x110>)
 80176d0:	681b      	ldr	r3, [r3, #0]
 80176d2:	4313      	orrs	r3, r2
 80176d4:	4a0d      	ldr	r2, [pc, #52]	; (801770c <xTaskPriorityDisinherit+0x110>)
 80176d6:	6013      	str	r3, [r2, #0]
 80176d8:	693b      	ldr	r3, [r7, #16]
 80176da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80176dc:	4613      	mov	r3, r2
 80176de:	009b      	lsls	r3, r3, #2
 80176e0:	4413      	add	r3, r2
 80176e2:	009b      	lsls	r3, r3, #2
 80176e4:	4a08      	ldr	r2, [pc, #32]	; (8017708 <xTaskPriorityDisinherit+0x10c>)
 80176e6:	441a      	add	r2, r3
 80176e8:	693b      	ldr	r3, [r7, #16]
 80176ea:	3304      	adds	r3, #4
 80176ec:	4619      	mov	r1, r3
 80176ee:	4610      	mov	r0, r2
 80176f0:	f7fe f81b 	bl	801572a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80176f4:	2301      	movs	r3, #1
 80176f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80176f8:	697b      	ldr	r3, [r7, #20]
	}
 80176fa:	4618      	mov	r0, r3
 80176fc:	3718      	adds	r7, #24
 80176fe:	46bd      	mov	sp, r7
 8017700:	bd80      	pop	{r7, pc}
 8017702:	bf00      	nop
 8017704:	20017388 	.word	0x20017388
 8017708:	2001738c 	.word	0x2001738c
 801770c:	20017490 	.word	0x20017490

08017710 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8017710:	b580      	push	{r7, lr}
 8017712:	b088      	sub	sp, #32
 8017714:	af00      	add	r7, sp, #0
 8017716:	6078      	str	r0, [r7, #4]
 8017718:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801771a:	687b      	ldr	r3, [r7, #4]
 801771c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801771e:	2301      	movs	r3, #1
 8017720:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8017722:	687b      	ldr	r3, [r7, #4]
 8017724:	2b00      	cmp	r3, #0
 8017726:	f000 8087 	beq.w	8017838 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801772a:	69bb      	ldr	r3, [r7, #24]
 801772c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801772e:	2b00      	cmp	r3, #0
 8017730:	d10c      	bne.n	801774c <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8017732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017736:	b672      	cpsid	i
 8017738:	f383 8811 	msr	BASEPRI, r3
 801773c:	f3bf 8f6f 	isb	sy
 8017740:	f3bf 8f4f 	dsb	sy
 8017744:	b662      	cpsie	i
 8017746:	60fb      	str	r3, [r7, #12]
}
 8017748:	bf00      	nop
 801774a:	e7fe      	b.n	801774a <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801774c:	69bb      	ldr	r3, [r7, #24]
 801774e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017750:	683a      	ldr	r2, [r7, #0]
 8017752:	429a      	cmp	r2, r3
 8017754:	d902      	bls.n	801775c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8017756:	683b      	ldr	r3, [r7, #0]
 8017758:	61fb      	str	r3, [r7, #28]
 801775a:	e002      	b.n	8017762 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801775c:	69bb      	ldr	r3, [r7, #24]
 801775e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017760:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8017762:	69bb      	ldr	r3, [r7, #24]
 8017764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017766:	69fa      	ldr	r2, [r7, #28]
 8017768:	429a      	cmp	r2, r3
 801776a:	d065      	beq.n	8017838 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801776c:	69bb      	ldr	r3, [r7, #24]
 801776e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017770:	697a      	ldr	r2, [r7, #20]
 8017772:	429a      	cmp	r2, r3
 8017774:	d160      	bne.n	8017838 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8017776:	4b32      	ldr	r3, [pc, #200]	; (8017840 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8017778:	681b      	ldr	r3, [r3, #0]
 801777a:	69ba      	ldr	r2, [r7, #24]
 801777c:	429a      	cmp	r2, r3
 801777e:	d10c      	bne.n	801779a <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8017780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017784:	b672      	cpsid	i
 8017786:	f383 8811 	msr	BASEPRI, r3
 801778a:	f3bf 8f6f 	isb	sy
 801778e:	f3bf 8f4f 	dsb	sy
 8017792:	b662      	cpsie	i
 8017794:	60bb      	str	r3, [r7, #8]
}
 8017796:	bf00      	nop
 8017798:	e7fe      	b.n	8017798 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801779a:	69bb      	ldr	r3, [r7, #24]
 801779c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801779e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80177a0:	69bb      	ldr	r3, [r7, #24]
 80177a2:	69fa      	ldr	r2, [r7, #28]
 80177a4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80177a6:	69bb      	ldr	r3, [r7, #24]
 80177a8:	699b      	ldr	r3, [r3, #24]
 80177aa:	2b00      	cmp	r3, #0
 80177ac:	db04      	blt.n	80177b8 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80177ae:	69fb      	ldr	r3, [r7, #28]
 80177b0:	f1c3 0207 	rsb	r2, r3, #7
 80177b4:	69bb      	ldr	r3, [r7, #24]
 80177b6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80177b8:	69bb      	ldr	r3, [r7, #24]
 80177ba:	6959      	ldr	r1, [r3, #20]
 80177bc:	693a      	ldr	r2, [r7, #16]
 80177be:	4613      	mov	r3, r2
 80177c0:	009b      	lsls	r3, r3, #2
 80177c2:	4413      	add	r3, r2
 80177c4:	009b      	lsls	r3, r3, #2
 80177c6:	4a1f      	ldr	r2, [pc, #124]	; (8017844 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80177c8:	4413      	add	r3, r2
 80177ca:	4299      	cmp	r1, r3
 80177cc:	d134      	bne.n	8017838 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80177ce:	69bb      	ldr	r3, [r7, #24]
 80177d0:	3304      	adds	r3, #4
 80177d2:	4618      	mov	r0, r3
 80177d4:	f7fe f806 	bl	80157e4 <uxListRemove>
 80177d8:	4603      	mov	r3, r0
 80177da:	2b00      	cmp	r3, #0
 80177dc:	d115      	bne.n	801780a <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80177de:	69bb      	ldr	r3, [r7, #24]
 80177e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80177e2:	4918      	ldr	r1, [pc, #96]	; (8017844 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80177e4:	4613      	mov	r3, r2
 80177e6:	009b      	lsls	r3, r3, #2
 80177e8:	4413      	add	r3, r2
 80177ea:	009b      	lsls	r3, r3, #2
 80177ec:	440b      	add	r3, r1
 80177ee:	681b      	ldr	r3, [r3, #0]
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	d10a      	bne.n	801780a <vTaskPriorityDisinheritAfterTimeout+0xfa>
 80177f4:	69bb      	ldr	r3, [r7, #24]
 80177f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177f8:	2201      	movs	r2, #1
 80177fa:	fa02 f303 	lsl.w	r3, r2, r3
 80177fe:	43da      	mvns	r2, r3
 8017800:	4b11      	ldr	r3, [pc, #68]	; (8017848 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8017802:	681b      	ldr	r3, [r3, #0]
 8017804:	4013      	ands	r3, r2
 8017806:	4a10      	ldr	r2, [pc, #64]	; (8017848 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8017808:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801780a:	69bb      	ldr	r3, [r7, #24]
 801780c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801780e:	2201      	movs	r2, #1
 8017810:	409a      	lsls	r2, r3
 8017812:	4b0d      	ldr	r3, [pc, #52]	; (8017848 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8017814:	681b      	ldr	r3, [r3, #0]
 8017816:	4313      	orrs	r3, r2
 8017818:	4a0b      	ldr	r2, [pc, #44]	; (8017848 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801781a:	6013      	str	r3, [r2, #0]
 801781c:	69bb      	ldr	r3, [r7, #24]
 801781e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017820:	4613      	mov	r3, r2
 8017822:	009b      	lsls	r3, r3, #2
 8017824:	4413      	add	r3, r2
 8017826:	009b      	lsls	r3, r3, #2
 8017828:	4a06      	ldr	r2, [pc, #24]	; (8017844 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 801782a:	441a      	add	r2, r3
 801782c:	69bb      	ldr	r3, [r7, #24]
 801782e:	3304      	adds	r3, #4
 8017830:	4619      	mov	r1, r3
 8017832:	4610      	mov	r0, r2
 8017834:	f7fd ff79 	bl	801572a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017838:	bf00      	nop
 801783a:	3720      	adds	r7, #32
 801783c:	46bd      	mov	sp, r7
 801783e:	bd80      	pop	{r7, pc}
 8017840:	20017388 	.word	0x20017388
 8017844:	2001738c 	.word	0x2001738c
 8017848:	20017490 	.word	0x20017490

0801784c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801784c:	b480      	push	{r7}
 801784e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8017850:	4b07      	ldr	r3, [pc, #28]	; (8017870 <pvTaskIncrementMutexHeldCount+0x24>)
 8017852:	681b      	ldr	r3, [r3, #0]
 8017854:	2b00      	cmp	r3, #0
 8017856:	d004      	beq.n	8017862 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8017858:	4b05      	ldr	r3, [pc, #20]	; (8017870 <pvTaskIncrementMutexHeldCount+0x24>)
 801785a:	681b      	ldr	r3, [r3, #0]
 801785c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801785e:	3201      	adds	r2, #1
 8017860:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8017862:	4b03      	ldr	r3, [pc, #12]	; (8017870 <pvTaskIncrementMutexHeldCount+0x24>)
 8017864:	681b      	ldr	r3, [r3, #0]
	}
 8017866:	4618      	mov	r0, r3
 8017868:	46bd      	mov	sp, r7
 801786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801786e:	4770      	bx	lr
 8017870:	20017388 	.word	0x20017388

08017874 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8017874:	b580      	push	{r7, lr}
 8017876:	b084      	sub	sp, #16
 8017878:	af00      	add	r7, sp, #0
 801787a:	6078      	str	r0, [r7, #4]
 801787c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801787e:	4b29      	ldr	r3, [pc, #164]	; (8017924 <prvAddCurrentTaskToDelayedList+0xb0>)
 8017880:	681b      	ldr	r3, [r3, #0]
 8017882:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017884:	4b28      	ldr	r3, [pc, #160]	; (8017928 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017886:	681b      	ldr	r3, [r3, #0]
 8017888:	3304      	adds	r3, #4
 801788a:	4618      	mov	r0, r3
 801788c:	f7fd ffaa 	bl	80157e4 <uxListRemove>
 8017890:	4603      	mov	r3, r0
 8017892:	2b00      	cmp	r3, #0
 8017894:	d10b      	bne.n	80178ae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8017896:	4b24      	ldr	r3, [pc, #144]	; (8017928 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017898:	681b      	ldr	r3, [r3, #0]
 801789a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801789c:	2201      	movs	r2, #1
 801789e:	fa02 f303 	lsl.w	r3, r2, r3
 80178a2:	43da      	mvns	r2, r3
 80178a4:	4b21      	ldr	r3, [pc, #132]	; (801792c <prvAddCurrentTaskToDelayedList+0xb8>)
 80178a6:	681b      	ldr	r3, [r3, #0]
 80178a8:	4013      	ands	r3, r2
 80178aa:	4a20      	ldr	r2, [pc, #128]	; (801792c <prvAddCurrentTaskToDelayedList+0xb8>)
 80178ac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80178b4:	d10a      	bne.n	80178cc <prvAddCurrentTaskToDelayedList+0x58>
 80178b6:	683b      	ldr	r3, [r7, #0]
 80178b8:	2b00      	cmp	r3, #0
 80178ba:	d007      	beq.n	80178cc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80178bc:	4b1a      	ldr	r3, [pc, #104]	; (8017928 <prvAddCurrentTaskToDelayedList+0xb4>)
 80178be:	681b      	ldr	r3, [r3, #0]
 80178c0:	3304      	adds	r3, #4
 80178c2:	4619      	mov	r1, r3
 80178c4:	481a      	ldr	r0, [pc, #104]	; (8017930 <prvAddCurrentTaskToDelayedList+0xbc>)
 80178c6:	f7fd ff30 	bl	801572a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80178ca:	e026      	b.n	801791a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80178cc:	68fa      	ldr	r2, [r7, #12]
 80178ce:	687b      	ldr	r3, [r7, #4]
 80178d0:	4413      	add	r3, r2
 80178d2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80178d4:	4b14      	ldr	r3, [pc, #80]	; (8017928 <prvAddCurrentTaskToDelayedList+0xb4>)
 80178d6:	681b      	ldr	r3, [r3, #0]
 80178d8:	68ba      	ldr	r2, [r7, #8]
 80178da:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80178dc:	68ba      	ldr	r2, [r7, #8]
 80178de:	68fb      	ldr	r3, [r7, #12]
 80178e0:	429a      	cmp	r2, r3
 80178e2:	d209      	bcs.n	80178f8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80178e4:	4b13      	ldr	r3, [pc, #76]	; (8017934 <prvAddCurrentTaskToDelayedList+0xc0>)
 80178e6:	681a      	ldr	r2, [r3, #0]
 80178e8:	4b0f      	ldr	r3, [pc, #60]	; (8017928 <prvAddCurrentTaskToDelayedList+0xb4>)
 80178ea:	681b      	ldr	r3, [r3, #0]
 80178ec:	3304      	adds	r3, #4
 80178ee:	4619      	mov	r1, r3
 80178f0:	4610      	mov	r0, r2
 80178f2:	f7fd ff3e 	bl	8015772 <vListInsert>
}
 80178f6:	e010      	b.n	801791a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80178f8:	4b0f      	ldr	r3, [pc, #60]	; (8017938 <prvAddCurrentTaskToDelayedList+0xc4>)
 80178fa:	681a      	ldr	r2, [r3, #0]
 80178fc:	4b0a      	ldr	r3, [pc, #40]	; (8017928 <prvAddCurrentTaskToDelayedList+0xb4>)
 80178fe:	681b      	ldr	r3, [r3, #0]
 8017900:	3304      	adds	r3, #4
 8017902:	4619      	mov	r1, r3
 8017904:	4610      	mov	r0, r2
 8017906:	f7fd ff34 	bl	8015772 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801790a:	4b0c      	ldr	r3, [pc, #48]	; (801793c <prvAddCurrentTaskToDelayedList+0xc8>)
 801790c:	681b      	ldr	r3, [r3, #0]
 801790e:	68ba      	ldr	r2, [r7, #8]
 8017910:	429a      	cmp	r2, r3
 8017912:	d202      	bcs.n	801791a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8017914:	4a09      	ldr	r2, [pc, #36]	; (801793c <prvAddCurrentTaskToDelayedList+0xc8>)
 8017916:	68bb      	ldr	r3, [r7, #8]
 8017918:	6013      	str	r3, [r2, #0]
}
 801791a:	bf00      	nop
 801791c:	3710      	adds	r7, #16
 801791e:	46bd      	mov	sp, r7
 8017920:	bd80      	pop	{r7, pc}
 8017922:	bf00      	nop
 8017924:	2001748c 	.word	0x2001748c
 8017928:	20017388 	.word	0x20017388
 801792c:	20017490 	.word	0x20017490
 8017930:	20017474 	.word	0x20017474
 8017934:	20017444 	.word	0x20017444
 8017938:	20017440 	.word	0x20017440
 801793c:	200174a8 	.word	0x200174a8

08017940 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8017940:	b580      	push	{r7, lr}
 8017942:	b08a      	sub	sp, #40	; 0x28
 8017944:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8017946:	2300      	movs	r3, #0
 8017948:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801794a:	f000 fb97 	bl	801807c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801794e:	4b1d      	ldr	r3, [pc, #116]	; (80179c4 <xTimerCreateTimerTask+0x84>)
 8017950:	681b      	ldr	r3, [r3, #0]
 8017952:	2b00      	cmp	r3, #0
 8017954:	d021      	beq.n	801799a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8017956:	2300      	movs	r3, #0
 8017958:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801795a:	2300      	movs	r3, #0
 801795c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801795e:	1d3a      	adds	r2, r7, #4
 8017960:	f107 0108 	add.w	r1, r7, #8
 8017964:	f107 030c 	add.w	r3, r7, #12
 8017968:	4618      	mov	r0, r3
 801796a:	f7f5 fb61 	bl	800d030 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801796e:	6879      	ldr	r1, [r7, #4]
 8017970:	68bb      	ldr	r3, [r7, #8]
 8017972:	68fa      	ldr	r2, [r7, #12]
 8017974:	9202      	str	r2, [sp, #8]
 8017976:	9301      	str	r3, [sp, #4]
 8017978:	2306      	movs	r3, #6
 801797a:	9300      	str	r3, [sp, #0]
 801797c:	2300      	movs	r3, #0
 801797e:	460a      	mov	r2, r1
 8017980:	4911      	ldr	r1, [pc, #68]	; (80179c8 <xTimerCreateTimerTask+0x88>)
 8017982:	4812      	ldr	r0, [pc, #72]	; (80179cc <xTimerCreateTimerTask+0x8c>)
 8017984:	f7fe fe82 	bl	801668c <xTaskCreateStatic>
 8017988:	4603      	mov	r3, r0
 801798a:	4a11      	ldr	r2, [pc, #68]	; (80179d0 <xTimerCreateTimerTask+0x90>)
 801798c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801798e:	4b10      	ldr	r3, [pc, #64]	; (80179d0 <xTimerCreateTimerTask+0x90>)
 8017990:	681b      	ldr	r3, [r3, #0]
 8017992:	2b00      	cmp	r3, #0
 8017994:	d001      	beq.n	801799a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8017996:	2301      	movs	r3, #1
 8017998:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801799a:	697b      	ldr	r3, [r7, #20]
 801799c:	2b00      	cmp	r3, #0
 801799e:	d10c      	bne.n	80179ba <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80179a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80179a4:	b672      	cpsid	i
 80179a6:	f383 8811 	msr	BASEPRI, r3
 80179aa:	f3bf 8f6f 	isb	sy
 80179ae:	f3bf 8f4f 	dsb	sy
 80179b2:	b662      	cpsie	i
 80179b4:	613b      	str	r3, [r7, #16]
}
 80179b6:	bf00      	nop
 80179b8:	e7fe      	b.n	80179b8 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80179ba:	697b      	ldr	r3, [r7, #20]
}
 80179bc:	4618      	mov	r0, r3
 80179be:	3718      	adds	r7, #24
 80179c0:	46bd      	mov	sp, r7
 80179c2:	bd80      	pop	{r7, pc}
 80179c4:	200174e4 	.word	0x200174e4
 80179c8:	08021804 	.word	0x08021804
 80179cc:	08017c51 	.word	0x08017c51
 80179d0:	200174e8 	.word	0x200174e8

080179d4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80179d4:	b580      	push	{r7, lr}
 80179d6:	b088      	sub	sp, #32
 80179d8:	af02      	add	r7, sp, #8
 80179da:	60f8      	str	r0, [r7, #12]
 80179dc:	60b9      	str	r1, [r7, #8]
 80179de:	607a      	str	r2, [r7, #4]
 80179e0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80179e2:	2028      	movs	r0, #40	; 0x28
 80179e4:	f000 fdc6 	bl	8018574 <pvPortMalloc>
 80179e8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80179ea:	697b      	ldr	r3, [r7, #20]
 80179ec:	2b00      	cmp	r3, #0
 80179ee:	d00d      	beq.n	8017a0c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80179f0:	697b      	ldr	r3, [r7, #20]
 80179f2:	2200      	movs	r2, #0
 80179f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80179f8:	697b      	ldr	r3, [r7, #20]
 80179fa:	9301      	str	r3, [sp, #4]
 80179fc:	6a3b      	ldr	r3, [r7, #32]
 80179fe:	9300      	str	r3, [sp, #0]
 8017a00:	683b      	ldr	r3, [r7, #0]
 8017a02:	687a      	ldr	r2, [r7, #4]
 8017a04:	68b9      	ldr	r1, [r7, #8]
 8017a06:	68f8      	ldr	r0, [r7, #12]
 8017a08:	f000 f847 	bl	8017a9a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8017a0c:	697b      	ldr	r3, [r7, #20]
	}
 8017a0e:	4618      	mov	r0, r3
 8017a10:	3718      	adds	r7, #24
 8017a12:	46bd      	mov	sp, r7
 8017a14:	bd80      	pop	{r7, pc}

08017a16 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8017a16:	b580      	push	{r7, lr}
 8017a18:	b08a      	sub	sp, #40	; 0x28
 8017a1a:	af02      	add	r7, sp, #8
 8017a1c:	60f8      	str	r0, [r7, #12]
 8017a1e:	60b9      	str	r1, [r7, #8]
 8017a20:	607a      	str	r2, [r7, #4]
 8017a22:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8017a24:	2328      	movs	r3, #40	; 0x28
 8017a26:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8017a28:	693b      	ldr	r3, [r7, #16]
 8017a2a:	2b28      	cmp	r3, #40	; 0x28
 8017a2c:	d00c      	beq.n	8017a48 <xTimerCreateStatic+0x32>
	__asm volatile
 8017a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a32:	b672      	cpsid	i
 8017a34:	f383 8811 	msr	BASEPRI, r3
 8017a38:	f3bf 8f6f 	isb	sy
 8017a3c:	f3bf 8f4f 	dsb	sy
 8017a40:	b662      	cpsie	i
 8017a42:	61bb      	str	r3, [r7, #24]
}
 8017a44:	bf00      	nop
 8017a46:	e7fe      	b.n	8017a46 <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8017a48:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8017a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	d10c      	bne.n	8017a6a <xTimerCreateStatic+0x54>
	__asm volatile
 8017a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a54:	b672      	cpsid	i
 8017a56:	f383 8811 	msr	BASEPRI, r3
 8017a5a:	f3bf 8f6f 	isb	sy
 8017a5e:	f3bf 8f4f 	dsb	sy
 8017a62:	b662      	cpsie	i
 8017a64:	617b      	str	r3, [r7, #20]
}
 8017a66:	bf00      	nop
 8017a68:	e7fe      	b.n	8017a68 <xTimerCreateStatic+0x52>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8017a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a6c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8017a6e:	69fb      	ldr	r3, [r7, #28]
 8017a70:	2b00      	cmp	r3, #0
 8017a72:	d00d      	beq.n	8017a90 <xTimerCreateStatic+0x7a>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8017a74:	69fb      	ldr	r3, [r7, #28]
 8017a76:	2202      	movs	r2, #2
 8017a78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8017a7c:	69fb      	ldr	r3, [r7, #28]
 8017a7e:	9301      	str	r3, [sp, #4]
 8017a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a82:	9300      	str	r3, [sp, #0]
 8017a84:	683b      	ldr	r3, [r7, #0]
 8017a86:	687a      	ldr	r2, [r7, #4]
 8017a88:	68b9      	ldr	r1, [r7, #8]
 8017a8a:	68f8      	ldr	r0, [r7, #12]
 8017a8c:	f000 f805 	bl	8017a9a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8017a90:	69fb      	ldr	r3, [r7, #28]
	}
 8017a92:	4618      	mov	r0, r3
 8017a94:	3720      	adds	r7, #32
 8017a96:	46bd      	mov	sp, r7
 8017a98:	bd80      	pop	{r7, pc}

08017a9a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8017a9a:	b580      	push	{r7, lr}
 8017a9c:	b086      	sub	sp, #24
 8017a9e:	af00      	add	r7, sp, #0
 8017aa0:	60f8      	str	r0, [r7, #12]
 8017aa2:	60b9      	str	r1, [r7, #8]
 8017aa4:	607a      	str	r2, [r7, #4]
 8017aa6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8017aa8:	68bb      	ldr	r3, [r7, #8]
 8017aaa:	2b00      	cmp	r3, #0
 8017aac:	d10c      	bne.n	8017ac8 <prvInitialiseNewTimer+0x2e>
	__asm volatile
 8017aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ab2:	b672      	cpsid	i
 8017ab4:	f383 8811 	msr	BASEPRI, r3
 8017ab8:	f3bf 8f6f 	isb	sy
 8017abc:	f3bf 8f4f 	dsb	sy
 8017ac0:	b662      	cpsie	i
 8017ac2:	617b      	str	r3, [r7, #20]
}
 8017ac4:	bf00      	nop
 8017ac6:	e7fe      	b.n	8017ac6 <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 8017ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017aca:	2b00      	cmp	r3, #0
 8017acc:	d01e      	beq.n	8017b0c <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8017ace:	f000 fad5 	bl	801807c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8017ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ad4:	68fa      	ldr	r2, [r7, #12]
 8017ad6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8017ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ada:	68ba      	ldr	r2, [r7, #8]
 8017adc:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8017ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ae0:	683a      	ldr	r2, [r7, #0]
 8017ae2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8017ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ae6:	6a3a      	ldr	r2, [r7, #32]
 8017ae8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8017aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017aec:	3304      	adds	r3, #4
 8017aee:	4618      	mov	r0, r3
 8017af0:	f7fd fe0e 	bl	8015710 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8017af4:	687b      	ldr	r3, [r7, #4]
 8017af6:	2b00      	cmp	r3, #0
 8017af8:	d008      	beq.n	8017b0c <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8017afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017afc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017b00:	f043 0304 	orr.w	r3, r3, #4
 8017b04:	b2da      	uxtb	r2, r3
 8017b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8017b0c:	bf00      	nop
 8017b0e:	3718      	adds	r7, #24
 8017b10:	46bd      	mov	sp, r7
 8017b12:	bd80      	pop	{r7, pc}

08017b14 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8017b14:	b580      	push	{r7, lr}
 8017b16:	b08a      	sub	sp, #40	; 0x28
 8017b18:	af00      	add	r7, sp, #0
 8017b1a:	60f8      	str	r0, [r7, #12]
 8017b1c:	60b9      	str	r1, [r7, #8]
 8017b1e:	607a      	str	r2, [r7, #4]
 8017b20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8017b22:	2300      	movs	r3, #0
 8017b24:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8017b26:	68fb      	ldr	r3, [r7, #12]
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	d10c      	bne.n	8017b46 <xTimerGenericCommand+0x32>
	__asm volatile
 8017b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b30:	b672      	cpsid	i
 8017b32:	f383 8811 	msr	BASEPRI, r3
 8017b36:	f3bf 8f6f 	isb	sy
 8017b3a:	f3bf 8f4f 	dsb	sy
 8017b3e:	b662      	cpsie	i
 8017b40:	623b      	str	r3, [r7, #32]
}
 8017b42:	bf00      	nop
 8017b44:	e7fe      	b.n	8017b44 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8017b46:	4b1a      	ldr	r3, [pc, #104]	; (8017bb0 <xTimerGenericCommand+0x9c>)
 8017b48:	681b      	ldr	r3, [r3, #0]
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	d02a      	beq.n	8017ba4 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8017b4e:	68bb      	ldr	r3, [r7, #8]
 8017b50:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8017b52:	687b      	ldr	r3, [r7, #4]
 8017b54:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8017b56:	68fb      	ldr	r3, [r7, #12]
 8017b58:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8017b5a:	68bb      	ldr	r3, [r7, #8]
 8017b5c:	2b05      	cmp	r3, #5
 8017b5e:	dc18      	bgt.n	8017b92 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8017b60:	f7ff fcae 	bl	80174c0 <xTaskGetSchedulerState>
 8017b64:	4603      	mov	r3, r0
 8017b66:	2b02      	cmp	r3, #2
 8017b68:	d109      	bne.n	8017b7e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8017b6a:	4b11      	ldr	r3, [pc, #68]	; (8017bb0 <xTimerGenericCommand+0x9c>)
 8017b6c:	6818      	ldr	r0, [r3, #0]
 8017b6e:	f107 0114 	add.w	r1, r7, #20
 8017b72:	2300      	movs	r3, #0
 8017b74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017b76:	f7fd ffad 	bl	8015ad4 <xQueueGenericSend>
 8017b7a:	6278      	str	r0, [r7, #36]	; 0x24
 8017b7c:	e012      	b.n	8017ba4 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8017b7e:	4b0c      	ldr	r3, [pc, #48]	; (8017bb0 <xTimerGenericCommand+0x9c>)
 8017b80:	6818      	ldr	r0, [r3, #0]
 8017b82:	f107 0114 	add.w	r1, r7, #20
 8017b86:	2300      	movs	r3, #0
 8017b88:	2200      	movs	r2, #0
 8017b8a:	f7fd ffa3 	bl	8015ad4 <xQueueGenericSend>
 8017b8e:	6278      	str	r0, [r7, #36]	; 0x24
 8017b90:	e008      	b.n	8017ba4 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8017b92:	4b07      	ldr	r3, [pc, #28]	; (8017bb0 <xTimerGenericCommand+0x9c>)
 8017b94:	6818      	ldr	r0, [r3, #0]
 8017b96:	f107 0114 	add.w	r1, r7, #20
 8017b9a:	2300      	movs	r3, #0
 8017b9c:	683a      	ldr	r2, [r7, #0]
 8017b9e:	f7fe f89f 	bl	8015ce0 <xQueueGenericSendFromISR>
 8017ba2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8017ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8017ba6:	4618      	mov	r0, r3
 8017ba8:	3728      	adds	r7, #40	; 0x28
 8017baa:	46bd      	mov	sp, r7
 8017bac:	bd80      	pop	{r7, pc}
 8017bae:	bf00      	nop
 8017bb0:	200174e4 	.word	0x200174e4

08017bb4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8017bb4:	b580      	push	{r7, lr}
 8017bb6:	b088      	sub	sp, #32
 8017bb8:	af02      	add	r7, sp, #8
 8017bba:	6078      	str	r0, [r7, #4]
 8017bbc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017bbe:	4b23      	ldr	r3, [pc, #140]	; (8017c4c <prvProcessExpiredTimer+0x98>)
 8017bc0:	681b      	ldr	r3, [r3, #0]
 8017bc2:	68db      	ldr	r3, [r3, #12]
 8017bc4:	68db      	ldr	r3, [r3, #12]
 8017bc6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017bc8:	697b      	ldr	r3, [r7, #20]
 8017bca:	3304      	adds	r3, #4
 8017bcc:	4618      	mov	r0, r3
 8017bce:	f7fd fe09 	bl	80157e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017bd2:	697b      	ldr	r3, [r7, #20]
 8017bd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017bd8:	f003 0304 	and.w	r3, r3, #4
 8017bdc:	2b00      	cmp	r3, #0
 8017bde:	d024      	beq.n	8017c2a <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8017be0:	697b      	ldr	r3, [r7, #20]
 8017be2:	699a      	ldr	r2, [r3, #24]
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	18d1      	adds	r1, r2, r3
 8017be8:	687b      	ldr	r3, [r7, #4]
 8017bea:	683a      	ldr	r2, [r7, #0]
 8017bec:	6978      	ldr	r0, [r7, #20]
 8017bee:	f000 f8d3 	bl	8017d98 <prvInsertTimerInActiveList>
 8017bf2:	4603      	mov	r3, r0
 8017bf4:	2b00      	cmp	r3, #0
 8017bf6:	d021      	beq.n	8017c3c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017bf8:	2300      	movs	r3, #0
 8017bfa:	9300      	str	r3, [sp, #0]
 8017bfc:	2300      	movs	r3, #0
 8017bfe:	687a      	ldr	r2, [r7, #4]
 8017c00:	2100      	movs	r1, #0
 8017c02:	6978      	ldr	r0, [r7, #20]
 8017c04:	f7ff ff86 	bl	8017b14 <xTimerGenericCommand>
 8017c08:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8017c0a:	693b      	ldr	r3, [r7, #16]
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	d115      	bne.n	8017c3c <prvProcessExpiredTimer+0x88>
	__asm volatile
 8017c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c14:	b672      	cpsid	i
 8017c16:	f383 8811 	msr	BASEPRI, r3
 8017c1a:	f3bf 8f6f 	isb	sy
 8017c1e:	f3bf 8f4f 	dsb	sy
 8017c22:	b662      	cpsie	i
 8017c24:	60fb      	str	r3, [r7, #12]
}
 8017c26:	bf00      	nop
 8017c28:	e7fe      	b.n	8017c28 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017c2a:	697b      	ldr	r3, [r7, #20]
 8017c2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017c30:	f023 0301 	bic.w	r3, r3, #1
 8017c34:	b2da      	uxtb	r2, r3
 8017c36:	697b      	ldr	r3, [r7, #20]
 8017c38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017c3c:	697b      	ldr	r3, [r7, #20]
 8017c3e:	6a1b      	ldr	r3, [r3, #32]
 8017c40:	6978      	ldr	r0, [r7, #20]
 8017c42:	4798      	blx	r3
}
 8017c44:	bf00      	nop
 8017c46:	3718      	adds	r7, #24
 8017c48:	46bd      	mov	sp, r7
 8017c4a:	bd80      	pop	{r7, pc}
 8017c4c:	200174dc 	.word	0x200174dc

08017c50 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8017c50:	b580      	push	{r7, lr}
 8017c52:	b084      	sub	sp, #16
 8017c54:	af00      	add	r7, sp, #0
 8017c56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017c58:	f107 0308 	add.w	r3, r7, #8
 8017c5c:	4618      	mov	r0, r3
 8017c5e:	f000 f857 	bl	8017d10 <prvGetNextExpireTime>
 8017c62:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8017c64:	68bb      	ldr	r3, [r7, #8]
 8017c66:	4619      	mov	r1, r3
 8017c68:	68f8      	ldr	r0, [r7, #12]
 8017c6a:	f000 f803 	bl	8017c74 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8017c6e:	f000 f8d5 	bl	8017e1c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017c72:	e7f1      	b.n	8017c58 <prvTimerTask+0x8>

08017c74 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8017c74:	b580      	push	{r7, lr}
 8017c76:	b084      	sub	sp, #16
 8017c78:	af00      	add	r7, sp, #0
 8017c7a:	6078      	str	r0, [r7, #4]
 8017c7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8017c7e:	f7ff f833 	bl	8016ce8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8017c82:	f107 0308 	add.w	r3, r7, #8
 8017c86:	4618      	mov	r0, r3
 8017c88:	f000 f866 	bl	8017d58 <prvSampleTimeNow>
 8017c8c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8017c8e:	68bb      	ldr	r3, [r7, #8]
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	d130      	bne.n	8017cf6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8017c94:	683b      	ldr	r3, [r7, #0]
 8017c96:	2b00      	cmp	r3, #0
 8017c98:	d10a      	bne.n	8017cb0 <prvProcessTimerOrBlockTask+0x3c>
 8017c9a:	687a      	ldr	r2, [r7, #4]
 8017c9c:	68fb      	ldr	r3, [r7, #12]
 8017c9e:	429a      	cmp	r2, r3
 8017ca0:	d806      	bhi.n	8017cb0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8017ca2:	f7ff f82f 	bl	8016d04 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8017ca6:	68f9      	ldr	r1, [r7, #12]
 8017ca8:	6878      	ldr	r0, [r7, #4]
 8017caa:	f7ff ff83 	bl	8017bb4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8017cae:	e024      	b.n	8017cfa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8017cb0:	683b      	ldr	r3, [r7, #0]
 8017cb2:	2b00      	cmp	r3, #0
 8017cb4:	d008      	beq.n	8017cc8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8017cb6:	4b13      	ldr	r3, [pc, #76]	; (8017d04 <prvProcessTimerOrBlockTask+0x90>)
 8017cb8:	681b      	ldr	r3, [r3, #0]
 8017cba:	681b      	ldr	r3, [r3, #0]
 8017cbc:	2b00      	cmp	r3, #0
 8017cbe:	d101      	bne.n	8017cc4 <prvProcessTimerOrBlockTask+0x50>
 8017cc0:	2301      	movs	r3, #1
 8017cc2:	e000      	b.n	8017cc6 <prvProcessTimerOrBlockTask+0x52>
 8017cc4:	2300      	movs	r3, #0
 8017cc6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8017cc8:	4b0f      	ldr	r3, [pc, #60]	; (8017d08 <prvProcessTimerOrBlockTask+0x94>)
 8017cca:	6818      	ldr	r0, [r3, #0]
 8017ccc:	687a      	ldr	r2, [r7, #4]
 8017cce:	68fb      	ldr	r3, [r7, #12]
 8017cd0:	1ad3      	subs	r3, r2, r3
 8017cd2:	683a      	ldr	r2, [r7, #0]
 8017cd4:	4619      	mov	r1, r3
 8017cd6:	f7fe fca5 	bl	8016624 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8017cda:	f7ff f813 	bl	8016d04 <xTaskResumeAll>
 8017cde:	4603      	mov	r3, r0
 8017ce0:	2b00      	cmp	r3, #0
 8017ce2:	d10a      	bne.n	8017cfa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8017ce4:	4b09      	ldr	r3, [pc, #36]	; (8017d0c <prvProcessTimerOrBlockTask+0x98>)
 8017ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017cea:	601a      	str	r2, [r3, #0]
 8017cec:	f3bf 8f4f 	dsb	sy
 8017cf0:	f3bf 8f6f 	isb	sy
}
 8017cf4:	e001      	b.n	8017cfa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8017cf6:	f7ff f805 	bl	8016d04 <xTaskResumeAll>
}
 8017cfa:	bf00      	nop
 8017cfc:	3710      	adds	r7, #16
 8017cfe:	46bd      	mov	sp, r7
 8017d00:	bd80      	pop	{r7, pc}
 8017d02:	bf00      	nop
 8017d04:	200174e0 	.word	0x200174e0
 8017d08:	200174e4 	.word	0x200174e4
 8017d0c:	e000ed04 	.word	0xe000ed04

08017d10 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8017d10:	b480      	push	{r7}
 8017d12:	b085      	sub	sp, #20
 8017d14:	af00      	add	r7, sp, #0
 8017d16:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8017d18:	4b0e      	ldr	r3, [pc, #56]	; (8017d54 <prvGetNextExpireTime+0x44>)
 8017d1a:	681b      	ldr	r3, [r3, #0]
 8017d1c:	681b      	ldr	r3, [r3, #0]
 8017d1e:	2b00      	cmp	r3, #0
 8017d20:	d101      	bne.n	8017d26 <prvGetNextExpireTime+0x16>
 8017d22:	2201      	movs	r2, #1
 8017d24:	e000      	b.n	8017d28 <prvGetNextExpireTime+0x18>
 8017d26:	2200      	movs	r2, #0
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8017d2c:	687b      	ldr	r3, [r7, #4]
 8017d2e:	681b      	ldr	r3, [r3, #0]
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	d105      	bne.n	8017d40 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017d34:	4b07      	ldr	r3, [pc, #28]	; (8017d54 <prvGetNextExpireTime+0x44>)
 8017d36:	681b      	ldr	r3, [r3, #0]
 8017d38:	68db      	ldr	r3, [r3, #12]
 8017d3a:	681b      	ldr	r3, [r3, #0]
 8017d3c:	60fb      	str	r3, [r7, #12]
 8017d3e:	e001      	b.n	8017d44 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8017d40:	2300      	movs	r3, #0
 8017d42:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8017d44:	68fb      	ldr	r3, [r7, #12]
}
 8017d46:	4618      	mov	r0, r3
 8017d48:	3714      	adds	r7, #20
 8017d4a:	46bd      	mov	sp, r7
 8017d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d50:	4770      	bx	lr
 8017d52:	bf00      	nop
 8017d54:	200174dc 	.word	0x200174dc

08017d58 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8017d58:	b580      	push	{r7, lr}
 8017d5a:	b084      	sub	sp, #16
 8017d5c:	af00      	add	r7, sp, #0
 8017d5e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8017d60:	f7ff f86e 	bl	8016e40 <xTaskGetTickCount>
 8017d64:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8017d66:	4b0b      	ldr	r3, [pc, #44]	; (8017d94 <prvSampleTimeNow+0x3c>)
 8017d68:	681b      	ldr	r3, [r3, #0]
 8017d6a:	68fa      	ldr	r2, [r7, #12]
 8017d6c:	429a      	cmp	r2, r3
 8017d6e:	d205      	bcs.n	8017d7c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8017d70:	f000 f91e 	bl	8017fb0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8017d74:	687b      	ldr	r3, [r7, #4]
 8017d76:	2201      	movs	r2, #1
 8017d78:	601a      	str	r2, [r3, #0]
 8017d7a:	e002      	b.n	8017d82 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	2200      	movs	r2, #0
 8017d80:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8017d82:	4a04      	ldr	r2, [pc, #16]	; (8017d94 <prvSampleTimeNow+0x3c>)
 8017d84:	68fb      	ldr	r3, [r7, #12]
 8017d86:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8017d88:	68fb      	ldr	r3, [r7, #12]
}
 8017d8a:	4618      	mov	r0, r3
 8017d8c:	3710      	adds	r7, #16
 8017d8e:	46bd      	mov	sp, r7
 8017d90:	bd80      	pop	{r7, pc}
 8017d92:	bf00      	nop
 8017d94:	200174ec 	.word	0x200174ec

08017d98 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8017d98:	b580      	push	{r7, lr}
 8017d9a:	b086      	sub	sp, #24
 8017d9c:	af00      	add	r7, sp, #0
 8017d9e:	60f8      	str	r0, [r7, #12]
 8017da0:	60b9      	str	r1, [r7, #8]
 8017da2:	607a      	str	r2, [r7, #4]
 8017da4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8017da6:	2300      	movs	r3, #0
 8017da8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8017daa:	68fb      	ldr	r3, [r7, #12]
 8017dac:	68ba      	ldr	r2, [r7, #8]
 8017dae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017db0:	68fb      	ldr	r3, [r7, #12]
 8017db2:	68fa      	ldr	r2, [r7, #12]
 8017db4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8017db6:	68ba      	ldr	r2, [r7, #8]
 8017db8:	687b      	ldr	r3, [r7, #4]
 8017dba:	429a      	cmp	r2, r3
 8017dbc:	d812      	bhi.n	8017de4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017dbe:	687a      	ldr	r2, [r7, #4]
 8017dc0:	683b      	ldr	r3, [r7, #0]
 8017dc2:	1ad2      	subs	r2, r2, r3
 8017dc4:	68fb      	ldr	r3, [r7, #12]
 8017dc6:	699b      	ldr	r3, [r3, #24]
 8017dc8:	429a      	cmp	r2, r3
 8017dca:	d302      	bcc.n	8017dd2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8017dcc:	2301      	movs	r3, #1
 8017dce:	617b      	str	r3, [r7, #20]
 8017dd0:	e01b      	b.n	8017e0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8017dd2:	4b10      	ldr	r3, [pc, #64]	; (8017e14 <prvInsertTimerInActiveList+0x7c>)
 8017dd4:	681a      	ldr	r2, [r3, #0]
 8017dd6:	68fb      	ldr	r3, [r7, #12]
 8017dd8:	3304      	adds	r3, #4
 8017dda:	4619      	mov	r1, r3
 8017ddc:	4610      	mov	r0, r2
 8017dde:	f7fd fcc8 	bl	8015772 <vListInsert>
 8017de2:	e012      	b.n	8017e0a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8017de4:	687a      	ldr	r2, [r7, #4]
 8017de6:	683b      	ldr	r3, [r7, #0]
 8017de8:	429a      	cmp	r2, r3
 8017dea:	d206      	bcs.n	8017dfa <prvInsertTimerInActiveList+0x62>
 8017dec:	68ba      	ldr	r2, [r7, #8]
 8017dee:	683b      	ldr	r3, [r7, #0]
 8017df0:	429a      	cmp	r2, r3
 8017df2:	d302      	bcc.n	8017dfa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8017df4:	2301      	movs	r3, #1
 8017df6:	617b      	str	r3, [r7, #20]
 8017df8:	e007      	b.n	8017e0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017dfa:	4b07      	ldr	r3, [pc, #28]	; (8017e18 <prvInsertTimerInActiveList+0x80>)
 8017dfc:	681a      	ldr	r2, [r3, #0]
 8017dfe:	68fb      	ldr	r3, [r7, #12]
 8017e00:	3304      	adds	r3, #4
 8017e02:	4619      	mov	r1, r3
 8017e04:	4610      	mov	r0, r2
 8017e06:	f7fd fcb4 	bl	8015772 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8017e0a:	697b      	ldr	r3, [r7, #20]
}
 8017e0c:	4618      	mov	r0, r3
 8017e0e:	3718      	adds	r7, #24
 8017e10:	46bd      	mov	sp, r7
 8017e12:	bd80      	pop	{r7, pc}
 8017e14:	200174e0 	.word	0x200174e0
 8017e18:	200174dc 	.word	0x200174dc

08017e1c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8017e1c:	b580      	push	{r7, lr}
 8017e1e:	b08c      	sub	sp, #48	; 0x30
 8017e20:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017e22:	e0b2      	b.n	8017f8a <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8017e24:	68bb      	ldr	r3, [r7, #8]
 8017e26:	2b00      	cmp	r3, #0
 8017e28:	f2c0 80ae 	blt.w	8017f88 <prvProcessReceivedCommands+0x16c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8017e2c:	693b      	ldr	r3, [r7, #16]
 8017e2e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8017e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e32:	695b      	ldr	r3, [r3, #20]
 8017e34:	2b00      	cmp	r3, #0
 8017e36:	d004      	beq.n	8017e42 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e3a:	3304      	adds	r3, #4
 8017e3c:	4618      	mov	r0, r3
 8017e3e:	f7fd fcd1 	bl	80157e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8017e42:	1d3b      	adds	r3, r7, #4
 8017e44:	4618      	mov	r0, r3
 8017e46:	f7ff ff87 	bl	8017d58 <prvSampleTimeNow>
 8017e4a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8017e4c:	68bb      	ldr	r3, [r7, #8]
 8017e4e:	2b09      	cmp	r3, #9
 8017e50:	f200 809b 	bhi.w	8017f8a <prvProcessReceivedCommands+0x16e>
 8017e54:	a201      	add	r2, pc, #4	; (adr r2, 8017e5c <prvProcessReceivedCommands+0x40>)
 8017e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017e5a:	bf00      	nop
 8017e5c:	08017e85 	.word	0x08017e85
 8017e60:	08017e85 	.word	0x08017e85
 8017e64:	08017e85 	.word	0x08017e85
 8017e68:	08017efd 	.word	0x08017efd
 8017e6c:	08017f11 	.word	0x08017f11
 8017e70:	08017f5f 	.word	0x08017f5f
 8017e74:	08017e85 	.word	0x08017e85
 8017e78:	08017e85 	.word	0x08017e85
 8017e7c:	08017efd 	.word	0x08017efd
 8017e80:	08017f11 	.word	0x08017f11
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017e8a:	f043 0301 	orr.w	r3, r3, #1
 8017e8e:	b2da      	uxtb	r2, r3
 8017e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8017e96:	68fa      	ldr	r2, [r7, #12]
 8017e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e9a:	699b      	ldr	r3, [r3, #24]
 8017e9c:	18d1      	adds	r1, r2, r3
 8017e9e:	68fb      	ldr	r3, [r7, #12]
 8017ea0:	6a3a      	ldr	r2, [r7, #32]
 8017ea2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017ea4:	f7ff ff78 	bl	8017d98 <prvInsertTimerInActiveList>
 8017ea8:	4603      	mov	r3, r0
 8017eaa:	2b00      	cmp	r3, #0
 8017eac:	d06d      	beq.n	8017f8a <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017eb0:	6a1b      	ldr	r3, [r3, #32]
 8017eb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017eb4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017eb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017ebc:	f003 0304 	and.w	r3, r3, #4
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	d062      	beq.n	8017f8a <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8017ec4:	68fa      	ldr	r2, [r7, #12]
 8017ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ec8:	699b      	ldr	r3, [r3, #24]
 8017eca:	441a      	add	r2, r3
 8017ecc:	2300      	movs	r3, #0
 8017ece:	9300      	str	r3, [sp, #0]
 8017ed0:	2300      	movs	r3, #0
 8017ed2:	2100      	movs	r1, #0
 8017ed4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017ed6:	f7ff fe1d 	bl	8017b14 <xTimerGenericCommand>
 8017eda:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8017edc:	69fb      	ldr	r3, [r7, #28]
 8017ede:	2b00      	cmp	r3, #0
 8017ee0:	d153      	bne.n	8017f8a <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8017ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ee6:	b672      	cpsid	i
 8017ee8:	f383 8811 	msr	BASEPRI, r3
 8017eec:	f3bf 8f6f 	isb	sy
 8017ef0:	f3bf 8f4f 	dsb	sy
 8017ef4:	b662      	cpsie	i
 8017ef6:	61bb      	str	r3, [r7, #24]
}
 8017ef8:	bf00      	nop
 8017efa:	e7fe      	b.n	8017efa <prvProcessReceivedCommands+0xde>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017efe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017f02:	f023 0301 	bic.w	r3, r3, #1
 8017f06:	b2da      	uxtb	r2, r3
 8017f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8017f0e:	e03c      	b.n	8017f8a <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017f16:	f043 0301 	orr.w	r3, r3, #1
 8017f1a:	b2da      	uxtb	r2, r3
 8017f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8017f22:	68fa      	ldr	r2, [r7, #12]
 8017f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f26:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8017f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f2a:	699b      	ldr	r3, [r3, #24]
 8017f2c:	2b00      	cmp	r3, #0
 8017f2e:	d10c      	bne.n	8017f4a <prvProcessReceivedCommands+0x12e>
	__asm volatile
 8017f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f34:	b672      	cpsid	i
 8017f36:	f383 8811 	msr	BASEPRI, r3
 8017f3a:	f3bf 8f6f 	isb	sy
 8017f3e:	f3bf 8f4f 	dsb	sy
 8017f42:	b662      	cpsie	i
 8017f44:	617b      	str	r3, [r7, #20]
}
 8017f46:	bf00      	nop
 8017f48:	e7fe      	b.n	8017f48 <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8017f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f4c:	699a      	ldr	r2, [r3, #24]
 8017f4e:	6a3b      	ldr	r3, [r7, #32]
 8017f50:	18d1      	adds	r1, r2, r3
 8017f52:	6a3b      	ldr	r3, [r7, #32]
 8017f54:	6a3a      	ldr	r2, [r7, #32]
 8017f56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017f58:	f7ff ff1e 	bl	8017d98 <prvInsertTimerInActiveList>
					break;
 8017f5c:	e015      	b.n	8017f8a <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8017f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017f64:	f003 0302 	and.w	r3, r3, #2
 8017f68:	2b00      	cmp	r3, #0
 8017f6a:	d103      	bne.n	8017f74 <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 8017f6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017f6e:	f000 fbcb 	bl	8018708 <vPortFree>
 8017f72:	e00a      	b.n	8017f8a <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017f7a:	f023 0301 	bic.w	r3, r3, #1
 8017f7e:	b2da      	uxtb	r2, r3
 8017f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8017f86:	e000      	b.n	8017f8a <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8017f88:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017f8a:	4b08      	ldr	r3, [pc, #32]	; (8017fac <prvProcessReceivedCommands+0x190>)
 8017f8c:	681b      	ldr	r3, [r3, #0]
 8017f8e:	f107 0108 	add.w	r1, r7, #8
 8017f92:	2200      	movs	r2, #0
 8017f94:	4618      	mov	r0, r3
 8017f96:	f7fd ffd9 	bl	8015f4c <xQueueReceive>
 8017f9a:	4603      	mov	r3, r0
 8017f9c:	2b00      	cmp	r3, #0
 8017f9e:	f47f af41 	bne.w	8017e24 <prvProcessReceivedCommands+0x8>
	}
}
 8017fa2:	bf00      	nop
 8017fa4:	bf00      	nop
 8017fa6:	3728      	adds	r7, #40	; 0x28
 8017fa8:	46bd      	mov	sp, r7
 8017faa:	bd80      	pop	{r7, pc}
 8017fac:	200174e4 	.word	0x200174e4

08017fb0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8017fb0:	b580      	push	{r7, lr}
 8017fb2:	b088      	sub	sp, #32
 8017fb4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017fb6:	e04a      	b.n	801804e <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017fb8:	4b2e      	ldr	r3, [pc, #184]	; (8018074 <prvSwitchTimerLists+0xc4>)
 8017fba:	681b      	ldr	r3, [r3, #0]
 8017fbc:	68db      	ldr	r3, [r3, #12]
 8017fbe:	681b      	ldr	r3, [r3, #0]
 8017fc0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017fc2:	4b2c      	ldr	r3, [pc, #176]	; (8018074 <prvSwitchTimerLists+0xc4>)
 8017fc4:	681b      	ldr	r3, [r3, #0]
 8017fc6:	68db      	ldr	r3, [r3, #12]
 8017fc8:	68db      	ldr	r3, [r3, #12]
 8017fca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017fcc:	68fb      	ldr	r3, [r7, #12]
 8017fce:	3304      	adds	r3, #4
 8017fd0:	4618      	mov	r0, r3
 8017fd2:	f7fd fc07 	bl	80157e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017fd6:	68fb      	ldr	r3, [r7, #12]
 8017fd8:	6a1b      	ldr	r3, [r3, #32]
 8017fda:	68f8      	ldr	r0, [r7, #12]
 8017fdc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017fde:	68fb      	ldr	r3, [r7, #12]
 8017fe0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017fe4:	f003 0304 	and.w	r3, r3, #4
 8017fe8:	2b00      	cmp	r3, #0
 8017fea:	d030      	beq.n	801804e <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8017fec:	68fb      	ldr	r3, [r7, #12]
 8017fee:	699b      	ldr	r3, [r3, #24]
 8017ff0:	693a      	ldr	r2, [r7, #16]
 8017ff2:	4413      	add	r3, r2
 8017ff4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8017ff6:	68ba      	ldr	r2, [r7, #8]
 8017ff8:	693b      	ldr	r3, [r7, #16]
 8017ffa:	429a      	cmp	r2, r3
 8017ffc:	d90e      	bls.n	801801c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8017ffe:	68fb      	ldr	r3, [r7, #12]
 8018000:	68ba      	ldr	r2, [r7, #8]
 8018002:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018004:	68fb      	ldr	r3, [r7, #12]
 8018006:	68fa      	ldr	r2, [r7, #12]
 8018008:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801800a:	4b1a      	ldr	r3, [pc, #104]	; (8018074 <prvSwitchTimerLists+0xc4>)
 801800c:	681a      	ldr	r2, [r3, #0]
 801800e:	68fb      	ldr	r3, [r7, #12]
 8018010:	3304      	adds	r3, #4
 8018012:	4619      	mov	r1, r3
 8018014:	4610      	mov	r0, r2
 8018016:	f7fd fbac 	bl	8015772 <vListInsert>
 801801a:	e018      	b.n	801804e <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801801c:	2300      	movs	r3, #0
 801801e:	9300      	str	r3, [sp, #0]
 8018020:	2300      	movs	r3, #0
 8018022:	693a      	ldr	r2, [r7, #16]
 8018024:	2100      	movs	r1, #0
 8018026:	68f8      	ldr	r0, [r7, #12]
 8018028:	f7ff fd74 	bl	8017b14 <xTimerGenericCommand>
 801802c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801802e:	687b      	ldr	r3, [r7, #4]
 8018030:	2b00      	cmp	r3, #0
 8018032:	d10c      	bne.n	801804e <prvSwitchTimerLists+0x9e>
	__asm volatile
 8018034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018038:	b672      	cpsid	i
 801803a:	f383 8811 	msr	BASEPRI, r3
 801803e:	f3bf 8f6f 	isb	sy
 8018042:	f3bf 8f4f 	dsb	sy
 8018046:	b662      	cpsie	i
 8018048:	603b      	str	r3, [r7, #0]
}
 801804a:	bf00      	nop
 801804c:	e7fe      	b.n	801804c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801804e:	4b09      	ldr	r3, [pc, #36]	; (8018074 <prvSwitchTimerLists+0xc4>)
 8018050:	681b      	ldr	r3, [r3, #0]
 8018052:	681b      	ldr	r3, [r3, #0]
 8018054:	2b00      	cmp	r3, #0
 8018056:	d1af      	bne.n	8017fb8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8018058:	4b06      	ldr	r3, [pc, #24]	; (8018074 <prvSwitchTimerLists+0xc4>)
 801805a:	681b      	ldr	r3, [r3, #0]
 801805c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801805e:	4b06      	ldr	r3, [pc, #24]	; (8018078 <prvSwitchTimerLists+0xc8>)
 8018060:	681b      	ldr	r3, [r3, #0]
 8018062:	4a04      	ldr	r2, [pc, #16]	; (8018074 <prvSwitchTimerLists+0xc4>)
 8018064:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8018066:	4a04      	ldr	r2, [pc, #16]	; (8018078 <prvSwitchTimerLists+0xc8>)
 8018068:	697b      	ldr	r3, [r7, #20]
 801806a:	6013      	str	r3, [r2, #0]
}
 801806c:	bf00      	nop
 801806e:	3718      	adds	r7, #24
 8018070:	46bd      	mov	sp, r7
 8018072:	bd80      	pop	{r7, pc}
 8018074:	200174dc 	.word	0x200174dc
 8018078:	200174e0 	.word	0x200174e0

0801807c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801807c:	b580      	push	{r7, lr}
 801807e:	b082      	sub	sp, #8
 8018080:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8018082:	f000 f94b 	bl	801831c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8018086:	4b15      	ldr	r3, [pc, #84]	; (80180dc <prvCheckForValidListAndQueue+0x60>)
 8018088:	681b      	ldr	r3, [r3, #0]
 801808a:	2b00      	cmp	r3, #0
 801808c:	d120      	bne.n	80180d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801808e:	4814      	ldr	r0, [pc, #80]	; (80180e0 <prvCheckForValidListAndQueue+0x64>)
 8018090:	f7fd fb1e 	bl	80156d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8018094:	4813      	ldr	r0, [pc, #76]	; (80180e4 <prvCheckForValidListAndQueue+0x68>)
 8018096:	f7fd fb1b 	bl	80156d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801809a:	4b13      	ldr	r3, [pc, #76]	; (80180e8 <prvCheckForValidListAndQueue+0x6c>)
 801809c:	4a10      	ldr	r2, [pc, #64]	; (80180e0 <prvCheckForValidListAndQueue+0x64>)
 801809e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80180a0:	4b12      	ldr	r3, [pc, #72]	; (80180ec <prvCheckForValidListAndQueue+0x70>)
 80180a2:	4a10      	ldr	r2, [pc, #64]	; (80180e4 <prvCheckForValidListAndQueue+0x68>)
 80180a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80180a6:	2300      	movs	r3, #0
 80180a8:	9300      	str	r3, [sp, #0]
 80180aa:	4b11      	ldr	r3, [pc, #68]	; (80180f0 <prvCheckForValidListAndQueue+0x74>)
 80180ac:	4a11      	ldr	r2, [pc, #68]	; (80180f4 <prvCheckForValidListAndQueue+0x78>)
 80180ae:	210c      	movs	r1, #12
 80180b0:	200a      	movs	r0, #10
 80180b2:	f7fd fc2b 	bl	801590c <xQueueGenericCreateStatic>
 80180b6:	4603      	mov	r3, r0
 80180b8:	4a08      	ldr	r2, [pc, #32]	; (80180dc <prvCheckForValidListAndQueue+0x60>)
 80180ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80180bc:	4b07      	ldr	r3, [pc, #28]	; (80180dc <prvCheckForValidListAndQueue+0x60>)
 80180be:	681b      	ldr	r3, [r3, #0]
 80180c0:	2b00      	cmp	r3, #0
 80180c2:	d005      	beq.n	80180d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80180c4:	4b05      	ldr	r3, [pc, #20]	; (80180dc <prvCheckForValidListAndQueue+0x60>)
 80180c6:	681b      	ldr	r3, [r3, #0]
 80180c8:	490b      	ldr	r1, [pc, #44]	; (80180f8 <prvCheckForValidListAndQueue+0x7c>)
 80180ca:	4618      	mov	r0, r3
 80180cc:	f7fe fa80 	bl	80165d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80180d0:	f000 f958 	bl	8018384 <vPortExitCritical>
}
 80180d4:	bf00      	nop
 80180d6:	46bd      	mov	sp, r7
 80180d8:	bd80      	pop	{r7, pc}
 80180da:	bf00      	nop
 80180dc:	200174e4 	.word	0x200174e4
 80180e0:	200174b4 	.word	0x200174b4
 80180e4:	200174c8 	.word	0x200174c8
 80180e8:	200174dc 	.word	0x200174dc
 80180ec:	200174e0 	.word	0x200174e0
 80180f0:	20017568 	.word	0x20017568
 80180f4:	200174f0 	.word	0x200174f0
 80180f8:	0802180c 	.word	0x0802180c

080180fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80180fc:	b480      	push	{r7}
 80180fe:	b085      	sub	sp, #20
 8018100:	af00      	add	r7, sp, #0
 8018102:	60f8      	str	r0, [r7, #12]
 8018104:	60b9      	str	r1, [r7, #8]
 8018106:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8018108:	68fb      	ldr	r3, [r7, #12]
 801810a:	3b04      	subs	r3, #4
 801810c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801810e:	68fb      	ldr	r3, [r7, #12]
 8018110:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8018114:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018116:	68fb      	ldr	r3, [r7, #12]
 8018118:	3b04      	subs	r3, #4
 801811a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801811c:	68bb      	ldr	r3, [r7, #8]
 801811e:	f023 0201 	bic.w	r2, r3, #1
 8018122:	68fb      	ldr	r3, [r7, #12]
 8018124:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018126:	68fb      	ldr	r3, [r7, #12]
 8018128:	3b04      	subs	r3, #4
 801812a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801812c:	4a0c      	ldr	r2, [pc, #48]	; (8018160 <pxPortInitialiseStack+0x64>)
 801812e:	68fb      	ldr	r3, [r7, #12]
 8018130:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8018132:	68fb      	ldr	r3, [r7, #12]
 8018134:	3b14      	subs	r3, #20
 8018136:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8018138:	687a      	ldr	r2, [r7, #4]
 801813a:	68fb      	ldr	r3, [r7, #12]
 801813c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801813e:	68fb      	ldr	r3, [r7, #12]
 8018140:	3b04      	subs	r3, #4
 8018142:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8018144:	68fb      	ldr	r3, [r7, #12]
 8018146:	f06f 0202 	mvn.w	r2, #2
 801814a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801814c:	68fb      	ldr	r3, [r7, #12]
 801814e:	3b20      	subs	r3, #32
 8018150:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8018152:	68fb      	ldr	r3, [r7, #12]
}
 8018154:	4618      	mov	r0, r3
 8018156:	3714      	adds	r7, #20
 8018158:	46bd      	mov	sp, r7
 801815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801815e:	4770      	bx	lr
 8018160:	08018165 	.word	0x08018165

08018164 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8018164:	b480      	push	{r7}
 8018166:	b085      	sub	sp, #20
 8018168:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801816a:	2300      	movs	r3, #0
 801816c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801816e:	4b14      	ldr	r3, [pc, #80]	; (80181c0 <prvTaskExitError+0x5c>)
 8018170:	681b      	ldr	r3, [r3, #0]
 8018172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018176:	d00c      	beq.n	8018192 <prvTaskExitError+0x2e>
	__asm volatile
 8018178:	f04f 0350 	mov.w	r3, #80	; 0x50
 801817c:	b672      	cpsid	i
 801817e:	f383 8811 	msr	BASEPRI, r3
 8018182:	f3bf 8f6f 	isb	sy
 8018186:	f3bf 8f4f 	dsb	sy
 801818a:	b662      	cpsie	i
 801818c:	60fb      	str	r3, [r7, #12]
}
 801818e:	bf00      	nop
 8018190:	e7fe      	b.n	8018190 <prvTaskExitError+0x2c>
	__asm volatile
 8018192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018196:	b672      	cpsid	i
 8018198:	f383 8811 	msr	BASEPRI, r3
 801819c:	f3bf 8f6f 	isb	sy
 80181a0:	f3bf 8f4f 	dsb	sy
 80181a4:	b662      	cpsie	i
 80181a6:	60bb      	str	r3, [r7, #8]
}
 80181a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80181aa:	bf00      	nop
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	2b00      	cmp	r3, #0
 80181b0:	d0fc      	beq.n	80181ac <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80181b2:	bf00      	nop
 80181b4:	bf00      	nop
 80181b6:	3714      	adds	r7, #20
 80181b8:	46bd      	mov	sp, r7
 80181ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181be:	4770      	bx	lr
 80181c0:	20000024 	.word	0x20000024
	...

080181d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80181d0:	4b07      	ldr	r3, [pc, #28]	; (80181f0 <pxCurrentTCBConst2>)
 80181d2:	6819      	ldr	r1, [r3, #0]
 80181d4:	6808      	ldr	r0, [r1, #0]
 80181d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181da:	f380 8809 	msr	PSP, r0
 80181de:	f3bf 8f6f 	isb	sy
 80181e2:	f04f 0000 	mov.w	r0, #0
 80181e6:	f380 8811 	msr	BASEPRI, r0
 80181ea:	4770      	bx	lr
 80181ec:	f3af 8000 	nop.w

080181f0 <pxCurrentTCBConst2>:
 80181f0:	20017388 	.word	0x20017388
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80181f4:	bf00      	nop
 80181f6:	bf00      	nop

080181f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80181f8:	4808      	ldr	r0, [pc, #32]	; (801821c <prvPortStartFirstTask+0x24>)
 80181fa:	6800      	ldr	r0, [r0, #0]
 80181fc:	6800      	ldr	r0, [r0, #0]
 80181fe:	f380 8808 	msr	MSP, r0
 8018202:	f04f 0000 	mov.w	r0, #0
 8018206:	f380 8814 	msr	CONTROL, r0
 801820a:	b662      	cpsie	i
 801820c:	b661      	cpsie	f
 801820e:	f3bf 8f4f 	dsb	sy
 8018212:	f3bf 8f6f 	isb	sy
 8018216:	df00      	svc	0
 8018218:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801821a:	bf00      	nop
 801821c:	e000ed08 	.word	0xe000ed08

08018220 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8018220:	b580      	push	{r7, lr}
 8018222:	b084      	sub	sp, #16
 8018224:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8018226:	4b37      	ldr	r3, [pc, #220]	; (8018304 <xPortStartScheduler+0xe4>)
 8018228:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801822a:	68fb      	ldr	r3, [r7, #12]
 801822c:	781b      	ldrb	r3, [r3, #0]
 801822e:	b2db      	uxtb	r3, r3
 8018230:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8018232:	68fb      	ldr	r3, [r7, #12]
 8018234:	22ff      	movs	r2, #255	; 0xff
 8018236:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8018238:	68fb      	ldr	r3, [r7, #12]
 801823a:	781b      	ldrb	r3, [r3, #0]
 801823c:	b2db      	uxtb	r3, r3
 801823e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018240:	78fb      	ldrb	r3, [r7, #3]
 8018242:	b2db      	uxtb	r3, r3
 8018244:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8018248:	b2da      	uxtb	r2, r3
 801824a:	4b2f      	ldr	r3, [pc, #188]	; (8018308 <xPortStartScheduler+0xe8>)
 801824c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801824e:	4b2f      	ldr	r3, [pc, #188]	; (801830c <xPortStartScheduler+0xec>)
 8018250:	2207      	movs	r2, #7
 8018252:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018254:	e009      	b.n	801826a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8018256:	4b2d      	ldr	r3, [pc, #180]	; (801830c <xPortStartScheduler+0xec>)
 8018258:	681b      	ldr	r3, [r3, #0]
 801825a:	3b01      	subs	r3, #1
 801825c:	4a2b      	ldr	r2, [pc, #172]	; (801830c <xPortStartScheduler+0xec>)
 801825e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8018260:	78fb      	ldrb	r3, [r7, #3]
 8018262:	b2db      	uxtb	r3, r3
 8018264:	005b      	lsls	r3, r3, #1
 8018266:	b2db      	uxtb	r3, r3
 8018268:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801826a:	78fb      	ldrb	r3, [r7, #3]
 801826c:	b2db      	uxtb	r3, r3
 801826e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018272:	2b80      	cmp	r3, #128	; 0x80
 8018274:	d0ef      	beq.n	8018256 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018276:	4b25      	ldr	r3, [pc, #148]	; (801830c <xPortStartScheduler+0xec>)
 8018278:	681b      	ldr	r3, [r3, #0]
 801827a:	f1c3 0307 	rsb	r3, r3, #7
 801827e:	2b04      	cmp	r3, #4
 8018280:	d00c      	beq.n	801829c <xPortStartScheduler+0x7c>
	__asm volatile
 8018282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018286:	b672      	cpsid	i
 8018288:	f383 8811 	msr	BASEPRI, r3
 801828c:	f3bf 8f6f 	isb	sy
 8018290:	f3bf 8f4f 	dsb	sy
 8018294:	b662      	cpsie	i
 8018296:	60bb      	str	r3, [r7, #8]
}
 8018298:	bf00      	nop
 801829a:	e7fe      	b.n	801829a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801829c:	4b1b      	ldr	r3, [pc, #108]	; (801830c <xPortStartScheduler+0xec>)
 801829e:	681b      	ldr	r3, [r3, #0]
 80182a0:	021b      	lsls	r3, r3, #8
 80182a2:	4a1a      	ldr	r2, [pc, #104]	; (801830c <xPortStartScheduler+0xec>)
 80182a4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80182a6:	4b19      	ldr	r3, [pc, #100]	; (801830c <xPortStartScheduler+0xec>)
 80182a8:	681b      	ldr	r3, [r3, #0]
 80182aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80182ae:	4a17      	ldr	r2, [pc, #92]	; (801830c <xPortStartScheduler+0xec>)
 80182b0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80182b2:	687b      	ldr	r3, [r7, #4]
 80182b4:	b2da      	uxtb	r2, r3
 80182b6:	68fb      	ldr	r3, [r7, #12]
 80182b8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80182ba:	4b15      	ldr	r3, [pc, #84]	; (8018310 <xPortStartScheduler+0xf0>)
 80182bc:	681b      	ldr	r3, [r3, #0]
 80182be:	4a14      	ldr	r2, [pc, #80]	; (8018310 <xPortStartScheduler+0xf0>)
 80182c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80182c4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80182c6:	4b12      	ldr	r3, [pc, #72]	; (8018310 <xPortStartScheduler+0xf0>)
 80182c8:	681b      	ldr	r3, [r3, #0]
 80182ca:	4a11      	ldr	r2, [pc, #68]	; (8018310 <xPortStartScheduler+0xf0>)
 80182cc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80182d0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80182d2:	f000 f8dd 	bl	8018490 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80182d6:	4b0f      	ldr	r3, [pc, #60]	; (8018314 <xPortStartScheduler+0xf4>)
 80182d8:	2200      	movs	r2, #0
 80182da:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80182dc:	f000 f8fc 	bl	80184d8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80182e0:	4b0d      	ldr	r3, [pc, #52]	; (8018318 <xPortStartScheduler+0xf8>)
 80182e2:	681b      	ldr	r3, [r3, #0]
 80182e4:	4a0c      	ldr	r2, [pc, #48]	; (8018318 <xPortStartScheduler+0xf8>)
 80182e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80182ea:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80182ec:	f7ff ff84 	bl	80181f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80182f0:	f7fe fe70 	bl	8016fd4 <vTaskSwitchContext>
	prvTaskExitError();
 80182f4:	f7ff ff36 	bl	8018164 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80182f8:	2300      	movs	r3, #0
}
 80182fa:	4618      	mov	r0, r3
 80182fc:	3710      	adds	r7, #16
 80182fe:	46bd      	mov	sp, r7
 8018300:	bd80      	pop	{r7, pc}
 8018302:	bf00      	nop
 8018304:	e000e400 	.word	0xe000e400
 8018308:	200175b0 	.word	0x200175b0
 801830c:	200175b4 	.word	0x200175b4
 8018310:	e000ed20 	.word	0xe000ed20
 8018314:	20000024 	.word	0x20000024
 8018318:	e000ef34 	.word	0xe000ef34

0801831c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801831c:	b480      	push	{r7}
 801831e:	b083      	sub	sp, #12
 8018320:	af00      	add	r7, sp, #0
	__asm volatile
 8018322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018326:	b672      	cpsid	i
 8018328:	f383 8811 	msr	BASEPRI, r3
 801832c:	f3bf 8f6f 	isb	sy
 8018330:	f3bf 8f4f 	dsb	sy
 8018334:	b662      	cpsie	i
 8018336:	607b      	str	r3, [r7, #4]
}
 8018338:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801833a:	4b10      	ldr	r3, [pc, #64]	; (801837c <vPortEnterCritical+0x60>)
 801833c:	681b      	ldr	r3, [r3, #0]
 801833e:	3301      	adds	r3, #1
 8018340:	4a0e      	ldr	r2, [pc, #56]	; (801837c <vPortEnterCritical+0x60>)
 8018342:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8018344:	4b0d      	ldr	r3, [pc, #52]	; (801837c <vPortEnterCritical+0x60>)
 8018346:	681b      	ldr	r3, [r3, #0]
 8018348:	2b01      	cmp	r3, #1
 801834a:	d111      	bne.n	8018370 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801834c:	4b0c      	ldr	r3, [pc, #48]	; (8018380 <vPortEnterCritical+0x64>)
 801834e:	681b      	ldr	r3, [r3, #0]
 8018350:	b2db      	uxtb	r3, r3
 8018352:	2b00      	cmp	r3, #0
 8018354:	d00c      	beq.n	8018370 <vPortEnterCritical+0x54>
	__asm volatile
 8018356:	f04f 0350 	mov.w	r3, #80	; 0x50
 801835a:	b672      	cpsid	i
 801835c:	f383 8811 	msr	BASEPRI, r3
 8018360:	f3bf 8f6f 	isb	sy
 8018364:	f3bf 8f4f 	dsb	sy
 8018368:	b662      	cpsie	i
 801836a:	603b      	str	r3, [r7, #0]
}
 801836c:	bf00      	nop
 801836e:	e7fe      	b.n	801836e <vPortEnterCritical+0x52>
	}
}
 8018370:	bf00      	nop
 8018372:	370c      	adds	r7, #12
 8018374:	46bd      	mov	sp, r7
 8018376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801837a:	4770      	bx	lr
 801837c:	20000024 	.word	0x20000024
 8018380:	e000ed04 	.word	0xe000ed04

08018384 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8018384:	b480      	push	{r7}
 8018386:	b083      	sub	sp, #12
 8018388:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801838a:	4b13      	ldr	r3, [pc, #76]	; (80183d8 <vPortExitCritical+0x54>)
 801838c:	681b      	ldr	r3, [r3, #0]
 801838e:	2b00      	cmp	r3, #0
 8018390:	d10c      	bne.n	80183ac <vPortExitCritical+0x28>
	__asm volatile
 8018392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018396:	b672      	cpsid	i
 8018398:	f383 8811 	msr	BASEPRI, r3
 801839c:	f3bf 8f6f 	isb	sy
 80183a0:	f3bf 8f4f 	dsb	sy
 80183a4:	b662      	cpsie	i
 80183a6:	607b      	str	r3, [r7, #4]
}
 80183a8:	bf00      	nop
 80183aa:	e7fe      	b.n	80183aa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80183ac:	4b0a      	ldr	r3, [pc, #40]	; (80183d8 <vPortExitCritical+0x54>)
 80183ae:	681b      	ldr	r3, [r3, #0]
 80183b0:	3b01      	subs	r3, #1
 80183b2:	4a09      	ldr	r2, [pc, #36]	; (80183d8 <vPortExitCritical+0x54>)
 80183b4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80183b6:	4b08      	ldr	r3, [pc, #32]	; (80183d8 <vPortExitCritical+0x54>)
 80183b8:	681b      	ldr	r3, [r3, #0]
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	d105      	bne.n	80183ca <vPortExitCritical+0x46>
 80183be:	2300      	movs	r3, #0
 80183c0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80183c2:	683b      	ldr	r3, [r7, #0]
 80183c4:	f383 8811 	msr	BASEPRI, r3
}
 80183c8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80183ca:	bf00      	nop
 80183cc:	370c      	adds	r7, #12
 80183ce:	46bd      	mov	sp, r7
 80183d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183d4:	4770      	bx	lr
 80183d6:	bf00      	nop
 80183d8:	20000024 	.word	0x20000024
 80183dc:	00000000 	.word	0x00000000

080183e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80183e0:	f3ef 8009 	mrs	r0, PSP
 80183e4:	f3bf 8f6f 	isb	sy
 80183e8:	4b15      	ldr	r3, [pc, #84]	; (8018440 <pxCurrentTCBConst>)
 80183ea:	681a      	ldr	r2, [r3, #0]
 80183ec:	f01e 0f10 	tst.w	lr, #16
 80183f0:	bf08      	it	eq
 80183f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80183f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183fa:	6010      	str	r0, [r2, #0]
 80183fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8018400:	f04f 0050 	mov.w	r0, #80	; 0x50
 8018404:	b672      	cpsid	i
 8018406:	f380 8811 	msr	BASEPRI, r0
 801840a:	f3bf 8f4f 	dsb	sy
 801840e:	f3bf 8f6f 	isb	sy
 8018412:	b662      	cpsie	i
 8018414:	f7fe fdde 	bl	8016fd4 <vTaskSwitchContext>
 8018418:	f04f 0000 	mov.w	r0, #0
 801841c:	f380 8811 	msr	BASEPRI, r0
 8018420:	bc09      	pop	{r0, r3}
 8018422:	6819      	ldr	r1, [r3, #0]
 8018424:	6808      	ldr	r0, [r1, #0]
 8018426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801842a:	f01e 0f10 	tst.w	lr, #16
 801842e:	bf08      	it	eq
 8018430:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8018434:	f380 8809 	msr	PSP, r0
 8018438:	f3bf 8f6f 	isb	sy
 801843c:	4770      	bx	lr
 801843e:	bf00      	nop

08018440 <pxCurrentTCBConst>:
 8018440:	20017388 	.word	0x20017388
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8018444:	bf00      	nop
 8018446:	bf00      	nop

08018448 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8018448:	b580      	push	{r7, lr}
 801844a:	b082      	sub	sp, #8
 801844c:	af00      	add	r7, sp, #0
	__asm volatile
 801844e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018452:	b672      	cpsid	i
 8018454:	f383 8811 	msr	BASEPRI, r3
 8018458:	f3bf 8f6f 	isb	sy
 801845c:	f3bf 8f4f 	dsb	sy
 8018460:	b662      	cpsie	i
 8018462:	607b      	str	r3, [r7, #4]
}
 8018464:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8018466:	f7fe fcfb 	bl	8016e60 <xTaskIncrementTick>
 801846a:	4603      	mov	r3, r0
 801846c:	2b00      	cmp	r3, #0
 801846e:	d003      	beq.n	8018478 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8018470:	4b06      	ldr	r3, [pc, #24]	; (801848c <xPortSysTickHandler+0x44>)
 8018472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018476:	601a      	str	r2, [r3, #0]
 8018478:	2300      	movs	r3, #0
 801847a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801847c:	683b      	ldr	r3, [r7, #0]
 801847e:	f383 8811 	msr	BASEPRI, r3
}
 8018482:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8018484:	bf00      	nop
 8018486:	3708      	adds	r7, #8
 8018488:	46bd      	mov	sp, r7
 801848a:	bd80      	pop	{r7, pc}
 801848c:	e000ed04 	.word	0xe000ed04

08018490 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8018490:	b480      	push	{r7}
 8018492:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8018494:	4b0b      	ldr	r3, [pc, #44]	; (80184c4 <vPortSetupTimerInterrupt+0x34>)
 8018496:	2200      	movs	r2, #0
 8018498:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801849a:	4b0b      	ldr	r3, [pc, #44]	; (80184c8 <vPortSetupTimerInterrupt+0x38>)
 801849c:	2200      	movs	r2, #0
 801849e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80184a0:	4b0a      	ldr	r3, [pc, #40]	; (80184cc <vPortSetupTimerInterrupt+0x3c>)
 80184a2:	681b      	ldr	r3, [r3, #0]
 80184a4:	4a0a      	ldr	r2, [pc, #40]	; (80184d0 <vPortSetupTimerInterrupt+0x40>)
 80184a6:	fba2 2303 	umull	r2, r3, r2, r3
 80184aa:	099b      	lsrs	r3, r3, #6
 80184ac:	4a09      	ldr	r2, [pc, #36]	; (80184d4 <vPortSetupTimerInterrupt+0x44>)
 80184ae:	3b01      	subs	r3, #1
 80184b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80184b2:	4b04      	ldr	r3, [pc, #16]	; (80184c4 <vPortSetupTimerInterrupt+0x34>)
 80184b4:	2207      	movs	r2, #7
 80184b6:	601a      	str	r2, [r3, #0]
}
 80184b8:	bf00      	nop
 80184ba:	46bd      	mov	sp, r7
 80184bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184c0:	4770      	bx	lr
 80184c2:	bf00      	nop
 80184c4:	e000e010 	.word	0xe000e010
 80184c8:	e000e018 	.word	0xe000e018
 80184cc:	20000018 	.word	0x20000018
 80184d0:	10624dd3 	.word	0x10624dd3
 80184d4:	e000e014 	.word	0xe000e014

080184d8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80184d8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80184e8 <vPortEnableVFP+0x10>
 80184dc:	6801      	ldr	r1, [r0, #0]
 80184de:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80184e2:	6001      	str	r1, [r0, #0]
 80184e4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80184e6:	bf00      	nop
 80184e8:	e000ed88 	.word	0xe000ed88

080184ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80184ec:	b480      	push	{r7}
 80184ee:	b085      	sub	sp, #20
 80184f0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80184f2:	f3ef 8305 	mrs	r3, IPSR
 80184f6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80184f8:	68fb      	ldr	r3, [r7, #12]
 80184fa:	2b0f      	cmp	r3, #15
 80184fc:	d916      	bls.n	801852c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80184fe:	4a19      	ldr	r2, [pc, #100]	; (8018564 <vPortValidateInterruptPriority+0x78>)
 8018500:	68fb      	ldr	r3, [r7, #12]
 8018502:	4413      	add	r3, r2
 8018504:	781b      	ldrb	r3, [r3, #0]
 8018506:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8018508:	4b17      	ldr	r3, [pc, #92]	; (8018568 <vPortValidateInterruptPriority+0x7c>)
 801850a:	781b      	ldrb	r3, [r3, #0]
 801850c:	7afa      	ldrb	r2, [r7, #11]
 801850e:	429a      	cmp	r2, r3
 8018510:	d20c      	bcs.n	801852c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8018512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018516:	b672      	cpsid	i
 8018518:	f383 8811 	msr	BASEPRI, r3
 801851c:	f3bf 8f6f 	isb	sy
 8018520:	f3bf 8f4f 	dsb	sy
 8018524:	b662      	cpsie	i
 8018526:	607b      	str	r3, [r7, #4]
}
 8018528:	bf00      	nop
 801852a:	e7fe      	b.n	801852a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801852c:	4b0f      	ldr	r3, [pc, #60]	; (801856c <vPortValidateInterruptPriority+0x80>)
 801852e:	681b      	ldr	r3, [r3, #0]
 8018530:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8018534:	4b0e      	ldr	r3, [pc, #56]	; (8018570 <vPortValidateInterruptPriority+0x84>)
 8018536:	681b      	ldr	r3, [r3, #0]
 8018538:	429a      	cmp	r2, r3
 801853a:	d90c      	bls.n	8018556 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 801853c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018540:	b672      	cpsid	i
 8018542:	f383 8811 	msr	BASEPRI, r3
 8018546:	f3bf 8f6f 	isb	sy
 801854a:	f3bf 8f4f 	dsb	sy
 801854e:	b662      	cpsie	i
 8018550:	603b      	str	r3, [r7, #0]
}
 8018552:	bf00      	nop
 8018554:	e7fe      	b.n	8018554 <vPortValidateInterruptPriority+0x68>
	}
 8018556:	bf00      	nop
 8018558:	3714      	adds	r7, #20
 801855a:	46bd      	mov	sp, r7
 801855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018560:	4770      	bx	lr
 8018562:	bf00      	nop
 8018564:	e000e3f0 	.word	0xe000e3f0
 8018568:	200175b0 	.word	0x200175b0
 801856c:	e000ed0c 	.word	0xe000ed0c
 8018570:	200175b4 	.word	0x200175b4

08018574 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8018574:	b580      	push	{r7, lr}
 8018576:	b08a      	sub	sp, #40	; 0x28
 8018578:	af00      	add	r7, sp, #0
 801857a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801857c:	2300      	movs	r3, #0
 801857e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8018580:	f7fe fbb2 	bl	8016ce8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8018584:	4b5b      	ldr	r3, [pc, #364]	; (80186f4 <pvPortMalloc+0x180>)
 8018586:	681b      	ldr	r3, [r3, #0]
 8018588:	2b00      	cmp	r3, #0
 801858a:	d101      	bne.n	8018590 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801858c:	f000 f91a 	bl	80187c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8018590:	4b59      	ldr	r3, [pc, #356]	; (80186f8 <pvPortMalloc+0x184>)
 8018592:	681a      	ldr	r2, [r3, #0]
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	4013      	ands	r3, r2
 8018598:	2b00      	cmp	r3, #0
 801859a:	f040 8092 	bne.w	80186c2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801859e:	687b      	ldr	r3, [r7, #4]
 80185a0:	2b00      	cmp	r3, #0
 80185a2:	d01f      	beq.n	80185e4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80185a4:	2208      	movs	r2, #8
 80185a6:	687b      	ldr	r3, [r7, #4]
 80185a8:	4413      	add	r3, r2
 80185aa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80185ac:	687b      	ldr	r3, [r7, #4]
 80185ae:	f003 0307 	and.w	r3, r3, #7
 80185b2:	2b00      	cmp	r3, #0
 80185b4:	d016      	beq.n	80185e4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80185b6:	687b      	ldr	r3, [r7, #4]
 80185b8:	f023 0307 	bic.w	r3, r3, #7
 80185bc:	3308      	adds	r3, #8
 80185be:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	f003 0307 	and.w	r3, r3, #7
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	d00c      	beq.n	80185e4 <pvPortMalloc+0x70>
	__asm volatile
 80185ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80185ce:	b672      	cpsid	i
 80185d0:	f383 8811 	msr	BASEPRI, r3
 80185d4:	f3bf 8f6f 	isb	sy
 80185d8:	f3bf 8f4f 	dsb	sy
 80185dc:	b662      	cpsie	i
 80185de:	617b      	str	r3, [r7, #20]
}
 80185e0:	bf00      	nop
 80185e2:	e7fe      	b.n	80185e2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80185e4:	687b      	ldr	r3, [r7, #4]
 80185e6:	2b00      	cmp	r3, #0
 80185e8:	d06b      	beq.n	80186c2 <pvPortMalloc+0x14e>
 80185ea:	4b44      	ldr	r3, [pc, #272]	; (80186fc <pvPortMalloc+0x188>)
 80185ec:	681b      	ldr	r3, [r3, #0]
 80185ee:	687a      	ldr	r2, [r7, #4]
 80185f0:	429a      	cmp	r2, r3
 80185f2:	d866      	bhi.n	80186c2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80185f4:	4b42      	ldr	r3, [pc, #264]	; (8018700 <pvPortMalloc+0x18c>)
 80185f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80185f8:	4b41      	ldr	r3, [pc, #260]	; (8018700 <pvPortMalloc+0x18c>)
 80185fa:	681b      	ldr	r3, [r3, #0]
 80185fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80185fe:	e004      	b.n	801860a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8018600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018602:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8018604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018606:	681b      	ldr	r3, [r3, #0]
 8018608:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801860a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801860c:	685b      	ldr	r3, [r3, #4]
 801860e:	687a      	ldr	r2, [r7, #4]
 8018610:	429a      	cmp	r2, r3
 8018612:	d903      	bls.n	801861c <pvPortMalloc+0xa8>
 8018614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018616:	681b      	ldr	r3, [r3, #0]
 8018618:	2b00      	cmp	r3, #0
 801861a:	d1f1      	bne.n	8018600 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801861c:	4b35      	ldr	r3, [pc, #212]	; (80186f4 <pvPortMalloc+0x180>)
 801861e:	681b      	ldr	r3, [r3, #0]
 8018620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018622:	429a      	cmp	r2, r3
 8018624:	d04d      	beq.n	80186c2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8018626:	6a3b      	ldr	r3, [r7, #32]
 8018628:	681b      	ldr	r3, [r3, #0]
 801862a:	2208      	movs	r2, #8
 801862c:	4413      	add	r3, r2
 801862e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8018630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018632:	681a      	ldr	r2, [r3, #0]
 8018634:	6a3b      	ldr	r3, [r7, #32]
 8018636:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8018638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801863a:	685a      	ldr	r2, [r3, #4]
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	1ad2      	subs	r2, r2, r3
 8018640:	2308      	movs	r3, #8
 8018642:	005b      	lsls	r3, r3, #1
 8018644:	429a      	cmp	r2, r3
 8018646:	d921      	bls.n	801868c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8018648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801864a:	687b      	ldr	r3, [r7, #4]
 801864c:	4413      	add	r3, r2
 801864e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018650:	69bb      	ldr	r3, [r7, #24]
 8018652:	f003 0307 	and.w	r3, r3, #7
 8018656:	2b00      	cmp	r3, #0
 8018658:	d00c      	beq.n	8018674 <pvPortMalloc+0x100>
	__asm volatile
 801865a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801865e:	b672      	cpsid	i
 8018660:	f383 8811 	msr	BASEPRI, r3
 8018664:	f3bf 8f6f 	isb	sy
 8018668:	f3bf 8f4f 	dsb	sy
 801866c:	b662      	cpsie	i
 801866e:	613b      	str	r3, [r7, #16]
}
 8018670:	bf00      	nop
 8018672:	e7fe      	b.n	8018672 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8018674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018676:	685a      	ldr	r2, [r3, #4]
 8018678:	687b      	ldr	r3, [r7, #4]
 801867a:	1ad2      	subs	r2, r2, r3
 801867c:	69bb      	ldr	r3, [r7, #24]
 801867e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8018680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018682:	687a      	ldr	r2, [r7, #4]
 8018684:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8018686:	69b8      	ldr	r0, [r7, #24]
 8018688:	f000 f900 	bl	801888c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801868c:	4b1b      	ldr	r3, [pc, #108]	; (80186fc <pvPortMalloc+0x188>)
 801868e:	681a      	ldr	r2, [r3, #0]
 8018690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018692:	685b      	ldr	r3, [r3, #4]
 8018694:	1ad3      	subs	r3, r2, r3
 8018696:	4a19      	ldr	r2, [pc, #100]	; (80186fc <pvPortMalloc+0x188>)
 8018698:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801869a:	4b18      	ldr	r3, [pc, #96]	; (80186fc <pvPortMalloc+0x188>)
 801869c:	681a      	ldr	r2, [r3, #0]
 801869e:	4b19      	ldr	r3, [pc, #100]	; (8018704 <pvPortMalloc+0x190>)
 80186a0:	681b      	ldr	r3, [r3, #0]
 80186a2:	429a      	cmp	r2, r3
 80186a4:	d203      	bcs.n	80186ae <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80186a6:	4b15      	ldr	r3, [pc, #84]	; (80186fc <pvPortMalloc+0x188>)
 80186a8:	681b      	ldr	r3, [r3, #0]
 80186aa:	4a16      	ldr	r2, [pc, #88]	; (8018704 <pvPortMalloc+0x190>)
 80186ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80186ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186b0:	685a      	ldr	r2, [r3, #4]
 80186b2:	4b11      	ldr	r3, [pc, #68]	; (80186f8 <pvPortMalloc+0x184>)
 80186b4:	681b      	ldr	r3, [r3, #0]
 80186b6:	431a      	orrs	r2, r3
 80186b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80186bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186be:	2200      	movs	r2, #0
 80186c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80186c2:	f7fe fb1f 	bl	8016d04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80186c6:	69fb      	ldr	r3, [r7, #28]
 80186c8:	f003 0307 	and.w	r3, r3, #7
 80186cc:	2b00      	cmp	r3, #0
 80186ce:	d00c      	beq.n	80186ea <pvPortMalloc+0x176>
	__asm volatile
 80186d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186d4:	b672      	cpsid	i
 80186d6:	f383 8811 	msr	BASEPRI, r3
 80186da:	f3bf 8f6f 	isb	sy
 80186de:	f3bf 8f4f 	dsb	sy
 80186e2:	b662      	cpsie	i
 80186e4:	60fb      	str	r3, [r7, #12]
}
 80186e6:	bf00      	nop
 80186e8:	e7fe      	b.n	80186e8 <pvPortMalloc+0x174>
	return pvReturn;
 80186ea:	69fb      	ldr	r3, [r7, #28]
}
 80186ec:	4618      	mov	r0, r3
 80186ee:	3728      	adds	r7, #40	; 0x28
 80186f0:	46bd      	mov	sp, r7
 80186f2:	bd80      	pop	{r7, pc}
 80186f4:	2006ccf0 	.word	0x2006ccf0
 80186f8:	2006ccfc 	.word	0x2006ccfc
 80186fc:	2006ccf4 	.word	0x2006ccf4
 8018700:	2006cce8 	.word	0x2006cce8
 8018704:	2006ccf8 	.word	0x2006ccf8

08018708 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8018708:	b580      	push	{r7, lr}
 801870a:	b086      	sub	sp, #24
 801870c:	af00      	add	r7, sp, #0
 801870e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8018710:	687b      	ldr	r3, [r7, #4]
 8018712:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8018714:	687b      	ldr	r3, [r7, #4]
 8018716:	2b00      	cmp	r3, #0
 8018718:	d04c      	beq.n	80187b4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801871a:	2308      	movs	r3, #8
 801871c:	425b      	negs	r3, r3
 801871e:	697a      	ldr	r2, [r7, #20]
 8018720:	4413      	add	r3, r2
 8018722:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8018724:	697b      	ldr	r3, [r7, #20]
 8018726:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8018728:	693b      	ldr	r3, [r7, #16]
 801872a:	685a      	ldr	r2, [r3, #4]
 801872c:	4b23      	ldr	r3, [pc, #140]	; (80187bc <vPortFree+0xb4>)
 801872e:	681b      	ldr	r3, [r3, #0]
 8018730:	4013      	ands	r3, r2
 8018732:	2b00      	cmp	r3, #0
 8018734:	d10c      	bne.n	8018750 <vPortFree+0x48>
	__asm volatile
 8018736:	f04f 0350 	mov.w	r3, #80	; 0x50
 801873a:	b672      	cpsid	i
 801873c:	f383 8811 	msr	BASEPRI, r3
 8018740:	f3bf 8f6f 	isb	sy
 8018744:	f3bf 8f4f 	dsb	sy
 8018748:	b662      	cpsie	i
 801874a:	60fb      	str	r3, [r7, #12]
}
 801874c:	bf00      	nop
 801874e:	e7fe      	b.n	801874e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8018750:	693b      	ldr	r3, [r7, #16]
 8018752:	681b      	ldr	r3, [r3, #0]
 8018754:	2b00      	cmp	r3, #0
 8018756:	d00c      	beq.n	8018772 <vPortFree+0x6a>
	__asm volatile
 8018758:	f04f 0350 	mov.w	r3, #80	; 0x50
 801875c:	b672      	cpsid	i
 801875e:	f383 8811 	msr	BASEPRI, r3
 8018762:	f3bf 8f6f 	isb	sy
 8018766:	f3bf 8f4f 	dsb	sy
 801876a:	b662      	cpsie	i
 801876c:	60bb      	str	r3, [r7, #8]
}
 801876e:	bf00      	nop
 8018770:	e7fe      	b.n	8018770 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8018772:	693b      	ldr	r3, [r7, #16]
 8018774:	685a      	ldr	r2, [r3, #4]
 8018776:	4b11      	ldr	r3, [pc, #68]	; (80187bc <vPortFree+0xb4>)
 8018778:	681b      	ldr	r3, [r3, #0]
 801877a:	4013      	ands	r3, r2
 801877c:	2b00      	cmp	r3, #0
 801877e:	d019      	beq.n	80187b4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8018780:	693b      	ldr	r3, [r7, #16]
 8018782:	681b      	ldr	r3, [r3, #0]
 8018784:	2b00      	cmp	r3, #0
 8018786:	d115      	bne.n	80187b4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8018788:	693b      	ldr	r3, [r7, #16]
 801878a:	685a      	ldr	r2, [r3, #4]
 801878c:	4b0b      	ldr	r3, [pc, #44]	; (80187bc <vPortFree+0xb4>)
 801878e:	681b      	ldr	r3, [r3, #0]
 8018790:	43db      	mvns	r3, r3
 8018792:	401a      	ands	r2, r3
 8018794:	693b      	ldr	r3, [r7, #16]
 8018796:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8018798:	f7fe faa6 	bl	8016ce8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801879c:	693b      	ldr	r3, [r7, #16]
 801879e:	685a      	ldr	r2, [r3, #4]
 80187a0:	4b07      	ldr	r3, [pc, #28]	; (80187c0 <vPortFree+0xb8>)
 80187a2:	681b      	ldr	r3, [r3, #0]
 80187a4:	4413      	add	r3, r2
 80187a6:	4a06      	ldr	r2, [pc, #24]	; (80187c0 <vPortFree+0xb8>)
 80187a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80187aa:	6938      	ldr	r0, [r7, #16]
 80187ac:	f000 f86e 	bl	801888c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80187b0:	f7fe faa8 	bl	8016d04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80187b4:	bf00      	nop
 80187b6:	3718      	adds	r7, #24
 80187b8:	46bd      	mov	sp, r7
 80187ba:	bd80      	pop	{r7, pc}
 80187bc:	2006ccfc 	.word	0x2006ccfc
 80187c0:	2006ccf4 	.word	0x2006ccf4

080187c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80187c4:	b480      	push	{r7}
 80187c6:	b085      	sub	sp, #20
 80187c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80187ca:	4b29      	ldr	r3, [pc, #164]	; (8018870 <prvHeapInit+0xac>)
 80187cc:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80187ce:	4b29      	ldr	r3, [pc, #164]	; (8018874 <prvHeapInit+0xb0>)
 80187d0:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80187d2:	68fb      	ldr	r3, [r7, #12]
 80187d4:	f003 0307 	and.w	r3, r3, #7
 80187d8:	2b00      	cmp	r3, #0
 80187da:	d00c      	beq.n	80187f6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80187dc:	68fb      	ldr	r3, [r7, #12]
 80187de:	3307      	adds	r3, #7
 80187e0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80187e2:	68fb      	ldr	r3, [r7, #12]
 80187e4:	f023 0307 	bic.w	r3, r3, #7
 80187e8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80187ea:	68ba      	ldr	r2, [r7, #8]
 80187ec:	68fb      	ldr	r3, [r7, #12]
 80187ee:	1ad3      	subs	r3, r2, r3
 80187f0:	4a20      	ldr	r2, [pc, #128]	; (8018874 <prvHeapInit+0xb0>)
 80187f2:	4413      	add	r3, r2
 80187f4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80187f6:	68fb      	ldr	r3, [r7, #12]
 80187f8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80187fa:	4a1f      	ldr	r2, [pc, #124]	; (8018878 <prvHeapInit+0xb4>)
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8018800:	4b1d      	ldr	r3, [pc, #116]	; (8018878 <prvHeapInit+0xb4>)
 8018802:	2200      	movs	r2, #0
 8018804:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8018806:	687b      	ldr	r3, [r7, #4]
 8018808:	68ba      	ldr	r2, [r7, #8]
 801880a:	4413      	add	r3, r2
 801880c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801880e:	2208      	movs	r2, #8
 8018810:	68fb      	ldr	r3, [r7, #12]
 8018812:	1a9b      	subs	r3, r3, r2
 8018814:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018816:	68fb      	ldr	r3, [r7, #12]
 8018818:	f023 0307 	bic.w	r3, r3, #7
 801881c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801881e:	68fb      	ldr	r3, [r7, #12]
 8018820:	4a16      	ldr	r2, [pc, #88]	; (801887c <prvHeapInit+0xb8>)
 8018822:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8018824:	4b15      	ldr	r3, [pc, #84]	; (801887c <prvHeapInit+0xb8>)
 8018826:	681b      	ldr	r3, [r3, #0]
 8018828:	2200      	movs	r2, #0
 801882a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801882c:	4b13      	ldr	r3, [pc, #76]	; (801887c <prvHeapInit+0xb8>)
 801882e:	681b      	ldr	r3, [r3, #0]
 8018830:	2200      	movs	r2, #0
 8018832:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8018834:	687b      	ldr	r3, [r7, #4]
 8018836:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8018838:	683b      	ldr	r3, [r7, #0]
 801883a:	68fa      	ldr	r2, [r7, #12]
 801883c:	1ad2      	subs	r2, r2, r3
 801883e:	683b      	ldr	r3, [r7, #0]
 8018840:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8018842:	4b0e      	ldr	r3, [pc, #56]	; (801887c <prvHeapInit+0xb8>)
 8018844:	681a      	ldr	r2, [r3, #0]
 8018846:	683b      	ldr	r3, [r7, #0]
 8018848:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801884a:	683b      	ldr	r3, [r7, #0]
 801884c:	685b      	ldr	r3, [r3, #4]
 801884e:	4a0c      	ldr	r2, [pc, #48]	; (8018880 <prvHeapInit+0xbc>)
 8018850:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018852:	683b      	ldr	r3, [r7, #0]
 8018854:	685b      	ldr	r3, [r3, #4]
 8018856:	4a0b      	ldr	r2, [pc, #44]	; (8018884 <prvHeapInit+0xc0>)
 8018858:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801885a:	4b0b      	ldr	r3, [pc, #44]	; (8018888 <prvHeapInit+0xc4>)
 801885c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8018860:	601a      	str	r2, [r3, #0]
}
 8018862:	bf00      	nop
 8018864:	3714      	adds	r7, #20
 8018866:	46bd      	mov	sp, r7
 8018868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801886c:	4770      	bx	lr
 801886e:	bf00      	nop
 8018870:	00055730 	.word	0x00055730
 8018874:	200175b8 	.word	0x200175b8
 8018878:	2006cce8 	.word	0x2006cce8
 801887c:	2006ccf0 	.word	0x2006ccf0
 8018880:	2006ccf8 	.word	0x2006ccf8
 8018884:	2006ccf4 	.word	0x2006ccf4
 8018888:	2006ccfc 	.word	0x2006ccfc

0801888c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801888c:	b480      	push	{r7}
 801888e:	b085      	sub	sp, #20
 8018890:	af00      	add	r7, sp, #0
 8018892:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8018894:	4b28      	ldr	r3, [pc, #160]	; (8018938 <prvInsertBlockIntoFreeList+0xac>)
 8018896:	60fb      	str	r3, [r7, #12]
 8018898:	e002      	b.n	80188a0 <prvInsertBlockIntoFreeList+0x14>
 801889a:	68fb      	ldr	r3, [r7, #12]
 801889c:	681b      	ldr	r3, [r3, #0]
 801889e:	60fb      	str	r3, [r7, #12]
 80188a0:	68fb      	ldr	r3, [r7, #12]
 80188a2:	681b      	ldr	r3, [r3, #0]
 80188a4:	687a      	ldr	r2, [r7, #4]
 80188a6:	429a      	cmp	r2, r3
 80188a8:	d8f7      	bhi.n	801889a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80188aa:	68fb      	ldr	r3, [r7, #12]
 80188ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80188ae:	68fb      	ldr	r3, [r7, #12]
 80188b0:	685b      	ldr	r3, [r3, #4]
 80188b2:	68ba      	ldr	r2, [r7, #8]
 80188b4:	4413      	add	r3, r2
 80188b6:	687a      	ldr	r2, [r7, #4]
 80188b8:	429a      	cmp	r2, r3
 80188ba:	d108      	bne.n	80188ce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80188bc:	68fb      	ldr	r3, [r7, #12]
 80188be:	685a      	ldr	r2, [r3, #4]
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	685b      	ldr	r3, [r3, #4]
 80188c4:	441a      	add	r2, r3
 80188c6:	68fb      	ldr	r3, [r7, #12]
 80188c8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80188ca:	68fb      	ldr	r3, [r7, #12]
 80188cc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80188ce:	687b      	ldr	r3, [r7, #4]
 80188d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	685b      	ldr	r3, [r3, #4]
 80188d6:	68ba      	ldr	r2, [r7, #8]
 80188d8:	441a      	add	r2, r3
 80188da:	68fb      	ldr	r3, [r7, #12]
 80188dc:	681b      	ldr	r3, [r3, #0]
 80188de:	429a      	cmp	r2, r3
 80188e0:	d118      	bne.n	8018914 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80188e2:	68fb      	ldr	r3, [r7, #12]
 80188e4:	681a      	ldr	r2, [r3, #0]
 80188e6:	4b15      	ldr	r3, [pc, #84]	; (801893c <prvInsertBlockIntoFreeList+0xb0>)
 80188e8:	681b      	ldr	r3, [r3, #0]
 80188ea:	429a      	cmp	r2, r3
 80188ec:	d00d      	beq.n	801890a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80188ee:	687b      	ldr	r3, [r7, #4]
 80188f0:	685a      	ldr	r2, [r3, #4]
 80188f2:	68fb      	ldr	r3, [r7, #12]
 80188f4:	681b      	ldr	r3, [r3, #0]
 80188f6:	685b      	ldr	r3, [r3, #4]
 80188f8:	441a      	add	r2, r3
 80188fa:	687b      	ldr	r3, [r7, #4]
 80188fc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80188fe:	68fb      	ldr	r3, [r7, #12]
 8018900:	681b      	ldr	r3, [r3, #0]
 8018902:	681a      	ldr	r2, [r3, #0]
 8018904:	687b      	ldr	r3, [r7, #4]
 8018906:	601a      	str	r2, [r3, #0]
 8018908:	e008      	b.n	801891c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801890a:	4b0c      	ldr	r3, [pc, #48]	; (801893c <prvInsertBlockIntoFreeList+0xb0>)
 801890c:	681a      	ldr	r2, [r3, #0]
 801890e:	687b      	ldr	r3, [r7, #4]
 8018910:	601a      	str	r2, [r3, #0]
 8018912:	e003      	b.n	801891c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8018914:	68fb      	ldr	r3, [r7, #12]
 8018916:	681a      	ldr	r2, [r3, #0]
 8018918:	687b      	ldr	r3, [r7, #4]
 801891a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801891c:	68fa      	ldr	r2, [r7, #12]
 801891e:	687b      	ldr	r3, [r7, #4]
 8018920:	429a      	cmp	r2, r3
 8018922:	d002      	beq.n	801892a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8018924:	68fb      	ldr	r3, [r7, #12]
 8018926:	687a      	ldr	r2, [r7, #4]
 8018928:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801892a:	bf00      	nop
 801892c:	3714      	adds	r7, #20
 801892e:	46bd      	mov	sp, r7
 8018930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018934:	4770      	bx	lr
 8018936:	bf00      	nop
 8018938:	2006cce8 	.word	0x2006cce8
 801893c:	2006ccf0 	.word	0x2006ccf0

08018940 <__errno>:
 8018940:	4b01      	ldr	r3, [pc, #4]	; (8018948 <__errno+0x8>)
 8018942:	6818      	ldr	r0, [r3, #0]
 8018944:	4770      	bx	lr
 8018946:	bf00      	nop
 8018948:	20000028 	.word	0x20000028

0801894c <__libc_init_array>:
 801894c:	b570      	push	{r4, r5, r6, lr}
 801894e:	4d0d      	ldr	r5, [pc, #52]	; (8018984 <__libc_init_array+0x38>)
 8018950:	4c0d      	ldr	r4, [pc, #52]	; (8018988 <__libc_init_array+0x3c>)
 8018952:	1b64      	subs	r4, r4, r5
 8018954:	10a4      	asrs	r4, r4, #2
 8018956:	2600      	movs	r6, #0
 8018958:	42a6      	cmp	r6, r4
 801895a:	d109      	bne.n	8018970 <__libc_init_array+0x24>
 801895c:	4d0b      	ldr	r5, [pc, #44]	; (801898c <__libc_init_array+0x40>)
 801895e:	4c0c      	ldr	r4, [pc, #48]	; (8018990 <__libc_init_array+0x44>)
 8018960:	f004 feda 	bl	801d718 <_init>
 8018964:	1b64      	subs	r4, r4, r5
 8018966:	10a4      	asrs	r4, r4, #2
 8018968:	2600      	movs	r6, #0
 801896a:	42a6      	cmp	r6, r4
 801896c:	d105      	bne.n	801897a <__libc_init_array+0x2e>
 801896e:	bd70      	pop	{r4, r5, r6, pc}
 8018970:	f855 3b04 	ldr.w	r3, [r5], #4
 8018974:	4798      	blx	r3
 8018976:	3601      	adds	r6, #1
 8018978:	e7ee      	b.n	8018958 <__libc_init_array+0xc>
 801897a:	f855 3b04 	ldr.w	r3, [r5], #4
 801897e:	4798      	blx	r3
 8018980:	3601      	adds	r6, #1
 8018982:	e7f2      	b.n	801896a <__libc_init_array+0x1e>
 8018984:	0802d580 	.word	0x0802d580
 8018988:	0802d580 	.word	0x0802d580
 801898c:	0802d580 	.word	0x0802d580
 8018990:	0802d584 	.word	0x0802d584

08018994 <memcpy>:
 8018994:	440a      	add	r2, r1
 8018996:	4291      	cmp	r1, r2
 8018998:	f100 33ff 	add.w	r3, r0, #4294967295
 801899c:	d100      	bne.n	80189a0 <memcpy+0xc>
 801899e:	4770      	bx	lr
 80189a0:	b510      	push	{r4, lr}
 80189a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80189a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80189aa:	4291      	cmp	r1, r2
 80189ac:	d1f9      	bne.n	80189a2 <memcpy+0xe>
 80189ae:	bd10      	pop	{r4, pc}

080189b0 <memset>:
 80189b0:	4402      	add	r2, r0
 80189b2:	4603      	mov	r3, r0
 80189b4:	4293      	cmp	r3, r2
 80189b6:	d100      	bne.n	80189ba <memset+0xa>
 80189b8:	4770      	bx	lr
 80189ba:	f803 1b01 	strb.w	r1, [r3], #1
 80189be:	e7f9      	b.n	80189b4 <memset+0x4>

080189c0 <__cvt>:
 80189c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80189c2:	ed2d 8b02 	vpush	{d8}
 80189c6:	eeb0 8b40 	vmov.f64	d8, d0
 80189ca:	b085      	sub	sp, #20
 80189cc:	4617      	mov	r7, r2
 80189ce:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80189d0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80189d2:	ee18 2a90 	vmov	r2, s17
 80189d6:	f025 0520 	bic.w	r5, r5, #32
 80189da:	2a00      	cmp	r2, #0
 80189dc:	bfb6      	itet	lt
 80189de:	222d      	movlt	r2, #45	; 0x2d
 80189e0:	2200      	movge	r2, #0
 80189e2:	eeb1 8b40 	vneglt.f64	d8, d0
 80189e6:	2d46      	cmp	r5, #70	; 0x46
 80189e8:	460c      	mov	r4, r1
 80189ea:	701a      	strb	r2, [r3, #0]
 80189ec:	d004      	beq.n	80189f8 <__cvt+0x38>
 80189ee:	2d45      	cmp	r5, #69	; 0x45
 80189f0:	d100      	bne.n	80189f4 <__cvt+0x34>
 80189f2:	3401      	adds	r4, #1
 80189f4:	2102      	movs	r1, #2
 80189f6:	e000      	b.n	80189fa <__cvt+0x3a>
 80189f8:	2103      	movs	r1, #3
 80189fa:	ab03      	add	r3, sp, #12
 80189fc:	9301      	str	r3, [sp, #4]
 80189fe:	ab02      	add	r3, sp, #8
 8018a00:	9300      	str	r3, [sp, #0]
 8018a02:	4622      	mov	r2, r4
 8018a04:	4633      	mov	r3, r6
 8018a06:	eeb0 0b48 	vmov.f64	d0, d8
 8018a0a:	f001 fd59 	bl	801a4c0 <_dtoa_r>
 8018a0e:	2d47      	cmp	r5, #71	; 0x47
 8018a10:	d101      	bne.n	8018a16 <__cvt+0x56>
 8018a12:	07fb      	lsls	r3, r7, #31
 8018a14:	d51a      	bpl.n	8018a4c <__cvt+0x8c>
 8018a16:	2d46      	cmp	r5, #70	; 0x46
 8018a18:	eb00 0204 	add.w	r2, r0, r4
 8018a1c:	d10c      	bne.n	8018a38 <__cvt+0x78>
 8018a1e:	7803      	ldrb	r3, [r0, #0]
 8018a20:	2b30      	cmp	r3, #48	; 0x30
 8018a22:	d107      	bne.n	8018a34 <__cvt+0x74>
 8018a24:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8018a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a2c:	bf1c      	itt	ne
 8018a2e:	f1c4 0401 	rsbne	r4, r4, #1
 8018a32:	6034      	strne	r4, [r6, #0]
 8018a34:	6833      	ldr	r3, [r6, #0]
 8018a36:	441a      	add	r2, r3
 8018a38:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8018a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a40:	bf08      	it	eq
 8018a42:	9203      	streq	r2, [sp, #12]
 8018a44:	2130      	movs	r1, #48	; 0x30
 8018a46:	9b03      	ldr	r3, [sp, #12]
 8018a48:	4293      	cmp	r3, r2
 8018a4a:	d307      	bcc.n	8018a5c <__cvt+0x9c>
 8018a4c:	9b03      	ldr	r3, [sp, #12]
 8018a4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018a50:	1a1b      	subs	r3, r3, r0
 8018a52:	6013      	str	r3, [r2, #0]
 8018a54:	b005      	add	sp, #20
 8018a56:	ecbd 8b02 	vpop	{d8}
 8018a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018a5c:	1c5c      	adds	r4, r3, #1
 8018a5e:	9403      	str	r4, [sp, #12]
 8018a60:	7019      	strb	r1, [r3, #0]
 8018a62:	e7f0      	b.n	8018a46 <__cvt+0x86>

08018a64 <__exponent>:
 8018a64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018a66:	4603      	mov	r3, r0
 8018a68:	2900      	cmp	r1, #0
 8018a6a:	bfb8      	it	lt
 8018a6c:	4249      	neglt	r1, r1
 8018a6e:	f803 2b02 	strb.w	r2, [r3], #2
 8018a72:	bfb4      	ite	lt
 8018a74:	222d      	movlt	r2, #45	; 0x2d
 8018a76:	222b      	movge	r2, #43	; 0x2b
 8018a78:	2909      	cmp	r1, #9
 8018a7a:	7042      	strb	r2, [r0, #1]
 8018a7c:	dd2a      	ble.n	8018ad4 <__exponent+0x70>
 8018a7e:	f10d 0407 	add.w	r4, sp, #7
 8018a82:	46a4      	mov	ip, r4
 8018a84:	270a      	movs	r7, #10
 8018a86:	46a6      	mov	lr, r4
 8018a88:	460a      	mov	r2, r1
 8018a8a:	fb91 f6f7 	sdiv	r6, r1, r7
 8018a8e:	fb07 1516 	mls	r5, r7, r6, r1
 8018a92:	3530      	adds	r5, #48	; 0x30
 8018a94:	2a63      	cmp	r2, #99	; 0x63
 8018a96:	f104 34ff 	add.w	r4, r4, #4294967295
 8018a9a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8018a9e:	4631      	mov	r1, r6
 8018aa0:	dcf1      	bgt.n	8018a86 <__exponent+0x22>
 8018aa2:	3130      	adds	r1, #48	; 0x30
 8018aa4:	f1ae 0502 	sub.w	r5, lr, #2
 8018aa8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8018aac:	1c44      	adds	r4, r0, #1
 8018aae:	4629      	mov	r1, r5
 8018ab0:	4561      	cmp	r1, ip
 8018ab2:	d30a      	bcc.n	8018aca <__exponent+0x66>
 8018ab4:	f10d 0209 	add.w	r2, sp, #9
 8018ab8:	eba2 020e 	sub.w	r2, r2, lr
 8018abc:	4565      	cmp	r5, ip
 8018abe:	bf88      	it	hi
 8018ac0:	2200      	movhi	r2, #0
 8018ac2:	4413      	add	r3, r2
 8018ac4:	1a18      	subs	r0, r3, r0
 8018ac6:	b003      	add	sp, #12
 8018ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018aca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018ace:	f804 2f01 	strb.w	r2, [r4, #1]!
 8018ad2:	e7ed      	b.n	8018ab0 <__exponent+0x4c>
 8018ad4:	2330      	movs	r3, #48	; 0x30
 8018ad6:	3130      	adds	r1, #48	; 0x30
 8018ad8:	7083      	strb	r3, [r0, #2]
 8018ada:	70c1      	strb	r1, [r0, #3]
 8018adc:	1d03      	adds	r3, r0, #4
 8018ade:	e7f1      	b.n	8018ac4 <__exponent+0x60>

08018ae0 <_printf_float>:
 8018ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ae4:	b08b      	sub	sp, #44	; 0x2c
 8018ae6:	460c      	mov	r4, r1
 8018ae8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8018aec:	4616      	mov	r6, r2
 8018aee:	461f      	mov	r7, r3
 8018af0:	4605      	mov	r5, r0
 8018af2:	f002 fdc3 	bl	801b67c <_localeconv_r>
 8018af6:	f8d0 b000 	ldr.w	fp, [r0]
 8018afa:	4658      	mov	r0, fp
 8018afc:	f7ef fc00 	bl	8008300 <strlen>
 8018b00:	2300      	movs	r3, #0
 8018b02:	9308      	str	r3, [sp, #32]
 8018b04:	f8d8 3000 	ldr.w	r3, [r8]
 8018b08:	f894 9018 	ldrb.w	r9, [r4, #24]
 8018b0c:	6822      	ldr	r2, [r4, #0]
 8018b0e:	3307      	adds	r3, #7
 8018b10:	f023 0307 	bic.w	r3, r3, #7
 8018b14:	f103 0108 	add.w	r1, r3, #8
 8018b18:	f8c8 1000 	str.w	r1, [r8]
 8018b1c:	4682      	mov	sl, r0
 8018b1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018b22:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8018b26:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8018d88 <_printf_float+0x2a8>
 8018b2a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8018b2e:	eeb0 6bc0 	vabs.f64	d6, d0
 8018b32:	eeb4 6b47 	vcmp.f64	d6, d7
 8018b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b3a:	dd24      	ble.n	8018b86 <_printf_float+0xa6>
 8018b3c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8018b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b44:	d502      	bpl.n	8018b4c <_printf_float+0x6c>
 8018b46:	232d      	movs	r3, #45	; 0x2d
 8018b48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018b4c:	4b90      	ldr	r3, [pc, #576]	; (8018d90 <_printf_float+0x2b0>)
 8018b4e:	4891      	ldr	r0, [pc, #580]	; (8018d94 <_printf_float+0x2b4>)
 8018b50:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8018b54:	bf94      	ite	ls
 8018b56:	4698      	movls	r8, r3
 8018b58:	4680      	movhi	r8, r0
 8018b5a:	2303      	movs	r3, #3
 8018b5c:	6123      	str	r3, [r4, #16]
 8018b5e:	f022 0204 	bic.w	r2, r2, #4
 8018b62:	2300      	movs	r3, #0
 8018b64:	6022      	str	r2, [r4, #0]
 8018b66:	9304      	str	r3, [sp, #16]
 8018b68:	9700      	str	r7, [sp, #0]
 8018b6a:	4633      	mov	r3, r6
 8018b6c:	aa09      	add	r2, sp, #36	; 0x24
 8018b6e:	4621      	mov	r1, r4
 8018b70:	4628      	mov	r0, r5
 8018b72:	f000 f9d3 	bl	8018f1c <_printf_common>
 8018b76:	3001      	adds	r0, #1
 8018b78:	f040 808a 	bne.w	8018c90 <_printf_float+0x1b0>
 8018b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8018b80:	b00b      	add	sp, #44	; 0x2c
 8018b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b86:	eeb4 0b40 	vcmp.f64	d0, d0
 8018b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b8e:	d709      	bvc.n	8018ba4 <_printf_float+0xc4>
 8018b90:	ee10 3a90 	vmov	r3, s1
 8018b94:	2b00      	cmp	r3, #0
 8018b96:	bfbc      	itt	lt
 8018b98:	232d      	movlt	r3, #45	; 0x2d
 8018b9a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8018b9e:	487e      	ldr	r0, [pc, #504]	; (8018d98 <_printf_float+0x2b8>)
 8018ba0:	4b7e      	ldr	r3, [pc, #504]	; (8018d9c <_printf_float+0x2bc>)
 8018ba2:	e7d5      	b.n	8018b50 <_printf_float+0x70>
 8018ba4:	6863      	ldr	r3, [r4, #4]
 8018ba6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8018baa:	9104      	str	r1, [sp, #16]
 8018bac:	1c59      	adds	r1, r3, #1
 8018bae:	d13c      	bne.n	8018c2a <_printf_float+0x14a>
 8018bb0:	2306      	movs	r3, #6
 8018bb2:	6063      	str	r3, [r4, #4]
 8018bb4:	2300      	movs	r3, #0
 8018bb6:	9303      	str	r3, [sp, #12]
 8018bb8:	ab08      	add	r3, sp, #32
 8018bba:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8018bbe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018bc2:	ab07      	add	r3, sp, #28
 8018bc4:	6861      	ldr	r1, [r4, #4]
 8018bc6:	9300      	str	r3, [sp, #0]
 8018bc8:	6022      	str	r2, [r4, #0]
 8018bca:	f10d 031b 	add.w	r3, sp, #27
 8018bce:	4628      	mov	r0, r5
 8018bd0:	f7ff fef6 	bl	80189c0 <__cvt>
 8018bd4:	9b04      	ldr	r3, [sp, #16]
 8018bd6:	9907      	ldr	r1, [sp, #28]
 8018bd8:	2b47      	cmp	r3, #71	; 0x47
 8018bda:	4680      	mov	r8, r0
 8018bdc:	d108      	bne.n	8018bf0 <_printf_float+0x110>
 8018bde:	1cc8      	adds	r0, r1, #3
 8018be0:	db02      	blt.n	8018be8 <_printf_float+0x108>
 8018be2:	6863      	ldr	r3, [r4, #4]
 8018be4:	4299      	cmp	r1, r3
 8018be6:	dd41      	ble.n	8018c6c <_printf_float+0x18c>
 8018be8:	f1a9 0902 	sub.w	r9, r9, #2
 8018bec:	fa5f f989 	uxtb.w	r9, r9
 8018bf0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8018bf4:	d820      	bhi.n	8018c38 <_printf_float+0x158>
 8018bf6:	3901      	subs	r1, #1
 8018bf8:	464a      	mov	r2, r9
 8018bfa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8018bfe:	9107      	str	r1, [sp, #28]
 8018c00:	f7ff ff30 	bl	8018a64 <__exponent>
 8018c04:	9a08      	ldr	r2, [sp, #32]
 8018c06:	9004      	str	r0, [sp, #16]
 8018c08:	1813      	adds	r3, r2, r0
 8018c0a:	2a01      	cmp	r2, #1
 8018c0c:	6123      	str	r3, [r4, #16]
 8018c0e:	dc02      	bgt.n	8018c16 <_printf_float+0x136>
 8018c10:	6822      	ldr	r2, [r4, #0]
 8018c12:	07d2      	lsls	r2, r2, #31
 8018c14:	d501      	bpl.n	8018c1a <_printf_float+0x13a>
 8018c16:	3301      	adds	r3, #1
 8018c18:	6123      	str	r3, [r4, #16]
 8018c1a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8018c1e:	2b00      	cmp	r3, #0
 8018c20:	d0a2      	beq.n	8018b68 <_printf_float+0x88>
 8018c22:	232d      	movs	r3, #45	; 0x2d
 8018c24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018c28:	e79e      	b.n	8018b68 <_printf_float+0x88>
 8018c2a:	9904      	ldr	r1, [sp, #16]
 8018c2c:	2947      	cmp	r1, #71	; 0x47
 8018c2e:	d1c1      	bne.n	8018bb4 <_printf_float+0xd4>
 8018c30:	2b00      	cmp	r3, #0
 8018c32:	d1bf      	bne.n	8018bb4 <_printf_float+0xd4>
 8018c34:	2301      	movs	r3, #1
 8018c36:	e7bc      	b.n	8018bb2 <_printf_float+0xd2>
 8018c38:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8018c3c:	d118      	bne.n	8018c70 <_printf_float+0x190>
 8018c3e:	2900      	cmp	r1, #0
 8018c40:	6863      	ldr	r3, [r4, #4]
 8018c42:	dd0b      	ble.n	8018c5c <_printf_float+0x17c>
 8018c44:	6121      	str	r1, [r4, #16]
 8018c46:	b913      	cbnz	r3, 8018c4e <_printf_float+0x16e>
 8018c48:	6822      	ldr	r2, [r4, #0]
 8018c4a:	07d0      	lsls	r0, r2, #31
 8018c4c:	d502      	bpl.n	8018c54 <_printf_float+0x174>
 8018c4e:	3301      	adds	r3, #1
 8018c50:	440b      	add	r3, r1
 8018c52:	6123      	str	r3, [r4, #16]
 8018c54:	2300      	movs	r3, #0
 8018c56:	65a1      	str	r1, [r4, #88]	; 0x58
 8018c58:	9304      	str	r3, [sp, #16]
 8018c5a:	e7de      	b.n	8018c1a <_printf_float+0x13a>
 8018c5c:	b913      	cbnz	r3, 8018c64 <_printf_float+0x184>
 8018c5e:	6822      	ldr	r2, [r4, #0]
 8018c60:	07d2      	lsls	r2, r2, #31
 8018c62:	d501      	bpl.n	8018c68 <_printf_float+0x188>
 8018c64:	3302      	adds	r3, #2
 8018c66:	e7f4      	b.n	8018c52 <_printf_float+0x172>
 8018c68:	2301      	movs	r3, #1
 8018c6a:	e7f2      	b.n	8018c52 <_printf_float+0x172>
 8018c6c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8018c70:	9b08      	ldr	r3, [sp, #32]
 8018c72:	4299      	cmp	r1, r3
 8018c74:	db05      	blt.n	8018c82 <_printf_float+0x1a2>
 8018c76:	6823      	ldr	r3, [r4, #0]
 8018c78:	6121      	str	r1, [r4, #16]
 8018c7a:	07d8      	lsls	r0, r3, #31
 8018c7c:	d5ea      	bpl.n	8018c54 <_printf_float+0x174>
 8018c7e:	1c4b      	adds	r3, r1, #1
 8018c80:	e7e7      	b.n	8018c52 <_printf_float+0x172>
 8018c82:	2900      	cmp	r1, #0
 8018c84:	bfd4      	ite	le
 8018c86:	f1c1 0202 	rsble	r2, r1, #2
 8018c8a:	2201      	movgt	r2, #1
 8018c8c:	4413      	add	r3, r2
 8018c8e:	e7e0      	b.n	8018c52 <_printf_float+0x172>
 8018c90:	6823      	ldr	r3, [r4, #0]
 8018c92:	055a      	lsls	r2, r3, #21
 8018c94:	d407      	bmi.n	8018ca6 <_printf_float+0x1c6>
 8018c96:	6923      	ldr	r3, [r4, #16]
 8018c98:	4642      	mov	r2, r8
 8018c9a:	4631      	mov	r1, r6
 8018c9c:	4628      	mov	r0, r5
 8018c9e:	47b8      	blx	r7
 8018ca0:	3001      	adds	r0, #1
 8018ca2:	d12a      	bne.n	8018cfa <_printf_float+0x21a>
 8018ca4:	e76a      	b.n	8018b7c <_printf_float+0x9c>
 8018ca6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8018caa:	f240 80e2 	bls.w	8018e72 <_printf_float+0x392>
 8018cae:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8018cb2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cba:	d133      	bne.n	8018d24 <_printf_float+0x244>
 8018cbc:	4a38      	ldr	r2, [pc, #224]	; (8018da0 <_printf_float+0x2c0>)
 8018cbe:	2301      	movs	r3, #1
 8018cc0:	4631      	mov	r1, r6
 8018cc2:	4628      	mov	r0, r5
 8018cc4:	47b8      	blx	r7
 8018cc6:	3001      	adds	r0, #1
 8018cc8:	f43f af58 	beq.w	8018b7c <_printf_float+0x9c>
 8018ccc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8018cd0:	429a      	cmp	r2, r3
 8018cd2:	db02      	blt.n	8018cda <_printf_float+0x1fa>
 8018cd4:	6823      	ldr	r3, [r4, #0]
 8018cd6:	07d8      	lsls	r0, r3, #31
 8018cd8:	d50f      	bpl.n	8018cfa <_printf_float+0x21a>
 8018cda:	4653      	mov	r3, sl
 8018cdc:	465a      	mov	r2, fp
 8018cde:	4631      	mov	r1, r6
 8018ce0:	4628      	mov	r0, r5
 8018ce2:	47b8      	blx	r7
 8018ce4:	3001      	adds	r0, #1
 8018ce6:	f43f af49 	beq.w	8018b7c <_printf_float+0x9c>
 8018cea:	f04f 0800 	mov.w	r8, #0
 8018cee:	f104 091a 	add.w	r9, r4, #26
 8018cf2:	9b08      	ldr	r3, [sp, #32]
 8018cf4:	3b01      	subs	r3, #1
 8018cf6:	4543      	cmp	r3, r8
 8018cf8:	dc09      	bgt.n	8018d0e <_printf_float+0x22e>
 8018cfa:	6823      	ldr	r3, [r4, #0]
 8018cfc:	079b      	lsls	r3, r3, #30
 8018cfe:	f100 8108 	bmi.w	8018f12 <_printf_float+0x432>
 8018d02:	68e0      	ldr	r0, [r4, #12]
 8018d04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018d06:	4298      	cmp	r0, r3
 8018d08:	bfb8      	it	lt
 8018d0a:	4618      	movlt	r0, r3
 8018d0c:	e738      	b.n	8018b80 <_printf_float+0xa0>
 8018d0e:	2301      	movs	r3, #1
 8018d10:	464a      	mov	r2, r9
 8018d12:	4631      	mov	r1, r6
 8018d14:	4628      	mov	r0, r5
 8018d16:	47b8      	blx	r7
 8018d18:	3001      	adds	r0, #1
 8018d1a:	f43f af2f 	beq.w	8018b7c <_printf_float+0x9c>
 8018d1e:	f108 0801 	add.w	r8, r8, #1
 8018d22:	e7e6      	b.n	8018cf2 <_printf_float+0x212>
 8018d24:	9b07      	ldr	r3, [sp, #28]
 8018d26:	2b00      	cmp	r3, #0
 8018d28:	dc3c      	bgt.n	8018da4 <_printf_float+0x2c4>
 8018d2a:	4a1d      	ldr	r2, [pc, #116]	; (8018da0 <_printf_float+0x2c0>)
 8018d2c:	2301      	movs	r3, #1
 8018d2e:	4631      	mov	r1, r6
 8018d30:	4628      	mov	r0, r5
 8018d32:	47b8      	blx	r7
 8018d34:	3001      	adds	r0, #1
 8018d36:	f43f af21 	beq.w	8018b7c <_printf_float+0x9c>
 8018d3a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8018d3e:	4313      	orrs	r3, r2
 8018d40:	d102      	bne.n	8018d48 <_printf_float+0x268>
 8018d42:	6823      	ldr	r3, [r4, #0]
 8018d44:	07d9      	lsls	r1, r3, #31
 8018d46:	d5d8      	bpl.n	8018cfa <_printf_float+0x21a>
 8018d48:	4653      	mov	r3, sl
 8018d4a:	465a      	mov	r2, fp
 8018d4c:	4631      	mov	r1, r6
 8018d4e:	4628      	mov	r0, r5
 8018d50:	47b8      	blx	r7
 8018d52:	3001      	adds	r0, #1
 8018d54:	f43f af12 	beq.w	8018b7c <_printf_float+0x9c>
 8018d58:	f04f 0900 	mov.w	r9, #0
 8018d5c:	f104 0a1a 	add.w	sl, r4, #26
 8018d60:	9b07      	ldr	r3, [sp, #28]
 8018d62:	425b      	negs	r3, r3
 8018d64:	454b      	cmp	r3, r9
 8018d66:	dc01      	bgt.n	8018d6c <_printf_float+0x28c>
 8018d68:	9b08      	ldr	r3, [sp, #32]
 8018d6a:	e795      	b.n	8018c98 <_printf_float+0x1b8>
 8018d6c:	2301      	movs	r3, #1
 8018d6e:	4652      	mov	r2, sl
 8018d70:	4631      	mov	r1, r6
 8018d72:	4628      	mov	r0, r5
 8018d74:	47b8      	blx	r7
 8018d76:	3001      	adds	r0, #1
 8018d78:	f43f af00 	beq.w	8018b7c <_printf_float+0x9c>
 8018d7c:	f109 0901 	add.w	r9, r9, #1
 8018d80:	e7ee      	b.n	8018d60 <_printf_float+0x280>
 8018d82:	bf00      	nop
 8018d84:	f3af 8000 	nop.w
 8018d88:	ffffffff 	.word	0xffffffff
 8018d8c:	7fefffff 	.word	0x7fefffff
 8018d90:	0802b81c 	.word	0x0802b81c
 8018d94:	0802b820 	.word	0x0802b820
 8018d98:	0802b828 	.word	0x0802b828
 8018d9c:	0802b824 	.word	0x0802b824
 8018da0:	0802b82c 	.word	0x0802b82c
 8018da4:	9a08      	ldr	r2, [sp, #32]
 8018da6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8018da8:	429a      	cmp	r2, r3
 8018daa:	bfa8      	it	ge
 8018dac:	461a      	movge	r2, r3
 8018dae:	2a00      	cmp	r2, #0
 8018db0:	4691      	mov	r9, r2
 8018db2:	dc38      	bgt.n	8018e26 <_printf_float+0x346>
 8018db4:	2300      	movs	r3, #0
 8018db6:	9305      	str	r3, [sp, #20]
 8018db8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018dbc:	f104 021a 	add.w	r2, r4, #26
 8018dc0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8018dc2:	9905      	ldr	r1, [sp, #20]
 8018dc4:	9304      	str	r3, [sp, #16]
 8018dc6:	eba3 0309 	sub.w	r3, r3, r9
 8018dca:	428b      	cmp	r3, r1
 8018dcc:	dc33      	bgt.n	8018e36 <_printf_float+0x356>
 8018dce:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8018dd2:	429a      	cmp	r2, r3
 8018dd4:	db3c      	blt.n	8018e50 <_printf_float+0x370>
 8018dd6:	6823      	ldr	r3, [r4, #0]
 8018dd8:	07da      	lsls	r2, r3, #31
 8018dda:	d439      	bmi.n	8018e50 <_printf_float+0x370>
 8018ddc:	9b08      	ldr	r3, [sp, #32]
 8018dde:	9a04      	ldr	r2, [sp, #16]
 8018de0:	9907      	ldr	r1, [sp, #28]
 8018de2:	1a9a      	subs	r2, r3, r2
 8018de4:	eba3 0901 	sub.w	r9, r3, r1
 8018de8:	4591      	cmp	r9, r2
 8018dea:	bfa8      	it	ge
 8018dec:	4691      	movge	r9, r2
 8018dee:	f1b9 0f00 	cmp.w	r9, #0
 8018df2:	dc35      	bgt.n	8018e60 <_printf_float+0x380>
 8018df4:	f04f 0800 	mov.w	r8, #0
 8018df8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018dfc:	f104 0a1a 	add.w	sl, r4, #26
 8018e00:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8018e04:	1a9b      	subs	r3, r3, r2
 8018e06:	eba3 0309 	sub.w	r3, r3, r9
 8018e0a:	4543      	cmp	r3, r8
 8018e0c:	f77f af75 	ble.w	8018cfa <_printf_float+0x21a>
 8018e10:	2301      	movs	r3, #1
 8018e12:	4652      	mov	r2, sl
 8018e14:	4631      	mov	r1, r6
 8018e16:	4628      	mov	r0, r5
 8018e18:	47b8      	blx	r7
 8018e1a:	3001      	adds	r0, #1
 8018e1c:	f43f aeae 	beq.w	8018b7c <_printf_float+0x9c>
 8018e20:	f108 0801 	add.w	r8, r8, #1
 8018e24:	e7ec      	b.n	8018e00 <_printf_float+0x320>
 8018e26:	4613      	mov	r3, r2
 8018e28:	4631      	mov	r1, r6
 8018e2a:	4642      	mov	r2, r8
 8018e2c:	4628      	mov	r0, r5
 8018e2e:	47b8      	blx	r7
 8018e30:	3001      	adds	r0, #1
 8018e32:	d1bf      	bne.n	8018db4 <_printf_float+0x2d4>
 8018e34:	e6a2      	b.n	8018b7c <_printf_float+0x9c>
 8018e36:	2301      	movs	r3, #1
 8018e38:	4631      	mov	r1, r6
 8018e3a:	4628      	mov	r0, r5
 8018e3c:	9204      	str	r2, [sp, #16]
 8018e3e:	47b8      	blx	r7
 8018e40:	3001      	adds	r0, #1
 8018e42:	f43f ae9b 	beq.w	8018b7c <_printf_float+0x9c>
 8018e46:	9b05      	ldr	r3, [sp, #20]
 8018e48:	9a04      	ldr	r2, [sp, #16]
 8018e4a:	3301      	adds	r3, #1
 8018e4c:	9305      	str	r3, [sp, #20]
 8018e4e:	e7b7      	b.n	8018dc0 <_printf_float+0x2e0>
 8018e50:	4653      	mov	r3, sl
 8018e52:	465a      	mov	r2, fp
 8018e54:	4631      	mov	r1, r6
 8018e56:	4628      	mov	r0, r5
 8018e58:	47b8      	blx	r7
 8018e5a:	3001      	adds	r0, #1
 8018e5c:	d1be      	bne.n	8018ddc <_printf_float+0x2fc>
 8018e5e:	e68d      	b.n	8018b7c <_printf_float+0x9c>
 8018e60:	9a04      	ldr	r2, [sp, #16]
 8018e62:	464b      	mov	r3, r9
 8018e64:	4442      	add	r2, r8
 8018e66:	4631      	mov	r1, r6
 8018e68:	4628      	mov	r0, r5
 8018e6a:	47b8      	blx	r7
 8018e6c:	3001      	adds	r0, #1
 8018e6e:	d1c1      	bne.n	8018df4 <_printf_float+0x314>
 8018e70:	e684      	b.n	8018b7c <_printf_float+0x9c>
 8018e72:	9a08      	ldr	r2, [sp, #32]
 8018e74:	2a01      	cmp	r2, #1
 8018e76:	dc01      	bgt.n	8018e7c <_printf_float+0x39c>
 8018e78:	07db      	lsls	r3, r3, #31
 8018e7a:	d537      	bpl.n	8018eec <_printf_float+0x40c>
 8018e7c:	2301      	movs	r3, #1
 8018e7e:	4642      	mov	r2, r8
 8018e80:	4631      	mov	r1, r6
 8018e82:	4628      	mov	r0, r5
 8018e84:	47b8      	blx	r7
 8018e86:	3001      	adds	r0, #1
 8018e88:	f43f ae78 	beq.w	8018b7c <_printf_float+0x9c>
 8018e8c:	4653      	mov	r3, sl
 8018e8e:	465a      	mov	r2, fp
 8018e90:	4631      	mov	r1, r6
 8018e92:	4628      	mov	r0, r5
 8018e94:	47b8      	blx	r7
 8018e96:	3001      	adds	r0, #1
 8018e98:	f43f ae70 	beq.w	8018b7c <_printf_float+0x9c>
 8018e9c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8018ea0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ea8:	d01b      	beq.n	8018ee2 <_printf_float+0x402>
 8018eaa:	9b08      	ldr	r3, [sp, #32]
 8018eac:	f108 0201 	add.w	r2, r8, #1
 8018eb0:	3b01      	subs	r3, #1
 8018eb2:	4631      	mov	r1, r6
 8018eb4:	4628      	mov	r0, r5
 8018eb6:	47b8      	blx	r7
 8018eb8:	3001      	adds	r0, #1
 8018eba:	d10e      	bne.n	8018eda <_printf_float+0x3fa>
 8018ebc:	e65e      	b.n	8018b7c <_printf_float+0x9c>
 8018ebe:	2301      	movs	r3, #1
 8018ec0:	464a      	mov	r2, r9
 8018ec2:	4631      	mov	r1, r6
 8018ec4:	4628      	mov	r0, r5
 8018ec6:	47b8      	blx	r7
 8018ec8:	3001      	adds	r0, #1
 8018eca:	f43f ae57 	beq.w	8018b7c <_printf_float+0x9c>
 8018ece:	f108 0801 	add.w	r8, r8, #1
 8018ed2:	9b08      	ldr	r3, [sp, #32]
 8018ed4:	3b01      	subs	r3, #1
 8018ed6:	4543      	cmp	r3, r8
 8018ed8:	dcf1      	bgt.n	8018ebe <_printf_float+0x3de>
 8018eda:	9b04      	ldr	r3, [sp, #16]
 8018edc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8018ee0:	e6db      	b.n	8018c9a <_printf_float+0x1ba>
 8018ee2:	f04f 0800 	mov.w	r8, #0
 8018ee6:	f104 091a 	add.w	r9, r4, #26
 8018eea:	e7f2      	b.n	8018ed2 <_printf_float+0x3f2>
 8018eec:	2301      	movs	r3, #1
 8018eee:	4642      	mov	r2, r8
 8018ef0:	e7df      	b.n	8018eb2 <_printf_float+0x3d2>
 8018ef2:	2301      	movs	r3, #1
 8018ef4:	464a      	mov	r2, r9
 8018ef6:	4631      	mov	r1, r6
 8018ef8:	4628      	mov	r0, r5
 8018efa:	47b8      	blx	r7
 8018efc:	3001      	adds	r0, #1
 8018efe:	f43f ae3d 	beq.w	8018b7c <_printf_float+0x9c>
 8018f02:	f108 0801 	add.w	r8, r8, #1
 8018f06:	68e3      	ldr	r3, [r4, #12]
 8018f08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018f0a:	1a5b      	subs	r3, r3, r1
 8018f0c:	4543      	cmp	r3, r8
 8018f0e:	dcf0      	bgt.n	8018ef2 <_printf_float+0x412>
 8018f10:	e6f7      	b.n	8018d02 <_printf_float+0x222>
 8018f12:	f04f 0800 	mov.w	r8, #0
 8018f16:	f104 0919 	add.w	r9, r4, #25
 8018f1a:	e7f4      	b.n	8018f06 <_printf_float+0x426>

08018f1c <_printf_common>:
 8018f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018f20:	4616      	mov	r6, r2
 8018f22:	4699      	mov	r9, r3
 8018f24:	688a      	ldr	r2, [r1, #8]
 8018f26:	690b      	ldr	r3, [r1, #16]
 8018f28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018f2c:	4293      	cmp	r3, r2
 8018f2e:	bfb8      	it	lt
 8018f30:	4613      	movlt	r3, r2
 8018f32:	6033      	str	r3, [r6, #0]
 8018f34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018f38:	4607      	mov	r7, r0
 8018f3a:	460c      	mov	r4, r1
 8018f3c:	b10a      	cbz	r2, 8018f42 <_printf_common+0x26>
 8018f3e:	3301      	adds	r3, #1
 8018f40:	6033      	str	r3, [r6, #0]
 8018f42:	6823      	ldr	r3, [r4, #0]
 8018f44:	0699      	lsls	r1, r3, #26
 8018f46:	bf42      	ittt	mi
 8018f48:	6833      	ldrmi	r3, [r6, #0]
 8018f4a:	3302      	addmi	r3, #2
 8018f4c:	6033      	strmi	r3, [r6, #0]
 8018f4e:	6825      	ldr	r5, [r4, #0]
 8018f50:	f015 0506 	ands.w	r5, r5, #6
 8018f54:	d106      	bne.n	8018f64 <_printf_common+0x48>
 8018f56:	f104 0a19 	add.w	sl, r4, #25
 8018f5a:	68e3      	ldr	r3, [r4, #12]
 8018f5c:	6832      	ldr	r2, [r6, #0]
 8018f5e:	1a9b      	subs	r3, r3, r2
 8018f60:	42ab      	cmp	r3, r5
 8018f62:	dc26      	bgt.n	8018fb2 <_printf_common+0x96>
 8018f64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018f68:	1e13      	subs	r3, r2, #0
 8018f6a:	6822      	ldr	r2, [r4, #0]
 8018f6c:	bf18      	it	ne
 8018f6e:	2301      	movne	r3, #1
 8018f70:	0692      	lsls	r2, r2, #26
 8018f72:	d42b      	bmi.n	8018fcc <_printf_common+0xb0>
 8018f74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018f78:	4649      	mov	r1, r9
 8018f7a:	4638      	mov	r0, r7
 8018f7c:	47c0      	blx	r8
 8018f7e:	3001      	adds	r0, #1
 8018f80:	d01e      	beq.n	8018fc0 <_printf_common+0xa4>
 8018f82:	6823      	ldr	r3, [r4, #0]
 8018f84:	68e5      	ldr	r5, [r4, #12]
 8018f86:	6832      	ldr	r2, [r6, #0]
 8018f88:	f003 0306 	and.w	r3, r3, #6
 8018f8c:	2b04      	cmp	r3, #4
 8018f8e:	bf08      	it	eq
 8018f90:	1aad      	subeq	r5, r5, r2
 8018f92:	68a3      	ldr	r3, [r4, #8]
 8018f94:	6922      	ldr	r2, [r4, #16]
 8018f96:	bf0c      	ite	eq
 8018f98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018f9c:	2500      	movne	r5, #0
 8018f9e:	4293      	cmp	r3, r2
 8018fa0:	bfc4      	itt	gt
 8018fa2:	1a9b      	subgt	r3, r3, r2
 8018fa4:	18ed      	addgt	r5, r5, r3
 8018fa6:	2600      	movs	r6, #0
 8018fa8:	341a      	adds	r4, #26
 8018faa:	42b5      	cmp	r5, r6
 8018fac:	d11a      	bne.n	8018fe4 <_printf_common+0xc8>
 8018fae:	2000      	movs	r0, #0
 8018fb0:	e008      	b.n	8018fc4 <_printf_common+0xa8>
 8018fb2:	2301      	movs	r3, #1
 8018fb4:	4652      	mov	r2, sl
 8018fb6:	4649      	mov	r1, r9
 8018fb8:	4638      	mov	r0, r7
 8018fba:	47c0      	blx	r8
 8018fbc:	3001      	adds	r0, #1
 8018fbe:	d103      	bne.n	8018fc8 <_printf_common+0xac>
 8018fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8018fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018fc8:	3501      	adds	r5, #1
 8018fca:	e7c6      	b.n	8018f5a <_printf_common+0x3e>
 8018fcc:	18e1      	adds	r1, r4, r3
 8018fce:	1c5a      	adds	r2, r3, #1
 8018fd0:	2030      	movs	r0, #48	; 0x30
 8018fd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018fd6:	4422      	add	r2, r4
 8018fd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018fdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018fe0:	3302      	adds	r3, #2
 8018fe2:	e7c7      	b.n	8018f74 <_printf_common+0x58>
 8018fe4:	2301      	movs	r3, #1
 8018fe6:	4622      	mov	r2, r4
 8018fe8:	4649      	mov	r1, r9
 8018fea:	4638      	mov	r0, r7
 8018fec:	47c0      	blx	r8
 8018fee:	3001      	adds	r0, #1
 8018ff0:	d0e6      	beq.n	8018fc0 <_printf_common+0xa4>
 8018ff2:	3601      	adds	r6, #1
 8018ff4:	e7d9      	b.n	8018faa <_printf_common+0x8e>
	...

08018ff8 <_printf_i>:
 8018ff8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018ffc:	7e0f      	ldrb	r7, [r1, #24]
 8018ffe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019000:	2f78      	cmp	r7, #120	; 0x78
 8019002:	4691      	mov	r9, r2
 8019004:	4680      	mov	r8, r0
 8019006:	460c      	mov	r4, r1
 8019008:	469a      	mov	sl, r3
 801900a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801900e:	d807      	bhi.n	8019020 <_printf_i+0x28>
 8019010:	2f62      	cmp	r7, #98	; 0x62
 8019012:	d80a      	bhi.n	801902a <_printf_i+0x32>
 8019014:	2f00      	cmp	r7, #0
 8019016:	f000 80d8 	beq.w	80191ca <_printf_i+0x1d2>
 801901a:	2f58      	cmp	r7, #88	; 0x58
 801901c:	f000 80a3 	beq.w	8019166 <_printf_i+0x16e>
 8019020:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019024:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019028:	e03a      	b.n	80190a0 <_printf_i+0xa8>
 801902a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801902e:	2b15      	cmp	r3, #21
 8019030:	d8f6      	bhi.n	8019020 <_printf_i+0x28>
 8019032:	a101      	add	r1, pc, #4	; (adr r1, 8019038 <_printf_i+0x40>)
 8019034:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019038:	08019091 	.word	0x08019091
 801903c:	080190a5 	.word	0x080190a5
 8019040:	08019021 	.word	0x08019021
 8019044:	08019021 	.word	0x08019021
 8019048:	08019021 	.word	0x08019021
 801904c:	08019021 	.word	0x08019021
 8019050:	080190a5 	.word	0x080190a5
 8019054:	08019021 	.word	0x08019021
 8019058:	08019021 	.word	0x08019021
 801905c:	08019021 	.word	0x08019021
 8019060:	08019021 	.word	0x08019021
 8019064:	080191b1 	.word	0x080191b1
 8019068:	080190d5 	.word	0x080190d5
 801906c:	08019193 	.word	0x08019193
 8019070:	08019021 	.word	0x08019021
 8019074:	08019021 	.word	0x08019021
 8019078:	080191d3 	.word	0x080191d3
 801907c:	08019021 	.word	0x08019021
 8019080:	080190d5 	.word	0x080190d5
 8019084:	08019021 	.word	0x08019021
 8019088:	08019021 	.word	0x08019021
 801908c:	0801919b 	.word	0x0801919b
 8019090:	682b      	ldr	r3, [r5, #0]
 8019092:	1d1a      	adds	r2, r3, #4
 8019094:	681b      	ldr	r3, [r3, #0]
 8019096:	602a      	str	r2, [r5, #0]
 8019098:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801909c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80190a0:	2301      	movs	r3, #1
 80190a2:	e0a3      	b.n	80191ec <_printf_i+0x1f4>
 80190a4:	6820      	ldr	r0, [r4, #0]
 80190a6:	6829      	ldr	r1, [r5, #0]
 80190a8:	0606      	lsls	r6, r0, #24
 80190aa:	f101 0304 	add.w	r3, r1, #4
 80190ae:	d50a      	bpl.n	80190c6 <_printf_i+0xce>
 80190b0:	680e      	ldr	r6, [r1, #0]
 80190b2:	602b      	str	r3, [r5, #0]
 80190b4:	2e00      	cmp	r6, #0
 80190b6:	da03      	bge.n	80190c0 <_printf_i+0xc8>
 80190b8:	232d      	movs	r3, #45	; 0x2d
 80190ba:	4276      	negs	r6, r6
 80190bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80190c0:	485e      	ldr	r0, [pc, #376]	; (801923c <_printf_i+0x244>)
 80190c2:	230a      	movs	r3, #10
 80190c4:	e019      	b.n	80190fa <_printf_i+0x102>
 80190c6:	680e      	ldr	r6, [r1, #0]
 80190c8:	602b      	str	r3, [r5, #0]
 80190ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80190ce:	bf18      	it	ne
 80190d0:	b236      	sxthne	r6, r6
 80190d2:	e7ef      	b.n	80190b4 <_printf_i+0xbc>
 80190d4:	682b      	ldr	r3, [r5, #0]
 80190d6:	6820      	ldr	r0, [r4, #0]
 80190d8:	1d19      	adds	r1, r3, #4
 80190da:	6029      	str	r1, [r5, #0]
 80190dc:	0601      	lsls	r1, r0, #24
 80190de:	d501      	bpl.n	80190e4 <_printf_i+0xec>
 80190e0:	681e      	ldr	r6, [r3, #0]
 80190e2:	e002      	b.n	80190ea <_printf_i+0xf2>
 80190e4:	0646      	lsls	r6, r0, #25
 80190e6:	d5fb      	bpl.n	80190e0 <_printf_i+0xe8>
 80190e8:	881e      	ldrh	r6, [r3, #0]
 80190ea:	4854      	ldr	r0, [pc, #336]	; (801923c <_printf_i+0x244>)
 80190ec:	2f6f      	cmp	r7, #111	; 0x6f
 80190ee:	bf0c      	ite	eq
 80190f0:	2308      	moveq	r3, #8
 80190f2:	230a      	movne	r3, #10
 80190f4:	2100      	movs	r1, #0
 80190f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80190fa:	6865      	ldr	r5, [r4, #4]
 80190fc:	60a5      	str	r5, [r4, #8]
 80190fe:	2d00      	cmp	r5, #0
 8019100:	bfa2      	ittt	ge
 8019102:	6821      	ldrge	r1, [r4, #0]
 8019104:	f021 0104 	bicge.w	r1, r1, #4
 8019108:	6021      	strge	r1, [r4, #0]
 801910a:	b90e      	cbnz	r6, 8019110 <_printf_i+0x118>
 801910c:	2d00      	cmp	r5, #0
 801910e:	d04d      	beq.n	80191ac <_printf_i+0x1b4>
 8019110:	4615      	mov	r5, r2
 8019112:	fbb6 f1f3 	udiv	r1, r6, r3
 8019116:	fb03 6711 	mls	r7, r3, r1, r6
 801911a:	5dc7      	ldrb	r7, [r0, r7]
 801911c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8019120:	4637      	mov	r7, r6
 8019122:	42bb      	cmp	r3, r7
 8019124:	460e      	mov	r6, r1
 8019126:	d9f4      	bls.n	8019112 <_printf_i+0x11a>
 8019128:	2b08      	cmp	r3, #8
 801912a:	d10b      	bne.n	8019144 <_printf_i+0x14c>
 801912c:	6823      	ldr	r3, [r4, #0]
 801912e:	07de      	lsls	r6, r3, #31
 8019130:	d508      	bpl.n	8019144 <_printf_i+0x14c>
 8019132:	6923      	ldr	r3, [r4, #16]
 8019134:	6861      	ldr	r1, [r4, #4]
 8019136:	4299      	cmp	r1, r3
 8019138:	bfde      	ittt	le
 801913a:	2330      	movle	r3, #48	; 0x30
 801913c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019140:	f105 35ff 	addle.w	r5, r5, #4294967295
 8019144:	1b52      	subs	r2, r2, r5
 8019146:	6122      	str	r2, [r4, #16]
 8019148:	f8cd a000 	str.w	sl, [sp]
 801914c:	464b      	mov	r3, r9
 801914e:	aa03      	add	r2, sp, #12
 8019150:	4621      	mov	r1, r4
 8019152:	4640      	mov	r0, r8
 8019154:	f7ff fee2 	bl	8018f1c <_printf_common>
 8019158:	3001      	adds	r0, #1
 801915a:	d14c      	bne.n	80191f6 <_printf_i+0x1fe>
 801915c:	f04f 30ff 	mov.w	r0, #4294967295
 8019160:	b004      	add	sp, #16
 8019162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019166:	4835      	ldr	r0, [pc, #212]	; (801923c <_printf_i+0x244>)
 8019168:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801916c:	6829      	ldr	r1, [r5, #0]
 801916e:	6823      	ldr	r3, [r4, #0]
 8019170:	f851 6b04 	ldr.w	r6, [r1], #4
 8019174:	6029      	str	r1, [r5, #0]
 8019176:	061d      	lsls	r5, r3, #24
 8019178:	d514      	bpl.n	80191a4 <_printf_i+0x1ac>
 801917a:	07df      	lsls	r7, r3, #31
 801917c:	bf44      	itt	mi
 801917e:	f043 0320 	orrmi.w	r3, r3, #32
 8019182:	6023      	strmi	r3, [r4, #0]
 8019184:	b91e      	cbnz	r6, 801918e <_printf_i+0x196>
 8019186:	6823      	ldr	r3, [r4, #0]
 8019188:	f023 0320 	bic.w	r3, r3, #32
 801918c:	6023      	str	r3, [r4, #0]
 801918e:	2310      	movs	r3, #16
 8019190:	e7b0      	b.n	80190f4 <_printf_i+0xfc>
 8019192:	6823      	ldr	r3, [r4, #0]
 8019194:	f043 0320 	orr.w	r3, r3, #32
 8019198:	6023      	str	r3, [r4, #0]
 801919a:	2378      	movs	r3, #120	; 0x78
 801919c:	4828      	ldr	r0, [pc, #160]	; (8019240 <_printf_i+0x248>)
 801919e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80191a2:	e7e3      	b.n	801916c <_printf_i+0x174>
 80191a4:	0659      	lsls	r1, r3, #25
 80191a6:	bf48      	it	mi
 80191a8:	b2b6      	uxthmi	r6, r6
 80191aa:	e7e6      	b.n	801917a <_printf_i+0x182>
 80191ac:	4615      	mov	r5, r2
 80191ae:	e7bb      	b.n	8019128 <_printf_i+0x130>
 80191b0:	682b      	ldr	r3, [r5, #0]
 80191b2:	6826      	ldr	r6, [r4, #0]
 80191b4:	6961      	ldr	r1, [r4, #20]
 80191b6:	1d18      	adds	r0, r3, #4
 80191b8:	6028      	str	r0, [r5, #0]
 80191ba:	0635      	lsls	r5, r6, #24
 80191bc:	681b      	ldr	r3, [r3, #0]
 80191be:	d501      	bpl.n	80191c4 <_printf_i+0x1cc>
 80191c0:	6019      	str	r1, [r3, #0]
 80191c2:	e002      	b.n	80191ca <_printf_i+0x1d2>
 80191c4:	0670      	lsls	r0, r6, #25
 80191c6:	d5fb      	bpl.n	80191c0 <_printf_i+0x1c8>
 80191c8:	8019      	strh	r1, [r3, #0]
 80191ca:	2300      	movs	r3, #0
 80191cc:	6123      	str	r3, [r4, #16]
 80191ce:	4615      	mov	r5, r2
 80191d0:	e7ba      	b.n	8019148 <_printf_i+0x150>
 80191d2:	682b      	ldr	r3, [r5, #0]
 80191d4:	1d1a      	adds	r2, r3, #4
 80191d6:	602a      	str	r2, [r5, #0]
 80191d8:	681d      	ldr	r5, [r3, #0]
 80191da:	6862      	ldr	r2, [r4, #4]
 80191dc:	2100      	movs	r1, #0
 80191de:	4628      	mov	r0, r5
 80191e0:	f7ef f896 	bl	8008310 <memchr>
 80191e4:	b108      	cbz	r0, 80191ea <_printf_i+0x1f2>
 80191e6:	1b40      	subs	r0, r0, r5
 80191e8:	6060      	str	r0, [r4, #4]
 80191ea:	6863      	ldr	r3, [r4, #4]
 80191ec:	6123      	str	r3, [r4, #16]
 80191ee:	2300      	movs	r3, #0
 80191f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80191f4:	e7a8      	b.n	8019148 <_printf_i+0x150>
 80191f6:	6923      	ldr	r3, [r4, #16]
 80191f8:	462a      	mov	r2, r5
 80191fa:	4649      	mov	r1, r9
 80191fc:	4640      	mov	r0, r8
 80191fe:	47d0      	blx	sl
 8019200:	3001      	adds	r0, #1
 8019202:	d0ab      	beq.n	801915c <_printf_i+0x164>
 8019204:	6823      	ldr	r3, [r4, #0]
 8019206:	079b      	lsls	r3, r3, #30
 8019208:	d413      	bmi.n	8019232 <_printf_i+0x23a>
 801920a:	68e0      	ldr	r0, [r4, #12]
 801920c:	9b03      	ldr	r3, [sp, #12]
 801920e:	4298      	cmp	r0, r3
 8019210:	bfb8      	it	lt
 8019212:	4618      	movlt	r0, r3
 8019214:	e7a4      	b.n	8019160 <_printf_i+0x168>
 8019216:	2301      	movs	r3, #1
 8019218:	4632      	mov	r2, r6
 801921a:	4649      	mov	r1, r9
 801921c:	4640      	mov	r0, r8
 801921e:	47d0      	blx	sl
 8019220:	3001      	adds	r0, #1
 8019222:	d09b      	beq.n	801915c <_printf_i+0x164>
 8019224:	3501      	adds	r5, #1
 8019226:	68e3      	ldr	r3, [r4, #12]
 8019228:	9903      	ldr	r1, [sp, #12]
 801922a:	1a5b      	subs	r3, r3, r1
 801922c:	42ab      	cmp	r3, r5
 801922e:	dcf2      	bgt.n	8019216 <_printf_i+0x21e>
 8019230:	e7eb      	b.n	801920a <_printf_i+0x212>
 8019232:	2500      	movs	r5, #0
 8019234:	f104 0619 	add.w	r6, r4, #25
 8019238:	e7f5      	b.n	8019226 <_printf_i+0x22e>
 801923a:	bf00      	nop
 801923c:	0802b82e 	.word	0x0802b82e
 8019240:	0802b83f 	.word	0x0802b83f

08019244 <_scanf_float>:
 8019244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019248:	b087      	sub	sp, #28
 801924a:	4617      	mov	r7, r2
 801924c:	9303      	str	r3, [sp, #12]
 801924e:	688b      	ldr	r3, [r1, #8]
 8019250:	1e5a      	subs	r2, r3, #1
 8019252:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8019256:	bf83      	ittte	hi
 8019258:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801925c:	195b      	addhi	r3, r3, r5
 801925e:	9302      	strhi	r3, [sp, #8]
 8019260:	2300      	movls	r3, #0
 8019262:	bf86      	itte	hi
 8019264:	f240 135d 	movwhi	r3, #349	; 0x15d
 8019268:	608b      	strhi	r3, [r1, #8]
 801926a:	9302      	strls	r3, [sp, #8]
 801926c:	680b      	ldr	r3, [r1, #0]
 801926e:	468b      	mov	fp, r1
 8019270:	2500      	movs	r5, #0
 8019272:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8019276:	f84b 3b1c 	str.w	r3, [fp], #28
 801927a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801927e:	4680      	mov	r8, r0
 8019280:	460c      	mov	r4, r1
 8019282:	465e      	mov	r6, fp
 8019284:	46aa      	mov	sl, r5
 8019286:	46a9      	mov	r9, r5
 8019288:	9501      	str	r5, [sp, #4]
 801928a:	68a2      	ldr	r2, [r4, #8]
 801928c:	b152      	cbz	r2, 80192a4 <_scanf_float+0x60>
 801928e:	683b      	ldr	r3, [r7, #0]
 8019290:	781b      	ldrb	r3, [r3, #0]
 8019292:	2b4e      	cmp	r3, #78	; 0x4e
 8019294:	d864      	bhi.n	8019360 <_scanf_float+0x11c>
 8019296:	2b40      	cmp	r3, #64	; 0x40
 8019298:	d83c      	bhi.n	8019314 <_scanf_float+0xd0>
 801929a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801929e:	b2c8      	uxtb	r0, r1
 80192a0:	280e      	cmp	r0, #14
 80192a2:	d93a      	bls.n	801931a <_scanf_float+0xd6>
 80192a4:	f1b9 0f00 	cmp.w	r9, #0
 80192a8:	d003      	beq.n	80192b2 <_scanf_float+0x6e>
 80192aa:	6823      	ldr	r3, [r4, #0]
 80192ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80192b0:	6023      	str	r3, [r4, #0]
 80192b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80192b6:	f1ba 0f01 	cmp.w	sl, #1
 80192ba:	f200 8113 	bhi.w	80194e4 <_scanf_float+0x2a0>
 80192be:	455e      	cmp	r6, fp
 80192c0:	f200 8105 	bhi.w	80194ce <_scanf_float+0x28a>
 80192c4:	2501      	movs	r5, #1
 80192c6:	4628      	mov	r0, r5
 80192c8:	b007      	add	sp, #28
 80192ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192ce:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80192d2:	2a0d      	cmp	r2, #13
 80192d4:	d8e6      	bhi.n	80192a4 <_scanf_float+0x60>
 80192d6:	a101      	add	r1, pc, #4	; (adr r1, 80192dc <_scanf_float+0x98>)
 80192d8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80192dc:	0801941b 	.word	0x0801941b
 80192e0:	080192a5 	.word	0x080192a5
 80192e4:	080192a5 	.word	0x080192a5
 80192e8:	080192a5 	.word	0x080192a5
 80192ec:	0801947b 	.word	0x0801947b
 80192f0:	08019453 	.word	0x08019453
 80192f4:	080192a5 	.word	0x080192a5
 80192f8:	080192a5 	.word	0x080192a5
 80192fc:	08019429 	.word	0x08019429
 8019300:	080192a5 	.word	0x080192a5
 8019304:	080192a5 	.word	0x080192a5
 8019308:	080192a5 	.word	0x080192a5
 801930c:	080192a5 	.word	0x080192a5
 8019310:	080193e1 	.word	0x080193e1
 8019314:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8019318:	e7db      	b.n	80192d2 <_scanf_float+0x8e>
 801931a:	290e      	cmp	r1, #14
 801931c:	d8c2      	bhi.n	80192a4 <_scanf_float+0x60>
 801931e:	a001      	add	r0, pc, #4	; (adr r0, 8019324 <_scanf_float+0xe0>)
 8019320:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8019324:	080193d3 	.word	0x080193d3
 8019328:	080192a5 	.word	0x080192a5
 801932c:	080193d3 	.word	0x080193d3
 8019330:	08019467 	.word	0x08019467
 8019334:	080192a5 	.word	0x080192a5
 8019338:	08019381 	.word	0x08019381
 801933c:	080193bd 	.word	0x080193bd
 8019340:	080193bd 	.word	0x080193bd
 8019344:	080193bd 	.word	0x080193bd
 8019348:	080193bd 	.word	0x080193bd
 801934c:	080193bd 	.word	0x080193bd
 8019350:	080193bd 	.word	0x080193bd
 8019354:	080193bd 	.word	0x080193bd
 8019358:	080193bd 	.word	0x080193bd
 801935c:	080193bd 	.word	0x080193bd
 8019360:	2b6e      	cmp	r3, #110	; 0x6e
 8019362:	d809      	bhi.n	8019378 <_scanf_float+0x134>
 8019364:	2b60      	cmp	r3, #96	; 0x60
 8019366:	d8b2      	bhi.n	80192ce <_scanf_float+0x8a>
 8019368:	2b54      	cmp	r3, #84	; 0x54
 801936a:	d077      	beq.n	801945c <_scanf_float+0x218>
 801936c:	2b59      	cmp	r3, #89	; 0x59
 801936e:	d199      	bne.n	80192a4 <_scanf_float+0x60>
 8019370:	2d07      	cmp	r5, #7
 8019372:	d197      	bne.n	80192a4 <_scanf_float+0x60>
 8019374:	2508      	movs	r5, #8
 8019376:	e029      	b.n	80193cc <_scanf_float+0x188>
 8019378:	2b74      	cmp	r3, #116	; 0x74
 801937a:	d06f      	beq.n	801945c <_scanf_float+0x218>
 801937c:	2b79      	cmp	r3, #121	; 0x79
 801937e:	e7f6      	b.n	801936e <_scanf_float+0x12a>
 8019380:	6821      	ldr	r1, [r4, #0]
 8019382:	05c8      	lsls	r0, r1, #23
 8019384:	d51a      	bpl.n	80193bc <_scanf_float+0x178>
 8019386:	9b02      	ldr	r3, [sp, #8]
 8019388:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801938c:	6021      	str	r1, [r4, #0]
 801938e:	f109 0901 	add.w	r9, r9, #1
 8019392:	b11b      	cbz	r3, 801939c <_scanf_float+0x158>
 8019394:	3b01      	subs	r3, #1
 8019396:	3201      	adds	r2, #1
 8019398:	9302      	str	r3, [sp, #8]
 801939a:	60a2      	str	r2, [r4, #8]
 801939c:	68a3      	ldr	r3, [r4, #8]
 801939e:	3b01      	subs	r3, #1
 80193a0:	60a3      	str	r3, [r4, #8]
 80193a2:	6923      	ldr	r3, [r4, #16]
 80193a4:	3301      	adds	r3, #1
 80193a6:	6123      	str	r3, [r4, #16]
 80193a8:	687b      	ldr	r3, [r7, #4]
 80193aa:	3b01      	subs	r3, #1
 80193ac:	2b00      	cmp	r3, #0
 80193ae:	607b      	str	r3, [r7, #4]
 80193b0:	f340 8084 	ble.w	80194bc <_scanf_float+0x278>
 80193b4:	683b      	ldr	r3, [r7, #0]
 80193b6:	3301      	adds	r3, #1
 80193b8:	603b      	str	r3, [r7, #0]
 80193ba:	e766      	b.n	801928a <_scanf_float+0x46>
 80193bc:	eb1a 0f05 	cmn.w	sl, r5
 80193c0:	f47f af70 	bne.w	80192a4 <_scanf_float+0x60>
 80193c4:	6822      	ldr	r2, [r4, #0]
 80193c6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80193ca:	6022      	str	r2, [r4, #0]
 80193cc:	f806 3b01 	strb.w	r3, [r6], #1
 80193d0:	e7e4      	b.n	801939c <_scanf_float+0x158>
 80193d2:	6822      	ldr	r2, [r4, #0]
 80193d4:	0610      	lsls	r0, r2, #24
 80193d6:	f57f af65 	bpl.w	80192a4 <_scanf_float+0x60>
 80193da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80193de:	e7f4      	b.n	80193ca <_scanf_float+0x186>
 80193e0:	f1ba 0f00 	cmp.w	sl, #0
 80193e4:	d10e      	bne.n	8019404 <_scanf_float+0x1c0>
 80193e6:	f1b9 0f00 	cmp.w	r9, #0
 80193ea:	d10e      	bne.n	801940a <_scanf_float+0x1c6>
 80193ec:	6822      	ldr	r2, [r4, #0]
 80193ee:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80193f2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80193f6:	d108      	bne.n	801940a <_scanf_float+0x1c6>
 80193f8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80193fc:	6022      	str	r2, [r4, #0]
 80193fe:	f04f 0a01 	mov.w	sl, #1
 8019402:	e7e3      	b.n	80193cc <_scanf_float+0x188>
 8019404:	f1ba 0f02 	cmp.w	sl, #2
 8019408:	d055      	beq.n	80194b6 <_scanf_float+0x272>
 801940a:	2d01      	cmp	r5, #1
 801940c:	d002      	beq.n	8019414 <_scanf_float+0x1d0>
 801940e:	2d04      	cmp	r5, #4
 8019410:	f47f af48 	bne.w	80192a4 <_scanf_float+0x60>
 8019414:	3501      	adds	r5, #1
 8019416:	b2ed      	uxtb	r5, r5
 8019418:	e7d8      	b.n	80193cc <_scanf_float+0x188>
 801941a:	f1ba 0f01 	cmp.w	sl, #1
 801941e:	f47f af41 	bne.w	80192a4 <_scanf_float+0x60>
 8019422:	f04f 0a02 	mov.w	sl, #2
 8019426:	e7d1      	b.n	80193cc <_scanf_float+0x188>
 8019428:	b97d      	cbnz	r5, 801944a <_scanf_float+0x206>
 801942a:	f1b9 0f00 	cmp.w	r9, #0
 801942e:	f47f af3c 	bne.w	80192aa <_scanf_float+0x66>
 8019432:	6822      	ldr	r2, [r4, #0]
 8019434:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8019438:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801943c:	f47f af39 	bne.w	80192b2 <_scanf_float+0x6e>
 8019440:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8019444:	6022      	str	r2, [r4, #0]
 8019446:	2501      	movs	r5, #1
 8019448:	e7c0      	b.n	80193cc <_scanf_float+0x188>
 801944a:	2d03      	cmp	r5, #3
 801944c:	d0e2      	beq.n	8019414 <_scanf_float+0x1d0>
 801944e:	2d05      	cmp	r5, #5
 8019450:	e7de      	b.n	8019410 <_scanf_float+0x1cc>
 8019452:	2d02      	cmp	r5, #2
 8019454:	f47f af26 	bne.w	80192a4 <_scanf_float+0x60>
 8019458:	2503      	movs	r5, #3
 801945a:	e7b7      	b.n	80193cc <_scanf_float+0x188>
 801945c:	2d06      	cmp	r5, #6
 801945e:	f47f af21 	bne.w	80192a4 <_scanf_float+0x60>
 8019462:	2507      	movs	r5, #7
 8019464:	e7b2      	b.n	80193cc <_scanf_float+0x188>
 8019466:	6822      	ldr	r2, [r4, #0]
 8019468:	0591      	lsls	r1, r2, #22
 801946a:	f57f af1b 	bpl.w	80192a4 <_scanf_float+0x60>
 801946e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8019472:	6022      	str	r2, [r4, #0]
 8019474:	f8cd 9004 	str.w	r9, [sp, #4]
 8019478:	e7a8      	b.n	80193cc <_scanf_float+0x188>
 801947a:	6822      	ldr	r2, [r4, #0]
 801947c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8019480:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8019484:	d006      	beq.n	8019494 <_scanf_float+0x250>
 8019486:	0550      	lsls	r0, r2, #21
 8019488:	f57f af0c 	bpl.w	80192a4 <_scanf_float+0x60>
 801948c:	f1b9 0f00 	cmp.w	r9, #0
 8019490:	f43f af0f 	beq.w	80192b2 <_scanf_float+0x6e>
 8019494:	0591      	lsls	r1, r2, #22
 8019496:	bf58      	it	pl
 8019498:	9901      	ldrpl	r1, [sp, #4]
 801949a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801949e:	bf58      	it	pl
 80194a0:	eba9 0101 	subpl.w	r1, r9, r1
 80194a4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80194a8:	bf58      	it	pl
 80194aa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80194ae:	6022      	str	r2, [r4, #0]
 80194b0:	f04f 0900 	mov.w	r9, #0
 80194b4:	e78a      	b.n	80193cc <_scanf_float+0x188>
 80194b6:	f04f 0a03 	mov.w	sl, #3
 80194ba:	e787      	b.n	80193cc <_scanf_float+0x188>
 80194bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80194c0:	4639      	mov	r1, r7
 80194c2:	4640      	mov	r0, r8
 80194c4:	4798      	blx	r3
 80194c6:	2800      	cmp	r0, #0
 80194c8:	f43f aedf 	beq.w	801928a <_scanf_float+0x46>
 80194cc:	e6ea      	b.n	80192a4 <_scanf_float+0x60>
 80194ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80194d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80194d6:	463a      	mov	r2, r7
 80194d8:	4640      	mov	r0, r8
 80194da:	4798      	blx	r3
 80194dc:	6923      	ldr	r3, [r4, #16]
 80194de:	3b01      	subs	r3, #1
 80194e0:	6123      	str	r3, [r4, #16]
 80194e2:	e6ec      	b.n	80192be <_scanf_float+0x7a>
 80194e4:	1e6b      	subs	r3, r5, #1
 80194e6:	2b06      	cmp	r3, #6
 80194e8:	d825      	bhi.n	8019536 <_scanf_float+0x2f2>
 80194ea:	2d02      	cmp	r5, #2
 80194ec:	d836      	bhi.n	801955c <_scanf_float+0x318>
 80194ee:	455e      	cmp	r6, fp
 80194f0:	f67f aee8 	bls.w	80192c4 <_scanf_float+0x80>
 80194f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80194f8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80194fc:	463a      	mov	r2, r7
 80194fe:	4640      	mov	r0, r8
 8019500:	4798      	blx	r3
 8019502:	6923      	ldr	r3, [r4, #16]
 8019504:	3b01      	subs	r3, #1
 8019506:	6123      	str	r3, [r4, #16]
 8019508:	e7f1      	b.n	80194ee <_scanf_float+0x2aa>
 801950a:	9802      	ldr	r0, [sp, #8]
 801950c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019510:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8019514:	9002      	str	r0, [sp, #8]
 8019516:	463a      	mov	r2, r7
 8019518:	4640      	mov	r0, r8
 801951a:	4798      	blx	r3
 801951c:	6923      	ldr	r3, [r4, #16]
 801951e:	3b01      	subs	r3, #1
 8019520:	6123      	str	r3, [r4, #16]
 8019522:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019526:	fa5f fa8a 	uxtb.w	sl, sl
 801952a:	f1ba 0f02 	cmp.w	sl, #2
 801952e:	d1ec      	bne.n	801950a <_scanf_float+0x2c6>
 8019530:	3d03      	subs	r5, #3
 8019532:	b2ed      	uxtb	r5, r5
 8019534:	1b76      	subs	r6, r6, r5
 8019536:	6823      	ldr	r3, [r4, #0]
 8019538:	05da      	lsls	r2, r3, #23
 801953a:	d52f      	bpl.n	801959c <_scanf_float+0x358>
 801953c:	055b      	lsls	r3, r3, #21
 801953e:	d510      	bpl.n	8019562 <_scanf_float+0x31e>
 8019540:	455e      	cmp	r6, fp
 8019542:	f67f aebf 	bls.w	80192c4 <_scanf_float+0x80>
 8019546:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801954a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801954e:	463a      	mov	r2, r7
 8019550:	4640      	mov	r0, r8
 8019552:	4798      	blx	r3
 8019554:	6923      	ldr	r3, [r4, #16]
 8019556:	3b01      	subs	r3, #1
 8019558:	6123      	str	r3, [r4, #16]
 801955a:	e7f1      	b.n	8019540 <_scanf_float+0x2fc>
 801955c:	46aa      	mov	sl, r5
 801955e:	9602      	str	r6, [sp, #8]
 8019560:	e7df      	b.n	8019522 <_scanf_float+0x2de>
 8019562:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8019566:	6923      	ldr	r3, [r4, #16]
 8019568:	2965      	cmp	r1, #101	; 0x65
 801956a:	f103 33ff 	add.w	r3, r3, #4294967295
 801956e:	f106 35ff 	add.w	r5, r6, #4294967295
 8019572:	6123      	str	r3, [r4, #16]
 8019574:	d00c      	beq.n	8019590 <_scanf_float+0x34c>
 8019576:	2945      	cmp	r1, #69	; 0x45
 8019578:	d00a      	beq.n	8019590 <_scanf_float+0x34c>
 801957a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801957e:	463a      	mov	r2, r7
 8019580:	4640      	mov	r0, r8
 8019582:	4798      	blx	r3
 8019584:	6923      	ldr	r3, [r4, #16]
 8019586:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801958a:	3b01      	subs	r3, #1
 801958c:	1eb5      	subs	r5, r6, #2
 801958e:	6123      	str	r3, [r4, #16]
 8019590:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019594:	463a      	mov	r2, r7
 8019596:	4640      	mov	r0, r8
 8019598:	4798      	blx	r3
 801959a:	462e      	mov	r6, r5
 801959c:	6825      	ldr	r5, [r4, #0]
 801959e:	f015 0510 	ands.w	r5, r5, #16
 80195a2:	d14e      	bne.n	8019642 <_scanf_float+0x3fe>
 80195a4:	7035      	strb	r5, [r6, #0]
 80195a6:	6823      	ldr	r3, [r4, #0]
 80195a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80195ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80195b0:	d119      	bne.n	80195e6 <_scanf_float+0x3a2>
 80195b2:	9b01      	ldr	r3, [sp, #4]
 80195b4:	454b      	cmp	r3, r9
 80195b6:	eba3 0209 	sub.w	r2, r3, r9
 80195ba:	d121      	bne.n	8019600 <_scanf_float+0x3bc>
 80195bc:	2200      	movs	r2, #0
 80195be:	4659      	mov	r1, fp
 80195c0:	4640      	mov	r0, r8
 80195c2:	f000 fe67 	bl	801a294 <_strtod_r>
 80195c6:	6822      	ldr	r2, [r4, #0]
 80195c8:	9b03      	ldr	r3, [sp, #12]
 80195ca:	f012 0f02 	tst.w	r2, #2
 80195ce:	681b      	ldr	r3, [r3, #0]
 80195d0:	d021      	beq.n	8019616 <_scanf_float+0x3d2>
 80195d2:	9903      	ldr	r1, [sp, #12]
 80195d4:	1d1a      	adds	r2, r3, #4
 80195d6:	600a      	str	r2, [r1, #0]
 80195d8:	681b      	ldr	r3, [r3, #0]
 80195da:	ed83 0b00 	vstr	d0, [r3]
 80195de:	68e3      	ldr	r3, [r4, #12]
 80195e0:	3301      	adds	r3, #1
 80195e2:	60e3      	str	r3, [r4, #12]
 80195e4:	e66f      	b.n	80192c6 <_scanf_float+0x82>
 80195e6:	9b04      	ldr	r3, [sp, #16]
 80195e8:	2b00      	cmp	r3, #0
 80195ea:	d0e7      	beq.n	80195bc <_scanf_float+0x378>
 80195ec:	9905      	ldr	r1, [sp, #20]
 80195ee:	230a      	movs	r3, #10
 80195f0:	462a      	mov	r2, r5
 80195f2:	3101      	adds	r1, #1
 80195f4:	4640      	mov	r0, r8
 80195f6:	f000 fed5 	bl	801a3a4 <_strtol_r>
 80195fa:	9b04      	ldr	r3, [sp, #16]
 80195fc:	9e05      	ldr	r6, [sp, #20]
 80195fe:	1ac2      	subs	r2, r0, r3
 8019600:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8019604:	429e      	cmp	r6, r3
 8019606:	bf28      	it	cs
 8019608:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801960c:	490e      	ldr	r1, [pc, #56]	; (8019648 <_scanf_float+0x404>)
 801960e:	4630      	mov	r0, r6
 8019610:	f000 f824 	bl	801965c <siprintf>
 8019614:	e7d2      	b.n	80195bc <_scanf_float+0x378>
 8019616:	9903      	ldr	r1, [sp, #12]
 8019618:	f012 0f04 	tst.w	r2, #4
 801961c:	f103 0204 	add.w	r2, r3, #4
 8019620:	600a      	str	r2, [r1, #0]
 8019622:	d1d9      	bne.n	80195d8 <_scanf_float+0x394>
 8019624:	eeb4 0b40 	vcmp.f64	d0, d0
 8019628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801962c:	681e      	ldr	r6, [r3, #0]
 801962e:	d705      	bvc.n	801963c <_scanf_float+0x3f8>
 8019630:	4806      	ldr	r0, [pc, #24]	; (801964c <_scanf_float+0x408>)
 8019632:	f000 f80d 	bl	8019650 <nanf>
 8019636:	ed86 0a00 	vstr	s0, [r6]
 801963a:	e7d0      	b.n	80195de <_scanf_float+0x39a>
 801963c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8019640:	e7f9      	b.n	8019636 <_scanf_float+0x3f2>
 8019642:	2500      	movs	r5, #0
 8019644:	e63f      	b.n	80192c6 <_scanf_float+0x82>
 8019646:	bf00      	nop
 8019648:	0802b850 	.word	0x0802b850
 801964c:	0802bc58 	.word	0x0802bc58

08019650 <nanf>:
 8019650:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019658 <nanf+0x8>
 8019654:	4770      	bx	lr
 8019656:	bf00      	nop
 8019658:	7fc00000 	.word	0x7fc00000

0801965c <siprintf>:
 801965c:	b40e      	push	{r1, r2, r3}
 801965e:	b500      	push	{lr}
 8019660:	b09c      	sub	sp, #112	; 0x70
 8019662:	ab1d      	add	r3, sp, #116	; 0x74
 8019664:	9002      	str	r0, [sp, #8]
 8019666:	9006      	str	r0, [sp, #24]
 8019668:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801966c:	4809      	ldr	r0, [pc, #36]	; (8019694 <siprintf+0x38>)
 801966e:	9107      	str	r1, [sp, #28]
 8019670:	9104      	str	r1, [sp, #16]
 8019672:	4909      	ldr	r1, [pc, #36]	; (8019698 <siprintf+0x3c>)
 8019674:	f853 2b04 	ldr.w	r2, [r3], #4
 8019678:	9105      	str	r1, [sp, #20]
 801967a:	6800      	ldr	r0, [r0, #0]
 801967c:	9301      	str	r3, [sp, #4]
 801967e:	a902      	add	r1, sp, #8
 8019680:	f002 fe2a 	bl	801c2d8 <_svfiprintf_r>
 8019684:	9b02      	ldr	r3, [sp, #8]
 8019686:	2200      	movs	r2, #0
 8019688:	701a      	strb	r2, [r3, #0]
 801968a:	b01c      	add	sp, #112	; 0x70
 801968c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019690:	b003      	add	sp, #12
 8019692:	4770      	bx	lr
 8019694:	20000028 	.word	0x20000028
 8019698:	ffff0208 	.word	0xffff0208

0801969c <strncmp>:
 801969c:	b510      	push	{r4, lr}
 801969e:	b17a      	cbz	r2, 80196c0 <strncmp+0x24>
 80196a0:	4603      	mov	r3, r0
 80196a2:	3901      	subs	r1, #1
 80196a4:	1884      	adds	r4, r0, r2
 80196a6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80196aa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80196ae:	4290      	cmp	r0, r2
 80196b0:	d101      	bne.n	80196b6 <strncmp+0x1a>
 80196b2:	42a3      	cmp	r3, r4
 80196b4:	d101      	bne.n	80196ba <strncmp+0x1e>
 80196b6:	1a80      	subs	r0, r0, r2
 80196b8:	bd10      	pop	{r4, pc}
 80196ba:	2800      	cmp	r0, #0
 80196bc:	d1f3      	bne.n	80196a6 <strncmp+0xa>
 80196be:	e7fa      	b.n	80196b6 <strncmp+0x1a>
 80196c0:	4610      	mov	r0, r2
 80196c2:	e7f9      	b.n	80196b8 <strncmp+0x1c>

080196c4 <strstr>:
 80196c4:	780a      	ldrb	r2, [r1, #0]
 80196c6:	b570      	push	{r4, r5, r6, lr}
 80196c8:	b96a      	cbnz	r2, 80196e6 <strstr+0x22>
 80196ca:	bd70      	pop	{r4, r5, r6, pc}
 80196cc:	429a      	cmp	r2, r3
 80196ce:	d109      	bne.n	80196e4 <strstr+0x20>
 80196d0:	460c      	mov	r4, r1
 80196d2:	4605      	mov	r5, r0
 80196d4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80196d8:	2b00      	cmp	r3, #0
 80196da:	d0f6      	beq.n	80196ca <strstr+0x6>
 80196dc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80196e0:	429e      	cmp	r6, r3
 80196e2:	d0f7      	beq.n	80196d4 <strstr+0x10>
 80196e4:	3001      	adds	r0, #1
 80196e6:	7803      	ldrb	r3, [r0, #0]
 80196e8:	2b00      	cmp	r3, #0
 80196ea:	d1ef      	bne.n	80196cc <strstr+0x8>
 80196ec:	4618      	mov	r0, r3
 80196ee:	e7ec      	b.n	80196ca <strstr+0x6>

080196f0 <sulp>:
 80196f0:	b570      	push	{r4, r5, r6, lr}
 80196f2:	4604      	mov	r4, r0
 80196f4:	460d      	mov	r5, r1
 80196f6:	4616      	mov	r6, r2
 80196f8:	ec45 4b10 	vmov	d0, r4, r5
 80196fc:	f002 fb4e 	bl	801bd9c <__ulp>
 8019700:	b17e      	cbz	r6, 8019722 <sulp+0x32>
 8019702:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8019706:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801970a:	2b00      	cmp	r3, #0
 801970c:	dd09      	ble.n	8019722 <sulp+0x32>
 801970e:	051b      	lsls	r3, r3, #20
 8019710:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8019714:	2000      	movs	r0, #0
 8019716:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 801971a:	ec41 0b17 	vmov	d7, r0, r1
 801971e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8019722:	bd70      	pop	{r4, r5, r6, pc}
 8019724:	0000      	movs	r0, r0
	...

08019728 <_strtod_l>:
 8019728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801972c:	ed2d 8b0e 	vpush	{d8-d14}
 8019730:	b097      	sub	sp, #92	; 0x5c
 8019732:	461f      	mov	r7, r3
 8019734:	2300      	movs	r3, #0
 8019736:	9312      	str	r3, [sp, #72]	; 0x48
 8019738:	4ba1      	ldr	r3, [pc, #644]	; (80199c0 <_strtod_l+0x298>)
 801973a:	920d      	str	r2, [sp, #52]	; 0x34
 801973c:	681b      	ldr	r3, [r3, #0]
 801973e:	9307      	str	r3, [sp, #28]
 8019740:	4604      	mov	r4, r0
 8019742:	4618      	mov	r0, r3
 8019744:	468b      	mov	fp, r1
 8019746:	f7ee fddb 	bl	8008300 <strlen>
 801974a:	f04f 0800 	mov.w	r8, #0
 801974e:	4605      	mov	r5, r0
 8019750:	f04f 0900 	mov.w	r9, #0
 8019754:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8019758:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801975a:	7813      	ldrb	r3, [r2, #0]
 801975c:	2b2b      	cmp	r3, #43	; 0x2b
 801975e:	d04d      	beq.n	80197fc <_strtod_l+0xd4>
 8019760:	d83a      	bhi.n	80197d8 <_strtod_l+0xb0>
 8019762:	2b0d      	cmp	r3, #13
 8019764:	d833      	bhi.n	80197ce <_strtod_l+0xa6>
 8019766:	2b08      	cmp	r3, #8
 8019768:	d833      	bhi.n	80197d2 <_strtod_l+0xaa>
 801976a:	2b00      	cmp	r3, #0
 801976c:	d03d      	beq.n	80197ea <_strtod_l+0xc2>
 801976e:	2300      	movs	r3, #0
 8019770:	9308      	str	r3, [sp, #32]
 8019772:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8019774:	7833      	ldrb	r3, [r6, #0]
 8019776:	2b30      	cmp	r3, #48	; 0x30
 8019778:	f040 80b0 	bne.w	80198dc <_strtod_l+0x1b4>
 801977c:	7873      	ldrb	r3, [r6, #1]
 801977e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8019782:	2b58      	cmp	r3, #88	; 0x58
 8019784:	d167      	bne.n	8019856 <_strtod_l+0x12e>
 8019786:	9b08      	ldr	r3, [sp, #32]
 8019788:	9301      	str	r3, [sp, #4]
 801978a:	ab12      	add	r3, sp, #72	; 0x48
 801978c:	9702      	str	r7, [sp, #8]
 801978e:	9300      	str	r3, [sp, #0]
 8019790:	4a8c      	ldr	r2, [pc, #560]	; (80199c4 <_strtod_l+0x29c>)
 8019792:	ab13      	add	r3, sp, #76	; 0x4c
 8019794:	a911      	add	r1, sp, #68	; 0x44
 8019796:	4620      	mov	r0, r4
 8019798:	f001 fc68 	bl	801b06c <__gethex>
 801979c:	f010 0507 	ands.w	r5, r0, #7
 80197a0:	4607      	mov	r7, r0
 80197a2:	d005      	beq.n	80197b0 <_strtod_l+0x88>
 80197a4:	2d06      	cmp	r5, #6
 80197a6:	d12b      	bne.n	8019800 <_strtod_l+0xd8>
 80197a8:	3601      	adds	r6, #1
 80197aa:	2300      	movs	r3, #0
 80197ac:	9611      	str	r6, [sp, #68]	; 0x44
 80197ae:	9308      	str	r3, [sp, #32]
 80197b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80197b2:	2b00      	cmp	r3, #0
 80197b4:	f040 854e 	bne.w	801a254 <_strtod_l+0xb2c>
 80197b8:	9b08      	ldr	r3, [sp, #32]
 80197ba:	b1e3      	cbz	r3, 80197f6 <_strtod_l+0xce>
 80197bc:	ec49 8b17 	vmov	d7, r8, r9
 80197c0:	eeb1 0b47 	vneg.f64	d0, d7
 80197c4:	b017      	add	sp, #92	; 0x5c
 80197c6:	ecbd 8b0e 	vpop	{d8-d14}
 80197ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197ce:	2b20      	cmp	r3, #32
 80197d0:	d1cd      	bne.n	801976e <_strtod_l+0x46>
 80197d2:	3201      	adds	r2, #1
 80197d4:	9211      	str	r2, [sp, #68]	; 0x44
 80197d6:	e7bf      	b.n	8019758 <_strtod_l+0x30>
 80197d8:	2b2d      	cmp	r3, #45	; 0x2d
 80197da:	d1c8      	bne.n	801976e <_strtod_l+0x46>
 80197dc:	2301      	movs	r3, #1
 80197de:	9308      	str	r3, [sp, #32]
 80197e0:	1c53      	adds	r3, r2, #1
 80197e2:	9311      	str	r3, [sp, #68]	; 0x44
 80197e4:	7853      	ldrb	r3, [r2, #1]
 80197e6:	2b00      	cmp	r3, #0
 80197e8:	d1c3      	bne.n	8019772 <_strtod_l+0x4a>
 80197ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80197ec:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80197f0:	2b00      	cmp	r3, #0
 80197f2:	f040 852d 	bne.w	801a250 <_strtod_l+0xb28>
 80197f6:	ec49 8b10 	vmov	d0, r8, r9
 80197fa:	e7e3      	b.n	80197c4 <_strtod_l+0x9c>
 80197fc:	2300      	movs	r3, #0
 80197fe:	e7ee      	b.n	80197de <_strtod_l+0xb6>
 8019800:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019802:	b13a      	cbz	r2, 8019814 <_strtod_l+0xec>
 8019804:	2135      	movs	r1, #53	; 0x35
 8019806:	a814      	add	r0, sp, #80	; 0x50
 8019808:	f002 fbd0 	bl	801bfac <__copybits>
 801980c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801980e:	4620      	mov	r0, r4
 8019810:	f001 ff92 	bl	801b738 <_Bfree>
 8019814:	3d01      	subs	r5, #1
 8019816:	2d04      	cmp	r5, #4
 8019818:	d806      	bhi.n	8019828 <_strtod_l+0x100>
 801981a:	e8df f005 	tbb	[pc, r5]
 801981e:	030a      	.short	0x030a
 8019820:	1714      	.short	0x1714
 8019822:	0a          	.byte	0x0a
 8019823:	00          	.byte	0x00
 8019824:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8019828:	073f      	lsls	r7, r7, #28
 801982a:	d5c1      	bpl.n	80197b0 <_strtod_l+0x88>
 801982c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8019830:	e7be      	b.n	80197b0 <_strtod_l+0x88>
 8019832:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8019836:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019838:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801983c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8019840:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8019844:	e7f0      	b.n	8019828 <_strtod_l+0x100>
 8019846:	f8df 9180 	ldr.w	r9, [pc, #384]	; 80199c8 <_strtod_l+0x2a0>
 801984a:	e7ed      	b.n	8019828 <_strtod_l+0x100>
 801984c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8019850:	f04f 38ff 	mov.w	r8, #4294967295
 8019854:	e7e8      	b.n	8019828 <_strtod_l+0x100>
 8019856:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019858:	1c5a      	adds	r2, r3, #1
 801985a:	9211      	str	r2, [sp, #68]	; 0x44
 801985c:	785b      	ldrb	r3, [r3, #1]
 801985e:	2b30      	cmp	r3, #48	; 0x30
 8019860:	d0f9      	beq.n	8019856 <_strtod_l+0x12e>
 8019862:	2b00      	cmp	r3, #0
 8019864:	d0a4      	beq.n	80197b0 <_strtod_l+0x88>
 8019866:	2301      	movs	r3, #1
 8019868:	f04f 0a00 	mov.w	sl, #0
 801986c:	9304      	str	r3, [sp, #16]
 801986e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019870:	930a      	str	r3, [sp, #40]	; 0x28
 8019872:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8019876:	f8cd a018 	str.w	sl, [sp, #24]
 801987a:	220a      	movs	r2, #10
 801987c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801987e:	7807      	ldrb	r7, [r0, #0]
 8019880:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8019884:	b2d9      	uxtb	r1, r3
 8019886:	2909      	cmp	r1, #9
 8019888:	d92a      	bls.n	80198e0 <_strtod_l+0x1b8>
 801988a:	9907      	ldr	r1, [sp, #28]
 801988c:	462a      	mov	r2, r5
 801988e:	f7ff ff05 	bl	801969c <strncmp>
 8019892:	2800      	cmp	r0, #0
 8019894:	d033      	beq.n	80198fe <_strtod_l+0x1d6>
 8019896:	2000      	movs	r0, #0
 8019898:	9b06      	ldr	r3, [sp, #24]
 801989a:	463a      	mov	r2, r7
 801989c:	4601      	mov	r1, r0
 801989e:	4607      	mov	r7, r0
 80198a0:	2a65      	cmp	r2, #101	; 0x65
 80198a2:	d001      	beq.n	80198a8 <_strtod_l+0x180>
 80198a4:	2a45      	cmp	r2, #69	; 0x45
 80198a6:	d117      	bne.n	80198d8 <_strtod_l+0x1b0>
 80198a8:	b91b      	cbnz	r3, 80198b2 <_strtod_l+0x18a>
 80198aa:	9b04      	ldr	r3, [sp, #16]
 80198ac:	4303      	orrs	r3, r0
 80198ae:	d09c      	beq.n	80197ea <_strtod_l+0xc2>
 80198b0:	2300      	movs	r3, #0
 80198b2:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 80198b6:	f10b 0201 	add.w	r2, fp, #1
 80198ba:	9211      	str	r2, [sp, #68]	; 0x44
 80198bc:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80198c0:	2a2b      	cmp	r2, #43	; 0x2b
 80198c2:	d071      	beq.n	80199a8 <_strtod_l+0x280>
 80198c4:	2a2d      	cmp	r2, #45	; 0x2d
 80198c6:	d077      	beq.n	80199b8 <_strtod_l+0x290>
 80198c8:	f04f 0e00 	mov.w	lr, #0
 80198cc:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80198d0:	2d09      	cmp	r5, #9
 80198d2:	d97f      	bls.n	80199d4 <_strtod_l+0x2ac>
 80198d4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80198d8:	2500      	movs	r5, #0
 80198da:	e09b      	b.n	8019a14 <_strtod_l+0x2ec>
 80198dc:	2300      	movs	r3, #0
 80198de:	e7c3      	b.n	8019868 <_strtod_l+0x140>
 80198e0:	9906      	ldr	r1, [sp, #24]
 80198e2:	2908      	cmp	r1, #8
 80198e4:	bfdd      	ittte	le
 80198e6:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80198e8:	fb02 3301 	mlale	r3, r2, r1, r3
 80198ec:	9309      	strle	r3, [sp, #36]	; 0x24
 80198ee:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80198f2:	9b06      	ldr	r3, [sp, #24]
 80198f4:	3001      	adds	r0, #1
 80198f6:	3301      	adds	r3, #1
 80198f8:	9306      	str	r3, [sp, #24]
 80198fa:	9011      	str	r0, [sp, #68]	; 0x44
 80198fc:	e7be      	b.n	801987c <_strtod_l+0x154>
 80198fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019900:	195a      	adds	r2, r3, r5
 8019902:	9211      	str	r2, [sp, #68]	; 0x44
 8019904:	5d5a      	ldrb	r2, [r3, r5]
 8019906:	9b06      	ldr	r3, [sp, #24]
 8019908:	b3a3      	cbz	r3, 8019974 <_strtod_l+0x24c>
 801990a:	4607      	mov	r7, r0
 801990c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8019910:	2909      	cmp	r1, #9
 8019912:	d912      	bls.n	801993a <_strtod_l+0x212>
 8019914:	2101      	movs	r1, #1
 8019916:	e7c3      	b.n	80198a0 <_strtod_l+0x178>
 8019918:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801991a:	1c5a      	adds	r2, r3, #1
 801991c:	9211      	str	r2, [sp, #68]	; 0x44
 801991e:	785a      	ldrb	r2, [r3, #1]
 8019920:	3001      	adds	r0, #1
 8019922:	2a30      	cmp	r2, #48	; 0x30
 8019924:	d0f8      	beq.n	8019918 <_strtod_l+0x1f0>
 8019926:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801992a:	2b08      	cmp	r3, #8
 801992c:	f200 8497 	bhi.w	801a25e <_strtod_l+0xb36>
 8019930:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019932:	930a      	str	r3, [sp, #40]	; 0x28
 8019934:	4607      	mov	r7, r0
 8019936:	2000      	movs	r0, #0
 8019938:	4603      	mov	r3, r0
 801993a:	3a30      	subs	r2, #48	; 0x30
 801993c:	f100 0101 	add.w	r1, r0, #1
 8019940:	d012      	beq.n	8019968 <_strtod_l+0x240>
 8019942:	440f      	add	r7, r1
 8019944:	eb00 0c03 	add.w	ip, r0, r3
 8019948:	4619      	mov	r1, r3
 801994a:	250a      	movs	r5, #10
 801994c:	4561      	cmp	r1, ip
 801994e:	d113      	bne.n	8019978 <_strtod_l+0x250>
 8019950:	1819      	adds	r1, r3, r0
 8019952:	2908      	cmp	r1, #8
 8019954:	f103 0301 	add.w	r3, r3, #1
 8019958:	4403      	add	r3, r0
 801995a:	dc1c      	bgt.n	8019996 <_strtod_l+0x26e>
 801995c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801995e:	210a      	movs	r1, #10
 8019960:	fb01 2200 	mla	r2, r1, r0, r2
 8019964:	9209      	str	r2, [sp, #36]	; 0x24
 8019966:	2100      	movs	r1, #0
 8019968:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801996a:	1c50      	adds	r0, r2, #1
 801996c:	9011      	str	r0, [sp, #68]	; 0x44
 801996e:	7852      	ldrb	r2, [r2, #1]
 8019970:	4608      	mov	r0, r1
 8019972:	e7cb      	b.n	801990c <_strtod_l+0x1e4>
 8019974:	9806      	ldr	r0, [sp, #24]
 8019976:	e7d4      	b.n	8019922 <_strtod_l+0x1fa>
 8019978:	2908      	cmp	r1, #8
 801997a:	dc04      	bgt.n	8019986 <_strtod_l+0x25e>
 801997c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801997e:	436e      	muls	r6, r5
 8019980:	9609      	str	r6, [sp, #36]	; 0x24
 8019982:	3101      	adds	r1, #1
 8019984:	e7e2      	b.n	801994c <_strtod_l+0x224>
 8019986:	f101 0e01 	add.w	lr, r1, #1
 801998a:	f1be 0f10 	cmp.w	lr, #16
 801998e:	bfd8      	it	le
 8019990:	fb05 fa0a 	mulle.w	sl, r5, sl
 8019994:	e7f5      	b.n	8019982 <_strtod_l+0x25a>
 8019996:	2b10      	cmp	r3, #16
 8019998:	bfdc      	itt	le
 801999a:	210a      	movle	r1, #10
 801999c:	fb01 2a0a 	mlale	sl, r1, sl, r2
 80199a0:	e7e1      	b.n	8019966 <_strtod_l+0x23e>
 80199a2:	2700      	movs	r7, #0
 80199a4:	2101      	movs	r1, #1
 80199a6:	e780      	b.n	80198aa <_strtod_l+0x182>
 80199a8:	f04f 0e00 	mov.w	lr, #0
 80199ac:	f10b 0202 	add.w	r2, fp, #2
 80199b0:	9211      	str	r2, [sp, #68]	; 0x44
 80199b2:	f89b 2002 	ldrb.w	r2, [fp, #2]
 80199b6:	e789      	b.n	80198cc <_strtod_l+0x1a4>
 80199b8:	f04f 0e01 	mov.w	lr, #1
 80199bc:	e7f6      	b.n	80199ac <_strtod_l+0x284>
 80199be:	bf00      	nop
 80199c0:	0802baa0 	.word	0x0802baa0
 80199c4:	0802b858 	.word	0x0802b858
 80199c8:	7ff00000 	.word	0x7ff00000
 80199cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80199ce:	1c55      	adds	r5, r2, #1
 80199d0:	9511      	str	r5, [sp, #68]	; 0x44
 80199d2:	7852      	ldrb	r2, [r2, #1]
 80199d4:	2a30      	cmp	r2, #48	; 0x30
 80199d6:	d0f9      	beq.n	80199cc <_strtod_l+0x2a4>
 80199d8:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80199dc:	2d08      	cmp	r5, #8
 80199de:	f63f af7b 	bhi.w	80198d8 <_strtod_l+0x1b0>
 80199e2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80199e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80199e8:	9207      	str	r2, [sp, #28]
 80199ea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80199ec:	1c55      	adds	r5, r2, #1
 80199ee:	9511      	str	r5, [sp, #68]	; 0x44
 80199f0:	7852      	ldrb	r2, [r2, #1]
 80199f2:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80199f6:	2e09      	cmp	r6, #9
 80199f8:	d937      	bls.n	8019a6a <_strtod_l+0x342>
 80199fa:	9e07      	ldr	r6, [sp, #28]
 80199fc:	1bad      	subs	r5, r5, r6
 80199fe:	2d08      	cmp	r5, #8
 8019a00:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8019a04:	dc02      	bgt.n	8019a0c <_strtod_l+0x2e4>
 8019a06:	4565      	cmp	r5, ip
 8019a08:	bfa8      	it	ge
 8019a0a:	4665      	movge	r5, ip
 8019a0c:	f1be 0f00 	cmp.w	lr, #0
 8019a10:	d000      	beq.n	8019a14 <_strtod_l+0x2ec>
 8019a12:	426d      	negs	r5, r5
 8019a14:	2b00      	cmp	r3, #0
 8019a16:	d14d      	bne.n	8019ab4 <_strtod_l+0x38c>
 8019a18:	9b04      	ldr	r3, [sp, #16]
 8019a1a:	4303      	orrs	r3, r0
 8019a1c:	f47f aec8 	bne.w	80197b0 <_strtod_l+0x88>
 8019a20:	2900      	cmp	r1, #0
 8019a22:	f47f aee2 	bne.w	80197ea <_strtod_l+0xc2>
 8019a26:	2a69      	cmp	r2, #105	; 0x69
 8019a28:	d027      	beq.n	8019a7a <_strtod_l+0x352>
 8019a2a:	dc24      	bgt.n	8019a76 <_strtod_l+0x34e>
 8019a2c:	2a49      	cmp	r2, #73	; 0x49
 8019a2e:	d024      	beq.n	8019a7a <_strtod_l+0x352>
 8019a30:	2a4e      	cmp	r2, #78	; 0x4e
 8019a32:	f47f aeda 	bne.w	80197ea <_strtod_l+0xc2>
 8019a36:	4996      	ldr	r1, [pc, #600]	; (8019c90 <_strtod_l+0x568>)
 8019a38:	a811      	add	r0, sp, #68	; 0x44
 8019a3a:	f001 fd6f 	bl	801b51c <__match>
 8019a3e:	2800      	cmp	r0, #0
 8019a40:	f43f aed3 	beq.w	80197ea <_strtod_l+0xc2>
 8019a44:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019a46:	781b      	ldrb	r3, [r3, #0]
 8019a48:	2b28      	cmp	r3, #40	; 0x28
 8019a4a:	d12d      	bne.n	8019aa8 <_strtod_l+0x380>
 8019a4c:	4991      	ldr	r1, [pc, #580]	; (8019c94 <_strtod_l+0x56c>)
 8019a4e:	aa14      	add	r2, sp, #80	; 0x50
 8019a50:	a811      	add	r0, sp, #68	; 0x44
 8019a52:	f001 fd77 	bl	801b544 <__hexnan>
 8019a56:	2805      	cmp	r0, #5
 8019a58:	d126      	bne.n	8019aa8 <_strtod_l+0x380>
 8019a5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019a5c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8019a60:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8019a64:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8019a68:	e6a2      	b.n	80197b0 <_strtod_l+0x88>
 8019a6a:	250a      	movs	r5, #10
 8019a6c:	fb05 250c 	mla	r5, r5, ip, r2
 8019a70:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8019a74:	e7b9      	b.n	80199ea <_strtod_l+0x2c2>
 8019a76:	2a6e      	cmp	r2, #110	; 0x6e
 8019a78:	e7db      	b.n	8019a32 <_strtod_l+0x30a>
 8019a7a:	4987      	ldr	r1, [pc, #540]	; (8019c98 <_strtod_l+0x570>)
 8019a7c:	a811      	add	r0, sp, #68	; 0x44
 8019a7e:	f001 fd4d 	bl	801b51c <__match>
 8019a82:	2800      	cmp	r0, #0
 8019a84:	f43f aeb1 	beq.w	80197ea <_strtod_l+0xc2>
 8019a88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019a8a:	4984      	ldr	r1, [pc, #528]	; (8019c9c <_strtod_l+0x574>)
 8019a8c:	3b01      	subs	r3, #1
 8019a8e:	a811      	add	r0, sp, #68	; 0x44
 8019a90:	9311      	str	r3, [sp, #68]	; 0x44
 8019a92:	f001 fd43 	bl	801b51c <__match>
 8019a96:	b910      	cbnz	r0, 8019a9e <_strtod_l+0x376>
 8019a98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019a9a:	3301      	adds	r3, #1
 8019a9c:	9311      	str	r3, [sp, #68]	; 0x44
 8019a9e:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8019cb0 <_strtod_l+0x588>
 8019aa2:	f04f 0800 	mov.w	r8, #0
 8019aa6:	e683      	b.n	80197b0 <_strtod_l+0x88>
 8019aa8:	487d      	ldr	r0, [pc, #500]	; (8019ca0 <_strtod_l+0x578>)
 8019aaa:	f002 fd15 	bl	801c4d8 <nan>
 8019aae:	ec59 8b10 	vmov	r8, r9, d0
 8019ab2:	e67d      	b.n	80197b0 <_strtod_l+0x88>
 8019ab4:	1bea      	subs	r2, r5, r7
 8019ab6:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8019aba:	9207      	str	r2, [sp, #28]
 8019abc:	9a06      	ldr	r2, [sp, #24]
 8019abe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8019ac2:	2a00      	cmp	r2, #0
 8019ac4:	bf08      	it	eq
 8019ac6:	461a      	moveq	r2, r3
 8019ac8:	2b10      	cmp	r3, #16
 8019aca:	9206      	str	r2, [sp, #24]
 8019acc:	461a      	mov	r2, r3
 8019ace:	bfa8      	it	ge
 8019ad0:	2210      	movge	r2, #16
 8019ad2:	2b09      	cmp	r3, #9
 8019ad4:	ec59 8b17 	vmov	r8, r9, d7
 8019ad8:	dd0c      	ble.n	8019af4 <_strtod_l+0x3cc>
 8019ada:	4972      	ldr	r1, [pc, #456]	; (8019ca4 <_strtod_l+0x57c>)
 8019adc:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8019ae0:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8019ae4:	ee06 aa90 	vmov	s13, sl
 8019ae8:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8019aec:	eea7 6b05 	vfma.f64	d6, d7, d5
 8019af0:	ec59 8b16 	vmov	r8, r9, d6
 8019af4:	2b0f      	cmp	r3, #15
 8019af6:	dc36      	bgt.n	8019b66 <_strtod_l+0x43e>
 8019af8:	9907      	ldr	r1, [sp, #28]
 8019afa:	2900      	cmp	r1, #0
 8019afc:	f43f ae58 	beq.w	80197b0 <_strtod_l+0x88>
 8019b00:	dd23      	ble.n	8019b4a <_strtod_l+0x422>
 8019b02:	2916      	cmp	r1, #22
 8019b04:	dc0b      	bgt.n	8019b1e <_strtod_l+0x3f6>
 8019b06:	4b67      	ldr	r3, [pc, #412]	; (8019ca4 <_strtod_l+0x57c>)
 8019b08:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8019b0c:	ed93 7b00 	vldr	d7, [r3]
 8019b10:	ec49 8b16 	vmov	d6, r8, r9
 8019b14:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019b18:	ec59 8b17 	vmov	r8, r9, d7
 8019b1c:	e648      	b.n	80197b0 <_strtod_l+0x88>
 8019b1e:	9807      	ldr	r0, [sp, #28]
 8019b20:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8019b24:	4281      	cmp	r1, r0
 8019b26:	db1e      	blt.n	8019b66 <_strtod_l+0x43e>
 8019b28:	4a5e      	ldr	r2, [pc, #376]	; (8019ca4 <_strtod_l+0x57c>)
 8019b2a:	f1c3 030f 	rsb	r3, r3, #15
 8019b2e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8019b32:	ed91 7b00 	vldr	d7, [r1]
 8019b36:	ec49 8b16 	vmov	d6, r8, r9
 8019b3a:	1ac3      	subs	r3, r0, r3
 8019b3c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8019b40:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019b44:	ed92 6b00 	vldr	d6, [r2]
 8019b48:	e7e4      	b.n	8019b14 <_strtod_l+0x3ec>
 8019b4a:	9907      	ldr	r1, [sp, #28]
 8019b4c:	3116      	adds	r1, #22
 8019b4e:	db0a      	blt.n	8019b66 <_strtod_l+0x43e>
 8019b50:	4b54      	ldr	r3, [pc, #336]	; (8019ca4 <_strtod_l+0x57c>)
 8019b52:	1b7d      	subs	r5, r7, r5
 8019b54:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8019b58:	ed95 7b00 	vldr	d7, [r5]
 8019b5c:	ec49 8b16 	vmov	d6, r8, r9
 8019b60:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8019b64:	e7d8      	b.n	8019b18 <_strtod_l+0x3f0>
 8019b66:	9907      	ldr	r1, [sp, #28]
 8019b68:	1a9a      	subs	r2, r3, r2
 8019b6a:	440a      	add	r2, r1
 8019b6c:	2a00      	cmp	r2, #0
 8019b6e:	dd6f      	ble.n	8019c50 <_strtod_l+0x528>
 8019b70:	f012 000f 	ands.w	r0, r2, #15
 8019b74:	d00a      	beq.n	8019b8c <_strtod_l+0x464>
 8019b76:	494b      	ldr	r1, [pc, #300]	; (8019ca4 <_strtod_l+0x57c>)
 8019b78:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8019b7c:	ed91 7b00 	vldr	d7, [r1]
 8019b80:	ec49 8b16 	vmov	d6, r8, r9
 8019b84:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019b88:	ec59 8b17 	vmov	r8, r9, d7
 8019b8c:	f032 020f 	bics.w	r2, r2, #15
 8019b90:	d04f      	beq.n	8019c32 <_strtod_l+0x50a>
 8019b92:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8019b96:	dd22      	ble.n	8019bde <_strtod_l+0x4b6>
 8019b98:	2500      	movs	r5, #0
 8019b9a:	462e      	mov	r6, r5
 8019b9c:	9506      	str	r5, [sp, #24]
 8019b9e:	462f      	mov	r7, r5
 8019ba0:	2322      	movs	r3, #34	; 0x22
 8019ba2:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8019cb0 <_strtod_l+0x588>
 8019ba6:	6023      	str	r3, [r4, #0]
 8019ba8:	f04f 0800 	mov.w	r8, #0
 8019bac:	9b06      	ldr	r3, [sp, #24]
 8019bae:	2b00      	cmp	r3, #0
 8019bb0:	f43f adfe 	beq.w	80197b0 <_strtod_l+0x88>
 8019bb4:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019bb6:	4620      	mov	r0, r4
 8019bb8:	f001 fdbe 	bl	801b738 <_Bfree>
 8019bbc:	4639      	mov	r1, r7
 8019bbe:	4620      	mov	r0, r4
 8019bc0:	f001 fdba 	bl	801b738 <_Bfree>
 8019bc4:	4631      	mov	r1, r6
 8019bc6:	4620      	mov	r0, r4
 8019bc8:	f001 fdb6 	bl	801b738 <_Bfree>
 8019bcc:	9906      	ldr	r1, [sp, #24]
 8019bce:	4620      	mov	r0, r4
 8019bd0:	f001 fdb2 	bl	801b738 <_Bfree>
 8019bd4:	4629      	mov	r1, r5
 8019bd6:	4620      	mov	r0, r4
 8019bd8:	f001 fdae 	bl	801b738 <_Bfree>
 8019bdc:	e5e8      	b.n	80197b0 <_strtod_l+0x88>
 8019bde:	2000      	movs	r0, #0
 8019be0:	ec49 8b17 	vmov	d7, r8, r9
 8019be4:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8019ca8 <_strtod_l+0x580>
 8019be8:	1112      	asrs	r2, r2, #4
 8019bea:	4601      	mov	r1, r0
 8019bec:	2a01      	cmp	r2, #1
 8019bee:	dc23      	bgt.n	8019c38 <_strtod_l+0x510>
 8019bf0:	b108      	cbz	r0, 8019bf6 <_strtod_l+0x4ce>
 8019bf2:	ec59 8b17 	vmov	r8, r9, d7
 8019bf6:	4a2c      	ldr	r2, [pc, #176]	; (8019ca8 <_strtod_l+0x580>)
 8019bf8:	482c      	ldr	r0, [pc, #176]	; (8019cac <_strtod_l+0x584>)
 8019bfa:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8019bfe:	ed92 7b00 	vldr	d7, [r2]
 8019c02:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8019c06:	ec49 8b16 	vmov	d6, r8, r9
 8019c0a:	4a29      	ldr	r2, [pc, #164]	; (8019cb0 <_strtod_l+0x588>)
 8019c0c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019c10:	ee17 1a90 	vmov	r1, s15
 8019c14:	400a      	ands	r2, r1
 8019c16:	4282      	cmp	r2, r0
 8019c18:	ec59 8b17 	vmov	r8, r9, d7
 8019c1c:	d8bc      	bhi.n	8019b98 <_strtod_l+0x470>
 8019c1e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8019c22:	4282      	cmp	r2, r0
 8019c24:	bf86      	itte	hi
 8019c26:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8019cb4 <_strtod_l+0x58c>
 8019c2a:	f04f 38ff 	movhi.w	r8, #4294967295
 8019c2e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8019c32:	2200      	movs	r2, #0
 8019c34:	9204      	str	r2, [sp, #16]
 8019c36:	e078      	b.n	8019d2a <_strtod_l+0x602>
 8019c38:	07d6      	lsls	r6, r2, #31
 8019c3a:	d504      	bpl.n	8019c46 <_strtod_l+0x51e>
 8019c3c:	ed9c 6b00 	vldr	d6, [ip]
 8019c40:	2001      	movs	r0, #1
 8019c42:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019c46:	3101      	adds	r1, #1
 8019c48:	1052      	asrs	r2, r2, #1
 8019c4a:	f10c 0c08 	add.w	ip, ip, #8
 8019c4e:	e7cd      	b.n	8019bec <_strtod_l+0x4c4>
 8019c50:	d0ef      	beq.n	8019c32 <_strtod_l+0x50a>
 8019c52:	4252      	negs	r2, r2
 8019c54:	f012 000f 	ands.w	r0, r2, #15
 8019c58:	d00a      	beq.n	8019c70 <_strtod_l+0x548>
 8019c5a:	4912      	ldr	r1, [pc, #72]	; (8019ca4 <_strtod_l+0x57c>)
 8019c5c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8019c60:	ed91 7b00 	vldr	d7, [r1]
 8019c64:	ec49 8b16 	vmov	d6, r8, r9
 8019c68:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8019c6c:	ec59 8b17 	vmov	r8, r9, d7
 8019c70:	1112      	asrs	r2, r2, #4
 8019c72:	d0de      	beq.n	8019c32 <_strtod_l+0x50a>
 8019c74:	2a1f      	cmp	r2, #31
 8019c76:	dd1f      	ble.n	8019cb8 <_strtod_l+0x590>
 8019c78:	2500      	movs	r5, #0
 8019c7a:	462e      	mov	r6, r5
 8019c7c:	9506      	str	r5, [sp, #24]
 8019c7e:	462f      	mov	r7, r5
 8019c80:	2322      	movs	r3, #34	; 0x22
 8019c82:	f04f 0800 	mov.w	r8, #0
 8019c86:	f04f 0900 	mov.w	r9, #0
 8019c8a:	6023      	str	r3, [r4, #0]
 8019c8c:	e78e      	b.n	8019bac <_strtod_l+0x484>
 8019c8e:	bf00      	nop
 8019c90:	0802b829 	.word	0x0802b829
 8019c94:	0802b86c 	.word	0x0802b86c
 8019c98:	0802b821 	.word	0x0802b821
 8019c9c:	0802b9ac 	.word	0x0802b9ac
 8019ca0:	0802bc58 	.word	0x0802bc58
 8019ca4:	0802bb38 	.word	0x0802bb38
 8019ca8:	0802bb10 	.word	0x0802bb10
 8019cac:	7ca00000 	.word	0x7ca00000
 8019cb0:	7ff00000 	.word	0x7ff00000
 8019cb4:	7fefffff 	.word	0x7fefffff
 8019cb8:	f012 0110 	ands.w	r1, r2, #16
 8019cbc:	bf18      	it	ne
 8019cbe:	216a      	movne	r1, #106	; 0x6a
 8019cc0:	9104      	str	r1, [sp, #16]
 8019cc2:	ec49 8b17 	vmov	d7, r8, r9
 8019cc6:	49be      	ldr	r1, [pc, #760]	; (8019fc0 <_strtod_l+0x898>)
 8019cc8:	2000      	movs	r0, #0
 8019cca:	07d6      	lsls	r6, r2, #31
 8019ccc:	d504      	bpl.n	8019cd8 <_strtod_l+0x5b0>
 8019cce:	ed91 6b00 	vldr	d6, [r1]
 8019cd2:	2001      	movs	r0, #1
 8019cd4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019cd8:	1052      	asrs	r2, r2, #1
 8019cda:	f101 0108 	add.w	r1, r1, #8
 8019cde:	d1f4      	bne.n	8019cca <_strtod_l+0x5a2>
 8019ce0:	b108      	cbz	r0, 8019ce6 <_strtod_l+0x5be>
 8019ce2:	ec59 8b17 	vmov	r8, r9, d7
 8019ce6:	9a04      	ldr	r2, [sp, #16]
 8019ce8:	b1c2      	cbz	r2, 8019d1c <_strtod_l+0x5f4>
 8019cea:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8019cee:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8019cf2:	2a00      	cmp	r2, #0
 8019cf4:	4648      	mov	r0, r9
 8019cf6:	dd11      	ble.n	8019d1c <_strtod_l+0x5f4>
 8019cf8:	2a1f      	cmp	r2, #31
 8019cfa:	f340 812e 	ble.w	8019f5a <_strtod_l+0x832>
 8019cfe:	2a34      	cmp	r2, #52	; 0x34
 8019d00:	bfde      	ittt	le
 8019d02:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8019d06:	f04f 32ff 	movle.w	r2, #4294967295
 8019d0a:	fa02 f101 	lslle.w	r1, r2, r1
 8019d0e:	f04f 0800 	mov.w	r8, #0
 8019d12:	bfcc      	ite	gt
 8019d14:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8019d18:	ea01 0900 	andle.w	r9, r1, r0
 8019d1c:	ec49 8b17 	vmov	d7, r8, r9
 8019d20:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d28:	d0a6      	beq.n	8019c78 <_strtod_l+0x550>
 8019d2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019d2c:	9200      	str	r2, [sp, #0]
 8019d2e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8019d30:	9a06      	ldr	r2, [sp, #24]
 8019d32:	4620      	mov	r0, r4
 8019d34:	f001 fd68 	bl	801b808 <__s2b>
 8019d38:	9006      	str	r0, [sp, #24]
 8019d3a:	2800      	cmp	r0, #0
 8019d3c:	f43f af2c 	beq.w	8019b98 <_strtod_l+0x470>
 8019d40:	9b07      	ldr	r3, [sp, #28]
 8019d42:	1b7d      	subs	r5, r7, r5
 8019d44:	2b00      	cmp	r3, #0
 8019d46:	bfb4      	ite	lt
 8019d48:	462b      	movlt	r3, r5
 8019d4a:	2300      	movge	r3, #0
 8019d4c:	9309      	str	r3, [sp, #36]	; 0x24
 8019d4e:	9b07      	ldr	r3, [sp, #28]
 8019d50:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8019fa0 <_strtod_l+0x878>
 8019d54:	ed9f ab94 	vldr	d10, [pc, #592]	; 8019fa8 <_strtod_l+0x880>
 8019d58:	ed9f bb95 	vldr	d11, [pc, #596]	; 8019fb0 <_strtod_l+0x888>
 8019d5c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019d60:	2500      	movs	r5, #0
 8019d62:	930c      	str	r3, [sp, #48]	; 0x30
 8019d64:	462e      	mov	r6, r5
 8019d66:	9b06      	ldr	r3, [sp, #24]
 8019d68:	4620      	mov	r0, r4
 8019d6a:	6859      	ldr	r1, [r3, #4]
 8019d6c:	f001 fca4 	bl	801b6b8 <_Balloc>
 8019d70:	4607      	mov	r7, r0
 8019d72:	2800      	cmp	r0, #0
 8019d74:	f43f af14 	beq.w	8019ba0 <_strtod_l+0x478>
 8019d78:	9b06      	ldr	r3, [sp, #24]
 8019d7a:	691a      	ldr	r2, [r3, #16]
 8019d7c:	3202      	adds	r2, #2
 8019d7e:	f103 010c 	add.w	r1, r3, #12
 8019d82:	0092      	lsls	r2, r2, #2
 8019d84:	300c      	adds	r0, #12
 8019d86:	f7fe fe05 	bl	8018994 <memcpy>
 8019d8a:	ec49 8b10 	vmov	d0, r8, r9
 8019d8e:	aa14      	add	r2, sp, #80	; 0x50
 8019d90:	a913      	add	r1, sp, #76	; 0x4c
 8019d92:	4620      	mov	r0, r4
 8019d94:	f002 f87e 	bl	801be94 <__d2b>
 8019d98:	ec49 8b18 	vmov	d8, r8, r9
 8019d9c:	9012      	str	r0, [sp, #72]	; 0x48
 8019d9e:	2800      	cmp	r0, #0
 8019da0:	f43f aefe 	beq.w	8019ba0 <_strtod_l+0x478>
 8019da4:	2101      	movs	r1, #1
 8019da6:	4620      	mov	r0, r4
 8019da8:	f001 fdc8 	bl	801b93c <__i2b>
 8019dac:	4606      	mov	r6, r0
 8019dae:	2800      	cmp	r0, #0
 8019db0:	f43f aef6 	beq.w	8019ba0 <_strtod_l+0x478>
 8019db4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019db6:	9914      	ldr	r1, [sp, #80]	; 0x50
 8019db8:	2b00      	cmp	r3, #0
 8019dba:	bfab      	itete	ge
 8019dbc:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8019dbe:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8019dc0:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8019dc4:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8019dc8:	bfac      	ite	ge
 8019dca:	eb03 0b02 	addge.w	fp, r3, r2
 8019dce:	eba2 0a03 	sublt.w	sl, r2, r3
 8019dd2:	9a04      	ldr	r2, [sp, #16]
 8019dd4:	1a9b      	subs	r3, r3, r2
 8019dd6:	440b      	add	r3, r1
 8019dd8:	4a7a      	ldr	r2, [pc, #488]	; (8019fc4 <_strtod_l+0x89c>)
 8019dda:	3b01      	subs	r3, #1
 8019ddc:	4293      	cmp	r3, r2
 8019dde:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8019de2:	f280 80cd 	bge.w	8019f80 <_strtod_l+0x858>
 8019de6:	1ad2      	subs	r2, r2, r3
 8019de8:	2a1f      	cmp	r2, #31
 8019dea:	eba1 0102 	sub.w	r1, r1, r2
 8019dee:	f04f 0001 	mov.w	r0, #1
 8019df2:	f300 80b9 	bgt.w	8019f68 <_strtod_l+0x840>
 8019df6:	fa00 f302 	lsl.w	r3, r0, r2
 8019dfa:	930b      	str	r3, [sp, #44]	; 0x2c
 8019dfc:	2300      	movs	r3, #0
 8019dfe:	930a      	str	r3, [sp, #40]	; 0x28
 8019e00:	eb0b 0301 	add.w	r3, fp, r1
 8019e04:	9a04      	ldr	r2, [sp, #16]
 8019e06:	459b      	cmp	fp, r3
 8019e08:	448a      	add	sl, r1
 8019e0a:	4492      	add	sl, r2
 8019e0c:	465a      	mov	r2, fp
 8019e0e:	bfa8      	it	ge
 8019e10:	461a      	movge	r2, r3
 8019e12:	4552      	cmp	r2, sl
 8019e14:	bfa8      	it	ge
 8019e16:	4652      	movge	r2, sl
 8019e18:	2a00      	cmp	r2, #0
 8019e1a:	bfc2      	ittt	gt
 8019e1c:	1a9b      	subgt	r3, r3, r2
 8019e1e:	ebaa 0a02 	subgt.w	sl, sl, r2
 8019e22:	ebab 0b02 	subgt.w	fp, fp, r2
 8019e26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019e28:	2a00      	cmp	r2, #0
 8019e2a:	dd18      	ble.n	8019e5e <_strtod_l+0x736>
 8019e2c:	4631      	mov	r1, r6
 8019e2e:	4620      	mov	r0, r4
 8019e30:	930f      	str	r3, [sp, #60]	; 0x3c
 8019e32:	f001 fe43 	bl	801babc <__pow5mult>
 8019e36:	4606      	mov	r6, r0
 8019e38:	2800      	cmp	r0, #0
 8019e3a:	f43f aeb1 	beq.w	8019ba0 <_strtod_l+0x478>
 8019e3e:	4601      	mov	r1, r0
 8019e40:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019e42:	4620      	mov	r0, r4
 8019e44:	f001 fd90 	bl	801b968 <__multiply>
 8019e48:	900e      	str	r0, [sp, #56]	; 0x38
 8019e4a:	2800      	cmp	r0, #0
 8019e4c:	f43f aea8 	beq.w	8019ba0 <_strtod_l+0x478>
 8019e50:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019e52:	4620      	mov	r0, r4
 8019e54:	f001 fc70 	bl	801b738 <_Bfree>
 8019e58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019e5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019e5c:	9212      	str	r2, [sp, #72]	; 0x48
 8019e5e:	2b00      	cmp	r3, #0
 8019e60:	f300 8093 	bgt.w	8019f8a <_strtod_l+0x862>
 8019e64:	9b07      	ldr	r3, [sp, #28]
 8019e66:	2b00      	cmp	r3, #0
 8019e68:	dd08      	ble.n	8019e7c <_strtod_l+0x754>
 8019e6a:	4639      	mov	r1, r7
 8019e6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019e6e:	4620      	mov	r0, r4
 8019e70:	f001 fe24 	bl	801babc <__pow5mult>
 8019e74:	4607      	mov	r7, r0
 8019e76:	2800      	cmp	r0, #0
 8019e78:	f43f ae92 	beq.w	8019ba0 <_strtod_l+0x478>
 8019e7c:	f1ba 0f00 	cmp.w	sl, #0
 8019e80:	dd08      	ble.n	8019e94 <_strtod_l+0x76c>
 8019e82:	4639      	mov	r1, r7
 8019e84:	4652      	mov	r2, sl
 8019e86:	4620      	mov	r0, r4
 8019e88:	f001 fe72 	bl	801bb70 <__lshift>
 8019e8c:	4607      	mov	r7, r0
 8019e8e:	2800      	cmp	r0, #0
 8019e90:	f43f ae86 	beq.w	8019ba0 <_strtod_l+0x478>
 8019e94:	f1bb 0f00 	cmp.w	fp, #0
 8019e98:	dd08      	ble.n	8019eac <_strtod_l+0x784>
 8019e9a:	4631      	mov	r1, r6
 8019e9c:	465a      	mov	r2, fp
 8019e9e:	4620      	mov	r0, r4
 8019ea0:	f001 fe66 	bl	801bb70 <__lshift>
 8019ea4:	4606      	mov	r6, r0
 8019ea6:	2800      	cmp	r0, #0
 8019ea8:	f43f ae7a 	beq.w	8019ba0 <_strtod_l+0x478>
 8019eac:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019eae:	463a      	mov	r2, r7
 8019eb0:	4620      	mov	r0, r4
 8019eb2:	f001 fee9 	bl	801bc88 <__mdiff>
 8019eb6:	4605      	mov	r5, r0
 8019eb8:	2800      	cmp	r0, #0
 8019eba:	f43f ae71 	beq.w	8019ba0 <_strtod_l+0x478>
 8019ebe:	2300      	movs	r3, #0
 8019ec0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8019ec4:	60c3      	str	r3, [r0, #12]
 8019ec6:	4631      	mov	r1, r6
 8019ec8:	f001 fec2 	bl	801bc50 <__mcmp>
 8019ecc:	2800      	cmp	r0, #0
 8019ece:	da7d      	bge.n	8019fcc <_strtod_l+0x8a4>
 8019ed0:	ea5a 0308 	orrs.w	r3, sl, r8
 8019ed4:	f040 80a3 	bne.w	801a01e <_strtod_l+0x8f6>
 8019ed8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019edc:	2b00      	cmp	r3, #0
 8019ede:	f040 809e 	bne.w	801a01e <_strtod_l+0x8f6>
 8019ee2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019ee6:	0d1b      	lsrs	r3, r3, #20
 8019ee8:	051b      	lsls	r3, r3, #20
 8019eea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8019eee:	f240 8096 	bls.w	801a01e <_strtod_l+0x8f6>
 8019ef2:	696b      	ldr	r3, [r5, #20]
 8019ef4:	b91b      	cbnz	r3, 8019efe <_strtod_l+0x7d6>
 8019ef6:	692b      	ldr	r3, [r5, #16]
 8019ef8:	2b01      	cmp	r3, #1
 8019efa:	f340 8090 	ble.w	801a01e <_strtod_l+0x8f6>
 8019efe:	4629      	mov	r1, r5
 8019f00:	2201      	movs	r2, #1
 8019f02:	4620      	mov	r0, r4
 8019f04:	f001 fe34 	bl	801bb70 <__lshift>
 8019f08:	4631      	mov	r1, r6
 8019f0a:	4605      	mov	r5, r0
 8019f0c:	f001 fea0 	bl	801bc50 <__mcmp>
 8019f10:	2800      	cmp	r0, #0
 8019f12:	f340 8084 	ble.w	801a01e <_strtod_l+0x8f6>
 8019f16:	9904      	ldr	r1, [sp, #16]
 8019f18:	4a2b      	ldr	r2, [pc, #172]	; (8019fc8 <_strtod_l+0x8a0>)
 8019f1a:	464b      	mov	r3, r9
 8019f1c:	2900      	cmp	r1, #0
 8019f1e:	f000 809d 	beq.w	801a05c <_strtod_l+0x934>
 8019f22:	ea02 0109 	and.w	r1, r2, r9
 8019f26:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8019f2a:	f300 8097 	bgt.w	801a05c <_strtod_l+0x934>
 8019f2e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8019f32:	f77f aea5 	ble.w	8019c80 <_strtod_l+0x558>
 8019f36:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8019fb8 <_strtod_l+0x890>
 8019f3a:	ec49 8b16 	vmov	d6, r8, r9
 8019f3e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8019f42:	ed8d 7b04 	vstr	d7, [sp, #16]
 8019f46:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8019f4a:	4313      	orrs	r3, r2
 8019f4c:	bf08      	it	eq
 8019f4e:	2322      	moveq	r3, #34	; 0x22
 8019f50:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8019f54:	bf08      	it	eq
 8019f56:	6023      	streq	r3, [r4, #0]
 8019f58:	e62c      	b.n	8019bb4 <_strtod_l+0x48c>
 8019f5a:	f04f 31ff 	mov.w	r1, #4294967295
 8019f5e:	fa01 f202 	lsl.w	r2, r1, r2
 8019f62:	ea02 0808 	and.w	r8, r2, r8
 8019f66:	e6d9      	b.n	8019d1c <_strtod_l+0x5f4>
 8019f68:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8019f6c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8019f70:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8019f74:	33e2      	adds	r3, #226	; 0xe2
 8019f76:	fa00 f303 	lsl.w	r3, r0, r3
 8019f7a:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8019f7e:	e73f      	b.n	8019e00 <_strtod_l+0x6d8>
 8019f80:	2200      	movs	r2, #0
 8019f82:	2301      	movs	r3, #1
 8019f84:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8019f88:	e73a      	b.n	8019e00 <_strtod_l+0x6d8>
 8019f8a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019f8c:	461a      	mov	r2, r3
 8019f8e:	4620      	mov	r0, r4
 8019f90:	f001 fdee 	bl	801bb70 <__lshift>
 8019f94:	9012      	str	r0, [sp, #72]	; 0x48
 8019f96:	2800      	cmp	r0, #0
 8019f98:	f47f af64 	bne.w	8019e64 <_strtod_l+0x73c>
 8019f9c:	e600      	b.n	8019ba0 <_strtod_l+0x478>
 8019f9e:	bf00      	nop
 8019fa0:	94a03595 	.word	0x94a03595
 8019fa4:	3fcfffff 	.word	0x3fcfffff
 8019fa8:	94a03595 	.word	0x94a03595
 8019fac:	3fdfffff 	.word	0x3fdfffff
 8019fb0:	35afe535 	.word	0x35afe535
 8019fb4:	3fe00000 	.word	0x3fe00000
 8019fb8:	00000000 	.word	0x00000000
 8019fbc:	39500000 	.word	0x39500000
 8019fc0:	0802b880 	.word	0x0802b880
 8019fc4:	fffffc02 	.word	0xfffffc02
 8019fc8:	7ff00000 	.word	0x7ff00000
 8019fcc:	46cb      	mov	fp, r9
 8019fce:	d15f      	bne.n	801a090 <_strtod_l+0x968>
 8019fd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019fd4:	f1ba 0f00 	cmp.w	sl, #0
 8019fd8:	d02a      	beq.n	801a030 <_strtod_l+0x908>
 8019fda:	4aa7      	ldr	r2, [pc, #668]	; (801a278 <_strtod_l+0xb50>)
 8019fdc:	4293      	cmp	r3, r2
 8019fde:	d12b      	bne.n	801a038 <_strtod_l+0x910>
 8019fe0:	9b04      	ldr	r3, [sp, #16]
 8019fe2:	4642      	mov	r2, r8
 8019fe4:	b1fb      	cbz	r3, 801a026 <_strtod_l+0x8fe>
 8019fe6:	4ba5      	ldr	r3, [pc, #660]	; (801a27c <_strtod_l+0xb54>)
 8019fe8:	ea09 0303 	and.w	r3, r9, r3
 8019fec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8019ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8019ff4:	d81a      	bhi.n	801a02c <_strtod_l+0x904>
 8019ff6:	0d1b      	lsrs	r3, r3, #20
 8019ff8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8019ffc:	fa01 f303 	lsl.w	r3, r1, r3
 801a000:	429a      	cmp	r2, r3
 801a002:	d119      	bne.n	801a038 <_strtod_l+0x910>
 801a004:	4b9e      	ldr	r3, [pc, #632]	; (801a280 <_strtod_l+0xb58>)
 801a006:	459b      	cmp	fp, r3
 801a008:	d102      	bne.n	801a010 <_strtod_l+0x8e8>
 801a00a:	3201      	adds	r2, #1
 801a00c:	f43f adc8 	beq.w	8019ba0 <_strtod_l+0x478>
 801a010:	4b9a      	ldr	r3, [pc, #616]	; (801a27c <_strtod_l+0xb54>)
 801a012:	ea0b 0303 	and.w	r3, fp, r3
 801a016:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801a01a:	f04f 0800 	mov.w	r8, #0
 801a01e:	9b04      	ldr	r3, [sp, #16]
 801a020:	2b00      	cmp	r3, #0
 801a022:	d188      	bne.n	8019f36 <_strtod_l+0x80e>
 801a024:	e5c6      	b.n	8019bb4 <_strtod_l+0x48c>
 801a026:	f04f 33ff 	mov.w	r3, #4294967295
 801a02a:	e7e9      	b.n	801a000 <_strtod_l+0x8d8>
 801a02c:	460b      	mov	r3, r1
 801a02e:	e7e7      	b.n	801a000 <_strtod_l+0x8d8>
 801a030:	ea53 0308 	orrs.w	r3, r3, r8
 801a034:	f43f af6f 	beq.w	8019f16 <_strtod_l+0x7ee>
 801a038:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a03a:	b1cb      	cbz	r3, 801a070 <_strtod_l+0x948>
 801a03c:	ea13 0f0b 	tst.w	r3, fp
 801a040:	d0ed      	beq.n	801a01e <_strtod_l+0x8f6>
 801a042:	9a04      	ldr	r2, [sp, #16]
 801a044:	4640      	mov	r0, r8
 801a046:	4649      	mov	r1, r9
 801a048:	f1ba 0f00 	cmp.w	sl, #0
 801a04c:	d014      	beq.n	801a078 <_strtod_l+0x950>
 801a04e:	f7ff fb4f 	bl	80196f0 <sulp>
 801a052:	ee38 7b00 	vadd.f64	d7, d8, d0
 801a056:	ec59 8b17 	vmov	r8, r9, d7
 801a05a:	e7e0      	b.n	801a01e <_strtod_l+0x8f6>
 801a05c:	4013      	ands	r3, r2
 801a05e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801a062:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801a066:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801a06a:	f04f 38ff 	mov.w	r8, #4294967295
 801a06e:	e7d6      	b.n	801a01e <_strtod_l+0x8f6>
 801a070:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a072:	ea13 0f08 	tst.w	r3, r8
 801a076:	e7e3      	b.n	801a040 <_strtod_l+0x918>
 801a078:	f7ff fb3a 	bl	80196f0 <sulp>
 801a07c:	ee38 0b40 	vsub.f64	d0, d8, d0
 801a080:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801a084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a088:	ec59 8b10 	vmov	r8, r9, d0
 801a08c:	d1c7      	bne.n	801a01e <_strtod_l+0x8f6>
 801a08e:	e5f7      	b.n	8019c80 <_strtod_l+0x558>
 801a090:	4631      	mov	r1, r6
 801a092:	4628      	mov	r0, r5
 801a094:	f001 ff5a 	bl	801bf4c <__ratio>
 801a098:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801a09c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801a0a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a0a4:	d865      	bhi.n	801a172 <_strtod_l+0xa4a>
 801a0a6:	f1ba 0f00 	cmp.w	sl, #0
 801a0aa:	d042      	beq.n	801a132 <_strtod_l+0xa0a>
 801a0ac:	4b75      	ldr	r3, [pc, #468]	; (801a284 <_strtod_l+0xb5c>)
 801a0ae:	2200      	movs	r2, #0
 801a0b0:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801a0b4:	4871      	ldr	r0, [pc, #452]	; (801a27c <_strtod_l+0xb54>)
 801a0b6:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 801a290 <_strtod_l+0xb68>
 801a0ba:	ea0b 0100 	and.w	r1, fp, r0
 801a0be:	4561      	cmp	r1, ip
 801a0c0:	f040 808e 	bne.w	801a1e0 <_strtod_l+0xab8>
 801a0c4:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 801a0c8:	ec49 8b10 	vmov	d0, r8, r9
 801a0cc:	ec43 2b1c 	vmov	d12, r2, r3
 801a0d0:	910a      	str	r1, [sp, #40]	; 0x28
 801a0d2:	f001 fe63 	bl	801bd9c <__ulp>
 801a0d6:	ec49 8b1e 	vmov	d14, r8, r9
 801a0da:	4868      	ldr	r0, [pc, #416]	; (801a27c <_strtod_l+0xb54>)
 801a0dc:	eeac eb00 	vfma.f64	d14, d12, d0
 801a0e0:	ee1e 3a90 	vmov	r3, s29
 801a0e4:	4a68      	ldr	r2, [pc, #416]	; (801a288 <_strtod_l+0xb60>)
 801a0e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 801a0e8:	4018      	ands	r0, r3
 801a0ea:	4290      	cmp	r0, r2
 801a0ec:	ec59 8b1e 	vmov	r8, r9, d14
 801a0f0:	d94e      	bls.n	801a190 <_strtod_l+0xa68>
 801a0f2:	ee18 3a90 	vmov	r3, s17
 801a0f6:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801a0fa:	4293      	cmp	r3, r2
 801a0fc:	d104      	bne.n	801a108 <_strtod_l+0x9e0>
 801a0fe:	ee18 3a10 	vmov	r3, s16
 801a102:	3301      	adds	r3, #1
 801a104:	f43f ad4c 	beq.w	8019ba0 <_strtod_l+0x478>
 801a108:	f8df 9174 	ldr.w	r9, [pc, #372]	; 801a280 <_strtod_l+0xb58>
 801a10c:	f04f 38ff 	mov.w	r8, #4294967295
 801a110:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a112:	4620      	mov	r0, r4
 801a114:	f001 fb10 	bl	801b738 <_Bfree>
 801a118:	4639      	mov	r1, r7
 801a11a:	4620      	mov	r0, r4
 801a11c:	f001 fb0c 	bl	801b738 <_Bfree>
 801a120:	4631      	mov	r1, r6
 801a122:	4620      	mov	r0, r4
 801a124:	f001 fb08 	bl	801b738 <_Bfree>
 801a128:	4629      	mov	r1, r5
 801a12a:	4620      	mov	r0, r4
 801a12c:	f001 fb04 	bl	801b738 <_Bfree>
 801a130:	e619      	b.n	8019d66 <_strtod_l+0x63e>
 801a132:	f1b8 0f00 	cmp.w	r8, #0
 801a136:	d112      	bne.n	801a15e <_strtod_l+0xa36>
 801a138:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a13c:	b9b3      	cbnz	r3, 801a16c <_strtod_l+0xa44>
 801a13e:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801a142:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801a146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a14a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801a14e:	bf58      	it	pl
 801a150:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 801a154:	eeb1 7b4d 	vneg.f64	d7, d13
 801a158:	ec53 2b17 	vmov	r2, r3, d7
 801a15c:	e7aa      	b.n	801a0b4 <_strtod_l+0x98c>
 801a15e:	f1b8 0f01 	cmp.w	r8, #1
 801a162:	d103      	bne.n	801a16c <_strtod_l+0xa44>
 801a164:	f1b9 0f00 	cmp.w	r9, #0
 801a168:	f43f ad8a 	beq.w	8019c80 <_strtod_l+0x558>
 801a16c:	4b47      	ldr	r3, [pc, #284]	; (801a28c <_strtod_l+0xb64>)
 801a16e:	2200      	movs	r2, #0
 801a170:	e79e      	b.n	801a0b0 <_strtod_l+0x988>
 801a172:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801a176:	ee20 db0d 	vmul.f64	d13, d0, d13
 801a17a:	f1ba 0f00 	cmp.w	sl, #0
 801a17e:	d104      	bne.n	801a18a <_strtod_l+0xa62>
 801a180:	eeb1 7b4d 	vneg.f64	d7, d13
 801a184:	ec53 2b17 	vmov	r2, r3, d7
 801a188:	e794      	b.n	801a0b4 <_strtod_l+0x98c>
 801a18a:	eeb0 7b4d 	vmov.f64	d7, d13
 801a18e:	e7f9      	b.n	801a184 <_strtod_l+0xa5c>
 801a190:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801a194:	9b04      	ldr	r3, [sp, #16]
 801a196:	2b00      	cmp	r3, #0
 801a198:	d1ba      	bne.n	801a110 <_strtod_l+0x9e8>
 801a19a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801a19e:	0d1b      	lsrs	r3, r3, #20
 801a1a0:	051b      	lsls	r3, r3, #20
 801a1a2:	4299      	cmp	r1, r3
 801a1a4:	d1b4      	bne.n	801a110 <_strtod_l+0x9e8>
 801a1a6:	ec51 0b1d 	vmov	r0, r1, d13
 801a1aa:	f7ee fad5 	bl	8008758 <__aeabi_d2lz>
 801a1ae:	f7ee fa8d 	bl	80086cc <__aeabi_l2d>
 801a1b2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a1b6:	ec41 0b17 	vmov	d7, r0, r1
 801a1ba:	ea43 0308 	orr.w	r3, r3, r8
 801a1be:	ea53 030a 	orrs.w	r3, r3, sl
 801a1c2:	ee3d db47 	vsub.f64	d13, d13, d7
 801a1c6:	d03c      	beq.n	801a242 <_strtod_l+0xb1a>
 801a1c8:	eeb4 dbca 	vcmpe.f64	d13, d10
 801a1cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a1d0:	f53f acf0 	bmi.w	8019bb4 <_strtod_l+0x48c>
 801a1d4:	eeb4 dbcb 	vcmpe.f64	d13, d11
 801a1d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a1dc:	dd98      	ble.n	801a110 <_strtod_l+0x9e8>
 801a1de:	e4e9      	b.n	8019bb4 <_strtod_l+0x48c>
 801a1e0:	9804      	ldr	r0, [sp, #16]
 801a1e2:	b1f0      	cbz	r0, 801a222 <_strtod_l+0xafa>
 801a1e4:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 801a1e8:	d81b      	bhi.n	801a222 <_strtod_l+0xafa>
 801a1ea:	ed9f 7b21 	vldr	d7, [pc, #132]	; 801a270 <_strtod_l+0xb48>
 801a1ee:	eeb4 dbc7 	vcmpe.f64	d13, d7
 801a1f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a1f6:	d811      	bhi.n	801a21c <_strtod_l+0xaf4>
 801a1f8:	eebc dbcd 	vcvt.u32.f64	s26, d13
 801a1fc:	ee1d 3a10 	vmov	r3, s26
 801a200:	2b01      	cmp	r3, #1
 801a202:	bf38      	it	cc
 801a204:	2301      	movcc	r3, #1
 801a206:	ee0d 3a10 	vmov	s26, r3
 801a20a:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 801a20e:	f1ba 0f00 	cmp.w	sl, #0
 801a212:	d113      	bne.n	801a23c <_strtod_l+0xb14>
 801a214:	eeb1 7b4d 	vneg.f64	d7, d13
 801a218:	ec53 2b17 	vmov	r2, r3, d7
 801a21c:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 801a220:	1a43      	subs	r3, r0, r1
 801a222:	eeb0 0b48 	vmov.f64	d0, d8
 801a226:	ec43 2b1c 	vmov	d12, r2, r3
 801a22a:	910a      	str	r1, [sp, #40]	; 0x28
 801a22c:	f001 fdb6 	bl	801bd9c <__ulp>
 801a230:	990a      	ldr	r1, [sp, #40]	; 0x28
 801a232:	eeac 8b00 	vfma.f64	d8, d12, d0
 801a236:	ec59 8b18 	vmov	r8, r9, d8
 801a23a:	e7ab      	b.n	801a194 <_strtod_l+0xa6c>
 801a23c:	eeb0 7b4d 	vmov.f64	d7, d13
 801a240:	e7ea      	b.n	801a218 <_strtod_l+0xaf0>
 801a242:	eeb4 dbc9 	vcmpe.f64	d13, d9
 801a246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a24a:	f57f af61 	bpl.w	801a110 <_strtod_l+0x9e8>
 801a24e:	e4b1      	b.n	8019bb4 <_strtod_l+0x48c>
 801a250:	2300      	movs	r3, #0
 801a252:	9308      	str	r3, [sp, #32]
 801a254:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a256:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a258:	6013      	str	r3, [r2, #0]
 801a25a:	f7ff baad 	b.w	80197b8 <_strtod_l+0x90>
 801a25e:	2a65      	cmp	r2, #101	; 0x65
 801a260:	f43f ab9f 	beq.w	80199a2 <_strtod_l+0x27a>
 801a264:	2a45      	cmp	r2, #69	; 0x45
 801a266:	f43f ab9c 	beq.w	80199a2 <_strtod_l+0x27a>
 801a26a:	2101      	movs	r1, #1
 801a26c:	f7ff bbd4 	b.w	8019a18 <_strtod_l+0x2f0>
 801a270:	ffc00000 	.word	0xffc00000
 801a274:	41dfffff 	.word	0x41dfffff
 801a278:	000fffff 	.word	0x000fffff
 801a27c:	7ff00000 	.word	0x7ff00000
 801a280:	7fefffff 	.word	0x7fefffff
 801a284:	3ff00000 	.word	0x3ff00000
 801a288:	7c9fffff 	.word	0x7c9fffff
 801a28c:	bff00000 	.word	0xbff00000
 801a290:	7fe00000 	.word	0x7fe00000

0801a294 <_strtod_r>:
 801a294:	4b01      	ldr	r3, [pc, #4]	; (801a29c <_strtod_r+0x8>)
 801a296:	f7ff ba47 	b.w	8019728 <_strtod_l>
 801a29a:	bf00      	nop
 801a29c:	20000090 	.word	0x20000090

0801a2a0 <_strtol_l.constprop.0>:
 801a2a0:	2b01      	cmp	r3, #1
 801a2a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a2a6:	d001      	beq.n	801a2ac <_strtol_l.constprop.0+0xc>
 801a2a8:	2b24      	cmp	r3, #36	; 0x24
 801a2aa:	d906      	bls.n	801a2ba <_strtol_l.constprop.0+0x1a>
 801a2ac:	f7fe fb48 	bl	8018940 <__errno>
 801a2b0:	2316      	movs	r3, #22
 801a2b2:	6003      	str	r3, [r0, #0]
 801a2b4:	2000      	movs	r0, #0
 801a2b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a2ba:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801a3a0 <_strtol_l.constprop.0+0x100>
 801a2be:	460d      	mov	r5, r1
 801a2c0:	462e      	mov	r6, r5
 801a2c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a2c6:	f814 700c 	ldrb.w	r7, [r4, ip]
 801a2ca:	f017 0708 	ands.w	r7, r7, #8
 801a2ce:	d1f7      	bne.n	801a2c0 <_strtol_l.constprop.0+0x20>
 801a2d0:	2c2d      	cmp	r4, #45	; 0x2d
 801a2d2:	d132      	bne.n	801a33a <_strtol_l.constprop.0+0x9a>
 801a2d4:	782c      	ldrb	r4, [r5, #0]
 801a2d6:	2701      	movs	r7, #1
 801a2d8:	1cb5      	adds	r5, r6, #2
 801a2da:	2b00      	cmp	r3, #0
 801a2dc:	d05b      	beq.n	801a396 <_strtol_l.constprop.0+0xf6>
 801a2de:	2b10      	cmp	r3, #16
 801a2e0:	d109      	bne.n	801a2f6 <_strtol_l.constprop.0+0x56>
 801a2e2:	2c30      	cmp	r4, #48	; 0x30
 801a2e4:	d107      	bne.n	801a2f6 <_strtol_l.constprop.0+0x56>
 801a2e6:	782c      	ldrb	r4, [r5, #0]
 801a2e8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801a2ec:	2c58      	cmp	r4, #88	; 0x58
 801a2ee:	d14d      	bne.n	801a38c <_strtol_l.constprop.0+0xec>
 801a2f0:	786c      	ldrb	r4, [r5, #1]
 801a2f2:	2310      	movs	r3, #16
 801a2f4:	3502      	adds	r5, #2
 801a2f6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801a2fa:	f108 38ff 	add.w	r8, r8, #4294967295
 801a2fe:	f04f 0c00 	mov.w	ip, #0
 801a302:	fbb8 f9f3 	udiv	r9, r8, r3
 801a306:	4666      	mov	r6, ip
 801a308:	fb03 8a19 	mls	sl, r3, r9, r8
 801a30c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801a310:	f1be 0f09 	cmp.w	lr, #9
 801a314:	d816      	bhi.n	801a344 <_strtol_l.constprop.0+0xa4>
 801a316:	4674      	mov	r4, lr
 801a318:	42a3      	cmp	r3, r4
 801a31a:	dd24      	ble.n	801a366 <_strtol_l.constprop.0+0xc6>
 801a31c:	f1bc 0f00 	cmp.w	ip, #0
 801a320:	db1e      	blt.n	801a360 <_strtol_l.constprop.0+0xc0>
 801a322:	45b1      	cmp	r9, r6
 801a324:	d31c      	bcc.n	801a360 <_strtol_l.constprop.0+0xc0>
 801a326:	d101      	bne.n	801a32c <_strtol_l.constprop.0+0x8c>
 801a328:	45a2      	cmp	sl, r4
 801a32a:	db19      	blt.n	801a360 <_strtol_l.constprop.0+0xc0>
 801a32c:	fb06 4603 	mla	r6, r6, r3, r4
 801a330:	f04f 0c01 	mov.w	ip, #1
 801a334:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a338:	e7e8      	b.n	801a30c <_strtol_l.constprop.0+0x6c>
 801a33a:	2c2b      	cmp	r4, #43	; 0x2b
 801a33c:	bf04      	itt	eq
 801a33e:	782c      	ldrbeq	r4, [r5, #0]
 801a340:	1cb5      	addeq	r5, r6, #2
 801a342:	e7ca      	b.n	801a2da <_strtol_l.constprop.0+0x3a>
 801a344:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801a348:	f1be 0f19 	cmp.w	lr, #25
 801a34c:	d801      	bhi.n	801a352 <_strtol_l.constprop.0+0xb2>
 801a34e:	3c37      	subs	r4, #55	; 0x37
 801a350:	e7e2      	b.n	801a318 <_strtol_l.constprop.0+0x78>
 801a352:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801a356:	f1be 0f19 	cmp.w	lr, #25
 801a35a:	d804      	bhi.n	801a366 <_strtol_l.constprop.0+0xc6>
 801a35c:	3c57      	subs	r4, #87	; 0x57
 801a35e:	e7db      	b.n	801a318 <_strtol_l.constprop.0+0x78>
 801a360:	f04f 3cff 	mov.w	ip, #4294967295
 801a364:	e7e6      	b.n	801a334 <_strtol_l.constprop.0+0x94>
 801a366:	f1bc 0f00 	cmp.w	ip, #0
 801a36a:	da05      	bge.n	801a378 <_strtol_l.constprop.0+0xd8>
 801a36c:	2322      	movs	r3, #34	; 0x22
 801a36e:	6003      	str	r3, [r0, #0]
 801a370:	4646      	mov	r6, r8
 801a372:	b942      	cbnz	r2, 801a386 <_strtol_l.constprop.0+0xe6>
 801a374:	4630      	mov	r0, r6
 801a376:	e79e      	b.n	801a2b6 <_strtol_l.constprop.0+0x16>
 801a378:	b107      	cbz	r7, 801a37c <_strtol_l.constprop.0+0xdc>
 801a37a:	4276      	negs	r6, r6
 801a37c:	2a00      	cmp	r2, #0
 801a37e:	d0f9      	beq.n	801a374 <_strtol_l.constprop.0+0xd4>
 801a380:	f1bc 0f00 	cmp.w	ip, #0
 801a384:	d000      	beq.n	801a388 <_strtol_l.constprop.0+0xe8>
 801a386:	1e69      	subs	r1, r5, #1
 801a388:	6011      	str	r1, [r2, #0]
 801a38a:	e7f3      	b.n	801a374 <_strtol_l.constprop.0+0xd4>
 801a38c:	2430      	movs	r4, #48	; 0x30
 801a38e:	2b00      	cmp	r3, #0
 801a390:	d1b1      	bne.n	801a2f6 <_strtol_l.constprop.0+0x56>
 801a392:	2308      	movs	r3, #8
 801a394:	e7af      	b.n	801a2f6 <_strtol_l.constprop.0+0x56>
 801a396:	2c30      	cmp	r4, #48	; 0x30
 801a398:	d0a5      	beq.n	801a2e6 <_strtol_l.constprop.0+0x46>
 801a39a:	230a      	movs	r3, #10
 801a39c:	e7ab      	b.n	801a2f6 <_strtol_l.constprop.0+0x56>
 801a39e:	bf00      	nop
 801a3a0:	0802b8a9 	.word	0x0802b8a9

0801a3a4 <_strtol_r>:
 801a3a4:	f7ff bf7c 	b.w	801a2a0 <_strtol_l.constprop.0>

0801a3a8 <quorem>:
 801a3a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3ac:	6903      	ldr	r3, [r0, #16]
 801a3ae:	690c      	ldr	r4, [r1, #16]
 801a3b0:	42a3      	cmp	r3, r4
 801a3b2:	4607      	mov	r7, r0
 801a3b4:	f2c0 8081 	blt.w	801a4ba <quorem+0x112>
 801a3b8:	3c01      	subs	r4, #1
 801a3ba:	f101 0814 	add.w	r8, r1, #20
 801a3be:	f100 0514 	add.w	r5, r0, #20
 801a3c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a3c6:	9301      	str	r3, [sp, #4]
 801a3c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801a3cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a3d0:	3301      	adds	r3, #1
 801a3d2:	429a      	cmp	r2, r3
 801a3d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801a3d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801a3dc:	fbb2 f6f3 	udiv	r6, r2, r3
 801a3e0:	d331      	bcc.n	801a446 <quorem+0x9e>
 801a3e2:	f04f 0e00 	mov.w	lr, #0
 801a3e6:	4640      	mov	r0, r8
 801a3e8:	46ac      	mov	ip, r5
 801a3ea:	46f2      	mov	sl, lr
 801a3ec:	f850 2b04 	ldr.w	r2, [r0], #4
 801a3f0:	b293      	uxth	r3, r2
 801a3f2:	fb06 e303 	mla	r3, r6, r3, lr
 801a3f6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801a3fa:	b29b      	uxth	r3, r3
 801a3fc:	ebaa 0303 	sub.w	r3, sl, r3
 801a400:	f8dc a000 	ldr.w	sl, [ip]
 801a404:	0c12      	lsrs	r2, r2, #16
 801a406:	fa13 f38a 	uxtah	r3, r3, sl
 801a40a:	fb06 e202 	mla	r2, r6, r2, lr
 801a40e:	9300      	str	r3, [sp, #0]
 801a410:	9b00      	ldr	r3, [sp, #0]
 801a412:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801a416:	b292      	uxth	r2, r2
 801a418:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801a41c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a420:	f8bd 3000 	ldrh.w	r3, [sp]
 801a424:	4581      	cmp	r9, r0
 801a426:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a42a:	f84c 3b04 	str.w	r3, [ip], #4
 801a42e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801a432:	d2db      	bcs.n	801a3ec <quorem+0x44>
 801a434:	f855 300b 	ldr.w	r3, [r5, fp]
 801a438:	b92b      	cbnz	r3, 801a446 <quorem+0x9e>
 801a43a:	9b01      	ldr	r3, [sp, #4]
 801a43c:	3b04      	subs	r3, #4
 801a43e:	429d      	cmp	r5, r3
 801a440:	461a      	mov	r2, r3
 801a442:	d32e      	bcc.n	801a4a2 <quorem+0xfa>
 801a444:	613c      	str	r4, [r7, #16]
 801a446:	4638      	mov	r0, r7
 801a448:	f001 fc02 	bl	801bc50 <__mcmp>
 801a44c:	2800      	cmp	r0, #0
 801a44e:	db24      	blt.n	801a49a <quorem+0xf2>
 801a450:	3601      	adds	r6, #1
 801a452:	4628      	mov	r0, r5
 801a454:	f04f 0c00 	mov.w	ip, #0
 801a458:	f858 2b04 	ldr.w	r2, [r8], #4
 801a45c:	f8d0 e000 	ldr.w	lr, [r0]
 801a460:	b293      	uxth	r3, r2
 801a462:	ebac 0303 	sub.w	r3, ip, r3
 801a466:	0c12      	lsrs	r2, r2, #16
 801a468:	fa13 f38e 	uxtah	r3, r3, lr
 801a46c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801a470:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a474:	b29b      	uxth	r3, r3
 801a476:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a47a:	45c1      	cmp	r9, r8
 801a47c:	f840 3b04 	str.w	r3, [r0], #4
 801a480:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801a484:	d2e8      	bcs.n	801a458 <quorem+0xb0>
 801a486:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a48a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a48e:	b922      	cbnz	r2, 801a49a <quorem+0xf2>
 801a490:	3b04      	subs	r3, #4
 801a492:	429d      	cmp	r5, r3
 801a494:	461a      	mov	r2, r3
 801a496:	d30a      	bcc.n	801a4ae <quorem+0x106>
 801a498:	613c      	str	r4, [r7, #16]
 801a49a:	4630      	mov	r0, r6
 801a49c:	b003      	add	sp, #12
 801a49e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4a2:	6812      	ldr	r2, [r2, #0]
 801a4a4:	3b04      	subs	r3, #4
 801a4a6:	2a00      	cmp	r2, #0
 801a4a8:	d1cc      	bne.n	801a444 <quorem+0x9c>
 801a4aa:	3c01      	subs	r4, #1
 801a4ac:	e7c7      	b.n	801a43e <quorem+0x96>
 801a4ae:	6812      	ldr	r2, [r2, #0]
 801a4b0:	3b04      	subs	r3, #4
 801a4b2:	2a00      	cmp	r2, #0
 801a4b4:	d1f0      	bne.n	801a498 <quorem+0xf0>
 801a4b6:	3c01      	subs	r4, #1
 801a4b8:	e7eb      	b.n	801a492 <quorem+0xea>
 801a4ba:	2000      	movs	r0, #0
 801a4bc:	e7ee      	b.n	801a49c <quorem+0xf4>
	...

0801a4c0 <_dtoa_r>:
 801a4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4c4:	ed2d 8b02 	vpush	{d8}
 801a4c8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801a4ca:	b091      	sub	sp, #68	; 0x44
 801a4cc:	ed8d 0b02 	vstr	d0, [sp, #8]
 801a4d0:	ec59 8b10 	vmov	r8, r9, d0
 801a4d4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801a4d6:	9106      	str	r1, [sp, #24]
 801a4d8:	4606      	mov	r6, r0
 801a4da:	9208      	str	r2, [sp, #32]
 801a4dc:	930c      	str	r3, [sp, #48]	; 0x30
 801a4de:	b975      	cbnz	r5, 801a4fe <_dtoa_r+0x3e>
 801a4e0:	2010      	movs	r0, #16
 801a4e2:	f001 f8cf 	bl	801b684 <malloc>
 801a4e6:	4602      	mov	r2, r0
 801a4e8:	6270      	str	r0, [r6, #36]	; 0x24
 801a4ea:	b920      	cbnz	r0, 801a4f6 <_dtoa_r+0x36>
 801a4ec:	4baa      	ldr	r3, [pc, #680]	; (801a798 <_dtoa_r+0x2d8>)
 801a4ee:	21ea      	movs	r1, #234	; 0xea
 801a4f0:	48aa      	ldr	r0, [pc, #680]	; (801a79c <_dtoa_r+0x2dc>)
 801a4f2:	f002 f817 	bl	801c524 <__assert_func>
 801a4f6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801a4fa:	6005      	str	r5, [r0, #0]
 801a4fc:	60c5      	str	r5, [r0, #12]
 801a4fe:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801a500:	6819      	ldr	r1, [r3, #0]
 801a502:	b151      	cbz	r1, 801a51a <_dtoa_r+0x5a>
 801a504:	685a      	ldr	r2, [r3, #4]
 801a506:	604a      	str	r2, [r1, #4]
 801a508:	2301      	movs	r3, #1
 801a50a:	4093      	lsls	r3, r2
 801a50c:	608b      	str	r3, [r1, #8]
 801a50e:	4630      	mov	r0, r6
 801a510:	f001 f912 	bl	801b738 <_Bfree>
 801a514:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801a516:	2200      	movs	r2, #0
 801a518:	601a      	str	r2, [r3, #0]
 801a51a:	f1b9 0300 	subs.w	r3, r9, #0
 801a51e:	bfbb      	ittet	lt
 801a520:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801a524:	9303      	strlt	r3, [sp, #12]
 801a526:	2300      	movge	r3, #0
 801a528:	2201      	movlt	r2, #1
 801a52a:	bfac      	ite	ge
 801a52c:	6023      	strge	r3, [r4, #0]
 801a52e:	6022      	strlt	r2, [r4, #0]
 801a530:	4b9b      	ldr	r3, [pc, #620]	; (801a7a0 <_dtoa_r+0x2e0>)
 801a532:	9c03      	ldr	r4, [sp, #12]
 801a534:	43a3      	bics	r3, r4
 801a536:	d11c      	bne.n	801a572 <_dtoa_r+0xb2>
 801a538:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a53a:	f242 730f 	movw	r3, #9999	; 0x270f
 801a53e:	6013      	str	r3, [r2, #0]
 801a540:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801a544:	ea53 0308 	orrs.w	r3, r3, r8
 801a548:	f000 84fd 	beq.w	801af46 <_dtoa_r+0xa86>
 801a54c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a54e:	b963      	cbnz	r3, 801a56a <_dtoa_r+0xaa>
 801a550:	4b94      	ldr	r3, [pc, #592]	; (801a7a4 <_dtoa_r+0x2e4>)
 801a552:	e01f      	b.n	801a594 <_dtoa_r+0xd4>
 801a554:	4b94      	ldr	r3, [pc, #592]	; (801a7a8 <_dtoa_r+0x2e8>)
 801a556:	9301      	str	r3, [sp, #4]
 801a558:	3308      	adds	r3, #8
 801a55a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801a55c:	6013      	str	r3, [r2, #0]
 801a55e:	9801      	ldr	r0, [sp, #4]
 801a560:	b011      	add	sp, #68	; 0x44
 801a562:	ecbd 8b02 	vpop	{d8}
 801a566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a56a:	4b8e      	ldr	r3, [pc, #568]	; (801a7a4 <_dtoa_r+0x2e4>)
 801a56c:	9301      	str	r3, [sp, #4]
 801a56e:	3303      	adds	r3, #3
 801a570:	e7f3      	b.n	801a55a <_dtoa_r+0x9a>
 801a572:	ed9d 8b02 	vldr	d8, [sp, #8]
 801a576:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a57a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a57e:	d10b      	bne.n	801a598 <_dtoa_r+0xd8>
 801a580:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a582:	2301      	movs	r3, #1
 801a584:	6013      	str	r3, [r2, #0]
 801a586:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a588:	2b00      	cmp	r3, #0
 801a58a:	f000 84d9 	beq.w	801af40 <_dtoa_r+0xa80>
 801a58e:	4887      	ldr	r0, [pc, #540]	; (801a7ac <_dtoa_r+0x2ec>)
 801a590:	6018      	str	r0, [r3, #0]
 801a592:	1e43      	subs	r3, r0, #1
 801a594:	9301      	str	r3, [sp, #4]
 801a596:	e7e2      	b.n	801a55e <_dtoa_r+0x9e>
 801a598:	a90f      	add	r1, sp, #60	; 0x3c
 801a59a:	aa0e      	add	r2, sp, #56	; 0x38
 801a59c:	4630      	mov	r0, r6
 801a59e:	eeb0 0b48 	vmov.f64	d0, d8
 801a5a2:	f001 fc77 	bl	801be94 <__d2b>
 801a5a6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 801a5aa:	4605      	mov	r5, r0
 801a5ac:	980e      	ldr	r0, [sp, #56]	; 0x38
 801a5ae:	2900      	cmp	r1, #0
 801a5b0:	d046      	beq.n	801a640 <_dtoa_r+0x180>
 801a5b2:	ee18 4a90 	vmov	r4, s17
 801a5b6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801a5ba:	ec53 2b18 	vmov	r2, r3, d8
 801a5be:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801a5c2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801a5c6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801a5ca:	2400      	movs	r4, #0
 801a5cc:	ec43 2b16 	vmov	d6, r2, r3
 801a5d0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801a5d4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 801a780 <_dtoa_r+0x2c0>
 801a5d8:	ee36 7b47 	vsub.f64	d7, d6, d7
 801a5dc:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 801a788 <_dtoa_r+0x2c8>
 801a5e0:	eea7 6b05 	vfma.f64	d6, d7, d5
 801a5e4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 801a790 <_dtoa_r+0x2d0>
 801a5e8:	ee07 1a90 	vmov	s15, r1
 801a5ec:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801a5f0:	eeb0 7b46 	vmov.f64	d7, d6
 801a5f4:	eea4 7b05 	vfma.f64	d7, d4, d5
 801a5f8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801a5fc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801a600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a604:	ee16 ba90 	vmov	fp, s13
 801a608:	940a      	str	r4, [sp, #40]	; 0x28
 801a60a:	d508      	bpl.n	801a61e <_dtoa_r+0x15e>
 801a60c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801a610:	eeb4 6b47 	vcmp.f64	d6, d7
 801a614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a618:	bf18      	it	ne
 801a61a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801a61e:	f1bb 0f16 	cmp.w	fp, #22
 801a622:	d82f      	bhi.n	801a684 <_dtoa_r+0x1c4>
 801a624:	4b62      	ldr	r3, [pc, #392]	; (801a7b0 <_dtoa_r+0x2f0>)
 801a626:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801a62a:	ed93 7b00 	vldr	d7, [r3]
 801a62e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801a632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a636:	d501      	bpl.n	801a63c <_dtoa_r+0x17c>
 801a638:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a63c:	2300      	movs	r3, #0
 801a63e:	e022      	b.n	801a686 <_dtoa_r+0x1c6>
 801a640:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801a642:	4401      	add	r1, r0
 801a644:	f201 4332 	addw	r3, r1, #1074	; 0x432
 801a648:	2b20      	cmp	r3, #32
 801a64a:	bfc1      	itttt	gt
 801a64c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801a650:	fa04 f303 	lslgt.w	r3, r4, r3
 801a654:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 801a658:	fa28 f804 	lsrgt.w	r8, r8, r4
 801a65c:	bfd6      	itet	le
 801a65e:	f1c3 0320 	rsble	r3, r3, #32
 801a662:	ea43 0808 	orrgt.w	r8, r3, r8
 801a666:	fa08 f803 	lslle.w	r8, r8, r3
 801a66a:	ee07 8a90 	vmov	s15, r8
 801a66e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801a672:	3901      	subs	r1, #1
 801a674:	ee17 4a90 	vmov	r4, s15
 801a678:	ec53 2b17 	vmov	r2, r3, d7
 801a67c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 801a680:	2401      	movs	r4, #1
 801a682:	e7a3      	b.n	801a5cc <_dtoa_r+0x10c>
 801a684:	2301      	movs	r3, #1
 801a686:	930b      	str	r3, [sp, #44]	; 0x2c
 801a688:	1a43      	subs	r3, r0, r1
 801a68a:	1e5a      	subs	r2, r3, #1
 801a68c:	bf45      	ittet	mi
 801a68e:	f1c3 0301 	rsbmi	r3, r3, #1
 801a692:	9304      	strmi	r3, [sp, #16]
 801a694:	2300      	movpl	r3, #0
 801a696:	2300      	movmi	r3, #0
 801a698:	9205      	str	r2, [sp, #20]
 801a69a:	bf54      	ite	pl
 801a69c:	9304      	strpl	r3, [sp, #16]
 801a69e:	9305      	strmi	r3, [sp, #20]
 801a6a0:	f1bb 0f00 	cmp.w	fp, #0
 801a6a4:	db18      	blt.n	801a6d8 <_dtoa_r+0x218>
 801a6a6:	9b05      	ldr	r3, [sp, #20]
 801a6a8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801a6ac:	445b      	add	r3, fp
 801a6ae:	9305      	str	r3, [sp, #20]
 801a6b0:	2300      	movs	r3, #0
 801a6b2:	9a06      	ldr	r2, [sp, #24]
 801a6b4:	2a09      	cmp	r2, #9
 801a6b6:	d849      	bhi.n	801a74c <_dtoa_r+0x28c>
 801a6b8:	2a05      	cmp	r2, #5
 801a6ba:	bfc4      	itt	gt
 801a6bc:	3a04      	subgt	r2, #4
 801a6be:	9206      	strgt	r2, [sp, #24]
 801a6c0:	9a06      	ldr	r2, [sp, #24]
 801a6c2:	f1a2 0202 	sub.w	r2, r2, #2
 801a6c6:	bfcc      	ite	gt
 801a6c8:	2400      	movgt	r4, #0
 801a6ca:	2401      	movle	r4, #1
 801a6cc:	2a03      	cmp	r2, #3
 801a6ce:	d848      	bhi.n	801a762 <_dtoa_r+0x2a2>
 801a6d0:	e8df f002 	tbb	[pc, r2]
 801a6d4:	3a2c2e0b 	.word	0x3a2c2e0b
 801a6d8:	9b04      	ldr	r3, [sp, #16]
 801a6da:	2200      	movs	r2, #0
 801a6dc:	eba3 030b 	sub.w	r3, r3, fp
 801a6e0:	9304      	str	r3, [sp, #16]
 801a6e2:	9209      	str	r2, [sp, #36]	; 0x24
 801a6e4:	f1cb 0300 	rsb	r3, fp, #0
 801a6e8:	e7e3      	b.n	801a6b2 <_dtoa_r+0x1f2>
 801a6ea:	2200      	movs	r2, #0
 801a6ec:	9207      	str	r2, [sp, #28]
 801a6ee:	9a08      	ldr	r2, [sp, #32]
 801a6f0:	2a00      	cmp	r2, #0
 801a6f2:	dc39      	bgt.n	801a768 <_dtoa_r+0x2a8>
 801a6f4:	f04f 0a01 	mov.w	sl, #1
 801a6f8:	46d1      	mov	r9, sl
 801a6fa:	4652      	mov	r2, sl
 801a6fc:	f8cd a020 	str.w	sl, [sp, #32]
 801a700:	6a77      	ldr	r7, [r6, #36]	; 0x24
 801a702:	2100      	movs	r1, #0
 801a704:	6079      	str	r1, [r7, #4]
 801a706:	2004      	movs	r0, #4
 801a708:	f100 0c14 	add.w	ip, r0, #20
 801a70c:	4594      	cmp	ip, r2
 801a70e:	6879      	ldr	r1, [r7, #4]
 801a710:	d92f      	bls.n	801a772 <_dtoa_r+0x2b2>
 801a712:	4630      	mov	r0, r6
 801a714:	930d      	str	r3, [sp, #52]	; 0x34
 801a716:	f000 ffcf 	bl	801b6b8 <_Balloc>
 801a71a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a71c:	9001      	str	r0, [sp, #4]
 801a71e:	4602      	mov	r2, r0
 801a720:	2800      	cmp	r0, #0
 801a722:	d149      	bne.n	801a7b8 <_dtoa_r+0x2f8>
 801a724:	4b23      	ldr	r3, [pc, #140]	; (801a7b4 <_dtoa_r+0x2f4>)
 801a726:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801a72a:	e6e1      	b.n	801a4f0 <_dtoa_r+0x30>
 801a72c:	2201      	movs	r2, #1
 801a72e:	e7dd      	b.n	801a6ec <_dtoa_r+0x22c>
 801a730:	2200      	movs	r2, #0
 801a732:	9207      	str	r2, [sp, #28]
 801a734:	9a08      	ldr	r2, [sp, #32]
 801a736:	eb0b 0a02 	add.w	sl, fp, r2
 801a73a:	f10a 0901 	add.w	r9, sl, #1
 801a73e:	464a      	mov	r2, r9
 801a740:	2a01      	cmp	r2, #1
 801a742:	bfb8      	it	lt
 801a744:	2201      	movlt	r2, #1
 801a746:	e7db      	b.n	801a700 <_dtoa_r+0x240>
 801a748:	2201      	movs	r2, #1
 801a74a:	e7f2      	b.n	801a732 <_dtoa_r+0x272>
 801a74c:	2401      	movs	r4, #1
 801a74e:	2200      	movs	r2, #0
 801a750:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801a754:	f04f 3aff 	mov.w	sl, #4294967295
 801a758:	2100      	movs	r1, #0
 801a75a:	46d1      	mov	r9, sl
 801a75c:	2212      	movs	r2, #18
 801a75e:	9108      	str	r1, [sp, #32]
 801a760:	e7ce      	b.n	801a700 <_dtoa_r+0x240>
 801a762:	2201      	movs	r2, #1
 801a764:	9207      	str	r2, [sp, #28]
 801a766:	e7f5      	b.n	801a754 <_dtoa_r+0x294>
 801a768:	f8dd a020 	ldr.w	sl, [sp, #32]
 801a76c:	46d1      	mov	r9, sl
 801a76e:	4652      	mov	r2, sl
 801a770:	e7c6      	b.n	801a700 <_dtoa_r+0x240>
 801a772:	3101      	adds	r1, #1
 801a774:	6079      	str	r1, [r7, #4]
 801a776:	0040      	lsls	r0, r0, #1
 801a778:	e7c6      	b.n	801a708 <_dtoa_r+0x248>
 801a77a:	bf00      	nop
 801a77c:	f3af 8000 	nop.w
 801a780:	636f4361 	.word	0x636f4361
 801a784:	3fd287a7 	.word	0x3fd287a7
 801a788:	8b60c8b3 	.word	0x8b60c8b3
 801a78c:	3fc68a28 	.word	0x3fc68a28
 801a790:	509f79fb 	.word	0x509f79fb
 801a794:	3fd34413 	.word	0x3fd34413
 801a798:	0802b9b6 	.word	0x0802b9b6
 801a79c:	0802b9cd 	.word	0x0802b9cd
 801a7a0:	7ff00000 	.word	0x7ff00000
 801a7a4:	0802b9b2 	.word	0x0802b9b2
 801a7a8:	0802b9a9 	.word	0x0802b9a9
 801a7ac:	0802b82d 	.word	0x0802b82d
 801a7b0:	0802bb38 	.word	0x0802bb38
 801a7b4:	0802ba28 	.word	0x0802ba28
 801a7b8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801a7ba:	9901      	ldr	r1, [sp, #4]
 801a7bc:	6011      	str	r1, [r2, #0]
 801a7be:	f1b9 0f0e 	cmp.w	r9, #14
 801a7c2:	d86c      	bhi.n	801a89e <_dtoa_r+0x3de>
 801a7c4:	2c00      	cmp	r4, #0
 801a7c6:	d06a      	beq.n	801a89e <_dtoa_r+0x3de>
 801a7c8:	f1bb 0f00 	cmp.w	fp, #0
 801a7cc:	f340 80a0 	ble.w	801a910 <_dtoa_r+0x450>
 801a7d0:	49c1      	ldr	r1, [pc, #772]	; (801aad8 <_dtoa_r+0x618>)
 801a7d2:	f00b 020f 	and.w	r2, fp, #15
 801a7d6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801a7da:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801a7de:	ed92 7b00 	vldr	d7, [r2]
 801a7e2:	ea4f 112b 	mov.w	r1, fp, asr #4
 801a7e6:	f000 8087 	beq.w	801a8f8 <_dtoa_r+0x438>
 801a7ea:	4abc      	ldr	r2, [pc, #752]	; (801aadc <_dtoa_r+0x61c>)
 801a7ec:	ed92 6b08 	vldr	d6, [r2, #32]
 801a7f0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801a7f4:	ed8d 6b02 	vstr	d6, [sp, #8]
 801a7f8:	f001 010f 	and.w	r1, r1, #15
 801a7fc:	2203      	movs	r2, #3
 801a7fe:	48b7      	ldr	r0, [pc, #732]	; (801aadc <_dtoa_r+0x61c>)
 801a800:	2900      	cmp	r1, #0
 801a802:	d17b      	bne.n	801a8fc <_dtoa_r+0x43c>
 801a804:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a808:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801a80c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a810:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a812:	2900      	cmp	r1, #0
 801a814:	f000 80a2 	beq.w	801a95c <_dtoa_r+0x49c>
 801a818:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801a81c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a820:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a828:	f140 8098 	bpl.w	801a95c <_dtoa_r+0x49c>
 801a82c:	f1b9 0f00 	cmp.w	r9, #0
 801a830:	f000 8094 	beq.w	801a95c <_dtoa_r+0x49c>
 801a834:	f1ba 0f00 	cmp.w	sl, #0
 801a838:	dd2f      	ble.n	801a89a <_dtoa_r+0x3da>
 801a83a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801a83e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a842:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a846:	f10b 37ff 	add.w	r7, fp, #4294967295
 801a84a:	3201      	adds	r2, #1
 801a84c:	4650      	mov	r0, sl
 801a84e:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a852:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801a856:	ee07 2a90 	vmov	s15, r2
 801a85a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a85e:	eea7 5b06 	vfma.f64	d5, d7, d6
 801a862:	ee15 4a90 	vmov	r4, s11
 801a866:	ec52 1b15 	vmov	r1, r2, d5
 801a86a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 801a86e:	2800      	cmp	r0, #0
 801a870:	d177      	bne.n	801a962 <_dtoa_r+0x4a2>
 801a872:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801a876:	ee36 6b47 	vsub.f64	d6, d6, d7
 801a87a:	ec42 1b17 	vmov	d7, r1, r2
 801a87e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a886:	f300 8263 	bgt.w	801ad50 <_dtoa_r+0x890>
 801a88a:	eeb1 7b47 	vneg.f64	d7, d7
 801a88e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a896:	f100 8258 	bmi.w	801ad4a <_dtoa_r+0x88a>
 801a89a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801a89e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a8a0:	2a00      	cmp	r2, #0
 801a8a2:	f2c0 811d 	blt.w	801aae0 <_dtoa_r+0x620>
 801a8a6:	f1bb 0f0e 	cmp.w	fp, #14
 801a8aa:	f300 8119 	bgt.w	801aae0 <_dtoa_r+0x620>
 801a8ae:	4b8a      	ldr	r3, [pc, #552]	; (801aad8 <_dtoa_r+0x618>)
 801a8b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801a8b4:	ed93 6b00 	vldr	d6, [r3]
 801a8b8:	9b08      	ldr	r3, [sp, #32]
 801a8ba:	2b00      	cmp	r3, #0
 801a8bc:	f280 80b7 	bge.w	801aa2e <_dtoa_r+0x56e>
 801a8c0:	f1b9 0f00 	cmp.w	r9, #0
 801a8c4:	f300 80b3 	bgt.w	801aa2e <_dtoa_r+0x56e>
 801a8c8:	f040 823f 	bne.w	801ad4a <_dtoa_r+0x88a>
 801a8cc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801a8d0:	ee26 6b07 	vmul.f64	d6, d6, d7
 801a8d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a8d8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a8dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8e0:	464c      	mov	r4, r9
 801a8e2:	464f      	mov	r7, r9
 801a8e4:	f280 8215 	bge.w	801ad12 <_dtoa_r+0x852>
 801a8e8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a8ec:	2331      	movs	r3, #49	; 0x31
 801a8ee:	f808 3b01 	strb.w	r3, [r8], #1
 801a8f2:	f10b 0b01 	add.w	fp, fp, #1
 801a8f6:	e211      	b.n	801ad1c <_dtoa_r+0x85c>
 801a8f8:	2202      	movs	r2, #2
 801a8fa:	e780      	b.n	801a7fe <_dtoa_r+0x33e>
 801a8fc:	07cc      	lsls	r4, r1, #31
 801a8fe:	d504      	bpl.n	801a90a <_dtoa_r+0x44a>
 801a900:	ed90 6b00 	vldr	d6, [r0]
 801a904:	3201      	adds	r2, #1
 801a906:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a90a:	1049      	asrs	r1, r1, #1
 801a90c:	3008      	adds	r0, #8
 801a90e:	e777      	b.n	801a800 <_dtoa_r+0x340>
 801a910:	d022      	beq.n	801a958 <_dtoa_r+0x498>
 801a912:	f1cb 0100 	rsb	r1, fp, #0
 801a916:	4a70      	ldr	r2, [pc, #448]	; (801aad8 <_dtoa_r+0x618>)
 801a918:	f001 000f 	and.w	r0, r1, #15
 801a91c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801a920:	ed92 7b00 	vldr	d7, [r2]
 801a924:	ee28 7b07 	vmul.f64	d7, d8, d7
 801a928:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a92c:	486b      	ldr	r0, [pc, #428]	; (801aadc <_dtoa_r+0x61c>)
 801a92e:	1109      	asrs	r1, r1, #4
 801a930:	2400      	movs	r4, #0
 801a932:	2202      	movs	r2, #2
 801a934:	b929      	cbnz	r1, 801a942 <_dtoa_r+0x482>
 801a936:	2c00      	cmp	r4, #0
 801a938:	f43f af6a 	beq.w	801a810 <_dtoa_r+0x350>
 801a93c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a940:	e766      	b.n	801a810 <_dtoa_r+0x350>
 801a942:	07cf      	lsls	r7, r1, #31
 801a944:	d505      	bpl.n	801a952 <_dtoa_r+0x492>
 801a946:	ed90 6b00 	vldr	d6, [r0]
 801a94a:	3201      	adds	r2, #1
 801a94c:	2401      	movs	r4, #1
 801a94e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a952:	1049      	asrs	r1, r1, #1
 801a954:	3008      	adds	r0, #8
 801a956:	e7ed      	b.n	801a934 <_dtoa_r+0x474>
 801a958:	2202      	movs	r2, #2
 801a95a:	e759      	b.n	801a810 <_dtoa_r+0x350>
 801a95c:	465f      	mov	r7, fp
 801a95e:	4648      	mov	r0, r9
 801a960:	e775      	b.n	801a84e <_dtoa_r+0x38e>
 801a962:	ec42 1b17 	vmov	d7, r1, r2
 801a966:	4a5c      	ldr	r2, [pc, #368]	; (801aad8 <_dtoa_r+0x618>)
 801a968:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801a96c:	ed12 4b02 	vldr	d4, [r2, #-8]
 801a970:	9a01      	ldr	r2, [sp, #4]
 801a972:	1814      	adds	r4, r2, r0
 801a974:	9a07      	ldr	r2, [sp, #28]
 801a976:	b352      	cbz	r2, 801a9ce <_dtoa_r+0x50e>
 801a978:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801a97c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801a980:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a984:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801a988:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801a98c:	ee35 7b47 	vsub.f64	d7, d5, d7
 801a990:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a994:	ee14 2a90 	vmov	r2, s9
 801a998:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a99c:	3230      	adds	r2, #48	; 0x30
 801a99e:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a9a2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a9a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9aa:	f808 2b01 	strb.w	r2, [r8], #1
 801a9ae:	d439      	bmi.n	801aa24 <_dtoa_r+0x564>
 801a9b0:	ee32 5b46 	vsub.f64	d5, d2, d6
 801a9b4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801a9b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9bc:	d472      	bmi.n	801aaa4 <_dtoa_r+0x5e4>
 801a9be:	45a0      	cmp	r8, r4
 801a9c0:	f43f af6b 	beq.w	801a89a <_dtoa_r+0x3da>
 801a9c4:	ee27 7b03 	vmul.f64	d7, d7, d3
 801a9c8:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a9cc:	e7e0      	b.n	801a990 <_dtoa_r+0x4d0>
 801a9ce:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a9d2:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a9d6:	4621      	mov	r1, r4
 801a9d8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801a9dc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a9e0:	ee14 2a90 	vmov	r2, s9
 801a9e4:	3230      	adds	r2, #48	; 0x30
 801a9e6:	f808 2b01 	strb.w	r2, [r8], #1
 801a9ea:	45a0      	cmp	r8, r4
 801a9ec:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a9f0:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a9f4:	d118      	bne.n	801aa28 <_dtoa_r+0x568>
 801a9f6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801a9fa:	ee37 4b05 	vadd.f64	d4, d7, d5
 801a9fe:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801aa02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa06:	dc4d      	bgt.n	801aaa4 <_dtoa_r+0x5e4>
 801aa08:	ee35 7b47 	vsub.f64	d7, d5, d7
 801aa0c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801aa10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa14:	f57f af41 	bpl.w	801a89a <_dtoa_r+0x3da>
 801aa18:	4688      	mov	r8, r1
 801aa1a:	3901      	subs	r1, #1
 801aa1c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801aa20:	2b30      	cmp	r3, #48	; 0x30
 801aa22:	d0f9      	beq.n	801aa18 <_dtoa_r+0x558>
 801aa24:	46bb      	mov	fp, r7
 801aa26:	e02a      	b.n	801aa7e <_dtoa_r+0x5be>
 801aa28:	ee26 6b03 	vmul.f64	d6, d6, d3
 801aa2c:	e7d6      	b.n	801a9dc <_dtoa_r+0x51c>
 801aa2e:	ed9d 7b02 	vldr	d7, [sp, #8]
 801aa32:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801aa36:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801aa3a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801aa3e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801aa42:	ee15 3a10 	vmov	r3, s10
 801aa46:	3330      	adds	r3, #48	; 0x30
 801aa48:	f808 3b01 	strb.w	r3, [r8], #1
 801aa4c:	9b01      	ldr	r3, [sp, #4]
 801aa4e:	eba8 0303 	sub.w	r3, r8, r3
 801aa52:	4599      	cmp	r9, r3
 801aa54:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801aa58:	eea3 7b46 	vfms.f64	d7, d3, d6
 801aa5c:	d133      	bne.n	801aac6 <_dtoa_r+0x606>
 801aa5e:	ee37 7b07 	vadd.f64	d7, d7, d7
 801aa62:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801aa66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa6a:	dc1a      	bgt.n	801aaa2 <_dtoa_r+0x5e2>
 801aa6c:	eeb4 7b46 	vcmp.f64	d7, d6
 801aa70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa74:	d103      	bne.n	801aa7e <_dtoa_r+0x5be>
 801aa76:	ee15 3a10 	vmov	r3, s10
 801aa7a:	07d9      	lsls	r1, r3, #31
 801aa7c:	d411      	bmi.n	801aaa2 <_dtoa_r+0x5e2>
 801aa7e:	4629      	mov	r1, r5
 801aa80:	4630      	mov	r0, r6
 801aa82:	f000 fe59 	bl	801b738 <_Bfree>
 801aa86:	2300      	movs	r3, #0
 801aa88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801aa8a:	f888 3000 	strb.w	r3, [r8]
 801aa8e:	f10b 0301 	add.w	r3, fp, #1
 801aa92:	6013      	str	r3, [r2, #0]
 801aa94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801aa96:	2b00      	cmp	r3, #0
 801aa98:	f43f ad61 	beq.w	801a55e <_dtoa_r+0x9e>
 801aa9c:	f8c3 8000 	str.w	r8, [r3]
 801aaa0:	e55d      	b.n	801a55e <_dtoa_r+0x9e>
 801aaa2:	465f      	mov	r7, fp
 801aaa4:	4643      	mov	r3, r8
 801aaa6:	4698      	mov	r8, r3
 801aaa8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801aaac:	2a39      	cmp	r2, #57	; 0x39
 801aaae:	d106      	bne.n	801aabe <_dtoa_r+0x5fe>
 801aab0:	9a01      	ldr	r2, [sp, #4]
 801aab2:	429a      	cmp	r2, r3
 801aab4:	d1f7      	bne.n	801aaa6 <_dtoa_r+0x5e6>
 801aab6:	9901      	ldr	r1, [sp, #4]
 801aab8:	2230      	movs	r2, #48	; 0x30
 801aaba:	3701      	adds	r7, #1
 801aabc:	700a      	strb	r2, [r1, #0]
 801aabe:	781a      	ldrb	r2, [r3, #0]
 801aac0:	3201      	adds	r2, #1
 801aac2:	701a      	strb	r2, [r3, #0]
 801aac4:	e7ae      	b.n	801aa24 <_dtoa_r+0x564>
 801aac6:	ee27 7b04 	vmul.f64	d7, d7, d4
 801aaca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801aace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aad2:	d1b2      	bne.n	801aa3a <_dtoa_r+0x57a>
 801aad4:	e7d3      	b.n	801aa7e <_dtoa_r+0x5be>
 801aad6:	bf00      	nop
 801aad8:	0802bb38 	.word	0x0802bb38
 801aadc:	0802bb10 	.word	0x0802bb10
 801aae0:	9907      	ldr	r1, [sp, #28]
 801aae2:	2900      	cmp	r1, #0
 801aae4:	f000 80d0 	beq.w	801ac88 <_dtoa_r+0x7c8>
 801aae8:	9906      	ldr	r1, [sp, #24]
 801aaea:	2901      	cmp	r1, #1
 801aaec:	f300 80b4 	bgt.w	801ac58 <_dtoa_r+0x798>
 801aaf0:	990a      	ldr	r1, [sp, #40]	; 0x28
 801aaf2:	2900      	cmp	r1, #0
 801aaf4:	f000 80ac 	beq.w	801ac50 <_dtoa_r+0x790>
 801aaf8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801aafc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801ab00:	461c      	mov	r4, r3
 801ab02:	930a      	str	r3, [sp, #40]	; 0x28
 801ab04:	9b04      	ldr	r3, [sp, #16]
 801ab06:	4413      	add	r3, r2
 801ab08:	9304      	str	r3, [sp, #16]
 801ab0a:	9b05      	ldr	r3, [sp, #20]
 801ab0c:	2101      	movs	r1, #1
 801ab0e:	4413      	add	r3, r2
 801ab10:	4630      	mov	r0, r6
 801ab12:	9305      	str	r3, [sp, #20]
 801ab14:	f000 ff12 	bl	801b93c <__i2b>
 801ab18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ab1a:	4607      	mov	r7, r0
 801ab1c:	f1b8 0f00 	cmp.w	r8, #0
 801ab20:	dd0d      	ble.n	801ab3e <_dtoa_r+0x67e>
 801ab22:	9a05      	ldr	r2, [sp, #20]
 801ab24:	2a00      	cmp	r2, #0
 801ab26:	dd0a      	ble.n	801ab3e <_dtoa_r+0x67e>
 801ab28:	4542      	cmp	r2, r8
 801ab2a:	9904      	ldr	r1, [sp, #16]
 801ab2c:	bfa8      	it	ge
 801ab2e:	4642      	movge	r2, r8
 801ab30:	1a89      	subs	r1, r1, r2
 801ab32:	9104      	str	r1, [sp, #16]
 801ab34:	9905      	ldr	r1, [sp, #20]
 801ab36:	eba8 0802 	sub.w	r8, r8, r2
 801ab3a:	1a8a      	subs	r2, r1, r2
 801ab3c:	9205      	str	r2, [sp, #20]
 801ab3e:	b303      	cbz	r3, 801ab82 <_dtoa_r+0x6c2>
 801ab40:	9a07      	ldr	r2, [sp, #28]
 801ab42:	2a00      	cmp	r2, #0
 801ab44:	f000 80a5 	beq.w	801ac92 <_dtoa_r+0x7d2>
 801ab48:	2c00      	cmp	r4, #0
 801ab4a:	dd13      	ble.n	801ab74 <_dtoa_r+0x6b4>
 801ab4c:	4639      	mov	r1, r7
 801ab4e:	4622      	mov	r2, r4
 801ab50:	4630      	mov	r0, r6
 801ab52:	930d      	str	r3, [sp, #52]	; 0x34
 801ab54:	f000 ffb2 	bl	801babc <__pow5mult>
 801ab58:	462a      	mov	r2, r5
 801ab5a:	4601      	mov	r1, r0
 801ab5c:	4607      	mov	r7, r0
 801ab5e:	4630      	mov	r0, r6
 801ab60:	f000 ff02 	bl	801b968 <__multiply>
 801ab64:	4629      	mov	r1, r5
 801ab66:	900a      	str	r0, [sp, #40]	; 0x28
 801ab68:	4630      	mov	r0, r6
 801ab6a:	f000 fde5 	bl	801b738 <_Bfree>
 801ab6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ab70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ab72:	4615      	mov	r5, r2
 801ab74:	1b1a      	subs	r2, r3, r4
 801ab76:	d004      	beq.n	801ab82 <_dtoa_r+0x6c2>
 801ab78:	4629      	mov	r1, r5
 801ab7a:	4630      	mov	r0, r6
 801ab7c:	f000 ff9e 	bl	801babc <__pow5mult>
 801ab80:	4605      	mov	r5, r0
 801ab82:	2101      	movs	r1, #1
 801ab84:	4630      	mov	r0, r6
 801ab86:	f000 fed9 	bl	801b93c <__i2b>
 801ab8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ab8c:	2b00      	cmp	r3, #0
 801ab8e:	4604      	mov	r4, r0
 801ab90:	f340 8081 	ble.w	801ac96 <_dtoa_r+0x7d6>
 801ab94:	461a      	mov	r2, r3
 801ab96:	4601      	mov	r1, r0
 801ab98:	4630      	mov	r0, r6
 801ab9a:	f000 ff8f 	bl	801babc <__pow5mult>
 801ab9e:	9b06      	ldr	r3, [sp, #24]
 801aba0:	2b01      	cmp	r3, #1
 801aba2:	4604      	mov	r4, r0
 801aba4:	dd7a      	ble.n	801ac9c <_dtoa_r+0x7dc>
 801aba6:	2300      	movs	r3, #0
 801aba8:	930a      	str	r3, [sp, #40]	; 0x28
 801abaa:	6922      	ldr	r2, [r4, #16]
 801abac:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801abb0:	6910      	ldr	r0, [r2, #16]
 801abb2:	f000 fe73 	bl	801b89c <__hi0bits>
 801abb6:	f1c0 0020 	rsb	r0, r0, #32
 801abba:	9b05      	ldr	r3, [sp, #20]
 801abbc:	4418      	add	r0, r3
 801abbe:	f010 001f 	ands.w	r0, r0, #31
 801abc2:	f000 808c 	beq.w	801acde <_dtoa_r+0x81e>
 801abc6:	f1c0 0220 	rsb	r2, r0, #32
 801abca:	2a04      	cmp	r2, #4
 801abcc:	f340 8085 	ble.w	801acda <_dtoa_r+0x81a>
 801abd0:	f1c0 001c 	rsb	r0, r0, #28
 801abd4:	9b04      	ldr	r3, [sp, #16]
 801abd6:	4403      	add	r3, r0
 801abd8:	9304      	str	r3, [sp, #16]
 801abda:	9b05      	ldr	r3, [sp, #20]
 801abdc:	4403      	add	r3, r0
 801abde:	4480      	add	r8, r0
 801abe0:	9305      	str	r3, [sp, #20]
 801abe2:	9b04      	ldr	r3, [sp, #16]
 801abe4:	2b00      	cmp	r3, #0
 801abe6:	dd05      	ble.n	801abf4 <_dtoa_r+0x734>
 801abe8:	4629      	mov	r1, r5
 801abea:	461a      	mov	r2, r3
 801abec:	4630      	mov	r0, r6
 801abee:	f000 ffbf 	bl	801bb70 <__lshift>
 801abf2:	4605      	mov	r5, r0
 801abf4:	9b05      	ldr	r3, [sp, #20]
 801abf6:	2b00      	cmp	r3, #0
 801abf8:	dd05      	ble.n	801ac06 <_dtoa_r+0x746>
 801abfa:	4621      	mov	r1, r4
 801abfc:	461a      	mov	r2, r3
 801abfe:	4630      	mov	r0, r6
 801ac00:	f000 ffb6 	bl	801bb70 <__lshift>
 801ac04:	4604      	mov	r4, r0
 801ac06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ac08:	2b00      	cmp	r3, #0
 801ac0a:	d06a      	beq.n	801ace2 <_dtoa_r+0x822>
 801ac0c:	4621      	mov	r1, r4
 801ac0e:	4628      	mov	r0, r5
 801ac10:	f001 f81e 	bl	801bc50 <__mcmp>
 801ac14:	2800      	cmp	r0, #0
 801ac16:	da64      	bge.n	801ace2 <_dtoa_r+0x822>
 801ac18:	2300      	movs	r3, #0
 801ac1a:	4629      	mov	r1, r5
 801ac1c:	220a      	movs	r2, #10
 801ac1e:	4630      	mov	r0, r6
 801ac20:	f000 fdac 	bl	801b77c <__multadd>
 801ac24:	9b07      	ldr	r3, [sp, #28]
 801ac26:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ac2a:	4605      	mov	r5, r0
 801ac2c:	2b00      	cmp	r3, #0
 801ac2e:	f000 8191 	beq.w	801af54 <_dtoa_r+0xa94>
 801ac32:	4639      	mov	r1, r7
 801ac34:	2300      	movs	r3, #0
 801ac36:	220a      	movs	r2, #10
 801ac38:	4630      	mov	r0, r6
 801ac3a:	f000 fd9f 	bl	801b77c <__multadd>
 801ac3e:	f1ba 0f00 	cmp.w	sl, #0
 801ac42:	4607      	mov	r7, r0
 801ac44:	f300 808d 	bgt.w	801ad62 <_dtoa_r+0x8a2>
 801ac48:	9b06      	ldr	r3, [sp, #24]
 801ac4a:	2b02      	cmp	r3, #2
 801ac4c:	dc50      	bgt.n	801acf0 <_dtoa_r+0x830>
 801ac4e:	e088      	b.n	801ad62 <_dtoa_r+0x8a2>
 801ac50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ac52:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801ac56:	e751      	b.n	801aafc <_dtoa_r+0x63c>
 801ac58:	f109 34ff 	add.w	r4, r9, #4294967295
 801ac5c:	42a3      	cmp	r3, r4
 801ac5e:	bfbf      	itttt	lt
 801ac60:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 801ac62:	1ae3      	sublt	r3, r4, r3
 801ac64:	18d2      	addlt	r2, r2, r3
 801ac66:	9209      	strlt	r2, [sp, #36]	; 0x24
 801ac68:	bfb6      	itet	lt
 801ac6a:	4623      	movlt	r3, r4
 801ac6c:	1b1c      	subge	r4, r3, r4
 801ac6e:	2400      	movlt	r4, #0
 801ac70:	f1b9 0f00 	cmp.w	r9, #0
 801ac74:	bfb5      	itete	lt
 801ac76:	9a04      	ldrlt	r2, [sp, #16]
 801ac78:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801ac7c:	eba2 0809 	sublt.w	r8, r2, r9
 801ac80:	464a      	movge	r2, r9
 801ac82:	bfb8      	it	lt
 801ac84:	2200      	movlt	r2, #0
 801ac86:	e73c      	b.n	801ab02 <_dtoa_r+0x642>
 801ac88:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801ac8c:	9f07      	ldr	r7, [sp, #28]
 801ac8e:	461c      	mov	r4, r3
 801ac90:	e744      	b.n	801ab1c <_dtoa_r+0x65c>
 801ac92:	461a      	mov	r2, r3
 801ac94:	e770      	b.n	801ab78 <_dtoa_r+0x6b8>
 801ac96:	9b06      	ldr	r3, [sp, #24]
 801ac98:	2b01      	cmp	r3, #1
 801ac9a:	dc18      	bgt.n	801acce <_dtoa_r+0x80e>
 801ac9c:	9b02      	ldr	r3, [sp, #8]
 801ac9e:	b9b3      	cbnz	r3, 801acce <_dtoa_r+0x80e>
 801aca0:	9b03      	ldr	r3, [sp, #12]
 801aca2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801aca6:	b9a2      	cbnz	r2, 801acd2 <_dtoa_r+0x812>
 801aca8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801acac:	0d12      	lsrs	r2, r2, #20
 801acae:	0512      	lsls	r2, r2, #20
 801acb0:	b18a      	cbz	r2, 801acd6 <_dtoa_r+0x816>
 801acb2:	9b04      	ldr	r3, [sp, #16]
 801acb4:	3301      	adds	r3, #1
 801acb6:	9304      	str	r3, [sp, #16]
 801acb8:	9b05      	ldr	r3, [sp, #20]
 801acba:	3301      	adds	r3, #1
 801acbc:	9305      	str	r3, [sp, #20]
 801acbe:	2301      	movs	r3, #1
 801acc0:	930a      	str	r3, [sp, #40]	; 0x28
 801acc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801acc4:	2b00      	cmp	r3, #0
 801acc6:	f47f af70 	bne.w	801abaa <_dtoa_r+0x6ea>
 801acca:	2001      	movs	r0, #1
 801accc:	e775      	b.n	801abba <_dtoa_r+0x6fa>
 801acce:	2300      	movs	r3, #0
 801acd0:	e7f6      	b.n	801acc0 <_dtoa_r+0x800>
 801acd2:	9b02      	ldr	r3, [sp, #8]
 801acd4:	e7f4      	b.n	801acc0 <_dtoa_r+0x800>
 801acd6:	920a      	str	r2, [sp, #40]	; 0x28
 801acd8:	e7f3      	b.n	801acc2 <_dtoa_r+0x802>
 801acda:	d082      	beq.n	801abe2 <_dtoa_r+0x722>
 801acdc:	4610      	mov	r0, r2
 801acde:	301c      	adds	r0, #28
 801ace0:	e778      	b.n	801abd4 <_dtoa_r+0x714>
 801ace2:	f1b9 0f00 	cmp.w	r9, #0
 801ace6:	dc37      	bgt.n	801ad58 <_dtoa_r+0x898>
 801ace8:	9b06      	ldr	r3, [sp, #24]
 801acea:	2b02      	cmp	r3, #2
 801acec:	dd34      	ble.n	801ad58 <_dtoa_r+0x898>
 801acee:	46ca      	mov	sl, r9
 801acf0:	f1ba 0f00 	cmp.w	sl, #0
 801acf4:	d10d      	bne.n	801ad12 <_dtoa_r+0x852>
 801acf6:	4621      	mov	r1, r4
 801acf8:	4653      	mov	r3, sl
 801acfa:	2205      	movs	r2, #5
 801acfc:	4630      	mov	r0, r6
 801acfe:	f000 fd3d 	bl	801b77c <__multadd>
 801ad02:	4601      	mov	r1, r0
 801ad04:	4604      	mov	r4, r0
 801ad06:	4628      	mov	r0, r5
 801ad08:	f000 ffa2 	bl	801bc50 <__mcmp>
 801ad0c:	2800      	cmp	r0, #0
 801ad0e:	f73f adeb 	bgt.w	801a8e8 <_dtoa_r+0x428>
 801ad12:	9b08      	ldr	r3, [sp, #32]
 801ad14:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801ad18:	ea6f 0b03 	mvn.w	fp, r3
 801ad1c:	f04f 0900 	mov.w	r9, #0
 801ad20:	4621      	mov	r1, r4
 801ad22:	4630      	mov	r0, r6
 801ad24:	f000 fd08 	bl	801b738 <_Bfree>
 801ad28:	2f00      	cmp	r7, #0
 801ad2a:	f43f aea8 	beq.w	801aa7e <_dtoa_r+0x5be>
 801ad2e:	f1b9 0f00 	cmp.w	r9, #0
 801ad32:	d005      	beq.n	801ad40 <_dtoa_r+0x880>
 801ad34:	45b9      	cmp	r9, r7
 801ad36:	d003      	beq.n	801ad40 <_dtoa_r+0x880>
 801ad38:	4649      	mov	r1, r9
 801ad3a:	4630      	mov	r0, r6
 801ad3c:	f000 fcfc 	bl	801b738 <_Bfree>
 801ad40:	4639      	mov	r1, r7
 801ad42:	4630      	mov	r0, r6
 801ad44:	f000 fcf8 	bl	801b738 <_Bfree>
 801ad48:	e699      	b.n	801aa7e <_dtoa_r+0x5be>
 801ad4a:	2400      	movs	r4, #0
 801ad4c:	4627      	mov	r7, r4
 801ad4e:	e7e0      	b.n	801ad12 <_dtoa_r+0x852>
 801ad50:	46bb      	mov	fp, r7
 801ad52:	4604      	mov	r4, r0
 801ad54:	4607      	mov	r7, r0
 801ad56:	e5c7      	b.n	801a8e8 <_dtoa_r+0x428>
 801ad58:	9b07      	ldr	r3, [sp, #28]
 801ad5a:	46ca      	mov	sl, r9
 801ad5c:	2b00      	cmp	r3, #0
 801ad5e:	f000 8100 	beq.w	801af62 <_dtoa_r+0xaa2>
 801ad62:	f1b8 0f00 	cmp.w	r8, #0
 801ad66:	dd05      	ble.n	801ad74 <_dtoa_r+0x8b4>
 801ad68:	4639      	mov	r1, r7
 801ad6a:	4642      	mov	r2, r8
 801ad6c:	4630      	mov	r0, r6
 801ad6e:	f000 feff 	bl	801bb70 <__lshift>
 801ad72:	4607      	mov	r7, r0
 801ad74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ad76:	2b00      	cmp	r3, #0
 801ad78:	d05d      	beq.n	801ae36 <_dtoa_r+0x976>
 801ad7a:	6879      	ldr	r1, [r7, #4]
 801ad7c:	4630      	mov	r0, r6
 801ad7e:	f000 fc9b 	bl	801b6b8 <_Balloc>
 801ad82:	4680      	mov	r8, r0
 801ad84:	b928      	cbnz	r0, 801ad92 <_dtoa_r+0x8d2>
 801ad86:	4b82      	ldr	r3, [pc, #520]	; (801af90 <_dtoa_r+0xad0>)
 801ad88:	4602      	mov	r2, r0
 801ad8a:	f240 21ea 	movw	r1, #746	; 0x2ea
 801ad8e:	f7ff bbaf 	b.w	801a4f0 <_dtoa_r+0x30>
 801ad92:	693a      	ldr	r2, [r7, #16]
 801ad94:	3202      	adds	r2, #2
 801ad96:	0092      	lsls	r2, r2, #2
 801ad98:	f107 010c 	add.w	r1, r7, #12
 801ad9c:	300c      	adds	r0, #12
 801ad9e:	f7fd fdf9 	bl	8018994 <memcpy>
 801ada2:	2201      	movs	r2, #1
 801ada4:	4641      	mov	r1, r8
 801ada6:	4630      	mov	r0, r6
 801ada8:	f000 fee2 	bl	801bb70 <__lshift>
 801adac:	9b01      	ldr	r3, [sp, #4]
 801adae:	3301      	adds	r3, #1
 801adb0:	9304      	str	r3, [sp, #16]
 801adb2:	9b01      	ldr	r3, [sp, #4]
 801adb4:	4453      	add	r3, sl
 801adb6:	9308      	str	r3, [sp, #32]
 801adb8:	9b02      	ldr	r3, [sp, #8]
 801adba:	f003 0301 	and.w	r3, r3, #1
 801adbe:	46b9      	mov	r9, r7
 801adc0:	9307      	str	r3, [sp, #28]
 801adc2:	4607      	mov	r7, r0
 801adc4:	9b04      	ldr	r3, [sp, #16]
 801adc6:	4621      	mov	r1, r4
 801adc8:	3b01      	subs	r3, #1
 801adca:	4628      	mov	r0, r5
 801adcc:	9302      	str	r3, [sp, #8]
 801adce:	f7ff faeb 	bl	801a3a8 <quorem>
 801add2:	4603      	mov	r3, r0
 801add4:	3330      	adds	r3, #48	; 0x30
 801add6:	9005      	str	r0, [sp, #20]
 801add8:	4649      	mov	r1, r9
 801adda:	4628      	mov	r0, r5
 801addc:	9309      	str	r3, [sp, #36]	; 0x24
 801adde:	f000 ff37 	bl	801bc50 <__mcmp>
 801ade2:	463a      	mov	r2, r7
 801ade4:	4682      	mov	sl, r0
 801ade6:	4621      	mov	r1, r4
 801ade8:	4630      	mov	r0, r6
 801adea:	f000 ff4d 	bl	801bc88 <__mdiff>
 801adee:	68c2      	ldr	r2, [r0, #12]
 801adf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801adf2:	4680      	mov	r8, r0
 801adf4:	bb0a      	cbnz	r2, 801ae3a <_dtoa_r+0x97a>
 801adf6:	4601      	mov	r1, r0
 801adf8:	4628      	mov	r0, r5
 801adfa:	f000 ff29 	bl	801bc50 <__mcmp>
 801adfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ae00:	4602      	mov	r2, r0
 801ae02:	4641      	mov	r1, r8
 801ae04:	4630      	mov	r0, r6
 801ae06:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801ae0a:	f000 fc95 	bl	801b738 <_Bfree>
 801ae0e:	9b06      	ldr	r3, [sp, #24]
 801ae10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ae12:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801ae16:	ea43 0102 	orr.w	r1, r3, r2
 801ae1a:	9b07      	ldr	r3, [sp, #28]
 801ae1c:	430b      	orrs	r3, r1
 801ae1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ae20:	d10d      	bne.n	801ae3e <_dtoa_r+0x97e>
 801ae22:	2b39      	cmp	r3, #57	; 0x39
 801ae24:	d029      	beq.n	801ae7a <_dtoa_r+0x9ba>
 801ae26:	f1ba 0f00 	cmp.w	sl, #0
 801ae2a:	dd01      	ble.n	801ae30 <_dtoa_r+0x970>
 801ae2c:	9b05      	ldr	r3, [sp, #20]
 801ae2e:	3331      	adds	r3, #49	; 0x31
 801ae30:	9a02      	ldr	r2, [sp, #8]
 801ae32:	7013      	strb	r3, [r2, #0]
 801ae34:	e774      	b.n	801ad20 <_dtoa_r+0x860>
 801ae36:	4638      	mov	r0, r7
 801ae38:	e7b8      	b.n	801adac <_dtoa_r+0x8ec>
 801ae3a:	2201      	movs	r2, #1
 801ae3c:	e7e1      	b.n	801ae02 <_dtoa_r+0x942>
 801ae3e:	f1ba 0f00 	cmp.w	sl, #0
 801ae42:	db06      	blt.n	801ae52 <_dtoa_r+0x992>
 801ae44:	9906      	ldr	r1, [sp, #24]
 801ae46:	ea41 0a0a 	orr.w	sl, r1, sl
 801ae4a:	9907      	ldr	r1, [sp, #28]
 801ae4c:	ea5a 0101 	orrs.w	r1, sl, r1
 801ae50:	d120      	bne.n	801ae94 <_dtoa_r+0x9d4>
 801ae52:	2a00      	cmp	r2, #0
 801ae54:	ddec      	ble.n	801ae30 <_dtoa_r+0x970>
 801ae56:	4629      	mov	r1, r5
 801ae58:	2201      	movs	r2, #1
 801ae5a:	4630      	mov	r0, r6
 801ae5c:	9304      	str	r3, [sp, #16]
 801ae5e:	f000 fe87 	bl	801bb70 <__lshift>
 801ae62:	4621      	mov	r1, r4
 801ae64:	4605      	mov	r5, r0
 801ae66:	f000 fef3 	bl	801bc50 <__mcmp>
 801ae6a:	2800      	cmp	r0, #0
 801ae6c:	9b04      	ldr	r3, [sp, #16]
 801ae6e:	dc02      	bgt.n	801ae76 <_dtoa_r+0x9b6>
 801ae70:	d1de      	bne.n	801ae30 <_dtoa_r+0x970>
 801ae72:	07da      	lsls	r2, r3, #31
 801ae74:	d5dc      	bpl.n	801ae30 <_dtoa_r+0x970>
 801ae76:	2b39      	cmp	r3, #57	; 0x39
 801ae78:	d1d8      	bne.n	801ae2c <_dtoa_r+0x96c>
 801ae7a:	9a02      	ldr	r2, [sp, #8]
 801ae7c:	2339      	movs	r3, #57	; 0x39
 801ae7e:	7013      	strb	r3, [r2, #0]
 801ae80:	4643      	mov	r3, r8
 801ae82:	4698      	mov	r8, r3
 801ae84:	3b01      	subs	r3, #1
 801ae86:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801ae8a:	2a39      	cmp	r2, #57	; 0x39
 801ae8c:	d051      	beq.n	801af32 <_dtoa_r+0xa72>
 801ae8e:	3201      	adds	r2, #1
 801ae90:	701a      	strb	r2, [r3, #0]
 801ae92:	e745      	b.n	801ad20 <_dtoa_r+0x860>
 801ae94:	2a00      	cmp	r2, #0
 801ae96:	dd03      	ble.n	801aea0 <_dtoa_r+0x9e0>
 801ae98:	2b39      	cmp	r3, #57	; 0x39
 801ae9a:	d0ee      	beq.n	801ae7a <_dtoa_r+0x9ba>
 801ae9c:	3301      	adds	r3, #1
 801ae9e:	e7c7      	b.n	801ae30 <_dtoa_r+0x970>
 801aea0:	9a04      	ldr	r2, [sp, #16]
 801aea2:	9908      	ldr	r1, [sp, #32]
 801aea4:	f802 3c01 	strb.w	r3, [r2, #-1]
 801aea8:	428a      	cmp	r2, r1
 801aeaa:	d02b      	beq.n	801af04 <_dtoa_r+0xa44>
 801aeac:	4629      	mov	r1, r5
 801aeae:	2300      	movs	r3, #0
 801aeb0:	220a      	movs	r2, #10
 801aeb2:	4630      	mov	r0, r6
 801aeb4:	f000 fc62 	bl	801b77c <__multadd>
 801aeb8:	45b9      	cmp	r9, r7
 801aeba:	4605      	mov	r5, r0
 801aebc:	f04f 0300 	mov.w	r3, #0
 801aec0:	f04f 020a 	mov.w	r2, #10
 801aec4:	4649      	mov	r1, r9
 801aec6:	4630      	mov	r0, r6
 801aec8:	d107      	bne.n	801aeda <_dtoa_r+0xa1a>
 801aeca:	f000 fc57 	bl	801b77c <__multadd>
 801aece:	4681      	mov	r9, r0
 801aed0:	4607      	mov	r7, r0
 801aed2:	9b04      	ldr	r3, [sp, #16]
 801aed4:	3301      	adds	r3, #1
 801aed6:	9304      	str	r3, [sp, #16]
 801aed8:	e774      	b.n	801adc4 <_dtoa_r+0x904>
 801aeda:	f000 fc4f 	bl	801b77c <__multadd>
 801aede:	4639      	mov	r1, r7
 801aee0:	4681      	mov	r9, r0
 801aee2:	2300      	movs	r3, #0
 801aee4:	220a      	movs	r2, #10
 801aee6:	4630      	mov	r0, r6
 801aee8:	f000 fc48 	bl	801b77c <__multadd>
 801aeec:	4607      	mov	r7, r0
 801aeee:	e7f0      	b.n	801aed2 <_dtoa_r+0xa12>
 801aef0:	f1ba 0f00 	cmp.w	sl, #0
 801aef4:	9a01      	ldr	r2, [sp, #4]
 801aef6:	bfcc      	ite	gt
 801aef8:	46d0      	movgt	r8, sl
 801aefa:	f04f 0801 	movle.w	r8, #1
 801aefe:	4490      	add	r8, r2
 801af00:	f04f 0900 	mov.w	r9, #0
 801af04:	4629      	mov	r1, r5
 801af06:	2201      	movs	r2, #1
 801af08:	4630      	mov	r0, r6
 801af0a:	9302      	str	r3, [sp, #8]
 801af0c:	f000 fe30 	bl	801bb70 <__lshift>
 801af10:	4621      	mov	r1, r4
 801af12:	4605      	mov	r5, r0
 801af14:	f000 fe9c 	bl	801bc50 <__mcmp>
 801af18:	2800      	cmp	r0, #0
 801af1a:	dcb1      	bgt.n	801ae80 <_dtoa_r+0x9c0>
 801af1c:	d102      	bne.n	801af24 <_dtoa_r+0xa64>
 801af1e:	9b02      	ldr	r3, [sp, #8]
 801af20:	07db      	lsls	r3, r3, #31
 801af22:	d4ad      	bmi.n	801ae80 <_dtoa_r+0x9c0>
 801af24:	4643      	mov	r3, r8
 801af26:	4698      	mov	r8, r3
 801af28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801af2c:	2a30      	cmp	r2, #48	; 0x30
 801af2e:	d0fa      	beq.n	801af26 <_dtoa_r+0xa66>
 801af30:	e6f6      	b.n	801ad20 <_dtoa_r+0x860>
 801af32:	9a01      	ldr	r2, [sp, #4]
 801af34:	429a      	cmp	r2, r3
 801af36:	d1a4      	bne.n	801ae82 <_dtoa_r+0x9c2>
 801af38:	f10b 0b01 	add.w	fp, fp, #1
 801af3c:	2331      	movs	r3, #49	; 0x31
 801af3e:	e778      	b.n	801ae32 <_dtoa_r+0x972>
 801af40:	4b14      	ldr	r3, [pc, #80]	; (801af94 <_dtoa_r+0xad4>)
 801af42:	f7ff bb27 	b.w	801a594 <_dtoa_r+0xd4>
 801af46:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801af48:	2b00      	cmp	r3, #0
 801af4a:	f47f ab03 	bne.w	801a554 <_dtoa_r+0x94>
 801af4e:	4b12      	ldr	r3, [pc, #72]	; (801af98 <_dtoa_r+0xad8>)
 801af50:	f7ff bb20 	b.w	801a594 <_dtoa_r+0xd4>
 801af54:	f1ba 0f00 	cmp.w	sl, #0
 801af58:	dc03      	bgt.n	801af62 <_dtoa_r+0xaa2>
 801af5a:	9b06      	ldr	r3, [sp, #24]
 801af5c:	2b02      	cmp	r3, #2
 801af5e:	f73f aec7 	bgt.w	801acf0 <_dtoa_r+0x830>
 801af62:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801af66:	4621      	mov	r1, r4
 801af68:	4628      	mov	r0, r5
 801af6a:	f7ff fa1d 	bl	801a3a8 <quorem>
 801af6e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801af72:	f808 3b01 	strb.w	r3, [r8], #1
 801af76:	9a01      	ldr	r2, [sp, #4]
 801af78:	eba8 0202 	sub.w	r2, r8, r2
 801af7c:	4592      	cmp	sl, r2
 801af7e:	ddb7      	ble.n	801aef0 <_dtoa_r+0xa30>
 801af80:	4629      	mov	r1, r5
 801af82:	2300      	movs	r3, #0
 801af84:	220a      	movs	r2, #10
 801af86:	4630      	mov	r0, r6
 801af88:	f000 fbf8 	bl	801b77c <__multadd>
 801af8c:	4605      	mov	r5, r0
 801af8e:	e7ea      	b.n	801af66 <_dtoa_r+0xaa6>
 801af90:	0802ba28 	.word	0x0802ba28
 801af94:	0802b82c 	.word	0x0802b82c
 801af98:	0802b9a9 	.word	0x0802b9a9

0801af9c <rshift>:
 801af9c:	6903      	ldr	r3, [r0, #16]
 801af9e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801afa2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801afa6:	ea4f 1261 	mov.w	r2, r1, asr #5
 801afaa:	f100 0414 	add.w	r4, r0, #20
 801afae:	dd45      	ble.n	801b03c <rshift+0xa0>
 801afb0:	f011 011f 	ands.w	r1, r1, #31
 801afb4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801afb8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801afbc:	d10c      	bne.n	801afd8 <rshift+0x3c>
 801afbe:	f100 0710 	add.w	r7, r0, #16
 801afc2:	4629      	mov	r1, r5
 801afc4:	42b1      	cmp	r1, r6
 801afc6:	d334      	bcc.n	801b032 <rshift+0x96>
 801afc8:	1a9b      	subs	r3, r3, r2
 801afca:	009b      	lsls	r3, r3, #2
 801afcc:	1eea      	subs	r2, r5, #3
 801afce:	4296      	cmp	r6, r2
 801afd0:	bf38      	it	cc
 801afd2:	2300      	movcc	r3, #0
 801afd4:	4423      	add	r3, r4
 801afd6:	e015      	b.n	801b004 <rshift+0x68>
 801afd8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801afdc:	f1c1 0820 	rsb	r8, r1, #32
 801afe0:	40cf      	lsrs	r7, r1
 801afe2:	f105 0e04 	add.w	lr, r5, #4
 801afe6:	46a1      	mov	r9, r4
 801afe8:	4576      	cmp	r6, lr
 801afea:	46f4      	mov	ip, lr
 801afec:	d815      	bhi.n	801b01a <rshift+0x7e>
 801afee:	1a9a      	subs	r2, r3, r2
 801aff0:	0092      	lsls	r2, r2, #2
 801aff2:	3a04      	subs	r2, #4
 801aff4:	3501      	adds	r5, #1
 801aff6:	42ae      	cmp	r6, r5
 801aff8:	bf38      	it	cc
 801affa:	2200      	movcc	r2, #0
 801affc:	18a3      	adds	r3, r4, r2
 801affe:	50a7      	str	r7, [r4, r2]
 801b000:	b107      	cbz	r7, 801b004 <rshift+0x68>
 801b002:	3304      	adds	r3, #4
 801b004:	1b1a      	subs	r2, r3, r4
 801b006:	42a3      	cmp	r3, r4
 801b008:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801b00c:	bf08      	it	eq
 801b00e:	2300      	moveq	r3, #0
 801b010:	6102      	str	r2, [r0, #16]
 801b012:	bf08      	it	eq
 801b014:	6143      	streq	r3, [r0, #20]
 801b016:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b01a:	f8dc c000 	ldr.w	ip, [ip]
 801b01e:	fa0c fc08 	lsl.w	ip, ip, r8
 801b022:	ea4c 0707 	orr.w	r7, ip, r7
 801b026:	f849 7b04 	str.w	r7, [r9], #4
 801b02a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801b02e:	40cf      	lsrs	r7, r1
 801b030:	e7da      	b.n	801afe8 <rshift+0x4c>
 801b032:	f851 cb04 	ldr.w	ip, [r1], #4
 801b036:	f847 cf04 	str.w	ip, [r7, #4]!
 801b03a:	e7c3      	b.n	801afc4 <rshift+0x28>
 801b03c:	4623      	mov	r3, r4
 801b03e:	e7e1      	b.n	801b004 <rshift+0x68>

0801b040 <__hexdig_fun>:
 801b040:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801b044:	2b09      	cmp	r3, #9
 801b046:	d802      	bhi.n	801b04e <__hexdig_fun+0xe>
 801b048:	3820      	subs	r0, #32
 801b04a:	b2c0      	uxtb	r0, r0
 801b04c:	4770      	bx	lr
 801b04e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801b052:	2b05      	cmp	r3, #5
 801b054:	d801      	bhi.n	801b05a <__hexdig_fun+0x1a>
 801b056:	3847      	subs	r0, #71	; 0x47
 801b058:	e7f7      	b.n	801b04a <__hexdig_fun+0xa>
 801b05a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801b05e:	2b05      	cmp	r3, #5
 801b060:	d801      	bhi.n	801b066 <__hexdig_fun+0x26>
 801b062:	3827      	subs	r0, #39	; 0x27
 801b064:	e7f1      	b.n	801b04a <__hexdig_fun+0xa>
 801b066:	2000      	movs	r0, #0
 801b068:	4770      	bx	lr
	...

0801b06c <__gethex>:
 801b06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b070:	ed2d 8b02 	vpush	{d8}
 801b074:	b089      	sub	sp, #36	; 0x24
 801b076:	ee08 0a10 	vmov	s16, r0
 801b07a:	9304      	str	r3, [sp, #16]
 801b07c:	4bb4      	ldr	r3, [pc, #720]	; (801b350 <__gethex+0x2e4>)
 801b07e:	681b      	ldr	r3, [r3, #0]
 801b080:	9301      	str	r3, [sp, #4]
 801b082:	4618      	mov	r0, r3
 801b084:	468b      	mov	fp, r1
 801b086:	4690      	mov	r8, r2
 801b088:	f7ed f93a 	bl	8008300 <strlen>
 801b08c:	9b01      	ldr	r3, [sp, #4]
 801b08e:	f8db 2000 	ldr.w	r2, [fp]
 801b092:	4403      	add	r3, r0
 801b094:	4682      	mov	sl, r0
 801b096:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801b09a:	9305      	str	r3, [sp, #20]
 801b09c:	1c93      	adds	r3, r2, #2
 801b09e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801b0a2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801b0a6:	32fe      	adds	r2, #254	; 0xfe
 801b0a8:	18d1      	adds	r1, r2, r3
 801b0aa:	461f      	mov	r7, r3
 801b0ac:	f813 0b01 	ldrb.w	r0, [r3], #1
 801b0b0:	9100      	str	r1, [sp, #0]
 801b0b2:	2830      	cmp	r0, #48	; 0x30
 801b0b4:	d0f8      	beq.n	801b0a8 <__gethex+0x3c>
 801b0b6:	f7ff ffc3 	bl	801b040 <__hexdig_fun>
 801b0ba:	4604      	mov	r4, r0
 801b0bc:	2800      	cmp	r0, #0
 801b0be:	d13a      	bne.n	801b136 <__gethex+0xca>
 801b0c0:	9901      	ldr	r1, [sp, #4]
 801b0c2:	4652      	mov	r2, sl
 801b0c4:	4638      	mov	r0, r7
 801b0c6:	f7fe fae9 	bl	801969c <strncmp>
 801b0ca:	4605      	mov	r5, r0
 801b0cc:	2800      	cmp	r0, #0
 801b0ce:	d168      	bne.n	801b1a2 <__gethex+0x136>
 801b0d0:	f817 000a 	ldrb.w	r0, [r7, sl]
 801b0d4:	eb07 060a 	add.w	r6, r7, sl
 801b0d8:	f7ff ffb2 	bl	801b040 <__hexdig_fun>
 801b0dc:	2800      	cmp	r0, #0
 801b0de:	d062      	beq.n	801b1a6 <__gethex+0x13a>
 801b0e0:	4633      	mov	r3, r6
 801b0e2:	7818      	ldrb	r0, [r3, #0]
 801b0e4:	2830      	cmp	r0, #48	; 0x30
 801b0e6:	461f      	mov	r7, r3
 801b0e8:	f103 0301 	add.w	r3, r3, #1
 801b0ec:	d0f9      	beq.n	801b0e2 <__gethex+0x76>
 801b0ee:	f7ff ffa7 	bl	801b040 <__hexdig_fun>
 801b0f2:	2301      	movs	r3, #1
 801b0f4:	fab0 f480 	clz	r4, r0
 801b0f8:	0964      	lsrs	r4, r4, #5
 801b0fa:	4635      	mov	r5, r6
 801b0fc:	9300      	str	r3, [sp, #0]
 801b0fe:	463a      	mov	r2, r7
 801b100:	4616      	mov	r6, r2
 801b102:	3201      	adds	r2, #1
 801b104:	7830      	ldrb	r0, [r6, #0]
 801b106:	f7ff ff9b 	bl	801b040 <__hexdig_fun>
 801b10a:	2800      	cmp	r0, #0
 801b10c:	d1f8      	bne.n	801b100 <__gethex+0x94>
 801b10e:	9901      	ldr	r1, [sp, #4]
 801b110:	4652      	mov	r2, sl
 801b112:	4630      	mov	r0, r6
 801b114:	f7fe fac2 	bl	801969c <strncmp>
 801b118:	b980      	cbnz	r0, 801b13c <__gethex+0xd0>
 801b11a:	b94d      	cbnz	r5, 801b130 <__gethex+0xc4>
 801b11c:	eb06 050a 	add.w	r5, r6, sl
 801b120:	462a      	mov	r2, r5
 801b122:	4616      	mov	r6, r2
 801b124:	3201      	adds	r2, #1
 801b126:	7830      	ldrb	r0, [r6, #0]
 801b128:	f7ff ff8a 	bl	801b040 <__hexdig_fun>
 801b12c:	2800      	cmp	r0, #0
 801b12e:	d1f8      	bne.n	801b122 <__gethex+0xb6>
 801b130:	1bad      	subs	r5, r5, r6
 801b132:	00ad      	lsls	r5, r5, #2
 801b134:	e004      	b.n	801b140 <__gethex+0xd4>
 801b136:	2400      	movs	r4, #0
 801b138:	4625      	mov	r5, r4
 801b13a:	e7e0      	b.n	801b0fe <__gethex+0x92>
 801b13c:	2d00      	cmp	r5, #0
 801b13e:	d1f7      	bne.n	801b130 <__gethex+0xc4>
 801b140:	7833      	ldrb	r3, [r6, #0]
 801b142:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801b146:	2b50      	cmp	r3, #80	; 0x50
 801b148:	d13b      	bne.n	801b1c2 <__gethex+0x156>
 801b14a:	7873      	ldrb	r3, [r6, #1]
 801b14c:	2b2b      	cmp	r3, #43	; 0x2b
 801b14e:	d02c      	beq.n	801b1aa <__gethex+0x13e>
 801b150:	2b2d      	cmp	r3, #45	; 0x2d
 801b152:	d02e      	beq.n	801b1b2 <__gethex+0x146>
 801b154:	1c71      	adds	r1, r6, #1
 801b156:	f04f 0900 	mov.w	r9, #0
 801b15a:	7808      	ldrb	r0, [r1, #0]
 801b15c:	f7ff ff70 	bl	801b040 <__hexdig_fun>
 801b160:	1e43      	subs	r3, r0, #1
 801b162:	b2db      	uxtb	r3, r3
 801b164:	2b18      	cmp	r3, #24
 801b166:	d82c      	bhi.n	801b1c2 <__gethex+0x156>
 801b168:	f1a0 0210 	sub.w	r2, r0, #16
 801b16c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801b170:	f7ff ff66 	bl	801b040 <__hexdig_fun>
 801b174:	1e43      	subs	r3, r0, #1
 801b176:	b2db      	uxtb	r3, r3
 801b178:	2b18      	cmp	r3, #24
 801b17a:	d91d      	bls.n	801b1b8 <__gethex+0x14c>
 801b17c:	f1b9 0f00 	cmp.w	r9, #0
 801b180:	d000      	beq.n	801b184 <__gethex+0x118>
 801b182:	4252      	negs	r2, r2
 801b184:	4415      	add	r5, r2
 801b186:	f8cb 1000 	str.w	r1, [fp]
 801b18a:	b1e4      	cbz	r4, 801b1c6 <__gethex+0x15a>
 801b18c:	9b00      	ldr	r3, [sp, #0]
 801b18e:	2b00      	cmp	r3, #0
 801b190:	bf14      	ite	ne
 801b192:	2700      	movne	r7, #0
 801b194:	2706      	moveq	r7, #6
 801b196:	4638      	mov	r0, r7
 801b198:	b009      	add	sp, #36	; 0x24
 801b19a:	ecbd 8b02 	vpop	{d8}
 801b19e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b1a2:	463e      	mov	r6, r7
 801b1a4:	4625      	mov	r5, r4
 801b1a6:	2401      	movs	r4, #1
 801b1a8:	e7ca      	b.n	801b140 <__gethex+0xd4>
 801b1aa:	f04f 0900 	mov.w	r9, #0
 801b1ae:	1cb1      	adds	r1, r6, #2
 801b1b0:	e7d3      	b.n	801b15a <__gethex+0xee>
 801b1b2:	f04f 0901 	mov.w	r9, #1
 801b1b6:	e7fa      	b.n	801b1ae <__gethex+0x142>
 801b1b8:	230a      	movs	r3, #10
 801b1ba:	fb03 0202 	mla	r2, r3, r2, r0
 801b1be:	3a10      	subs	r2, #16
 801b1c0:	e7d4      	b.n	801b16c <__gethex+0x100>
 801b1c2:	4631      	mov	r1, r6
 801b1c4:	e7df      	b.n	801b186 <__gethex+0x11a>
 801b1c6:	1bf3      	subs	r3, r6, r7
 801b1c8:	3b01      	subs	r3, #1
 801b1ca:	4621      	mov	r1, r4
 801b1cc:	2b07      	cmp	r3, #7
 801b1ce:	dc0b      	bgt.n	801b1e8 <__gethex+0x17c>
 801b1d0:	ee18 0a10 	vmov	r0, s16
 801b1d4:	f000 fa70 	bl	801b6b8 <_Balloc>
 801b1d8:	4604      	mov	r4, r0
 801b1da:	b940      	cbnz	r0, 801b1ee <__gethex+0x182>
 801b1dc:	4b5d      	ldr	r3, [pc, #372]	; (801b354 <__gethex+0x2e8>)
 801b1de:	4602      	mov	r2, r0
 801b1e0:	21de      	movs	r1, #222	; 0xde
 801b1e2:	485d      	ldr	r0, [pc, #372]	; (801b358 <__gethex+0x2ec>)
 801b1e4:	f001 f99e 	bl	801c524 <__assert_func>
 801b1e8:	3101      	adds	r1, #1
 801b1ea:	105b      	asrs	r3, r3, #1
 801b1ec:	e7ee      	b.n	801b1cc <__gethex+0x160>
 801b1ee:	f100 0914 	add.w	r9, r0, #20
 801b1f2:	f04f 0b00 	mov.w	fp, #0
 801b1f6:	f1ca 0301 	rsb	r3, sl, #1
 801b1fa:	f8cd 9008 	str.w	r9, [sp, #8]
 801b1fe:	f8cd b000 	str.w	fp, [sp]
 801b202:	9306      	str	r3, [sp, #24]
 801b204:	42b7      	cmp	r7, r6
 801b206:	d340      	bcc.n	801b28a <__gethex+0x21e>
 801b208:	9802      	ldr	r0, [sp, #8]
 801b20a:	9b00      	ldr	r3, [sp, #0]
 801b20c:	f840 3b04 	str.w	r3, [r0], #4
 801b210:	eba0 0009 	sub.w	r0, r0, r9
 801b214:	1080      	asrs	r0, r0, #2
 801b216:	0146      	lsls	r6, r0, #5
 801b218:	6120      	str	r0, [r4, #16]
 801b21a:	4618      	mov	r0, r3
 801b21c:	f000 fb3e 	bl	801b89c <__hi0bits>
 801b220:	1a30      	subs	r0, r6, r0
 801b222:	f8d8 6000 	ldr.w	r6, [r8]
 801b226:	42b0      	cmp	r0, r6
 801b228:	dd63      	ble.n	801b2f2 <__gethex+0x286>
 801b22a:	1b87      	subs	r7, r0, r6
 801b22c:	4639      	mov	r1, r7
 801b22e:	4620      	mov	r0, r4
 801b230:	f000 fedf 	bl	801bff2 <__any_on>
 801b234:	4682      	mov	sl, r0
 801b236:	b1a8      	cbz	r0, 801b264 <__gethex+0x1f8>
 801b238:	1e7b      	subs	r3, r7, #1
 801b23a:	1159      	asrs	r1, r3, #5
 801b23c:	f003 021f 	and.w	r2, r3, #31
 801b240:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801b244:	f04f 0a01 	mov.w	sl, #1
 801b248:	fa0a f202 	lsl.w	r2, sl, r2
 801b24c:	420a      	tst	r2, r1
 801b24e:	d009      	beq.n	801b264 <__gethex+0x1f8>
 801b250:	4553      	cmp	r3, sl
 801b252:	dd05      	ble.n	801b260 <__gethex+0x1f4>
 801b254:	1eb9      	subs	r1, r7, #2
 801b256:	4620      	mov	r0, r4
 801b258:	f000 fecb 	bl	801bff2 <__any_on>
 801b25c:	2800      	cmp	r0, #0
 801b25e:	d145      	bne.n	801b2ec <__gethex+0x280>
 801b260:	f04f 0a02 	mov.w	sl, #2
 801b264:	4639      	mov	r1, r7
 801b266:	4620      	mov	r0, r4
 801b268:	f7ff fe98 	bl	801af9c <rshift>
 801b26c:	443d      	add	r5, r7
 801b26e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b272:	42ab      	cmp	r3, r5
 801b274:	da4c      	bge.n	801b310 <__gethex+0x2a4>
 801b276:	ee18 0a10 	vmov	r0, s16
 801b27a:	4621      	mov	r1, r4
 801b27c:	f000 fa5c 	bl	801b738 <_Bfree>
 801b280:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b282:	2300      	movs	r3, #0
 801b284:	6013      	str	r3, [r2, #0]
 801b286:	27a3      	movs	r7, #163	; 0xa3
 801b288:	e785      	b.n	801b196 <__gethex+0x12a>
 801b28a:	1e73      	subs	r3, r6, #1
 801b28c:	9a05      	ldr	r2, [sp, #20]
 801b28e:	9303      	str	r3, [sp, #12]
 801b290:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801b294:	4293      	cmp	r3, r2
 801b296:	d019      	beq.n	801b2cc <__gethex+0x260>
 801b298:	f1bb 0f20 	cmp.w	fp, #32
 801b29c:	d107      	bne.n	801b2ae <__gethex+0x242>
 801b29e:	9b02      	ldr	r3, [sp, #8]
 801b2a0:	9a00      	ldr	r2, [sp, #0]
 801b2a2:	f843 2b04 	str.w	r2, [r3], #4
 801b2a6:	9302      	str	r3, [sp, #8]
 801b2a8:	2300      	movs	r3, #0
 801b2aa:	9300      	str	r3, [sp, #0]
 801b2ac:	469b      	mov	fp, r3
 801b2ae:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801b2b2:	f7ff fec5 	bl	801b040 <__hexdig_fun>
 801b2b6:	9b00      	ldr	r3, [sp, #0]
 801b2b8:	f000 000f 	and.w	r0, r0, #15
 801b2bc:	fa00 f00b 	lsl.w	r0, r0, fp
 801b2c0:	4303      	orrs	r3, r0
 801b2c2:	9300      	str	r3, [sp, #0]
 801b2c4:	f10b 0b04 	add.w	fp, fp, #4
 801b2c8:	9b03      	ldr	r3, [sp, #12]
 801b2ca:	e00d      	b.n	801b2e8 <__gethex+0x27c>
 801b2cc:	9b03      	ldr	r3, [sp, #12]
 801b2ce:	9a06      	ldr	r2, [sp, #24]
 801b2d0:	4413      	add	r3, r2
 801b2d2:	42bb      	cmp	r3, r7
 801b2d4:	d3e0      	bcc.n	801b298 <__gethex+0x22c>
 801b2d6:	4618      	mov	r0, r3
 801b2d8:	9901      	ldr	r1, [sp, #4]
 801b2da:	9307      	str	r3, [sp, #28]
 801b2dc:	4652      	mov	r2, sl
 801b2de:	f7fe f9dd 	bl	801969c <strncmp>
 801b2e2:	9b07      	ldr	r3, [sp, #28]
 801b2e4:	2800      	cmp	r0, #0
 801b2e6:	d1d7      	bne.n	801b298 <__gethex+0x22c>
 801b2e8:	461e      	mov	r6, r3
 801b2ea:	e78b      	b.n	801b204 <__gethex+0x198>
 801b2ec:	f04f 0a03 	mov.w	sl, #3
 801b2f0:	e7b8      	b.n	801b264 <__gethex+0x1f8>
 801b2f2:	da0a      	bge.n	801b30a <__gethex+0x29e>
 801b2f4:	1a37      	subs	r7, r6, r0
 801b2f6:	4621      	mov	r1, r4
 801b2f8:	ee18 0a10 	vmov	r0, s16
 801b2fc:	463a      	mov	r2, r7
 801b2fe:	f000 fc37 	bl	801bb70 <__lshift>
 801b302:	1bed      	subs	r5, r5, r7
 801b304:	4604      	mov	r4, r0
 801b306:	f100 0914 	add.w	r9, r0, #20
 801b30a:	f04f 0a00 	mov.w	sl, #0
 801b30e:	e7ae      	b.n	801b26e <__gethex+0x202>
 801b310:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801b314:	42a8      	cmp	r0, r5
 801b316:	dd72      	ble.n	801b3fe <__gethex+0x392>
 801b318:	1b45      	subs	r5, r0, r5
 801b31a:	42ae      	cmp	r6, r5
 801b31c:	dc36      	bgt.n	801b38c <__gethex+0x320>
 801b31e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801b322:	2b02      	cmp	r3, #2
 801b324:	d02a      	beq.n	801b37c <__gethex+0x310>
 801b326:	2b03      	cmp	r3, #3
 801b328:	d02c      	beq.n	801b384 <__gethex+0x318>
 801b32a:	2b01      	cmp	r3, #1
 801b32c:	d11c      	bne.n	801b368 <__gethex+0x2fc>
 801b32e:	42ae      	cmp	r6, r5
 801b330:	d11a      	bne.n	801b368 <__gethex+0x2fc>
 801b332:	2e01      	cmp	r6, #1
 801b334:	d112      	bne.n	801b35c <__gethex+0x2f0>
 801b336:	9a04      	ldr	r2, [sp, #16]
 801b338:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b33c:	6013      	str	r3, [r2, #0]
 801b33e:	2301      	movs	r3, #1
 801b340:	6123      	str	r3, [r4, #16]
 801b342:	f8c9 3000 	str.w	r3, [r9]
 801b346:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801b348:	2762      	movs	r7, #98	; 0x62
 801b34a:	601c      	str	r4, [r3, #0]
 801b34c:	e723      	b.n	801b196 <__gethex+0x12a>
 801b34e:	bf00      	nop
 801b350:	0802baa0 	.word	0x0802baa0
 801b354:	0802ba28 	.word	0x0802ba28
 801b358:	0802ba39 	.word	0x0802ba39
 801b35c:	1e71      	subs	r1, r6, #1
 801b35e:	4620      	mov	r0, r4
 801b360:	f000 fe47 	bl	801bff2 <__any_on>
 801b364:	2800      	cmp	r0, #0
 801b366:	d1e6      	bne.n	801b336 <__gethex+0x2ca>
 801b368:	ee18 0a10 	vmov	r0, s16
 801b36c:	4621      	mov	r1, r4
 801b36e:	f000 f9e3 	bl	801b738 <_Bfree>
 801b372:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b374:	2300      	movs	r3, #0
 801b376:	6013      	str	r3, [r2, #0]
 801b378:	2750      	movs	r7, #80	; 0x50
 801b37a:	e70c      	b.n	801b196 <__gethex+0x12a>
 801b37c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b37e:	2b00      	cmp	r3, #0
 801b380:	d1f2      	bne.n	801b368 <__gethex+0x2fc>
 801b382:	e7d8      	b.n	801b336 <__gethex+0x2ca>
 801b384:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b386:	2b00      	cmp	r3, #0
 801b388:	d1d5      	bne.n	801b336 <__gethex+0x2ca>
 801b38a:	e7ed      	b.n	801b368 <__gethex+0x2fc>
 801b38c:	1e6f      	subs	r7, r5, #1
 801b38e:	f1ba 0f00 	cmp.w	sl, #0
 801b392:	d131      	bne.n	801b3f8 <__gethex+0x38c>
 801b394:	b127      	cbz	r7, 801b3a0 <__gethex+0x334>
 801b396:	4639      	mov	r1, r7
 801b398:	4620      	mov	r0, r4
 801b39a:	f000 fe2a 	bl	801bff2 <__any_on>
 801b39e:	4682      	mov	sl, r0
 801b3a0:	117b      	asrs	r3, r7, #5
 801b3a2:	2101      	movs	r1, #1
 801b3a4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801b3a8:	f007 071f 	and.w	r7, r7, #31
 801b3ac:	fa01 f707 	lsl.w	r7, r1, r7
 801b3b0:	421f      	tst	r7, r3
 801b3b2:	4629      	mov	r1, r5
 801b3b4:	4620      	mov	r0, r4
 801b3b6:	bf18      	it	ne
 801b3b8:	f04a 0a02 	orrne.w	sl, sl, #2
 801b3bc:	1b76      	subs	r6, r6, r5
 801b3be:	f7ff fded 	bl	801af9c <rshift>
 801b3c2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801b3c6:	2702      	movs	r7, #2
 801b3c8:	f1ba 0f00 	cmp.w	sl, #0
 801b3cc:	d048      	beq.n	801b460 <__gethex+0x3f4>
 801b3ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801b3d2:	2b02      	cmp	r3, #2
 801b3d4:	d015      	beq.n	801b402 <__gethex+0x396>
 801b3d6:	2b03      	cmp	r3, #3
 801b3d8:	d017      	beq.n	801b40a <__gethex+0x39e>
 801b3da:	2b01      	cmp	r3, #1
 801b3dc:	d109      	bne.n	801b3f2 <__gethex+0x386>
 801b3de:	f01a 0f02 	tst.w	sl, #2
 801b3e2:	d006      	beq.n	801b3f2 <__gethex+0x386>
 801b3e4:	f8d9 0000 	ldr.w	r0, [r9]
 801b3e8:	ea4a 0a00 	orr.w	sl, sl, r0
 801b3ec:	f01a 0f01 	tst.w	sl, #1
 801b3f0:	d10e      	bne.n	801b410 <__gethex+0x3a4>
 801b3f2:	f047 0710 	orr.w	r7, r7, #16
 801b3f6:	e033      	b.n	801b460 <__gethex+0x3f4>
 801b3f8:	f04f 0a01 	mov.w	sl, #1
 801b3fc:	e7d0      	b.n	801b3a0 <__gethex+0x334>
 801b3fe:	2701      	movs	r7, #1
 801b400:	e7e2      	b.n	801b3c8 <__gethex+0x35c>
 801b402:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b404:	f1c3 0301 	rsb	r3, r3, #1
 801b408:	9315      	str	r3, [sp, #84]	; 0x54
 801b40a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b40c:	2b00      	cmp	r3, #0
 801b40e:	d0f0      	beq.n	801b3f2 <__gethex+0x386>
 801b410:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801b414:	f104 0314 	add.w	r3, r4, #20
 801b418:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801b41c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801b420:	f04f 0c00 	mov.w	ip, #0
 801b424:	4618      	mov	r0, r3
 801b426:	f853 2b04 	ldr.w	r2, [r3], #4
 801b42a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801b42e:	d01c      	beq.n	801b46a <__gethex+0x3fe>
 801b430:	3201      	adds	r2, #1
 801b432:	6002      	str	r2, [r0, #0]
 801b434:	2f02      	cmp	r7, #2
 801b436:	f104 0314 	add.w	r3, r4, #20
 801b43a:	d13f      	bne.n	801b4bc <__gethex+0x450>
 801b43c:	f8d8 2000 	ldr.w	r2, [r8]
 801b440:	3a01      	subs	r2, #1
 801b442:	42b2      	cmp	r2, r6
 801b444:	d10a      	bne.n	801b45c <__gethex+0x3f0>
 801b446:	1171      	asrs	r1, r6, #5
 801b448:	2201      	movs	r2, #1
 801b44a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801b44e:	f006 061f 	and.w	r6, r6, #31
 801b452:	fa02 f606 	lsl.w	r6, r2, r6
 801b456:	421e      	tst	r6, r3
 801b458:	bf18      	it	ne
 801b45a:	4617      	movne	r7, r2
 801b45c:	f047 0720 	orr.w	r7, r7, #32
 801b460:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801b462:	601c      	str	r4, [r3, #0]
 801b464:	9b04      	ldr	r3, [sp, #16]
 801b466:	601d      	str	r5, [r3, #0]
 801b468:	e695      	b.n	801b196 <__gethex+0x12a>
 801b46a:	4299      	cmp	r1, r3
 801b46c:	f843 cc04 	str.w	ip, [r3, #-4]
 801b470:	d8d8      	bhi.n	801b424 <__gethex+0x3b8>
 801b472:	68a3      	ldr	r3, [r4, #8]
 801b474:	459b      	cmp	fp, r3
 801b476:	db19      	blt.n	801b4ac <__gethex+0x440>
 801b478:	6861      	ldr	r1, [r4, #4]
 801b47a:	ee18 0a10 	vmov	r0, s16
 801b47e:	3101      	adds	r1, #1
 801b480:	f000 f91a 	bl	801b6b8 <_Balloc>
 801b484:	4681      	mov	r9, r0
 801b486:	b918      	cbnz	r0, 801b490 <__gethex+0x424>
 801b488:	4b1a      	ldr	r3, [pc, #104]	; (801b4f4 <__gethex+0x488>)
 801b48a:	4602      	mov	r2, r0
 801b48c:	2184      	movs	r1, #132	; 0x84
 801b48e:	e6a8      	b.n	801b1e2 <__gethex+0x176>
 801b490:	6922      	ldr	r2, [r4, #16]
 801b492:	3202      	adds	r2, #2
 801b494:	f104 010c 	add.w	r1, r4, #12
 801b498:	0092      	lsls	r2, r2, #2
 801b49a:	300c      	adds	r0, #12
 801b49c:	f7fd fa7a 	bl	8018994 <memcpy>
 801b4a0:	4621      	mov	r1, r4
 801b4a2:	ee18 0a10 	vmov	r0, s16
 801b4a6:	f000 f947 	bl	801b738 <_Bfree>
 801b4aa:	464c      	mov	r4, r9
 801b4ac:	6923      	ldr	r3, [r4, #16]
 801b4ae:	1c5a      	adds	r2, r3, #1
 801b4b0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801b4b4:	6122      	str	r2, [r4, #16]
 801b4b6:	2201      	movs	r2, #1
 801b4b8:	615a      	str	r2, [r3, #20]
 801b4ba:	e7bb      	b.n	801b434 <__gethex+0x3c8>
 801b4bc:	6922      	ldr	r2, [r4, #16]
 801b4be:	455a      	cmp	r2, fp
 801b4c0:	dd0b      	ble.n	801b4da <__gethex+0x46e>
 801b4c2:	2101      	movs	r1, #1
 801b4c4:	4620      	mov	r0, r4
 801b4c6:	f7ff fd69 	bl	801af9c <rshift>
 801b4ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b4ce:	3501      	adds	r5, #1
 801b4d0:	42ab      	cmp	r3, r5
 801b4d2:	f6ff aed0 	blt.w	801b276 <__gethex+0x20a>
 801b4d6:	2701      	movs	r7, #1
 801b4d8:	e7c0      	b.n	801b45c <__gethex+0x3f0>
 801b4da:	f016 061f 	ands.w	r6, r6, #31
 801b4de:	d0fa      	beq.n	801b4d6 <__gethex+0x46a>
 801b4e0:	4453      	add	r3, sl
 801b4e2:	f1c6 0620 	rsb	r6, r6, #32
 801b4e6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801b4ea:	f000 f9d7 	bl	801b89c <__hi0bits>
 801b4ee:	42b0      	cmp	r0, r6
 801b4f0:	dbe7      	blt.n	801b4c2 <__gethex+0x456>
 801b4f2:	e7f0      	b.n	801b4d6 <__gethex+0x46a>
 801b4f4:	0802ba28 	.word	0x0802ba28

0801b4f8 <L_shift>:
 801b4f8:	f1c2 0208 	rsb	r2, r2, #8
 801b4fc:	0092      	lsls	r2, r2, #2
 801b4fe:	b570      	push	{r4, r5, r6, lr}
 801b500:	f1c2 0620 	rsb	r6, r2, #32
 801b504:	6843      	ldr	r3, [r0, #4]
 801b506:	6804      	ldr	r4, [r0, #0]
 801b508:	fa03 f506 	lsl.w	r5, r3, r6
 801b50c:	432c      	orrs	r4, r5
 801b50e:	40d3      	lsrs	r3, r2
 801b510:	6004      	str	r4, [r0, #0]
 801b512:	f840 3f04 	str.w	r3, [r0, #4]!
 801b516:	4288      	cmp	r0, r1
 801b518:	d3f4      	bcc.n	801b504 <L_shift+0xc>
 801b51a:	bd70      	pop	{r4, r5, r6, pc}

0801b51c <__match>:
 801b51c:	b530      	push	{r4, r5, lr}
 801b51e:	6803      	ldr	r3, [r0, #0]
 801b520:	3301      	adds	r3, #1
 801b522:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b526:	b914      	cbnz	r4, 801b52e <__match+0x12>
 801b528:	6003      	str	r3, [r0, #0]
 801b52a:	2001      	movs	r0, #1
 801b52c:	bd30      	pop	{r4, r5, pc}
 801b52e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b532:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801b536:	2d19      	cmp	r5, #25
 801b538:	bf98      	it	ls
 801b53a:	3220      	addls	r2, #32
 801b53c:	42a2      	cmp	r2, r4
 801b53e:	d0f0      	beq.n	801b522 <__match+0x6>
 801b540:	2000      	movs	r0, #0
 801b542:	e7f3      	b.n	801b52c <__match+0x10>

0801b544 <__hexnan>:
 801b544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b548:	680b      	ldr	r3, [r1, #0]
 801b54a:	115e      	asrs	r6, r3, #5
 801b54c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801b550:	f013 031f 	ands.w	r3, r3, #31
 801b554:	b087      	sub	sp, #28
 801b556:	bf18      	it	ne
 801b558:	3604      	addne	r6, #4
 801b55a:	2500      	movs	r5, #0
 801b55c:	1f37      	subs	r7, r6, #4
 801b55e:	4690      	mov	r8, r2
 801b560:	6802      	ldr	r2, [r0, #0]
 801b562:	9301      	str	r3, [sp, #4]
 801b564:	4682      	mov	sl, r0
 801b566:	f846 5c04 	str.w	r5, [r6, #-4]
 801b56a:	46b9      	mov	r9, r7
 801b56c:	463c      	mov	r4, r7
 801b56e:	9502      	str	r5, [sp, #8]
 801b570:	46ab      	mov	fp, r5
 801b572:	7851      	ldrb	r1, [r2, #1]
 801b574:	1c53      	adds	r3, r2, #1
 801b576:	9303      	str	r3, [sp, #12]
 801b578:	b341      	cbz	r1, 801b5cc <__hexnan+0x88>
 801b57a:	4608      	mov	r0, r1
 801b57c:	9205      	str	r2, [sp, #20]
 801b57e:	9104      	str	r1, [sp, #16]
 801b580:	f7ff fd5e 	bl	801b040 <__hexdig_fun>
 801b584:	2800      	cmp	r0, #0
 801b586:	d14f      	bne.n	801b628 <__hexnan+0xe4>
 801b588:	9904      	ldr	r1, [sp, #16]
 801b58a:	9a05      	ldr	r2, [sp, #20]
 801b58c:	2920      	cmp	r1, #32
 801b58e:	d818      	bhi.n	801b5c2 <__hexnan+0x7e>
 801b590:	9b02      	ldr	r3, [sp, #8]
 801b592:	459b      	cmp	fp, r3
 801b594:	dd13      	ble.n	801b5be <__hexnan+0x7a>
 801b596:	454c      	cmp	r4, r9
 801b598:	d206      	bcs.n	801b5a8 <__hexnan+0x64>
 801b59a:	2d07      	cmp	r5, #7
 801b59c:	dc04      	bgt.n	801b5a8 <__hexnan+0x64>
 801b59e:	462a      	mov	r2, r5
 801b5a0:	4649      	mov	r1, r9
 801b5a2:	4620      	mov	r0, r4
 801b5a4:	f7ff ffa8 	bl	801b4f8 <L_shift>
 801b5a8:	4544      	cmp	r4, r8
 801b5aa:	d950      	bls.n	801b64e <__hexnan+0x10a>
 801b5ac:	2300      	movs	r3, #0
 801b5ae:	f1a4 0904 	sub.w	r9, r4, #4
 801b5b2:	f844 3c04 	str.w	r3, [r4, #-4]
 801b5b6:	f8cd b008 	str.w	fp, [sp, #8]
 801b5ba:	464c      	mov	r4, r9
 801b5bc:	461d      	mov	r5, r3
 801b5be:	9a03      	ldr	r2, [sp, #12]
 801b5c0:	e7d7      	b.n	801b572 <__hexnan+0x2e>
 801b5c2:	2929      	cmp	r1, #41	; 0x29
 801b5c4:	d156      	bne.n	801b674 <__hexnan+0x130>
 801b5c6:	3202      	adds	r2, #2
 801b5c8:	f8ca 2000 	str.w	r2, [sl]
 801b5cc:	f1bb 0f00 	cmp.w	fp, #0
 801b5d0:	d050      	beq.n	801b674 <__hexnan+0x130>
 801b5d2:	454c      	cmp	r4, r9
 801b5d4:	d206      	bcs.n	801b5e4 <__hexnan+0xa0>
 801b5d6:	2d07      	cmp	r5, #7
 801b5d8:	dc04      	bgt.n	801b5e4 <__hexnan+0xa0>
 801b5da:	462a      	mov	r2, r5
 801b5dc:	4649      	mov	r1, r9
 801b5de:	4620      	mov	r0, r4
 801b5e0:	f7ff ff8a 	bl	801b4f8 <L_shift>
 801b5e4:	4544      	cmp	r4, r8
 801b5e6:	d934      	bls.n	801b652 <__hexnan+0x10e>
 801b5e8:	f1a8 0204 	sub.w	r2, r8, #4
 801b5ec:	4623      	mov	r3, r4
 801b5ee:	f853 1b04 	ldr.w	r1, [r3], #4
 801b5f2:	f842 1f04 	str.w	r1, [r2, #4]!
 801b5f6:	429f      	cmp	r7, r3
 801b5f8:	d2f9      	bcs.n	801b5ee <__hexnan+0xaa>
 801b5fa:	1b3b      	subs	r3, r7, r4
 801b5fc:	f023 0303 	bic.w	r3, r3, #3
 801b600:	3304      	adds	r3, #4
 801b602:	3401      	adds	r4, #1
 801b604:	3e03      	subs	r6, #3
 801b606:	42b4      	cmp	r4, r6
 801b608:	bf88      	it	hi
 801b60a:	2304      	movhi	r3, #4
 801b60c:	4443      	add	r3, r8
 801b60e:	2200      	movs	r2, #0
 801b610:	f843 2b04 	str.w	r2, [r3], #4
 801b614:	429f      	cmp	r7, r3
 801b616:	d2fb      	bcs.n	801b610 <__hexnan+0xcc>
 801b618:	683b      	ldr	r3, [r7, #0]
 801b61a:	b91b      	cbnz	r3, 801b624 <__hexnan+0xe0>
 801b61c:	4547      	cmp	r7, r8
 801b61e:	d127      	bne.n	801b670 <__hexnan+0x12c>
 801b620:	2301      	movs	r3, #1
 801b622:	603b      	str	r3, [r7, #0]
 801b624:	2005      	movs	r0, #5
 801b626:	e026      	b.n	801b676 <__hexnan+0x132>
 801b628:	3501      	adds	r5, #1
 801b62a:	2d08      	cmp	r5, #8
 801b62c:	f10b 0b01 	add.w	fp, fp, #1
 801b630:	dd06      	ble.n	801b640 <__hexnan+0xfc>
 801b632:	4544      	cmp	r4, r8
 801b634:	d9c3      	bls.n	801b5be <__hexnan+0x7a>
 801b636:	2300      	movs	r3, #0
 801b638:	f844 3c04 	str.w	r3, [r4, #-4]
 801b63c:	2501      	movs	r5, #1
 801b63e:	3c04      	subs	r4, #4
 801b640:	6822      	ldr	r2, [r4, #0]
 801b642:	f000 000f 	and.w	r0, r0, #15
 801b646:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801b64a:	6022      	str	r2, [r4, #0]
 801b64c:	e7b7      	b.n	801b5be <__hexnan+0x7a>
 801b64e:	2508      	movs	r5, #8
 801b650:	e7b5      	b.n	801b5be <__hexnan+0x7a>
 801b652:	9b01      	ldr	r3, [sp, #4]
 801b654:	2b00      	cmp	r3, #0
 801b656:	d0df      	beq.n	801b618 <__hexnan+0xd4>
 801b658:	f04f 32ff 	mov.w	r2, #4294967295
 801b65c:	f1c3 0320 	rsb	r3, r3, #32
 801b660:	fa22 f303 	lsr.w	r3, r2, r3
 801b664:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801b668:	401a      	ands	r2, r3
 801b66a:	f846 2c04 	str.w	r2, [r6, #-4]
 801b66e:	e7d3      	b.n	801b618 <__hexnan+0xd4>
 801b670:	3f04      	subs	r7, #4
 801b672:	e7d1      	b.n	801b618 <__hexnan+0xd4>
 801b674:	2004      	movs	r0, #4
 801b676:	b007      	add	sp, #28
 801b678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b67c <_localeconv_r>:
 801b67c:	4800      	ldr	r0, [pc, #0]	; (801b680 <_localeconv_r+0x4>)
 801b67e:	4770      	bx	lr
 801b680:	20000180 	.word	0x20000180

0801b684 <malloc>:
 801b684:	4b02      	ldr	r3, [pc, #8]	; (801b690 <malloc+0xc>)
 801b686:	4601      	mov	r1, r0
 801b688:	6818      	ldr	r0, [r3, #0]
 801b68a:	f000 bd55 	b.w	801c138 <_malloc_r>
 801b68e:	bf00      	nop
 801b690:	20000028 	.word	0x20000028

0801b694 <__ascii_mbtowc>:
 801b694:	b082      	sub	sp, #8
 801b696:	b901      	cbnz	r1, 801b69a <__ascii_mbtowc+0x6>
 801b698:	a901      	add	r1, sp, #4
 801b69a:	b142      	cbz	r2, 801b6ae <__ascii_mbtowc+0x1a>
 801b69c:	b14b      	cbz	r3, 801b6b2 <__ascii_mbtowc+0x1e>
 801b69e:	7813      	ldrb	r3, [r2, #0]
 801b6a0:	600b      	str	r3, [r1, #0]
 801b6a2:	7812      	ldrb	r2, [r2, #0]
 801b6a4:	1e10      	subs	r0, r2, #0
 801b6a6:	bf18      	it	ne
 801b6a8:	2001      	movne	r0, #1
 801b6aa:	b002      	add	sp, #8
 801b6ac:	4770      	bx	lr
 801b6ae:	4610      	mov	r0, r2
 801b6b0:	e7fb      	b.n	801b6aa <__ascii_mbtowc+0x16>
 801b6b2:	f06f 0001 	mvn.w	r0, #1
 801b6b6:	e7f8      	b.n	801b6aa <__ascii_mbtowc+0x16>

0801b6b8 <_Balloc>:
 801b6b8:	b570      	push	{r4, r5, r6, lr}
 801b6ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801b6bc:	4604      	mov	r4, r0
 801b6be:	460d      	mov	r5, r1
 801b6c0:	b976      	cbnz	r6, 801b6e0 <_Balloc+0x28>
 801b6c2:	2010      	movs	r0, #16
 801b6c4:	f7ff ffde 	bl	801b684 <malloc>
 801b6c8:	4602      	mov	r2, r0
 801b6ca:	6260      	str	r0, [r4, #36]	; 0x24
 801b6cc:	b920      	cbnz	r0, 801b6d8 <_Balloc+0x20>
 801b6ce:	4b18      	ldr	r3, [pc, #96]	; (801b730 <_Balloc+0x78>)
 801b6d0:	4818      	ldr	r0, [pc, #96]	; (801b734 <_Balloc+0x7c>)
 801b6d2:	2166      	movs	r1, #102	; 0x66
 801b6d4:	f000 ff26 	bl	801c524 <__assert_func>
 801b6d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b6dc:	6006      	str	r6, [r0, #0]
 801b6de:	60c6      	str	r6, [r0, #12]
 801b6e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801b6e2:	68f3      	ldr	r3, [r6, #12]
 801b6e4:	b183      	cbz	r3, 801b708 <_Balloc+0x50>
 801b6e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b6e8:	68db      	ldr	r3, [r3, #12]
 801b6ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801b6ee:	b9b8      	cbnz	r0, 801b720 <_Balloc+0x68>
 801b6f0:	2101      	movs	r1, #1
 801b6f2:	fa01 f605 	lsl.w	r6, r1, r5
 801b6f6:	1d72      	adds	r2, r6, #5
 801b6f8:	0092      	lsls	r2, r2, #2
 801b6fa:	4620      	mov	r0, r4
 801b6fc:	f000 fc9a 	bl	801c034 <_calloc_r>
 801b700:	b160      	cbz	r0, 801b71c <_Balloc+0x64>
 801b702:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801b706:	e00e      	b.n	801b726 <_Balloc+0x6e>
 801b708:	2221      	movs	r2, #33	; 0x21
 801b70a:	2104      	movs	r1, #4
 801b70c:	4620      	mov	r0, r4
 801b70e:	f000 fc91 	bl	801c034 <_calloc_r>
 801b712:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b714:	60f0      	str	r0, [r6, #12]
 801b716:	68db      	ldr	r3, [r3, #12]
 801b718:	2b00      	cmp	r3, #0
 801b71a:	d1e4      	bne.n	801b6e6 <_Balloc+0x2e>
 801b71c:	2000      	movs	r0, #0
 801b71e:	bd70      	pop	{r4, r5, r6, pc}
 801b720:	6802      	ldr	r2, [r0, #0]
 801b722:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b726:	2300      	movs	r3, #0
 801b728:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801b72c:	e7f7      	b.n	801b71e <_Balloc+0x66>
 801b72e:	bf00      	nop
 801b730:	0802b9b6 	.word	0x0802b9b6
 801b734:	0802bab4 	.word	0x0802bab4

0801b738 <_Bfree>:
 801b738:	b570      	push	{r4, r5, r6, lr}
 801b73a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801b73c:	4605      	mov	r5, r0
 801b73e:	460c      	mov	r4, r1
 801b740:	b976      	cbnz	r6, 801b760 <_Bfree+0x28>
 801b742:	2010      	movs	r0, #16
 801b744:	f7ff ff9e 	bl	801b684 <malloc>
 801b748:	4602      	mov	r2, r0
 801b74a:	6268      	str	r0, [r5, #36]	; 0x24
 801b74c:	b920      	cbnz	r0, 801b758 <_Bfree+0x20>
 801b74e:	4b09      	ldr	r3, [pc, #36]	; (801b774 <_Bfree+0x3c>)
 801b750:	4809      	ldr	r0, [pc, #36]	; (801b778 <_Bfree+0x40>)
 801b752:	218a      	movs	r1, #138	; 0x8a
 801b754:	f000 fee6 	bl	801c524 <__assert_func>
 801b758:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b75c:	6006      	str	r6, [r0, #0]
 801b75e:	60c6      	str	r6, [r0, #12]
 801b760:	b13c      	cbz	r4, 801b772 <_Bfree+0x3a>
 801b762:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801b764:	6862      	ldr	r2, [r4, #4]
 801b766:	68db      	ldr	r3, [r3, #12]
 801b768:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b76c:	6021      	str	r1, [r4, #0]
 801b76e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801b772:	bd70      	pop	{r4, r5, r6, pc}
 801b774:	0802b9b6 	.word	0x0802b9b6
 801b778:	0802bab4 	.word	0x0802bab4

0801b77c <__multadd>:
 801b77c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b780:	690d      	ldr	r5, [r1, #16]
 801b782:	4607      	mov	r7, r0
 801b784:	460c      	mov	r4, r1
 801b786:	461e      	mov	r6, r3
 801b788:	f101 0c14 	add.w	ip, r1, #20
 801b78c:	2000      	movs	r0, #0
 801b78e:	f8dc 3000 	ldr.w	r3, [ip]
 801b792:	b299      	uxth	r1, r3
 801b794:	fb02 6101 	mla	r1, r2, r1, r6
 801b798:	0c1e      	lsrs	r6, r3, #16
 801b79a:	0c0b      	lsrs	r3, r1, #16
 801b79c:	fb02 3306 	mla	r3, r2, r6, r3
 801b7a0:	b289      	uxth	r1, r1
 801b7a2:	3001      	adds	r0, #1
 801b7a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801b7a8:	4285      	cmp	r5, r0
 801b7aa:	f84c 1b04 	str.w	r1, [ip], #4
 801b7ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801b7b2:	dcec      	bgt.n	801b78e <__multadd+0x12>
 801b7b4:	b30e      	cbz	r6, 801b7fa <__multadd+0x7e>
 801b7b6:	68a3      	ldr	r3, [r4, #8]
 801b7b8:	42ab      	cmp	r3, r5
 801b7ba:	dc19      	bgt.n	801b7f0 <__multadd+0x74>
 801b7bc:	6861      	ldr	r1, [r4, #4]
 801b7be:	4638      	mov	r0, r7
 801b7c0:	3101      	adds	r1, #1
 801b7c2:	f7ff ff79 	bl	801b6b8 <_Balloc>
 801b7c6:	4680      	mov	r8, r0
 801b7c8:	b928      	cbnz	r0, 801b7d6 <__multadd+0x5a>
 801b7ca:	4602      	mov	r2, r0
 801b7cc:	4b0c      	ldr	r3, [pc, #48]	; (801b800 <__multadd+0x84>)
 801b7ce:	480d      	ldr	r0, [pc, #52]	; (801b804 <__multadd+0x88>)
 801b7d0:	21b5      	movs	r1, #181	; 0xb5
 801b7d2:	f000 fea7 	bl	801c524 <__assert_func>
 801b7d6:	6922      	ldr	r2, [r4, #16]
 801b7d8:	3202      	adds	r2, #2
 801b7da:	f104 010c 	add.w	r1, r4, #12
 801b7de:	0092      	lsls	r2, r2, #2
 801b7e0:	300c      	adds	r0, #12
 801b7e2:	f7fd f8d7 	bl	8018994 <memcpy>
 801b7e6:	4621      	mov	r1, r4
 801b7e8:	4638      	mov	r0, r7
 801b7ea:	f7ff ffa5 	bl	801b738 <_Bfree>
 801b7ee:	4644      	mov	r4, r8
 801b7f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801b7f4:	3501      	adds	r5, #1
 801b7f6:	615e      	str	r6, [r3, #20]
 801b7f8:	6125      	str	r5, [r4, #16]
 801b7fa:	4620      	mov	r0, r4
 801b7fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b800:	0802ba28 	.word	0x0802ba28
 801b804:	0802bab4 	.word	0x0802bab4

0801b808 <__s2b>:
 801b808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b80c:	460c      	mov	r4, r1
 801b80e:	4615      	mov	r5, r2
 801b810:	461f      	mov	r7, r3
 801b812:	2209      	movs	r2, #9
 801b814:	3308      	adds	r3, #8
 801b816:	4606      	mov	r6, r0
 801b818:	fb93 f3f2 	sdiv	r3, r3, r2
 801b81c:	2100      	movs	r1, #0
 801b81e:	2201      	movs	r2, #1
 801b820:	429a      	cmp	r2, r3
 801b822:	db09      	blt.n	801b838 <__s2b+0x30>
 801b824:	4630      	mov	r0, r6
 801b826:	f7ff ff47 	bl	801b6b8 <_Balloc>
 801b82a:	b940      	cbnz	r0, 801b83e <__s2b+0x36>
 801b82c:	4602      	mov	r2, r0
 801b82e:	4b19      	ldr	r3, [pc, #100]	; (801b894 <__s2b+0x8c>)
 801b830:	4819      	ldr	r0, [pc, #100]	; (801b898 <__s2b+0x90>)
 801b832:	21ce      	movs	r1, #206	; 0xce
 801b834:	f000 fe76 	bl	801c524 <__assert_func>
 801b838:	0052      	lsls	r2, r2, #1
 801b83a:	3101      	adds	r1, #1
 801b83c:	e7f0      	b.n	801b820 <__s2b+0x18>
 801b83e:	9b08      	ldr	r3, [sp, #32]
 801b840:	6143      	str	r3, [r0, #20]
 801b842:	2d09      	cmp	r5, #9
 801b844:	f04f 0301 	mov.w	r3, #1
 801b848:	6103      	str	r3, [r0, #16]
 801b84a:	dd16      	ble.n	801b87a <__s2b+0x72>
 801b84c:	f104 0909 	add.w	r9, r4, #9
 801b850:	46c8      	mov	r8, r9
 801b852:	442c      	add	r4, r5
 801b854:	f818 3b01 	ldrb.w	r3, [r8], #1
 801b858:	4601      	mov	r1, r0
 801b85a:	3b30      	subs	r3, #48	; 0x30
 801b85c:	220a      	movs	r2, #10
 801b85e:	4630      	mov	r0, r6
 801b860:	f7ff ff8c 	bl	801b77c <__multadd>
 801b864:	45a0      	cmp	r8, r4
 801b866:	d1f5      	bne.n	801b854 <__s2b+0x4c>
 801b868:	f1a5 0408 	sub.w	r4, r5, #8
 801b86c:	444c      	add	r4, r9
 801b86e:	1b2d      	subs	r5, r5, r4
 801b870:	1963      	adds	r3, r4, r5
 801b872:	42bb      	cmp	r3, r7
 801b874:	db04      	blt.n	801b880 <__s2b+0x78>
 801b876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b87a:	340a      	adds	r4, #10
 801b87c:	2509      	movs	r5, #9
 801b87e:	e7f6      	b.n	801b86e <__s2b+0x66>
 801b880:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b884:	4601      	mov	r1, r0
 801b886:	3b30      	subs	r3, #48	; 0x30
 801b888:	220a      	movs	r2, #10
 801b88a:	4630      	mov	r0, r6
 801b88c:	f7ff ff76 	bl	801b77c <__multadd>
 801b890:	e7ee      	b.n	801b870 <__s2b+0x68>
 801b892:	bf00      	nop
 801b894:	0802ba28 	.word	0x0802ba28
 801b898:	0802bab4 	.word	0x0802bab4

0801b89c <__hi0bits>:
 801b89c:	0c03      	lsrs	r3, r0, #16
 801b89e:	041b      	lsls	r3, r3, #16
 801b8a0:	b9d3      	cbnz	r3, 801b8d8 <__hi0bits+0x3c>
 801b8a2:	0400      	lsls	r0, r0, #16
 801b8a4:	2310      	movs	r3, #16
 801b8a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801b8aa:	bf04      	itt	eq
 801b8ac:	0200      	lsleq	r0, r0, #8
 801b8ae:	3308      	addeq	r3, #8
 801b8b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801b8b4:	bf04      	itt	eq
 801b8b6:	0100      	lsleq	r0, r0, #4
 801b8b8:	3304      	addeq	r3, #4
 801b8ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801b8be:	bf04      	itt	eq
 801b8c0:	0080      	lsleq	r0, r0, #2
 801b8c2:	3302      	addeq	r3, #2
 801b8c4:	2800      	cmp	r0, #0
 801b8c6:	db05      	blt.n	801b8d4 <__hi0bits+0x38>
 801b8c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801b8cc:	f103 0301 	add.w	r3, r3, #1
 801b8d0:	bf08      	it	eq
 801b8d2:	2320      	moveq	r3, #32
 801b8d4:	4618      	mov	r0, r3
 801b8d6:	4770      	bx	lr
 801b8d8:	2300      	movs	r3, #0
 801b8da:	e7e4      	b.n	801b8a6 <__hi0bits+0xa>

0801b8dc <__lo0bits>:
 801b8dc:	6803      	ldr	r3, [r0, #0]
 801b8de:	f013 0207 	ands.w	r2, r3, #7
 801b8e2:	4601      	mov	r1, r0
 801b8e4:	d00b      	beq.n	801b8fe <__lo0bits+0x22>
 801b8e6:	07da      	lsls	r2, r3, #31
 801b8e8:	d423      	bmi.n	801b932 <__lo0bits+0x56>
 801b8ea:	0798      	lsls	r0, r3, #30
 801b8ec:	bf49      	itett	mi
 801b8ee:	085b      	lsrmi	r3, r3, #1
 801b8f0:	089b      	lsrpl	r3, r3, #2
 801b8f2:	2001      	movmi	r0, #1
 801b8f4:	600b      	strmi	r3, [r1, #0]
 801b8f6:	bf5c      	itt	pl
 801b8f8:	600b      	strpl	r3, [r1, #0]
 801b8fa:	2002      	movpl	r0, #2
 801b8fc:	4770      	bx	lr
 801b8fe:	b298      	uxth	r0, r3
 801b900:	b9a8      	cbnz	r0, 801b92e <__lo0bits+0x52>
 801b902:	0c1b      	lsrs	r3, r3, #16
 801b904:	2010      	movs	r0, #16
 801b906:	b2da      	uxtb	r2, r3
 801b908:	b90a      	cbnz	r2, 801b90e <__lo0bits+0x32>
 801b90a:	3008      	adds	r0, #8
 801b90c:	0a1b      	lsrs	r3, r3, #8
 801b90e:	071a      	lsls	r2, r3, #28
 801b910:	bf04      	itt	eq
 801b912:	091b      	lsreq	r3, r3, #4
 801b914:	3004      	addeq	r0, #4
 801b916:	079a      	lsls	r2, r3, #30
 801b918:	bf04      	itt	eq
 801b91a:	089b      	lsreq	r3, r3, #2
 801b91c:	3002      	addeq	r0, #2
 801b91e:	07da      	lsls	r2, r3, #31
 801b920:	d403      	bmi.n	801b92a <__lo0bits+0x4e>
 801b922:	085b      	lsrs	r3, r3, #1
 801b924:	f100 0001 	add.w	r0, r0, #1
 801b928:	d005      	beq.n	801b936 <__lo0bits+0x5a>
 801b92a:	600b      	str	r3, [r1, #0]
 801b92c:	4770      	bx	lr
 801b92e:	4610      	mov	r0, r2
 801b930:	e7e9      	b.n	801b906 <__lo0bits+0x2a>
 801b932:	2000      	movs	r0, #0
 801b934:	4770      	bx	lr
 801b936:	2020      	movs	r0, #32
 801b938:	4770      	bx	lr
	...

0801b93c <__i2b>:
 801b93c:	b510      	push	{r4, lr}
 801b93e:	460c      	mov	r4, r1
 801b940:	2101      	movs	r1, #1
 801b942:	f7ff feb9 	bl	801b6b8 <_Balloc>
 801b946:	4602      	mov	r2, r0
 801b948:	b928      	cbnz	r0, 801b956 <__i2b+0x1a>
 801b94a:	4b05      	ldr	r3, [pc, #20]	; (801b960 <__i2b+0x24>)
 801b94c:	4805      	ldr	r0, [pc, #20]	; (801b964 <__i2b+0x28>)
 801b94e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801b952:	f000 fde7 	bl	801c524 <__assert_func>
 801b956:	2301      	movs	r3, #1
 801b958:	6144      	str	r4, [r0, #20]
 801b95a:	6103      	str	r3, [r0, #16]
 801b95c:	bd10      	pop	{r4, pc}
 801b95e:	bf00      	nop
 801b960:	0802ba28 	.word	0x0802ba28
 801b964:	0802bab4 	.word	0x0802bab4

0801b968 <__multiply>:
 801b968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b96c:	4691      	mov	r9, r2
 801b96e:	690a      	ldr	r2, [r1, #16]
 801b970:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801b974:	429a      	cmp	r2, r3
 801b976:	bfb8      	it	lt
 801b978:	460b      	movlt	r3, r1
 801b97a:	460c      	mov	r4, r1
 801b97c:	bfbc      	itt	lt
 801b97e:	464c      	movlt	r4, r9
 801b980:	4699      	movlt	r9, r3
 801b982:	6927      	ldr	r7, [r4, #16]
 801b984:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801b988:	68a3      	ldr	r3, [r4, #8]
 801b98a:	6861      	ldr	r1, [r4, #4]
 801b98c:	eb07 060a 	add.w	r6, r7, sl
 801b990:	42b3      	cmp	r3, r6
 801b992:	b085      	sub	sp, #20
 801b994:	bfb8      	it	lt
 801b996:	3101      	addlt	r1, #1
 801b998:	f7ff fe8e 	bl	801b6b8 <_Balloc>
 801b99c:	b930      	cbnz	r0, 801b9ac <__multiply+0x44>
 801b99e:	4602      	mov	r2, r0
 801b9a0:	4b44      	ldr	r3, [pc, #272]	; (801bab4 <__multiply+0x14c>)
 801b9a2:	4845      	ldr	r0, [pc, #276]	; (801bab8 <__multiply+0x150>)
 801b9a4:	f240 115d 	movw	r1, #349	; 0x15d
 801b9a8:	f000 fdbc 	bl	801c524 <__assert_func>
 801b9ac:	f100 0514 	add.w	r5, r0, #20
 801b9b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801b9b4:	462b      	mov	r3, r5
 801b9b6:	2200      	movs	r2, #0
 801b9b8:	4543      	cmp	r3, r8
 801b9ba:	d321      	bcc.n	801ba00 <__multiply+0x98>
 801b9bc:	f104 0314 	add.w	r3, r4, #20
 801b9c0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801b9c4:	f109 0314 	add.w	r3, r9, #20
 801b9c8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801b9cc:	9202      	str	r2, [sp, #8]
 801b9ce:	1b3a      	subs	r2, r7, r4
 801b9d0:	3a15      	subs	r2, #21
 801b9d2:	f022 0203 	bic.w	r2, r2, #3
 801b9d6:	3204      	adds	r2, #4
 801b9d8:	f104 0115 	add.w	r1, r4, #21
 801b9dc:	428f      	cmp	r7, r1
 801b9de:	bf38      	it	cc
 801b9e0:	2204      	movcc	r2, #4
 801b9e2:	9201      	str	r2, [sp, #4]
 801b9e4:	9a02      	ldr	r2, [sp, #8]
 801b9e6:	9303      	str	r3, [sp, #12]
 801b9e8:	429a      	cmp	r2, r3
 801b9ea:	d80c      	bhi.n	801ba06 <__multiply+0x9e>
 801b9ec:	2e00      	cmp	r6, #0
 801b9ee:	dd03      	ble.n	801b9f8 <__multiply+0x90>
 801b9f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801b9f4:	2b00      	cmp	r3, #0
 801b9f6:	d05a      	beq.n	801baae <__multiply+0x146>
 801b9f8:	6106      	str	r6, [r0, #16]
 801b9fa:	b005      	add	sp, #20
 801b9fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba00:	f843 2b04 	str.w	r2, [r3], #4
 801ba04:	e7d8      	b.n	801b9b8 <__multiply+0x50>
 801ba06:	f8b3 a000 	ldrh.w	sl, [r3]
 801ba0a:	f1ba 0f00 	cmp.w	sl, #0
 801ba0e:	d024      	beq.n	801ba5a <__multiply+0xf2>
 801ba10:	f104 0e14 	add.w	lr, r4, #20
 801ba14:	46a9      	mov	r9, r5
 801ba16:	f04f 0c00 	mov.w	ip, #0
 801ba1a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801ba1e:	f8d9 1000 	ldr.w	r1, [r9]
 801ba22:	fa1f fb82 	uxth.w	fp, r2
 801ba26:	b289      	uxth	r1, r1
 801ba28:	fb0a 110b 	mla	r1, sl, fp, r1
 801ba2c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801ba30:	f8d9 2000 	ldr.w	r2, [r9]
 801ba34:	4461      	add	r1, ip
 801ba36:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801ba3a:	fb0a c20b 	mla	r2, sl, fp, ip
 801ba3e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801ba42:	b289      	uxth	r1, r1
 801ba44:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801ba48:	4577      	cmp	r7, lr
 801ba4a:	f849 1b04 	str.w	r1, [r9], #4
 801ba4e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801ba52:	d8e2      	bhi.n	801ba1a <__multiply+0xb2>
 801ba54:	9a01      	ldr	r2, [sp, #4]
 801ba56:	f845 c002 	str.w	ip, [r5, r2]
 801ba5a:	9a03      	ldr	r2, [sp, #12]
 801ba5c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801ba60:	3304      	adds	r3, #4
 801ba62:	f1b9 0f00 	cmp.w	r9, #0
 801ba66:	d020      	beq.n	801baaa <__multiply+0x142>
 801ba68:	6829      	ldr	r1, [r5, #0]
 801ba6a:	f104 0c14 	add.w	ip, r4, #20
 801ba6e:	46ae      	mov	lr, r5
 801ba70:	f04f 0a00 	mov.w	sl, #0
 801ba74:	f8bc b000 	ldrh.w	fp, [ip]
 801ba78:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801ba7c:	fb09 220b 	mla	r2, r9, fp, r2
 801ba80:	4492      	add	sl, r2
 801ba82:	b289      	uxth	r1, r1
 801ba84:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801ba88:	f84e 1b04 	str.w	r1, [lr], #4
 801ba8c:	f85c 2b04 	ldr.w	r2, [ip], #4
 801ba90:	f8be 1000 	ldrh.w	r1, [lr]
 801ba94:	0c12      	lsrs	r2, r2, #16
 801ba96:	fb09 1102 	mla	r1, r9, r2, r1
 801ba9a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801ba9e:	4567      	cmp	r7, ip
 801baa0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801baa4:	d8e6      	bhi.n	801ba74 <__multiply+0x10c>
 801baa6:	9a01      	ldr	r2, [sp, #4]
 801baa8:	50a9      	str	r1, [r5, r2]
 801baaa:	3504      	adds	r5, #4
 801baac:	e79a      	b.n	801b9e4 <__multiply+0x7c>
 801baae:	3e01      	subs	r6, #1
 801bab0:	e79c      	b.n	801b9ec <__multiply+0x84>
 801bab2:	bf00      	nop
 801bab4:	0802ba28 	.word	0x0802ba28
 801bab8:	0802bab4 	.word	0x0802bab4

0801babc <__pow5mult>:
 801babc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bac0:	4615      	mov	r5, r2
 801bac2:	f012 0203 	ands.w	r2, r2, #3
 801bac6:	4606      	mov	r6, r0
 801bac8:	460f      	mov	r7, r1
 801baca:	d007      	beq.n	801badc <__pow5mult+0x20>
 801bacc:	4c25      	ldr	r4, [pc, #148]	; (801bb64 <__pow5mult+0xa8>)
 801bace:	3a01      	subs	r2, #1
 801bad0:	2300      	movs	r3, #0
 801bad2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801bad6:	f7ff fe51 	bl	801b77c <__multadd>
 801bada:	4607      	mov	r7, r0
 801badc:	10ad      	asrs	r5, r5, #2
 801bade:	d03d      	beq.n	801bb5c <__pow5mult+0xa0>
 801bae0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801bae2:	b97c      	cbnz	r4, 801bb04 <__pow5mult+0x48>
 801bae4:	2010      	movs	r0, #16
 801bae6:	f7ff fdcd 	bl	801b684 <malloc>
 801baea:	4602      	mov	r2, r0
 801baec:	6270      	str	r0, [r6, #36]	; 0x24
 801baee:	b928      	cbnz	r0, 801bafc <__pow5mult+0x40>
 801baf0:	4b1d      	ldr	r3, [pc, #116]	; (801bb68 <__pow5mult+0xac>)
 801baf2:	481e      	ldr	r0, [pc, #120]	; (801bb6c <__pow5mult+0xb0>)
 801baf4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801baf8:	f000 fd14 	bl	801c524 <__assert_func>
 801bafc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801bb00:	6004      	str	r4, [r0, #0]
 801bb02:	60c4      	str	r4, [r0, #12]
 801bb04:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801bb08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801bb0c:	b94c      	cbnz	r4, 801bb22 <__pow5mult+0x66>
 801bb0e:	f240 2171 	movw	r1, #625	; 0x271
 801bb12:	4630      	mov	r0, r6
 801bb14:	f7ff ff12 	bl	801b93c <__i2b>
 801bb18:	2300      	movs	r3, #0
 801bb1a:	f8c8 0008 	str.w	r0, [r8, #8]
 801bb1e:	4604      	mov	r4, r0
 801bb20:	6003      	str	r3, [r0, #0]
 801bb22:	f04f 0900 	mov.w	r9, #0
 801bb26:	07eb      	lsls	r3, r5, #31
 801bb28:	d50a      	bpl.n	801bb40 <__pow5mult+0x84>
 801bb2a:	4639      	mov	r1, r7
 801bb2c:	4622      	mov	r2, r4
 801bb2e:	4630      	mov	r0, r6
 801bb30:	f7ff ff1a 	bl	801b968 <__multiply>
 801bb34:	4639      	mov	r1, r7
 801bb36:	4680      	mov	r8, r0
 801bb38:	4630      	mov	r0, r6
 801bb3a:	f7ff fdfd 	bl	801b738 <_Bfree>
 801bb3e:	4647      	mov	r7, r8
 801bb40:	106d      	asrs	r5, r5, #1
 801bb42:	d00b      	beq.n	801bb5c <__pow5mult+0xa0>
 801bb44:	6820      	ldr	r0, [r4, #0]
 801bb46:	b938      	cbnz	r0, 801bb58 <__pow5mult+0x9c>
 801bb48:	4622      	mov	r2, r4
 801bb4a:	4621      	mov	r1, r4
 801bb4c:	4630      	mov	r0, r6
 801bb4e:	f7ff ff0b 	bl	801b968 <__multiply>
 801bb52:	6020      	str	r0, [r4, #0]
 801bb54:	f8c0 9000 	str.w	r9, [r0]
 801bb58:	4604      	mov	r4, r0
 801bb5a:	e7e4      	b.n	801bb26 <__pow5mult+0x6a>
 801bb5c:	4638      	mov	r0, r7
 801bb5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bb62:	bf00      	nop
 801bb64:	0802bc00 	.word	0x0802bc00
 801bb68:	0802b9b6 	.word	0x0802b9b6
 801bb6c:	0802bab4 	.word	0x0802bab4

0801bb70 <__lshift>:
 801bb70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bb74:	460c      	mov	r4, r1
 801bb76:	6849      	ldr	r1, [r1, #4]
 801bb78:	6923      	ldr	r3, [r4, #16]
 801bb7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801bb7e:	68a3      	ldr	r3, [r4, #8]
 801bb80:	4607      	mov	r7, r0
 801bb82:	4691      	mov	r9, r2
 801bb84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801bb88:	f108 0601 	add.w	r6, r8, #1
 801bb8c:	42b3      	cmp	r3, r6
 801bb8e:	db0b      	blt.n	801bba8 <__lshift+0x38>
 801bb90:	4638      	mov	r0, r7
 801bb92:	f7ff fd91 	bl	801b6b8 <_Balloc>
 801bb96:	4605      	mov	r5, r0
 801bb98:	b948      	cbnz	r0, 801bbae <__lshift+0x3e>
 801bb9a:	4602      	mov	r2, r0
 801bb9c:	4b2a      	ldr	r3, [pc, #168]	; (801bc48 <__lshift+0xd8>)
 801bb9e:	482b      	ldr	r0, [pc, #172]	; (801bc4c <__lshift+0xdc>)
 801bba0:	f240 11d9 	movw	r1, #473	; 0x1d9
 801bba4:	f000 fcbe 	bl	801c524 <__assert_func>
 801bba8:	3101      	adds	r1, #1
 801bbaa:	005b      	lsls	r3, r3, #1
 801bbac:	e7ee      	b.n	801bb8c <__lshift+0x1c>
 801bbae:	2300      	movs	r3, #0
 801bbb0:	f100 0114 	add.w	r1, r0, #20
 801bbb4:	f100 0210 	add.w	r2, r0, #16
 801bbb8:	4618      	mov	r0, r3
 801bbba:	4553      	cmp	r3, sl
 801bbbc:	db37      	blt.n	801bc2e <__lshift+0xbe>
 801bbbe:	6920      	ldr	r0, [r4, #16]
 801bbc0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801bbc4:	f104 0314 	add.w	r3, r4, #20
 801bbc8:	f019 091f 	ands.w	r9, r9, #31
 801bbcc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801bbd0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801bbd4:	d02f      	beq.n	801bc36 <__lshift+0xc6>
 801bbd6:	f1c9 0e20 	rsb	lr, r9, #32
 801bbda:	468a      	mov	sl, r1
 801bbdc:	f04f 0c00 	mov.w	ip, #0
 801bbe0:	681a      	ldr	r2, [r3, #0]
 801bbe2:	fa02 f209 	lsl.w	r2, r2, r9
 801bbe6:	ea42 020c 	orr.w	r2, r2, ip
 801bbea:	f84a 2b04 	str.w	r2, [sl], #4
 801bbee:	f853 2b04 	ldr.w	r2, [r3], #4
 801bbf2:	4298      	cmp	r0, r3
 801bbf4:	fa22 fc0e 	lsr.w	ip, r2, lr
 801bbf8:	d8f2      	bhi.n	801bbe0 <__lshift+0x70>
 801bbfa:	1b03      	subs	r3, r0, r4
 801bbfc:	3b15      	subs	r3, #21
 801bbfe:	f023 0303 	bic.w	r3, r3, #3
 801bc02:	3304      	adds	r3, #4
 801bc04:	f104 0215 	add.w	r2, r4, #21
 801bc08:	4290      	cmp	r0, r2
 801bc0a:	bf38      	it	cc
 801bc0c:	2304      	movcc	r3, #4
 801bc0e:	f841 c003 	str.w	ip, [r1, r3]
 801bc12:	f1bc 0f00 	cmp.w	ip, #0
 801bc16:	d001      	beq.n	801bc1c <__lshift+0xac>
 801bc18:	f108 0602 	add.w	r6, r8, #2
 801bc1c:	3e01      	subs	r6, #1
 801bc1e:	4638      	mov	r0, r7
 801bc20:	612e      	str	r6, [r5, #16]
 801bc22:	4621      	mov	r1, r4
 801bc24:	f7ff fd88 	bl	801b738 <_Bfree>
 801bc28:	4628      	mov	r0, r5
 801bc2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bc2e:	f842 0f04 	str.w	r0, [r2, #4]!
 801bc32:	3301      	adds	r3, #1
 801bc34:	e7c1      	b.n	801bbba <__lshift+0x4a>
 801bc36:	3904      	subs	r1, #4
 801bc38:	f853 2b04 	ldr.w	r2, [r3], #4
 801bc3c:	f841 2f04 	str.w	r2, [r1, #4]!
 801bc40:	4298      	cmp	r0, r3
 801bc42:	d8f9      	bhi.n	801bc38 <__lshift+0xc8>
 801bc44:	e7ea      	b.n	801bc1c <__lshift+0xac>
 801bc46:	bf00      	nop
 801bc48:	0802ba28 	.word	0x0802ba28
 801bc4c:	0802bab4 	.word	0x0802bab4

0801bc50 <__mcmp>:
 801bc50:	b530      	push	{r4, r5, lr}
 801bc52:	6902      	ldr	r2, [r0, #16]
 801bc54:	690c      	ldr	r4, [r1, #16]
 801bc56:	1b12      	subs	r2, r2, r4
 801bc58:	d10e      	bne.n	801bc78 <__mcmp+0x28>
 801bc5a:	f100 0314 	add.w	r3, r0, #20
 801bc5e:	3114      	adds	r1, #20
 801bc60:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801bc64:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801bc68:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801bc6c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801bc70:	42a5      	cmp	r5, r4
 801bc72:	d003      	beq.n	801bc7c <__mcmp+0x2c>
 801bc74:	d305      	bcc.n	801bc82 <__mcmp+0x32>
 801bc76:	2201      	movs	r2, #1
 801bc78:	4610      	mov	r0, r2
 801bc7a:	bd30      	pop	{r4, r5, pc}
 801bc7c:	4283      	cmp	r3, r0
 801bc7e:	d3f3      	bcc.n	801bc68 <__mcmp+0x18>
 801bc80:	e7fa      	b.n	801bc78 <__mcmp+0x28>
 801bc82:	f04f 32ff 	mov.w	r2, #4294967295
 801bc86:	e7f7      	b.n	801bc78 <__mcmp+0x28>

0801bc88 <__mdiff>:
 801bc88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc8c:	460c      	mov	r4, r1
 801bc8e:	4606      	mov	r6, r0
 801bc90:	4611      	mov	r1, r2
 801bc92:	4620      	mov	r0, r4
 801bc94:	4690      	mov	r8, r2
 801bc96:	f7ff ffdb 	bl	801bc50 <__mcmp>
 801bc9a:	1e05      	subs	r5, r0, #0
 801bc9c:	d110      	bne.n	801bcc0 <__mdiff+0x38>
 801bc9e:	4629      	mov	r1, r5
 801bca0:	4630      	mov	r0, r6
 801bca2:	f7ff fd09 	bl	801b6b8 <_Balloc>
 801bca6:	b930      	cbnz	r0, 801bcb6 <__mdiff+0x2e>
 801bca8:	4b3a      	ldr	r3, [pc, #232]	; (801bd94 <__mdiff+0x10c>)
 801bcaa:	4602      	mov	r2, r0
 801bcac:	f240 2132 	movw	r1, #562	; 0x232
 801bcb0:	4839      	ldr	r0, [pc, #228]	; (801bd98 <__mdiff+0x110>)
 801bcb2:	f000 fc37 	bl	801c524 <__assert_func>
 801bcb6:	2301      	movs	r3, #1
 801bcb8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801bcbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bcc0:	bfa4      	itt	ge
 801bcc2:	4643      	movge	r3, r8
 801bcc4:	46a0      	movge	r8, r4
 801bcc6:	4630      	mov	r0, r6
 801bcc8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801bccc:	bfa6      	itte	ge
 801bcce:	461c      	movge	r4, r3
 801bcd0:	2500      	movge	r5, #0
 801bcd2:	2501      	movlt	r5, #1
 801bcd4:	f7ff fcf0 	bl	801b6b8 <_Balloc>
 801bcd8:	b920      	cbnz	r0, 801bce4 <__mdiff+0x5c>
 801bcda:	4b2e      	ldr	r3, [pc, #184]	; (801bd94 <__mdiff+0x10c>)
 801bcdc:	4602      	mov	r2, r0
 801bcde:	f44f 7110 	mov.w	r1, #576	; 0x240
 801bce2:	e7e5      	b.n	801bcb0 <__mdiff+0x28>
 801bce4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801bce8:	6926      	ldr	r6, [r4, #16]
 801bcea:	60c5      	str	r5, [r0, #12]
 801bcec:	f104 0914 	add.w	r9, r4, #20
 801bcf0:	f108 0514 	add.w	r5, r8, #20
 801bcf4:	f100 0e14 	add.w	lr, r0, #20
 801bcf8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801bcfc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801bd00:	f108 0210 	add.w	r2, r8, #16
 801bd04:	46f2      	mov	sl, lr
 801bd06:	2100      	movs	r1, #0
 801bd08:	f859 3b04 	ldr.w	r3, [r9], #4
 801bd0c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801bd10:	fa1f f883 	uxth.w	r8, r3
 801bd14:	fa11 f18b 	uxtah	r1, r1, fp
 801bd18:	0c1b      	lsrs	r3, r3, #16
 801bd1a:	eba1 0808 	sub.w	r8, r1, r8
 801bd1e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801bd22:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801bd26:	fa1f f888 	uxth.w	r8, r8
 801bd2a:	1419      	asrs	r1, r3, #16
 801bd2c:	454e      	cmp	r6, r9
 801bd2e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801bd32:	f84a 3b04 	str.w	r3, [sl], #4
 801bd36:	d8e7      	bhi.n	801bd08 <__mdiff+0x80>
 801bd38:	1b33      	subs	r3, r6, r4
 801bd3a:	3b15      	subs	r3, #21
 801bd3c:	f023 0303 	bic.w	r3, r3, #3
 801bd40:	3304      	adds	r3, #4
 801bd42:	3415      	adds	r4, #21
 801bd44:	42a6      	cmp	r6, r4
 801bd46:	bf38      	it	cc
 801bd48:	2304      	movcc	r3, #4
 801bd4a:	441d      	add	r5, r3
 801bd4c:	4473      	add	r3, lr
 801bd4e:	469e      	mov	lr, r3
 801bd50:	462e      	mov	r6, r5
 801bd52:	4566      	cmp	r6, ip
 801bd54:	d30e      	bcc.n	801bd74 <__mdiff+0xec>
 801bd56:	f10c 0203 	add.w	r2, ip, #3
 801bd5a:	1b52      	subs	r2, r2, r5
 801bd5c:	f022 0203 	bic.w	r2, r2, #3
 801bd60:	3d03      	subs	r5, #3
 801bd62:	45ac      	cmp	ip, r5
 801bd64:	bf38      	it	cc
 801bd66:	2200      	movcc	r2, #0
 801bd68:	441a      	add	r2, r3
 801bd6a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801bd6e:	b17b      	cbz	r3, 801bd90 <__mdiff+0x108>
 801bd70:	6107      	str	r7, [r0, #16]
 801bd72:	e7a3      	b.n	801bcbc <__mdiff+0x34>
 801bd74:	f856 8b04 	ldr.w	r8, [r6], #4
 801bd78:	fa11 f288 	uxtah	r2, r1, r8
 801bd7c:	1414      	asrs	r4, r2, #16
 801bd7e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801bd82:	b292      	uxth	r2, r2
 801bd84:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801bd88:	f84e 2b04 	str.w	r2, [lr], #4
 801bd8c:	1421      	asrs	r1, r4, #16
 801bd8e:	e7e0      	b.n	801bd52 <__mdiff+0xca>
 801bd90:	3f01      	subs	r7, #1
 801bd92:	e7ea      	b.n	801bd6a <__mdiff+0xe2>
 801bd94:	0802ba28 	.word	0x0802ba28
 801bd98:	0802bab4 	.word	0x0802bab4

0801bd9c <__ulp>:
 801bd9c:	b082      	sub	sp, #8
 801bd9e:	ed8d 0b00 	vstr	d0, [sp]
 801bda2:	9b01      	ldr	r3, [sp, #4]
 801bda4:	4912      	ldr	r1, [pc, #72]	; (801bdf0 <__ulp+0x54>)
 801bda6:	4019      	ands	r1, r3
 801bda8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801bdac:	2900      	cmp	r1, #0
 801bdae:	dd05      	ble.n	801bdbc <__ulp+0x20>
 801bdb0:	2200      	movs	r2, #0
 801bdb2:	460b      	mov	r3, r1
 801bdb4:	ec43 2b10 	vmov	d0, r2, r3
 801bdb8:	b002      	add	sp, #8
 801bdba:	4770      	bx	lr
 801bdbc:	4249      	negs	r1, r1
 801bdbe:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801bdc2:	ea4f 5021 	mov.w	r0, r1, asr #20
 801bdc6:	f04f 0200 	mov.w	r2, #0
 801bdca:	f04f 0300 	mov.w	r3, #0
 801bdce:	da04      	bge.n	801bdda <__ulp+0x3e>
 801bdd0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801bdd4:	fa41 f300 	asr.w	r3, r1, r0
 801bdd8:	e7ec      	b.n	801bdb4 <__ulp+0x18>
 801bdda:	f1a0 0114 	sub.w	r1, r0, #20
 801bdde:	291e      	cmp	r1, #30
 801bde0:	bfda      	itte	le
 801bde2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801bde6:	fa20 f101 	lsrle.w	r1, r0, r1
 801bdea:	2101      	movgt	r1, #1
 801bdec:	460a      	mov	r2, r1
 801bdee:	e7e1      	b.n	801bdb4 <__ulp+0x18>
 801bdf0:	7ff00000 	.word	0x7ff00000

0801bdf4 <__b2d>:
 801bdf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bdf6:	6905      	ldr	r5, [r0, #16]
 801bdf8:	f100 0714 	add.w	r7, r0, #20
 801bdfc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801be00:	1f2e      	subs	r6, r5, #4
 801be02:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801be06:	4620      	mov	r0, r4
 801be08:	f7ff fd48 	bl	801b89c <__hi0bits>
 801be0c:	f1c0 0320 	rsb	r3, r0, #32
 801be10:	280a      	cmp	r0, #10
 801be12:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801be90 <__b2d+0x9c>
 801be16:	600b      	str	r3, [r1, #0]
 801be18:	dc14      	bgt.n	801be44 <__b2d+0x50>
 801be1a:	f1c0 0e0b 	rsb	lr, r0, #11
 801be1e:	fa24 f10e 	lsr.w	r1, r4, lr
 801be22:	42b7      	cmp	r7, r6
 801be24:	ea41 030c 	orr.w	r3, r1, ip
 801be28:	bf34      	ite	cc
 801be2a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801be2e:	2100      	movcs	r1, #0
 801be30:	3015      	adds	r0, #21
 801be32:	fa04 f000 	lsl.w	r0, r4, r0
 801be36:	fa21 f10e 	lsr.w	r1, r1, lr
 801be3a:	ea40 0201 	orr.w	r2, r0, r1
 801be3e:	ec43 2b10 	vmov	d0, r2, r3
 801be42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801be44:	42b7      	cmp	r7, r6
 801be46:	bf3a      	itte	cc
 801be48:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801be4c:	f1a5 0608 	subcc.w	r6, r5, #8
 801be50:	2100      	movcs	r1, #0
 801be52:	380b      	subs	r0, #11
 801be54:	d017      	beq.n	801be86 <__b2d+0x92>
 801be56:	f1c0 0c20 	rsb	ip, r0, #32
 801be5a:	fa04 f500 	lsl.w	r5, r4, r0
 801be5e:	42be      	cmp	r6, r7
 801be60:	fa21 f40c 	lsr.w	r4, r1, ip
 801be64:	ea45 0504 	orr.w	r5, r5, r4
 801be68:	bf8c      	ite	hi
 801be6a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801be6e:	2400      	movls	r4, #0
 801be70:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801be74:	fa01 f000 	lsl.w	r0, r1, r0
 801be78:	fa24 f40c 	lsr.w	r4, r4, ip
 801be7c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801be80:	ea40 0204 	orr.w	r2, r0, r4
 801be84:	e7db      	b.n	801be3e <__b2d+0x4a>
 801be86:	ea44 030c 	orr.w	r3, r4, ip
 801be8a:	460a      	mov	r2, r1
 801be8c:	e7d7      	b.n	801be3e <__b2d+0x4a>
 801be8e:	bf00      	nop
 801be90:	3ff00000 	.word	0x3ff00000

0801be94 <__d2b>:
 801be94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801be98:	4689      	mov	r9, r1
 801be9a:	2101      	movs	r1, #1
 801be9c:	ec57 6b10 	vmov	r6, r7, d0
 801bea0:	4690      	mov	r8, r2
 801bea2:	f7ff fc09 	bl	801b6b8 <_Balloc>
 801bea6:	4604      	mov	r4, r0
 801bea8:	b930      	cbnz	r0, 801beb8 <__d2b+0x24>
 801beaa:	4602      	mov	r2, r0
 801beac:	4b25      	ldr	r3, [pc, #148]	; (801bf44 <__d2b+0xb0>)
 801beae:	4826      	ldr	r0, [pc, #152]	; (801bf48 <__d2b+0xb4>)
 801beb0:	f240 310a 	movw	r1, #778	; 0x30a
 801beb4:	f000 fb36 	bl	801c524 <__assert_func>
 801beb8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801bebc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801bec0:	bb35      	cbnz	r5, 801bf10 <__d2b+0x7c>
 801bec2:	2e00      	cmp	r6, #0
 801bec4:	9301      	str	r3, [sp, #4]
 801bec6:	d028      	beq.n	801bf1a <__d2b+0x86>
 801bec8:	4668      	mov	r0, sp
 801beca:	9600      	str	r6, [sp, #0]
 801becc:	f7ff fd06 	bl	801b8dc <__lo0bits>
 801bed0:	9900      	ldr	r1, [sp, #0]
 801bed2:	b300      	cbz	r0, 801bf16 <__d2b+0x82>
 801bed4:	9a01      	ldr	r2, [sp, #4]
 801bed6:	f1c0 0320 	rsb	r3, r0, #32
 801beda:	fa02 f303 	lsl.w	r3, r2, r3
 801bede:	430b      	orrs	r3, r1
 801bee0:	40c2      	lsrs	r2, r0
 801bee2:	6163      	str	r3, [r4, #20]
 801bee4:	9201      	str	r2, [sp, #4]
 801bee6:	9b01      	ldr	r3, [sp, #4]
 801bee8:	61a3      	str	r3, [r4, #24]
 801beea:	2b00      	cmp	r3, #0
 801beec:	bf14      	ite	ne
 801beee:	2202      	movne	r2, #2
 801bef0:	2201      	moveq	r2, #1
 801bef2:	6122      	str	r2, [r4, #16]
 801bef4:	b1d5      	cbz	r5, 801bf2c <__d2b+0x98>
 801bef6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801befa:	4405      	add	r5, r0
 801befc:	f8c9 5000 	str.w	r5, [r9]
 801bf00:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801bf04:	f8c8 0000 	str.w	r0, [r8]
 801bf08:	4620      	mov	r0, r4
 801bf0a:	b003      	add	sp, #12
 801bf0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bf10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801bf14:	e7d5      	b.n	801bec2 <__d2b+0x2e>
 801bf16:	6161      	str	r1, [r4, #20]
 801bf18:	e7e5      	b.n	801bee6 <__d2b+0x52>
 801bf1a:	a801      	add	r0, sp, #4
 801bf1c:	f7ff fcde 	bl	801b8dc <__lo0bits>
 801bf20:	9b01      	ldr	r3, [sp, #4]
 801bf22:	6163      	str	r3, [r4, #20]
 801bf24:	2201      	movs	r2, #1
 801bf26:	6122      	str	r2, [r4, #16]
 801bf28:	3020      	adds	r0, #32
 801bf2a:	e7e3      	b.n	801bef4 <__d2b+0x60>
 801bf2c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801bf30:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801bf34:	f8c9 0000 	str.w	r0, [r9]
 801bf38:	6918      	ldr	r0, [r3, #16]
 801bf3a:	f7ff fcaf 	bl	801b89c <__hi0bits>
 801bf3e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801bf42:	e7df      	b.n	801bf04 <__d2b+0x70>
 801bf44:	0802ba28 	.word	0x0802ba28
 801bf48:	0802bab4 	.word	0x0802bab4

0801bf4c <__ratio>:
 801bf4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf50:	4688      	mov	r8, r1
 801bf52:	4669      	mov	r1, sp
 801bf54:	4681      	mov	r9, r0
 801bf56:	f7ff ff4d 	bl	801bdf4 <__b2d>
 801bf5a:	a901      	add	r1, sp, #4
 801bf5c:	4640      	mov	r0, r8
 801bf5e:	ec55 4b10 	vmov	r4, r5, d0
 801bf62:	ee10 aa10 	vmov	sl, s0
 801bf66:	f7ff ff45 	bl	801bdf4 <__b2d>
 801bf6a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801bf6e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801bf72:	1a59      	subs	r1, r3, r1
 801bf74:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bf78:	1ad3      	subs	r3, r2, r3
 801bf7a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801bf7e:	ec57 6b10 	vmov	r6, r7, d0
 801bf82:	2b00      	cmp	r3, #0
 801bf84:	bfd6      	itet	le
 801bf86:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801bf8a:	462a      	movgt	r2, r5
 801bf8c:	463a      	movle	r2, r7
 801bf8e:	46ab      	mov	fp, r5
 801bf90:	bfd6      	itet	le
 801bf92:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801bf96:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801bf9a:	ee00 3a90 	vmovle	s1, r3
 801bf9e:	ec4b ab17 	vmov	d7, sl, fp
 801bfa2:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801bfa6:	b003      	add	sp, #12
 801bfa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bfac <__copybits>:
 801bfac:	3901      	subs	r1, #1
 801bfae:	b570      	push	{r4, r5, r6, lr}
 801bfb0:	1149      	asrs	r1, r1, #5
 801bfb2:	6914      	ldr	r4, [r2, #16]
 801bfb4:	3101      	adds	r1, #1
 801bfb6:	f102 0314 	add.w	r3, r2, #20
 801bfba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801bfbe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801bfc2:	1f05      	subs	r5, r0, #4
 801bfc4:	42a3      	cmp	r3, r4
 801bfc6:	d30c      	bcc.n	801bfe2 <__copybits+0x36>
 801bfc8:	1aa3      	subs	r3, r4, r2
 801bfca:	3b11      	subs	r3, #17
 801bfcc:	f023 0303 	bic.w	r3, r3, #3
 801bfd0:	3211      	adds	r2, #17
 801bfd2:	42a2      	cmp	r2, r4
 801bfd4:	bf88      	it	hi
 801bfd6:	2300      	movhi	r3, #0
 801bfd8:	4418      	add	r0, r3
 801bfda:	2300      	movs	r3, #0
 801bfdc:	4288      	cmp	r0, r1
 801bfde:	d305      	bcc.n	801bfec <__copybits+0x40>
 801bfe0:	bd70      	pop	{r4, r5, r6, pc}
 801bfe2:	f853 6b04 	ldr.w	r6, [r3], #4
 801bfe6:	f845 6f04 	str.w	r6, [r5, #4]!
 801bfea:	e7eb      	b.n	801bfc4 <__copybits+0x18>
 801bfec:	f840 3b04 	str.w	r3, [r0], #4
 801bff0:	e7f4      	b.n	801bfdc <__copybits+0x30>

0801bff2 <__any_on>:
 801bff2:	f100 0214 	add.w	r2, r0, #20
 801bff6:	6900      	ldr	r0, [r0, #16]
 801bff8:	114b      	asrs	r3, r1, #5
 801bffa:	4298      	cmp	r0, r3
 801bffc:	b510      	push	{r4, lr}
 801bffe:	db11      	blt.n	801c024 <__any_on+0x32>
 801c000:	dd0a      	ble.n	801c018 <__any_on+0x26>
 801c002:	f011 011f 	ands.w	r1, r1, #31
 801c006:	d007      	beq.n	801c018 <__any_on+0x26>
 801c008:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801c00c:	fa24 f001 	lsr.w	r0, r4, r1
 801c010:	fa00 f101 	lsl.w	r1, r0, r1
 801c014:	428c      	cmp	r4, r1
 801c016:	d10b      	bne.n	801c030 <__any_on+0x3e>
 801c018:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c01c:	4293      	cmp	r3, r2
 801c01e:	d803      	bhi.n	801c028 <__any_on+0x36>
 801c020:	2000      	movs	r0, #0
 801c022:	bd10      	pop	{r4, pc}
 801c024:	4603      	mov	r3, r0
 801c026:	e7f7      	b.n	801c018 <__any_on+0x26>
 801c028:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801c02c:	2900      	cmp	r1, #0
 801c02e:	d0f5      	beq.n	801c01c <__any_on+0x2a>
 801c030:	2001      	movs	r0, #1
 801c032:	e7f6      	b.n	801c022 <__any_on+0x30>

0801c034 <_calloc_r>:
 801c034:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c036:	fba1 2402 	umull	r2, r4, r1, r2
 801c03a:	b94c      	cbnz	r4, 801c050 <_calloc_r+0x1c>
 801c03c:	4611      	mov	r1, r2
 801c03e:	9201      	str	r2, [sp, #4]
 801c040:	f000 f87a 	bl	801c138 <_malloc_r>
 801c044:	9a01      	ldr	r2, [sp, #4]
 801c046:	4605      	mov	r5, r0
 801c048:	b930      	cbnz	r0, 801c058 <_calloc_r+0x24>
 801c04a:	4628      	mov	r0, r5
 801c04c:	b003      	add	sp, #12
 801c04e:	bd30      	pop	{r4, r5, pc}
 801c050:	220c      	movs	r2, #12
 801c052:	6002      	str	r2, [r0, #0]
 801c054:	2500      	movs	r5, #0
 801c056:	e7f8      	b.n	801c04a <_calloc_r+0x16>
 801c058:	4621      	mov	r1, r4
 801c05a:	f7fc fca9 	bl	80189b0 <memset>
 801c05e:	e7f4      	b.n	801c04a <_calloc_r+0x16>

0801c060 <_free_r>:
 801c060:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c062:	2900      	cmp	r1, #0
 801c064:	d044      	beq.n	801c0f0 <_free_r+0x90>
 801c066:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c06a:	9001      	str	r0, [sp, #4]
 801c06c:	2b00      	cmp	r3, #0
 801c06e:	f1a1 0404 	sub.w	r4, r1, #4
 801c072:	bfb8      	it	lt
 801c074:	18e4      	addlt	r4, r4, r3
 801c076:	f000 fa9f 	bl	801c5b8 <__malloc_lock>
 801c07a:	4a1e      	ldr	r2, [pc, #120]	; (801c0f4 <_free_r+0x94>)
 801c07c:	9801      	ldr	r0, [sp, #4]
 801c07e:	6813      	ldr	r3, [r2, #0]
 801c080:	b933      	cbnz	r3, 801c090 <_free_r+0x30>
 801c082:	6063      	str	r3, [r4, #4]
 801c084:	6014      	str	r4, [r2, #0]
 801c086:	b003      	add	sp, #12
 801c088:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c08c:	f000 ba9a 	b.w	801c5c4 <__malloc_unlock>
 801c090:	42a3      	cmp	r3, r4
 801c092:	d908      	bls.n	801c0a6 <_free_r+0x46>
 801c094:	6825      	ldr	r5, [r4, #0]
 801c096:	1961      	adds	r1, r4, r5
 801c098:	428b      	cmp	r3, r1
 801c09a:	bf01      	itttt	eq
 801c09c:	6819      	ldreq	r1, [r3, #0]
 801c09e:	685b      	ldreq	r3, [r3, #4]
 801c0a0:	1949      	addeq	r1, r1, r5
 801c0a2:	6021      	streq	r1, [r4, #0]
 801c0a4:	e7ed      	b.n	801c082 <_free_r+0x22>
 801c0a6:	461a      	mov	r2, r3
 801c0a8:	685b      	ldr	r3, [r3, #4]
 801c0aa:	b10b      	cbz	r3, 801c0b0 <_free_r+0x50>
 801c0ac:	42a3      	cmp	r3, r4
 801c0ae:	d9fa      	bls.n	801c0a6 <_free_r+0x46>
 801c0b0:	6811      	ldr	r1, [r2, #0]
 801c0b2:	1855      	adds	r5, r2, r1
 801c0b4:	42a5      	cmp	r5, r4
 801c0b6:	d10b      	bne.n	801c0d0 <_free_r+0x70>
 801c0b8:	6824      	ldr	r4, [r4, #0]
 801c0ba:	4421      	add	r1, r4
 801c0bc:	1854      	adds	r4, r2, r1
 801c0be:	42a3      	cmp	r3, r4
 801c0c0:	6011      	str	r1, [r2, #0]
 801c0c2:	d1e0      	bne.n	801c086 <_free_r+0x26>
 801c0c4:	681c      	ldr	r4, [r3, #0]
 801c0c6:	685b      	ldr	r3, [r3, #4]
 801c0c8:	6053      	str	r3, [r2, #4]
 801c0ca:	4421      	add	r1, r4
 801c0cc:	6011      	str	r1, [r2, #0]
 801c0ce:	e7da      	b.n	801c086 <_free_r+0x26>
 801c0d0:	d902      	bls.n	801c0d8 <_free_r+0x78>
 801c0d2:	230c      	movs	r3, #12
 801c0d4:	6003      	str	r3, [r0, #0]
 801c0d6:	e7d6      	b.n	801c086 <_free_r+0x26>
 801c0d8:	6825      	ldr	r5, [r4, #0]
 801c0da:	1961      	adds	r1, r4, r5
 801c0dc:	428b      	cmp	r3, r1
 801c0de:	bf04      	itt	eq
 801c0e0:	6819      	ldreq	r1, [r3, #0]
 801c0e2:	685b      	ldreq	r3, [r3, #4]
 801c0e4:	6063      	str	r3, [r4, #4]
 801c0e6:	bf04      	itt	eq
 801c0e8:	1949      	addeq	r1, r1, r5
 801c0ea:	6021      	streq	r1, [r4, #0]
 801c0ec:	6054      	str	r4, [r2, #4]
 801c0ee:	e7ca      	b.n	801c086 <_free_r+0x26>
 801c0f0:	b003      	add	sp, #12
 801c0f2:	bd30      	pop	{r4, r5, pc}
 801c0f4:	2006cd00 	.word	0x2006cd00

0801c0f8 <sbrk_aligned>:
 801c0f8:	b570      	push	{r4, r5, r6, lr}
 801c0fa:	4e0e      	ldr	r6, [pc, #56]	; (801c134 <sbrk_aligned+0x3c>)
 801c0fc:	460c      	mov	r4, r1
 801c0fe:	6831      	ldr	r1, [r6, #0]
 801c100:	4605      	mov	r5, r0
 801c102:	b911      	cbnz	r1, 801c10a <sbrk_aligned+0x12>
 801c104:	f000 f9f0 	bl	801c4e8 <_sbrk_r>
 801c108:	6030      	str	r0, [r6, #0]
 801c10a:	4621      	mov	r1, r4
 801c10c:	4628      	mov	r0, r5
 801c10e:	f000 f9eb 	bl	801c4e8 <_sbrk_r>
 801c112:	1c43      	adds	r3, r0, #1
 801c114:	d00a      	beq.n	801c12c <sbrk_aligned+0x34>
 801c116:	1cc4      	adds	r4, r0, #3
 801c118:	f024 0403 	bic.w	r4, r4, #3
 801c11c:	42a0      	cmp	r0, r4
 801c11e:	d007      	beq.n	801c130 <sbrk_aligned+0x38>
 801c120:	1a21      	subs	r1, r4, r0
 801c122:	4628      	mov	r0, r5
 801c124:	f000 f9e0 	bl	801c4e8 <_sbrk_r>
 801c128:	3001      	adds	r0, #1
 801c12a:	d101      	bne.n	801c130 <sbrk_aligned+0x38>
 801c12c:	f04f 34ff 	mov.w	r4, #4294967295
 801c130:	4620      	mov	r0, r4
 801c132:	bd70      	pop	{r4, r5, r6, pc}
 801c134:	2006cd04 	.word	0x2006cd04

0801c138 <_malloc_r>:
 801c138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c13c:	1ccd      	adds	r5, r1, #3
 801c13e:	f025 0503 	bic.w	r5, r5, #3
 801c142:	3508      	adds	r5, #8
 801c144:	2d0c      	cmp	r5, #12
 801c146:	bf38      	it	cc
 801c148:	250c      	movcc	r5, #12
 801c14a:	2d00      	cmp	r5, #0
 801c14c:	4607      	mov	r7, r0
 801c14e:	db01      	blt.n	801c154 <_malloc_r+0x1c>
 801c150:	42a9      	cmp	r1, r5
 801c152:	d905      	bls.n	801c160 <_malloc_r+0x28>
 801c154:	230c      	movs	r3, #12
 801c156:	603b      	str	r3, [r7, #0]
 801c158:	2600      	movs	r6, #0
 801c15a:	4630      	mov	r0, r6
 801c15c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c160:	4e2e      	ldr	r6, [pc, #184]	; (801c21c <_malloc_r+0xe4>)
 801c162:	f000 fa29 	bl	801c5b8 <__malloc_lock>
 801c166:	6833      	ldr	r3, [r6, #0]
 801c168:	461c      	mov	r4, r3
 801c16a:	bb34      	cbnz	r4, 801c1ba <_malloc_r+0x82>
 801c16c:	4629      	mov	r1, r5
 801c16e:	4638      	mov	r0, r7
 801c170:	f7ff ffc2 	bl	801c0f8 <sbrk_aligned>
 801c174:	1c43      	adds	r3, r0, #1
 801c176:	4604      	mov	r4, r0
 801c178:	d14d      	bne.n	801c216 <_malloc_r+0xde>
 801c17a:	6834      	ldr	r4, [r6, #0]
 801c17c:	4626      	mov	r6, r4
 801c17e:	2e00      	cmp	r6, #0
 801c180:	d140      	bne.n	801c204 <_malloc_r+0xcc>
 801c182:	6823      	ldr	r3, [r4, #0]
 801c184:	4631      	mov	r1, r6
 801c186:	4638      	mov	r0, r7
 801c188:	eb04 0803 	add.w	r8, r4, r3
 801c18c:	f000 f9ac 	bl	801c4e8 <_sbrk_r>
 801c190:	4580      	cmp	r8, r0
 801c192:	d13a      	bne.n	801c20a <_malloc_r+0xd2>
 801c194:	6821      	ldr	r1, [r4, #0]
 801c196:	3503      	adds	r5, #3
 801c198:	1a6d      	subs	r5, r5, r1
 801c19a:	f025 0503 	bic.w	r5, r5, #3
 801c19e:	3508      	adds	r5, #8
 801c1a0:	2d0c      	cmp	r5, #12
 801c1a2:	bf38      	it	cc
 801c1a4:	250c      	movcc	r5, #12
 801c1a6:	4629      	mov	r1, r5
 801c1a8:	4638      	mov	r0, r7
 801c1aa:	f7ff ffa5 	bl	801c0f8 <sbrk_aligned>
 801c1ae:	3001      	adds	r0, #1
 801c1b0:	d02b      	beq.n	801c20a <_malloc_r+0xd2>
 801c1b2:	6823      	ldr	r3, [r4, #0]
 801c1b4:	442b      	add	r3, r5
 801c1b6:	6023      	str	r3, [r4, #0]
 801c1b8:	e00e      	b.n	801c1d8 <_malloc_r+0xa0>
 801c1ba:	6822      	ldr	r2, [r4, #0]
 801c1bc:	1b52      	subs	r2, r2, r5
 801c1be:	d41e      	bmi.n	801c1fe <_malloc_r+0xc6>
 801c1c0:	2a0b      	cmp	r2, #11
 801c1c2:	d916      	bls.n	801c1f2 <_malloc_r+0xba>
 801c1c4:	1961      	adds	r1, r4, r5
 801c1c6:	42a3      	cmp	r3, r4
 801c1c8:	6025      	str	r5, [r4, #0]
 801c1ca:	bf18      	it	ne
 801c1cc:	6059      	strne	r1, [r3, #4]
 801c1ce:	6863      	ldr	r3, [r4, #4]
 801c1d0:	bf08      	it	eq
 801c1d2:	6031      	streq	r1, [r6, #0]
 801c1d4:	5162      	str	r2, [r4, r5]
 801c1d6:	604b      	str	r3, [r1, #4]
 801c1d8:	4638      	mov	r0, r7
 801c1da:	f104 060b 	add.w	r6, r4, #11
 801c1de:	f000 f9f1 	bl	801c5c4 <__malloc_unlock>
 801c1e2:	f026 0607 	bic.w	r6, r6, #7
 801c1e6:	1d23      	adds	r3, r4, #4
 801c1e8:	1af2      	subs	r2, r6, r3
 801c1ea:	d0b6      	beq.n	801c15a <_malloc_r+0x22>
 801c1ec:	1b9b      	subs	r3, r3, r6
 801c1ee:	50a3      	str	r3, [r4, r2]
 801c1f0:	e7b3      	b.n	801c15a <_malloc_r+0x22>
 801c1f2:	6862      	ldr	r2, [r4, #4]
 801c1f4:	42a3      	cmp	r3, r4
 801c1f6:	bf0c      	ite	eq
 801c1f8:	6032      	streq	r2, [r6, #0]
 801c1fa:	605a      	strne	r2, [r3, #4]
 801c1fc:	e7ec      	b.n	801c1d8 <_malloc_r+0xa0>
 801c1fe:	4623      	mov	r3, r4
 801c200:	6864      	ldr	r4, [r4, #4]
 801c202:	e7b2      	b.n	801c16a <_malloc_r+0x32>
 801c204:	4634      	mov	r4, r6
 801c206:	6876      	ldr	r6, [r6, #4]
 801c208:	e7b9      	b.n	801c17e <_malloc_r+0x46>
 801c20a:	230c      	movs	r3, #12
 801c20c:	603b      	str	r3, [r7, #0]
 801c20e:	4638      	mov	r0, r7
 801c210:	f000 f9d8 	bl	801c5c4 <__malloc_unlock>
 801c214:	e7a1      	b.n	801c15a <_malloc_r+0x22>
 801c216:	6025      	str	r5, [r4, #0]
 801c218:	e7de      	b.n	801c1d8 <_malloc_r+0xa0>
 801c21a:	bf00      	nop
 801c21c:	2006cd00 	.word	0x2006cd00

0801c220 <__ssputs_r>:
 801c220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c224:	688e      	ldr	r6, [r1, #8]
 801c226:	429e      	cmp	r6, r3
 801c228:	4682      	mov	sl, r0
 801c22a:	460c      	mov	r4, r1
 801c22c:	4690      	mov	r8, r2
 801c22e:	461f      	mov	r7, r3
 801c230:	d838      	bhi.n	801c2a4 <__ssputs_r+0x84>
 801c232:	898a      	ldrh	r2, [r1, #12]
 801c234:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801c238:	d032      	beq.n	801c2a0 <__ssputs_r+0x80>
 801c23a:	6825      	ldr	r5, [r4, #0]
 801c23c:	6909      	ldr	r1, [r1, #16]
 801c23e:	eba5 0901 	sub.w	r9, r5, r1
 801c242:	6965      	ldr	r5, [r4, #20]
 801c244:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c248:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801c24c:	3301      	adds	r3, #1
 801c24e:	444b      	add	r3, r9
 801c250:	106d      	asrs	r5, r5, #1
 801c252:	429d      	cmp	r5, r3
 801c254:	bf38      	it	cc
 801c256:	461d      	movcc	r5, r3
 801c258:	0553      	lsls	r3, r2, #21
 801c25a:	d531      	bpl.n	801c2c0 <__ssputs_r+0xa0>
 801c25c:	4629      	mov	r1, r5
 801c25e:	f7ff ff6b 	bl	801c138 <_malloc_r>
 801c262:	4606      	mov	r6, r0
 801c264:	b950      	cbnz	r0, 801c27c <__ssputs_r+0x5c>
 801c266:	230c      	movs	r3, #12
 801c268:	f8ca 3000 	str.w	r3, [sl]
 801c26c:	89a3      	ldrh	r3, [r4, #12]
 801c26e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c272:	81a3      	strh	r3, [r4, #12]
 801c274:	f04f 30ff 	mov.w	r0, #4294967295
 801c278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c27c:	6921      	ldr	r1, [r4, #16]
 801c27e:	464a      	mov	r2, r9
 801c280:	f7fc fb88 	bl	8018994 <memcpy>
 801c284:	89a3      	ldrh	r3, [r4, #12]
 801c286:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801c28a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c28e:	81a3      	strh	r3, [r4, #12]
 801c290:	6126      	str	r6, [r4, #16]
 801c292:	6165      	str	r5, [r4, #20]
 801c294:	444e      	add	r6, r9
 801c296:	eba5 0509 	sub.w	r5, r5, r9
 801c29a:	6026      	str	r6, [r4, #0]
 801c29c:	60a5      	str	r5, [r4, #8]
 801c29e:	463e      	mov	r6, r7
 801c2a0:	42be      	cmp	r6, r7
 801c2a2:	d900      	bls.n	801c2a6 <__ssputs_r+0x86>
 801c2a4:	463e      	mov	r6, r7
 801c2a6:	6820      	ldr	r0, [r4, #0]
 801c2a8:	4632      	mov	r2, r6
 801c2aa:	4641      	mov	r1, r8
 801c2ac:	f000 f96a 	bl	801c584 <memmove>
 801c2b0:	68a3      	ldr	r3, [r4, #8]
 801c2b2:	1b9b      	subs	r3, r3, r6
 801c2b4:	60a3      	str	r3, [r4, #8]
 801c2b6:	6823      	ldr	r3, [r4, #0]
 801c2b8:	4433      	add	r3, r6
 801c2ba:	6023      	str	r3, [r4, #0]
 801c2bc:	2000      	movs	r0, #0
 801c2be:	e7db      	b.n	801c278 <__ssputs_r+0x58>
 801c2c0:	462a      	mov	r2, r5
 801c2c2:	f000 f985 	bl	801c5d0 <_realloc_r>
 801c2c6:	4606      	mov	r6, r0
 801c2c8:	2800      	cmp	r0, #0
 801c2ca:	d1e1      	bne.n	801c290 <__ssputs_r+0x70>
 801c2cc:	6921      	ldr	r1, [r4, #16]
 801c2ce:	4650      	mov	r0, sl
 801c2d0:	f7ff fec6 	bl	801c060 <_free_r>
 801c2d4:	e7c7      	b.n	801c266 <__ssputs_r+0x46>
	...

0801c2d8 <_svfiprintf_r>:
 801c2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2dc:	4698      	mov	r8, r3
 801c2de:	898b      	ldrh	r3, [r1, #12]
 801c2e0:	061b      	lsls	r3, r3, #24
 801c2e2:	b09d      	sub	sp, #116	; 0x74
 801c2e4:	4607      	mov	r7, r0
 801c2e6:	460d      	mov	r5, r1
 801c2e8:	4614      	mov	r4, r2
 801c2ea:	d50e      	bpl.n	801c30a <_svfiprintf_r+0x32>
 801c2ec:	690b      	ldr	r3, [r1, #16]
 801c2ee:	b963      	cbnz	r3, 801c30a <_svfiprintf_r+0x32>
 801c2f0:	2140      	movs	r1, #64	; 0x40
 801c2f2:	f7ff ff21 	bl	801c138 <_malloc_r>
 801c2f6:	6028      	str	r0, [r5, #0]
 801c2f8:	6128      	str	r0, [r5, #16]
 801c2fa:	b920      	cbnz	r0, 801c306 <_svfiprintf_r+0x2e>
 801c2fc:	230c      	movs	r3, #12
 801c2fe:	603b      	str	r3, [r7, #0]
 801c300:	f04f 30ff 	mov.w	r0, #4294967295
 801c304:	e0d1      	b.n	801c4aa <_svfiprintf_r+0x1d2>
 801c306:	2340      	movs	r3, #64	; 0x40
 801c308:	616b      	str	r3, [r5, #20]
 801c30a:	2300      	movs	r3, #0
 801c30c:	9309      	str	r3, [sp, #36]	; 0x24
 801c30e:	2320      	movs	r3, #32
 801c310:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c314:	f8cd 800c 	str.w	r8, [sp, #12]
 801c318:	2330      	movs	r3, #48	; 0x30
 801c31a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801c4c4 <_svfiprintf_r+0x1ec>
 801c31e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c322:	f04f 0901 	mov.w	r9, #1
 801c326:	4623      	mov	r3, r4
 801c328:	469a      	mov	sl, r3
 801c32a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c32e:	b10a      	cbz	r2, 801c334 <_svfiprintf_r+0x5c>
 801c330:	2a25      	cmp	r2, #37	; 0x25
 801c332:	d1f9      	bne.n	801c328 <_svfiprintf_r+0x50>
 801c334:	ebba 0b04 	subs.w	fp, sl, r4
 801c338:	d00b      	beq.n	801c352 <_svfiprintf_r+0x7a>
 801c33a:	465b      	mov	r3, fp
 801c33c:	4622      	mov	r2, r4
 801c33e:	4629      	mov	r1, r5
 801c340:	4638      	mov	r0, r7
 801c342:	f7ff ff6d 	bl	801c220 <__ssputs_r>
 801c346:	3001      	adds	r0, #1
 801c348:	f000 80aa 	beq.w	801c4a0 <_svfiprintf_r+0x1c8>
 801c34c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c34e:	445a      	add	r2, fp
 801c350:	9209      	str	r2, [sp, #36]	; 0x24
 801c352:	f89a 3000 	ldrb.w	r3, [sl]
 801c356:	2b00      	cmp	r3, #0
 801c358:	f000 80a2 	beq.w	801c4a0 <_svfiprintf_r+0x1c8>
 801c35c:	2300      	movs	r3, #0
 801c35e:	f04f 32ff 	mov.w	r2, #4294967295
 801c362:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c366:	f10a 0a01 	add.w	sl, sl, #1
 801c36a:	9304      	str	r3, [sp, #16]
 801c36c:	9307      	str	r3, [sp, #28]
 801c36e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c372:	931a      	str	r3, [sp, #104]	; 0x68
 801c374:	4654      	mov	r4, sl
 801c376:	2205      	movs	r2, #5
 801c378:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c37c:	4851      	ldr	r0, [pc, #324]	; (801c4c4 <_svfiprintf_r+0x1ec>)
 801c37e:	f7eb ffc7 	bl	8008310 <memchr>
 801c382:	9a04      	ldr	r2, [sp, #16]
 801c384:	b9d8      	cbnz	r0, 801c3be <_svfiprintf_r+0xe6>
 801c386:	06d0      	lsls	r0, r2, #27
 801c388:	bf44      	itt	mi
 801c38a:	2320      	movmi	r3, #32
 801c38c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c390:	0711      	lsls	r1, r2, #28
 801c392:	bf44      	itt	mi
 801c394:	232b      	movmi	r3, #43	; 0x2b
 801c396:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c39a:	f89a 3000 	ldrb.w	r3, [sl]
 801c39e:	2b2a      	cmp	r3, #42	; 0x2a
 801c3a0:	d015      	beq.n	801c3ce <_svfiprintf_r+0xf6>
 801c3a2:	9a07      	ldr	r2, [sp, #28]
 801c3a4:	4654      	mov	r4, sl
 801c3a6:	2000      	movs	r0, #0
 801c3a8:	f04f 0c0a 	mov.w	ip, #10
 801c3ac:	4621      	mov	r1, r4
 801c3ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c3b2:	3b30      	subs	r3, #48	; 0x30
 801c3b4:	2b09      	cmp	r3, #9
 801c3b6:	d94e      	bls.n	801c456 <_svfiprintf_r+0x17e>
 801c3b8:	b1b0      	cbz	r0, 801c3e8 <_svfiprintf_r+0x110>
 801c3ba:	9207      	str	r2, [sp, #28]
 801c3bc:	e014      	b.n	801c3e8 <_svfiprintf_r+0x110>
 801c3be:	eba0 0308 	sub.w	r3, r0, r8
 801c3c2:	fa09 f303 	lsl.w	r3, r9, r3
 801c3c6:	4313      	orrs	r3, r2
 801c3c8:	9304      	str	r3, [sp, #16]
 801c3ca:	46a2      	mov	sl, r4
 801c3cc:	e7d2      	b.n	801c374 <_svfiprintf_r+0x9c>
 801c3ce:	9b03      	ldr	r3, [sp, #12]
 801c3d0:	1d19      	adds	r1, r3, #4
 801c3d2:	681b      	ldr	r3, [r3, #0]
 801c3d4:	9103      	str	r1, [sp, #12]
 801c3d6:	2b00      	cmp	r3, #0
 801c3d8:	bfbb      	ittet	lt
 801c3da:	425b      	neglt	r3, r3
 801c3dc:	f042 0202 	orrlt.w	r2, r2, #2
 801c3e0:	9307      	strge	r3, [sp, #28]
 801c3e2:	9307      	strlt	r3, [sp, #28]
 801c3e4:	bfb8      	it	lt
 801c3e6:	9204      	strlt	r2, [sp, #16]
 801c3e8:	7823      	ldrb	r3, [r4, #0]
 801c3ea:	2b2e      	cmp	r3, #46	; 0x2e
 801c3ec:	d10c      	bne.n	801c408 <_svfiprintf_r+0x130>
 801c3ee:	7863      	ldrb	r3, [r4, #1]
 801c3f0:	2b2a      	cmp	r3, #42	; 0x2a
 801c3f2:	d135      	bne.n	801c460 <_svfiprintf_r+0x188>
 801c3f4:	9b03      	ldr	r3, [sp, #12]
 801c3f6:	1d1a      	adds	r2, r3, #4
 801c3f8:	681b      	ldr	r3, [r3, #0]
 801c3fa:	9203      	str	r2, [sp, #12]
 801c3fc:	2b00      	cmp	r3, #0
 801c3fe:	bfb8      	it	lt
 801c400:	f04f 33ff 	movlt.w	r3, #4294967295
 801c404:	3402      	adds	r4, #2
 801c406:	9305      	str	r3, [sp, #20]
 801c408:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801c4d4 <_svfiprintf_r+0x1fc>
 801c40c:	7821      	ldrb	r1, [r4, #0]
 801c40e:	2203      	movs	r2, #3
 801c410:	4650      	mov	r0, sl
 801c412:	f7eb ff7d 	bl	8008310 <memchr>
 801c416:	b140      	cbz	r0, 801c42a <_svfiprintf_r+0x152>
 801c418:	2340      	movs	r3, #64	; 0x40
 801c41a:	eba0 000a 	sub.w	r0, r0, sl
 801c41e:	fa03 f000 	lsl.w	r0, r3, r0
 801c422:	9b04      	ldr	r3, [sp, #16]
 801c424:	4303      	orrs	r3, r0
 801c426:	3401      	adds	r4, #1
 801c428:	9304      	str	r3, [sp, #16]
 801c42a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c42e:	4826      	ldr	r0, [pc, #152]	; (801c4c8 <_svfiprintf_r+0x1f0>)
 801c430:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c434:	2206      	movs	r2, #6
 801c436:	f7eb ff6b 	bl	8008310 <memchr>
 801c43a:	2800      	cmp	r0, #0
 801c43c:	d038      	beq.n	801c4b0 <_svfiprintf_r+0x1d8>
 801c43e:	4b23      	ldr	r3, [pc, #140]	; (801c4cc <_svfiprintf_r+0x1f4>)
 801c440:	bb1b      	cbnz	r3, 801c48a <_svfiprintf_r+0x1b2>
 801c442:	9b03      	ldr	r3, [sp, #12]
 801c444:	3307      	adds	r3, #7
 801c446:	f023 0307 	bic.w	r3, r3, #7
 801c44a:	3308      	adds	r3, #8
 801c44c:	9303      	str	r3, [sp, #12]
 801c44e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c450:	4433      	add	r3, r6
 801c452:	9309      	str	r3, [sp, #36]	; 0x24
 801c454:	e767      	b.n	801c326 <_svfiprintf_r+0x4e>
 801c456:	fb0c 3202 	mla	r2, ip, r2, r3
 801c45a:	460c      	mov	r4, r1
 801c45c:	2001      	movs	r0, #1
 801c45e:	e7a5      	b.n	801c3ac <_svfiprintf_r+0xd4>
 801c460:	2300      	movs	r3, #0
 801c462:	3401      	adds	r4, #1
 801c464:	9305      	str	r3, [sp, #20]
 801c466:	4619      	mov	r1, r3
 801c468:	f04f 0c0a 	mov.w	ip, #10
 801c46c:	4620      	mov	r0, r4
 801c46e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c472:	3a30      	subs	r2, #48	; 0x30
 801c474:	2a09      	cmp	r2, #9
 801c476:	d903      	bls.n	801c480 <_svfiprintf_r+0x1a8>
 801c478:	2b00      	cmp	r3, #0
 801c47a:	d0c5      	beq.n	801c408 <_svfiprintf_r+0x130>
 801c47c:	9105      	str	r1, [sp, #20]
 801c47e:	e7c3      	b.n	801c408 <_svfiprintf_r+0x130>
 801c480:	fb0c 2101 	mla	r1, ip, r1, r2
 801c484:	4604      	mov	r4, r0
 801c486:	2301      	movs	r3, #1
 801c488:	e7f0      	b.n	801c46c <_svfiprintf_r+0x194>
 801c48a:	ab03      	add	r3, sp, #12
 801c48c:	9300      	str	r3, [sp, #0]
 801c48e:	462a      	mov	r2, r5
 801c490:	4b0f      	ldr	r3, [pc, #60]	; (801c4d0 <_svfiprintf_r+0x1f8>)
 801c492:	a904      	add	r1, sp, #16
 801c494:	4638      	mov	r0, r7
 801c496:	f7fc fb23 	bl	8018ae0 <_printf_float>
 801c49a:	1c42      	adds	r2, r0, #1
 801c49c:	4606      	mov	r6, r0
 801c49e:	d1d6      	bne.n	801c44e <_svfiprintf_r+0x176>
 801c4a0:	89ab      	ldrh	r3, [r5, #12]
 801c4a2:	065b      	lsls	r3, r3, #25
 801c4a4:	f53f af2c 	bmi.w	801c300 <_svfiprintf_r+0x28>
 801c4a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c4aa:	b01d      	add	sp, #116	; 0x74
 801c4ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c4b0:	ab03      	add	r3, sp, #12
 801c4b2:	9300      	str	r3, [sp, #0]
 801c4b4:	462a      	mov	r2, r5
 801c4b6:	4b06      	ldr	r3, [pc, #24]	; (801c4d0 <_svfiprintf_r+0x1f8>)
 801c4b8:	a904      	add	r1, sp, #16
 801c4ba:	4638      	mov	r0, r7
 801c4bc:	f7fc fd9c 	bl	8018ff8 <_printf_i>
 801c4c0:	e7eb      	b.n	801c49a <_svfiprintf_r+0x1c2>
 801c4c2:	bf00      	nop
 801c4c4:	0802bc0c 	.word	0x0802bc0c
 801c4c8:	0802bc16 	.word	0x0802bc16
 801c4cc:	08018ae1 	.word	0x08018ae1
 801c4d0:	0801c221 	.word	0x0801c221
 801c4d4:	0802bc12 	.word	0x0802bc12

0801c4d8 <nan>:
 801c4d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801c4e0 <nan+0x8>
 801c4dc:	4770      	bx	lr
 801c4de:	bf00      	nop
 801c4e0:	00000000 	.word	0x00000000
 801c4e4:	7ff80000 	.word	0x7ff80000

0801c4e8 <_sbrk_r>:
 801c4e8:	b538      	push	{r3, r4, r5, lr}
 801c4ea:	4d06      	ldr	r5, [pc, #24]	; (801c504 <_sbrk_r+0x1c>)
 801c4ec:	2300      	movs	r3, #0
 801c4ee:	4604      	mov	r4, r0
 801c4f0:	4608      	mov	r0, r1
 801c4f2:	602b      	str	r3, [r5, #0]
 801c4f4:	f7f3 fd20 	bl	800ff38 <_sbrk>
 801c4f8:	1c43      	adds	r3, r0, #1
 801c4fa:	d102      	bne.n	801c502 <_sbrk_r+0x1a>
 801c4fc:	682b      	ldr	r3, [r5, #0]
 801c4fe:	b103      	cbz	r3, 801c502 <_sbrk_r+0x1a>
 801c500:	6023      	str	r3, [r4, #0]
 801c502:	bd38      	pop	{r3, r4, r5, pc}
 801c504:	2006cd08 	.word	0x2006cd08

0801c508 <__ascii_wctomb>:
 801c508:	b149      	cbz	r1, 801c51e <__ascii_wctomb+0x16>
 801c50a:	2aff      	cmp	r2, #255	; 0xff
 801c50c:	bf85      	ittet	hi
 801c50e:	238a      	movhi	r3, #138	; 0x8a
 801c510:	6003      	strhi	r3, [r0, #0]
 801c512:	700a      	strbls	r2, [r1, #0]
 801c514:	f04f 30ff 	movhi.w	r0, #4294967295
 801c518:	bf98      	it	ls
 801c51a:	2001      	movls	r0, #1
 801c51c:	4770      	bx	lr
 801c51e:	4608      	mov	r0, r1
 801c520:	4770      	bx	lr
	...

0801c524 <__assert_func>:
 801c524:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c526:	4614      	mov	r4, r2
 801c528:	461a      	mov	r2, r3
 801c52a:	4b09      	ldr	r3, [pc, #36]	; (801c550 <__assert_func+0x2c>)
 801c52c:	681b      	ldr	r3, [r3, #0]
 801c52e:	4605      	mov	r5, r0
 801c530:	68d8      	ldr	r0, [r3, #12]
 801c532:	b14c      	cbz	r4, 801c548 <__assert_func+0x24>
 801c534:	4b07      	ldr	r3, [pc, #28]	; (801c554 <__assert_func+0x30>)
 801c536:	9100      	str	r1, [sp, #0]
 801c538:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c53c:	4906      	ldr	r1, [pc, #24]	; (801c558 <__assert_func+0x34>)
 801c53e:	462b      	mov	r3, r5
 801c540:	f000 f80e 	bl	801c560 <fiprintf>
 801c544:	f000 fa8c 	bl	801ca60 <abort>
 801c548:	4b04      	ldr	r3, [pc, #16]	; (801c55c <__assert_func+0x38>)
 801c54a:	461c      	mov	r4, r3
 801c54c:	e7f3      	b.n	801c536 <__assert_func+0x12>
 801c54e:	bf00      	nop
 801c550:	20000028 	.word	0x20000028
 801c554:	0802bc1d 	.word	0x0802bc1d
 801c558:	0802bc2a 	.word	0x0802bc2a
 801c55c:	0802bc58 	.word	0x0802bc58

0801c560 <fiprintf>:
 801c560:	b40e      	push	{r1, r2, r3}
 801c562:	b503      	push	{r0, r1, lr}
 801c564:	4601      	mov	r1, r0
 801c566:	ab03      	add	r3, sp, #12
 801c568:	4805      	ldr	r0, [pc, #20]	; (801c580 <fiprintf+0x20>)
 801c56a:	f853 2b04 	ldr.w	r2, [r3], #4
 801c56e:	6800      	ldr	r0, [r0, #0]
 801c570:	9301      	str	r3, [sp, #4]
 801c572:	f000 f885 	bl	801c680 <_vfiprintf_r>
 801c576:	b002      	add	sp, #8
 801c578:	f85d eb04 	ldr.w	lr, [sp], #4
 801c57c:	b003      	add	sp, #12
 801c57e:	4770      	bx	lr
 801c580:	20000028 	.word	0x20000028

0801c584 <memmove>:
 801c584:	4288      	cmp	r0, r1
 801c586:	b510      	push	{r4, lr}
 801c588:	eb01 0402 	add.w	r4, r1, r2
 801c58c:	d902      	bls.n	801c594 <memmove+0x10>
 801c58e:	4284      	cmp	r4, r0
 801c590:	4623      	mov	r3, r4
 801c592:	d807      	bhi.n	801c5a4 <memmove+0x20>
 801c594:	1e43      	subs	r3, r0, #1
 801c596:	42a1      	cmp	r1, r4
 801c598:	d008      	beq.n	801c5ac <memmove+0x28>
 801c59a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c59e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c5a2:	e7f8      	b.n	801c596 <memmove+0x12>
 801c5a4:	4402      	add	r2, r0
 801c5a6:	4601      	mov	r1, r0
 801c5a8:	428a      	cmp	r2, r1
 801c5aa:	d100      	bne.n	801c5ae <memmove+0x2a>
 801c5ac:	bd10      	pop	{r4, pc}
 801c5ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c5b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c5b6:	e7f7      	b.n	801c5a8 <memmove+0x24>

0801c5b8 <__malloc_lock>:
 801c5b8:	4801      	ldr	r0, [pc, #4]	; (801c5c0 <__malloc_lock+0x8>)
 801c5ba:	f000 bc11 	b.w	801cde0 <__retarget_lock_acquire_recursive>
 801c5be:	bf00      	nop
 801c5c0:	2006cd0c 	.word	0x2006cd0c

0801c5c4 <__malloc_unlock>:
 801c5c4:	4801      	ldr	r0, [pc, #4]	; (801c5cc <__malloc_unlock+0x8>)
 801c5c6:	f000 bc0c 	b.w	801cde2 <__retarget_lock_release_recursive>
 801c5ca:	bf00      	nop
 801c5cc:	2006cd0c 	.word	0x2006cd0c

0801c5d0 <_realloc_r>:
 801c5d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c5d4:	4680      	mov	r8, r0
 801c5d6:	4614      	mov	r4, r2
 801c5d8:	460e      	mov	r6, r1
 801c5da:	b921      	cbnz	r1, 801c5e6 <_realloc_r+0x16>
 801c5dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c5e0:	4611      	mov	r1, r2
 801c5e2:	f7ff bda9 	b.w	801c138 <_malloc_r>
 801c5e6:	b92a      	cbnz	r2, 801c5f4 <_realloc_r+0x24>
 801c5e8:	f7ff fd3a 	bl	801c060 <_free_r>
 801c5ec:	4625      	mov	r5, r4
 801c5ee:	4628      	mov	r0, r5
 801c5f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c5f4:	f000 fc5c 	bl	801ceb0 <_malloc_usable_size_r>
 801c5f8:	4284      	cmp	r4, r0
 801c5fa:	4607      	mov	r7, r0
 801c5fc:	d802      	bhi.n	801c604 <_realloc_r+0x34>
 801c5fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801c602:	d812      	bhi.n	801c62a <_realloc_r+0x5a>
 801c604:	4621      	mov	r1, r4
 801c606:	4640      	mov	r0, r8
 801c608:	f7ff fd96 	bl	801c138 <_malloc_r>
 801c60c:	4605      	mov	r5, r0
 801c60e:	2800      	cmp	r0, #0
 801c610:	d0ed      	beq.n	801c5ee <_realloc_r+0x1e>
 801c612:	42bc      	cmp	r4, r7
 801c614:	4622      	mov	r2, r4
 801c616:	4631      	mov	r1, r6
 801c618:	bf28      	it	cs
 801c61a:	463a      	movcs	r2, r7
 801c61c:	f7fc f9ba 	bl	8018994 <memcpy>
 801c620:	4631      	mov	r1, r6
 801c622:	4640      	mov	r0, r8
 801c624:	f7ff fd1c 	bl	801c060 <_free_r>
 801c628:	e7e1      	b.n	801c5ee <_realloc_r+0x1e>
 801c62a:	4635      	mov	r5, r6
 801c62c:	e7df      	b.n	801c5ee <_realloc_r+0x1e>

0801c62e <__sfputc_r>:
 801c62e:	6893      	ldr	r3, [r2, #8]
 801c630:	3b01      	subs	r3, #1
 801c632:	2b00      	cmp	r3, #0
 801c634:	b410      	push	{r4}
 801c636:	6093      	str	r3, [r2, #8]
 801c638:	da08      	bge.n	801c64c <__sfputc_r+0x1e>
 801c63a:	6994      	ldr	r4, [r2, #24]
 801c63c:	42a3      	cmp	r3, r4
 801c63e:	db01      	blt.n	801c644 <__sfputc_r+0x16>
 801c640:	290a      	cmp	r1, #10
 801c642:	d103      	bne.n	801c64c <__sfputc_r+0x1e>
 801c644:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c648:	f000 b94a 	b.w	801c8e0 <__swbuf_r>
 801c64c:	6813      	ldr	r3, [r2, #0]
 801c64e:	1c58      	adds	r0, r3, #1
 801c650:	6010      	str	r0, [r2, #0]
 801c652:	7019      	strb	r1, [r3, #0]
 801c654:	4608      	mov	r0, r1
 801c656:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c65a:	4770      	bx	lr

0801c65c <__sfputs_r>:
 801c65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c65e:	4606      	mov	r6, r0
 801c660:	460f      	mov	r7, r1
 801c662:	4614      	mov	r4, r2
 801c664:	18d5      	adds	r5, r2, r3
 801c666:	42ac      	cmp	r4, r5
 801c668:	d101      	bne.n	801c66e <__sfputs_r+0x12>
 801c66a:	2000      	movs	r0, #0
 801c66c:	e007      	b.n	801c67e <__sfputs_r+0x22>
 801c66e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c672:	463a      	mov	r2, r7
 801c674:	4630      	mov	r0, r6
 801c676:	f7ff ffda 	bl	801c62e <__sfputc_r>
 801c67a:	1c43      	adds	r3, r0, #1
 801c67c:	d1f3      	bne.n	801c666 <__sfputs_r+0xa>
 801c67e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801c680 <_vfiprintf_r>:
 801c680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c684:	460d      	mov	r5, r1
 801c686:	b09d      	sub	sp, #116	; 0x74
 801c688:	4614      	mov	r4, r2
 801c68a:	4698      	mov	r8, r3
 801c68c:	4606      	mov	r6, r0
 801c68e:	b118      	cbz	r0, 801c698 <_vfiprintf_r+0x18>
 801c690:	6983      	ldr	r3, [r0, #24]
 801c692:	b90b      	cbnz	r3, 801c698 <_vfiprintf_r+0x18>
 801c694:	f000 fb06 	bl	801cca4 <__sinit>
 801c698:	4b89      	ldr	r3, [pc, #548]	; (801c8c0 <_vfiprintf_r+0x240>)
 801c69a:	429d      	cmp	r5, r3
 801c69c:	d11b      	bne.n	801c6d6 <_vfiprintf_r+0x56>
 801c69e:	6875      	ldr	r5, [r6, #4]
 801c6a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c6a2:	07d9      	lsls	r1, r3, #31
 801c6a4:	d405      	bmi.n	801c6b2 <_vfiprintf_r+0x32>
 801c6a6:	89ab      	ldrh	r3, [r5, #12]
 801c6a8:	059a      	lsls	r2, r3, #22
 801c6aa:	d402      	bmi.n	801c6b2 <_vfiprintf_r+0x32>
 801c6ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c6ae:	f000 fb97 	bl	801cde0 <__retarget_lock_acquire_recursive>
 801c6b2:	89ab      	ldrh	r3, [r5, #12]
 801c6b4:	071b      	lsls	r3, r3, #28
 801c6b6:	d501      	bpl.n	801c6bc <_vfiprintf_r+0x3c>
 801c6b8:	692b      	ldr	r3, [r5, #16]
 801c6ba:	b9eb      	cbnz	r3, 801c6f8 <_vfiprintf_r+0x78>
 801c6bc:	4629      	mov	r1, r5
 801c6be:	4630      	mov	r0, r6
 801c6c0:	f000 f960 	bl	801c984 <__swsetup_r>
 801c6c4:	b1c0      	cbz	r0, 801c6f8 <_vfiprintf_r+0x78>
 801c6c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c6c8:	07dc      	lsls	r4, r3, #31
 801c6ca:	d50e      	bpl.n	801c6ea <_vfiprintf_r+0x6a>
 801c6cc:	f04f 30ff 	mov.w	r0, #4294967295
 801c6d0:	b01d      	add	sp, #116	; 0x74
 801c6d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c6d6:	4b7b      	ldr	r3, [pc, #492]	; (801c8c4 <_vfiprintf_r+0x244>)
 801c6d8:	429d      	cmp	r5, r3
 801c6da:	d101      	bne.n	801c6e0 <_vfiprintf_r+0x60>
 801c6dc:	68b5      	ldr	r5, [r6, #8]
 801c6de:	e7df      	b.n	801c6a0 <_vfiprintf_r+0x20>
 801c6e0:	4b79      	ldr	r3, [pc, #484]	; (801c8c8 <_vfiprintf_r+0x248>)
 801c6e2:	429d      	cmp	r5, r3
 801c6e4:	bf08      	it	eq
 801c6e6:	68f5      	ldreq	r5, [r6, #12]
 801c6e8:	e7da      	b.n	801c6a0 <_vfiprintf_r+0x20>
 801c6ea:	89ab      	ldrh	r3, [r5, #12]
 801c6ec:	0598      	lsls	r0, r3, #22
 801c6ee:	d4ed      	bmi.n	801c6cc <_vfiprintf_r+0x4c>
 801c6f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c6f2:	f000 fb76 	bl	801cde2 <__retarget_lock_release_recursive>
 801c6f6:	e7e9      	b.n	801c6cc <_vfiprintf_r+0x4c>
 801c6f8:	2300      	movs	r3, #0
 801c6fa:	9309      	str	r3, [sp, #36]	; 0x24
 801c6fc:	2320      	movs	r3, #32
 801c6fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c702:	f8cd 800c 	str.w	r8, [sp, #12]
 801c706:	2330      	movs	r3, #48	; 0x30
 801c708:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801c8cc <_vfiprintf_r+0x24c>
 801c70c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c710:	f04f 0901 	mov.w	r9, #1
 801c714:	4623      	mov	r3, r4
 801c716:	469a      	mov	sl, r3
 801c718:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c71c:	b10a      	cbz	r2, 801c722 <_vfiprintf_r+0xa2>
 801c71e:	2a25      	cmp	r2, #37	; 0x25
 801c720:	d1f9      	bne.n	801c716 <_vfiprintf_r+0x96>
 801c722:	ebba 0b04 	subs.w	fp, sl, r4
 801c726:	d00b      	beq.n	801c740 <_vfiprintf_r+0xc0>
 801c728:	465b      	mov	r3, fp
 801c72a:	4622      	mov	r2, r4
 801c72c:	4629      	mov	r1, r5
 801c72e:	4630      	mov	r0, r6
 801c730:	f7ff ff94 	bl	801c65c <__sfputs_r>
 801c734:	3001      	adds	r0, #1
 801c736:	f000 80aa 	beq.w	801c88e <_vfiprintf_r+0x20e>
 801c73a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c73c:	445a      	add	r2, fp
 801c73e:	9209      	str	r2, [sp, #36]	; 0x24
 801c740:	f89a 3000 	ldrb.w	r3, [sl]
 801c744:	2b00      	cmp	r3, #0
 801c746:	f000 80a2 	beq.w	801c88e <_vfiprintf_r+0x20e>
 801c74a:	2300      	movs	r3, #0
 801c74c:	f04f 32ff 	mov.w	r2, #4294967295
 801c750:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c754:	f10a 0a01 	add.w	sl, sl, #1
 801c758:	9304      	str	r3, [sp, #16]
 801c75a:	9307      	str	r3, [sp, #28]
 801c75c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c760:	931a      	str	r3, [sp, #104]	; 0x68
 801c762:	4654      	mov	r4, sl
 801c764:	2205      	movs	r2, #5
 801c766:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c76a:	4858      	ldr	r0, [pc, #352]	; (801c8cc <_vfiprintf_r+0x24c>)
 801c76c:	f7eb fdd0 	bl	8008310 <memchr>
 801c770:	9a04      	ldr	r2, [sp, #16]
 801c772:	b9d8      	cbnz	r0, 801c7ac <_vfiprintf_r+0x12c>
 801c774:	06d1      	lsls	r1, r2, #27
 801c776:	bf44      	itt	mi
 801c778:	2320      	movmi	r3, #32
 801c77a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c77e:	0713      	lsls	r3, r2, #28
 801c780:	bf44      	itt	mi
 801c782:	232b      	movmi	r3, #43	; 0x2b
 801c784:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c788:	f89a 3000 	ldrb.w	r3, [sl]
 801c78c:	2b2a      	cmp	r3, #42	; 0x2a
 801c78e:	d015      	beq.n	801c7bc <_vfiprintf_r+0x13c>
 801c790:	9a07      	ldr	r2, [sp, #28]
 801c792:	4654      	mov	r4, sl
 801c794:	2000      	movs	r0, #0
 801c796:	f04f 0c0a 	mov.w	ip, #10
 801c79a:	4621      	mov	r1, r4
 801c79c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c7a0:	3b30      	subs	r3, #48	; 0x30
 801c7a2:	2b09      	cmp	r3, #9
 801c7a4:	d94e      	bls.n	801c844 <_vfiprintf_r+0x1c4>
 801c7a6:	b1b0      	cbz	r0, 801c7d6 <_vfiprintf_r+0x156>
 801c7a8:	9207      	str	r2, [sp, #28]
 801c7aa:	e014      	b.n	801c7d6 <_vfiprintf_r+0x156>
 801c7ac:	eba0 0308 	sub.w	r3, r0, r8
 801c7b0:	fa09 f303 	lsl.w	r3, r9, r3
 801c7b4:	4313      	orrs	r3, r2
 801c7b6:	9304      	str	r3, [sp, #16]
 801c7b8:	46a2      	mov	sl, r4
 801c7ba:	e7d2      	b.n	801c762 <_vfiprintf_r+0xe2>
 801c7bc:	9b03      	ldr	r3, [sp, #12]
 801c7be:	1d19      	adds	r1, r3, #4
 801c7c0:	681b      	ldr	r3, [r3, #0]
 801c7c2:	9103      	str	r1, [sp, #12]
 801c7c4:	2b00      	cmp	r3, #0
 801c7c6:	bfbb      	ittet	lt
 801c7c8:	425b      	neglt	r3, r3
 801c7ca:	f042 0202 	orrlt.w	r2, r2, #2
 801c7ce:	9307      	strge	r3, [sp, #28]
 801c7d0:	9307      	strlt	r3, [sp, #28]
 801c7d2:	bfb8      	it	lt
 801c7d4:	9204      	strlt	r2, [sp, #16]
 801c7d6:	7823      	ldrb	r3, [r4, #0]
 801c7d8:	2b2e      	cmp	r3, #46	; 0x2e
 801c7da:	d10c      	bne.n	801c7f6 <_vfiprintf_r+0x176>
 801c7dc:	7863      	ldrb	r3, [r4, #1]
 801c7de:	2b2a      	cmp	r3, #42	; 0x2a
 801c7e0:	d135      	bne.n	801c84e <_vfiprintf_r+0x1ce>
 801c7e2:	9b03      	ldr	r3, [sp, #12]
 801c7e4:	1d1a      	adds	r2, r3, #4
 801c7e6:	681b      	ldr	r3, [r3, #0]
 801c7e8:	9203      	str	r2, [sp, #12]
 801c7ea:	2b00      	cmp	r3, #0
 801c7ec:	bfb8      	it	lt
 801c7ee:	f04f 33ff 	movlt.w	r3, #4294967295
 801c7f2:	3402      	adds	r4, #2
 801c7f4:	9305      	str	r3, [sp, #20]
 801c7f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801c8dc <_vfiprintf_r+0x25c>
 801c7fa:	7821      	ldrb	r1, [r4, #0]
 801c7fc:	2203      	movs	r2, #3
 801c7fe:	4650      	mov	r0, sl
 801c800:	f7eb fd86 	bl	8008310 <memchr>
 801c804:	b140      	cbz	r0, 801c818 <_vfiprintf_r+0x198>
 801c806:	2340      	movs	r3, #64	; 0x40
 801c808:	eba0 000a 	sub.w	r0, r0, sl
 801c80c:	fa03 f000 	lsl.w	r0, r3, r0
 801c810:	9b04      	ldr	r3, [sp, #16]
 801c812:	4303      	orrs	r3, r0
 801c814:	3401      	adds	r4, #1
 801c816:	9304      	str	r3, [sp, #16]
 801c818:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c81c:	482c      	ldr	r0, [pc, #176]	; (801c8d0 <_vfiprintf_r+0x250>)
 801c81e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c822:	2206      	movs	r2, #6
 801c824:	f7eb fd74 	bl	8008310 <memchr>
 801c828:	2800      	cmp	r0, #0
 801c82a:	d03f      	beq.n	801c8ac <_vfiprintf_r+0x22c>
 801c82c:	4b29      	ldr	r3, [pc, #164]	; (801c8d4 <_vfiprintf_r+0x254>)
 801c82e:	bb1b      	cbnz	r3, 801c878 <_vfiprintf_r+0x1f8>
 801c830:	9b03      	ldr	r3, [sp, #12]
 801c832:	3307      	adds	r3, #7
 801c834:	f023 0307 	bic.w	r3, r3, #7
 801c838:	3308      	adds	r3, #8
 801c83a:	9303      	str	r3, [sp, #12]
 801c83c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c83e:	443b      	add	r3, r7
 801c840:	9309      	str	r3, [sp, #36]	; 0x24
 801c842:	e767      	b.n	801c714 <_vfiprintf_r+0x94>
 801c844:	fb0c 3202 	mla	r2, ip, r2, r3
 801c848:	460c      	mov	r4, r1
 801c84a:	2001      	movs	r0, #1
 801c84c:	e7a5      	b.n	801c79a <_vfiprintf_r+0x11a>
 801c84e:	2300      	movs	r3, #0
 801c850:	3401      	adds	r4, #1
 801c852:	9305      	str	r3, [sp, #20]
 801c854:	4619      	mov	r1, r3
 801c856:	f04f 0c0a 	mov.w	ip, #10
 801c85a:	4620      	mov	r0, r4
 801c85c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c860:	3a30      	subs	r2, #48	; 0x30
 801c862:	2a09      	cmp	r2, #9
 801c864:	d903      	bls.n	801c86e <_vfiprintf_r+0x1ee>
 801c866:	2b00      	cmp	r3, #0
 801c868:	d0c5      	beq.n	801c7f6 <_vfiprintf_r+0x176>
 801c86a:	9105      	str	r1, [sp, #20]
 801c86c:	e7c3      	b.n	801c7f6 <_vfiprintf_r+0x176>
 801c86e:	fb0c 2101 	mla	r1, ip, r1, r2
 801c872:	4604      	mov	r4, r0
 801c874:	2301      	movs	r3, #1
 801c876:	e7f0      	b.n	801c85a <_vfiprintf_r+0x1da>
 801c878:	ab03      	add	r3, sp, #12
 801c87a:	9300      	str	r3, [sp, #0]
 801c87c:	462a      	mov	r2, r5
 801c87e:	4b16      	ldr	r3, [pc, #88]	; (801c8d8 <_vfiprintf_r+0x258>)
 801c880:	a904      	add	r1, sp, #16
 801c882:	4630      	mov	r0, r6
 801c884:	f7fc f92c 	bl	8018ae0 <_printf_float>
 801c888:	4607      	mov	r7, r0
 801c88a:	1c78      	adds	r0, r7, #1
 801c88c:	d1d6      	bne.n	801c83c <_vfiprintf_r+0x1bc>
 801c88e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c890:	07d9      	lsls	r1, r3, #31
 801c892:	d405      	bmi.n	801c8a0 <_vfiprintf_r+0x220>
 801c894:	89ab      	ldrh	r3, [r5, #12]
 801c896:	059a      	lsls	r2, r3, #22
 801c898:	d402      	bmi.n	801c8a0 <_vfiprintf_r+0x220>
 801c89a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c89c:	f000 faa1 	bl	801cde2 <__retarget_lock_release_recursive>
 801c8a0:	89ab      	ldrh	r3, [r5, #12]
 801c8a2:	065b      	lsls	r3, r3, #25
 801c8a4:	f53f af12 	bmi.w	801c6cc <_vfiprintf_r+0x4c>
 801c8a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c8aa:	e711      	b.n	801c6d0 <_vfiprintf_r+0x50>
 801c8ac:	ab03      	add	r3, sp, #12
 801c8ae:	9300      	str	r3, [sp, #0]
 801c8b0:	462a      	mov	r2, r5
 801c8b2:	4b09      	ldr	r3, [pc, #36]	; (801c8d8 <_vfiprintf_r+0x258>)
 801c8b4:	a904      	add	r1, sp, #16
 801c8b6:	4630      	mov	r0, r6
 801c8b8:	f7fc fb9e 	bl	8018ff8 <_printf_i>
 801c8bc:	e7e4      	b.n	801c888 <_vfiprintf_r+0x208>
 801c8be:	bf00      	nop
 801c8c0:	0802bc7c 	.word	0x0802bc7c
 801c8c4:	0802bc9c 	.word	0x0802bc9c
 801c8c8:	0802bc5c 	.word	0x0802bc5c
 801c8cc:	0802bc0c 	.word	0x0802bc0c
 801c8d0:	0802bc16 	.word	0x0802bc16
 801c8d4:	08018ae1 	.word	0x08018ae1
 801c8d8:	0801c65d 	.word	0x0801c65d
 801c8dc:	0802bc12 	.word	0x0802bc12

0801c8e0 <__swbuf_r>:
 801c8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c8e2:	460e      	mov	r6, r1
 801c8e4:	4614      	mov	r4, r2
 801c8e6:	4605      	mov	r5, r0
 801c8e8:	b118      	cbz	r0, 801c8f2 <__swbuf_r+0x12>
 801c8ea:	6983      	ldr	r3, [r0, #24]
 801c8ec:	b90b      	cbnz	r3, 801c8f2 <__swbuf_r+0x12>
 801c8ee:	f000 f9d9 	bl	801cca4 <__sinit>
 801c8f2:	4b21      	ldr	r3, [pc, #132]	; (801c978 <__swbuf_r+0x98>)
 801c8f4:	429c      	cmp	r4, r3
 801c8f6:	d12b      	bne.n	801c950 <__swbuf_r+0x70>
 801c8f8:	686c      	ldr	r4, [r5, #4]
 801c8fa:	69a3      	ldr	r3, [r4, #24]
 801c8fc:	60a3      	str	r3, [r4, #8]
 801c8fe:	89a3      	ldrh	r3, [r4, #12]
 801c900:	071a      	lsls	r2, r3, #28
 801c902:	d52f      	bpl.n	801c964 <__swbuf_r+0x84>
 801c904:	6923      	ldr	r3, [r4, #16]
 801c906:	b36b      	cbz	r3, 801c964 <__swbuf_r+0x84>
 801c908:	6923      	ldr	r3, [r4, #16]
 801c90a:	6820      	ldr	r0, [r4, #0]
 801c90c:	1ac0      	subs	r0, r0, r3
 801c90e:	6963      	ldr	r3, [r4, #20]
 801c910:	b2f6      	uxtb	r6, r6
 801c912:	4283      	cmp	r3, r0
 801c914:	4637      	mov	r7, r6
 801c916:	dc04      	bgt.n	801c922 <__swbuf_r+0x42>
 801c918:	4621      	mov	r1, r4
 801c91a:	4628      	mov	r0, r5
 801c91c:	f000 f92e 	bl	801cb7c <_fflush_r>
 801c920:	bb30      	cbnz	r0, 801c970 <__swbuf_r+0x90>
 801c922:	68a3      	ldr	r3, [r4, #8]
 801c924:	3b01      	subs	r3, #1
 801c926:	60a3      	str	r3, [r4, #8]
 801c928:	6823      	ldr	r3, [r4, #0]
 801c92a:	1c5a      	adds	r2, r3, #1
 801c92c:	6022      	str	r2, [r4, #0]
 801c92e:	701e      	strb	r6, [r3, #0]
 801c930:	6963      	ldr	r3, [r4, #20]
 801c932:	3001      	adds	r0, #1
 801c934:	4283      	cmp	r3, r0
 801c936:	d004      	beq.n	801c942 <__swbuf_r+0x62>
 801c938:	89a3      	ldrh	r3, [r4, #12]
 801c93a:	07db      	lsls	r3, r3, #31
 801c93c:	d506      	bpl.n	801c94c <__swbuf_r+0x6c>
 801c93e:	2e0a      	cmp	r6, #10
 801c940:	d104      	bne.n	801c94c <__swbuf_r+0x6c>
 801c942:	4621      	mov	r1, r4
 801c944:	4628      	mov	r0, r5
 801c946:	f000 f919 	bl	801cb7c <_fflush_r>
 801c94a:	b988      	cbnz	r0, 801c970 <__swbuf_r+0x90>
 801c94c:	4638      	mov	r0, r7
 801c94e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c950:	4b0a      	ldr	r3, [pc, #40]	; (801c97c <__swbuf_r+0x9c>)
 801c952:	429c      	cmp	r4, r3
 801c954:	d101      	bne.n	801c95a <__swbuf_r+0x7a>
 801c956:	68ac      	ldr	r4, [r5, #8]
 801c958:	e7cf      	b.n	801c8fa <__swbuf_r+0x1a>
 801c95a:	4b09      	ldr	r3, [pc, #36]	; (801c980 <__swbuf_r+0xa0>)
 801c95c:	429c      	cmp	r4, r3
 801c95e:	bf08      	it	eq
 801c960:	68ec      	ldreq	r4, [r5, #12]
 801c962:	e7ca      	b.n	801c8fa <__swbuf_r+0x1a>
 801c964:	4621      	mov	r1, r4
 801c966:	4628      	mov	r0, r5
 801c968:	f000 f80c 	bl	801c984 <__swsetup_r>
 801c96c:	2800      	cmp	r0, #0
 801c96e:	d0cb      	beq.n	801c908 <__swbuf_r+0x28>
 801c970:	f04f 37ff 	mov.w	r7, #4294967295
 801c974:	e7ea      	b.n	801c94c <__swbuf_r+0x6c>
 801c976:	bf00      	nop
 801c978:	0802bc7c 	.word	0x0802bc7c
 801c97c:	0802bc9c 	.word	0x0802bc9c
 801c980:	0802bc5c 	.word	0x0802bc5c

0801c984 <__swsetup_r>:
 801c984:	4b32      	ldr	r3, [pc, #200]	; (801ca50 <__swsetup_r+0xcc>)
 801c986:	b570      	push	{r4, r5, r6, lr}
 801c988:	681d      	ldr	r5, [r3, #0]
 801c98a:	4606      	mov	r6, r0
 801c98c:	460c      	mov	r4, r1
 801c98e:	b125      	cbz	r5, 801c99a <__swsetup_r+0x16>
 801c990:	69ab      	ldr	r3, [r5, #24]
 801c992:	b913      	cbnz	r3, 801c99a <__swsetup_r+0x16>
 801c994:	4628      	mov	r0, r5
 801c996:	f000 f985 	bl	801cca4 <__sinit>
 801c99a:	4b2e      	ldr	r3, [pc, #184]	; (801ca54 <__swsetup_r+0xd0>)
 801c99c:	429c      	cmp	r4, r3
 801c99e:	d10f      	bne.n	801c9c0 <__swsetup_r+0x3c>
 801c9a0:	686c      	ldr	r4, [r5, #4]
 801c9a2:	89a3      	ldrh	r3, [r4, #12]
 801c9a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c9a8:	0719      	lsls	r1, r3, #28
 801c9aa:	d42c      	bmi.n	801ca06 <__swsetup_r+0x82>
 801c9ac:	06dd      	lsls	r5, r3, #27
 801c9ae:	d411      	bmi.n	801c9d4 <__swsetup_r+0x50>
 801c9b0:	2309      	movs	r3, #9
 801c9b2:	6033      	str	r3, [r6, #0]
 801c9b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801c9b8:	81a3      	strh	r3, [r4, #12]
 801c9ba:	f04f 30ff 	mov.w	r0, #4294967295
 801c9be:	e03e      	b.n	801ca3e <__swsetup_r+0xba>
 801c9c0:	4b25      	ldr	r3, [pc, #148]	; (801ca58 <__swsetup_r+0xd4>)
 801c9c2:	429c      	cmp	r4, r3
 801c9c4:	d101      	bne.n	801c9ca <__swsetup_r+0x46>
 801c9c6:	68ac      	ldr	r4, [r5, #8]
 801c9c8:	e7eb      	b.n	801c9a2 <__swsetup_r+0x1e>
 801c9ca:	4b24      	ldr	r3, [pc, #144]	; (801ca5c <__swsetup_r+0xd8>)
 801c9cc:	429c      	cmp	r4, r3
 801c9ce:	bf08      	it	eq
 801c9d0:	68ec      	ldreq	r4, [r5, #12]
 801c9d2:	e7e6      	b.n	801c9a2 <__swsetup_r+0x1e>
 801c9d4:	0758      	lsls	r0, r3, #29
 801c9d6:	d512      	bpl.n	801c9fe <__swsetup_r+0x7a>
 801c9d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c9da:	b141      	cbz	r1, 801c9ee <__swsetup_r+0x6a>
 801c9dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c9e0:	4299      	cmp	r1, r3
 801c9e2:	d002      	beq.n	801c9ea <__swsetup_r+0x66>
 801c9e4:	4630      	mov	r0, r6
 801c9e6:	f7ff fb3b 	bl	801c060 <_free_r>
 801c9ea:	2300      	movs	r3, #0
 801c9ec:	6363      	str	r3, [r4, #52]	; 0x34
 801c9ee:	89a3      	ldrh	r3, [r4, #12]
 801c9f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c9f4:	81a3      	strh	r3, [r4, #12]
 801c9f6:	2300      	movs	r3, #0
 801c9f8:	6063      	str	r3, [r4, #4]
 801c9fa:	6923      	ldr	r3, [r4, #16]
 801c9fc:	6023      	str	r3, [r4, #0]
 801c9fe:	89a3      	ldrh	r3, [r4, #12]
 801ca00:	f043 0308 	orr.w	r3, r3, #8
 801ca04:	81a3      	strh	r3, [r4, #12]
 801ca06:	6923      	ldr	r3, [r4, #16]
 801ca08:	b94b      	cbnz	r3, 801ca1e <__swsetup_r+0x9a>
 801ca0a:	89a3      	ldrh	r3, [r4, #12]
 801ca0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801ca10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ca14:	d003      	beq.n	801ca1e <__swsetup_r+0x9a>
 801ca16:	4621      	mov	r1, r4
 801ca18:	4630      	mov	r0, r6
 801ca1a:	f000 fa09 	bl	801ce30 <__smakebuf_r>
 801ca1e:	89a0      	ldrh	r0, [r4, #12]
 801ca20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ca24:	f010 0301 	ands.w	r3, r0, #1
 801ca28:	d00a      	beq.n	801ca40 <__swsetup_r+0xbc>
 801ca2a:	2300      	movs	r3, #0
 801ca2c:	60a3      	str	r3, [r4, #8]
 801ca2e:	6963      	ldr	r3, [r4, #20]
 801ca30:	425b      	negs	r3, r3
 801ca32:	61a3      	str	r3, [r4, #24]
 801ca34:	6923      	ldr	r3, [r4, #16]
 801ca36:	b943      	cbnz	r3, 801ca4a <__swsetup_r+0xc6>
 801ca38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801ca3c:	d1ba      	bne.n	801c9b4 <__swsetup_r+0x30>
 801ca3e:	bd70      	pop	{r4, r5, r6, pc}
 801ca40:	0781      	lsls	r1, r0, #30
 801ca42:	bf58      	it	pl
 801ca44:	6963      	ldrpl	r3, [r4, #20]
 801ca46:	60a3      	str	r3, [r4, #8]
 801ca48:	e7f4      	b.n	801ca34 <__swsetup_r+0xb0>
 801ca4a:	2000      	movs	r0, #0
 801ca4c:	e7f7      	b.n	801ca3e <__swsetup_r+0xba>
 801ca4e:	bf00      	nop
 801ca50:	20000028 	.word	0x20000028
 801ca54:	0802bc7c 	.word	0x0802bc7c
 801ca58:	0802bc9c 	.word	0x0802bc9c
 801ca5c:	0802bc5c 	.word	0x0802bc5c

0801ca60 <abort>:
 801ca60:	b508      	push	{r3, lr}
 801ca62:	2006      	movs	r0, #6
 801ca64:	f000 fa54 	bl	801cf10 <raise>
 801ca68:	2001      	movs	r0, #1
 801ca6a:	f7f3 f9ed 	bl	800fe48 <_exit>
	...

0801ca70 <__sflush_r>:
 801ca70:	898a      	ldrh	r2, [r1, #12]
 801ca72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ca76:	4605      	mov	r5, r0
 801ca78:	0710      	lsls	r0, r2, #28
 801ca7a:	460c      	mov	r4, r1
 801ca7c:	d458      	bmi.n	801cb30 <__sflush_r+0xc0>
 801ca7e:	684b      	ldr	r3, [r1, #4]
 801ca80:	2b00      	cmp	r3, #0
 801ca82:	dc05      	bgt.n	801ca90 <__sflush_r+0x20>
 801ca84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ca86:	2b00      	cmp	r3, #0
 801ca88:	dc02      	bgt.n	801ca90 <__sflush_r+0x20>
 801ca8a:	2000      	movs	r0, #0
 801ca8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ca90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ca92:	2e00      	cmp	r6, #0
 801ca94:	d0f9      	beq.n	801ca8a <__sflush_r+0x1a>
 801ca96:	2300      	movs	r3, #0
 801ca98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ca9c:	682f      	ldr	r7, [r5, #0]
 801ca9e:	602b      	str	r3, [r5, #0]
 801caa0:	d032      	beq.n	801cb08 <__sflush_r+0x98>
 801caa2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801caa4:	89a3      	ldrh	r3, [r4, #12]
 801caa6:	075a      	lsls	r2, r3, #29
 801caa8:	d505      	bpl.n	801cab6 <__sflush_r+0x46>
 801caaa:	6863      	ldr	r3, [r4, #4]
 801caac:	1ac0      	subs	r0, r0, r3
 801caae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801cab0:	b10b      	cbz	r3, 801cab6 <__sflush_r+0x46>
 801cab2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801cab4:	1ac0      	subs	r0, r0, r3
 801cab6:	2300      	movs	r3, #0
 801cab8:	4602      	mov	r2, r0
 801caba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801cabc:	6a21      	ldr	r1, [r4, #32]
 801cabe:	4628      	mov	r0, r5
 801cac0:	47b0      	blx	r6
 801cac2:	1c43      	adds	r3, r0, #1
 801cac4:	89a3      	ldrh	r3, [r4, #12]
 801cac6:	d106      	bne.n	801cad6 <__sflush_r+0x66>
 801cac8:	6829      	ldr	r1, [r5, #0]
 801caca:	291d      	cmp	r1, #29
 801cacc:	d82c      	bhi.n	801cb28 <__sflush_r+0xb8>
 801cace:	4a2a      	ldr	r2, [pc, #168]	; (801cb78 <__sflush_r+0x108>)
 801cad0:	40ca      	lsrs	r2, r1
 801cad2:	07d6      	lsls	r6, r2, #31
 801cad4:	d528      	bpl.n	801cb28 <__sflush_r+0xb8>
 801cad6:	2200      	movs	r2, #0
 801cad8:	6062      	str	r2, [r4, #4]
 801cada:	04d9      	lsls	r1, r3, #19
 801cadc:	6922      	ldr	r2, [r4, #16]
 801cade:	6022      	str	r2, [r4, #0]
 801cae0:	d504      	bpl.n	801caec <__sflush_r+0x7c>
 801cae2:	1c42      	adds	r2, r0, #1
 801cae4:	d101      	bne.n	801caea <__sflush_r+0x7a>
 801cae6:	682b      	ldr	r3, [r5, #0]
 801cae8:	b903      	cbnz	r3, 801caec <__sflush_r+0x7c>
 801caea:	6560      	str	r0, [r4, #84]	; 0x54
 801caec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801caee:	602f      	str	r7, [r5, #0]
 801caf0:	2900      	cmp	r1, #0
 801caf2:	d0ca      	beq.n	801ca8a <__sflush_r+0x1a>
 801caf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801caf8:	4299      	cmp	r1, r3
 801cafa:	d002      	beq.n	801cb02 <__sflush_r+0x92>
 801cafc:	4628      	mov	r0, r5
 801cafe:	f7ff faaf 	bl	801c060 <_free_r>
 801cb02:	2000      	movs	r0, #0
 801cb04:	6360      	str	r0, [r4, #52]	; 0x34
 801cb06:	e7c1      	b.n	801ca8c <__sflush_r+0x1c>
 801cb08:	6a21      	ldr	r1, [r4, #32]
 801cb0a:	2301      	movs	r3, #1
 801cb0c:	4628      	mov	r0, r5
 801cb0e:	47b0      	blx	r6
 801cb10:	1c41      	adds	r1, r0, #1
 801cb12:	d1c7      	bne.n	801caa4 <__sflush_r+0x34>
 801cb14:	682b      	ldr	r3, [r5, #0]
 801cb16:	2b00      	cmp	r3, #0
 801cb18:	d0c4      	beq.n	801caa4 <__sflush_r+0x34>
 801cb1a:	2b1d      	cmp	r3, #29
 801cb1c:	d001      	beq.n	801cb22 <__sflush_r+0xb2>
 801cb1e:	2b16      	cmp	r3, #22
 801cb20:	d101      	bne.n	801cb26 <__sflush_r+0xb6>
 801cb22:	602f      	str	r7, [r5, #0]
 801cb24:	e7b1      	b.n	801ca8a <__sflush_r+0x1a>
 801cb26:	89a3      	ldrh	r3, [r4, #12]
 801cb28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cb2c:	81a3      	strh	r3, [r4, #12]
 801cb2e:	e7ad      	b.n	801ca8c <__sflush_r+0x1c>
 801cb30:	690f      	ldr	r7, [r1, #16]
 801cb32:	2f00      	cmp	r7, #0
 801cb34:	d0a9      	beq.n	801ca8a <__sflush_r+0x1a>
 801cb36:	0793      	lsls	r3, r2, #30
 801cb38:	680e      	ldr	r6, [r1, #0]
 801cb3a:	bf08      	it	eq
 801cb3c:	694b      	ldreq	r3, [r1, #20]
 801cb3e:	600f      	str	r7, [r1, #0]
 801cb40:	bf18      	it	ne
 801cb42:	2300      	movne	r3, #0
 801cb44:	eba6 0807 	sub.w	r8, r6, r7
 801cb48:	608b      	str	r3, [r1, #8]
 801cb4a:	f1b8 0f00 	cmp.w	r8, #0
 801cb4e:	dd9c      	ble.n	801ca8a <__sflush_r+0x1a>
 801cb50:	6a21      	ldr	r1, [r4, #32]
 801cb52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801cb54:	4643      	mov	r3, r8
 801cb56:	463a      	mov	r2, r7
 801cb58:	4628      	mov	r0, r5
 801cb5a:	47b0      	blx	r6
 801cb5c:	2800      	cmp	r0, #0
 801cb5e:	dc06      	bgt.n	801cb6e <__sflush_r+0xfe>
 801cb60:	89a3      	ldrh	r3, [r4, #12]
 801cb62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cb66:	81a3      	strh	r3, [r4, #12]
 801cb68:	f04f 30ff 	mov.w	r0, #4294967295
 801cb6c:	e78e      	b.n	801ca8c <__sflush_r+0x1c>
 801cb6e:	4407      	add	r7, r0
 801cb70:	eba8 0800 	sub.w	r8, r8, r0
 801cb74:	e7e9      	b.n	801cb4a <__sflush_r+0xda>
 801cb76:	bf00      	nop
 801cb78:	20400001 	.word	0x20400001

0801cb7c <_fflush_r>:
 801cb7c:	b538      	push	{r3, r4, r5, lr}
 801cb7e:	690b      	ldr	r3, [r1, #16]
 801cb80:	4605      	mov	r5, r0
 801cb82:	460c      	mov	r4, r1
 801cb84:	b913      	cbnz	r3, 801cb8c <_fflush_r+0x10>
 801cb86:	2500      	movs	r5, #0
 801cb88:	4628      	mov	r0, r5
 801cb8a:	bd38      	pop	{r3, r4, r5, pc}
 801cb8c:	b118      	cbz	r0, 801cb96 <_fflush_r+0x1a>
 801cb8e:	6983      	ldr	r3, [r0, #24]
 801cb90:	b90b      	cbnz	r3, 801cb96 <_fflush_r+0x1a>
 801cb92:	f000 f887 	bl	801cca4 <__sinit>
 801cb96:	4b14      	ldr	r3, [pc, #80]	; (801cbe8 <_fflush_r+0x6c>)
 801cb98:	429c      	cmp	r4, r3
 801cb9a:	d11b      	bne.n	801cbd4 <_fflush_r+0x58>
 801cb9c:	686c      	ldr	r4, [r5, #4]
 801cb9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cba2:	2b00      	cmp	r3, #0
 801cba4:	d0ef      	beq.n	801cb86 <_fflush_r+0xa>
 801cba6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801cba8:	07d0      	lsls	r0, r2, #31
 801cbaa:	d404      	bmi.n	801cbb6 <_fflush_r+0x3a>
 801cbac:	0599      	lsls	r1, r3, #22
 801cbae:	d402      	bmi.n	801cbb6 <_fflush_r+0x3a>
 801cbb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cbb2:	f000 f915 	bl	801cde0 <__retarget_lock_acquire_recursive>
 801cbb6:	4628      	mov	r0, r5
 801cbb8:	4621      	mov	r1, r4
 801cbba:	f7ff ff59 	bl	801ca70 <__sflush_r>
 801cbbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cbc0:	07da      	lsls	r2, r3, #31
 801cbc2:	4605      	mov	r5, r0
 801cbc4:	d4e0      	bmi.n	801cb88 <_fflush_r+0xc>
 801cbc6:	89a3      	ldrh	r3, [r4, #12]
 801cbc8:	059b      	lsls	r3, r3, #22
 801cbca:	d4dd      	bmi.n	801cb88 <_fflush_r+0xc>
 801cbcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cbce:	f000 f908 	bl	801cde2 <__retarget_lock_release_recursive>
 801cbd2:	e7d9      	b.n	801cb88 <_fflush_r+0xc>
 801cbd4:	4b05      	ldr	r3, [pc, #20]	; (801cbec <_fflush_r+0x70>)
 801cbd6:	429c      	cmp	r4, r3
 801cbd8:	d101      	bne.n	801cbde <_fflush_r+0x62>
 801cbda:	68ac      	ldr	r4, [r5, #8]
 801cbdc:	e7df      	b.n	801cb9e <_fflush_r+0x22>
 801cbde:	4b04      	ldr	r3, [pc, #16]	; (801cbf0 <_fflush_r+0x74>)
 801cbe0:	429c      	cmp	r4, r3
 801cbe2:	bf08      	it	eq
 801cbe4:	68ec      	ldreq	r4, [r5, #12]
 801cbe6:	e7da      	b.n	801cb9e <_fflush_r+0x22>
 801cbe8:	0802bc7c 	.word	0x0802bc7c
 801cbec:	0802bc9c 	.word	0x0802bc9c
 801cbf0:	0802bc5c 	.word	0x0802bc5c

0801cbf4 <std>:
 801cbf4:	2300      	movs	r3, #0
 801cbf6:	b510      	push	{r4, lr}
 801cbf8:	4604      	mov	r4, r0
 801cbfa:	e9c0 3300 	strd	r3, r3, [r0]
 801cbfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801cc02:	6083      	str	r3, [r0, #8]
 801cc04:	8181      	strh	r1, [r0, #12]
 801cc06:	6643      	str	r3, [r0, #100]	; 0x64
 801cc08:	81c2      	strh	r2, [r0, #14]
 801cc0a:	6183      	str	r3, [r0, #24]
 801cc0c:	4619      	mov	r1, r3
 801cc0e:	2208      	movs	r2, #8
 801cc10:	305c      	adds	r0, #92	; 0x5c
 801cc12:	f7fb fecd 	bl	80189b0 <memset>
 801cc16:	4b05      	ldr	r3, [pc, #20]	; (801cc2c <std+0x38>)
 801cc18:	6263      	str	r3, [r4, #36]	; 0x24
 801cc1a:	4b05      	ldr	r3, [pc, #20]	; (801cc30 <std+0x3c>)
 801cc1c:	62a3      	str	r3, [r4, #40]	; 0x28
 801cc1e:	4b05      	ldr	r3, [pc, #20]	; (801cc34 <std+0x40>)
 801cc20:	62e3      	str	r3, [r4, #44]	; 0x2c
 801cc22:	4b05      	ldr	r3, [pc, #20]	; (801cc38 <std+0x44>)
 801cc24:	6224      	str	r4, [r4, #32]
 801cc26:	6323      	str	r3, [r4, #48]	; 0x30
 801cc28:	bd10      	pop	{r4, pc}
 801cc2a:	bf00      	nop
 801cc2c:	0801cf49 	.word	0x0801cf49
 801cc30:	0801cf6b 	.word	0x0801cf6b
 801cc34:	0801cfa3 	.word	0x0801cfa3
 801cc38:	0801cfc7 	.word	0x0801cfc7

0801cc3c <_cleanup_r>:
 801cc3c:	4901      	ldr	r1, [pc, #4]	; (801cc44 <_cleanup_r+0x8>)
 801cc3e:	f000 b8af 	b.w	801cda0 <_fwalk_reent>
 801cc42:	bf00      	nop
 801cc44:	0801cb7d 	.word	0x0801cb7d

0801cc48 <__sfmoreglue>:
 801cc48:	b570      	push	{r4, r5, r6, lr}
 801cc4a:	2268      	movs	r2, #104	; 0x68
 801cc4c:	1e4d      	subs	r5, r1, #1
 801cc4e:	4355      	muls	r5, r2
 801cc50:	460e      	mov	r6, r1
 801cc52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801cc56:	f7ff fa6f 	bl	801c138 <_malloc_r>
 801cc5a:	4604      	mov	r4, r0
 801cc5c:	b140      	cbz	r0, 801cc70 <__sfmoreglue+0x28>
 801cc5e:	2100      	movs	r1, #0
 801cc60:	e9c0 1600 	strd	r1, r6, [r0]
 801cc64:	300c      	adds	r0, #12
 801cc66:	60a0      	str	r0, [r4, #8]
 801cc68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801cc6c:	f7fb fea0 	bl	80189b0 <memset>
 801cc70:	4620      	mov	r0, r4
 801cc72:	bd70      	pop	{r4, r5, r6, pc}

0801cc74 <__sfp_lock_acquire>:
 801cc74:	4801      	ldr	r0, [pc, #4]	; (801cc7c <__sfp_lock_acquire+0x8>)
 801cc76:	f000 b8b3 	b.w	801cde0 <__retarget_lock_acquire_recursive>
 801cc7a:	bf00      	nop
 801cc7c:	2006cd0d 	.word	0x2006cd0d

0801cc80 <__sfp_lock_release>:
 801cc80:	4801      	ldr	r0, [pc, #4]	; (801cc88 <__sfp_lock_release+0x8>)
 801cc82:	f000 b8ae 	b.w	801cde2 <__retarget_lock_release_recursive>
 801cc86:	bf00      	nop
 801cc88:	2006cd0d 	.word	0x2006cd0d

0801cc8c <__sinit_lock_acquire>:
 801cc8c:	4801      	ldr	r0, [pc, #4]	; (801cc94 <__sinit_lock_acquire+0x8>)
 801cc8e:	f000 b8a7 	b.w	801cde0 <__retarget_lock_acquire_recursive>
 801cc92:	bf00      	nop
 801cc94:	2006cd0e 	.word	0x2006cd0e

0801cc98 <__sinit_lock_release>:
 801cc98:	4801      	ldr	r0, [pc, #4]	; (801cca0 <__sinit_lock_release+0x8>)
 801cc9a:	f000 b8a2 	b.w	801cde2 <__retarget_lock_release_recursive>
 801cc9e:	bf00      	nop
 801cca0:	2006cd0e 	.word	0x2006cd0e

0801cca4 <__sinit>:
 801cca4:	b510      	push	{r4, lr}
 801cca6:	4604      	mov	r4, r0
 801cca8:	f7ff fff0 	bl	801cc8c <__sinit_lock_acquire>
 801ccac:	69a3      	ldr	r3, [r4, #24]
 801ccae:	b11b      	cbz	r3, 801ccb8 <__sinit+0x14>
 801ccb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ccb4:	f7ff bff0 	b.w	801cc98 <__sinit_lock_release>
 801ccb8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801ccbc:	6523      	str	r3, [r4, #80]	; 0x50
 801ccbe:	4b13      	ldr	r3, [pc, #76]	; (801cd0c <__sinit+0x68>)
 801ccc0:	4a13      	ldr	r2, [pc, #76]	; (801cd10 <__sinit+0x6c>)
 801ccc2:	681b      	ldr	r3, [r3, #0]
 801ccc4:	62a2      	str	r2, [r4, #40]	; 0x28
 801ccc6:	42a3      	cmp	r3, r4
 801ccc8:	bf04      	itt	eq
 801ccca:	2301      	moveq	r3, #1
 801cccc:	61a3      	streq	r3, [r4, #24]
 801ccce:	4620      	mov	r0, r4
 801ccd0:	f000 f820 	bl	801cd14 <__sfp>
 801ccd4:	6060      	str	r0, [r4, #4]
 801ccd6:	4620      	mov	r0, r4
 801ccd8:	f000 f81c 	bl	801cd14 <__sfp>
 801ccdc:	60a0      	str	r0, [r4, #8]
 801ccde:	4620      	mov	r0, r4
 801cce0:	f000 f818 	bl	801cd14 <__sfp>
 801cce4:	2200      	movs	r2, #0
 801cce6:	60e0      	str	r0, [r4, #12]
 801cce8:	2104      	movs	r1, #4
 801ccea:	6860      	ldr	r0, [r4, #4]
 801ccec:	f7ff ff82 	bl	801cbf4 <std>
 801ccf0:	68a0      	ldr	r0, [r4, #8]
 801ccf2:	2201      	movs	r2, #1
 801ccf4:	2109      	movs	r1, #9
 801ccf6:	f7ff ff7d 	bl	801cbf4 <std>
 801ccfa:	68e0      	ldr	r0, [r4, #12]
 801ccfc:	2202      	movs	r2, #2
 801ccfe:	2112      	movs	r1, #18
 801cd00:	f7ff ff78 	bl	801cbf4 <std>
 801cd04:	2301      	movs	r3, #1
 801cd06:	61a3      	str	r3, [r4, #24]
 801cd08:	e7d2      	b.n	801ccb0 <__sinit+0xc>
 801cd0a:	bf00      	nop
 801cd0c:	0802b818 	.word	0x0802b818
 801cd10:	0801cc3d 	.word	0x0801cc3d

0801cd14 <__sfp>:
 801cd14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cd16:	4607      	mov	r7, r0
 801cd18:	f7ff ffac 	bl	801cc74 <__sfp_lock_acquire>
 801cd1c:	4b1e      	ldr	r3, [pc, #120]	; (801cd98 <__sfp+0x84>)
 801cd1e:	681e      	ldr	r6, [r3, #0]
 801cd20:	69b3      	ldr	r3, [r6, #24]
 801cd22:	b913      	cbnz	r3, 801cd2a <__sfp+0x16>
 801cd24:	4630      	mov	r0, r6
 801cd26:	f7ff ffbd 	bl	801cca4 <__sinit>
 801cd2a:	3648      	adds	r6, #72	; 0x48
 801cd2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801cd30:	3b01      	subs	r3, #1
 801cd32:	d503      	bpl.n	801cd3c <__sfp+0x28>
 801cd34:	6833      	ldr	r3, [r6, #0]
 801cd36:	b30b      	cbz	r3, 801cd7c <__sfp+0x68>
 801cd38:	6836      	ldr	r6, [r6, #0]
 801cd3a:	e7f7      	b.n	801cd2c <__sfp+0x18>
 801cd3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801cd40:	b9d5      	cbnz	r5, 801cd78 <__sfp+0x64>
 801cd42:	4b16      	ldr	r3, [pc, #88]	; (801cd9c <__sfp+0x88>)
 801cd44:	60e3      	str	r3, [r4, #12]
 801cd46:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801cd4a:	6665      	str	r5, [r4, #100]	; 0x64
 801cd4c:	f000 f847 	bl	801cdde <__retarget_lock_init_recursive>
 801cd50:	f7ff ff96 	bl	801cc80 <__sfp_lock_release>
 801cd54:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801cd58:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801cd5c:	6025      	str	r5, [r4, #0]
 801cd5e:	61a5      	str	r5, [r4, #24]
 801cd60:	2208      	movs	r2, #8
 801cd62:	4629      	mov	r1, r5
 801cd64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801cd68:	f7fb fe22 	bl	80189b0 <memset>
 801cd6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801cd70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801cd74:	4620      	mov	r0, r4
 801cd76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cd78:	3468      	adds	r4, #104	; 0x68
 801cd7a:	e7d9      	b.n	801cd30 <__sfp+0x1c>
 801cd7c:	2104      	movs	r1, #4
 801cd7e:	4638      	mov	r0, r7
 801cd80:	f7ff ff62 	bl	801cc48 <__sfmoreglue>
 801cd84:	4604      	mov	r4, r0
 801cd86:	6030      	str	r0, [r6, #0]
 801cd88:	2800      	cmp	r0, #0
 801cd8a:	d1d5      	bne.n	801cd38 <__sfp+0x24>
 801cd8c:	f7ff ff78 	bl	801cc80 <__sfp_lock_release>
 801cd90:	230c      	movs	r3, #12
 801cd92:	603b      	str	r3, [r7, #0]
 801cd94:	e7ee      	b.n	801cd74 <__sfp+0x60>
 801cd96:	bf00      	nop
 801cd98:	0802b818 	.word	0x0802b818
 801cd9c:	ffff0001 	.word	0xffff0001

0801cda0 <_fwalk_reent>:
 801cda0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cda4:	4606      	mov	r6, r0
 801cda6:	4688      	mov	r8, r1
 801cda8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801cdac:	2700      	movs	r7, #0
 801cdae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801cdb2:	f1b9 0901 	subs.w	r9, r9, #1
 801cdb6:	d505      	bpl.n	801cdc4 <_fwalk_reent+0x24>
 801cdb8:	6824      	ldr	r4, [r4, #0]
 801cdba:	2c00      	cmp	r4, #0
 801cdbc:	d1f7      	bne.n	801cdae <_fwalk_reent+0xe>
 801cdbe:	4638      	mov	r0, r7
 801cdc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cdc4:	89ab      	ldrh	r3, [r5, #12]
 801cdc6:	2b01      	cmp	r3, #1
 801cdc8:	d907      	bls.n	801cdda <_fwalk_reent+0x3a>
 801cdca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801cdce:	3301      	adds	r3, #1
 801cdd0:	d003      	beq.n	801cdda <_fwalk_reent+0x3a>
 801cdd2:	4629      	mov	r1, r5
 801cdd4:	4630      	mov	r0, r6
 801cdd6:	47c0      	blx	r8
 801cdd8:	4307      	orrs	r7, r0
 801cdda:	3568      	adds	r5, #104	; 0x68
 801cddc:	e7e9      	b.n	801cdb2 <_fwalk_reent+0x12>

0801cdde <__retarget_lock_init_recursive>:
 801cdde:	4770      	bx	lr

0801cde0 <__retarget_lock_acquire_recursive>:
 801cde0:	4770      	bx	lr

0801cde2 <__retarget_lock_release_recursive>:
 801cde2:	4770      	bx	lr

0801cde4 <__swhatbuf_r>:
 801cde4:	b570      	push	{r4, r5, r6, lr}
 801cde6:	460e      	mov	r6, r1
 801cde8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cdec:	2900      	cmp	r1, #0
 801cdee:	b096      	sub	sp, #88	; 0x58
 801cdf0:	4614      	mov	r4, r2
 801cdf2:	461d      	mov	r5, r3
 801cdf4:	da08      	bge.n	801ce08 <__swhatbuf_r+0x24>
 801cdf6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801cdfa:	2200      	movs	r2, #0
 801cdfc:	602a      	str	r2, [r5, #0]
 801cdfe:	061a      	lsls	r2, r3, #24
 801ce00:	d410      	bmi.n	801ce24 <__swhatbuf_r+0x40>
 801ce02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ce06:	e00e      	b.n	801ce26 <__swhatbuf_r+0x42>
 801ce08:	466a      	mov	r2, sp
 801ce0a:	f000 f903 	bl	801d014 <_fstat_r>
 801ce0e:	2800      	cmp	r0, #0
 801ce10:	dbf1      	blt.n	801cdf6 <__swhatbuf_r+0x12>
 801ce12:	9a01      	ldr	r2, [sp, #4]
 801ce14:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801ce18:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801ce1c:	425a      	negs	r2, r3
 801ce1e:	415a      	adcs	r2, r3
 801ce20:	602a      	str	r2, [r5, #0]
 801ce22:	e7ee      	b.n	801ce02 <__swhatbuf_r+0x1e>
 801ce24:	2340      	movs	r3, #64	; 0x40
 801ce26:	2000      	movs	r0, #0
 801ce28:	6023      	str	r3, [r4, #0]
 801ce2a:	b016      	add	sp, #88	; 0x58
 801ce2c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801ce30 <__smakebuf_r>:
 801ce30:	898b      	ldrh	r3, [r1, #12]
 801ce32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ce34:	079d      	lsls	r5, r3, #30
 801ce36:	4606      	mov	r6, r0
 801ce38:	460c      	mov	r4, r1
 801ce3a:	d507      	bpl.n	801ce4c <__smakebuf_r+0x1c>
 801ce3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ce40:	6023      	str	r3, [r4, #0]
 801ce42:	6123      	str	r3, [r4, #16]
 801ce44:	2301      	movs	r3, #1
 801ce46:	6163      	str	r3, [r4, #20]
 801ce48:	b002      	add	sp, #8
 801ce4a:	bd70      	pop	{r4, r5, r6, pc}
 801ce4c:	ab01      	add	r3, sp, #4
 801ce4e:	466a      	mov	r2, sp
 801ce50:	f7ff ffc8 	bl	801cde4 <__swhatbuf_r>
 801ce54:	9900      	ldr	r1, [sp, #0]
 801ce56:	4605      	mov	r5, r0
 801ce58:	4630      	mov	r0, r6
 801ce5a:	f7ff f96d 	bl	801c138 <_malloc_r>
 801ce5e:	b948      	cbnz	r0, 801ce74 <__smakebuf_r+0x44>
 801ce60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ce64:	059a      	lsls	r2, r3, #22
 801ce66:	d4ef      	bmi.n	801ce48 <__smakebuf_r+0x18>
 801ce68:	f023 0303 	bic.w	r3, r3, #3
 801ce6c:	f043 0302 	orr.w	r3, r3, #2
 801ce70:	81a3      	strh	r3, [r4, #12]
 801ce72:	e7e3      	b.n	801ce3c <__smakebuf_r+0xc>
 801ce74:	4b0d      	ldr	r3, [pc, #52]	; (801ceac <__smakebuf_r+0x7c>)
 801ce76:	62b3      	str	r3, [r6, #40]	; 0x28
 801ce78:	89a3      	ldrh	r3, [r4, #12]
 801ce7a:	6020      	str	r0, [r4, #0]
 801ce7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ce80:	81a3      	strh	r3, [r4, #12]
 801ce82:	9b00      	ldr	r3, [sp, #0]
 801ce84:	6163      	str	r3, [r4, #20]
 801ce86:	9b01      	ldr	r3, [sp, #4]
 801ce88:	6120      	str	r0, [r4, #16]
 801ce8a:	b15b      	cbz	r3, 801cea4 <__smakebuf_r+0x74>
 801ce8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ce90:	4630      	mov	r0, r6
 801ce92:	f000 f8d1 	bl	801d038 <_isatty_r>
 801ce96:	b128      	cbz	r0, 801cea4 <__smakebuf_r+0x74>
 801ce98:	89a3      	ldrh	r3, [r4, #12]
 801ce9a:	f023 0303 	bic.w	r3, r3, #3
 801ce9e:	f043 0301 	orr.w	r3, r3, #1
 801cea2:	81a3      	strh	r3, [r4, #12]
 801cea4:	89a0      	ldrh	r0, [r4, #12]
 801cea6:	4305      	orrs	r5, r0
 801cea8:	81a5      	strh	r5, [r4, #12]
 801ceaa:	e7cd      	b.n	801ce48 <__smakebuf_r+0x18>
 801ceac:	0801cc3d 	.word	0x0801cc3d

0801ceb0 <_malloc_usable_size_r>:
 801ceb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ceb4:	1f18      	subs	r0, r3, #4
 801ceb6:	2b00      	cmp	r3, #0
 801ceb8:	bfbc      	itt	lt
 801ceba:	580b      	ldrlt	r3, [r1, r0]
 801cebc:	18c0      	addlt	r0, r0, r3
 801cebe:	4770      	bx	lr

0801cec0 <_raise_r>:
 801cec0:	291f      	cmp	r1, #31
 801cec2:	b538      	push	{r3, r4, r5, lr}
 801cec4:	4604      	mov	r4, r0
 801cec6:	460d      	mov	r5, r1
 801cec8:	d904      	bls.n	801ced4 <_raise_r+0x14>
 801ceca:	2316      	movs	r3, #22
 801cecc:	6003      	str	r3, [r0, #0]
 801cece:	f04f 30ff 	mov.w	r0, #4294967295
 801ced2:	bd38      	pop	{r3, r4, r5, pc}
 801ced4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801ced6:	b112      	cbz	r2, 801cede <_raise_r+0x1e>
 801ced8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801cedc:	b94b      	cbnz	r3, 801cef2 <_raise_r+0x32>
 801cede:	4620      	mov	r0, r4
 801cee0:	f000 f830 	bl	801cf44 <_getpid_r>
 801cee4:	462a      	mov	r2, r5
 801cee6:	4601      	mov	r1, r0
 801cee8:	4620      	mov	r0, r4
 801ceea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ceee:	f000 b817 	b.w	801cf20 <_kill_r>
 801cef2:	2b01      	cmp	r3, #1
 801cef4:	d00a      	beq.n	801cf0c <_raise_r+0x4c>
 801cef6:	1c59      	adds	r1, r3, #1
 801cef8:	d103      	bne.n	801cf02 <_raise_r+0x42>
 801cefa:	2316      	movs	r3, #22
 801cefc:	6003      	str	r3, [r0, #0]
 801cefe:	2001      	movs	r0, #1
 801cf00:	e7e7      	b.n	801ced2 <_raise_r+0x12>
 801cf02:	2400      	movs	r4, #0
 801cf04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801cf08:	4628      	mov	r0, r5
 801cf0a:	4798      	blx	r3
 801cf0c:	2000      	movs	r0, #0
 801cf0e:	e7e0      	b.n	801ced2 <_raise_r+0x12>

0801cf10 <raise>:
 801cf10:	4b02      	ldr	r3, [pc, #8]	; (801cf1c <raise+0xc>)
 801cf12:	4601      	mov	r1, r0
 801cf14:	6818      	ldr	r0, [r3, #0]
 801cf16:	f7ff bfd3 	b.w	801cec0 <_raise_r>
 801cf1a:	bf00      	nop
 801cf1c:	20000028 	.word	0x20000028

0801cf20 <_kill_r>:
 801cf20:	b538      	push	{r3, r4, r5, lr}
 801cf22:	4d07      	ldr	r5, [pc, #28]	; (801cf40 <_kill_r+0x20>)
 801cf24:	2300      	movs	r3, #0
 801cf26:	4604      	mov	r4, r0
 801cf28:	4608      	mov	r0, r1
 801cf2a:	4611      	mov	r1, r2
 801cf2c:	602b      	str	r3, [r5, #0]
 801cf2e:	f7f2 ff7b 	bl	800fe28 <_kill>
 801cf32:	1c43      	adds	r3, r0, #1
 801cf34:	d102      	bne.n	801cf3c <_kill_r+0x1c>
 801cf36:	682b      	ldr	r3, [r5, #0]
 801cf38:	b103      	cbz	r3, 801cf3c <_kill_r+0x1c>
 801cf3a:	6023      	str	r3, [r4, #0]
 801cf3c:	bd38      	pop	{r3, r4, r5, pc}
 801cf3e:	bf00      	nop
 801cf40:	2006cd08 	.word	0x2006cd08

0801cf44 <_getpid_r>:
 801cf44:	f7f2 bf68 	b.w	800fe18 <_getpid>

0801cf48 <__sread>:
 801cf48:	b510      	push	{r4, lr}
 801cf4a:	460c      	mov	r4, r1
 801cf4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cf50:	f000 f894 	bl	801d07c <_read_r>
 801cf54:	2800      	cmp	r0, #0
 801cf56:	bfab      	itete	ge
 801cf58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801cf5a:	89a3      	ldrhlt	r3, [r4, #12]
 801cf5c:	181b      	addge	r3, r3, r0
 801cf5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801cf62:	bfac      	ite	ge
 801cf64:	6563      	strge	r3, [r4, #84]	; 0x54
 801cf66:	81a3      	strhlt	r3, [r4, #12]
 801cf68:	bd10      	pop	{r4, pc}

0801cf6a <__swrite>:
 801cf6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cf6e:	461f      	mov	r7, r3
 801cf70:	898b      	ldrh	r3, [r1, #12]
 801cf72:	05db      	lsls	r3, r3, #23
 801cf74:	4605      	mov	r5, r0
 801cf76:	460c      	mov	r4, r1
 801cf78:	4616      	mov	r6, r2
 801cf7a:	d505      	bpl.n	801cf88 <__swrite+0x1e>
 801cf7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cf80:	2302      	movs	r3, #2
 801cf82:	2200      	movs	r2, #0
 801cf84:	f000 f868 	bl	801d058 <_lseek_r>
 801cf88:	89a3      	ldrh	r3, [r4, #12]
 801cf8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cf8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801cf92:	81a3      	strh	r3, [r4, #12]
 801cf94:	4632      	mov	r2, r6
 801cf96:	463b      	mov	r3, r7
 801cf98:	4628      	mov	r0, r5
 801cf9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cf9e:	f000 b817 	b.w	801cfd0 <_write_r>

0801cfa2 <__sseek>:
 801cfa2:	b510      	push	{r4, lr}
 801cfa4:	460c      	mov	r4, r1
 801cfa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cfaa:	f000 f855 	bl	801d058 <_lseek_r>
 801cfae:	1c43      	adds	r3, r0, #1
 801cfb0:	89a3      	ldrh	r3, [r4, #12]
 801cfb2:	bf15      	itete	ne
 801cfb4:	6560      	strne	r0, [r4, #84]	; 0x54
 801cfb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801cfba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801cfbe:	81a3      	strheq	r3, [r4, #12]
 801cfc0:	bf18      	it	ne
 801cfc2:	81a3      	strhne	r3, [r4, #12]
 801cfc4:	bd10      	pop	{r4, pc}

0801cfc6 <__sclose>:
 801cfc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cfca:	f000 b813 	b.w	801cff4 <_close_r>
	...

0801cfd0 <_write_r>:
 801cfd0:	b538      	push	{r3, r4, r5, lr}
 801cfd2:	4d07      	ldr	r5, [pc, #28]	; (801cff0 <_write_r+0x20>)
 801cfd4:	4604      	mov	r4, r0
 801cfd6:	4608      	mov	r0, r1
 801cfd8:	4611      	mov	r1, r2
 801cfda:	2200      	movs	r2, #0
 801cfdc:	602a      	str	r2, [r5, #0]
 801cfde:	461a      	mov	r2, r3
 801cfe0:	f7f2 ff59 	bl	800fe96 <_write>
 801cfe4:	1c43      	adds	r3, r0, #1
 801cfe6:	d102      	bne.n	801cfee <_write_r+0x1e>
 801cfe8:	682b      	ldr	r3, [r5, #0]
 801cfea:	b103      	cbz	r3, 801cfee <_write_r+0x1e>
 801cfec:	6023      	str	r3, [r4, #0]
 801cfee:	bd38      	pop	{r3, r4, r5, pc}
 801cff0:	2006cd08 	.word	0x2006cd08

0801cff4 <_close_r>:
 801cff4:	b538      	push	{r3, r4, r5, lr}
 801cff6:	4d06      	ldr	r5, [pc, #24]	; (801d010 <_close_r+0x1c>)
 801cff8:	2300      	movs	r3, #0
 801cffa:	4604      	mov	r4, r0
 801cffc:	4608      	mov	r0, r1
 801cffe:	602b      	str	r3, [r5, #0]
 801d000:	f7f2 ff65 	bl	800fece <_close>
 801d004:	1c43      	adds	r3, r0, #1
 801d006:	d102      	bne.n	801d00e <_close_r+0x1a>
 801d008:	682b      	ldr	r3, [r5, #0]
 801d00a:	b103      	cbz	r3, 801d00e <_close_r+0x1a>
 801d00c:	6023      	str	r3, [r4, #0]
 801d00e:	bd38      	pop	{r3, r4, r5, pc}
 801d010:	2006cd08 	.word	0x2006cd08

0801d014 <_fstat_r>:
 801d014:	b538      	push	{r3, r4, r5, lr}
 801d016:	4d07      	ldr	r5, [pc, #28]	; (801d034 <_fstat_r+0x20>)
 801d018:	2300      	movs	r3, #0
 801d01a:	4604      	mov	r4, r0
 801d01c:	4608      	mov	r0, r1
 801d01e:	4611      	mov	r1, r2
 801d020:	602b      	str	r3, [r5, #0]
 801d022:	f7f2 ff60 	bl	800fee6 <_fstat>
 801d026:	1c43      	adds	r3, r0, #1
 801d028:	d102      	bne.n	801d030 <_fstat_r+0x1c>
 801d02a:	682b      	ldr	r3, [r5, #0]
 801d02c:	b103      	cbz	r3, 801d030 <_fstat_r+0x1c>
 801d02e:	6023      	str	r3, [r4, #0]
 801d030:	bd38      	pop	{r3, r4, r5, pc}
 801d032:	bf00      	nop
 801d034:	2006cd08 	.word	0x2006cd08

0801d038 <_isatty_r>:
 801d038:	b538      	push	{r3, r4, r5, lr}
 801d03a:	4d06      	ldr	r5, [pc, #24]	; (801d054 <_isatty_r+0x1c>)
 801d03c:	2300      	movs	r3, #0
 801d03e:	4604      	mov	r4, r0
 801d040:	4608      	mov	r0, r1
 801d042:	602b      	str	r3, [r5, #0]
 801d044:	f7f2 ff5f 	bl	800ff06 <_isatty>
 801d048:	1c43      	adds	r3, r0, #1
 801d04a:	d102      	bne.n	801d052 <_isatty_r+0x1a>
 801d04c:	682b      	ldr	r3, [r5, #0]
 801d04e:	b103      	cbz	r3, 801d052 <_isatty_r+0x1a>
 801d050:	6023      	str	r3, [r4, #0]
 801d052:	bd38      	pop	{r3, r4, r5, pc}
 801d054:	2006cd08 	.word	0x2006cd08

0801d058 <_lseek_r>:
 801d058:	b538      	push	{r3, r4, r5, lr}
 801d05a:	4d07      	ldr	r5, [pc, #28]	; (801d078 <_lseek_r+0x20>)
 801d05c:	4604      	mov	r4, r0
 801d05e:	4608      	mov	r0, r1
 801d060:	4611      	mov	r1, r2
 801d062:	2200      	movs	r2, #0
 801d064:	602a      	str	r2, [r5, #0]
 801d066:	461a      	mov	r2, r3
 801d068:	f7f2 ff58 	bl	800ff1c <_lseek>
 801d06c:	1c43      	adds	r3, r0, #1
 801d06e:	d102      	bne.n	801d076 <_lseek_r+0x1e>
 801d070:	682b      	ldr	r3, [r5, #0]
 801d072:	b103      	cbz	r3, 801d076 <_lseek_r+0x1e>
 801d074:	6023      	str	r3, [r4, #0]
 801d076:	bd38      	pop	{r3, r4, r5, pc}
 801d078:	2006cd08 	.word	0x2006cd08

0801d07c <_read_r>:
 801d07c:	b538      	push	{r3, r4, r5, lr}
 801d07e:	4d07      	ldr	r5, [pc, #28]	; (801d09c <_read_r+0x20>)
 801d080:	4604      	mov	r4, r0
 801d082:	4608      	mov	r0, r1
 801d084:	4611      	mov	r1, r2
 801d086:	2200      	movs	r2, #0
 801d088:	602a      	str	r2, [r5, #0]
 801d08a:	461a      	mov	r2, r3
 801d08c:	f7f2 fee6 	bl	800fe5c <_read>
 801d090:	1c43      	adds	r3, r0, #1
 801d092:	d102      	bne.n	801d09a <_read_r+0x1e>
 801d094:	682b      	ldr	r3, [r5, #0]
 801d096:	b103      	cbz	r3, 801d09a <_read_r+0x1e>
 801d098:	6023      	str	r3, [r4, #0]
 801d09a:	bd38      	pop	{r3, r4, r5, pc}
 801d09c:	2006cd08 	.word	0x2006cd08

0801d0a0 <checkint>:
 801d0a0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801d0a4:	f240 33fe 	movw	r3, #1022	; 0x3fe
 801d0a8:	429a      	cmp	r2, r3
 801d0aa:	b570      	push	{r4, r5, r6, lr}
 801d0ac:	dd2a      	ble.n	801d104 <checkint+0x64>
 801d0ae:	f240 4333 	movw	r3, #1075	; 0x433
 801d0b2:	429a      	cmp	r2, r3
 801d0b4:	dc24      	bgt.n	801d100 <checkint+0x60>
 801d0b6:	1a9b      	subs	r3, r3, r2
 801d0b8:	f1a3 0620 	sub.w	r6, r3, #32
 801d0bc:	f04f 32ff 	mov.w	r2, #4294967295
 801d0c0:	fa02 f403 	lsl.w	r4, r2, r3
 801d0c4:	fa02 f606 	lsl.w	r6, r2, r6
 801d0c8:	f1c3 0520 	rsb	r5, r3, #32
 801d0cc:	fa22 f505 	lsr.w	r5, r2, r5
 801d0d0:	4334      	orrs	r4, r6
 801d0d2:	432c      	orrs	r4, r5
 801d0d4:	409a      	lsls	r2, r3
 801d0d6:	ea20 0202 	bic.w	r2, r0, r2
 801d0da:	ea21 0404 	bic.w	r4, r1, r4
 801d0de:	4322      	orrs	r2, r4
 801d0e0:	f1a3 0420 	sub.w	r4, r3, #32
 801d0e4:	f1c3 0220 	rsb	r2, r3, #32
 801d0e8:	d10c      	bne.n	801d104 <checkint+0x64>
 801d0ea:	40d8      	lsrs	r0, r3
 801d0ec:	fa01 f302 	lsl.w	r3, r1, r2
 801d0f0:	4318      	orrs	r0, r3
 801d0f2:	40e1      	lsrs	r1, r4
 801d0f4:	4308      	orrs	r0, r1
 801d0f6:	f000 0001 	and.w	r0, r0, #1
 801d0fa:	f1d0 0002 	rsbs	r0, r0, #2
 801d0fe:	bd70      	pop	{r4, r5, r6, pc}
 801d100:	2002      	movs	r0, #2
 801d102:	e7fc      	b.n	801d0fe <checkint+0x5e>
 801d104:	2000      	movs	r0, #0
 801d106:	e7fa      	b.n	801d0fe <checkint+0x5e>

0801d108 <pow>:
 801d108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d10c:	ee10 4a90 	vmov	r4, s1
 801d110:	ed2d 8b0a 	vpush	{d8-d12}
 801d114:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 801d118:	ee11 7a90 	vmov	r7, s3
 801d11c:	f10a 32ff 	add.w	r2, sl, #4294967295
 801d120:	f240 73fd 	movw	r3, #2045	; 0x7fd
 801d124:	429a      	cmp	r2, r3
 801d126:	ee10 6a10 	vmov	r6, s0
 801d12a:	ee11 0a10 	vmov	r0, s2
 801d12e:	b086      	sub	sp, #24
 801d130:	46d4      	mov	ip, sl
 801d132:	ea4f 5517 	mov.w	r5, r7, lsr #20
 801d136:	d806      	bhi.n	801d146 <pow+0x3e>
 801d138:	f3c5 030a 	ubfx	r3, r5, #0, #11
 801d13c:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 801d140:	2b7f      	cmp	r3, #127	; 0x7f
 801d142:	f240 8156 	bls.w	801d3f2 <pow+0x2ea>
 801d146:	1802      	adds	r2, r0, r0
 801d148:	eb47 0107 	adc.w	r1, r7, r7
 801d14c:	f06f 0e01 	mvn.w	lr, #1
 801d150:	f112 39ff 	adds.w	r9, r2, #4294967295
 801d154:	f141 38ff 	adc.w	r8, r1, #4294967295
 801d158:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 801d15c:	45ce      	cmp	lr, r9
 801d15e:	eb73 0808 	sbcs.w	r8, r3, r8
 801d162:	d23f      	bcs.n	801d1e4 <pow+0xdc>
 801d164:	ea52 0301 	orrs.w	r3, r2, r1
 801d168:	f04f 0300 	mov.w	r3, #0
 801d16c:	d10c      	bne.n	801d188 <pow+0x80>
 801d16e:	19b6      	adds	r6, r6, r6
 801d170:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 801d174:	4164      	adcs	r4, r4
 801d176:	42b3      	cmp	r3, r6
 801d178:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801d17c:	41a3      	sbcs	r3, r4
 801d17e:	f0c0 808c 	bcc.w	801d29a <pow+0x192>
 801d182:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801d186:	e028      	b.n	801d1da <pow+0xd2>
 801d188:	4da3      	ldr	r5, [pc, #652]	; (801d418 <pow+0x310>)
 801d18a:	42ac      	cmp	r4, r5
 801d18c:	bf08      	it	eq
 801d18e:	429e      	cmpeq	r6, r3
 801d190:	d107      	bne.n	801d1a2 <pow+0x9a>
 801d192:	1800      	adds	r0, r0, r0
 801d194:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 801d198:	417f      	adcs	r7, r7
 801d19a:	4283      	cmp	r3, r0
 801d19c:	4b9f      	ldr	r3, [pc, #636]	; (801d41c <pow+0x314>)
 801d19e:	41bb      	sbcs	r3, r7
 801d1a0:	e7ed      	b.n	801d17e <pow+0x76>
 801d1a2:	19b6      	adds	r6, r6, r6
 801d1a4:	489e      	ldr	r0, [pc, #632]	; (801d420 <pow+0x318>)
 801d1a6:	4164      	adcs	r4, r4
 801d1a8:	42b3      	cmp	r3, r6
 801d1aa:	eb70 0504 	sbcs.w	r5, r0, r4
 801d1ae:	d374      	bcc.n	801d29a <pow+0x192>
 801d1b0:	4281      	cmp	r1, r0
 801d1b2:	bf08      	it	eq
 801d1b4:	429a      	cmpeq	r2, r3
 801d1b6:	d170      	bne.n	801d29a <pow+0x192>
 801d1b8:	4a9a      	ldr	r2, [pc, #616]	; (801d424 <pow+0x31c>)
 801d1ba:	4294      	cmp	r4, r2
 801d1bc:	bf08      	it	eq
 801d1be:	429e      	cmpeq	r6, r3
 801d1c0:	d0df      	beq.n	801d182 <pow+0x7a>
 801d1c2:	4294      	cmp	r4, r2
 801d1c4:	ea6f 0707 	mvn.w	r7, r7
 801d1c8:	bf34      	ite	cc
 801d1ca:	2400      	movcc	r4, #0
 801d1cc:	2401      	movcs	r4, #1
 801d1ce:	0fff      	lsrs	r7, r7, #31
 801d1d0:	42bc      	cmp	r4, r7
 801d1d2:	f040 81d9 	bne.w	801d588 <pow+0x480>
 801d1d6:	ee21 0b01 	vmul.f64	d0, d1, d1
 801d1da:	b006      	add	sp, #24
 801d1dc:	ecbd 8b0a 	vpop	{d8-d12}
 801d1e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d1e4:	eb16 0806 	adds.w	r8, r6, r6
 801d1e8:	eb44 0904 	adc.w	r9, r4, r4
 801d1ec:	f118 31ff 	adds.w	r1, r8, #4294967295
 801d1f0:	f169 0200 	sbc.w	r2, r9, #0
 801d1f4:	458e      	cmp	lr, r1
 801d1f6:	4193      	sbcs	r3, r2
 801d1f8:	d223      	bcs.n	801d242 <pow+0x13a>
 801d1fa:	ee20 0b00 	vmul.f64	d0, d0, d0
 801d1fe:	2c00      	cmp	r4, #0
 801d200:	da12      	bge.n	801d228 <pow+0x120>
 801d202:	4639      	mov	r1, r7
 801d204:	f7ff ff4c 	bl	801d0a0 <checkint>
 801d208:	2801      	cmp	r0, #1
 801d20a:	d10d      	bne.n	801d228 <pow+0x120>
 801d20c:	eeb1 0b40 	vneg.f64	d0, d0
 801d210:	ea58 0309 	orrs.w	r3, r8, r9
 801d214:	d10a      	bne.n	801d22c <pow+0x124>
 801d216:	2f00      	cmp	r7, #0
 801d218:	dadf      	bge.n	801d1da <pow+0xd2>
 801d21a:	b006      	add	sp, #24
 801d21c:	ecbd 8b0a 	vpop	{d8-d12}
 801d220:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d224:	f000 ba34 	b.w	801d690 <__math_divzero>
 801d228:	2000      	movs	r0, #0
 801d22a:	e7f1      	b.n	801d210 <pow+0x108>
 801d22c:	2f00      	cmp	r7, #0
 801d22e:	dad4      	bge.n	801d1da <pow+0xd2>
 801d230:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801d234:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801d238:	ed8d 7b00 	vstr	d7, [sp]
 801d23c:	ed9d 0b00 	vldr	d0, [sp]
 801d240:	e7cb      	b.n	801d1da <pow+0xd2>
 801d242:	2c00      	cmp	r4, #0
 801d244:	da2c      	bge.n	801d2a0 <pow+0x198>
 801d246:	4639      	mov	r1, r7
 801d248:	f7ff ff2a 	bl	801d0a0 <checkint>
 801d24c:	b930      	cbnz	r0, 801d25c <pow+0x154>
 801d24e:	b006      	add	sp, #24
 801d250:	ecbd 8b0a 	vpop	{d8-d12}
 801d254:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d258:	f000 ba32 	b.w	801d6c0 <__math_invalid>
 801d25c:	2801      	cmp	r0, #1
 801d25e:	bf14      	ite	ne
 801d260:	2000      	movne	r0, #0
 801d262:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 801d266:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801d26a:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 801d26e:	f3c5 020a 	ubfx	r2, r5, #0, #11
 801d272:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 801d276:	2b7f      	cmp	r3, #127	; 0x7f
 801d278:	d92d      	bls.n	801d2d6 <pow+0x1ce>
 801d27a:	4b67      	ldr	r3, [pc, #412]	; (801d418 <pow+0x310>)
 801d27c:	2000      	movs	r0, #0
 801d27e:	429c      	cmp	r4, r3
 801d280:	bf08      	it	eq
 801d282:	4286      	cmpeq	r6, r0
 801d284:	f43f af7d 	beq.w	801d182 <pow+0x7a>
 801d288:	f240 31bd 	movw	r1, #957	; 0x3bd
 801d28c:	428a      	cmp	r2, r1
 801d28e:	d80c      	bhi.n	801d2aa <pow+0x1a2>
 801d290:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801d294:	42b0      	cmp	r0, r6
 801d296:	41a3      	sbcs	r3, r4
 801d298:	d204      	bcs.n	801d2a4 <pow+0x19c>
 801d29a:	ee31 0b00 	vadd.f64	d0, d1, d0
 801d29e:	e79c      	b.n	801d1da <pow+0xd2>
 801d2a0:	2000      	movs	r0, #0
 801d2a2:	e7e4      	b.n	801d26e <pow+0x166>
 801d2a4:	ee30 0b41 	vsub.f64	d0, d0, d1
 801d2a8:	e797      	b.n	801d1da <pow+0xd2>
 801d2aa:	2e01      	cmp	r6, #1
 801d2ac:	eb74 0303 	sbcs.w	r3, r4, r3
 801d2b0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801d2b4:	bf34      	ite	cc
 801d2b6:	2301      	movcc	r3, #1
 801d2b8:	2300      	movcs	r3, #0
 801d2ba:	4295      	cmp	r5, r2
 801d2bc:	bf8c      	ite	hi
 801d2be:	2500      	movhi	r5, #0
 801d2c0:	2501      	movls	r5, #1
 801d2c2:	42ab      	cmp	r3, r5
 801d2c4:	f000 809d 	beq.w	801d402 <pow+0x2fa>
 801d2c8:	b006      	add	sp, #24
 801d2ca:	ecbd 8b0a 	vpop	{d8-d12}
 801d2ce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d2d2:	f000 b9d5 	b.w	801d680 <__math_oflow>
 801d2d6:	f1bc 0f00 	cmp.w	ip, #0
 801d2da:	d10b      	bne.n	801d2f4 <pow+0x1ec>
 801d2dc:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 801d410 <pow+0x308>
 801d2e0:	ee20 7b07 	vmul.f64	d7, d0, d7
 801d2e4:	ec53 2b17 	vmov	r2, r3, d7
 801d2e8:	ee17 6a10 	vmov	r6, s14
 801d2ec:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 801d2f0:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 801d2f4:	4b4c      	ldr	r3, [pc, #304]	; (801d428 <pow+0x320>)
 801d2f6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 801d2fa:	4423      	add	r3, r4
 801d2fc:	f3c3 3246 	ubfx	r2, r3, #13, #7
 801d300:	1519      	asrs	r1, r3, #20
 801d302:	0d1b      	lsrs	r3, r3, #20
 801d304:	051b      	lsls	r3, r3, #20
 801d306:	eba4 0903 	sub.w	r9, r4, r3
 801d30a:	4b48      	ldr	r3, [pc, #288]	; (801d42c <pow+0x324>)
 801d30c:	ee04 1a10 	vmov	s8, r1
 801d310:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 801d314:	f1b6 0800 	subs.w	r8, r6, #0
 801d318:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 801d31c:	ec49 8b15 	vmov	d5, r8, r9
 801d320:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 801d324:	eea5 6b07 	vfma.f64	d6, d5, d7
 801d328:	ed93 7b00 	vldr	d7, [r3]
 801d32c:	ed93 5b02 	vldr	d5, [r3, #8]
 801d330:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 801d334:	eea4 2b07 	vfma.f64	d2, d4, d7
 801d338:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 801d33c:	ee36 ab02 	vadd.f64	d10, d6, d2
 801d340:	ee32 2b4a 	vsub.f64	d2, d2, d10
 801d344:	eea4 7b05 	vfma.f64	d7, d4, d5
 801d348:	ed93 5b04 	vldr	d5, [r3, #16]
 801d34c:	ee32 2b06 	vadd.f64	d2, d2, d6
 801d350:	ee37 7b02 	vadd.f64	d7, d7, d2
 801d354:	ee26 5b05 	vmul.f64	d5, d6, d5
 801d358:	ed93 4b08 	vldr	d4, [r3, #32]
 801d35c:	ee26 0b05 	vmul.f64	d0, d6, d5
 801d360:	eeb0 9b40 	vmov.f64	d9, d0
 801d364:	ee95 9b06 	vfnms.f64	d9, d5, d6
 801d368:	ed93 5b06 	vldr	d5, [r3, #24]
 801d36c:	ee3a 8b00 	vadd.f64	d8, d10, d0
 801d370:	ee26 bb00 	vmul.f64	d11, d6, d0
 801d374:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 801d378:	eea6 5b04 	vfma.f64	d5, d6, d4
 801d37c:	ee3a ab48 	vsub.f64	d10, d10, d8
 801d380:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 801d384:	ee37 9b09 	vadd.f64	d9, d7, d9
 801d388:	ee3a ab00 	vadd.f64	d10, d10, d0
 801d38c:	eea6 4b03 	vfma.f64	d4, d6, d3
 801d390:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 801d394:	ee39 ab0a 	vadd.f64	d10, d9, d10
 801d398:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 801d39c:	eea6 3b0c 	vfma.f64	d3, d6, d12
 801d3a0:	eea0 4b03 	vfma.f64	d4, d0, d3
 801d3a4:	eea0 5b04 	vfma.f64	d5, d0, d4
 801d3a8:	eeab ab05 	vfma.f64	d10, d11, d5
 801d3ac:	ee38 6b0a 	vadd.f64	d6, d8, d10
 801d3b0:	ee21 7b06 	vmul.f64	d7, d1, d6
 801d3b4:	ee17 3a90 	vmov	r3, s15
 801d3b8:	eeb0 5b47 	vmov.f64	d5, d7
 801d3bc:	f3c3 560a 	ubfx	r6, r3, #20, #11
 801d3c0:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 801d3c4:	18b2      	adds	r2, r6, r2
 801d3c6:	2a3e      	cmp	r2, #62	; 0x3e
 801d3c8:	ee91 5b06 	vfnms.f64	d5, d1, d6
 801d3cc:	ee38 8b46 	vsub.f64	d8, d8, d6
 801d3d0:	ee38 ab0a 	vadd.f64	d10, d8, d10
 801d3d4:	eea1 5b0a 	vfma.f64	d5, d1, d10
 801d3d8:	d92b      	bls.n	801d432 <pow+0x32a>
 801d3da:	2a00      	cmp	r2, #0
 801d3dc:	da0b      	bge.n	801d3f6 <pow+0x2ee>
 801d3de:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801d3e2:	ee37 0b00 	vadd.f64	d0, d7, d0
 801d3e6:	2800      	cmp	r0, #0
 801d3e8:	f43f aef7 	beq.w	801d1da <pow+0xd2>
 801d3ec:	eeb1 0b40 	vneg.f64	d0, d0
 801d3f0:	e6f3      	b.n	801d1da <pow+0xd2>
 801d3f2:	2000      	movs	r0, #0
 801d3f4:	e77e      	b.n	801d2f4 <pow+0x1ec>
 801d3f6:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 801d3fa:	d919      	bls.n	801d430 <pow+0x328>
 801d3fc:	2b00      	cmp	r3, #0
 801d3fe:	f6bf af63 	bge.w	801d2c8 <pow+0x1c0>
 801d402:	b006      	add	sp, #24
 801d404:	ecbd 8b0a 	vpop	{d8-d12}
 801d408:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d40c:	f000 b930 	b.w	801d670 <__math_uflow>
 801d410:	00000000 	.word	0x00000000
 801d414:	43300000 	.word	0x43300000
 801d418:	3ff00000 	.word	0x3ff00000
 801d41c:	fff00000 	.word	0xfff00000
 801d420:	ffe00000 	.word	0xffe00000
 801d424:	7fe00000 	.word	0x7fe00000
 801d428:	c0196aab 	.word	0xc0196aab
 801d42c:	0802bcc0 	.word	0x0802bcc0
 801d430:	2600      	movs	r6, #0
 801d432:	495d      	ldr	r1, [pc, #372]	; (801d5a8 <pow+0x4a0>)
 801d434:	ed91 4b02 	vldr	d4, [r1, #8]
 801d438:	ed91 3b00 	vldr	d3, [r1]
 801d43c:	eeb0 6b44 	vmov.f64	d6, d4
 801d440:	eea7 6b03 	vfma.f64	d6, d7, d3
 801d444:	ee16 5a10 	vmov	r5, s12
 801d448:	ee36 6b44 	vsub.f64	d6, d6, d4
 801d44c:	ed91 4b04 	vldr	d4, [r1, #16]
 801d450:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 801d454:	eea6 7b04 	vfma.f64	d7, d6, d4
 801d458:	eeb0 0b47 	vmov.f64	d0, d7
 801d45c:	ed91 7b06 	vldr	d7, [r1, #24]
 801d460:	18dc      	adds	r4, r3, r3
 801d462:	f104 030f 	add.w	r3, r4, #15
 801d466:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 801d46a:	eea6 0b07 	vfma.f64	d0, d6, d7
 801d46e:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 801d472:	ee35 0b00 	vadd.f64	d0, d5, d0
 801d476:	ee20 6b00 	vmul.f64	d6, d0, d0
 801d47a:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 801d47e:	ed91 5b08 	vldr	d5, [r1, #32]
 801d482:	ee30 7b07 	vadd.f64	d7, d0, d7
 801d486:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 801d48a:	eea0 5b04 	vfma.f64	d5, d0, d4
 801d48e:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 801d492:	eea6 7b05 	vfma.f64	d7, d6, d5
 801d496:	ee26 6b06 	vmul.f64	d6, d6, d6
 801d49a:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 801d49e:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 801d4a2:	f8d2 e004 	ldr.w	lr, [r2, #4]
 801d4a6:	eea0 5b04 	vfma.f64	d5, d0, d4
 801d4aa:	1940      	adds	r0, r0, r5
 801d4ac:	2700      	movs	r7, #0
 801d4ae:	eb17 020c 	adds.w	r2, r7, ip
 801d4b2:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 801d4b6:	eea6 7b05 	vfma.f64	d7, d6, d5
 801d4ba:	2e00      	cmp	r6, #0
 801d4bc:	d15f      	bne.n	801d57e <pow+0x476>
 801d4be:	42bd      	cmp	r5, r7
 801d4c0:	db13      	blt.n	801d4ea <pow+0x3e2>
 801d4c2:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 801d4c6:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 801d4ca:	4610      	mov	r0, r2
 801d4cc:	ec41 0b10 	vmov	d0, r0, r1
 801d4d0:	eea7 0b00 	vfma.f64	d0, d7, d0
 801d4d4:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801d590 <pow+0x488>
 801d4d8:	ee20 0b07 	vmul.f64	d0, d0, d7
 801d4dc:	b006      	add	sp, #24
 801d4de:	ecbd 8b0a 	vpop	{d8-d12}
 801d4e2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d4e6:	f000 b903 	b.w	801d6f0 <__math_check_oflow>
 801d4ea:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801d4ee:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 801d4f2:	4610      	mov	r0, r2
 801d4f4:	ec41 0b15 	vmov	d5, r0, r1
 801d4f8:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801d4fc:	ee27 6b05 	vmul.f64	d6, d7, d5
 801d500:	ee35 7b06 	vadd.f64	d7, d5, d6
 801d504:	eeb0 3bc7 	vabs.f64	d3, d7
 801d508:	eeb4 3bc4 	vcmpe.f64	d3, d4
 801d50c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d510:	ed9f 0b21 	vldr	d0, [pc, #132]	; 801d598 <pow+0x490>
 801d514:	d52a      	bpl.n	801d56c <pow+0x464>
 801d516:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801d51a:	ee35 5b47 	vsub.f64	d5, d5, d7
 801d51e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d522:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 801d526:	ee35 6b06 	vadd.f64	d6, d5, d6
 801d52a:	bf48      	it	mi
 801d52c:	eeb0 4b43 	vmovmi.f64	d4, d3
 801d530:	ee37 3b04 	vadd.f64	d3, d7, d4
 801d534:	ee34 5b43 	vsub.f64	d5, d4, d3
 801d538:	ee35 7b07 	vadd.f64	d7, d5, d7
 801d53c:	ee37 7b06 	vadd.f64	d7, d7, d6
 801d540:	ee37 7b03 	vadd.f64	d7, d7, d3
 801d544:	ee37 7b44 	vsub.f64	d7, d7, d4
 801d548:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801d54c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d550:	d104      	bne.n	801d55c <pow+0x454>
 801d552:	4632      	mov	r2, r6
 801d554:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 801d558:	ec43 2b17 	vmov	d7, r2, r3
 801d55c:	ed8d 0b02 	vstr	d0, [sp, #8]
 801d560:	ed9d 6b02 	vldr	d6, [sp, #8]
 801d564:	ee26 6b00 	vmul.f64	d6, d6, d0
 801d568:	ed8d 6b04 	vstr	d6, [sp, #16]
 801d56c:	ee27 0b00 	vmul.f64	d0, d7, d0
 801d570:	b006      	add	sp, #24
 801d572:	ecbd 8b0a 	vpop	{d8-d12}
 801d576:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d57a:	f000 b8b0 	b.w	801d6de <__math_check_uflow>
 801d57e:	ec43 2b10 	vmov	d0, r2, r3
 801d582:	eea7 0b00 	vfma.f64	d0, d7, d0
 801d586:	e628      	b.n	801d1da <pow+0xd2>
 801d588:	ed9f 0b05 	vldr	d0, [pc, #20]	; 801d5a0 <pow+0x498>
 801d58c:	e625      	b.n	801d1da <pow+0xd2>
 801d58e:	bf00      	nop
 801d590:	00000000 	.word	0x00000000
 801d594:	7f000000 	.word	0x7f000000
 801d598:	00000000 	.word	0x00000000
 801d59c:	00100000 	.word	0x00100000
	...
 801d5a8:	0802cd08 	.word	0x0802cd08
 801d5ac:	00000000 	.word	0x00000000

0801d5b0 <sqrt>:
 801d5b0:	b508      	push	{r3, lr}
 801d5b2:	ed2d 8b04 	vpush	{d8-d9}
 801d5b6:	eeb0 8b40 	vmov.f64	d8, d0
 801d5ba:	f000 f837 	bl	801d62c <__ieee754_sqrt>
 801d5be:	eeb4 8b48 	vcmp.f64	d8, d8
 801d5c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d5c6:	d60c      	bvs.n	801d5e2 <sqrt+0x32>
 801d5c8:	ed9f 9b07 	vldr	d9, [pc, #28]	; 801d5e8 <sqrt+0x38>
 801d5cc:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801d5d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d5d4:	d505      	bpl.n	801d5e2 <sqrt+0x32>
 801d5d6:	f7fb f9b3 	bl	8018940 <__errno>
 801d5da:	ee89 0b09 	vdiv.f64	d0, d9, d9
 801d5de:	2321      	movs	r3, #33	; 0x21
 801d5e0:	6003      	str	r3, [r0, #0]
 801d5e2:	ecbd 8b04 	vpop	{d8-d9}
 801d5e6:	bd08      	pop	{r3, pc}
	...

0801d5f0 <sqrtf>:
 801d5f0:	b508      	push	{r3, lr}
 801d5f2:	ed2d 8b02 	vpush	{d8}
 801d5f6:	eeb0 8a40 	vmov.f32	s16, s0
 801d5fa:	f000 f81a 	bl	801d632 <__ieee754_sqrtf>
 801d5fe:	eeb4 8a48 	vcmp.f32	s16, s16
 801d602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d606:	d60c      	bvs.n	801d622 <sqrtf+0x32>
 801d608:	eddf 8a07 	vldr	s17, [pc, #28]	; 801d628 <sqrtf+0x38>
 801d60c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801d610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d614:	d505      	bpl.n	801d622 <sqrtf+0x32>
 801d616:	f7fb f993 	bl	8018940 <__errno>
 801d61a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801d61e:	2321      	movs	r3, #33	; 0x21
 801d620:	6003      	str	r3, [r0, #0]
 801d622:	ecbd 8b02 	vpop	{d8}
 801d626:	bd08      	pop	{r3, pc}
 801d628:	00000000 	.word	0x00000000

0801d62c <__ieee754_sqrt>:
 801d62c:	eeb1 0bc0 	vsqrt.f64	d0, d0
 801d630:	4770      	bx	lr

0801d632 <__ieee754_sqrtf>:
 801d632:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801d636:	4770      	bx	lr

0801d638 <with_errno>:
 801d638:	b513      	push	{r0, r1, r4, lr}
 801d63a:	4604      	mov	r4, r0
 801d63c:	ed8d 0b00 	vstr	d0, [sp]
 801d640:	f7fb f97e 	bl	8018940 <__errno>
 801d644:	ed9d 0b00 	vldr	d0, [sp]
 801d648:	6004      	str	r4, [r0, #0]
 801d64a:	b002      	add	sp, #8
 801d64c:	bd10      	pop	{r4, pc}

0801d64e <xflow>:
 801d64e:	b082      	sub	sp, #8
 801d650:	b158      	cbz	r0, 801d66a <xflow+0x1c>
 801d652:	eeb1 7b40 	vneg.f64	d7, d0
 801d656:	ed8d 7b00 	vstr	d7, [sp]
 801d65a:	ed9d 7b00 	vldr	d7, [sp]
 801d65e:	2022      	movs	r0, #34	; 0x22
 801d660:	ee20 0b07 	vmul.f64	d0, d0, d7
 801d664:	b002      	add	sp, #8
 801d666:	f7ff bfe7 	b.w	801d638 <with_errno>
 801d66a:	eeb0 7b40 	vmov.f64	d7, d0
 801d66e:	e7f2      	b.n	801d656 <xflow+0x8>

0801d670 <__math_uflow>:
 801d670:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801d678 <__math_uflow+0x8>
 801d674:	f7ff bfeb 	b.w	801d64e <xflow>
 801d678:	00000000 	.word	0x00000000
 801d67c:	10000000 	.word	0x10000000

0801d680 <__math_oflow>:
 801d680:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801d688 <__math_oflow+0x8>
 801d684:	f7ff bfe3 	b.w	801d64e <xflow>
 801d688:	00000000 	.word	0x00000000
 801d68c:	70000000 	.word	0x70000000

0801d690 <__math_divzero>:
 801d690:	b082      	sub	sp, #8
 801d692:	2800      	cmp	r0, #0
 801d694:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801d698:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 801d69c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 801d6a0:	ed8d 7b00 	vstr	d7, [sp]
 801d6a4:	ed9d 0b00 	vldr	d0, [sp]
 801d6a8:	ed9f 7b03 	vldr	d7, [pc, #12]	; 801d6b8 <__math_divzero+0x28>
 801d6ac:	2022      	movs	r0, #34	; 0x22
 801d6ae:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801d6b2:	b002      	add	sp, #8
 801d6b4:	f7ff bfc0 	b.w	801d638 <with_errno>
	...

0801d6c0 <__math_invalid>:
 801d6c0:	eeb0 7b40 	vmov.f64	d7, d0
 801d6c4:	eeb4 7b47 	vcmp.f64	d7, d7
 801d6c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d6cc:	ee30 6b40 	vsub.f64	d6, d0, d0
 801d6d0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801d6d4:	d602      	bvs.n	801d6dc <__math_invalid+0x1c>
 801d6d6:	2021      	movs	r0, #33	; 0x21
 801d6d8:	f7ff bfae 	b.w	801d638 <with_errno>
 801d6dc:	4770      	bx	lr

0801d6de <__math_check_uflow>:
 801d6de:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801d6e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d6e6:	d102      	bne.n	801d6ee <__math_check_uflow+0x10>
 801d6e8:	2022      	movs	r0, #34	; 0x22
 801d6ea:	f7ff bfa5 	b.w	801d638 <with_errno>
 801d6ee:	4770      	bx	lr

0801d6f0 <__math_check_oflow>:
 801d6f0:	ed9f 6b07 	vldr	d6, [pc, #28]	; 801d710 <__math_check_oflow+0x20>
 801d6f4:	eeb0 7bc0 	vabs.f64	d7, d0
 801d6f8:	eeb4 7b46 	vcmp.f64	d7, d6
 801d6fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d700:	dd02      	ble.n	801d708 <__math_check_oflow+0x18>
 801d702:	2022      	movs	r0, #34	; 0x22
 801d704:	f7ff bf98 	b.w	801d638 <with_errno>
 801d708:	4770      	bx	lr
 801d70a:	bf00      	nop
 801d70c:	f3af 8000 	nop.w
 801d710:	ffffffff 	.word	0xffffffff
 801d714:	7fefffff 	.word	0x7fefffff

0801d718 <_init>:
 801d718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d71a:	bf00      	nop
 801d71c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d71e:	bc08      	pop	{r3}
 801d720:	469e      	mov	lr, r3
 801d722:	4770      	bx	lr

0801d724 <_fini>:
 801d724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d726:	bf00      	nop
 801d728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d72a:	bc08      	pop	{r3}
 801d72c:	469e      	mov	lr, r3
 801d72e:	4770      	bx	lr
